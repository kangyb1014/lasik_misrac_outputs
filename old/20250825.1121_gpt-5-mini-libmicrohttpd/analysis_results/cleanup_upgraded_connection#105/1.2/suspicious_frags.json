{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of cleanup_upgraded_connection:\n```c\nstatic void\ncleanup_upgraded_connection (struct MHD_Connection *connection)\n{\n  struct MHD_UpgradeResponseHandle *urh = connection->urh;\n\n  if (NULL == urh)\n    return;\n#ifdef HTTPS_SUPPORT\n  /* Signal remote client the end of TLS connection by\n   * gracefully closing TLS session. */\n  if (0 != (connection->daemon->options & MHD_USE_TLS))\n    gnutls_bye (connection->tls_session,\n                GNUTLS_SHUT_WR);\n\n  if (MHD_INVALID_SOCKET != urh->mhd.socket)\n    MHD_socket_close_chk_ (urh->mhd.socket);\n\n  if (MHD_INVALID_SOCKET != urh->app.socket)\n    MHD_socket_close_chk_ (urh->app.socket);\n#endif /* HTTPS_SUPPORT */\n  connection->urh = NULL;\n  free (urh);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function cleanup_upgraded_connection:\nstruct MHD_Connection\n{\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * Next pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *nextE;\n\n  /**\n   * Previous pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *prevE;\n#endif\n\n  /**\n   * Next pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *next;\n\n  /**\n   * Previous pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *prev;\n\n  /**\n   * Next pointer for the XDLL organizing connections by timeout.\n   * This DLL can be either the\n   * 'manual_timeout_head/manual_timeout_tail' or the\n   * 'normal_timeout_head/normal_timeout_tail', depending on whether a\n   * custom timeout is set for the connection.\n   */\n  struct MHD_Connection *nextX;\n\n  /**\n   * Previous pointer for the XDLL organizing connections by timeout.\n   */\n  struct MHD_Connection *prevX;\n\n  /**\n   * Reference to the MHD_Daemon struct.\n   */\n  struct MHD_Daemon *daemon;\n\n  /**\n   * Request-specific data\n   */\n  struct MHD_Request rq;\n\n  /**\n   * Reply-specific data\n   */\n  struct MHD_Reply rp;\n\n  /**\n   * The memory pool is created whenever we first read from the TCP\n   * stream and destroyed at the end of each request (and re-created\n   * for the next request).  In the meantime, this pointer is NULL.\n   * The pool is used for all connection-related data except for the\n   * response (which maybe shared between connections) and the IP\n   * address (which persists across individual requests).\n   */\n  struct MemoryPool *pool;\n\n  /**\n   * We allow the main application to associate some pointer with the\n   * TCP connection (which may span multiple HTTP requests).  Here is\n   * where we store it.  (MHD does not know or care what it is).\n   * The location is given to the #MHD_NotifyConnectionCallback and\n   * also accessible via #MHD_CONNECTION_INFO_SOCKET_CONTEXT.\n   */\n  void *socket_context;\n\n  /**\n   * Close connection after sending response?\n   * Functions may change value from \"Unknown\" or \"KeepAlive\" to \"Must close\",\n   * but no functions reset value \"Must Close\" to any other value.\n   */\n  enum MHD_ConnKeepAlive keepalive;\n\n  /**\n   * Buffer for reading requests.  Allocated in pool.  Actually one\n   * byte larger than @e read_buffer_size (if non-NULL) to allow for\n   * 0-termination.\n   */\n  char *read_buffer;\n\n  /**\n   * Buffer for writing response (headers only).  Allocated\n   * in pool.\n   */\n  char *write_buffer;\n\n  /**\n   * Foreign address (of length @e addr_len).  MALLOCED (not\n   * in pool!).\n   */\n  struct sockaddr_storage *addr;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Thread handle for this connection (if we are using\n   * one thread per connection).\n   */\n  MHD_thread_handle_ID_ tid;\n#endif\n\n  /**\n   * Size of @e read_buffer (in bytes).\n   * This value indicates how many bytes we're willing to read\n   * into the buffer.\n   */\n  size_t read_buffer_size;\n\n  /**\n   * Position where we currently append data in @e read_buffer (the\n   * next char after the last valid position).\n   */\n  size_t read_buffer_offset;\n\n  /**\n   * Size of @e write_buffer (in bytes).\n   */\n  size_t write_buffer_size;\n\n  /**\n   * Offset where we are with sending from @e write_buffer.\n   */\n  size_t write_buffer_send_offset;\n\n  /**\n   * Last valid location in write_buffer (where do we\n   * append and up to where is it safe to send?)\n   */\n  size_t write_buffer_append_offset;\n\n  /**\n   * Position in the 100 CONTINUE message that\n   * we need to send when receiving http 1.1 requests.\n   */\n  size_t continue_message_write_offset;\n\n  /**\n   * Length of the foreign address.\n   */\n  socklen_t addr_len;\n\n  /**\n   * Last time this connection had any activity\n   * (reading or writing).\n   */\n  uint64_t last_activity;\n\n  /**\n   * After how many milliseconds of inactivity should\n   * this connection time out?\n   * Zero for no timeout.\n   */\n  uint64_t connection_timeout_ms;\n\n  /**\n   * Socket for this connection.  Set to #MHD_INVALID_SOCKET if\n   * this connection has died (daemon should clean\n   * up in that case).\n   */\n  MHD_socket socket_fd;\n\n  /**\n   * true if @e socket_fd is not TCP/IP (a UNIX domain socket, a pipe),\n   * false (TCP/IP) otherwise.\n   */\n  enum MHD_tristate is_nonip;\n\n  /**\n   * true if #socket_fd is non-blocking, false otherwise.\n   */\n  bool sk_nonblck;\n\n  /**\n   * true if connection socket has set SIGPIPE suppression\n   */\n  bool sk_spipe_suppress;\n\n  /**\n   * Tracks TCP_CORK / TCP_NOPUSH of the connection socket.\n   */\n  enum MHD_tristate sk_corked;\n\n  /**\n   * Tracks TCP_NODELAY state of the connection socket.\n   */\n  enum MHD_tristate sk_nodelay;\n\n  /**\n   * Has this socket been closed for reading (i.e.  other side closed\n   * the connection)?  If so, we must completely close the connection\n   * once we are done sending our response (and stop trying to read\n   * from this socket).\n   */\n  bool read_closed;\n\n  /**\n   * Some error happens during processing the connection therefore this\n   * connection must be closed.\n   * The error may come from the client side (like wrong request format),\n   * from the application side (like data callback returned error), or from\n   * the OS side (like out-of-memory).\n   */\n  bool stop_with_error;\n\n  /**\n   * Response queued early, before the request is fully processed,\n   * the client upload is rejected.\n   * The connection cannot be reused for additional requests as the current\n   * request is incompletely read and it is unclear where is the initial\n   * byte of the next request.\n   */\n  bool discard_request;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Set to `true` if the thread has been joined.\n   */\n  bool thread_joined;\n#endif\n\n  /**\n   * Are we currently inside the \"idle\" handler (to avoid recursively\n   * invoking it).\n   */\n  bool in_idle;\n\n  /**\n   * Connection is in the cleanup DL-linked list.\n   */\n  bool in_cleanup;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * What is the state of this socket in relation to epoll?\n   */\n  enum MHD_EpollState epoll_state;\n#endif\n\n  /**\n   * State in the FSM for this connection.\n   */\n  enum MHD_CONNECTION_STATE state;\n\n  /**\n   * What is this connection waiting for?\n   */\n  enum MHD_ConnectionEventLoopInfo event_loop_info;\n\n  /**\n   * Function used for reading HTTP request stream.\n   */\n  ReceiveCallback recv_cls;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * If this connection was upgraded, this points to\n   * the upgrade response details such that the\n   * #thread_main_connection_upgrade()-logic can perform the\n   * bi-directional forwarding.\n   */\n  struct MHD_UpgradeResponseHandle *urh;\n#endif /* UPGRADE_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n\n  /**\n   * State required for HTTPS/SSL/TLS support.\n   */\n  gnutls_session_t tls_session;\n\n  /**\n   * State of connection's TLS layer\n   */\n  enum MHD_TLS_CONN_STATE tls_state;\n\n  /**\n   * Could it be that we are ready to read due to TLS buffers\n   * even though the socket is not?\n   */\n  bool tls_read_ready;\n#endif /* HTTPS_SUPPORT */\n\n  /**\n   * Is the connection suspended?\n   */\n  bool suspended;\n\n  /**\n   * Are we currently in the #MHD_AccessHandlerCallback\n   * for this connection (and thus eligible to receive\n   * calls to #MHD_queue_response()?).\n   */\n  bool in_access_handler;\n\n  /**\n   * Is the connection wanting to resume?\n   */\n  volatile bool resuming;\n\n  /**\n   * Special member to be returned by #MHD_get_connection_info()\n   */\n  union MHD_ConnectionInfo connection_info_dummy;\n}\n...\nstruct MHD_UpgradeResponseHandle\n{\n  /**\n   * The connection for which this is an upgrade handle.  Note that\n   * because a response may be shared over many connections, this may\n   * not be the only upgrade handle for the response of this connection.\n   */\n  struct MHD_Connection *connection;\n\n#ifdef HTTPS_SUPPORT\n  /**\n   * Kept in a DLL per daemon.\n   */\n  struct MHD_UpgradeResponseHandle *next;\n\n  /**\n   * Kept in a DLL per daemon.\n   */\n  struct MHD_UpgradeResponseHandle *prev;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * Next pointer for the EDLL listing urhs that are epoll-ready.\n   */\n  struct MHD_UpgradeResponseHandle *nextE;\n\n  /**\n   * Previous pointer for the EDLL listing urhs that are epoll-ready.\n   */\n  struct MHD_UpgradeResponseHandle *prevE;\n\n  /**\n   * Specifies whether urh already in EDLL list of ready connections.\n   */\n  bool in_eready_list;\n#endif\n\n  /**\n   * The buffer for receiving data from TLS to\n   * be passed to the application.  Contains @e in_buffer_size\n   * bytes (unless @e in_buffer_size is zero). Do not free!\n   */\n  char *in_buffer;\n\n  /**\n   * The buffer for receiving data from the application to\n   * be passed to TLS.  Contains @e out_buffer_size\n   * bytes (unless @e out_buffer_size is zero). Do not free!\n   */\n  char *out_buffer;\n\n  /**\n   * Size of the @e in_buffer.\n   * Set to 0 if the TLS connection went down for reading or socketpair\n   * went down for writing.\n   */\n  size_t in_buffer_size;\n\n  /**\n   * Size of the @e out_buffer.\n   * Set to 0 if the TLS connection went down for writing or socketpair\n   * went down for reading.\n   */\n  size_t out_buffer_size;\n\n  /**\n   * Number of bytes actually in use in the @e in_buffer.  Can be larger\n   * than @e in_buffer_size if and only if @a in_buffer_size is zero and\n   * we still have bytes that can be forwarded.\n   * Reset to zero if all data was forwarded to socketpair or\n   * if socketpair went down for writing.\n   */\n  size_t in_buffer_used;\n\n  /**\n   * Number of bytes actually in use in the @e out_buffer. Can be larger\n   * than @e out_buffer_size if and only if @a out_buffer_size is zero and\n   * we still have bytes that can be forwarded.\n   * Reset to zero if all data was forwarded to TLS connection or\n   * if TLS connection went down for writing.\n   */\n  size_t out_buffer_used;\n\n  /**\n   * The socket we gave to the application (r/w).\n   */\n  struct UpgradeEpollHandle app;\n\n  /**\n   * If @a app_sock was a socketpair, our end of it, otherwise\n   * #MHD_INVALID_SOCKET; (r/w).\n   */\n  struct UpgradeEpollHandle mhd;\n\n  /**\n   * Emergency IO buffer we use in case the memory pool has literally\n   * nothing left.\n   */\n  char e_buf[RESERVE_EBUF_SIZE];\n\n#endif /* HTTPS_SUPPORT */\n\n  /**\n   * Set to true after the application finished with the socket\n   * by #MHD_UPGRADE_ACTION_CLOSE.\n   *\n   * When BOTH @e was_closed (changed by command from application)\n   * AND @e clean_ready (changed internally by MHD) are set to\n   * #MHD_YES, function #MHD_resume_connection() will move this\n   * connection to cleanup list.\n   * @remark This flag could be changed from any thread.\n   */\n  volatile bool was_closed;\n\n  /**\n   * Set to true if connection is ready for cleanup.\n   *\n   * In TLS mode functions #MHD_connection_finish_forward_() must\n   * be called before setting this flag to true.\n   *\n   * In thread-per-connection mode, true in this flag means\n   * that connection's thread exited or about to exit and will\n   * not use MHD_Connection::urh data anymore.\n   *\n   * In any mode true in this flag also means that\n   * MHD_Connection::urh data will not be used for socketpair\n   * forwarding and forwarding itself is finished.\n   *\n   * When BOTH @e was_closed (changed by command from application)\n   * AND @e clean_ready (changed internally by MHD) are set to\n   * true, function #MHD_resume_connection() will move this\n   * connection to cleanup list.\n   * @remark This flag could be changed from thread that process\n   * connection's recv(), send() and response.\n   */\n  volatile bool clean_ready;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragments. The code uses only standard C constructs: static function, pointer access and dereference, conditional compilation (#ifdef), structure members, function calls (gnutls_bye, MHD_socket_close_chk_, free), NULL and standard types (bool, volatile, size_t, socklen_t). There are no occurrences of known compiler-specific extensions that are explicitly documented as extensions, such as: GCC/Clang __attribute__ or __extension__ tokens, typeof, statement-expressions ({ ... }), nested functions, inline assembler (asm / __asm__), GNU designated initializers or trailing commas in non-standard contexts, compiler-specific keywords, or other implementation-defined language features. Conditional compilation and use of external library functions are not language extensions. Therefore no fragments require further investigation for MISRA C 2023 Rule 1.2."
}