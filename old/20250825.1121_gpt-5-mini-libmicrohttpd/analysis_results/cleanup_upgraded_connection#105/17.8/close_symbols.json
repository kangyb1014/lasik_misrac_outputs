{
  "user_message": "Target function code is:\n```c\nstatic void\ncleanup_upgraded_connection (struct MHD_Connection *connection)\n{\n  struct MHD_UpgradeResponseHandle *urh = connection->urh;\n\n  if (NULL == urh)\n    return;\n#ifdef HTTPS_SUPPORT\n  /* Signal remote client the end of TLS connection by\n   * gracefully closing TLS session. */\n  if (0 != (connection->daemon->options & MHD_USE_TLS))\n    gnutls_bye (connection->tls_session,\n                GNUTLS_SHUT_WR);\n\n  if (MHD_INVALID_SOCKET != urh->mhd.socket)\n    MHD_socket_close_chk_ (urh->mhd.socket);\n\n  if (MHD_INVALID_SOCKET != urh->app.socket)\n    MHD_socket_close_chk_ (urh->app.socket);\n#endif /* HTTPS_SUPPORT */\n  connection->urh = NULL;\n  free (urh);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'cleanup_upgraded_connection': {'callees': [], 'callers': ['MHD_cleanup_connections']}, 'MHD_cleanup_connections': {'callees': ['__builtin_unreachable', 'cleanup_upgraded_connection', 'MHD_pool_destroy', 'MHD_ip_limit_del', 'MHD_destroy_response'], 'callers': ['MHD_add_connection', 'internal_run_from_select', 'MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread', 'close_all_connections', 'MHD_get_daemon_info']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (definition)",
    "struct MHD_UpgradeResponseHandle (definition)",
    "struct MHD_Daemon (definition) -- if separate from MHD_Connection",
    "connection->urh (field) as declared in struct MHD_Connection",
    "MHD_INVALID_SOCKET (macro/constant)",
    "MHD_USE_TLS (macro/constant)",
    "HTTPS_SUPPORT (compile-time macro)",
    "MHD_socket_close_chk_ (function prototype)",
    "gnutls_bye (function prototype)",
    "free (function prototype)"
  ],
  "explanation": "To decide whether cleanup_upgraded_connection violates the MISRA rule \"A function parameter should not be modified\" we must be able to distinguish modifications of the parameter variable connection itself from modifications of the object it points to and must ensure no called routine can indirectly modify the parameter variable. Specifically:\n\n- struct MHD_Connection (definition): shows that connection is a pointer to a struct and declares the urh field; needed to determine that the statement connection->urh = NULL modifies a member of the pointed-to object (allowed) rather than reassigning the parameter variable connection (prohibited).\n\n- connection->urh (field) as declared in struct MHD_Connection: makes explicit the type of urh (pointer to MHD_UpgradeResponseHandle) so you can tell what connection->urh = NULL does.\n\n- struct MHD_UpgradeResponseHandle (definition): required to understand the types of urh->mhd and urh->app and to confirm that subsequent calls (e.g. closing sockets, free(urh)) operate on the pointed-to data, not on the parameter variable.\n\n- struct MHD_Daemon (definition) -- if daemon is a separate type: required to verify that access to connection->daemon->options does not produce any indirect modification of the parameter variable.\n\n- MHD_INVALID_SOCKET / MHD_USE_TLS (macros/constants) and HTTPS_SUPPORT (compile-time macro): needed to understand conditional branches and which code paths are active; this affects whether URL assignments/side-effects occur but does not in itself change whether the parameter variable is modified.\n\n- MHD_socket_close_chk_ (prototype), gnutls_bye (prototype), free (prototype): include the prototypes to confirm these functions are not invoked in a way that can modify the local parameter variable connection (for example, by taking its address). In the target code they are called with urh's fields, but their signatures should be checked to ensure they don't accept something like a pointer-to-pointer to connection or otherwise produce side-effects on the parameter variable.\n\nCollectively these symbols are sufficient to determine whether any statement or callee in the function performs an assignment to the parameter variable connection itself (which would violate MISRA) versus only modifying the object pointed to by connection (which is allowed)."
}