{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_noninheritable_:\n```c\nint\nMHD_socket_noninheritable_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFD);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | FD_CLOEXEC) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFD,\n                    flags | FD_CLOEXEC)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  if (! SetHandleInformation ((HANDLE) sock,\n                              HANDLE_FLAG_INHERIT,\n                              0))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_socket_noninheritable_:\n#define MHD_POSIX_SOCKETS 1\n...\ntypedef int MHD_socket\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler language extensions in the provided code. The conditional compilation (#if defined/MHD_POSIX_SOCKETS, #elif defined/MHD_WINSOCK_SOCKETS, #endif) is standard preprocessor usage. System calls and symbols such as fcntl, F_GETFD, FD_CLOEXEC, SetHandleInformation, and HANDLE are OS/library APIs or macros, not compiler language extensions. The cast (HANDLE) sock is a standard C cast. The typedef (typedef int MHD_socket) and the #define MHD_POSIX_SOCKETS 1 are standard C constructs. There are no occurrences of known compiler-extension constructs such as __attribute__, __asm__, __declspec, typeof, statement-expressions ({ ... }), nested functions, or __builtin_* intrinsics. The unusual style element return ! 0 is valid standard C (logical negation of 0 yields 1). Therefore there are no code fragments that need investigation for MISRA C 2023 Rule 1.2 (use of language extensions)."
}