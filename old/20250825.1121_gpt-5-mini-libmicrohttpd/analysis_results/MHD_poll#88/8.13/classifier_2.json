{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Based on the single call site, there is no definite violation. The fragment passes a non-const pointer (struct MHD_Daemon *daemon) to MHD_poll_all; this is acceptable if MHD_poll_all (or other call sites) may modify the daemon. A violation would occur if MHD_poll_all (and all uses of that pointer) only read from daemon and do not modify it \u2014 in that case the parameter and local pointer should be const-qualified (e.g. const struct MHD_Daemon *), and leaving it non-const would breach MISRA C 2023 Rule 8.13."
}