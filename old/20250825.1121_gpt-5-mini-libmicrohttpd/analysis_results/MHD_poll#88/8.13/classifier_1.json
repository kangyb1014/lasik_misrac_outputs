{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_poll_listen_socket (daemon,\n                                 may_block);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be determined from the single call expression alone. The fragment simply passes the pointer 'daemon' to MHD_poll_listen_socket; passing a non-const pointer is acceptable if the callee (or the caller) may modify the pointee. If, however, the parameter 'struct MHD_Daemon *daemon' in MHD_poll (and the corresponding parameter in MHD_poll_listen_socket) do not modify the pointed object, then they should be declared as pointers to const (e.g. 'const struct MHD_Daemon *') and the current non-const declarations would violate MISRA C 2023 Rule 8.13."
}