{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);",
    "memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);"
  ],
  "explanation": "Only uses of functions from <string.h> are relevant to Rule 21.17. The two memcpy calls above are therefore flagged for investigation. Other code fragments need not be investigated for this rule because:\n\n- No other <string.h> functions (memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn, etc.) are called in this function.\n- The code contains logic that bounds the sizes passed to memcpy: bytes_have is derived as (ctx->count & (SHA256_BLOCK_SIZE - 1)) so 0 <= bytes_have < SHA256_BLOCK_SIZE, bytes_left is SHA256_BLOCK_SIZE - bytes_have, and after the loop length < SHA256_BLOCK_SIZE. These conditions (together with the preceding if/while structure) are intended to ensure that bytes_have + copied_size does not exceed SHA256_BLOCK_SIZE.\n- Calls to sha256_transform are only made when there is at least SHA256_BLOCK_SIZE bytes available (while loop condition), so those calls do not invoke string.h functions and are guarded by length checks.\n- The assertion mhd_assert((data != NULL) || (length == 0)) ensures data is not dereferenced when length > 0 in typical builds; however this assertion should be considered during investigation since assertions may be disabled in production.\n\nGiven Rule 21.17 focuses on accesses beyond object bounds performed by string.h functions, only the two memcpy invocations require further inspection."
}