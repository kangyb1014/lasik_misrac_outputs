{
  "user_message": "An agent A claimed that the following MHD_MD5_finish code violates the MISRA C 2023 rule 14.3.\n<misra_rule>\nMISRA C 2023 Rule 14.3 is Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_finish.\n```c\nvoid\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n    /* Process the full block. */\n    md5_transform (ctx->H, ctx->buffer);\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n  /* Process the full final block. */\n  md5_transform (ctx->H, ctx->buffer);\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen _MHD_PUT_32BIT_LE_UNALIGNED is not defined and MHD_FAVOR_SMALL_CODE is defined, the preprocessor produces an unconditional if (1) around the block (i.e. a controlling expression that is the constant 1). That controlling expression is invariant (always true) and is not an allowed exception (not an infinite loop or the permitted do-while case), so it violates MISRA C 2023 Rule 14.3.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_MD5_finish:\nstruct Md5Ctx\n{\n  uint32_t H[MD5_HASH_SIZE_WORDS];         /**< Intermediate hash value / digest at end of calculation */\n  uint32_t buffer[MD5_BLOCK_SIZE_WORDS];   /**< MD5 input data buffer */\n  uint64_t count;                          /**< number of bytes, mod 2^64 */\n}\n...\n#define MD5_BLOCK_SIZE (MD5_BLOCK_SIZE_BITS/8)\n...\n#define MD5_SIZE_OF_LEN_ADD (MD5_SIZE_OF_LEN_ADD_BITS/8)\n...\n#define _MHD_UINT32_ALIGN _MHD_ALIGNOF(uint32_t)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. With _MHD_PUT_32BIT_LE_UNALIGNED not defined and MHD_FAVOR_SMALL_CODE defined, the preprocessor removes the '#ifndef MHD_FAVOR_SMALL_CODE' guarded sub-expression, leaving the source containing an unconditional 'if (1)' before the block that writes the digest. That controlling expression is a compile-time invariant (always true) and does not fall under the two permitted exceptions (not an infinite loop and not the permitted do-while integer-constant case). Therefore the code, as preprocessed under the given macro combination, violates MISRA C 2023 Rule 14.3."
}