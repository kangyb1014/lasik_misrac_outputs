{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_version:\n```c\n_MHD_EXTERN const char *\nMHD_get_version (void)\n{\n#ifdef PACKAGE_VERSION\n  return PACKAGE_VERSION;\n#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_get_version:\n#define PACKAGE_VERSION \"1.0.1\"\n...\n#define MHD_snprintf_ snprintf\n...\n#define MHD_VERSION 0x01000100\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in this function are compile-time invariant and thus no fragments need investigation for MISRA C 2023 Rule 14.3. Rationale:\n- The #ifdef/#else is a preprocessor conditional, not a runtime controlling expression of a loop/branch subject to Rule 14.3. When PACKAGE_VERSION is defined, the function immediately returns a macro string \u2014 there are no controlling expressions at all.\n- In the #else branch the only runtime conditionals are:\n  - if (0 == ver[0]) \u2014 this depends on the static variable ver which is initialized to zeros but is written by MHD_snprintf_ on first successful call; therefore it is not an invariant controlling expression at compile time.\n  - if ((0 >= res) || (sizeof(ver) <= res)) \u2014 this depends on the runtime value res (and only one operand uses sizeof, which is a compile-time constant but the overall expression is runtime-dependent). \n- There are no while/for/do-while loops or switch statements with constant controlling expressions in the provided code. The allowed exceptions (infinite loops or do-while false constant) do not apply because those constructs are not present.\n- The uses of the constant MHD_VERSION produce constant operands inside a formatting call, but these are not controlling expressions.\nGiven the above, there are no code fragments that violate or warrant further investigation under Rule 14.3 in the supplied function."
}