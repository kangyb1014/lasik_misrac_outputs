{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_version:\n```c\n_MHD_EXTERN const char *\nMHD_get_version (void)\n{\n#ifdef PACKAGE_VERSION\n  return PACKAGE_VERSION;\n#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_get_version:\n#define PACKAGE_VERSION \"1.0.1\"\n...\n#define MHD_snprintf_ snprintf\n...\n#define MHD_VERSION 0x01000100\n...\nstatic void\nprint_version (void)\n{\n  printf (\"%s (GNU libmicrohttpd\", self_name);\n  if (0 != build_revision[0])\n    printf (\"; %s\", build_revision);\n  printf (\") %s\\n\", MHD_get_version ());\n  printf (\"%s\\n\", tool_copyright);\n}\n...\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#else  /* !PACKAGE_VERSION */\n  static char ver[12] = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n  if (0 == ver[0])\n  {\n    int res = MHD_snprintf_ (ver,\n                             sizeof(ver),\n                             \"%x.%x.%x\",\n                             (int) (((uint32_t) MHD_VERSION >> 24) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 16) & 0xFF),\n                             (int) (((uint32_t) MHD_VERSION >> 8) & 0xFF));\n    if ((0 >= res) || (sizeof(ver) <= res))\n      return \"0.0.0\"; /* Can't return real version */\n  }\n  return ver;\n#endif /* !PACKAGE_VERSION */"
  ],
  "explanation": "The rest of the code in the provided files does not contain other statically unreachable constructs. The active compilation branch (the #ifdef PACKAGE_VERSION branch that returns PACKAGE_VERSION) is enabled because PACKAGE_VERSION is defined in the project, so that branch is reachable. The only code that would be excluded (and thus effectively never part of any translation unit built with the current configuration) is the alternative #else branch listed above. Other functions and conditionals (e.g. print_version, check_apply_params and their runtime conditional returns) are conditional at runtime and therefore not statically unreachable; no other code fragments in the supplied snippets are provably unreachable given the provided macros and symbols."
}