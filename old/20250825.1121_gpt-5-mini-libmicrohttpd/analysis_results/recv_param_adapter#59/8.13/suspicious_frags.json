{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of recv_param_adapter:\n```c\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function recv_param_adapter:\nenum MHD_EpollState\n{\n\n  /**\n   * The socket is not involved with a defined state in epoll() right\n   * now.\n   */\n  MHD_EPOLL_STATE_UNREADY = 0,\n\n  /**\n   * epoll() told us that data was ready for reading, and we did\n   * not consume all of it yet.\n   */\n  MHD_EPOLL_STATE_READ_READY = 1,\n\n  /**\n   * epoll() told us that space was available for writing, and we did\n   * not consume all of it yet.\n   */\n  MHD_EPOLL_STATE_WRITE_READY = 2,\n\n  /**\n   * Is this connection currently in the 'eready' EDLL?\n   */\n  MHD_EPOLL_STATE_IN_EREADY_EDLL = 4,\n\n  /**\n   * Is this connection currently in the epoll() set?\n   */\n  MHD_EPOLL_STATE_IN_EPOLL_SET = 8,\n\n  /**\n   * Is this connection currently suspended?\n   */\n  MHD_EPOLL_STATE_SUSPENDED = 16,\n\n  /**\n   * Is this connection in some error state?\n   */\n  MHD_EPOLL_STATE_ERROR = 128\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments requiring investigation for MISRA C 2023 Rule 8.13. The only pointer parameters in recv_param_adapter are:\n- struct MHD_Connection *connection: this object is mutated (connection->epoll_state is modified), so it cannot be const-qualified.\n- void *other: this is passed to MHD_recv_ as the receive buffer; that API writes into the buffer, so it must be a non-const pointer.\nNo other pointers (local pointer variables or pointer-to-function uses) appear in the function, and the enum cast and other expressions are not pointer-related. Therefore there are no places where a pointer could reasonably be made to point to a const-qualified type."
}