{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of recv_param_adapter:\n```c\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function recv_param_adapter:\n#define MHD_INVALID_SOCKET (-1)\n...\n#define MHD_SCKT_SEND_MAX_SIZE_ SSIZE_MAX\n...\n#define MHD_SCKT_ERR_IS_EAGAIN_(err) MHD_SCKT_ERR_IS_((err),MHD_SCKT_EAGAIN_)\n...\n#define MHD_SCKT_ERR_IS_EINTR_(err) MHD_SCKT_ERR_IS_((err),MHD_SCKT_EINTR_)\n...\n#define MHD_SCKT_ERR_IS_REMOTE_DISCNN_(err) (MHD_SCKT_ERR_IS_((err),MHD_SCKT_ECONNRESET_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ECONNABORTED_))\n...\n#define MHD_SCKT_ERR_IS_LOW_RESOURCES_(err) (MHD_SCKT_ERR_IS_((err),MHD_SCKT_EMFILE_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENFILE_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENOMEM_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENOBUFS_))\n...\n#define MHD_SCKT_EOPNOTSUPP_ EOPNOTSUPP\n...\n#define MHD_SCKT_ENOTCONN_ ENOTCONN\n...\n#define MHD_SCKT_EINVAL_ EINVAL\n...\n#define MHD_SCKT_EBADF_ EBADF\n...\n#define MHD_ERR_NOTCONN_ (-3075)\n...\n#define MHD_ERR_AGAIN_ (-3073)\n...\n#define MHD_ERR_CONNRESET_ (-3074)\n...\n#define MHD_ERR_OPNOTSUPP_ (-3079)\n...\n#define MHD_ERR_INVAL_ (-3078)\n...\n#define MHD_ERR_NOMEM_ (-3076)\n...\n#define MHD_ERR_BADF_ (-3077)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;"
  ],
  "explanation": "All other branches in the function perform checks or state updates that clearly affect runtime behaviour: they map distinct socket errors to distinct MHD error codes (removing any of those would change the returned error), or modify connection->epoll_state under EPOLL_SUPPORT (which affects readiness handling). The initial guard (invalid socket / connection closed) prevents an attempt to use an invalid socket and cannot be removed. The cap i = MHD_SCKT_SEND_MAX_SIZE_ constrains the requested read length relative to ssize_t limits and can affect the result of MHD_recv_. The EAGAIN/EINTR handling returns MHD_ERR_AGAIN_ (and under EPOLL_SUPPORT updates epoll_state) which clearly changes behaviour if removed. The final catch-all return inside the error branch is needed to map any unhandled socket error to an MHD error. Therefore none of those other fragments are candidates for dead code and do not need further investigation."
}