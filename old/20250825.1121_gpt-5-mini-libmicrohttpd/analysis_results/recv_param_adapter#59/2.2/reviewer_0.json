{
  "user_message": "An agent A claimed that the following recv_param_adapter code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of recv_param_adapter.\n```c\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe explicit check for MHD_SCKT_ENOTCONN_ returns MHD_ERR_NOTCONN_. Later in the error-handling path any unhandled error is treated as a hard error and the function returns MHD_ERR_NOTCONN_ as well (the final \"Treat any other error as a hard error.\" return). Therefore the ENOTCONN-specific branch performs an operation (returning MHD_ERR_NOTCONN_) whose removal would not change program behaviour when MHD_socket_get_error_() yields ENOTCONN. This makes that branch dead code in the given context.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function recv_param_adapter:\n#define MHD_INVALID_SOCKET (-1)\n...\n#define MHD_SCKT_SEND_MAX_SIZE_ SSIZE_MAX\n...\n#define MHD_SCKT_ERR_IS_EAGAIN_(err) MHD_SCKT_ERR_IS_((err),MHD_SCKT_EAGAIN_)\n...\n#define MHD_SCKT_ERR_IS_EINTR_(err) MHD_SCKT_ERR_IS_((err),MHD_SCKT_EINTR_)\n...\n#define MHD_SCKT_ERR_IS_REMOTE_DISCNN_(err) (MHD_SCKT_ERR_IS_((err),MHD_SCKT_ECONNRESET_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ECONNABORTED_))\n...\n#define MHD_SCKT_ERR_IS_LOW_RESOURCES_(err) (MHD_SCKT_ERR_IS_((err),MHD_SCKT_EMFILE_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENFILE_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENOMEM_)||MHD_SCKT_ERR_IS_((err),MHD_SCKT_ENOBUFS_))\n...\n#define MHD_SCKT_EOPNOTSUPP_ EOPNOTSUPP\n...\n#define MHD_SCKT_ENOTCONN_ ENOTCONN\n...\n#define MHD_SCKT_EINVAL_ EINVAL\n...\n#define MHD_SCKT_EBADF_ EBADF\n...\n#define MHD_ERR_NOTCONN_ (-3075)\n...\n#define MHD_ERR_AGAIN_ (-3073)\n...\n#define MHD_ERR_CONNRESET_ (-3074)\n...\n#define MHD_ERR_OPNOTSUPP_ (-3079)\n...\n#define MHD_ERR_INVAL_ (-3078)\n...\n#define MHD_ERR_NOMEM_ (-3076)\n...\n#define MHD_ERR_BADF_ (-3077)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The ENOTCONN-specific branch (if (MHD_SCKT_ERR_IS_(err, MHD_SCKT_ENOTCONN_)) return MHD_ERR_NOTCONN_;) is reachable and, given the provided macro/constant definitions, performs an operation (returning MHD_ERR_NOTCONN_) that the final catch-all \"Treat any other error as a hard error.\" also returns. Therefore removing that branch would not change program behaviour for the case err == ENOTCONN, so the branch is redundant and meets the definition of dead code in MISRA C 2023 Rule 2.2. Caveat: if the MHD_SCKT_ERR_IS_ macro or the error-mapping semantics could differ on other platforms or be changed to introduce side-effects, the branch might not be redundant; but with the supplied definitions the branch is dead and the report of a Rule 2.2 violation is correct."
}