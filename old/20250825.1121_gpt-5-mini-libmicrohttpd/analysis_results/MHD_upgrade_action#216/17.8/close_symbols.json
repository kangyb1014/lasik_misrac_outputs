{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}, 'MHD_upgraded_connection_mark_app_closed_': {'callees': ['__builtin_unreachable', 'MHD_DLOG'], 'callers': ['MHD_upgrade_action']}, 'run_usock': {'callees': ['make_blocking', 'send_all', 'MHD_upgrade_action', 'ws_receive_frame', 'ws_send_frame'], 'callers': []}, 'uh_cb': {'callees': ['MHD_upgrade_action'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_UpgradeResponseHandle (definition: fields used by MHD_upgrade_action \u2014 at least: connection, was_closed, app (and type of app.socket))",
    "struct MHD_Connection (definition: fields used \u2014 at least: daemon, state)",
    "struct MHD_Daemon (definition: field used \u2014 at least: options)",
    "enum MHD_UpgradeAction and enumerators (MHD_UPGRADE_ACTION_CLOSE, MHD_UPGRADE_ACTION_CORK_ON, MHD_UPGRADE_ACTION_CORK_OFF)",
    "enum MHD_Result and enumerators (MHD_YES, MHD_NO)",
    "macro/constant MHD_CONNECTION_UPGRADE",
    "macro/constant MHD_USE_TLS and conditional HTTPS_SUPPORT macro",
    "symbol MHD_upgraded_connection_mark_app_closed_ (prototype and implementation)",
    "symbol MHD_connection_set_cork_state_ (prototype and implementation)",
    "macro mhd_assert (definition/expansion)",
    "function shutdown and macro SHUT_RDWR (declaration/semantics)"
  ],
  "explanation": "To determine whether MHD_upgrade_action modifies its parameters (MISRA rule: a function parameter shall not be modified) the analyzer needs the definitions and semantics of all objects and callees that the function reads or passes on. Specifically:\n\n- struct MHD_UpgradeResponseHandle: The function receives a pointer 'urh' and dereferences urh->connection, urh->was_closed and urh->app.socket. The structure definition (including the type of app.socket) is required to confirm that the function does not reassign the parameter variable 'urh' itself and to see what objects are being modified (modifying the pointee is allowed).\n\n- struct MHD_Connection: 'connection' is derived from urh->connection and passed to callees and inspected for ->daemon and ->state. The structure definition is needed to check whether any operations could implicitly modify the caller's parameter variable (they cannot) and to understand what is passed to callees.\n\n- struct MHD_Daemon: daemon->options is read for a TLS-related branch. Its definition is needed to understand the conditional and whether any macros or inline code could perform assignments affecting parameters.\n\n- enum MHD_UpgradeAction and its enumerators: to confirm how the 'action' parameter is used (switch cases) and ensure no code path assigns to the 'action' parameter variable.\n\n- enum MHD_Result and MHD_YES/MHD_NO: needed to interpret return expressions and to check if any macros expand to assignments that might touch parameters.\n\n- MHD_CONNECTION_UPGRADE constant: used in an assertion; need to see assertion expansion/semantics in relation to local variables.\n\n- MHD_USE_TLS and HTTPS_SUPPORT: the TLS branch is conditional; the definitions determine whether shutdown() call is compiled and if any macro expansions could modify parameters.\n\n- MHD_upgraded_connection_mark_app_closed_ (prototype/implementation): the function is called with 'connection' and its body may modify data reachable from urh (allowed) but we must ensure it does not somehow modify the caller's parameter variables (e.g., via pointer-to-pointer or unusual macro tricks). Seeing its prototype/definition rules out any modification of the local parameter variables in MHD_upgrade_action.\n\n- MHD_connection_set_cork_state_ (prototype/implementation): similarly, called with 'connection' and returns a bool; its implementation must be inspected to ensure it does not modify the function's parameter variables (it may modify the pointee but not the parameter variable itself).\n\n- mhd_assert macro: assertions sometimes expand to expressions or function-like constructs; need the macro expansion to ensure it does not perform assignments to the local parameter variables.\n\n- shutdown and SHUT_RDWR: shutdown is invoked on urh->app.socket inside a conditional. The declaration of shutdown and the value of SHUT_RDWR are needed to ensure that this call cannot reassign the parameter variable (it cannot), and to document side-effects on pointee objects only.\n\nThese symbols are sufficient to conclude whether MHD_upgrade_action assigns to or otherwise modifies its formal parameters (the pointer variable 'urh' or the value parameter 'action'), as opposed to modifying objects they point to (which is permitted)."
}