{
  "user_message": "Target function code is:\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_connection_set_nodelay_state_': {'callees': ['MHD_DLOG'], 'callers': []}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "MHD_SCKT_OPT_BOOL_",
    "MHD_socket_get_error_",
    "MHD_socket_strerr_",
    "MHD_SCKT_ERR_IS_",
    "MHD_SCKT_EINVAL_",
    "MHD_SCKT_ENOPROTOOPT_",
    "MHD_SCKT_ENOTSOCK_",
    "_MHD_YES",
    "_MHD_UNKNOWN",
    "MHD_DLOG",
    "HAVE_MESSAGES",
    "TCP_NODELAY",
    "IPPROTO_TCP",
    "setsockopt",
    "_ (gettext macro)"
  ],
  "explanation": "For each symbol below we need its definition or macro expansion to determine whether any compiler/language extensions (GCC/Clang/MSVC non\u2011standard keywords, statement\u2011expressions, attributes, inline asm, non\u2011standard builtin macros, etc.) are used by the target function or by invoked macros/functions.\n\n- struct MHD_Connection: the function accesses fields (is_nonip, socket_fd, sk_nodelay, daemon). Inspecting the struct definition shows whether any non\u2011standard field types or extension attributes are used.\n- MHD_SCKT_OPT_BOOL_: this typedef/type used for off_val/on_val may hide compiler extensions (e.g. typedef to a built\u2011in with attributes). Need definition.\n- MHD_socket_get_error_: called to obtain err_code; its implementation could use extensions (inline asm, statement expressions, attributes) that would violate the rule.\n- MHD_socket_strerr_: used inside logging; its definition may use extensions (format attributes, builtin functions) that must be checked.\n- MHD_SCKT_ERR_IS_: macro/function used to test err_code. Macros often use statement\u2011expressions ({ ... }) or other extensions; must inspect expansion.\n- MHD_SCKT_EINVAL_, MHD_SCKT_ENOPROTOOPT_, MHD_SCKT_ENOTSOCK_: error code constants or macros \u2014 check if they are plain integer macros or wrappers that use extensions.\n- _MHD_YES, _MHD_UNKNOWN: values compared/assigned to connection->is_nonip; their definitions might be enums or macros using extensions; inspect to confirm.\n- MHD_DLOG: logging helper used under HAVE_MESSAGES. Often defined as a macro that may wrap attributes, variadic macro tricks, or compiler extensions \u2014 its definition must be inspected.\n- HAVE_MESSAGES: conditional compilation macro controlling whether logging code is present. You must know how MHD_DLOG and related logging are defined under this macro to see if extensions are used.\n- TCP_NODELAY: feature macro tested by #ifdef and passed to setsockopt; inspect definition to ensure it is a plain platform macro (not an extension) and understand platform dependency.\n- IPPROTO_TCP: socket option constant used by setsockopt; include to verify no non\u2011standard definition is used in this build.\n- setsockopt: system call prototype \u2014 verify that the available declaration is from standard headers and does not use compiler extensions in this project (or that wrappers are not used).\n- _ (gettext macro): used for message translation inside MHD_DLOG. The translation macro may be a user macro or wrapper that could use non\u2011standard constructs; check its definition.\n\nOnly by examining these symbols' definitions/expansions can we be confident the target function (including the macros and calls it uses) does not themselves employ compiler language extensions that would violate the MISRA rule."
}