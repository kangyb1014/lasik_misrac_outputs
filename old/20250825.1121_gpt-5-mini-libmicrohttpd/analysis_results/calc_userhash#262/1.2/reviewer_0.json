{
  "user_message": "An agent A claimed that the following calc_userhash code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of calc_userhash.\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_static_inline expands to use the GCC-style attribute syntax __attribute__((always_inline)). The __attribute__((...)) facility (and the always_inline attribute) is a compiler-specific extension (documented as such in GCC/Clang docs), so this use violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function calc_userhash:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\n#define mhd_assert(ignore) ((void)0)\n...\nstruct DigestAlgorithm\n{\n  /**\n   * A context for the digest algorithm, already initialized to be\n   * useful for @e init, @e update and @e digest.\n   */\n  union DigestCtx ctx;\n\n  /**\n   * The hash calculation algorithm.\n   */\n  enum MHD_DigestBaseAlgo algo;\n\n  /**\n   * Buffer for hex-print of the final digest.\n   */\n#ifdef _DEBUG\n  bool uninitialised; /**< The structure has been not set-up */\n  bool algo_selected; /**< The algorithm has been selected */\n  bool ready_for_hashing; /**< The structure is ready to hash data */\n  bool hashing; /**< Some data has been hashed, but the digest has not finalised yet */\n#endif /* _DEBUG */\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The macro _MHD_static_inline expands to use the GCC/Clang attribute syntax __attribute__((always_inline)), which is a compiler-specific language extension documented as such. MISRA C 2023 Rule 1.2 prohibits use of language extensions; therefore the use of that attribute (via the macro) in the calc_userhash declaration constitutes a violation. Note: if the attribute macro were conditionally defined to be empty for non-GCC compilers or removed entirely so only standard 'static inline' is used, that would avoid the violation \u2014 but in the provided code the attribute is present unconditionally, so the report is correct."
}