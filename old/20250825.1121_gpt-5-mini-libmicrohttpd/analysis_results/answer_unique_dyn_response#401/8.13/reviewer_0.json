{
  "user_message": "An agent A claimed that the following answer_unique_dyn_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_dyn_response.\n```c\nstatic enum MHD_Result\nanswer_unique_dyn_response (void *cls,\n                            struct MHD_Connection *connection,\n                            const char *url,\n                            const char *method,\n                            const char *version,\n                            const char *upload_data,\n                            size_t *upload_data_size,\n                            void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (body_dyn_size,\n                                              body_dyn);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (body_dyn_size,\n                                       (void *) body_dyn,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code stores the address of a non-const object into a non-const void*: *req_cls = (void *)&marker;. Rule 8.13 recommends that pointers should point to const-qualified types when the pointed-to object is not intended to be modified. Here marker is declared as non-const, and the stored pointer has no const qualification. This is a violation of MISRA C 2023 Rule 8.13. (If the library API requires void ** and cannot be changed, this must be treated as a documented deviation or the marker made const and the API usage reviewed.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function answer_unique_dyn_response:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 directs that pointers should point to const-qualified types whenever possible (i.e. when the object is not intended to be modified). In the function, a pointer to the address of marker (declared as non-const int) is stored via *req_cls = (void *)&marker; \u2014 that produces a non-const pointer to a non-const object where a pointer to a const-qualified object would be preferable. Thus the report correctly identifies a Rule 8.13 issue.\n\nIn practice this often occurs when an external API requires a void ** (here req_cls) that cannot be changed; that makes the situation unavoidable without a documented MISRA deviation or other mitigation. If the API cannot be changed, the appropriate course is to document and justify a deviation from Rule 8.13 (or redesign the interaction so the stored pointer can be to a const-qualified type)."
}