{
  "user_message": "An agent A claimed that the following answer_unique_dyn_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_dyn_response.\n```c\nstatic enum MHD_Result\nanswer_unique_dyn_response (void *cls,\n                            struct MHD_Connection *connection,\n                            const char *url,\n                            const char *method,\n                            const char *version,\n                            const char *upload_data,\n                            size_t *upload_data_size,\n                            void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (body_dyn_size,\n                                              body_dyn);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (body_dyn_size,\n                                       (void *) body_dyn,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe object body_dyn is declared as 'static char *body_dyn = NULL' but in the shown code it is used only as a read-only response buffer (passed to MHD_create_response_from_buffer_static / MHD_create_response_from_buffer and even cast to (void *) to satisfy a non-const API). If body_dyn is not modified anywhere else, it should be declared as 'static const char *body_dyn' so the pointer points to a const-qualified type. Leaving it as 'char *' when it is used read-only violates MISRA C 2023 Rule 8.13. (If body_dyn is actually modified elsewhere, then const qualification would not be possible and there is no violation.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function answer_unique_dyn_response:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct given the code shown. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible. In the snippets you gave, body_dyn is declared as\n  static char *body_dyn = NULL;\nbut in answer_unique_dyn_response it is only read (passed to response-creation functions). That usage indicates it could and should be declared as a pointer to const (static const char *body_dyn) if the buffer is never modified elsewhere. The presence of an explicit cast to (void *) in the older-API branch shows an API mismatch (the older API expects a non-const pointer) but that does not justify leaving the object itself unqualified; it only indicates a cast would be required at the call site for the legacy API. If, however, body_dyn is actually modified elsewhere in the program, then const qualification would be impossible and there is no violation. Given the provided information (no writes shown), the report of a Rule 8.13 violation is correct."
}