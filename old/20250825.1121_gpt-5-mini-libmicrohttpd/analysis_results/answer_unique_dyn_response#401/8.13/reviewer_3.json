{
  "user_message": "An agent A claimed that the following answer_unique_dyn_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_dyn_response.\n```c\nstatic enum MHD_Result\nanswer_unique_dyn_response (void *cls,\n                            struct MHD_Connection *connection,\n                            const char *url,\n                            const char *method,\n                            const char *version,\n                            const char *upload_data,\n                            size_t *upload_data_size,\n                            void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (body_dyn_size,\n                                              body_dyn);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (body_dyn_size,\n                                       (void *) body_dyn,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe buffer body_dyn is declared as a mutable char * (static char *body_dyn) but is only used for read-only response data. Passing it (as (void *)body_dyn) to create a response hides that it is not modified; per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type (e.g. const char *body_dyn) when possible. Thus the code violates Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function answer_unique_dyn_response:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible. In the provided code body_dyn is declared as\n  static char *body_dyn = NULL;\nbut (according to the scenario) it is only used as read\u2011only response data. In that situation the pointer should be declared const char *body_dyn. Furthermore the code passes the buffer to the library as (void *)body_dyn which hides the intent that the data is not modified. \n\nCaveat: if body_dyn is actually modified elsewhere (written to) then it cannot be const and there is no violation. Also if an external API requires a non\u2011const pointer you may need to cast when calling it, but that does not negate that the internal declaration should be const when possible. Recommended fix: declare body_dyn as const char * (and adjust call sites or cast only at the API boundary)."
}