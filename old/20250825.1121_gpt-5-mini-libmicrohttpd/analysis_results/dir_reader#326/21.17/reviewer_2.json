{
  "user_message": "An agent A claimed that the following dir_reader code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of dir_reader.\n```c\nstatic ssize_t\ndir_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  DIR *dir = cls;\n  struct dirent *e;\n  int res;\n\n  if (max < 512)\n    return 0;\n  (void) pos; /* 'pos' is ignored as function return next one single entry per call. */\n  do\n  {\n    e = readdir (dir);\n    if (e == NULL)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n  } while (e->d_name[0] == '.');\n  res = snprintf (buf, max,\n                  \"<a href=\\\"/%s\\\">%s</a><br>\",\n                  e->d_name,\n                  e->d_name);\n  if (0 >= res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  if (max < (size_t) res)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return (ssize_t) res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nsnprintf returns the number of characters that would have been written. If res == max the output was truncated (res >= max indicates truncation) but the code tests only max < (size_t)res, so it fails to detect the res == max case. The function then returns res (the would-be length) while only max-1 bytes plus a NUL were actually written into buf; a caller that uses the returned length may read past the buffer bounds, causing an out-of-bounds access.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent is incorrect. MISRA C:2023 Rule 21.17 is about uses of the string-handling functions from <string.h> that can cause accesses beyond object bounds (the rule explicitly lists the <string.h> functions such as memcpy, strcpy, strlen, etc.). snprintf is a <stdio.h> function, so the rule as quoted does not apply to snprintf.\n\nSeparately, the scenario correctly identifies a logic bug: snprintf() returns the number of characters that would have been written (excluding the terminating NUL), and truncation occurs when the return value is >= max. The code tests if (max < (size_t) res) (i.e. res > max) and therefore fails to treat res == max as truncation. That is a correctness/truncation check bug and should be fixed (e.g. test if ((size_t)res >= max) ).\n\nHowever, the missing res == max check does not itself create an out-of-bounds write or read of buf by snprintf: when size == max, snprintf writes at most max-1 characters plus the terminating NUL into the buffer, so reading res (== max) bytes from buf stays within the buffer bounds (indices 0..max-1). Thus there is no violation of Rule 21.17 as stated. The report conflates a truncation-reporting bug with a Rule 21.17 string.h out-of-bounds violation; the former is true, the latter is not."
}