{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of return_directory_response:\n```c\nstatic enum MHD_Result\nreturn_directory_response (struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n\n  (void) pthread_mutex_lock (&mutex);\n  if (NULL == cached_directory_response)\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_INTERNAL_SERVER_ERROR,\n                              internal_error_response);\n  else\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              cached_directory_response);\n  (void) pthread_mutex_unlock (&mutex);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function return_directory_response:\nstatic struct MHD_Response *cached_directory_response\n...\nstatic struct MHD_Response *internal_error_response\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = MHD_queue_response (connection,\n                              MHD_HTTP_INTERNAL_SERVER_ERROR,\n                              internal_error_response);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this fragment: MHD_queue_response (from libmicrohttpd) takes a non-const struct MHD_Response * because it may take ownership/modify/free the response, so internal_error_response must be a non-const pointer and Rule 8.13 is not violated here. (If, alternatively, the response object were truly immutable and neither this code nor the API ever modified it, then declaring internal_error_response as a non-const pointer would violate Rule 8.13 \u2014 the fix would be to declare it as const struct MHD_Response * and use an API that accepts const.)"
}