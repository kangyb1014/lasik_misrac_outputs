{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of return_directory_response:\n```c\nstatic enum MHD_Result\nreturn_directory_response (struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n\n  (void) pthread_mutex_lock (&mutex);\n  if (NULL == cached_directory_response)\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_INTERNAL_SERVER_ERROR,\n                              internal_error_response);\n  else\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              cached_directory_response);\n  (void) pthread_mutex_unlock (&mutex);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function return_directory_response:\nstatic struct MHD_Response *cached_directory_response\n...\nstatic struct MHD_Response *internal_error_response\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              cached_directory_response);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The pointer 'cached_directory_response' is declared as 'static struct MHD_Response *cached_directory_response' (and similarly 'internal_error_response') but in return_directory_response it is only read and passed to MHD_queue_response. There is no evidence the pointee is modified here, so these variables should be declared to point to a const-qualified type (e.g. 'const struct MHD_Response *') where possible. Therefore the current non-const pointer declarations violate MISRA C 2023 Rule 8.13."
}