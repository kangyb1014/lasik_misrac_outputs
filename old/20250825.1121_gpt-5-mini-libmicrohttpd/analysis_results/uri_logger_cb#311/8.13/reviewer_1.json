{
  "user_message": "An agent A claimed that the following uri_logger_cb code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of uri_logger_cb.\n```c\nstatic void *\nuri_logger_cb (void *cls,\n               const char *uri)\n{\n  struct timeval *tv = malloc (sizeof (struct timeval));\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) uri; /* Unused. Silent compiler warning. */\n\n  if (NULL != tv)\n    gettimeofday (tv, NULL);\n  return tv;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cls' is declared as 'void *cls' but is unused and not modified in the function; it could be declared as 'const void *cls'. Per MISRA C 2023 Rule 8.13, the pointed-to type should be const-qualified whenever possible, so this declaration violates the rule (unless a non-const API requirement prevents making it const).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provable from the snippet alone. MISRA C 2023 Rule 8.13 indeed advises that pointers should point to const-qualified types when possible, so an unused parameter that is not modified could be declared as const void *. However, whether this is a violation depends on the required function prototype. If uri_logger_cb must match an external/non-const callback signature, you cannot change the parameter type and the rule has an implicit exception for such API requirements. The function is declared static (internal linkage), so it may be safe to change to const void *cls if no callers rely on a non-const parameter, but that cannot be determined from the provided code. Therefore the report claiming a definite MISRA violation is not correct as given; it is only a potential issue if the prototype is not constrained by an external API."
}