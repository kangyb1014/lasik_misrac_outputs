{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_write_done:\n```c\nstatic enum MHD_Result\ncheck_write_done (struct MHD_Connection *connection,\n                  enum MHD_CONNECTION_STATE next_state)\n{\n  if ( (connection->write_buffer_append_offset !=\n        connection->write_buffer_send_offset)\n       /* || data_in_tls_buffers == true  */\n       )\n    return MHD_NO;\n  connection->write_buffer_append_offset = 0;\n  connection->write_buffer_send_offset = 0;\n  connection->state = next_state;\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function check_write_done:\nstruct MHD_Connection\n{\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * Next pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *nextE;\n\n  /**\n   * Previous pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *prevE;\n#endif\n\n  /**\n   * Next pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *next;\n\n  /**\n   * Previous pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *prev;\n\n  /**\n   * Next pointer for the XDLL organizing connections by timeout.\n   * This DLL can be either the\n   * 'manual_timeout_head/manual_timeout_tail' or the\n   * 'normal_timeout_head/normal_timeout_tail', depending on whether a\n   * custom timeout is set for the connection.\n   */\n  struct MHD_Connection *nextX;\n\n  /**\n   * Previous pointer for the XDLL organizing connections by timeout.\n   */\n  struct MHD_Connection *prevX;\n\n  /**\n   * Reference to the MHD_Daemon struct.\n   */\n  struct MHD_Daemon *daemon;\n\n  /**\n   * Request-specific data\n   */\n  struct MHD_Request rq;\n\n  /**\n   * Reply-specific data\n   */\n  struct MHD_Reply rp;\n\n  /**\n   * The memory pool is created whenever we first read from the TCP\n   * stream and destroyed at the end of each request (and re-created\n   * for the next request).  In the meantime, this pointer is NULL.\n   * The pool is used for all connection-related data except for the\n   * response (which maybe shared between connections) and the IP\n   * address (which persists across individual requests).\n   */\n  struct MemoryPool *pool;\n\n  /**\n   * We allow the main application to associate some pointer with the\n   * TCP connection (which may span multiple HTTP requests).  Here is\n   * where we store it.  (MHD does not know or care what it is).\n   * The location is given to the #MHD_NotifyConnectionCallback and\n   * also accessible via #MHD_CONNECTION_INFO_SOCKET_CONTEXT.\n   */\n  void *socket_context;\n\n  /**\n   * Close connection after sending response?\n   * Functions may change value from \"Unknown\" or \"KeepAlive\" to \"Must close\",\n   * but no functions reset value \"Must Close\" to any other value.\n   */\n  enum MHD_ConnKeepAlive keepalive;\n\n  /**\n   * Buffer for reading requests.  Allocated in pool.  Actually one\n   * byte larger than @e read_buffer_size (if non-NULL) to allow for\n   * 0-termination.\n   */\n  char *read_buffer;\n\n  /**\n   * Buffer for writing response (headers only).  Allocated\n   * in pool.\n   */\n  char *write_buffer;\n\n  /**\n   * Foreign address (of length @e addr_len).  MALLOCED (not\n   * in pool!).\n   */\n  struct sockaddr_storage *addr;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Thread handle for this connection (if we are using\n   * one thread per connection).\n   */\n  MHD_thread_handle_ID_ tid;\n#endif\n\n  /**\n   * Size of @e read_buffer (in bytes).\n   * This value indicates how many bytes we're willing to read\n   * into the buffer.\n   */\n  size_t read_buffer_size;\n\n  /**\n   * Position where we currently append data in @e read_buffer (the\n   * next char after the last valid position).\n   */\n  size_t read_buffer_offset;\n\n  /**\n   * Size of @e write_buffer (in bytes).\n   */\n  size_t write_buffer_size;\n\n  /**\n   * Offset where we are with sending from @e write_buffer.\n   */\n  size_t write_buffer_send_offset;\n\n  /**\n   * Last valid location in write_buffer (where do we\n   * append and up to where is it safe to send?)\n   */\n  size_t write_buffer_append_offset;\n\n  /**\n   * Position in the 100 CONTINUE message that\n   * we need to send when receiving http 1.1 requests.\n   */\n  size_t continue_message_write_offset;\n\n  /**\n   * Length of the foreign address.\n   */\n  socklen_t addr_len;\n\n  /**\n   * Last time this connection had any activity\n   * (reading or writing).\n   */\n  uint64_t last_activity;\n\n  /**\n   * After how many milliseconds of inactivity should\n   * this connection time out?\n   * Zero for no timeout.\n   */\n  uint64_t connection_timeout_ms;\n\n  /**\n   * Socket for this connection.  Set to #MHD_INVALID_SOCKET if\n   * this connection has died (daemon should clean\n   * up in that case).\n   */\n  MHD_socket socket_fd;\n\n  /**\n   * true if @e socket_fd is not TCP/IP (a UNIX domain socket, a pipe),\n   * false (TCP/IP) otherwise.\n   */\n  enum MHD_tristate is_nonip;\n\n  /**\n   * true if #socket_fd is non-blocking, false otherwise.\n   */\n  bool sk_nonblck;\n\n  /**\n   * true if connection socket has set SIGPIPE suppression\n   */\n  bool sk_spipe_suppress;\n\n  /**\n   * Tracks TCP_CORK / TCP_NOPUSH of the connection socket.\n   */\n  enum MHD_tristate sk_corked;\n\n  /**\n   * Tracks TCP_NODELAY state of the connection socket.\n   */\n  enum MHD_tristate sk_nodelay;\n\n  /**\n   * Has this socket been closed for reading (i.e.  other side closed\n   * the connection)?  If so, we must completely close the connection\n   * once we are done sending our response (and stop trying to read\n   * from this socket).\n   */\n  bool read_closed;\n\n  /**\n   * Some error happens during processing the connection therefore this\n   * connection must be closed.\n   * The error may come from the client side (like wrong request format),\n   * from the application side (like data callback returned error), or from\n   * the OS side (like out-of-memory).\n   */\n  bool stop_with_error;\n\n  /**\n   * Response queued early, before the request is fully processed,\n   * the client upload is rejected.\n   * The connection cannot be reused for additional requests as the current\n   * request is incompletely read and it is unclear where is the initial\n   * byte of the next request.\n   */\n  bool discard_request;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Set to `true` if the thread has been joined.\n   */\n  bool thread_joined;\n#endif\n\n  /**\n   * Are we currently inside the \"idle\" handler (to avoid recursively\n   * invoking it).\n   */\n  bool in_idle;\n\n  /**\n   * Connection is in the cleanup DL-linked list.\n   */\n  bool in_cleanup;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * What is the state of this socket in relation to epoll?\n   */\n  enum MHD_EpollState epoll_state;\n#endif\n\n  /**\n   * State in the FSM for this connection.\n   */\n  enum MHD_CONNECTION_STATE state;\n\n  /**\n   * What is this connection waiting for?\n   */\n  enum MHD_ConnectionEventLoopInfo event_loop_info;\n\n  /**\n   * Function used for reading HTTP request stream.\n   */\n  ReceiveCallback recv_cls;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * If this connection was upgraded, this points to\n   * the upgrade response details such that the\n   * #thread_main_connection_upgrade()-logic can perform the\n   * bi-directional forwarding.\n   */\n  struct MHD_UpgradeResponseHandle *urh;\n#endif /* UPGRADE_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n\n  /**\n   * State required for HTTPS/SSL/TLS support.\n   */\n  gnutls_session_t tls_session;\n\n  /**\n   * State of connection's TLS layer\n   */\n  enum MHD_TLS_CONN_STATE tls_state;\n\n  /**\n   * Could it be that we are ready to read due to TLS buffers\n   * even though the socket is not?\n   */\n  bool tls_read_ready;\n#endif /* HTTPS_SUPPORT */\n\n  /**\n   * Is the connection suspended?\n   */\n  bool suspended;\n\n  /**\n   * Are we currently in the #MHD_AccessHandlerCallback\n   * for this connection (and thus eligible to receive\n   * calls to #MHD_queue_response()?).\n   */\n  bool in_access_handler;\n\n  /**\n   * Is the connection wanting to resume?\n   */\n  volatile bool resuming;\n\n  /**\n   * Special member to be returned by #MHD_get_connection_info()\n   */\n  union MHD_ConnectionInfo connection_info_dummy;\n}\n...\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\nenum MHD_CONNECTION_STATE\n{\n  /**\n   * Connection just started (no headers received).\n   * Waiting for the line with the request type, URL and version.\n   */\n  MHD_CONNECTION_INIT = 0,\n\n  /**\n   * Part of the request line was received.\n   * Wait for complete line.\n   */\n  MHD_CONNECTION_REQ_LINE_RECEIVING = MHD_CONNECTION_INIT + 1,\n\n  /**\n   * We got the URL (and request type and version).  Wait for a header line.\n   *\n   * A milestone state. No received data is processed in this state.\n   */\n  MHD_CONNECTION_REQ_LINE_RECEIVED = MHD_CONNECTION_REQ_LINE_RECEIVING + 1,\n\n  /**\n   * Receiving request headers.  Wait for the rest of the headers.\n   */\n  MHD_CONNECTION_REQ_HEADERS_RECEIVING = MHD_CONNECTION_REQ_LINE_RECEIVED + 1,\n\n  /**\n   * We got the request headers.  Process them.\n   */\n  MHD_CONNECTION_HEADERS_RECEIVED = MHD_CONNECTION_REQ_HEADERS_RECEIVING + 1,\n\n  /**\n   * We have processed the request headers.  Call application callback.\n   */\n  MHD_CONNECTION_HEADERS_PROCESSED = MHD_CONNECTION_HEADERS_RECEIVED + 1,\n\n  /**\n   * We have processed the headers and need to send 100 CONTINUE.\n   */\n  MHD_CONNECTION_CONTINUE_SENDING = MHD_CONNECTION_HEADERS_PROCESSED + 1,\n\n  /**\n   * We have sent 100 CONTINUE (or do not need to).  Read the message body.\n   */\n  MHD_CONNECTION_BODY_RECEIVING = MHD_CONNECTION_CONTINUE_SENDING + 1,\n\n  /**\n   * We got the request body.\n   *\n   * A milestone state. No received data is processed in this state.\n   */\n  MHD_CONNECTION_BODY_RECEIVED = MHD_CONNECTION_BODY_RECEIVING + 1,\n\n  /**\n   * We are reading the request footers.\n   */\n  MHD_CONNECTION_FOOTERS_RECEIVING = MHD_CONNECTION_BODY_RECEIVED + 1,\n\n  /**\n   * We received the entire footer.\n   *\n   * A milestone state. No received data is processed in this state.\n   */\n  MHD_CONNECTION_FOOTERS_RECEIVED = MHD_CONNECTION_FOOTERS_RECEIVING + 1,\n\n  /**\n   * We received the entire request.\n   * Wait for a response to be queued.\n   */\n  MHD_CONNECTION_FULL_REQ_RECEIVED = MHD_CONNECTION_FOOTERS_RECEIVED + 1,\n\n  /**\n   * Finished reading of the request and the response is ready.\n   * Switch internal logic from receiving to sending, prepare connection\n   * sending the reply and build the reply header.\n   */\n  MHD_CONNECTION_START_REPLY = MHD_CONNECTION_FULL_REQ_RECEIVED + 1,\n\n  /**\n   * We have prepared the response headers in the write buffer.\n   * Send the response headers.\n   */\n  MHD_CONNECTION_HEADERS_SENDING = MHD_CONNECTION_START_REPLY + 1,\n\n  /**\n   * We have sent the response headers.  Get ready to send the body.\n   */\n  MHD_CONNECTION_HEADERS_SENT = MHD_CONNECTION_HEADERS_SENDING + 1,\n\n  /**\n   * We are waiting for the client to provide more\n   * data of a non-chunked body.\n   */\n  MHD_CONNECTION_NORMAL_BODY_UNREADY = MHD_CONNECTION_HEADERS_SENT + 1,\n\n  /**\n   * We are ready to send a part of a non-chunked body.  Send it.\n   */\n  MHD_CONNECTION_NORMAL_BODY_READY = MHD_CONNECTION_NORMAL_BODY_UNREADY + 1,\n\n  /**\n   * We are waiting for the client to provide a chunk of the body.\n   */\n  MHD_CONNECTION_CHUNKED_BODY_UNREADY = MHD_CONNECTION_NORMAL_BODY_READY + 1,\n\n  /**\n   * We are ready to send a chunk.\n   */\n  MHD_CONNECTION_CHUNKED_BODY_READY = MHD_CONNECTION_CHUNKED_BODY_UNREADY + 1,\n\n  /**\n   * We have sent the chunked response body. Prepare the footers.\n   */\n  MHD_CONNECTION_CHUNKED_BODY_SENT = MHD_CONNECTION_CHUNKED_BODY_READY + 1,\n\n  /**\n   * We have prepared the response footer.  Send it.\n   */\n  MHD_CONNECTION_FOOTERS_SENDING = MHD_CONNECTION_CHUNKED_BODY_SENT + 1,\n\n  /**\n   * We have sent the entire reply.\n   * Shutdown connection or restart processing to get a new request.\n   */\n  MHD_CONNECTION_FULL_REPLY_SENT = MHD_CONNECTION_FOOTERS_SENDING + 1,\n\n  /**\n   * This connection is to be closed.\n   */\n  MHD_CONNECTION_CLOSED = MHD_CONNECTION_FULL_REPLY_SENT + 1\n\n#ifdef UPGRADE_SUPPORT\n  ,\n  /**\n   * Connection was \"upgraded\" and socket is now under the\n   * control of the application.\n   */\n  MHD_CONNECTION_UPGRADE = MHD_CONNECTION_CLOSED + 1\n#endif /* UPGRADE_SUPPORT */\n\n}\n...\nvoid\nMHD_connection_handle_write (struct MHD_Connection *connection)\n{\n  struct MHD_Response *response;\n  ssize_t ret;\n  if (connection->suspended)\n    return;\n\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n        return;\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n    ret = MHD_send_data_ (connection,\n                          &HTTP_100_CONTINUE\n                          [connection->continue_message_write_offset],\n                          MHD_STATICSTR_LEN_ (HTTP_100_CONTINUE)\n                          - connection->continue_message_write_offset,\n                          true);\n    if (ret < 0)\n    {\n      if (MHD_ERR_AGAIN_ == ret)\n        return;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to send data in request for %s.\\n\"),\n                connection->rq.url);\n#endif\n      CONNECTION_CLOSE_ERROR (connection,\n                              NULL);\n      return;\n    }\n#if _MHD_DEBUG_SEND_DATA\n    fprintf (stderr,\n             _ (\"Sent 100 continue response: `%.*s'\\n\"),\n             (int) ret,\n             &HTTP_100_CONTINUE[connection->continue_message_write_offset]);\n#endif\n    connection->continue_message_write_offset += (size_t) ret;\n    MHD_update_last_activity_ (connection);\n    return;\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_START_REPLY:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_HEADERS_SENDING:\n    {\n      struct MHD_Response *const resp = connection->rp.response;\n      const size_t wb_ready = connection->write_buffer_append_offset\n                              - connection->write_buffer_send_offset;\n      mhd_assert (connection->write_buffer_append_offset >= \\\n                  connection->write_buffer_send_offset);\n      mhd_assert (NULL != resp);\n      mhd_assert ( (0 == resp->data_size) || \\\n                   (0 == resp->data_start) || \\\n                   (NULL != resp->crc) );\n      mhd_assert ( (0 == connection->rp.rsp_write_position) || \\\n                   (resp->total_size ==\n                    connection->rp.rsp_write_position) );\n      mhd_assert ((MHD_CONN_MUST_UPGRADE != connection->keepalive) || \\\n                  (! connection->rp.props.send_reply_body));\n\n      if ( (connection->rp.props.send_reply_body) &&\n           (NULL == resp->crc) &&\n           (NULL == resp->data_iov) &&\n           /* TODO: remove the next check as 'send_reply_body' is used */\n           (0 == connection->rp.rsp_write_position) &&\n           (! connection->rp.props.chunked) )\n      {\n        mhd_assert (resp->total_size >= resp->data_size);\n        mhd_assert (0 == resp->data_start);\n        /* Send response headers alongside the response body, if the body\n         * data is available. */\n        ret = MHD_send_hdr_and_body_ (connection,\n                                      &connection->write_buffer\n                                      [connection->write_buffer_send_offset],\n                                      wb_ready,\n                                      false,\n                                      resp->data,\n                                      resp->data_size,\n                                      (resp->total_size == resp->data_size));\n      }\n      else\n      {\n        /* This is response for HEAD request or reply body is not allowed\n         * for any other reason or reply body is dynamically generated. */\n        /* Do not send the body data even if it's available. */\n        ret = MHD_send_hdr_and_body_ (connection,\n                                      &connection->write_buffer\n                                      [connection->write_buffer_send_offset],\n                                      wb_ready,\n                                      false,\n                                      NULL,\n                                      0,\n                                      ((0 == resp->total_size) ||\n                                       (! connection->rp.props.send_reply_body)\n                                      ));\n      }\n\n      if (ret < 0)\n      {\n        if (MHD_ERR_AGAIN_ == ret)\n          return;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Failed to send the response headers for the \" \\\n                     \"request for `%s'. Error: %s\\n\"),\n                  connection->rq.url,\n                  str_conn_error_ (ret));\n#endif\n        CONNECTION_CLOSE_ERROR (connection,\n                                NULL);\n        return;\n      }\n      /* 'ret' is not negative, it's safe to cast it to 'size_t'. */\n      if (((size_t) ret) > wb_ready)\n      {\n        /* The complete header and some response data have been sent,\n         * update both offsets. */\n        mhd_assert (0 == connection->rp.rsp_write_position);\n        mhd_assert (! connection->rp.props.chunked);\n        mhd_assert (connection->rp.props.send_reply_body);\n        connection->write_buffer_send_offset += wb_ready;\n        connection->rp.rsp_write_position = ((size_t) ret) - wb_ready;\n      }\n      else\n        connection->write_buffer_send_offset += (size_t) ret;\n      MHD_update_last_activity_ (connection);\n      if (MHD_CONNECTION_HEADERS_SENDING != connection->state)\n        return;\n      check_write_done (connection,\n                        MHD_CONNECTION_HEADERS_SENT);\n      return;\n    }\n  case MHD_CONNECTION_HEADERS_SENT:\n    return;\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n    response = connection->rp.response;\n    if (connection->rp.rsp_write_position <\n        connection->rp.response->total_size)\n    {\n      uint64_t data_write_offset;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      if (NULL != response->crc)\n        MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n      if (MHD_NO == try_ready_normal_body (connection))\n      {\n        /* mutex was already unlocked by try_ready_normal_body */\n        return;\n      }\n#if defined(_MHD_HAVE_SENDFILE)\n      if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n      {\n        mhd_assert (NULL == response->data_iov);\n        ret = MHD_send_sendfile_ (connection);\n      }\n      else /* combined with the next 'if' */\n#endif /* _MHD_HAVE_SENDFILE */\n      if (NULL != response->data_iov)\n      {\n        ret = MHD_send_iovec_ (connection,\n                               &connection->rp.resp_iov,\n                               true);\n      }\n      else\n      {\n        data_write_offset = connection->rp.rsp_write_position\n                            - response->data_start;\n        if (data_write_offset > (uint64_t) SIZE_MAX)\n          MHD_PANIC (_ (\"Data offset exceeds limit.\\n\"));\n        ret = MHD_send_data_ (connection,\n                              &response->data\n                              [(size_t) data_write_offset],\n                              response->data_size\n                              - (size_t) data_write_offset,\n                              true);\n#if _MHD_DEBUG_SEND_DATA\n        if (ret > 0)\n          fprintf (stderr,\n                   _ (\"Sent %d-byte DATA response: `%.*s'\\n\"),\n                   (int) ret,\n                   (int) ret,\n                   &rp.response->data[connection->rp.rsp_write_position\n                                      - rp.response->data_start]);\n#endif\n      }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      if (NULL != response->crc)\n        MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n      if (ret < 0)\n      {\n        if (MHD_ERR_AGAIN_ == ret)\n          return;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Failed to send the response body for the \" \\\n                     \"request for `%s'. Error: %s\\n\"),\n                  connection->rq.url,\n                  str_conn_error_ (ret));\n#endif\n        CONNECTION_CLOSE_ERROR (connection,\n                                NULL);\n        return;\n      }\n      connection->rp.rsp_write_position += (size_t) ret;\n      MHD_update_last_activity_ (connection);\n    }\n    if (connection->rp.rsp_write_position ==\n        connection->rp.response->total_size)\n      connection->state = MHD_CONNECTION_FULL_REPLY_SENT;\n    return;\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n    ret = MHD_send_data_ (connection,\n                          &connection->write_buffer\n                          [connection->write_buffer_send_offset],\n                          connection->write_buffer_append_offset\n                          - connection->write_buffer_send_offset,\n                          true);\n    if (ret < 0)\n    {\n      if (MHD_ERR_AGAIN_ == ret)\n        return;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to send the chunked response body for the \" \\\n                   \"request for `%s'. Error: %s\\n\"),\n                connection->rq.url,\n                str_conn_error_ (ret));\n#endif\n      CONNECTION_CLOSE_ERROR (connection,\n                              NULL);\n      return;\n    }\n    connection->write_buffer_send_offset += (size_t) ret;\n    MHD_update_last_activity_ (connection);\n    if (MHD_CONNECTION_CHUNKED_BODY_READY != connection->state)\n      return;\n    check_write_done (connection,\n                      (connection->rp.response->total_size ==\n                       connection->rp.rsp_write_position) ?\n                      MHD_CONNECTION_CHUNKED_BODY_SENT :\n                      MHD_CONNECTION_CHUNKED_BODY_UNREADY);\n    return;\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_FOOTERS_SENDING:\n    ret = MHD_send_data_ (connection,\n                          &connection->write_buffer\n                          [connection->write_buffer_send_offset],\n                          connection->write_buffer_append_offset\n                          - connection->write_buffer_send_offset,\n                          true);\n    if (ret < 0)\n    {\n      if (MHD_ERR_AGAIN_ == ret)\n        return;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to send the footers for the \" \\\n                   \"request for `%s'. Error: %s\\n\"),\n                connection->rq.url,\n                str_conn_error_ (ret));\n#endif\n      CONNECTION_CLOSE_ERROR (connection,\n                              NULL);\n      return;\n    }\n    connection->write_buffer_send_offset += (size_t) ret;\n    MHD_update_last_activity_ (connection);\n    if (MHD_CONNECTION_FOOTERS_SENDING != connection->state)\n      return;\n    check_write_done (connection,\n                      MHD_CONNECTION_FULL_REPLY_SENT);\n    return;\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n    mhd_assert (0);\n    return;\n  case MHD_CONNECTION_CLOSED:\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    mhd_assert (0);\n    return;\n#endif /* UPGRADE_SUPPORT */\n  default:\n    mhd_assert (0);\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Internal error.\\n\"));\n    break;\n  }\n  return;\n}\n...\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n...\nssize_t\nMHD_send_hdr_and_body_ (struct MHD_Connection *connection,\n                        const char *header,\n                        size_t header_size,\n                        bool never_push_hdr,\n                        const char *body,\n                        size_t body_size,\n                        bool complete_response)\n{\n  ssize_t ret;\n  bool push_hdr;\n  bool push_body;\n  MHD_socket s = connection->socket_fd;\n#ifndef _WIN32\n#define _MHD_SEND_VEC_MAX   MHD_SCKT_SEND_MAX_SIZE_\n#else  /* ! _WIN32 */\n#define _MHD_SEND_VEC_MAX   UINT32_MAX\n#endif /* ! _WIN32 */\n#ifdef MHD_VECT_SEND\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  struct iovec vector[2];\n#ifdef HAVE_SENDMSG\n  struct msghdr msg;\n#endif /* HAVE_SENDMSG */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  WSABUF vector[2];\n  DWORD vec_sent;\n#endif /* _WIN32 */\n  bool no_vec; /* Is vector-send() disallowed? */\n\n  no_vec = false;\n#ifdef HTTPS_SUPPORT\n  no_vec = no_vec || (connection->daemon->options & MHD_USE_TLS);\n#endif /* HTTPS_SUPPORT */\n#if (! defined(HAVE_SENDMSG) || ! defined(MSG_NOSIGNAL) ) && \\\n  defined(MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE) && \\\n  defined(MHD_SEND_SPIPE_SUPPRESS_NEEDED)\n  no_vec = no_vec || (! connection->daemon->sigpipe_blocked &&\n                      ! connection->sk_spipe_suppress);\n#endif /* (!HAVE_SENDMSG || ! MSG_NOSIGNAL) &&\n          MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE &&\n          MHD_SEND_SPIPE_SUPPRESS_NEEDED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert ( (NULL != body) || (0 == body_size) );\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  push_body = complete_response;\n\n  if (! never_push_hdr)\n  {\n    if (! complete_response)\n      push_hdr = true; /* Push the header as the client may react\n                        * on header alone while the body data is\n                        * being prepared. */\n    else\n    {\n      if (1400 > (header_size + body_size))\n        push_hdr = false;  /* Do not push the header as complete\n                           * reply is already ready and the whole\n                           * reply most probably will fit into\n                           * the single IP packet. */\n      else\n        push_hdr = true;   /* Push header alone so client may react\n                           * on it while reply body is being delivered. */\n    }\n  }\n  else\n    push_hdr = false;\n\n  if (complete_response && (0 == body_size))\n    push_hdr = true; /* The header alone is equal to the whole response. */\n\n  if (\n#ifdef MHD_VECT_SEND\n    (no_vec) ||\n    (0 == body_size) ||\n    ((size_t) SSIZE_MAX <= header_size) ||\n    ((size_t) _MHD_SEND_VEC_MAX < header_size)\n#ifdef _WIN32\n    || ((size_t) UINT_MAX < header_size)\n#endif /* _WIN32 */\n#else  /* ! MHD_VECT_SEND */\n    true\n#endif /* ! MHD_VECT_SEND */\n    )\n  {\n    ret = MHD_send_data_ (connection,\n                          header,\n                          header_size,\n                          push_hdr);\n\n    if ( (header_size == (size_t) ret) &&\n         ((size_t) SSIZE_MAX > header_size) &&\n         (0 != body_size) &&\n         (connection->sk_nonblck) )\n    {\n      ssize_t ret2;\n      /* The header has been sent completely.\n       * Try to send the reply body without waiting for\n       * the next round. */\n      /* Make sure that sum of ret + ret2 will not exceed SSIZE_MAX as\n       * function needs to return positive value if succeed. */\n      if ( (((size_t) SSIZE_MAX) - ((size_t) ret)) <  body_size)\n      {\n        body_size = (((size_t) SSIZE_MAX) - ((size_t) ret));\n        complete_response = false;\n        push_body = complete_response;\n      }\n\n      ret2 = MHD_send_data_ (connection,\n                             body,\n                             body_size,\n                             push_body);\n      if (0 < ret2)\n        return ret + ret2; /* Total data sent */\n      if (MHD_ERR_AGAIN_ == ret2)\n        return ret;\n\n      return ret2; /* Error code */\n    }\n    return ret;\n  }\n#ifdef MHD_VECT_SEND\n\n  if ( ((size_t) SSIZE_MAX <= body_size) ||\n       ((size_t) SSIZE_MAX < (header_size + body_size)) )\n  {\n    /* Return value limit */\n    body_size = SSIZE_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n  }\n#if (SSIZE_MAX != _MHD_SEND_VEC_MAX) || (_MHD_SEND_VEC_MAX + 0 == 0)\n  if (((size_t) _MHD_SEND_VEC_MAX <= body_size) ||\n      ((size_t) _MHD_SEND_VEC_MAX < (header_size + body_size)))\n  {\n    /* Send total amount limit */\n    body_size = _MHD_SEND_VEC_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n  }\n#endif /* SSIZE_MAX != _MHD_SEND_VEC_MAX */\n\n  pre_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                   true,\n#else  /* ! HAVE_SENDMSG */\n                   false,\n#endif /* ! HAVE_SENDMSG */\n                   push_hdr || push_body);\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  vector[0].iov_base = _MHD_DROP_CONST (header);\n  vector[0].iov_len = header_size;\n  vector[1].iov_base = _MHD_DROP_CONST (body);\n  vector[1].iov_len = body_size;\n\n#if defined(HAVE_SENDMSG)\n  memset (&msg, 0, sizeof(msg));\n  msg.msg_iov = vector;\n  msg.msg_iovlen = 2;\n\n  ret = sendmsg (s, &msg, MSG_NOSIGNAL_OR_ZERO);\n#elif defined(HAVE_WRITEV)\n  ret = writev (s, vector, 2);\n#endif /* HAVE_WRITEV */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  if ((size_t) UINT_MAX < body_size)\n  {\n    /* Send item size limit */\n    body_size = UINT_MAX;\n    complete_response = false;\n    push_body = complete_response;\n  }\n  vector[0].buf = (char *) _MHD_DROP_CONST (header);\n  vector[0].len = (unsigned long) header_size;\n  vector[1].buf = (char *) _MHD_DROP_CONST (body);\n  vector[1].len = (unsigned long) body_size;\n\n  ret = WSASend (s, vector, 2, &vec_sent, 0, NULL, NULL);\n  if (0 == ret)\n    ret = (ssize_t) vec_sent;\n  else\n    ret = -1;\n#endif /* _WIN32 */\n\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN, no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      return MHD_ERR_PIPE_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if ((header_size + body_size) > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  if ( (push_body) &&\n       ((header_size + body_size) == (size_t) ret) )\n  {\n    /* Complete reply has been sent. */\n    /* If TLS connection is used then next final send() will be\n     * without MSG_MORE support. If non-TLS connection is used\n     * it's unknown whether next 'send' will be plain send() / sendmsg() or\n     * sendfile() will be used so assume that next final send() will be\n     * the same, like for this response. */\n    post_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                      true,\n#else  /* ! HAVE_SENDMSG */\n                      false,\n#endif /* ! HAVE_SENDMSG */\n                      true);\n  }\n  else if ( (push_hdr) &&\n            (header_size <= (size_t) ret))\n  {\n    /* The header has been sent completely and there is a\n     * need to push the header data. */\n    /* Luckily the type of send function will be used next is known. */\n    post_send_setopt (connection,\n#if defined(_MHD_HAVE_SENDFILE)\n                      MHD_resp_sender_std == connection->rp.resp_sender,\n#else  /* ! _MHD_HAVE_SENDFILE */\n                      true,\n#endif /* ! _MHD_HAVE_SENDFILE */\n                      true);\n  }\n\n  return ret;\n#else  /* ! MHD_VECT_SEND */\n  mhd_assert (false);\n  return MHD_ERR_CONNRESET_; /* Unreachable. Mute warnings. */\n#endif /* ! MHD_VECT_SEND */\n}\n...\nssize_t\nMHD_send_sendfile_ (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  const int file_fd = connection->rp.response->fd;\n  uint64_t left;\n  uint64_t offsetu64;\n#ifndef HAVE_SENDFILE64\n  const uint64_t max_off_t = (uint64_t) OFF_T_MAX;\n#else  /* HAVE_SENDFILE64 */\n  const uint64_t max_off_t = (uint64_t) OFF64_T_MAX;\n#endif /* HAVE_SENDFILE64 */\n#ifdef MHD_LINUX_SOLARIS_SENDFILE\n#ifndef HAVE_SENDFILE64\n  off_t offset;\n#else  /* HAVE_SENDFILE64 */\n  off64_t offset;\n#endif /* HAVE_SENDFILE64 */\n#endif /* MHD_LINUX_SOLARIS_SENDFILE */\n#ifdef HAVE_FREEBSD_SENDFILE\n  off_t sent_bytes;\n  int flags = 0;\n#endif\n#ifdef HAVE_DARWIN_SENDFILE\n  off_t len;\n#endif /* HAVE_DARWIN_SENDFILE */\n  const bool used_thr_p_c =\n    MHD_D_IS_USING_THREAD_PER_CONN_ (connection->daemon);\n  const size_t chunk_size = used_thr_p_c ? MHD_SENFILE_CHUNK_THR_P_C_ :\n                            MHD_SENFILE_CHUNK_;\n  size_t send_size = 0;\n  bool push_data;\n  mhd_assert (MHD_resp_sender_sendfile == connection->rp.resp_sender);\n  mhd_assert (0 == (connection->daemon->options & MHD_USE_TLS));\n\n  offsetu64 = connection->rp.rsp_write_position\n              + connection->rp.response->fd_off;\n  if (max_off_t < offsetu64)\n  {   /* Retry to send with standard 'send()'. */\n    connection->rp.resp_sender = MHD_resp_sender_std;\n    return MHD_ERR_AGAIN_;\n  }\n\n  left = connection->rp.response->total_size\n         - connection->rp.rsp_write_position;\n\n  if ( (uint64_t) SSIZE_MAX < left)\n    left = SSIZE_MAX;\n\n  /* Do not allow system to stick sending on single fast connection:\n   * use 128KiB chunks (2MiB for thread-per-connection). */\n  if (chunk_size < left)\n  {\n    send_size = chunk_size;\n    push_data = false; /* No need to push data, there is more to send. */\n  }\n  else\n  {\n    send_size = (size_t) left;\n    push_data = true; /* Final piece of data, need to push to the network. */\n  }\n  pre_send_setopt (connection, false, push_data);\n\n#ifdef MHD_LINUX_SOLARIS_SENDFILE\n#ifndef HAVE_SENDFILE64\n  offset = (off_t) offsetu64;\n  ret = sendfile (connection->socket_fd,\n                  file_fd,\n                  &offset,\n                  send_size);\n#else  /* HAVE_SENDFILE64 */\n  offset = (off64_t) offsetu64;\n  ret = sendfile64 (connection->socket_fd,\n                    file_fd,\n                    &offset,\n                    send_size);\n#endif /* HAVE_SENDFILE64 */\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN --- no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n#ifdef HAVE_LINUX_SENDFILE\n    if (MHD_SCKT_ERR_IS_ (err,\n                          MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* sendfile() failed with EINVAL if mmap()-like operations are not\n       supported for FD or other 'unusual' errors occurred, so we should try\n       to fall back to 'SEND'; see also this thread for info on\n       odd libc/Linux behavior with sendfile:\n       http://lists.gnu.org/archive/html/libmicrohttpd/2011-02/msg00015.html */\n    connection->rp.resp_sender = MHD_resp_sender_std;\n    return MHD_ERR_AGAIN_;\n#else  /* HAVE_SOLARIS_SENDFILE */\n    if ( (EAFNOSUPPORT == err) ||\n         (EINVAL == err) ||\n         (EOPNOTSUPP == err) )\n    {     /* Retry with standard file reader. */\n      connection->rp.resp_sender = MHD_resp_sender_std;\n      return MHD_ERR_AGAIN_;\n    }\n    if ( (ENOTCONN == err) ||\n         (EPIPE == err) )\n    {\n      return MHD_ERR_CONNRESET_;\n    }\n    return MHD_ERR_BADF_;   /* Fail hard */\n#endif /* HAVE_SOLARIS_SENDFILE */\n  }\n#ifdef EPOLL_SUPPORT\n  else if (send_size > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n#elif defined(HAVE_FREEBSD_SENDFILE)\n#ifdef SF_FLAGS\n  flags = used_thr_p_c ?\n          freebsd_sendfile_flags_thd_p_c_ : freebsd_sendfile_flags_;\n#endif /* SF_FLAGS */\n  if (0 != sendfile (file_fd,\n                     connection->socket_fd,\n                     (off_t) offsetu64,\n                     send_size,\n                     NULL,\n                     &sent_bytes,\n                     flags))\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err) ||\n        MHD_SCKT_ERR_IS_EINTR_ (err) ||\n        (EBUSY == err) )\n    {\n      mhd_assert (SSIZE_MAX >= sent_bytes);\n      if (0 != sent_bytes)\n        return (ssize_t) sent_bytes;\n\n      return MHD_ERR_AGAIN_;\n    }\n    /* Some unrecoverable error. Possibly file FD is not suitable\n     * for sendfile(). Retry with standard send(). */\n    connection->rp.resp_sender = MHD_resp_sender_std;\n    return MHD_ERR_AGAIN_;\n  }\n  mhd_assert (0 < sent_bytes);\n  mhd_assert (SSIZE_MAX >= sent_bytes);\n  ret = (ssize_t) sent_bytes;\n#elif defined(HAVE_DARWIN_SENDFILE)\n  len = (off_t) send_size; /* chunk always fit */\n  if (0 != sendfile (file_fd,\n                     connection->socket_fd,\n                     (off_t) offsetu64,\n                     &len,\n                     NULL,\n                     0))\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err) ||\n        MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      mhd_assert (0 <= len);\n      mhd_assert (SSIZE_MAX >= len);\n      mhd_assert (send_size >= (size_t) len);\n      if (0 != len)\n        return (ssize_t) len;\n\n      return MHD_ERR_AGAIN_;\n    }\n    if ((ENOTCONN == err) ||\n        (EPIPE == err) )\n      return MHD_ERR_CONNRESET_;\n    if ((ENOTSUP == err) ||\n        (EOPNOTSUPP == err) )\n    {     /* This file FD is not suitable for sendfile().\n           * Retry with standard send(). */\n      connection->rp.resp_sender = MHD_resp_sender_std;\n      return MHD_ERR_AGAIN_;\n    }\n    return MHD_ERR_BADF_;   /* Return hard error. */\n  }\n  mhd_assert (0 <= len);\n  mhd_assert (SSIZE_MAX >= len);\n  mhd_assert (send_size >= (size_t) len);\n  ret = (ssize_t) len;\n#endif /* HAVE_FREEBSD_SENDFILE */\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* It's unknown whether sendfile() will be used in the next\n   * response so assume that next response will be the same. */\n  if ( (push_data) &&\n       (send_size == (size_t) ret) )\n    post_send_setopt (connection, false, push_data);\n\n  return ret;\n}\n...\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (tls_conn)\n{\n#ifdef HTTPS_SUPPORT\n  pre_send_setopt (connection, (! tls_conn), push_data);\n  ret = gnutls_record_send (connection->tls_session,\n                            buffer,\n                            buffer_size);\n  if (GNUTLS_E_AGAIN == ret)\n  {\n#ifdef EPOLL_SUPPORT\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n    return MHD_ERR_AGAIN_;\n  }\n  if (GNUTLS_E_INTERRUPTED == ret)\n    return MHD_ERR_AGAIN_;\n  if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n       (GNUTLS_E_INVALID_SESSION == ret) ||\n       (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n       (GNUTLS_E_EXPIRED == ret) ||\n       (GNUTLS_E_HASH_FAILED == ret) )\n    return MHD_ERR_TLS_;\n  if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n       (GNUTLS_E_INTERNAL_ERROR == ret) ||\n       (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n       (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n    return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n  if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n    return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n  if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n    return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n  if (GNUTLS_E_MEMORY_ERROR == ret)\n    return MHD_ERR_NOMEM_;\n  if (ret < 0)\n  {\n    /* Treat any other error as hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  /* Unlike non-TLS connections, do not reset \"write-ready\" if\n   * sent amount smaller than provided amount, as TLS\n   * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n  ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "If the code is built without HTTPS_SUPPORT, the const bool tls_conn is defined as false (via the #else branch), so the condition if (tls_conn) is statically false and the entire block is unreachable. Thus the statements inside that if (including the #else ret = MHD_ERR_NOTCONN_ branch placed within the unreachable block) are unreachable at compile time, violating MISRA C 2023 Rule 2.1."
}