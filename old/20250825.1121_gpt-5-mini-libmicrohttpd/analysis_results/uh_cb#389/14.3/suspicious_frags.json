{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of uh_cb:\n```c\nstatic void\nuh_cb (void *cls, struct MHD_Connection *con, void *req_cls,\n       const char *extra_in, size_t extra_in_size, MHD_socket sock,\n       struct MHD_UpgradeResponseHandle *urh)\n{\n  struct WsData *ws;\n  pthread_t pt;\n  int sock_overflow;\n  int i;\n\n  (void) cls;            /* Unused. Silent compiler warning. */\n  (void) con;            /* Unused. Silent compiler warning. */\n  (void) req_cls;        /* Unused. Silent compiler warning. */\n  (void) extra_in;       /* Unused. Silent compiler warning. */\n  (void) extra_in_size;  /* Unused. Silent compiler warning. */\n\n  ws = malloc (sizeof (struct WsData));\n  if (NULL == ws)\n    abort ();\n  memset (ws, 0, sizeof (struct WsData));\n  ws->sock = sock;\n  ws->urh = urh;\n  sock_overflow = MHD_YES;\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (MHD_INVALID_SOCKET == CLIENT_SOCKS[i])\n    {\n      CLIENT_SOCKS[i] = ws->sock;\n      sock_overflow = MHD_NO;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  if (sock_overflow)\n  {\n    free (ws);\n    MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n    return;\n  }\n  if (0 != pthread_create (&pt, NULL, &run_usock, ws))\n    abort ();\n  /* Note that by detaching like this we make it impossible to ensure\n     a clean shutdown, as the we stop the daemon even if a worker thread\n     is still running. Alas, this is a simple example... */\n  pthread_detach (pt);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function uh_cb:\nstatic pthread_mutex_t MUTEX = PTHREAD_MUTEX_INITIALIZER\n...\n#define MAX_CLIENTS 10\n...\nstatic MHD_socket CLIENT_SOCKS[MAX_CLIENTS]\n...\n#define MHD_INVALID_SOCKET (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (0 != pthread_mutex_unlock (&MUTEX))",
    "for (i = 0; i < MAX_CLIENTS; i++)",
    "if (NULL == ws)",
    "if (MHD_INVALID_SOCKET == CLIENT_SOCKS[i])",
    "if (0 != pthread_create (&pt, NULL, &run_usock, ws))",
    "if (sock_overflow)",
    "if (0 != pthread_mutex_lock (&MUTEX))"
  ],
  "explanation": "I selected all controlling expressions (if and for) in uh_cb for inspection because Rule 14.3 concerns invariant controlling expressions. These fragments are the only statements in the function that control flow; other parts of the function are non-control operations (variable declarations/initializations, casts to void to silence warnings, malloc/memset/free, assignments, pthread_detach, return, abort calls, and calls that are not used as controlling expressions). Those non-control parts therefore do not fall under Rule 14.3 and do not need investigation for invariant controlling expressions. The selected fragments should be investigated to verify they are not invariant at runtime (or that any invariance is allowed by the rule exceptions)."
}