{
  "user_message": "An agent A claimed that the following MHD_get_connection_values_n code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values_n.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for loop uses a single loop counter 'pos' (initialized in the first clause, tested in second clause, incremented in third clause via pos = pos->next). However the loop body calls the user-supplied function 'iterator(...)'. Per the rule, the behaviour of the loop body includes called functions, so the iterator callback could modify the linked-list nodes (including the current node or its next pointer) or even modify 'pos'. The third clause uses pos->next (an object that may be modified by the body/callback). Therefore the third clause potentially uses objects modified in the loop body and the loop counter may be modified indirectly by the callback, violating the requirement that the third clause modify only the loop counter and not use objects modified in the loop body. This is a violation of MISRA C 2023 Rule 14.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the else-branch the for loop uses pos as the loop counter and the third clause is pos = pos->next. The loop body calls the externally-supplied iterator callback; per the rule the behaviour of the loop body includes called functions, so that callback could modify the linked list (for example change or remove the current node or its next pointer). The third clause therefore reads an object (pos->next) that may have been modified by the loop body/callback, which contravenes MISRA C 2023 Rule 14.2 (the third clause shall modify only the loop counter and shall not use objects modified in the loop body). Note: the iterator == NULL branch (no callback) would be fine, but the else branch as written is non\u2011compliant. A typical fix is to compute and save next = pos->next before invoking the callback and then assign pos = next in the third clause (or use an explicit while loop that updates pos from a saved next value)."
}