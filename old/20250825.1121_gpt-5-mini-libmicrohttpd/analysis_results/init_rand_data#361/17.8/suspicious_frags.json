{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of init_rand_data:\n```c\nstatic int\ninit_rand_data (void)\n{\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  int fd;\n  ssize_t len;\n  size_t off;\n\n  fd = open (\"/dev/urandom\", O_RDONLY);\n  if (-1 == fd)\n  {\n    fprintf (stderr, \"Failed to open '%s': %s\\n\",\n             \"/dev/urandom\",\n             strerror (errno));\n    return 0;\n  }\n  for (off = 0; off < sizeof(rand_data); off += (size_t) len)\n  {\n    len = read (fd, rand_data, 8);\n    if (0 > len)\n    {\n      fprintf (stderr, \"Failed to read '%s': %s\\n\",\n               \"/dev/urandom\",\n               strerror (errno));\n      (void) close (fd);\n      return 0;\n    }\n  }\n  (void) close (fd);\n#else  /* Native W32 */\n  HCRYPTPROV cc;\n  BOOL b;\n\n  b = CryptAcquireContext (&cc,\n                           NULL,\n                           NULL,\n                           PROV_RSA_FULL,\n                           CRYPT_VERIFYCONTEXT);\n  if (FALSE == b)\n  {\n    fprintf (stderr,\n             \"Failed to acquire crypto provider context: %lu\\n\",\n             (unsigned long) GetLastError ());\n    return 0;\n  }\n  b = CryptGenRandom (cc, sizeof(rand_data), (BYTE *) rand_data);\n  if (FALSE == b)\n  {\n    fprintf (stderr,\n             \"Failed to generate 8 random bytes: %lu\\n\",\n             GetLastError ());\n  }\n  CryptReleaseContext (cc, 0);\n  if (FALSE == b)\n    return 0;\n#endif /* Native W32 */\n\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function init_rand_data:\nstatic uint8_t rand_data[8]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "Rule 17.8 concerns modification of a function\u2019s parameters (and specifically forbids modifying a pointer parameter itself, though the pointed-to object may be modified). The function shown, init_rand_data, has no parameters (defined as void), so there are no function parameters that could be modified inside this function \u2014 hence no direct candidates for investigation under Rule 17.8. All pointer usage in the function involves passing addresses of local variables or the global array rand_data to external APIs (e.g. &cc, (BYTE *)rand_data). Modifying the object referred to by a pointer parameter (what those APIs do) is allowed by the rule, and init_rand_data itself does not assign to any parameter pointer (there are none). Therefore no fragments in this function need investigation for MISRA C 2023 Rule 17.8."
}