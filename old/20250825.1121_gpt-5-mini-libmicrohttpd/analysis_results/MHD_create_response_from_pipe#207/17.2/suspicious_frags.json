{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_pipe:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_pipe (int fd)\n{\n  struct MHD_Response *response;\n\n  response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &pipe_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = true;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_create_response_from_pipe:\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  if ((NULL == crc) || (0 == block_size))\n    return NULL;\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n    return NULL;\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n  return response;\n}\n...\nstatic ssize_t\npipe_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  ssize_t n;\n\n  (void) pos;\n\n#ifndef _WIN32\n  if (SSIZE_MAX < max)\n    max = SSIZE_MAX;\n  n = read (response->fd,\n            buf,\n            (MHD_SCKT_SEND_SIZE_) max);\n#else  /* _WIN32 */\n  if (UINT_MAX < max)\n    max = INT_MAX;\n  n = read (response->fd,\n            buf,\n            (unsigned int) max);\n#endif /* _WIN32 */\n\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n}\n...\nstatic void\nfree_callback (void *cls)\n{\n  struct MHD_Response *response = cls;\n\n  (void) close (response->fd);\n  response->fd = -1;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "Based on the provided code fragments, there is no evidence of direct or indirect recursion that would violate MISRA C 2023 Rule 17.2. Reasoning:\n\n- MHD_create_response_from_pipe only calls MHD_create_response_from_callback; it does not call itself.\n- MHD_create_response_from_callback does not call MHD_create_response_from_pipe or itself in the shown code; it only allocates/initializes a response structure and stores the supplied callback pointers (crc and crfc).\n- The callback functions provided (pipe_reader and free_callback) do not call MHD_create_response_from_pipe or MHD_create_response_from_callback: pipe_reader performs a read on response->fd and returns a ssize_t value; free_callback closes the fd. Neither callback invokes any creation/allocation functions shown here.\n- Assignments such as response->crc = crc and response->crc_cls = crc_cls (and response->crc_cls = response in MHD_create_response_from_pipe) store pointers but do not cause calls at that point; no shown code invokes those callbacks recursively.\n\nTherefore, within the scope of the supplied code, no function calls itself directly or indirectly. If other code (not provided) later invokes the callbacks (crc/crfc) and those callback implementations call back into the response-creation functions, that could create an indirect recursion \u2014 but such behavior is not present in the provided fragments and would need to be assessed from the additional code where those callbacks are used. Given only the presented code, there are no suspicious fragments to investigate for Rule 17.2."
}