{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_proc_cpu_count_sched_getaffinity_:\n```c\nstatic int\nmhd_tool_get_proc_cpu_count_sched_getaffinity_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SCHED_GETAFFINITY) && defined(HAVE_GETPID)\n  /* Glibc style */\n  if (0 >= ret)\n  {\n    cpu_set_t cur_set;\n    if (0 == sched_getaffinity (getpid (), sizeof (cur_set), &cur_set))\n    {\n#ifdef HAVE_CPU_COUNT\n      ret = CPU_COUNT (&cur_set);\n#else  /* ! HAVE_CPU_COUNT */\n      unsigned int i;\n      ret = 0;\n      for (i = 0; i < CPU_SETSIZE_SAFE; ++i)\n      {\n        if (CPU_ISSET (i, &cur_set))\n          ++ret;\n      }\n      if (0 == ret)\n        ret = -1;\n#endif /* ! HAVE_CPU_COUNT */\n    }\n  }\n#ifdef HAVE_CPU_COUNT_S\n  if (0 >= ret)\n  {\n    /* Use 256 times larger size than size for default maximum CPU number.\n       Hopefully it would be enough even for exotic situations. */\n    static const unsigned int set_size_cpus = 256 * CPU_SETSIZE;\n    const size_t set_size_bytes = CPU_ALLOC_SIZE (set_size_cpus);\n    cpu_set_t *p_set;\n\n    p_set = CPU_ALLOC (set_size_cpus);\n    if (NULL != p_set)\n    {\n      if (0 == sched_getaffinity (getpid (), set_size_bytes, p_set))\n      {\n#ifndef MHD_FUNC_CPU_COUNT_S_GETS_CPUS\n        ret = CPU_COUNT_S (set_size_bytes, p_set);\n#else  /* MHD_FUNC_CPU_COUNT_S_GETS_CPUS */\n        ret = CPU_COUNT_S (set_size_cpus, p_set);\n#endif /* MHD_FUNC_CPU_COUNT_S_GETS_CPUS */\n      }\n      CPU_FREE (p_set);\n    }\n  }\n#endif /* HAVE_CPU_COUNT_S */\n#endif /* HAVE_SCHED_GETAFFINITY && HAVE_GETPID */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function mhd_tool_get_proc_cpu_count_sched_getaffinity_:\n#define CPU_SETSIZE_SAFE CPU_SETSIZE\n...\n#define HAVE_CPU_COUNT 1\n...\n#define HAVE_CPU_COUNT_S 1\n...\n#define HAVE_SCHED_GETAFFINITY 1\n...\n#define HAVE_GETPID 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "ret = CPU_COUNT_S (set_size_cpus, p_set);",
    "p_set = CPU_ALLOC (set_size_cpus);",
    "ret = CPU_COUNT (&cur_set);",
    "if (0 == sched_getaffinity (getpid (), set_size_bytes, p_set))",
    "CPU_FREE (p_set);",
    "ret = CPU_COUNT_S (set_size_bytes, p_set);",
    "if (CPU_ISSET (i, &cur_set))",
    "const size_t set_size_bytes = CPU_ALLOC_SIZE (set_size_cpus);",
    "if (0 == sched_getaffinity (getpid (), sizeof (cur_set), &cur_set))"
  ],
  "explanation": "Rule 17.8 concerns modification of function parameters (the pointer value itself must not be changed; modification of the object pointed to is allowed). The function under review has no formal parameters, so there are no direct parameter assignments to inspect inside it. However, the code calls several external/library functions and uses macros while passing pointer arguments (addresses of local cpu_set_t or the allocated p_set). Those call sites are listed above because the implementations/macros of sched_getaffinity, CPU_COUNT, CPU_COUNT_S, CPU_ISSET, CPU_ALLOC, CPU_ALLOC_SIZE and CPU_FREE could, in their own definitions, modify pointer parameters (or use macros that assign to the caller-supplied identifier) \u2014 which would need investigation to ensure compliance with Rule 17.8. Other fragments in the function (initialization and updates of local variables like ret and i, loop control, comparisons, returns, and the increment ++ret) operate on local objects and do not involve modifying function parameters, so they are not relevant to Rule 17.8 and do not need investigation for this specific rule."
}