{
  "user_message": "An agent A claimed that the following response_completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of response_completed_callback.\n```c\nstatic void\nresponse_completed_callback (void *cls,\n                             struct MHD_Connection *connection,\n                             void **req_cls,\n                             enum MHD_RequestTerminationCode toe)\n{\n  struct UploadContext *uc = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == uc)\n    return; /* this request wasn't an upload request */\n  if (NULL != uc->pp)\n  {\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n  }\n  if (-1 != uc->fd)\n  {\n    (void) close (uc->fd);\n    if (NULL != uc->filename)\n    {\n      fprintf (stderr,\n               \"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\",\n               uc->filename);\n      (void) unlink (uc->filename);\n    }\n  }\n  if (NULL != uc->filename)\n    free (uc->filename);\n  free (uc);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer declaration 'struct MHD_Connection *connection;' is not const-qualified even though in the shown usage (response_completed_callback) the pointee is not modified. The function only casts the parameter to void to silence warnings and never alters the pointed-to object, so the pointer could and should be declared as pointing to a const-qualified type (e.g. 'const struct MHD_Connection *connection').\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function response_completed_callback:\nstruct UploadContext\n{\n  /**\n   * Handle where we write the uploaded file to.\n   */\n  int fd;\n\n  /**\n   * Name of the file on disk (used to remove on errors).\n   */\n  char *filename;\n\n  /**\n   * Language for the upload.\n   */\n  char *language;\n\n  /**\n   * Category for the upload.\n   */\n  char *category;\n\n  /**\n   * Post processor we're using to process the upload.\n   */\n  struct MHD_PostProcessor *pp;\n\n  /**\n   * Handle to connection that we're processing the upload for.\n   */\n  struct MHD_Connection *connection;\n\n  /**\n   * Response to generate, NULL to use directory.\n   */\n  struct MHD_Response *response;\n}\n...\nstruct MHD_Connection\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 R8.13 advises that pointers should point to const-qualified types where possible, but it is not an absolute change you can make to a function prototype that must match an external API/callback type. response_completed_callback is a callback whose signature is determined by the (libmicrohttpd) API: the library declares the connection parameter as struct MHD_Connection * (non-const), so the implementation must match that type. Changing it to const struct MHD_Connection * would break the required prototype and the callback registration. Also the code stores a non-const struct MHD_Connection * in UploadContext, so making the parameter const would be inconsistent with the rest of the program unless all related APIs and fields were changed. Therefore the reported violation is not valid in this context (the non-const pointer is required by the external API), so the report is incorrect."
}