{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of response_completed_callback:\n```c\nstatic void\nresponse_completed_callback (void *cls,\n                             struct MHD_Connection *connection,\n                             void **req_cls,\n                             enum MHD_RequestTerminationCode toe)\n{\n  struct UploadContext *uc = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == uc)\n    return; /* this request wasn't an upload request */\n  if (NULL != uc->pp)\n  {\n    MHD_destroy_post_processor (uc->pp);\n    uc->pp = NULL;\n  }\n  if (-1 != uc->fd)\n  {\n    (void) close (uc->fd);\n    if (NULL != uc->filename)\n    {\n      fprintf (stderr,\n               \"Upload of file `%s' failed (incomplete or aborted), removing file.\\n\",\n               uc->filename);\n      (void) unlink (uc->filename);\n    }\n  }\n  if (NULL != uc->filename)\n    free (uc->filename);\n  free (uc);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function response_completed_callback:\nstruct UploadContext\n{\n  /**\n   * Handle where we write the uploaded file to.\n   */\n  int fd;\n\n  /**\n   * Name of the file on disk (used to remove on errors).\n   */\n  char *filename;\n\n  /**\n   * Language for the upload.\n   */\n  char *language;\n\n  /**\n   * Category for the upload.\n   */\n  char *category;\n\n  /**\n   * Post processor we're using to process the upload.\n   */\n  struct MHD_PostProcessor *pp;\n\n  /**\n   * Handle to connection that we're processing the upload for.\n   */\n  struct MHD_Connection *connection;\n\n  /**\n   * Response to generate, NULL to use directory.\n   */\n  struct MHD_Response *response;\n}\n...\nstruct MHD_Connection\n...\nenum MHD_RequestTerminationCode\n{\n\n  /**\n   * We finished sending the response.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_COMPLETED_OK = 0,\n\n  /**\n   * Error handling the connection (resources\n   * exhausted, application error accepting request,\n   * decrypt error (for HTTPS), connection died when\n   * sending the response etc.)\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_WITH_ERROR = 1,\n\n  /**\n   * No activity on the connection for the number\n   * of seconds specified using\n   * #MHD_OPTION_CONNECTION_TIMEOUT.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_TIMEOUT_REACHED = 2,\n\n  /**\n   * We had to close the session since MHD was being\n   * shut down.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN = 3,\n\n  /**\n   * We tried to read additional data, but the connection became broken or\n   * the other side hard closed the connection.\n   * This error is similar to #MHD_REQUEST_TERMINATED_WITH_ERROR, but\n   * specific to the case where the connection died before request completely\n   * received.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_READ_ERROR = 4,\n\n  /**\n   * The client terminated the connection by closing the socket\n   * for writing (TCP half-closed) while still sending request.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_CLIENT_ABORT = 5\n\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the function and the related type declarations for use of compiler-specific language extensions. The code does not contain any of the common compiler extensions that would violate MISRA C 2023 Rule 1.2: no __attribute__ or __declspec, no typeof, no statement-expressions ({ ... }) used as an expression, no nested functions, no inline assembler, no GCC/Clang/MSC nonstandard keywords, no use of extended integer width keywords, no anonymous/unnamed struct/union extensions, and no C++-only constructs. Casting unused parameters to (void) to suppress warnings, use of standard library/OS calls (close, unlink, fprintf, free) and use of library-specific types (struct MHD_*, enum MHD_RequestTerminationCode) are not compiler language extensions \u2014 they are standard C or external library/OS APIs. Therefore there are no code fragments in the provided code that need investigation for use of language compiler extensions."
}