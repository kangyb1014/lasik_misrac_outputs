{
  "user_message": "An agent A claimed that the following add_session_cookie code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_session_cookie.\n```c\nstatic void\nadd_session_cookie (struct Session *session,\n                    struct MHD_Response *response)\n{\n  char cstr[256];\n  snprintf (cstr,\n            sizeof (cstr),\n            \"%s=%s\",\n            COOKIE_NAME,\n            session->sid);\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_SET_COOKIE,\n                               cstr))\n  {\n    fprintf (stderr,\n             \"Failed to set session cookie header!\\n\");\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'session' is not const-qualified even though the function only reads from it (uses session->sid to build the cookie and does not modify session). It should be declared as 'const struct Session *session'. Note: 'response' is passed to MHD_add_response_header which modifies it, so it should remain non-const.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown code add_session_cookie only reads from the session object (it uses session->sid to build a string) and does not modify the object pointed to. MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever that is possible \u2014 here the session parameter can and should be declared const (e.g. const struct Session *session). The response parameter should remain non-const because it is passed to MHD_add_response_header which modifies the response. One caveat: if the function signature must match some external API or callback type that requires a non-const pointer, changing it would not be possible; in that case the deviation must be documented. Otherwise changing the parameter to const fixes the violation."
}