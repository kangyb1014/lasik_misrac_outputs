{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_lookup_connection_value': {'callees': ['MHD_lookup_connection_value_n'], 'callers': ['ahc_echo', 'get_session', 'ahc_cb', 'can_compress']}, 'need_100_continue': {'callees': ['MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_'], 'callers': ['MHD_connection_handle_idle']}, 'get_no_space_err_status_code': {'callees': ['MHD_lookup_connection_value_n'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space']}, 'parse_cookie_header': {'callees': ['MHD_lookup_connection_value_n', 'MHD_connection_alloc_memory_', 'parse_cookies_string', 'MHD_DLOG'], 'callers': ['parse_connection_headers']}, 'parse_connection_headers': {'callees': ['parse_cookie_header', 'handle_req_cookie_no_space', 'MHD_lookup_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len', 'MHD_str_equal_caseless_', 'MHD_str_to_uint64_n_'], 'callers': ['MHD_connection_handle_idle']}, 'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result",
    "enum MHD_ValueKind",
    "struct MHD_Connection",
    "struct MHD_HTTP_Req_Header",
    "MHD_str_equal_caseless_bin_n_",
    "MHD_YES",
    "MHD_NO",
    "NULL"
  ],
  "explanation": "For checking whether the target function uses any compiler language extensions you must inspect any macros, attributes, non\u2011standard storage/class specifiers, or non\u2011standard type definitions that the function relies on. The listed symbols are required because:\n\n- _MHD_EXTERN: This is a macro in the function signature. It may expand to compiler\u2011specific linkage, visibility, or attribute annotations (for example __attribute__((...)), __declspec(...), extern \"C\" in headers, etc.). To decide if a language extension is used you must see its expansion.\n\n- enum MHD_Result: The function returns this enum. The enum definition could use nonstandard underlying types or attributes (packed, visibility, extension keywords). Inspecting it ensures no extension is present.\n\n- enum MHD_ValueKind: Used in the parameter list and bitwise tests (kind & pos->kind). Its definition may use compiler extensions (custom underlying type, bitfield enums, attributes) that would violate the MISRA extension rule.\n\n- struct MHD_Connection: The function dereferences connection and accesses connection->rq.headers_received. The struct definition (and any nested types or macros used to declare it) must be checked for compiler extensions (e.g., anonymous structs/unions, attributes, unusual storage\u2011class specifiers).\n\n- struct MHD_HTTP_Req_Header: The local variable pos is this type and the code accesses fields (next, kind, header, header_size, value, value_size). The struct\u2019s declaration may include extensions (bitfields, packed/aligned attributes, anonymous members) that would be a MISRA concern.\n\n- MHD_str_equal_caseless_bin_n_: This helper is invoked in the comparison. Its declaration/definition must be checked for nonstandard calling conventions, inline/attribute usage, builtins, or compiler extensions that the function depends on.\n\n- MHD_YES and MHD_NO: These macros/constants are returned by the function. They may be macros with nonstandard constructs (casts, attributes) or map to values using extensions; inspect their definitions.\n\n- NULL: Although standard, NULL\u2019s macro expansion can differ between implementations (e.g. ((void *)0) vs 0). To be thorough in MISRA extension checks, confirm how NULL is defined in the project headers.\n\nProvide these symbol definitions/headers to the next analyzer so it can detect any use of compiler extensions (attributes, __builtin_*, __declspec, anonymous structs/unions, nonstandard underlying enum types, etc.) used directly or via macros."
}