{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_long_param:\n```c\nstatic enum PerfRepl_param_result\nprocess_long_param (const char *param, const char *next_param)\n{\n  const size_t param_len = strlen (param);\n\n  if ((MHD_STATICSTR_LEN_ (\"all-cpus\") == param_len) &&\n      (0 == memcmp (param, \"all-cpus\", MHD_STATICSTR_LEN_ (\"all-cpus\"))))\n    return process_param__all_cpus (\"--all-cpus\");\n  else if ((MHD_STATICSTR_LEN_ (\"threads\") <= param_len) &&\n           (0 == memcmp (param, \"threads\", MHD_STATICSTR_LEN_ (\"threads\"))))\n    return process_param__threads (\"--threads\",\n                                   param + MHD_STATICSTR_LEN_ (\"threads\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"thread-per-conn\") == param_len) &&\n           (0 == memcmp (param, \"thread-per-conn\",\n                         MHD_STATICSTR_LEN_ (\"thread-per-conn\"))))\n    return process_param__thread_per_conn (\"--thread-per-conn\");\n  else if ((MHD_STATICSTR_LEN_ (\"epoll\") == param_len) &&\n           (0 == memcmp (param, \"epoll\", MHD_STATICSTR_LEN_ (\"epoll\"))))\n    return process_param__epoll (\"--epoll\");\n  else if ((MHD_STATICSTR_LEN_ (\"poll\") == param_len) &&\n           (0 == memcmp (param, \"poll\", MHD_STATICSTR_LEN_ (\"poll\"))))\n    return process_param__poll (\"--poll\");\n  else if ((MHD_STATICSTR_LEN_ (\"select\") == param_len) &&\n           (0 == memcmp (param, \"select\", MHD_STATICSTR_LEN_ (\"select\"))))\n    return process_param__select (\"--select\");\n  else if ((MHD_STATICSTR_LEN_ (\"empty\") == param_len) &&\n           (0 == memcmp (param, \"empty\", MHD_STATICSTR_LEN_ (\"empty\"))))\n    return process_param__empty (\"--empty\");\n  else if ((MHD_STATICSTR_LEN_ (\"tiny\") == param_len) &&\n           (0 == memcmp (param, \"tiny\", MHD_STATICSTR_LEN_ (\"tiny\"))))\n    return process_param__tiny (\"--tiny\");\n  else if ((MHD_STATICSTR_LEN_ (\"medium\") == param_len) &&\n           (0 == memcmp (param, \"medium\", MHD_STATICSTR_LEN_ (\"medium\"))))\n    return process_param__medium (\"--medium\");\n  else if ((MHD_STATICSTR_LEN_ (\"large\") == param_len) &&\n           (0 == memcmp (param, \"large\", MHD_STATICSTR_LEN_ (\"large\"))))\n    return process_param__large (\"--large\");\n  else if ((MHD_STATICSTR_LEN_ (\"shared\") == param_len) &&\n           (0 == memcmp (param, \"shared\", MHD_STATICSTR_LEN_ (\"shared\"))))\n    return process_param__shared (\"--shared\");\n  else if ((MHD_STATICSTR_LEN_ (\"single\") == param_len) &&\n           (0 == memcmp (param, \"single\", MHD_STATICSTR_LEN_ (\"single\"))))\n    return process_param__single (\"--single\");\n  else if ((MHD_STATICSTR_LEN_ (\"unique\") == param_len) &&\n           (0 == memcmp (param, \"unique\", MHD_STATICSTR_LEN_ (\"unique\"))))\n    return process_param__unique (\"--unique\");\n  else if ((MHD_STATICSTR_LEN_ (\"connections\") <= param_len) &&\n           (0 == memcmp (param, \"connections\",\n                         MHD_STATICSTR_LEN_ (\"connections\"))))\n    return process_param__connections (\"--connections\",\n                                       param\n                                       + MHD_STATICSTR_LEN_ (\"connections\"),\n                                       next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"timeout\") <= param_len) &&\n           (0 == memcmp (param, \"timeout\",\n                         MHD_STATICSTR_LEN_ (\"timeout\"))))\n    return process_param__timeout (\"--timeout\",\n                                   param + MHD_STATICSTR_LEN_ (\"timeout\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"date-header\") == param_len) &&\n           (0 == memcmp (param, \"date-header\",\n                         MHD_STATICSTR_LEN_ (\"date-header\"))))\n    return process_param__date_header (\"--date-header\");\n  else if ((MHD_STATICSTR_LEN_ (\"help\") == param_len) &&\n           (0 == memcmp (param, \"help\", MHD_STATICSTR_LEN_ (\"help\"))))\n    return process_param__help (\"--help\");\n  else if ((MHD_STATICSTR_LEN_ (\"version\") == param_len) &&\n           (0 == memcmp (param, \"version\", MHD_STATICSTR_LEN_ (\"version\"))))\n    return process_param__version (\"--version\");\n\n  fprintf (stderr, \"Unrecognised parameter: --%s.\\n\", param);\n  return PERF_RPL_PARAM_ERROR;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_long_param:\n#define MHD_STATICSTR_LEN_(macro) (sizeof(macro)/sizeof(char)-1)\n...\nstatic int\nprocess_params (int argc, char *const *argv)\n{\n  int proc_dash_param = ! 0;\n  int i;\n  for (i = 1; i < argc; ++i)\n  {\n    /**\n     * The currently processed argument\n     */\n    const char *const p = argv[i];\n    const char *const p_next = (argc == (i + 1)) ? NULL : (argv[i + 1]);\n    if (NULL == p)\n    {\n      fprintf (stderr, \"The NULL in the parameter number %d. \"\n               \"The error in the C library?\\n\", i);\n      continue;\n    }\n    else if (0 == p[0])\n      continue; /* Empty */\n    else if (proc_dash_param && ('-' == p[0]))\n    {\n      enum PerfRepl_param_result param_res;\n      if ('-' == p[1])\n      {\n        if (0 == p[2])\n        {\n          proc_dash_param = 0; /* The '--' parameter */\n          continue;\n        }\n        param_res = process_long_param (p + 2, p_next);\n      }\n      else\n        param_res = process_short_params_str (p + 1, p_next);\n\n      if (PERF_RPL_PARAM_ERROR == param_res)\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      if (PERF_RPL_PARAM_STR_PLUS_NEXT == param_res)\n        ++i;\n      else if (PERF_RPL_PARAM_ONE_CHAR == param_res)\n        abort ();\n      continue;\n    }\n    else if (('0' <= p[0]) && ('9' >= p[0]))\n    {\n      /* Process the port number */\n      unsigned int read_port;\n      size_t num_digits;\n      num_digits = mhd_tool_str_to_uint (p, &read_port);\n      if (0 != p[num_digits])\n      {\n        fprintf (stderr, \"Error in specified port number: %s\\n\", p);\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      }\n      else if (65535 < read_port)\n      {\n        fprintf (stderr, \"Wrong port number: %s\\n\", p);\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      }\n      mhd_port = (uint16_t) read_port;\n    }\n    else\n    {\n      fprintf (stderr, \"Unrecognised parameter: %s\\n\\n\", p);\n      return PERF_RPL_ERR_CODE_BAD_PARAM;\n    }\n  }\n  return 0;\n}\n...\nstatic enum PerfRepl_param_result\nprocess_param__threads (const char *param_name, const char *param_tail,\n                        const char *next_param)\n{\n  unsigned int param_value;\n  enum PerfRepl_param_result value_res;\n\n  if (tool_params.all_cpus)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-A' or '--all-cpus'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  if (tool_params.thread_per_conn)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-P' or '--thread-per-conn'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  value_res = get_param_value (param_name, param_tail, next_param,\n                               &param_value);\n  if (PERF_RPL_PARAM_ERROR == value_res)\n    return value_res;\n\n  if (0 == param_value)\n  {\n    fprintf (stderr, \"'0' is not valid value for parameter '%s'.\\n\",\n             param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  tool_params.threads = param_value;\n  return value_res;\n}\n...\nstatic enum PerfRepl_param_result\nprocess_param__connections (const char *param_name, const char *param_tail,\n                            const char *next_param)\n{\n  unsigned int param_value;\n  enum PerfRepl_param_result value_res;\n\n  value_res = get_param_value (param_name, param_tail, next_param,\n                               &param_value);\n  if (PERF_RPL_PARAM_ERROR == value_res)\n    return value_res;\n\n  if (0 == param_value)\n  {\n    fprintf (stderr, \"'0' is not valid value for parameter '%s'.\\n\",\n             param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  tool_params.connections = param_value;\n  return value_res;\n}\n...\nstatic enum PerfRepl_param_result\nprocess_param__timeout (const char *param_name, const char *param_tail,\n                        const char *next_param)\n{\n  unsigned int param_value;\n  enum PerfRepl_param_result value_res;\n\n  value_res = get_param_value (param_name, param_tail, next_param,\n                               &param_value);\n  if (PERF_RPL_PARAM_ERROR == value_res)\n    return value_res;\n\n  tool_params.timeout = param_value;\n  return value_res;\n}\n...\nstatic enum PerfRepl_param_result\nget_param_value (const char *param_name, const char *param_tail,\n                 const char *next_param, unsigned int *param_value)\n{\n  const char *value_str;\n  size_t digits;\n  if (0 != param_tail[0])\n  {\n    if ('=' != param_tail[0])\n      value_str = param_tail;\n    else\n      value_str = param_tail + 1;\n  }\n  else\n    value_str = next_param;\n\n  if (NULL != value_str)\n    digits = mhd_tool_str_to_uint (value_str, param_value);\n  else\n    digits = 0;\n\n  if ((0 == digits) || (0 != value_str[digits]))\n  {\n    fprintf (stderr, \"Parameter '%s' is not followed by valid number.\\n\",\n             param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n\n  if (0 != param_tail[0])\n    return PERF_RPL_PARAM_FULL_STR;\n\n  return PERF_RPL_PARAM_STR_PLUS_NEXT;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(0 == memcmp (param, \"thread-per-conn\",\n                         MHD_STATICSTR_LEN_ (\"thread-per-conn\")))\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The code computes param_len = strlen(param) and first checks (MHD_STATICSTR_LEN_(\"thread-per-conn\") == param_len). Because && evaluates left-to-right with short-circuiting, memcmp(param, \"thread-per-conn\", MHD_STATICSTR_LEN_(\"thread-per-conn\")) is only called when param_len equals the static string length. memcmp therefore reads exactly param_len bytes from param (the non\u2011null characters) which are within the bounds of the argv string; the string literal buffer is also large enough. Additionally, process_params ensures the argument pointer is non-NULL and non-empty before calling process_long_param. Therefore this use of memcmp does not access beyond object bounds and does not violate Rule 21.17."
}