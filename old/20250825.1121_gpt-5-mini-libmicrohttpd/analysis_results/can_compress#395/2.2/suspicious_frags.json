{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of can_compress:\n```c\nstatic enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{\n  const char *ae;\n  const char *de;\n\n  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);\n  if (NULL == ae)\n    return MHD_NO;\n  if (0 == strcmp (ae,\n                   \"*\"))\n    return MHD_YES;\n  de = strstr (ae,\n               \"deflate\");\n  if (NULL == de)\n    return MHD_NO;\n  if (((de == ae) ||\n       (de[-1] == ',') ||\n       (de[-1] == ' ')) &&\n      ((de[strlen (\"deflate\")] == '\\0') ||\n       (de[strlen (\"deflate\")] == ',') ||\n       (de[strlen (\"deflate\")] == ';')))\n    return MHD_YES;\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function can_compress:\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n...\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n...\n#define MHD_HTTP_HEADER_ACCEPT_ENCODING \"Accept-Encoding\"\n...\nstruct MHD_Connection\n...\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  enum MHD_Result comp;\n  size_t body_len;\n  char *body_str;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO; /* unexpected method */\n  if (! *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n\n  body_str = strdup (PAGE);\n  if (NULL == body_str)\n  {\n    return MHD_NO;\n  }\n  body_len = strlen (body_str);\n  /* try to compress the body */\n  comp = MHD_NO;\n  if (MHD_YES ==\n      can_compress (connection))\n    comp = body_compress ((void **) &body_str,\n                          &body_len);\n  response =\n    MHD_create_response_from_buffer_with_free_callback (body_len,\n                                                        body_str,\n                                                        &free);\n\n  if (NULL == response)\n  {\n    free (body_str);\n    return MHD_NO;\n  }\n\n  if (MHD_YES == comp)\n  {\n    /* Need to indicate to client that body is compressed */\n    if (MHD_NO ==\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\"))\n    {\n      MHD_destroy_response (response);\n      return MHD_NO;\n    }\n  }\n  ret = MHD_queue_response (connection,\n                            200,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n...\nstatic enum MHD_Result\nbody_compress (void **buf,\n               size_t *buf_size)\n{\n  Bytef *cbuf;\n  uLongf cbuf_size;\n  int ret;\n\n  cbuf_size = compressBound ((uLong) * buf_size);\n  cbuf = malloc (cbuf_size);\n  if (NULL == cbuf)\n    return MHD_NO;\n  ret = compress (cbuf,\n                  &cbuf_size,\n                  (const Bytef *) *buf,\n                  (uLong) * buf_size);\n  if ((Z_OK != ret) ||\n      (cbuf_size >= *buf_size))\n  {\n    /* compression failed */\n    free (cbuf);\n    return MHD_NO;\n  }\n  free (*buf);\n  *buf = (void *) cbuf;\n  *buf_size = (size_t) cbuf_size;\n  return MHD_YES;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "(void) upload_data;       /* Unused. Silent compiler warning. */",
    "(void) url;               /* Unused. Silent compiler warning. */",
    "(void) version;           /* Unused. Silent compiler warning. */",
    "(void) cls;               /* Unused. Silent compiler warning. */",
    "(void) upload_data_size;  /* Unused. Silent compiler warning. */"
  ],
  "explanation": "Other code fragments were not selected because they perform observable work or have side effects and therefore are not candidates for dead-code under MISRA C Rule 2.2: - can_compress: all string lookups (MHD_lookup_connection_value), strstr, strcmp and the checks around the 'deflate' token determine compression capability and affect program behaviour. - MHD_lookup_connection_value / MHD_lookup_connection_value_n: the latter iterates the received headers and writes to value_ptr/value_size_ptr; the call in MHD_lookup_connection_value is required for that side effect (so it is not dead). - ahc_echo: the request-handling control flow (method check, req_cls toggling, strdup, body_compress call, response creation, header addition, queuing and destruction) all affect program behaviour and resource management; removing them would change behaviour or cause leaks. - body_compress: allocation, compress call, free and buffer pointer update have side effects (memory, compressed output) and affect behaviour. - Macro and header definitions (e.g. MHD_HTTP_HEADER_ACCEPT_ENCODING) are used by the code and are not dead. The five (void) statements listed are simple no-op expressions inserted solely to suppress unused-parameter warnings; each is executed but has no effect on program behaviour, so they should be investigated for compliance with Rule 2.2."
}