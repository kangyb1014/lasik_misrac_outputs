{
  "user_message": "An agent A claimed that the following can_compress code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of can_compress.\n```c\nstatic enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{\n  const char *ae;\n  const char *de;\n\n  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);\n  if (NULL == ae)\n    return MHD_NO;\n  if (0 == strcmp (ae,\n                   \"*\"))\n    return MHD_YES;\n  de = strstr (ae,\n               \"deflate\");\n  if (NULL == de)\n    return MHD_NO;\n  if (((de == ae) ||\n       (de[-1] == ',') ||\n       (de[-1] == ' ')) &&\n      ((de[strlen (\"deflate\")] == '\\0') ||\n       (de[strlen (\"deflate\")] == ',') ||\n       (de[strlen (\"deflate\")] == ';')))\n    return MHD_YES;\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct MHD_Connection *con' but the function does not modify the pointed-to object. Per MISRA C 2023 Rule 8.13 this should be 'const struct MHD_Connection *con' (or otherwise const-qualified) so the pointer points to a const-qualified type. Local pointers to strings are already const-qualified (const char *ae, *de). If a non-const prototype of MHD_lookup_connection_value prevents changing the parameter, document that exception; otherwise change the parameter to const.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function can_compress:\nstruct MHD_Connection\n...\n#define MHD_HTTP_HEADER_ACCEPT_ENCODING \"Accept-Encoding\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude there is a definite MISRA 8.13 violation in the snippet. MISRA C 2023 Rule 8.13 says pointers should point to const-qualified types whenever possible. The body of can_compress does not modify the connection object, so from an implementation point of view declaring the parameter as const struct MHD_Connection *con would be desirable. However, whether that change is possible depends on the prototype of MHD_lookup_connection_value (and any other functions called with con). If MHD_lookup_connection_value is declared to take a non-const struct MHD_Connection * then can_compress cannot change its parameter to const without an incompatible conversion (or a cast). In that case it is reasonable and MISRA-compliant to keep the non-const parameter (or to document a formal deviation if required by your project). If, conversely, MHD_lookup_connection_value accepts a const struct MHD_Connection * (or there is no such restriction), then can_compress should be changed to take a const pointer and the agent\u2019s report would be correct. Because the prototype of MHD_lookup_connection_value is not provided, the agent\u2019s blanket claim that the code violates Rule 8.13 is not definitively correct."
}