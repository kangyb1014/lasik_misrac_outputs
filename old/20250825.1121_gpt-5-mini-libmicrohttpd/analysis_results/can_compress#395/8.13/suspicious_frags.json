{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of can_compress:\n```c\nstatic enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{\n  const char *ae;\n  const char *de;\n\n  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);\n  if (NULL == ae)\n    return MHD_NO;\n  if (0 == strcmp (ae,\n                   \"*\"))\n    return MHD_YES;\n  de = strstr (ae,\n               \"deflate\");\n  if (NULL == de)\n    return MHD_NO;\n  if (((de == ae) ||\n       (de[-1] == ',') ||\n       (de[-1] == ' ')) &&\n      ((de[strlen (\"deflate\")] == '\\0') ||\n       (de[strlen (\"deflate\")] == ',') ||\n       (de[strlen (\"deflate\")] == ';')))\n    return MHD_YES;\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function can_compress:\nstruct MHD_Connection\n...\n#define MHD_HTTP_HEADER_ACCEPT_ENCODING \"Accept-Encoding\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);",
    "static enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{"
  ],
  "explanation": "Do not investigate other fragments because they already use const-qualified pointer types or do not expose a pointer-to-non-const that could be made const: - The local variables ae and de are declared as const char * (they already satisfy Rule 8.13). - Assignments from string literals (e.g. \"*\", \"deflate\") and use of standard library functions (strcmp, strstr, strlen) involve const-qualified inputs or safe assignments to const pointers; these do not require further const-qualification. - All pointer operations (indexing de[-1], de[strlen(\"deflate\")]) only read data; there is no modification through pointers that would require removing const. - The macro MHD_HTTP_HEADER_ACCEPT_ENCODING is a string literal (const), so it is already const-correct. The remaining code contains no other pointer declarations or usages that should be made const; the only potential missing const qualification is the function parameter con (and therefore the use of con when calling MHD_lookup_connection_value), which is why those fragments are reported for investigation."
}