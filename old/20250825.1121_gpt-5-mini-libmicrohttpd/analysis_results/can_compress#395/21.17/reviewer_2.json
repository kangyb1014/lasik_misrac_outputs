{
  "user_message": "An agent A claimed that the following can_compress code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of can_compress.\n```c\nstatic enum MHD_Result\ncan_compress (struct MHD_Connection *con)\n{\n  const char *ae;\n  const char *de;\n\n  ae = MHD_lookup_connection_value (con,\n                                    MHD_HEADER_KIND,\n                                    MHD_HTTP_HEADER_ACCEPT_ENCODING);\n  if (NULL == ae)\n    return MHD_NO;\n  if (0 == strcmp (ae,\n                   \"*\"))\n    return MHD_YES;\n  de = strstr (ae,\n               \"deflate\");\n  if (NULL == de)\n    return MHD_NO;\n  if (((de == ae) ||\n       (de[-1] == ',') ||\n       (de[-1] == ' ')) &&\n      ((de[strlen (\"deflate\")] == '\\0') ||\n       (de[strlen (\"deflate\")] == ',') ||\n       (de[strlen (\"deflate\")] == ';')))\n    return MHD_YES;\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf ae does not point to a nul\u2011terminated string (for example, if MHD_lookup_connection_value/_n returns a pointer into a buffer that is accompanied by an explicit length and is not terminated with '\\0'), calling strstr(ae, \"deflate\") will scan past the intended buffer end and thus access memory beyond the bounds of the object. In that case the use of strstr here violates MISRA C 2023 Rule 21.17. (If ae is guaranteed to be a properly nul\u2011terminated C string by the lookup function, no violation occurs.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function can_compress:\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n...\nstruct MHD_Connection\n...\n#define MHD_HTTP_HEADER_ACCEPT_ENCODING \"Accept-Encoding\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the scenario they described. The function calls strcmp(ae, \"*\") and later strstr(ae, \"deflate\") and also indexes ae using strlen(\"deflate\"). All of these string.h functions assume that ae points to a NUL\u2011terminated C string. The visible wrapper MHD_lookup_connection_value simply delegates to MHD_lookup_connection_value_n and returns a pointer, but the shown code does not itself prove that the returned value is NUL\u2011terminated. If the underlying lookup function can return a pointer to a non\u2011NUL\u2011terminated buffer (for example a pointer into a length\u2011annotated header buffer), those calls can read past the object bounds and thus violate MISRA C 2023 Rule 21.17. If, however, the implementation of MHD_lookup_connection_value_n guarantees that the returned value is a properly NUL\u2011terminated C string, then no violation occurs. In other words the report is correct unless (and only unless) the lookup function provides the NUL\u2011termination guarantee."
}