{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                80,\n                                                &data_generator, NULL, NULL);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe address of the static object 'aptr' (&aptr) is used as a token and stored via the void **req_cls pointer. 'aptr' is declared as a non-const int although it is never modified and thus could be const-qualified. This causes pointers to it (int *) to be non-const when they could be const-qualified, violating MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The intent of MISRA C 2023 Rule 8.13 is that pointers should point to const-qualified types when possible \u2014 i.e. if an object is never modified it should be declared const so that any pointer to it is a pointer-to-const. In this code the static object aptr is never modified and is used only via its address as a token (stored into *req_cls). Because aptr is declared as a non-const int, the pointer to it is effectively a non-const pointer when it could (and should) be to a const-qualified object. Declaring aptr as const would better reflect its immutability and satisfy the spirit of R8.13. Note: because req_cls has the library- mandated type void **, assigning a const-qualified pointer into it may require an explicit cast (which can trigger other MISRA concerns about discarding qualifiers). That is a separate issue; it does not negate that aptr itself could and should be const."
}