{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of fast_simple_hash:\n```c\nstatic uint32_t\nfast_simple_hash (const uint8_t *data,\n                  size_t data_size)\n{\n  uint32_t hash;\n\n  if (0 != data_size)\n  {\n    size_t i;\n    hash = data[0];\n    for (i = 1; i < data_size; i++)\n      hash = _MHD_ROTL32 (hash, 7) ^ data[i];\n  }\n  else\n    hash = 0;\n\n  return hash;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function fast_simple_hash:\n#define _MHD_ROTL32(value32, bits) ((uint32_t)__builtin_rotateleft32((value32),(bits)))\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define _MHD_ROTL32(value32, bits) ((uint32_t)__builtin_rotateleft32((value32),(bits)))\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro _MHD_ROTL32 invokes the compiler-specific builtin __builtin_rotateleft32, which is a GCC/Clang intrinsic (a documented compiler extension) and not part of standard C. Using this builtin in the definition constitutes a use of a language/compiler extension and therefore violates MISRA C 2023 Rule 1.2."
}