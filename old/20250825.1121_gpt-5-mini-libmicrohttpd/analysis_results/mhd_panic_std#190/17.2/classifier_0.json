{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of mhd_panic_std:\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function mhd_panic_std:\n#define _(String) (String)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nabort ();\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the presented code: mhd_panic_std calls the standard library function abort(), which does not call mhd_panic_std, so there is no direct or indirect recursion. A possible violation scenario would be if abort were redefined/overridden (e.g. as a macro or a platform-specific abort implementation) to call back into mhd_panic_std (or into a chain of calls that reaches mhd_panic_std); in that case an indirect self-call would occur and Rule 17.2 would be violated."
}