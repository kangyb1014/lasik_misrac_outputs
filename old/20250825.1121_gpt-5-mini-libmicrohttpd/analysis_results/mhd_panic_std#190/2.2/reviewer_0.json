{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '(void) cls;' is an executed, effect\u2011free operation whose removal would not change program behaviour (it only suppresses an \"unused parameter\" warning). Therefore it is dead code and violates MISRA C 2023 Rule 2.2. (With HAVE_MESSAGES==1 the other parameters are used but 'cls' remains unused, so the cast is a no\u2011op.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function mhd_panic_std:\n#define _MHD_NORETURN _Noreturn\n...\n#define HAVE_MESSAGES 1\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The cast-to-void idiom (void)cls; is an intentional, conventional way to indicate an unused parameter and to suppress compiler diagnostics. Although the statement has no runtime effect, MISRA\u2019s concern with \u201cdead code\u201d is to catch operations that are pointless in the design and that could be removed without preserving the intended interface/contract. The (void)cls; is a deliberate source-level use of the parameter to document intent and to prevent spurious compiler warnings across build configurations; it is not an unintended, stale operation. In practice MISRA compliance assessments treat this idiom as an acceptable way to mark an unused parameter (or would be replaced by an alternative such as omitting the parameter name in the prototype). Therefore the claim that this line violates MISRA C 2023 Rule 2.2 is incorrect."
}