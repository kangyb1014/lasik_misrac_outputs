{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of mhd_panic_std:\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function mhd_panic_std:\n#define _MHD_NORETURN _Noreturn\n...\n#define HAVE_MESSAGES 1\n...\n#define _(String) (String)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language compiler extensions are used in the provided code. Specific checks performed:\n- _MHD_NORETURN expands to _Noreturn, which is the standard C11 _Noreturn function specifier (not a compiler-specific extension).\n- The _(...) macro is a simple macro wrapper (defined as (String)) and is not a compiler extension (commonly used for gettext but here a plain macro).\n- No compiler-specific attributes or syntaxes are present (for example, no __attribute__((...)), __declspec, asm, typeof, statement-expressions, __builtin_* intrinsics, or other vendor-specific keywords).\n- Conditional compilation via HAVE_MESSAGES is standard preprocessor use, and (void) casts and abort() are standard C.\n\nNote: Identifier naming (leading underscore + capital letter) may be reserved by the implementation per the C standard, but that is not a language extension and therefore outside the scope of MISRA C 2023 Rule 1.2 as requested."
}