{
  "user_message": "An agent A claimed that the following mhd_panic_std code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of mhd_panic_std.\n```c\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter cls is declared as void * but is not modified/used; Rule 8.13 expects a pointer that does not need to modify the pointed-to object to be const-qualified (e.g. const void *cls). The single line '(void) cls;' merely silences an unused-parameter warning and does not justify omitting const. Therefore the code as shown violates MISRA C 2023 Rule 8.13. Recommendation: change the parameter to 'const void *cls' (or provide a documented justification for using a non-const pointer).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 indeed says a pointer should point to a const-qualified type whenever possible. If this standalone function could be freely changed, making the unused parameter const void *cls would be the appropriate change. However, in practice mhd_panic_std has the signature of a panic/callback routine (note the typical void *cls callback parameter) and must match an existing API/function-pointer type that expects a plain void *. In that situation it is not \"possible\" to const-qualify the parameter because doing so would break the required prototype; therefore no MISRA violation occurs here (or, more precisely, the code is compliant given the external interface requirement, or a documented deviation should be used). So agent A's report is not correct unless there is no external requirement to match a non-const callback prototype \u2014 in that case the report would be valid."
}