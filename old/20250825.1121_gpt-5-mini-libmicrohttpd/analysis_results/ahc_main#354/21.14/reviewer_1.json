{
  "user_message": "An agent A claimed that the following ahc_main code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_main.\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: memcmp is used to compare the URL prefix to the string literal SEC_AREA1_URL: memcmp(url, SEC_AREA1_URL, strlen(SEC_AREA1_URL)). SEC_AREA1_URL is a null\u2011terminated string literal and url is a null\u2011terminated string (url_len was obtained via strlen). MISRA C 2023 Rule 21.14 disallows using memcmp to compare null\u2011terminated strings. Replace with strncmp(url, SEC_AREA1_URL, strlen(SEC_AREA1_URL)) == 0 (or another string API) to comply.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_main:\n#define SEC_AREA1_URL \"/secret_page/\"\n...\n#define SEC_AREA2_URL \"/super_secret_page/\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null\u2011terminated strings. In the code memcmp(url, SEC_AREA1_URL, strlen(SEC_AREA1_URL)) is used to check whether the URL has the prefix SEC_AREA1_URL. Both operands are null\u2011terminated strings (SEC_AREA1_URL is a string literal and url_len was obtained via strlen(url)), so this use of memcmp violates Rule 21.14. Note: the surrounding length check (strlen(SEC_AREA1_URL) <= url_len) makes the memcmp call safe with respect to bounds, but it does not change the fact that memcmp is being used to compare null\u2011terminated strings. Replace with strncmp (for example strncmp(url, SEC_AREA1_URL, sizeof(SEC_AREA1_URL) - 1) == 0 or strncmp(url, SEC_AREA1_URL, strlen(SEC_AREA1_URL)) == 0) or another appropriate string API to comply with the rule."
}