{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_main:\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ahc_main:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define SEC_AREA1_URL \"/secret_page/\"\n...\n#define SEC_AREA2_URL \"/super_secret_page/\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))",
    "if (0 != *upload_data_size)",
    "if (&already_called_marker != *req_cls)",
    "if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))",
    "if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))",
    "if (0 == strcmp (url, \"/\"))"
  ],
  "explanation": "I have selected all controlling expressions (all if conditions) in ahc_main for investigation under MISRA C 2023 Rule 14.3 because the rule applies to conditional/loop controlling expressions that might be invariant. There are no loops (for/while/do-while) or switch statements in the function other than these if conditions. Other code fragments (variable declarations, assignments, returns, string/macro definitions, and calls such as strlen/strcmp/memcmp and the static variable declaration) are not controlling expressions or are data/utility uses and therefore do not fall under the rule\u2019s requirement about invariant controlling expressions. Also, the rule\u2019s documented exceptions (infinite loops and do-while with constant false) do not apply here because no such constructs are present."
}