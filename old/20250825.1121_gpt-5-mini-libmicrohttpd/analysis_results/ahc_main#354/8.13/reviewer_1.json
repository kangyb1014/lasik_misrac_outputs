{
  "user_message": "An agent A claimed that the following ahc_main code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_main.\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code takes the address of a static int marker (type: int *) and stores/compares it via a void * request-class pointer (*req_cls). The marker is never modified and could be declared const, so the pointer should point to a const-qualified type. As written, &already_called_marker yields a pointer to a non-const int and is assigned/compared to a non-const void * which violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_main:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define SEC_AREA1_URL \"/secret_page/\"\n...\n#define SEC_AREA2_URL \"/super_secret_page/\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s objection is understandable but not correct in this context. Rule 8.13 encourages declaring pointers to point to const-qualified types when the pointee is not modified. However, here the pointer storage (*req_cls) and the function signature (void **req_cls) are part of the servlet/callback API (libmicrohttpd style) and cannot be changed locally. That API provides an opaque void * request-class slot; you cannot make that API return a const-qualified pointer without changing the API contract.\n\nMaking already_called_marker const would not cleanly fix the situation: taking the address of a const int would yield a const int * and assigning that into a void * slot would either require an explicit cast (which would discard const and create a different MISRA/const-correctness issue) or be incompatible. So there is no safe local change that both satisfies rule 8.13 and preserves the required API semantics. MISRA guidance allows that external API constraints can prevent application of such advice.\n\nTherefore the reported violation is not correct in this situation: the code is constrained by the external API and the pointer cannot reasonably be made const-qualified here without breaking the API or introducing worse issues."
}