{
  "user_message": "An agent A claimed that the following ahc_main code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_main.\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function stores the address of the static object already_called_marker into the request pointer (*req_cls = &already_called_marker) and only uses it for identity checks \u2014 the pointed-to object is never modified. According to MISRA C 2023 Rule 8.13, the object should be const-qualified when possible. Here already_called_marker could be declared as const (for example: static const int already_called_marker = 0), and the API usage adjusted to preserve constness, so the current non-const declaration constitutes a violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_main:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define SEC_AREA1_URL \"/secret_page/\"\n...\n#define SEC_AREA2_URL \"/super_secret_page/\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 8.13 concerns pointer types being declared to point to const-qualified targets where that is feasible. In this callback the only pointer involved in the API is void **req_cls (provided by the microhttpd API), and the function stores the address of a local static marker object into that void* slot purely for identity checks. Although the marker object is never modified, making it const (static const int already_called_marker) would force you to convert a const int* to void* when assigning to *req_cls, which discards constness (and would either require an explicit cast or changing the external API signature to accept const void*). You do not control the external API here, so you cannot safely make the marker const without creating a different violation (discarding const or changing API types). Therefore the reported violation of MISRA C 2023 Rule 8.13 is not applicable in this context. If you can change the API, the proper fix would be to use a pointer type that preserves const (e.g. const void *), otherwise the current non-const declaration is acceptable."
}