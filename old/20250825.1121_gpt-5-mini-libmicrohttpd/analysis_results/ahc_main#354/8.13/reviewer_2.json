{
  "user_message": "An agent A claimed that the following ahc_main code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_main.\n```c\nstatic enum MHD_Result\nahc_main (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size,\n          void **req_cls)\n{\n  static int already_called_marker;\n  size_t url_len;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      && (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return reply_with_method_not_supported (connection);\n\n  if (0 != *upload_data_size)\n    return MHD_NO; /* No upload expected for GET or HEAD */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (url, \"/\"))\n    return reply_with_main_page (connection);\n\n  url_len = strlen (url);\n\n  if ((strlen (SEC_AREA1_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA1_URL, strlen (SEC_AREA1_URL))))\n    return handle_sec_areas_req (connection, url, 1); /* The requested URL is within SEC_AREA1_URL */\n\n  if ((strlen (SEC_AREA2_URL) <= url_len)\n      && (0 == memcmp (url, SEC_AREA2_URL, strlen (SEC_AREA2_URL))))\n    return handle_sec_areas_req (connection, url, 2); /* The requested URL is within SEC_AREA2_URL */\n\n  return reply_with_page_not_found (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *cls' is not const-qualified yet it is unused and not modified in ahc_main; per Rule 8.13 it should be declared as 'const void *cls' (or otherwise point to a const-qualified type). Note: the function is likely implementing a library callback with a fixed prototype, so changing the signature may not be possible and a documented deviation may be required.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_main:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define SEC_AREA1_URL \"/secret_page/\"\n...\n#define SEC_AREA2_URL \"/super_secret_page/\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s observation is technically correct in the abstract: the parameter cls is not used or modified and therefore could be declared as pointing to a const-qualified type (e.g. const void *cls) to satisfy the letter of MISRA C 2023 Rule 8.13. However, in practice ahc_main is a callback implementing a fixed external/library prototype (the microhttpd callback type) that requires void *cls. MISRA guidance accepts that externally\u2011mandated function signatures cannot be changed and that a documented deviation is appropriate in that case. Therefore this code is not an actionable MISRA violation unless the prototype could be changed; if the function must match the library callback, the report should be marked as not a violation (or a justified deviation)."
}