{
  "user_message": "Target function code is:\n```c\nstatic enum SHA1_RESULT\nSHA1Result (struct SHA1Context *context, unsigned char\n            Message_Digest[SHA1HashSize])\n{\n  int i;\n\n  if (! context || ! Message_Digest)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (! context->computed)\n  {\n    SHA1PadMessage (context);\n    for (i = 0; i < 64; ++i)\n    {\n      context->message_block[i] = 0;\n    }\n    context->length_low = 0;\n    context->length_high = 0;\n    context->computed = 1;\n  }\n  for (i = 0; i < SHA1HashSize; ++i)\n  {\n    Message_Digest[i]\n      = (unsigned char) (context->intermediate_hash[i >> 2]\n                         >> 8 * (3 - (i & 0x03)));\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'SHA1Result': {'callees': ['SHA1PadMessage'], 'callers': ['ws_get_accept_value']}, 'SHA1PadMessage': {'callees': ['SHA1ProcessMessageBlock'], 'callers': ['SHA1Result']}, 'ws_get_accept_value': {'callees': ['SHA1Reset', 'SHA1Input', 'SHA1Result', 'BASE64Encode'], 'callers': ['ahc_cb']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct SHA1Context",
    "SHA1HashSize",
    "SHA1PadMessage",
    "SHA1ProcessMessageBlock",
    "enum SHA1_RESULT (SHA1_RESULT_NULL, SHA1_RESULT_STATE_ERROR, SHA1_RESULT_SUCCESS)",
    "Any macros named context or Message_Digest"
  ],
  "explanation": "struct SHA1Context: Required to determine whether accesses like context->computed, context->corrupted, context->message_block, context->length_low/length_high and context->intermediate_hash are simple member accesses (modifying the pointee) or whether any of those identifiers are macros or have side effects that could reassign the parameter variable itself. This establishes that modifications are to the object pointed-to (allowed) and not to the pointer parameter (disallowed). SHA1HashSize: Needed to confirm the array parameter declaration Message_Digest[SHA1HashSize] and the loop bounds; also to check whether SHA1HashSize is a macro that could expand in a surprising way that affects whether Message_Digest is actually a pointer parameter or something else. SHA1PadMessage: The call must be inspected to ensure it is a real function (no macro expansion that could reassign the local pointer parameter) and to confirm it does not rely on or expand into code that would modify the pointer variables of the caller. SHA1ProcessMessageBlock: Although called only by SHA1PadMessage, its definition should be available when inspecting SHA1PadMessage for macro/inline expansions or surprising side effects that might affect the caller\u2019s parameters. enum SHA1_RESULT (SHA1_RESULT_NULL, SHA1_RESULT_STATE_ERROR, SHA1_RESULT_SUCCESS): Required to ensure these are plain enum constants (no macros with side effects) so that return statements do not hide any inadvertent modification of parameters via macro expansion. Any macros named context or Message_Digest: Explicitly check for user-defined macros with the same names as the parameters; such macros could mask the parameter variables or expand into code that assigns to them, which would change whether the function modifies its parameter variables (violating MISRA)."
}