{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function named_thread_starter:\n#define MHD_set_cur_thread_name_(n) MHD_set_thread_name_(pthread_self(),(n))\n...\nstruct MHD_named_helper_param_\n{\n  /**\n   * Real thread start routine\n   */\n  MHD_THREAD_START_ROUTINE_ start_routine;\n\n  /**\n   * Argument for thread start routine\n   */\n  void *arg;\n\n  /**\n   * Name for thread\n   */\n  const char *name;\n}\n...\ntypedef MHD_THRD_RTRN_TYPE_\n(MHD_THRD_CALL_SPEC_ *MHD_THREAD_START_ROUTINE_)(void *cls)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_THREAD_START_ROUTINE_ thr_func;",
    "return thr_func (arg);",
    "MHD_THREAD_START_ROUTINE_ start_routine;",
    "typedef MHD_THRD_RTRN_TYPE_\n(MHD_THRD_CALL_SPEC_ *MHD_THREAD_START_ROUTINE_)(void *cls)",
    "thr_func = param->start_routine;"
  ],
  "explanation": "I only marked fragments that participate in an indirect call path that could cause the function to call itself: the function-pointer type, the struct field that stores a start routine, the local function-pointer variable, the assignment from the struct into that variable, and the subsequent invocation. Those are the points that must be investigated to determine whether param->start_routine could reference named_thread_starter (directly or indirectly). Other fragments do not create or invoke function pointers that could produce recursion and therefore do not need investigation for MISRA C 2023 Rule 17.2: - The initial cast and binding of data to param (struct MHD_named_helper_param_ *const param = ...) simply obtains the parameter structure and does not perform a call. - The null check (if (NULL == data) return ...) prevents dereferencing a NULL pointer but does not affect recursion. - The MHD_set_cur_thread_name_ macro call only sets the thread name (expands to MHD_set_thread_name_(pthread_self(), (n))) and does not call named_thread_starter. - The capture of the argument (arg = param->arg) is a plain data copy. - The free(data) releases the helper structure memory but is not itself a call to the start routine; it may be relevant to other safety rules (use-after-free) but not to Rule 17.2. No direct call to named_thread_starter is present in the function body apart from the indirect call via the function pointer; therefore investigation should focus on the listed fragments to determine whether the function-pointer target can resolve to named_thread_starter (directly or indirectly)."
}