{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_set_cur_thread_name_ (param->name);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Yes. The code passes param->name (a non-const char* member of a non-const struct) to MHD_set_cur_thread_name_ although the name is only read. Rule 8.13 requires pointers that are not used to modify the pointed-to object to be const-qualified. The declaration 'struct MHD_named_helper_param_ *const param' should instead be 'const struct MHD_named_helper_param_ *const param' (or the struct member should be 'const char *name'), or MHD_set_cur_thread_name_ should accept a const char*; otherwise this use violates MISRA C 2023 Rule 8.13."
}