{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nYes. The code passes param->name (a non-const char* member of a non-const struct) to MHD_set_cur_thread_name_ although the name is only read. Rule 8.13 requires pointers that are not used to modify the pointed-to object to be const-qualified. The declaration 'struct MHD_named_helper_param_ *const param' should instead be 'const struct MHD_named_helper_param_ *const param' (or the struct member should be 'const char *name'), or MHD_set_cur_thread_name_ should accept a const char*; otherwise this use violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. Rule 8.13 requires that pointers should point to a const-qualified type whenever it is possible to do so (i.e. when the pointed-to object is not modified through that pointer). In named_thread_starter the local variable param is a const pointer to a non-const struct (struct MHD_named_helper_param_ *const). The function only reads fields from *param (copies them out and then frees the original allocation) and does not modify the pointed-to object, so the pointee could and should be const-qualified: e.g. const struct MHD_named_helper_param_ *const param (or the struct members that are read-only could be declared const, and/or MHD_set_cur_thread_name_ should accept a const char *). free(data) is unaffected because the original data parameter is still a void*. If MHD_set_cur_thread_name_ truly needs a non-const char * (i.e. it modifies the string), that would be the reason to keep a non-const member; otherwise the current code violates MISRA C 2023 Rule 8.13."
}