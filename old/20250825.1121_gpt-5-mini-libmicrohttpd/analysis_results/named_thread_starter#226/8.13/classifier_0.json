{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\narg = param->arg;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment: both param->arg and local variable arg are of type void * and the assignment does not remove any const qualification. The code is passing a mutable pointer through to the thread start routine, which typically requires a non-const void *. \n\nSpecific violation scenario (hypothetical): if the member were actually pointing to immutable data (e.g. the caller passed a const string literal) but the struct declared it as void * (losing const), then assigning param->arg to a non-const void * would violate MISRA C 2023 Rule 8.13 \u2014 the member should have been declared as const void * (and the local arg declared const void *) to preserve const qualification."
}