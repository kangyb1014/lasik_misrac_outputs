{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable 'param' is declared as 'struct MHD_named_helper_param_ *const' (pointer to a non-const object). In the fragment 'thr_func = param->start_routine;' the code only reads members of *param and does not modify them. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here 'param' should be declared as a pointer to a const-qualified struct (for example: 'const struct MHD_named_helper_param_ *const param' with a matching cast).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local variable 'param' is declared as a pointer-to-non-const object (struct MHD_named_helper_param_ *const), but the code only reads members of *param and does not modify the pointed-to object. MISRA C 2023 Rule 8.13 recommends that pointers should point to a const-qualified type whenever possible, so declaring param as 'const struct MHD_named_helper_param_ *const param' (with the appropriate cast from the incoming void *data) would be the compliant form. The existing code therefore does not comply with Rule 8.13 as written."
}