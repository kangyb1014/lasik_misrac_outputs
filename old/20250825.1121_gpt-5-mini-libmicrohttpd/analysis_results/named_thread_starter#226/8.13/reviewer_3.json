{
  "user_message": "An agent A claimed that the following named_thread_starter code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of named_thread_starter.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'param' is declared as a pointer to a non-const object: \nstruct MHD_named_helper_param_ *const param = (struct MHD_named_helper_param_ *) data;\nThe function only reads members (param->name, param->arg, param->start_routine) and does not modify the pointed-to object; therefore the pointer should be to a const-qualified type (for example: const struct MHD_named_helper_param_ *const param = (const struct MHD_named_helper_param_ *) data). Making 'param' const would not prevent freeing the original void* 'data'. Declaring a non-const pointer when no modification occurs violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The declaration \u2018struct MHD_named_helper_param_ *const param\u2019 makes the pointer itself const, but not the pointee. In this function the object is only read (param->name, param->arg, param->start_routine) and there is no write through param, so the pointee type can and should be const-qualified (e.g. 'const struct MHD_named_helper_param_ *const param') in order to satisfy MISRA C 2023 Rule 8.13. Making param point to a const-qualified type does not conflict with the later free(data) call because data is the original void* parameter (non-const) and casting to a pointer-to-const only adds constness, not remove it. The only reason not to apply the const would be if any of the accessed members or called functions required a non-const pointee, which is not the case in the shown code. Therefore the reported violation is correct."
}