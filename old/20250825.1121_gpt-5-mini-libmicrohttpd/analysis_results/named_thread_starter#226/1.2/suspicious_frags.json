{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function named_thread_starter:\n#define MHD_THRD_RTRN_TYPE_ void*\n...\n#define MHD_THRD_CALL_SPEC_ \n...\ntypedef MHD_THRD_RTRN_TYPE_\n(MHD_THRD_CALL_SPEC_ *MHD_THREAD_START_ROUTINE_)(void *cls)\n...\nstruct MHD_named_helper_param_\n{\n  /**\n   * Real thread start routine\n   */\n  MHD_THREAD_START_ROUTINE_ start_routine;\n\n  /**\n   * Argument for thread start routine\n   */\n  void *arg;\n\n  /**\n   * Name for thread\n   */\n  const char *name;\n}\n...\n#define MHD_set_cur_thread_name_(n) MHD_set_thread_name_(pthread_self(),(n))\n...\nstatic int\nMHD_set_thread_name_ (const MHD_thread_ID_native_ thread_id,\n                      const char *thread_name)\n{\n  if (NULL == thread_name)\n    return 0;\n\n#if defined(HAVE_PTHREAD_SETNAME_NP_GNU)\n  return ! pthread_setname_np (thread_id, thread_name);\n#elif defined(HAVE_PTHREAD_SET_NAME_NP_FREEBSD)\n  /* FreeBSD and OpenBSD use different function name and void return type */\n  pthread_set_name_np (thread_id, thread_name);\n  return ! 0;\n#elif defined(HAVE_PTHREAD_SETNAME_NP_NETBSD)\n  /* NetBSD use 3 arguments: second argument is string in printf-like format,\n   *                         third argument is a single argument for printf();\n   * OSF1 use 3 arguments too, but last one always must be zero (NULL).\n   * MHD doesn't use '%' in thread names, so both form are used in same way.\n   */\n  return ! pthread_setname_np (thread_id, thread_name, 0);\n#endif /* HAVE_PTHREAD_SETNAME_NP_NETBSD */\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define MHD_THRD_RTRN_TYPE_ void*",
    "#define MHD_THRD_CALL_SPEC_",
    "typedef MHD_THRD_RTRN_TYPE_ (MHD_THRD_CALL_SPEC_ *MHD_THREAD_START_ROUTINE_)(void *cls)",
    "pthread_set_name_np (thread_id, thread_name);",
    "#define MHD_set_cur_thread_name_(n) MHD_set_thread_name_(pthread_self(),(n))",
    "static MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_ named_thread_starter (void *data)",
    "return ! pthread_setname_np (thread_id, thread_name, 0);",
    "return ! pthread_setname_np (thread_id, thread_name);",
    "return (MHD_THRD_RTRN_TYPE_) 0;"
  ],
  "explanation": "Fragments not listed are standard C or standard POSIX API usage and do not directly invoke compiler-specific language extensions. The function body (assignments, free, calling the start routine), the struct definition and pointer casts/uses are ordinary C constructs. The items selected are potential sources of language/compiler extensions or non\u2011portable platform-specific APIs: the MHD_THRD_CALL_SPEC_ / MHD_THRD_RTRN_TYPE_ macros are used to inject calling convention or return-type qualifiers and in other build configurations may expand to compiler-specific keywords (for example __stdcall, __attribute__((...)), etc.), so they must be checked. The pthread_setname_np / pthread_set_name_np calls are non\u2011portable, platform-specific (GNU/BSD) APIs (often documented as nonportable extensions) and should be investigated for conformity with MISRA Rule 1.2. Other lines do not use compiler language extensions and therefore do not need further investigation for this rule."
}