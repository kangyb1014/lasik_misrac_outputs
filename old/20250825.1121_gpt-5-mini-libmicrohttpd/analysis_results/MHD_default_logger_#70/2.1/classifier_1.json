{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_default_logger_:\n```c\nstatic void\nMHD_default_logger_ (void *cls,\n                     const char *fm,\n                     va_list ap)\n{\n  vfprintf ((FILE *) cls, fm, ap);\n#ifdef _DEBUG\n  fflush ((FILE *) cls);\n#endif /* _DEBUG */\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n\n#ifdef _DEBUG\n  fflush ((FILE *) cls);\n#endif /* _DEBUG */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fflush() call is guarded by #ifdef _DEBUG, so it is conditionally compiled rather than being unreachable at runtime. If _DEBUG is defined the call can execute; if it is not defined the call is removed at translation time and is not \"unreachable code\" in the compiled program. A true Rule 2.1 violation would be code present in the translation unit that can never be executed (for example code after an unconditional return or inside an #if 0 block that remains in the translation unit), which is not the case here."
}