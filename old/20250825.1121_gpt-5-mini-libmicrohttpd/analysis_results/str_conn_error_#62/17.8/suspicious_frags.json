{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of str_conn_error_:\n```c\nstatic const char *\nstr_conn_error_ (ssize_t mhd_err_code)\n{\n  switch (mhd_err_code)\n  {\n  case MHD_ERR_AGAIN_:\n    return _ (\"The operation would block, retry later\");\n  case MHD_ERR_CONNRESET_:\n    return _ (\"The connection was forcibly closed by remote peer\");\n  case MHD_ERR_NOTCONN_:\n    return _ (\"The socket is not connected\");\n  case MHD_ERR_NOMEM_:\n    return _ (\"Not enough system resources to serve the request\");\n  case MHD_ERR_BADF_:\n    return _ (\"Bad FD value\");\n  case MHD_ERR_INVAL_:\n    return _ (\"Argument value is invalid\");\n  case MHD_ERR_OPNOTSUPP_:\n    return _ (\"Argument value is not supported\");\n  case MHD_ERR_PIPE_:\n    return _ (\"The socket is no longer available for sending\");\n  case MHD_ERR_TLS_:\n    return _ (\"TLS encryption or decryption error\");\n  default:\n    break;   /* Mute compiler warning */\n  }\n  if (0 <= mhd_err_code)\n    return _ (\"Not an error code\");\n\n  mhd_assert (0); /* Should never be reachable */\n  return _ (\"Wrong error code value\");\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function str_conn_error_:\n#define MHD_ERR_AGAIN_ (-3073)\n...\n#define MHD_ERR_CONNRESET_ (-3074)\n...\n#define MHD_ERR_NOTCONN_ (-3075)\n...\n#define MHD_ERR_NOMEM_ (-3076)\n...\n#define MHD_ERR_BADF_ (-3077)\n...\n#define MHD_ERR_INVAL_ (-3078)\n...\n#define MHD_ERR_OPNOTSUPP_ (-3079)\n...\n#define MHD_ERR_PIPE_ (-3080)\n...\n#define MHD_ERR_TLS_ (-4097)\n...\n#define _(String) (String)\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No fragments need investigation for Rule 17.8. The function has a single non-pointer parameter (ssize_t mhd_err_code) and there is no code that modifies that parameter: no assignments (e.g. mhd_err_code = ...), no increment/decrement, no compound assignments, and it is not passed by address to any call that could modify it. The switch and if statements only read/compare mhd_err_code. The macros provided (_ and mhd_assert) expand to harmless expressions and do not modify the parameter. The rule\u2019s pointer-specific clause is not applicable because there are no pointer parameters. Therefore nothing in this function appears to violate MISRA C 2023 Rule 17.8."
}