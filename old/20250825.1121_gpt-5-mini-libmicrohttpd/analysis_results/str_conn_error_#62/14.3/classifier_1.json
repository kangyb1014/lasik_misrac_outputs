{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of str_conn_error_:\n```c\nstatic const char *\nstr_conn_error_ (ssize_t mhd_err_code)\n{\n  switch (mhd_err_code)\n  {\n  case MHD_ERR_AGAIN_:\n    return _ (\"The operation would block, retry later\");\n  case MHD_ERR_CONNRESET_:\n    return _ (\"The connection was forcibly closed by remote peer\");\n  case MHD_ERR_NOTCONN_:\n    return _ (\"The socket is not connected\");\n  case MHD_ERR_NOMEM_:\n    return _ (\"Not enough system resources to serve the request\");\n  case MHD_ERR_BADF_:\n    return _ (\"Bad FD value\");\n  case MHD_ERR_INVAL_:\n    return _ (\"Argument value is invalid\");\n  case MHD_ERR_OPNOTSUPP_:\n    return _ (\"Argument value is not supported\");\n  case MHD_ERR_PIPE_:\n    return _ (\"The socket is no longer available for sending\");\n  case MHD_ERR_TLS_:\n    return _ (\"TLS encryption or decryption error\");\n  default:\n    break;   /* Mute compiler warning */\n  }\n  if (0 <= mhd_err_code)\n    return _ (\"Not an error code\");\n\n  mhd_assert (0); /* Should never be reachable */\n  return _ (\"Wrong error code value\");\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function str_conn_error_:\n#define MHD_ERR_AGAIN_ (-3073)\n...\n#define MHD_ERR_CONNRESET_ (-3074)\n...\n#define MHD_ERR_NOTCONN_ (-3075)\n...\n#define MHD_ERR_NOMEM_ (-3076)\n...\n#define MHD_ERR_BADF_ (-3077)\n...\n#define MHD_ERR_INVAL_ (-3078)\n...\n#define MHD_ERR_OPNOTSUPP_ (-3079)\n...\n#define MHD_ERR_PIPE_ (-3080)\n...\n#define MHD_ERR_TLS_ (-4097)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nswitch (mhd_err_code)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The controlling expression is the function parameter 'mhd_err_code' (type ssize_t), which is not an invariant compile-time constant, so Rule 14.3 is not breached. (A violating scenario would be if the switch used an invariant expression, e.g. switch(0) or switch(MHD_ERR_AGAIN_) where the controlling expression is a constant.)"
}