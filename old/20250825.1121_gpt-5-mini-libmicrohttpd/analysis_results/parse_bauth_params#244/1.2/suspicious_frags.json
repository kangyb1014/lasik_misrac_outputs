{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of parse_bauth_params:\n```c\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n        return false;  /* Binary zero is not allowed */\n      if ((',' == str[i]) || (';' == str[i]))\n        return false;  /* Only single token68 is allowed */\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n      return false;\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function parse_bauth_params:\nstruct MHD_RqBAuth\n{\n  struct _MHD_str_w_len token68;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I did not find any use of compiler language extensions in the provided code. The function uses only standard C constructs: static storage-class specifier, standard types (size_t, bool \u2014 C99/C11 stdbool.h), pointer arithmetic, struct member access, while loops, and simple integer/character comparisons. There are no occurrences of known compiler extensions such as __attribute__, __asm__/asm, typeof, statement-expressions ({ ... }) used as an expression, nested functions, label-as-values, GNU inline assembly, __builtin_* intrinsics, or other compiler-specific keywords or pragmas in the shown code.\n\nNotes on items that were considered but not flagged:\n- The identifier names (e.g. struct _MHD_str_w_len) begin with an underscore; this can be a reserved-identifier/naming concern but is not a compiler language extension by itself, so it is not reported under Rule 1.2.\n- The macro mhd_assert(...) is invoked but its definition is not provided. If its definition uses compiler-specific extensions, that would need to be inspected; however, the function call itself does not demonstrate an extension and thus is not reported here.\n\nBecause the request is to report only explicit compiler language extensions (as documented by compilers), and none are present in the shown code, there are no suspicious fragments to report for Rule 1.2."
}