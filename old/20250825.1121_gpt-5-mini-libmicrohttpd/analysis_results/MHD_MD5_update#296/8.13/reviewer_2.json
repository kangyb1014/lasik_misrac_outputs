{
  "user_message": "An agent A claimed that the following MHD_MD5_update code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_MD5_update.\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if md5_transform's second parameter is a non-const pointer but the function only reads the block. For example, if md5_transform is declared as\n    void md5_transform(uint32_t H[4], uint8_t *block);\nthen calling md5_transform(ctx->H, ctx->buffer) passes a non-const pointer to data that is only consumed. Per MISRA C 2023 Rule 8.13 the parameter should be const-qualified (e.g. const uint8_t *block) when the pointed-to data is not modified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in substance. MISRA C 2023 Rule 8.13 requires pointer types in declarations to be const-qualified whenever the pointed-to object is not modified. If md5_transform is declared as\n    void md5_transform(uint32_t H[4], uint8_t *block);\nbut the implementation only reads from block, then the declaration should instead use a const-qualified pointer (for example const uint8_t *block or const uint8_t block[MD5_BLOCK_SIZE]). The non-const declaration of md5_transform would therefore violate Rule 8.13. \n\nNote: the violation is in the md5_transform declaration (and/or its definition), not intrinsically in MHD_MD5_update. If md5_transform already has a const-qualified parameter (or if it legitimately modifies the block), there is no violation. Also passing the MHD_MD5_update parameter data (type const uint8_t *) to a md5_transform prototype taking uint8_t * would be an attempt to discard const and is not acceptable; changing md5_transform to take a const pointer both satisfies C type-correctness and MISRA 8.13."
}