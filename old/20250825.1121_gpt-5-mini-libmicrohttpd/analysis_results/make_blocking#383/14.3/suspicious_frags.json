{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of make_blocking:\n```c\nstatic void\nmake_blocking (MHD_socket fd)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (fd, F_GETFL);\n  if (-1 == flags)\n    abort ();\n  if ((flags & ~O_NONBLOCK) != flags)\n    if (-1 == fcntl (fd, F_SETFL, flags & ~O_NONBLOCK))\n      abort ();\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 0;\n\n  if (0 != ioctlsocket (fd, (int) FIONBIO, &flags))\n    abort ();\n#endif /* MHD_WINSOCK_SOCKETS */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function make_blocking:\n#define MHD_POSIX_SOCKETS 1\n...\ntypedef int MHD_socket\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No runtime controlling expressions in this function are invariant. The only C-level conditionals are:\n- if (-1 == flags) \u2014 flags is obtained from fcntl(fd, F_GETFL), so the expression depends on a function result and is not a compile-time invariant.\n- if ((flags & ~O_NONBLOCK) != flags) \u2014 uses the variable flags read at runtime; not invariant.\n- if (-1 == fcntl (fd, F_SETFL, flags & ~O_NONBLOCK)) \u2014 calls fcntl and thus is not invariant.\n- if (0 != ioctlsocket (fd, (int) FIONBIO, &flags)) \u2014 calls ioctlsocket and depends on its runtime result.\n\nThe preprocessor directives (#if defined(MHD_POSIX_SOCKETS) / #elif defined(MHD_WINSOCK_SOCKETS)) are compile-time selection constructs, not C runtime controlling expressions governed by MISRA C Rule 14.3, so they need not be investigated for invariant controlling expressions. No loops or do-while constructs with constant controlling expressions are present; the rule exceptions (infinite loops or the specific do-while integer constant exception) do not apply here. Therefore there are no suspicious fragments to investigate for Rule 14.3 in the provided code."
}