{
  "user_message": "Target function code is:\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_pool_reallocate': {'callees': [], 'callers': ['MHD_connection_alloc_memory_', 'try_ready_chunked_body', 'try_grow_read_buffer', 'connection_shrink_read_buffer', 'connection_maximize_write_buffer', 'MHD_connection_handle_read']}, 'MHD_connection_alloc_memory_': {'callees': ['MHD_pool_try_alloc', 'MHD_pool_reallocate', 'MHD_pool_allocate'], 'callers': ['MHD_set_connection_value_n_nocheck_', 'try_ready_normal_body', 'parse_cookie_header', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_']}, 'try_ready_chunked_body': {'callees': ['MHD_pool_get_free', '__builtin_unreachable', 'connection_close_error', 'MHD_pool_reallocate', 'MHD_uint32_to_strx'], 'callers': ['MHD_connection_handle_idle']}, 'try_grow_read_buffer': {'callees': ['MHD_pool_get_free', 'MHD_pool_reallocate'], 'callers': ['check_and_grow_read_buffer_space']}, 'connection_shrink_read_buffer': {'callees': ['MHD_pool_deallocate', 'MHD_pool_reallocate'], 'callers': ['connection_switch_from_recv_to_send']}, 'connection_maximize_write_buffer': {'callees': ['MHD_pool_get_free', 'MHD_pool_reallocate'], 'callers': ['build_header_response', 'build_connection_chunked_response_footer']}, 'MHD_connection_handle_read': {'callees': ['MHD_DLOG', 'MHD_connection_close_', 'str_conn_error_', 'connection_close_error', 'MHD_update_last_activity_', 'MHD_pool_reallocate'], 'callers': ['call_handlers']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA project shall not contain dead code. Any operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MemoryPool",
    "ROUND_TO_ALIGN",
    "ROUND_TO_ALIGN_PLUS_RED_ZONE",
    "_MHD_RED_ZONE_SIZE",
    "mp_ptr_diff_",
    "mp_ptr_le_",
    "mhd_assert",
    "_MHD_POISON_MEMORY",
    "_MHD_UNPOISON_MEMORY",
    "__asan_region_is_poisoned",
    "MHD_ASAN_POISON_ACTIVE",
    "HAVE___ASAN_REGION_IS_POISONED",
    "memset",
    "memcpy"
  ],
  "explanation": "For a sound determination of whether any executed operations in MHD_pool_reallocate constitute dead code (i.e. their removal would not affect program behaviour) the analyser needs the concrete definitions/semantics of the following symbols:\n\n- struct MemoryPool: the layout and types of memory, pos, end and size are required to evaluate pointer arithmetic, buffer bounds, and whether branches depending on pool fields can ever be executed or become no-ops.\n\n- ROUND_TO_ALIGN: affects the rounded values used in assertions and allocation sizing; its definition can make some checks/assignments constant or eliminate branches.\n\n- ROUND_TO_ALIGN_PLUS_RED_ZONE: directly used to compute asize/apos and to test whether a block is last; its expansion may force branches to be always/never taken.\n\n- _MHD_RED_ZONE_SIZE: alters bound checks and rounding; if zero or a compile-time constant it can change reachability and whether certain checks are meaningful.\n\n- mp_ptr_diff_: returns the offset of old within pool->memory; its semantics determine the computed old_offset and therefore the truth of several assertions and branch conditions.\n\n- mp_ptr_le_: the pointer-comparison macro/function used in assertions; its exact behaviour (signed/unsigned, casts) affects whether pointer-range assertions are vacuous.\n\n- mhd_assert: many checks in the function are performed only via assertions. If mhd_assert is a no-op in production builds the asserted expressions are dead (executed but have no effect). If it has side-effects (logging, abort), removal would change behaviour. The analyser needs its definition.\n\n- _MHD_POISON_MEMORY / _MHD_UNPOISON_MEMORY: these calls mark memory for debugging/ASAN. If implemented as no-ops they are dead code; if they invoke ASAN or instrumentation they have behavioural effects (including timing). Their definitions determine whether those calls are meaningful.\n\n- __asan_region_is_poisoned and the feature macros MHD_ASAN_POISON_ACTIVE / HAVE___ASAN_REGION_IS_POISONED: the ASAN-related conditional compile path contains a call inside an assertion. Knowing whether that code is compiled in (and what __asan_region_is_poisoned does) is required to judge if that assertion/code is effectively dead.\n\n- memset and memcpy: standard library calls that perform observable memory writes/reads. To decide if zeroing/moving memory in the function is removable (dead), the analyser must treat these calls as side-effecting operations; their semantics are required to see whether their removal would change program behaviour (contents of returned block or old block).\n\nIncluding these symbols (definitions or compile-time config) gives the next analyser the necessary context to see which checks, memory-poisoning/unpoisoning and memory-copy/zeroing operations are actually effective or are executed but have no effect and therefore would qualify as dead code under the MISRA rule."
}