{
  "user_message": "An agent A claimed that the following check_argument_match code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of check_argument_match.\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a raw char *args and passes it to MHD_parse_arguments_ without any local validation that args is a valid NUL-terminated string or that any length assumptions are satisfied. If the caller supplies a buffer that is not NUL-terminated or points into a region with fewer remaining bytes than MHD_parse_arguments_ expects, and MHD_parse_arguments_ uses string.h functions (e.g. strlen, strcpy, strcmp, memcpy, etc.), that can cause reads/writes beyond the bounds of the object referenced by args. Example: char buf[8]; /* filled with 8 non\u2011terminating bytes */ args = buf; /* no NUL */ check_argument_match(connection, args); \u2014 if MHD_parse_arguments_ calls strlen(args) or strcpy into a destination, a buffer overread/overflow can occur.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not deterministically correct. MISRA C:2023 Rule 21.17 prohibits uses of <string.h> functions that can access beyond the bounds of the objects referenced by pointer parameters. The shown check_argument_match function itself does not call any <string.h> functions \u2014 it simply forwards args to MHD_parse_arguments_. Whether a Rule 21.17 violation exists depends on the contract and implementation of MHD_parse_arguments_. If MHD_parse_arguments_ expects args to be a NUL-terminated string and the caller of check_argument_match is required to supply such a buffer, then the responsibility to provide a valid NUL-terminated object lies with the caller and there is no intrinsic MISRA violation in check_argument_match. Conversely, if MHD_parse_arguments_ internally uses string.h functions without validating args or documenting the precondition, then the violation is in MHD_parse_arguments_ (or in the undocumented/mismatched API), not necessarily in check_argument_match.\n\nRecommendation: inspect the API/implementation of MHD_parse_arguments_. If it requires NUL-terminated input, document that precondition and ensure all callers satisfy it. If it does not and must cope with arbitrary buffers, change the API to accept a length or perform explicit bounds checks (e.g. ensure NUL termination or use length-limited routines) to prevent out-of-bounds accesses. Without evidence that MHD_parse_arguments_ will actually invoke string.h functions on a non-terminated buffer, the agent A's claim that check_argument_match violates Rule 21.17 is not proven."
}