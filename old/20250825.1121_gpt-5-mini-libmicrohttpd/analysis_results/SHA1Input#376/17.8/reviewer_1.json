{
  "user_message": "An agent A claimed that the following SHA1Input code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of SHA1Input.\n```c\nstatic enum SHA1_RESULT\nSHA1Input (struct SHA1Context *context, const unsigned char *message_array,\n           unsigned length)\n{\n  if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }\n  if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  while (length-- && ! context->corrupted)\n  {\n    context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);\n    context->length_low += 8;\n    if (context->length_low == 0)\n    {\n      context->length_high++;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }\n    }\n    if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }\n    message_array++;\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'message_array++;' modifies the pointer parameter message_array (it advances the parameter in the loop). MISRA C 2023 Rule 17.8 requires that function parameters shall not be modified \u2014 the object pointed to may be changed, but the pointer parameter itself must not be altered. Although the pointed-to bytes are const (so only the pointer is changed), this still violates Rule 17.8. A compliant fix is to copy the parameter to a local pointer (e.g. 'const unsigned char *p = message_array;') and increment that local pointer, or use an index variable to traverse the array.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that function parameters shall not be modified; while the object pointed-to by a pointer parameter may be changed, the pointer parameter itself must not be altered. In the posted code the statement \"message_array++;\" modifies the pointer parameter message_array (advances the parameter), which violates Rule 17.8. (Also note that \"length--\" in the while condition modifies the parameter length, which is an additional violation.) A compliant fix is to make local copies, e.g. \"const unsigned char *p = message_array; unsigned len = length;\" and use p and len in the loop, or use an index variable to traverse the array rather than changing the parameters."
}