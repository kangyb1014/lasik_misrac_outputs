{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of SHA1Input:\n```c\nstatic enum SHA1_RESULT\nSHA1Input (struct SHA1Context *context, const unsigned char *message_array,\n           unsigned length)\n{\n  if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }\n  if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  while (length-- && ! context->corrupted)\n  {\n    context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);\n    context->length_low += 8;\n    if (context->length_low == 0)\n    {\n      context->length_high++;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }\n    }\n    if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }\n    message_array++;\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function SHA1Input:\nstruct SHA1Context\n{\n  uint32_t intermediate_hash[SHA1HashSize / 4];\n  uint32_t length_low;\n  uint32_t length_high;\n  int_least16_t message_block_index;\n  unsigned char message_block[64];\n  int computed;\n  int corrupted;\n}\n...\nstatic enum SHA1_RESULT\nSHA1Reset (struct SHA1Context *context)\n{\n  if (! context)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  context->length_low = 0;\n  context->length_high = 0;\n  context->message_block_index = 0;\n  context->intermediate_hash[0] = 0x67452301;\n  context->intermediate_hash[1] = 0xEFCDAB89;\n  context->intermediate_hash[2] = 0x98BADCFE;\n  context->intermediate_hash[3] = 0x10325476;\n  context->intermediate_hash[4] = 0xC3D2E1F0;\n  context->computed = 0;\n  context->corrupted = 0;\n  return SHA1_RESULT_SUCCESS;\n}\n...\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n...\nstatic void\nSHA1ProcessMessageBlock (struct SHA1Context *context)\n{\n  const uint32_t K[] = { 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6 };\n  int i;\n  uint32_t temp;\n  uint32_t W[80];\n  uint32_t A, B, C, D, E;\n\n  for (i = 0; i < 16; i++)\n  {\n    W[i] = ((uint32_t) context->message_block[i * 4]) << 24;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 1]) << 16;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 2]) << 8;\n    W[i] |= context->message_block[i * 4 + 3];\n  }\n  for (i = 16; i < 80; i++)\n  {\n    W[i]\n      = SHA1CircularShift (1, W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);\n  }\n  A = context->intermediate_hash[0];\n  B = context->intermediate_hash[1];\n  C = context->intermediate_hash[2];\n  D = context->intermediate_hash[3];\n  E = context->intermediate_hash[4];\n  for (i = 0; i < 20; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | ((~B) & D)) + E + W[i]\n           + K[0];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 20; i < 40; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[1];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 40; i < 60; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | (B & D) | (C & D)) + E\n           + W[i] + K[2];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 60; i < 80; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[3];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  context->intermediate_hash[0] += A;\n  context->intermediate_hash[1] += B;\n  context->intermediate_hash[2] += C;\n  context->intermediate_hash[3] += D;\n  context->intermediate_hash[4] += E;\n  context->message_block_index = 0;\n}\n...\nenum SHA1_RESULT\n{\n  SHA1_RESULT_SUCCESS = 0,\n  SHA1_RESULT_NULL = 1,\n  SHA1_RESULT_STATE_ERROR = 2\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The check is reachable when context->computed is false but context->corrupted is true (for example, if an earlier call to SHA1ProcessMessageBlock or other code set context->corrupted = 1 due to a length overflow). Although the previous branch (context->computed) sets context->corrupted and returns when context->computed is true, that does not make this check unreachable in all cases. Therefore no unreachable code is present here."
}