{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of SHA1Input:\n```c\nstatic enum SHA1_RESULT\nSHA1Input (struct SHA1Context *context, const unsigned char *message_array,\n           unsigned length)\n{\n  if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }\n  if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  while (length-- && ! context->corrupted)\n  {\n    context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);\n    context->length_low += 8;\n    if (context->length_low == 0)\n    {\n      context->length_high++;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }\n    }\n    if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }\n    message_array++;\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }",
    "message_array++;",
    "context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);",
    "if (context->length_high == 0)\n    {\n      context->corrupted = 1;\n    }",
    "if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }",
    "if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }",
    "if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }",
    "if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }"
  ],
  "explanation": "The fragments listed above are those that could plausibly contain operations that are redundant or otherwise candidates for dead-code investigation (e.g. a possibly redundant byte mask, early returns that bypass other checks, assignments that may have no effect on observable behaviour). Other code in the function is not included because it performs clearly required, state-affecting operations: the loop control (while (length-- && ! context->corrupted)) is essential to iterate bytes and honour the corrupted flag; updating length_low by 8 and checking for overflow (length_high increment) is meaningful for message length tracking; incrementing message_block_index and invoking SHA1ProcessMessageBlock when the block is full is necessary to process data; the final return value and the pointer/NULL checks (when not bypassed by the listed early-return) are standard and affect observable behaviour. Therefore those other fragments are not reported for investigation under MISRA C 2023 Rule 2.2."
}