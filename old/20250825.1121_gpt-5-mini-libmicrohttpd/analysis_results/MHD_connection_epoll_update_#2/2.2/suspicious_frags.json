{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_epoll_update_:\n```c\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_connection_epoll_update_:\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));",
    "#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif"
  ],
  "explanation": "I flagged the mhd_assert(...) statement because, given the provided macro definition (#define mhd_assert(ignore) ((void)0)), that statement is a no-op at compile time \u2014 it executes nothing and can be removed without affecting program behaviour, which meets the definition of dead code. The conditional logging block under #ifdef HAVE_MESSAGES is flagged because it is compile-time conditional and/or guarded by a runtime option bit; depending on build configuration or if the runtime option bit is never set in the project, that code may never be executed and would effectively be dead (or compiled out). All other fragments in the function perform observable actions (modify connection->epoll_state, insert the connection into lists, call epoll_ctl, set connection->state, call cleanup_connection(), return values, etc.). Those operations affect program state or control flow and therefore are not candidates for dead-code under MISRA C Rule 2.2 and do not need investigation here."
}