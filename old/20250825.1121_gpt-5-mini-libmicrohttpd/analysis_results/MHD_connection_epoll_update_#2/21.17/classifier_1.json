{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_connection_epoll_update_:\n```c\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_connection_epoll_update_:\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n...\n#define MHD_socket_last_strerr_ MHD_socket_strerr_(MHD_socket_get_error_())\n...\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n...\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n...\n#define EDLL_insert(head, tail, element) do{(element)->nextE=(head);(element)->prevE=NULL;if((tail)==NULL){(tail)=element;}else{(head)->prevE=element;}(head)=(element);}while(0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment only calls free(response->data_iov). Rule 21.17 concerns use of string.h functions (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn). free() is not one of those functions and does not perform indexed memory accesses; therefore this fragment does not violate MISRA C 2023 Rule 21.17. (A violation would occur if any of the listed string.h functions were called with pointers/lengths that could access beyond the referenced object bounds.)"
}