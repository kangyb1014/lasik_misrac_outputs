{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ahc_echo:\nstruct MHD_Response\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */",
    "  (void) upload_data_size;  /* Unused. Silent compiler warning. */",
    "  (void) cls;               /* Unused. Silent compiler warning. */",
    "  (void) upload_data;       /* Unused. Silent compiler warning. */",
    "    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);",
    "  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);",
    "static enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{",
    "    *req_cls = &already_called_marker;",
    "  static int already_called_marker;"
  ],
  "explanation": "Fragments NOT selected for investigation either already use const-qualified pointees or are part of external APIs where non-const pointers are expected and/or the code clearly needs a mutable object:\n\n- All parameters declared as const char * (url, method, version, upload_data) and the static const char * username/password/realm are already const-qualified and therefore comply with Rule 8.13.\n- The local variable 'struct MHD_Response *response' is created and later destroyed via library API calls; the MHD API likely requires a non-const pointer because the response object is mutable, so it is not flagged here.\n- Enum variables (res_e, ret) and integer temporaries are not pointers and are irrelevant to Rule 8.13.\n- The parameter 'struct MHD_Connection *connection' and calls that use it are library API interactions; changing its pointed-to type to const without checking the API signature could be incorrect\u2014these uses should be checked against the MHD API but are not unambiguously violative from this code alone, so they were not marked.\n\nThe selected fragments focus on places where non-const pointers to objects that are not modified (or appear to be usable as const) are created or assigned within this function: the function parameter list (showing void *cls, size_t *upload_data_size, void **req_cls), the static marker object and its address being stored in a void* slot, the explicit unused (void) casts, and passing string literals to buffer-creation routines (which may drop const qualification depending on the callee prototype). These should be investigated to determine whether the pointed-to types can/should be const-qualified to satisfy MISRA C Rule 8.13."
}