{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of check_apply_params:\n```c\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function check_apply_params:\nstatic struct PerfRepl_parameters tool_params = {\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n}\n...\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n...\nstatic void\nprint_version (void)\n{\n  printf (\"%s (GNU libmicrohttpd\", self_name);\n  if (0 != build_revision[0])\n    printf (\"; %s\", build_revision);\n  printf (\") %s\\n\", MHD_get_version ());\n  printf (\"%s\\n\", tool_copyright);\n}\n...\nstatic void\ncheck_param_port (void)\n{\n  if (0 != tool_params.port)\n    return;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_AUTODETECT_BIND_PORT))\n    tool_params.port = PERF_REPL_PORT_FALLBACK;\n}\n...\nstatic void\ncheck_apply_param__all_cpus (void)\n{\n  if (! tool_params.all_cpus)\n    return;\n\n  num_threads = get_process_cpu_core_count ();\n  printf (\"Requested use of all available CPU cores for MHD threads.\\n\");\n  if (get_cpu_core_count () == num_threads)\n    print_all_cores_used ();\n}\n...\nstatic void\ncheck_apply_param__threads (void)\n{\n  if (0 == tool_params.threads)\n    return;\n\n  num_threads = tool_params.threads;\n\n  if (get_process_cpu_core_count () < num_threads)\n  {\n    fprintf (stderr, \"WARNING: The requested number of threads (%u) is \"\n             \"higher than the number of detected available CPU cores (%u).\\n\",\n             num_threads, get_process_cpu_core_count ());\n    fprintf (stderr, \"This decreases the performance. \"\n             \"Consider using fewer threads.\\n\");\n  }\n  if (get_cpu_core_count () == num_threads)\n  {\n    printf (\"The requested number of threads is equal to the number of \"\n            \"detected CPU cores.\\n\");\n    print_all_cores_used ();\n  }\n}\n...\nstatic int\ncheck_apply_param__thread_per_conn (void)\n{\n  if (! tool_params.thread_per_conn)\n    return ! 0;\n\n  if (tool_params.epoll)\n  {\n    fprintf (stderr, \"'Thread-per-connection' mode cannot be used together \"\n             \"with 'epoll'.\\n\");\n    return 0;\n  }\n  num_threads = 1;\n\n  return ! 0;\n}\n...\nstatic int\ncheck_param__epoll (void)\n{\n  if (! tool_params.epoll)\n    return ! 0;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n  {\n    fprintf (stderr, \"'epoll' was requested, but this MHD build does not \"\n             \"support 'epoll' functionality.\\n\");\n    return 0;\n  }\n  return ! 0;\n}\n...\nstatic int\ncheck_param__poll (void)\n{\n  if (! tool_params.poll)\n    return ! 0;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_POLL))\n  {\n    fprintf (stderr, \"poll() was requested, but this MHD build does not \"\n             \"support polling by poll().\\n\");\n    return 0;\n  }\n  return ! 0;\n}\n...\nstatic void\ncheck_param__empty_tiny_medium_large (void)\n{\n  if (0 == (tool_params.empty | tool_params.tiny | tool_params.medium\n            | tool_params.large))\n    tool_params.tiny = ! 0;\n}\n...\nstatic void\ncheck_param__shared_single_unique (void)\n{\n  if (0 == (tool_params.shared | tool_params.single | tool_params.unique))\n    tool_params.shared = ! 0;\n}\n...\nstatic int\ncheck_param__connections (void)\n{\n  if (0 == tool_params.connections)\n    return ! 0;\n  if (get_num_threads () > tool_params.connections)\n  {\n    fprintf (stderr, \"The connections number limit (%u) is less than number \"\n             \"of threads used (%u). Use higher value for connections limit.\\n\",\n             tool_params.connections, get_num_threads ());\n    return 0;\n  }\n  return ! 0;\n}\n...\n#define PERF_RPL_ERR_CODE_BAD_PARAM 65\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);",
    "printf (\"%s\\n\", tool_copyright);",
    "if (0 != build_revision[0])\n    printf (\"; %s\", build_revision);",
    "printf (\") %s\\n\", MHD_get_version ());",
    "printf (\"%s (GNU libmicrohttpd\", self_name);"
  ],
  "explanation": "I only selected fragments where identifiers that are likely string pointers (self_name, build_revision, tool_copyright, and the return of MHD_get_version()) are passed to printf as %s. These sites are the places to inspect whether the corresponding pointer declarations should be const-qualified per MISRA C 2023 Rule 8.13. Other parts of the provided code do not contain pointer variables or pointer expressions that could be made const: most printf/fprintf calls use string literals (which are already constant), the tool_params structure shown contains only scalar initializers (no pointer fields in the provided excerpt), and functions in the excerpt either have no pointer parameters or call library functions (e.g. MHD_is_feature_supported) where pointer types are not present in the shown code. Therefore no other fragments in the provided code require investigation for Rule 8.13 based on the available context."
}