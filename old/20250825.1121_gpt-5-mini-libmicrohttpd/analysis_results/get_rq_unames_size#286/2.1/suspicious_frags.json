{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_unames_size:\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_rq_unames_size:\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n...\n#define MHD_DAUTH_EXT_PARAM_MIN_LEN MHD_STATICSTR_LEN_(MHD_DAUTH_EXT_PARAM_PREFIX\"'\")\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no provably unreachable code fragments in the provided functions. Reasoning: \n\n- get_rq_unames_size has three explicit branches: (STANDARD || USERHASH), EXTENDED, and the implicit else (covers INVALID and MISSING). get_rq_uname_type can return STANDARD, USERHASH, EXTENDED, INVALID or MISSING, so each branch (or the implicit fall-through) is reachable for some valid enum value.\n\n- When STANDARD or USERHASH is returned by get_rq_uname_type the implementation guarantees params->username.value.str is non-NULL, so using params->username.value.len and adding the extra USERHASH half-length are well defined and reachable when uname_type == USERHASH.\n\n- When EXTENDED is returned get_rq_uname_type guarantees params->username_ext.value.str is non-NULL, params->username_ext.quoted is false, params->userhash is false, and username_ext.value.len >= MHD_DAUTH_EXT_PARAM_MIN_LEN, so the subtraction used in the EXTENDED branch cannot underflow and that branch is reachable when uname_type == MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED.\n\n- The implicit else (INVALID or MISSING) leaves s == 0 and returns it; this is reachable when get_rq_uname_type returns INVALID or MISSING.\n\n- The initial mhd_assert is a runtime check (commonly compiled out in release builds); it does not make any subsequent source text statically unreachable in the sense of MISRA Rule 2.1.\n\nGiven these facts, there are no code fragments in the provided code that are provably unreachable and therefore none that require further investigation for MISRA C 2023 Rule 2.1."
}