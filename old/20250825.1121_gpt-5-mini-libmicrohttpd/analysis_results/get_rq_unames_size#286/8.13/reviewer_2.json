{
  "user_message": "An agent A claimed that the following get_rq_unames_size code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_unames_size.\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code tests params->username.value.str while the function parameter is const struct MHD_RqDAuth *params. If the struct member is declared as 'char *str' (a pointer to non-const char), then the pointer\u2019s target is not const-qualified even though the object is used read-only here. The top-level const on params makes the pointer itself const (char * const) but does not make the pointee const (const char *). MISRA C 2023 Rule 8.13 requires pointer targets to be const-qualified when possible, so the member should be declared as 'const char *str' if the string is not modified. Therefore this is a violation scenario.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function get_rq_unames_size:\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n...\n#define MHD_DAUTH_EXT_PARAM_MIN_LEN MHD_STATICSTR_LEN_(MHD_DAUTH_EXT_PARAM_PREFIX\"'\")\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report cannot be confirmed from the code shown. MISRA C:2023 Rule 8.13 concerns the declared type of pointer targets; it requires pointer types to point to const-qualified objects when the pointee is not modified. The function has a parameter const struct MHD_RqDAuth *params, but that only makes the struct object (and the member pointer itself) const \u2014 it does not change the declared type of the member pointer\u2019s pointee. If the struct fields username.value.str and username_ext.value.str are declared as char * (i.e. a pointer to non-const char) and those pointers are only used for read-only access, then Agent A\u2019s claim would be correct and the struct should use const char * for MISRA 8.13 compliance. However, the struct definitions are not provided here, so you cannot conclude a violation from the excerpt alone. To resolve: inspect the declaration of struct MHD_RqDAuth (and the types of username.value.str / username_ext.value.str). If they are non-const pointers and the pointees are never modified, change them to point to const-qualified char. Conversely, if the design requires writable pointees, then keeping them non-const may be justified and not a MISRA 8.13 violation."
}