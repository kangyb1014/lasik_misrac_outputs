{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_unames_size:\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_rq_unames_size:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\n#define mhd_assert(ignore) ((void)0)\n...\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n...\nstruct MHD_RqDAuth\n{\n  struct MHD_RqDAuthParam nonce;\n  struct MHD_RqDAuthParam opaque;\n  struct MHD_RqDAuthParam response;\n  struct MHD_RqDAuthParam username;\n  struct MHD_RqDAuthParam username_ext;\n  struct MHD_RqDAuthParam realm;\n  struct MHD_RqDAuthParam uri;\n  /* The raw QOP value, used in the 'response' calculation */\n  struct MHD_RqDAuthParam qop_raw;\n  struct MHD_RqDAuthParam cnonce;\n  struct MHD_RqDAuthParam nc;\n\n  /* Decoded values are below */\n  bool userhash; /* True if 'userhash' parameter has value 'true'. */\n  enum MHD_DigestAuthAlgo3 algo3;\n  enum MHD_DigestAuthQOP qop;\n}\n...\nenum MHD_DigestAuthUsernameType\n{\n  /**\n   * No username parameter in in Digest Authorization header.\n   * This should be treated as an error.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_MISSING = 0,\n\n  /**\n   * The 'username' parameter is used to specify the username.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD = (1 << 2),\n\n  /**\n   * The username is specified by 'username*' parameter with\n   * the extended notation (see RFC 5987 #section-3.2.1).\n   * The only difference between standard and extended types is\n   * the way how username value is encoded in the header.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED = (1 << 3),\n\n  /**\n   * The username provided in form of 'userhash' as\n   * specified by RFC 7616 #section-3.4.4.\n   * @sa #MHD_digest_auth_calc_userhash_hex(), #MHD_digest_auth_calc_userhash()\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH = (1 << 1),\n\n  /**\n   * The invalid combination of username parameters are used by client.\n   * Either:\n   * * both 'username' and 'username*' are used\n   * * 'username*' is used with 'userhash=true'\n   * * 'username*' used with invalid extended notation\n   * * 'username' is not hexadecimal string, while 'userhash' set to 'true'\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_INVALID = (1 << 0)\n}\n...\n#define MHD_DAUTH_EXT_PARAM_MIN_LEN MHD_STATICSTR_LEN_(MHD_DAUTH_EXT_PARAM_PREFIX\"'\")\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)",
    "#define _MHD_static_inline staticinline__attribute__((always_inline))",
    "_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)"
  ],
  "explanation": "I did not mark any other fragments for investigation because they do not use explicit compiler language extensions (as typically documented by compilers). The remaining code uses standard C constructs: enums with constant assignments, size_t, pointer and struct accesses, standard arithmetic, bit-shifts for enum values, the use of bool, macros like mhd_assert((void)0), and ordinary macro usage (e.g. MHD_DAUTH_EXT_PARAM_MIN_LEN). There are no other occurrences of compiler-specific builtins or extensions such as __builtin_*, typeof, asm, pragma with vendor-specific extensions, attribute annotations (other than the one captured via the _MHD_static_inline macro), or inline assembly. Therefore only the macro that expands to __attribute__((always_inline)) and its uses are flagged for investigation under MISRA C 2023 Rule 1.2."
}