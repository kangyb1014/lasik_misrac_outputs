{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value:\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter 'connection' is declared as a non-const pointer (struct MHD_Connection *connection) but the function only appears to read from the connection (it calls a lookup helper and returns a const char *). If MHD_lookup_connection_value_n does not modify the connection object, then the pointer should be const-qualified. To comply with MISRA C 2023 Rule 8.13, change the prototype to 'const struct MHD_Connection *connection' and propagate const to called functions as needed."
}