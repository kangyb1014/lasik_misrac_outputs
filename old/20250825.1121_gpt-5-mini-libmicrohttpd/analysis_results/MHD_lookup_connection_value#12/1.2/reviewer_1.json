{
  "user_message": "An agent A claimed that the following MHD_lookup_connection_value code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_connection_value.\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_EXTERN expands to the GCC/Clang-specific attribute syntax __attribute__((visibility(\"default\"))) (i.e. __attribute__ is a compiler-specific extension). This use of a compiler extension violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_lookup_connection_value:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The macro _MHD_EXTERN expands to __attribute__((visibility(\"default\"))), which is a compiler-specific attribute syntax (a GCC/Clang language extension) and therefore constitutes use of a language extension. MISRA C:2023 Rule 1.2 forbids use of language extensions that are documented as extensions by the compiler, so this use should be reported as a violation (or require a documented deviation). If strict compliance is required, the attribute should be removed or made conditional (e.g. define the macro to expand to nothing or to a standard-compliant form for compilers that do not support the extension), with any deviation justified and documented."
}