{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value:\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_lookup_connection_value:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function declaration uses the macro _MHD_EXTERN which expands to the GCC attribute syntax __attribute__((visibility(\"default\")))extern. The __attribute__((...)) form is a compiler-specific language extension (GCC/clang) documented as an extension, so the code violates MISRA C 2023 Rule 1.2."
}