{
  "user_message": "An agent A claimed that the following MHD_lookup_connection_value code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_lookup_connection_value.\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function declaration uses the macro _MHD_EXTERN which expands to the GCC attribute syntax __attribute__((visibility(\"default\")))extern. The __attribute__((...)) form is a compiler-specific language extension (GCC/clang) documented as an extension, so the code violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_lookup_connection_value:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The identifier _MHD_EXTERN expands to GCC/Clang attribute syntax __attribute__((visibility(\"default\"))), which is a compiler-specific language extension (the __attribute__((...)) form is documented as a vendor extension). MISRA C 2023 Rule 1.2 prohibits the use of language extensions; therefore the code as shown violates Rule 1.2. (If the attribute were conditionally defined only when a compliant compiler supports it, or removed to use strictly standard linkage specifiers, the violation could be avoided.)"
}