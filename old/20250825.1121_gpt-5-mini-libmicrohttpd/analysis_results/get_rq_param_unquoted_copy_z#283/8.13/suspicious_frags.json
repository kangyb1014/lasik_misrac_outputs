{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_rq_param_unquoted_copy_z:\nstruct MHD_RqDAuthParam\n{\n  /**\n   * The string with length, NOT zero-terminated\n   */\n  struct _MHD_str_w_len value;\n  /**\n   * True if string must be \"unquoted\" before processing.\n   * This member is false if the string is used in DQUOTE marks, but no\n   * backslash-escape is used in the string.\n   */\n  bool quoted;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "len = MHD_str_unquote (param->value.str, param->value.len, buf);",
    "memcpy (buf, param->value.str, param->value.len);",
    "mhd_assert (NULL != param->value.str);"
  ],
  "explanation": "The MISRA C Rule 8.13 concerns pointers that should be const-qualified when they are used only for input. The fragments selected are all uses of param->value.str as an input/source (null-check, memcpy source, and passing to MHD_str_unquote) and therefore should be investigated to confirm whether the underlying member should be declared as pointing to a const-qualified type (e.g. const char *). Other parts of the function need not be investigated for this rule: the parameter 'char *buf' and the writes to buf (buf[param->value.len] = 0; buf[len] = 0;) are output operations and must remain non-const; the function's const-qualified 'param' pointer itself is already const; the size/len handling and return statements do not affect pointer const-qualification. The definition shown for struct MHD_RqDAuthParam only contains the value member of type struct _MHD_str_w_len; since the actual declaration of the inner member 'str' is not provided here, investigating the uses of param->value.str (above) is the appropriate way to detect a missing const qualification."
}