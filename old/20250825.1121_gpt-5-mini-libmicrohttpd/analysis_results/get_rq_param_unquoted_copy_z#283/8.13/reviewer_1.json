{
  "user_message": "An agent A claimed that the following get_rq_param_unquoted_copy_z code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_param_unquoted_copy_z.\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member param->value.str is declared as a non-const pointer (e.g. char *str) then this use is read-only and the pointer could and should be declared const char *str. In that situation Rule 8.13 is violated because a pointer that is used only to read data is not const-qualified.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function get_rq_param_unquoted_copy_z:\nstruct MHD_RqDAuthParam\n{\n  /**\n   * The string with length, NOT zero-terminated\n   */\n  struct _MHD_str_w_len value;\n  /**\n   * True if string must be \"unquoted\" before processing.\n   * This member is false if the string is used in DQUOTE marks, but no\n   * backslash-escape is used in the string.\n   */\n  bool quoted;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 8.13 concerns pointer declarations (they should be const-qualified when possible). The function itself declares param as const struct MHD_RqDAuthParam * (so the struct and its members cannot be modified through this parameter) and declares buf as a non-const destination (correct). The potential non-constness of param->value.str is a property of the definition of struct _MHD_str_w_len (not shown). If that member were declared as char * but in the entire program is only ever read, then the struct/member declaration would be the place to consider adding const and could be flagged against 8.13 \u2014 but that is outside the scope of this function. Given only the shown code, there is no violation of MISRA C 2023 Rule 8.13 in get_rq_param_unquoted_copy_z."
}