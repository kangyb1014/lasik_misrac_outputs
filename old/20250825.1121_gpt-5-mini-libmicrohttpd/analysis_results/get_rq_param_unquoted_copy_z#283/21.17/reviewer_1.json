{
  "user_message": "An agent A claimed that the following get_rq_param_unquoted_copy_z code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_param_unquoted_copy_z.\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function writes a terminating NUL at buf[param->value.len] after copying param->value.len bytes into buf, but the function has no buffer-size parameter or documented precondition that buf has room for param->value.len+1 bytes. If the caller provides a buffer of size param->value.len (e.g. char buf[param->value.len] or malloc(param->value.len)), the assignment buf[param->value.len] = 0 writes one byte past the buffer end (out-of-bounds). Therefore the code can result in an access beyond the bounds of the object referenced by buf.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code calls memcpy(buf, param->value.str, param->value.len) and then writes buf[param->value.len] = 0 without any buf-size parameter, check, or documented/asserted precondition that buf has at least param->value.len + 1 bytes. If the caller supplies a buffer of size param->value.len (or any smaller allocation), the memcpy or the terminating NUL write will access beyond buf's bounds. That violates the MISRA C 2023 Rule 21.17 requirement that uses of <string.h> functions (here memcpy) must not result in accesses beyond the bounds of the objects referenced by their pointer parameters. The second branch (MHD_str_unquote and subsequent buf[len] = 0) has the same issue: the function relies on the caller providing sufficient space but does not enforce or document it. To conform, the function must take/verify a buffer size (or document and assert the precondition) and ensure copies/writes never exceed that size."
}