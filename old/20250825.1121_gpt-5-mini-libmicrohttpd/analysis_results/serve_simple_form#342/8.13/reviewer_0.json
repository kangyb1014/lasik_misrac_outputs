{
  "user_message": "An agent A claimed that the following serve_simple_form code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of serve_simple_form.\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as 'struct Session *session' (non-const). If serve_simple_form and any callees it passes session to (e.g. add_session_cookie) do not modify the Session object, then the pointer should be to const-qualified type ('const struct Session *session') and the current declaration violates MISRA C 2023 Rule 8.13. If, however, add_session_cookie or other code legitimately modifies *session, then the non-const pointer is required and no violation occurs.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s reasoning is correct in principle but the report as stated is not verifiably correct for the provided snippet alone. MISRA C 2023 Rule 8.13 advises that a pointer parameter should be const-qualified when the pointed-to object is not modified. In serve_simple_form the parameter is declared as struct Session *session (non-const). If neither serve_simple_form nor any function it calls (for example add_session_cookie) modifies *session, then the parameter should indeed be const struct Session *session and the current declaration would be a Rule 8.13 violation (or at least require a deviation justification).\n\nHowever, the snippet does not show add_session_cookie or other callers, so you cannot determine from the code shown whether *session is modified. If add_session_cookie (or other callees) legitimately modifies the Session object, the non-const parameter is required and there is no Rule 8.13 violation. Therefore the claim that the code violates Rule 8.13 is conditional: it is correct if and only if *session is not modified anywhere reachable from serve_simple_form. With the information given, you cannot conclude a definite violation.\n\nRecommendation: either (a) make the parameter const struct Session *session and update callees if *session is not modified, or (b) document/justify a deviation if mutation is required."
}