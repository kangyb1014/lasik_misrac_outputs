{
  "user_message": "An agent A claimed that the following serve_simple_form code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of serve_simple_form.\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation: the call passes 'response' of type 'struct MHD_Response *' to add_session_cookie. If the add_session_cookie prototype accepts a non-const pointer (e.g. void add_session_cookie(struct Session *, struct MHD_Response *)) but the function does not modify the response object, then Rule 8.13 is violated because the parameter should be declared as pointer to const (const struct MHD_Response *). If, however, add_session_cookie is correctly declared to take a pointer-to-const or genuinely modifies the response, there is no violation. The source shown does not include the add_session_cookie prototype, so the violation can only be confirmed when that prototype shows a non-const parameter that could be const-qualified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not proven by the snippet alone. Rule 8.13 requires pointers to be declared to point to const-qualified types where possible, but the only questionable site in the snippet is the call add_session_cookie(session, response). Whether that is a MISRA violation depends entirely on the prototype of add_session_cookie: if add_session_cookie is declared to take struct MHD_Response * but does not actually modify the response, then its parameter should be const-qualified and that would be a Rule 8.13 violation (in the add_session_cookie declaration, not in serve_simple_form itself). If add_session_cookie is declared to take const struct MHD_Response * or if it legitimately modifies the response, there is no violation. The rest of serve_simple_form is fine (cls is const, form is const char *, the response object is obtained from the library and passed to functions such as MHD_add_response_header and MHD_destroy_response which likely require a mutable response). To decide conclusively, inspect the add_session_cookie prototype/definition; if it does not modify the response, change its parameter to const struct MHD_Response * to satisfy Rule 8.13."
}