{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_handle_idle:\n```c\nenum MHD_Result\nMHD_connection_handle_idle (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  enum MHD_Result ret;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n  /* 'daemon' is not used if epoll is not available and asserts are disabled */\n  (void) daemon; /* Mute compiler warning */\n\n  connection->in_idle = true;\n  while (! connection->suspended)\n  {\n#ifdef HTTPS_SUPPORT\n    if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n    {     /* HTTPS connection. */\n      if ((MHD_TLS_CONN_INIT <= connection->tls_state) &&\n          (MHD_TLS_CONN_CONNECTED > connection->tls_state))\n        break;\n    }\n#endif /* HTTPS_SUPPORT */\n#if DEBUG_STATES\n    MHD_DLOG (daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (get_request_line (connection))\n      {\n        mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING < connection->state);\n        mhd_assert ((MHD_IS_HTTP_VER_SUPPORTED (connection->rq.http_ver)) \\\n                    || (connection->discard_request));\n        continue;\n      }\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING >= connection->state);\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      switch_to_rq_headers_processing (connection);\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED != connection->state);\n      continue;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      if (get_req_headers (connection, false))\n      {\n        mhd_assert (MHD_CONNECTION_REQ_HEADERS_RECEIVING < connection->state);\n        mhd_assert ((MHD_CONNECTION_HEADERS_RECEIVED == connection->state) || \\\n                    (connection->discard_request));\n        continue;\n      }\n      mhd_assert (MHD_CONNECTION_REQ_HEADERS_RECEIVING == connection->state);\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n      parse_connection_headers (connection);\n      if (MHD_CONNECTION_HEADERS_RECEIVED != connection->state)\n        continue;\n      connection->state = MHD_CONNECTION_HEADERS_PROCESSED;\n      if (connection->suspended)\n        break;\n      continue;\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      call_connection_handler (connection);     /* first call */\n      if (MHD_CONNECTION_HEADERS_PROCESSED != connection->state)\n        continue;\n      if (connection->suspended)\n        continue;\n\n      if ( (NULL == connection->rp.response) &&\n           (need_100_continue (connection)) &&\n           /* If the client is already sending the payload (body)\n              there is no need to send \"100 Continue\" */\n           (0 == connection->read_buffer_offset) )\n      {\n        connection->state = MHD_CONNECTION_CONTINUE_SENDING;\n        break;\n      }\n      if ( (NULL != connection->rp.response) &&\n           (0 != connection->rq.remaining_upload_size) )\n      {\n        /* we refused (no upload allowed!) */\n        connection->rq.remaining_upload_size = 0;\n        /* force close, in case client still tries to upload... */\n        connection->discard_request = true;\n      }\n      connection->state = (0 == connection->rq.remaining_upload_size)\n                          ? MHD_CONNECTION_FULL_REQ_RECEIVED\n                          : MHD_CONNECTION_BODY_RECEIVING;\n      if (connection->suspended)\n        break;\n      continue;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      if (connection->continue_message_write_offset ==\n          MHD_STATICSTR_LEN_ (HTTP_100_CONTINUE))\n      {\n        connection->state = MHD_CONNECTION_BODY_RECEIVING;\n        continue;\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      mhd_assert (0 != connection->rq.remaining_upload_size);\n      mhd_assert (! connection->discard_request);\n      mhd_assert (NULL == connection->rp.response);\n      if (0 != connection->read_buffer_offset)\n      {\n        process_request_body (connection);           /* loop call */\n        if (MHD_CONNECTION_BODY_RECEIVING != connection->state)\n          continue;\n      }\n      /* Modify here when queueing of the response during data processing\n         will be supported */\n      mhd_assert (! connection->discard_request);\n      mhd_assert (NULL == connection->rp.response);\n      if (0 == connection->rq.remaining_upload_size)\n      {\n        connection->state = MHD_CONNECTION_BODY_RECEIVED;\n        continue;\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (! connection->discard_request);\n      mhd_assert (NULL == connection->rp.response);\n      if (0 == connection->rq.remaining_upload_size)\n      {\n        if (connection->rq.have_chunked_upload)\n        {\n          /* Reset counter variables reused for footers */\n          connection->rq.num_cr_sp_replaced = 0;\n          connection->rq.skipped_broken_lines = 0;\n          reset_rq_header_processing_state (connection);\n          connection->state = MHD_CONNECTION_FOOTERS_RECEIVING;\n        }\n        else\n          connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n        continue;\n      }\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      if (get_req_headers (connection, true))\n      {\n        mhd_assert (MHD_CONNECTION_FOOTERS_RECEIVING < connection->state);\n        mhd_assert ((MHD_CONNECTION_FOOTERS_RECEIVED == connection->state) || \\\n                    (connection->discard_request));\n        continue;\n      }\n      mhd_assert (MHD_CONNECTION_FOOTERS_RECEIVING == connection->state);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      /* The header, the body, and the footers of the request has been received,\n       * switch to the final processing of the request. */\n      connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n      continue;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      call_connection_handler (connection);     /* \"final\" call */\n      if (connection->state != MHD_CONNECTION_FULL_REQ_RECEIVED)\n        continue;\n      if (NULL == connection->rp.response)\n        break;                  /* try again next time */\n      /* Response is ready, start reply */\n      connection->state = MHD_CONNECTION_START_REPLY;\n      continue;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (NULL != connection->rp.response);\n      connection_switch_from_recv_to_send (connection);\n      if (MHD_NO == build_header_response (connection))\n      {\n        /* oops - close! */\n        CONNECTION_CLOSE_ERROR (connection,\n                                _ (\"Closing connection (failed to create \"\n                                   \"response header).\\n\"));\n        continue;\n      }\n      connection->state = MHD_CONNECTION_HEADERS_SENDING;\n      break;\n\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* no default action */\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n#ifdef UPGRADE_SUPPORT\n      if (NULL != connection->rp.response->upgrade_handler)\n      {\n        connection->state = MHD_CONNECTION_UPGRADE;\n        /* This connection is \"upgraded\".  Pass socket to application. */\n        if (MHD_NO ==\n            MHD_response_execute_upgrade_ (connection->rp.response,\n                                           connection))\n        {\n          /* upgrade failed, fail hard */\n          CONNECTION_CLOSE_ERROR (connection,\n                                  NULL);\n          continue;\n        }\n        /* Response is not required anymore for this connection. */\n        if (1)\n        {\n          struct MHD_Response *const resp = connection->rp.response;\n\n          connection->rp.response = NULL;\n          MHD_destroy_response (resp);\n        }\n        continue;\n      }\n#endif /* UPGRADE_SUPPORT */\n\n      if (connection->rp.props.send_reply_body)\n      {\n        if (connection->rp.props.chunked)\n          connection->state = MHD_CONNECTION_CHUNKED_BODY_UNREADY;\n        else\n          connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n      }\n      else\n        connection->state = MHD_CONNECTION_FULL_REPLY_SENT;\n      continue;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (! connection->rp.props.chunked);\n      /* nothing to do here */\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (! connection->rp.props.chunked);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      if (NULL != connection->rp.response->crc)\n        MHD_mutex_lock_chk_ (&connection->rp.response->mutex);\n#endif\n      if (0 == connection->rp.response->total_size)\n      {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n        if (NULL != connection->rp.response->crc)\n          MHD_mutex_unlock_chk_ (&connection->rp.response->mutex);\n#endif\n        if (connection->rp.props.chunked)\n          connection->state = MHD_CONNECTION_CHUNKED_BODY_SENT;\n        else\n          connection->state = MHD_CONNECTION_FULL_REPLY_SENT;\n        continue;\n      }\n      if (MHD_NO != try_ready_normal_body (connection))\n      {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n        if (NULL != connection->rp.response->crc)\n          MHD_mutex_unlock_chk_ (&connection->rp.response->mutex);\n#endif\n        connection->state = MHD_CONNECTION_NORMAL_BODY_READY;\n        /* Buffering for flushable socket was already enabled*/\n\n        break;\n      }\n      /* mutex was already unlocked by \"try_ready_normal_body */\n      /* not ready, no socket action */\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (connection->rp.props.chunked);\n      /* nothing to do here */\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (connection->rp.props.chunked);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      if (NULL != connection->rp.response->crc)\n        MHD_mutex_lock_chk_ (&connection->rp.response->mutex);\n#endif\n      if ( (0 == connection->rp.response->total_size) ||\n           (connection->rp.rsp_write_position ==\n            connection->rp.response->total_size) )\n      {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n        if (NULL != connection->rp.response->crc)\n          MHD_mutex_unlock_chk_ (&connection->rp.response->mutex);\n#endif\n        connection->state = MHD_CONNECTION_CHUNKED_BODY_SENT;\n        continue;\n      }\n      if (1)\n      { /* pseudo-branch for local variables scope */\n        bool finished;\n        if (MHD_NO != try_ready_chunked_body (connection, &finished))\n        {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n          if (NULL != connection->rp.response->crc)\n            MHD_mutex_unlock_chk_ (&connection->rp.response->mutex);\n#endif\n          connection->state = finished ? MHD_CONNECTION_CHUNKED_BODY_SENT :\n                              MHD_CONNECTION_CHUNKED_BODY_READY;\n          continue;\n        }\n        /* mutex was already unlocked by try_ready_chunked_body */\n      }\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (connection->rp.props.chunked);\n      mhd_assert (connection->write_buffer_send_offset <= \\\n                  connection->write_buffer_append_offset);\n\n      if (MHD_NO == build_connection_chunked_response_footer (connection))\n      {\n        /* oops - close! */\n        CONNECTION_CLOSE_ERROR (connection,\n                                _ (\"Closing connection (failed to create \" \\\n                                   \"response footer).\"));\n        continue;\n      }\n      mhd_assert (connection->write_buffer_send_offset < \\\n                  connection->write_buffer_append_offset);\n      connection->state = MHD_CONNECTION_FOOTERS_SENDING;\n      continue;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      mhd_assert (connection->rp.props.send_reply_body);\n      mhd_assert (connection->rp.props.chunked);\n      /* no default action */\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      if (MHD_HTTP_PROCESSING == connection->rp.responseCode)\n      {\n        /* After this type of response, we allow sending another! */\n        connection->state = MHD_CONNECTION_HEADERS_PROCESSED;\n        MHD_destroy_response (connection->rp.response);\n        connection->rp.response = NULL;\n        /* FIXME: maybe partially reset memory pool? */\n        continue;\n      }\n      /* Reset connection after complete reply */\n      connection_reset (connection,\n                        MHD_CONN_USE_KEEPALIVE == connection->keepalive &&\n                        ! connection->read_closed &&\n                        ! connection->discard_request);\n      continue;\n    case MHD_CONNECTION_CLOSED:\n      cleanup_connection (connection);\n      connection->in_idle = false;\n      return MHD_NO;\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      connection->in_idle = false;\n      return MHD_YES;     /* keep open */\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n      break;\n    }\n    break;\n  }\n  if (connection_check_timedout (connection))\n  {\n    MHD_connection_close_ (connection,\n                           MHD_REQUEST_TERMINATED_TIMEOUT_REACHED);\n    connection->in_idle = false;\n    return MHD_YES;\n  }\n  MHD_connection_update_event_loop_info (connection);\n  ret = MHD_YES;\n#ifdef EPOLL_SUPPORT\n  if ( (! connection->suspended) &&\n       MHD_D_IS_USING_EPOLL_ (daemon) )\n  {\n    ret = MHD_connection_epoll_update_ (connection);\n  }\n#endif /* EPOLL_SUPPORT */\n  connection->in_idle = false;\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_connection_handle_idle:\nstatic bool\nget_request_line_inner (struct MHD_Connection *c)\n{\n  size_t p; /**< The current processing position */\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Allow to skip one or more empty lines before the request line.\n     RFC 9112, section 2.2 */\n  const bool skip_empty_lines = (1 >= discp_lvl);\n  /* Allow to skip more then one empty line before the request line.\n     RFC 9112, section 2.2 */\n  const bool skip_several_empty_lines = (skip_empty_lines && (0 >= discp_lvl));\n  /* Allow to skip number of unlimited empty lines before the request line.\n     RFC 9112, section 2.2 */\n  const bool skip_unlimited_empty_lines =\n    (skip_empty_lines && (-3 >= discp_lvl));\n  /* Treat bare LF as the end of the line.\n     RFC 9112, section 2.2 */\n  const bool bare_lf_as_crlf = MHD_ALLOW_BARE_LF_AS_CRLF_ (discp_lvl);\n  /* Treat tab as whitespace delimiter.\n     RFC 9112, section 3 */\n  const bool tab_as_wsp = (0 >= discp_lvl);\n  /* Treat VT (vertical tab) and FF (form feed) as whitespace delimiters.\n     RFC 9112, section 3 */\n  const bool other_wsp_as_wsp = (-1 >= discp_lvl);\n  /* Treat continuous whitespace block as a single space.\n     RFC 9112, section 3 */\n  const bool wsp_blocks = (-1 >= discp_lvl);\n  /* Parse whitespace in URI, special parsing of the request line.\n     RFC 9112, section 3.2 */\n  const bool wsp_in_uri = (0 >= discp_lvl);\n  /* Keep whitespace in URI, give app URI with whitespace instead of\n     automatic redirect to fixed URI.\n     Violates RFC 9112, section 3.2 */\n  const bool wsp_in_uri_keep = (-2 >= discp_lvl);\n  /* Keep bare CR character as is.\n     Violates RFC 9112, section 2.2 */\n  const bool bare_cr_keep = (wsp_in_uri_keep && (-3 >= discp_lvl));\n  /* Treat bare CR as space; replace it with space before processing.\n     RFC 9112, section 2.2 */\n  const bool bare_cr_as_sp = ((! bare_cr_keep) && (-1 >= discp_lvl));\n\n  mhd_assert (MHD_CONNECTION_INIT == c->state || \\\n              MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.method || \\\n              MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd || \\\n              MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd || \\\n              0 != c->rq.hdrs.rq_line.proc_pos);\n\n  if (0 == c->read_buffer_offset)\n  {\n    mhd_assert (MHD_CONNECTION_INIT == c->state);\n    return false; /* No data to process */\n  }\n  p = c->rq.hdrs.rq_line.proc_pos;\n  mhd_assert (p <= c->read_buffer_offset);\n\n  /* Skip empty lines, if any (and if allowed) */\n  /* See RFC 9112, section 2.2 */\n  if ((0 == p)\n      && (skip_empty_lines))\n  {\n    /* Skip empty lines before the request line.\n       See RFC 9112, section 2.2 */\n    bool is_empty_line;\n    mhd_assert (MHD_CONNECTION_INIT == c->state);\n    mhd_assert (NULL == c->rq.method);\n    mhd_assert (NULL == c->rq.url);\n    mhd_assert (0 == c->rq.url_len);\n    mhd_assert (NULL == c->rq.hdrs.rq_line.rq_tgt);\n    mhd_assert (0 == c->rq.req_target_len);\n    mhd_assert (NULL == c->rq.version);\n    do\n    {\n      is_empty_line = false;\n      if ('\\r' == c->read_buffer[0])\n      {\n        if (1 == c->read_buffer_offset)\n          return false; /* Not enough data yet */\n        if ('\\n' == c->read_buffer[1])\n        {\n          is_empty_line = true;\n          c->read_buffer += 2;\n          c->read_buffer_size -= 2;\n          c->read_buffer_offset -= 2;\n          c->rq.hdrs.rq_line.skipped_empty_lines++;\n        }\n      }\n      else if (('\\n' == c->read_buffer[0]) &&\n               (bare_lf_as_crlf))\n      {\n        is_empty_line = true;\n        c->read_buffer += 1;\n        c->read_buffer_size -= 1;\n        c->read_buffer_offset -= 1;\n        c->rq.hdrs.rq_line.skipped_empty_lines++;\n      }\n      if (is_empty_line)\n      {\n        if ((! skip_unlimited_empty_lines) &&\n            (((unsigned int) ((skip_several_empty_lines) ?\n                              MHD_MAX_EMPTY_LINES_SKIP : 1)) <\n             c->rq.hdrs.rq_line.skipped_empty_lines))\n        {\n          connection_close_error (c,\n                                  _ (\"Too many meaningless extra empty lines \" \\\n                                     \"received before the request\"));\n          return true; /* Process connection closure */\n        }\n        if (0 == c->read_buffer_offset)\n          return false;  /* No more data to process */\n      }\n    } while (is_empty_line);\n  }\n  /* All empty lines are skipped */\n\n  c->state = MHD_CONNECTION_REQ_LINE_RECEIVING;\n  /* Read and parse the request line */\n  mhd_assert (1 <= c->read_buffer_offset);\n\n  while (p < c->read_buffer_offset)\n  {\n    const char chr = c->read_buffer[p];\n    bool end_of_line;\n    /*\n       The processing logic is different depending on the configured strictness:\n\n       When whitespace BLOCKS are NOT ALLOWED, the end of the whitespace is\n       processed BEFORE processing of the current character.\n       When whitespace BLOCKS are ALLOWED, the end of the whitespace is\n       processed AFTER processing of the current character.\n\n       When space char in the URI is ALLOWED, the delimiter between the URI and\n       the HTTP version string is processed only at the END of the line.\n       When space in the URI is NOT ALLOWED, the delimiter between the URI and\n       the HTTP version string is processed as soon as the FIRST whitespace is\n       found after URI start.\n     */\n\n    end_of_line = false;\n\n    mhd_assert ((0 == c->rq.hdrs.rq_line.last_ws_end) || \\\n                (c->rq.hdrs.rq_line.last_ws_end > \\\n                 c->rq.hdrs.rq_line.last_ws_start));\n    mhd_assert ((0 == c->rq.hdrs.rq_line.last_ws_start) || \\\n                (0 != c->rq.hdrs.rq_line.last_ws_end));\n\n    /* Check for the end of the line */\n    if ('\\r' == chr)\n    {\n      if (p + 1 == c->read_buffer_offset)\n      {\n        c->rq.hdrs.rq_line.proc_pos = p;\n        return false; /* Not enough data yet */\n      }\n      else if ('\\n' == c->read_buffer[p + 1])\n        end_of_line = true;\n      else\n      {\n        /* Bare CR alone */\n        /* Must be rejected or replaced with space char.\n           See RFC 9112, section 2.2 */\n        if (bare_cr_as_sp)\n        {\n          c->read_buffer[p] = ' ';\n          c->rq.num_cr_sp_replaced++;\n          continue; /* Re-start processing of the current character */\n        }\n        else if (! bare_cr_keep)\n        {\n          /* A quick simple check whether this line looks like an HTTP request */\n          if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n              (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n          {\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            BARE_CR_IN_HEADER);\n          }\n          else\n            connection_close_error (c,\n                                    _ (\"Bare CR characters are not allowed \" \\\n                                       \"in the request line.\\n\"));\n          return true; /* Error in the request */\n        }\n      }\n    }\n    else if ('\\n' == chr)\n    {\n      /* Bare LF may be recognised as a line delimiter.\n         See RFC 9112, section 2.2 */\n      if (bare_lf_as_crlf)\n        end_of_line = true;\n      else\n      {\n        /* While RFC does not enforce error for bare LF character,\n           if this char is not treated as a line delimiter, it should be\n           rejected to avoid any security weakness due to request smuggling. */\n        /* A quick simple check whether this line looks like an HTTP request */\n        if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n            (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n        {\n          transmit_error_response_static (c,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          BARE_LF_IN_HEADER);\n        }\n        else\n          connection_close_error (c,\n                                  _ (\"Bare LF characters are not allowed \" \\\n                                     \"in the request line.\\n\"));\n        return true; /* Error in the request */\n      }\n    }\n\n    if (end_of_line)\n    {\n      /* Handle the end of the request line */\n\n      if (NULL != c->rq.method)\n      {\n        if (wsp_in_uri)\n        {\n          /* The end of the URI and the start of the HTTP version string\n             should be determined now. */\n          mhd_assert (NULL == c->rq.version);\n          mhd_assert (0 == c->rq.req_target_len);\n          if (0 != c->rq.hdrs.rq_line.last_ws_end)\n          {\n            /* Determine the end and the length of the URI */\n            if (NULL != c->rq.hdrs.rq_line.rq_tgt)\n            {\n              c->read_buffer [c->rq.hdrs.rq_line.last_ws_start] = 0; /* Zero terminate the URI */\n              c->rq.req_target_len =\n                c->rq.hdrs.rq_line.last_ws_start\n                - (size_t) (c->rq.hdrs.rq_line.rq_tgt - c->read_buffer);\n            }\n            else if ((c->rq.hdrs.rq_line.last_ws_start + 1 <\n                      c->rq.hdrs.rq_line.last_ws_end) &&\n                     (HTTP_VER_LEN == (p - c->rq.hdrs.rq_line.last_ws_end)))\n            {\n              /* Found only HTTP method and HTTP version and more than one\n                 whitespace between them. Assume zero-length URI. */\n              mhd_assert (wsp_blocks);\n              c->rq.hdrs.rq_line.last_ws_start++;\n              c->read_buffer[c->rq.hdrs.rq_line.last_ws_start] = 0; /* Zero terminate the URI */\n              c->rq.hdrs.rq_line.rq_tgt =\n                c->read_buffer + c->rq.hdrs.rq_line.last_ws_start;\n              c->rq.req_target_len = 0;\n              c->rq.hdrs.rq_line.num_ws_in_uri = 0;\n              c->rq.hdrs.rq_line.rq_tgt_qmark = NULL;\n            }\n            /* Determine the start of the HTTP version string */\n            if (NULL != c->rq.hdrs.rq_line.rq_tgt)\n            {\n              c->rq.version = c->read_buffer + c->rq.hdrs.rq_line.last_ws_end;\n            }\n          }\n        }\n        else\n        {\n          /* The end of the URI and the start of the HTTP version string\n             should be already known. */\n          if ((NULL == c->rq.version)\n              && (NULL != c->rq.hdrs.rq_line.rq_tgt)\n              && (HTTP_VER_LEN == p - (size_t) (c->rq.hdrs.rq_line.rq_tgt\n                                                - c->read_buffer))\n              && (0 != c->read_buffer[(size_t)\n                                      (c->rq.hdrs.rq_line.rq_tgt\n                                       - c->read_buffer) - 1]))\n          {\n            /* Found only HTTP method and HTTP version and more than one\n               whitespace between them. Assume zero-length URI. */\n            size_t uri_pos;\n            mhd_assert (wsp_blocks);\n            mhd_assert (0 == c->rq.req_target_len);\n            uri_pos = (size_t) (c->rq.hdrs.rq_line.rq_tgt - c->read_buffer) - 1;\n            mhd_assert (uri_pos < p);\n            c->rq.version = c->rq.hdrs.rq_line.rq_tgt;\n            c->read_buffer[uri_pos] = 0;  /* Zero terminate the URI */\n            c->rq.hdrs.rq_line.rq_tgt = c->read_buffer + uri_pos;\n            c->rq.req_target_len = 0;\n            c->rq.hdrs.rq_line.num_ws_in_uri = 0;\n            c->rq.hdrs.rq_line.rq_tgt_qmark = NULL;\n          }\n        }\n\n        if (NULL != c->rq.version)\n        {\n          mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n          if (! parse_http_version (c, c->rq.version,\n                                    p\n                                    - (size_t) (c->rq.version\n                                                - c->read_buffer)))\n          {\n            mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING < c->state);\n            return true; /* Unsupported / broken HTTP version */\n          }\n          c->read_buffer[p] = 0; /* Zero terminate the HTTP version strings */\n          if ('\\r' == chr)\n          {\n            p++; /* Consume CR */\n            mhd_assert (p < c->read_buffer_offset); /* The next character has been already checked */\n          }\n          p++; /* Consume LF */\n          c->read_buffer += p;\n          c->read_buffer_size -= p;\n          c->read_buffer_offset -= p;\n          mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\\n                      c->rq.req_target_len);\n          mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n                      (0 != c->rq.req_target_len));\n          mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n                      ((size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                                 - c->rq.hdrs.rq_line.rq_tgt) < \\\n                       c->rq.req_target_len));\n          mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n                      (c->rq.hdrs.rq_line.rq_tgt_qmark >= \\\n                       c->rq.hdrs.rq_line.rq_tgt));\n          return true; /* The request line is successfully parsed */\n        }\n      }\n      /* Error in the request line */\n\n      /* A quick simple check whether this line looks like an HTTP request */\n      if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n          (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n      {\n        transmit_error_response_static (c,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_MALFORMED);\n      }\n      else\n        connection_close_error (c,\n                                _ (\"The request line is malformed.\\n\"));\n\n      return true;\n    }\n\n    /* Process possible end of the previously found whitespace delimiter */\n    if ((! wsp_blocks) &&\n        (p == c->rq.hdrs.rq_line.last_ws_end) &&\n        (0 != c->rq.hdrs.rq_line.last_ws_end))\n    {\n      /* Previous character was a whitespace char and whitespace blocks\n         are not allowed. */\n      /* The current position is the next character after\n         a whitespace delimiter */\n      if (NULL == c->rq.hdrs.rq_line.rq_tgt)\n      {\n        /* The current position is the start of the URI */\n        mhd_assert (0 == c->rq.req_target_len);\n        mhd_assert (NULL == c->rq.version);\n        c->rq.hdrs.rq_line.rq_tgt = c->read_buffer + p;\n        /* Reset the whitespace marker */\n        c->rq.hdrs.rq_line.last_ws_start = 0;\n        c->rq.hdrs.rq_line.last_ws_end = 0;\n      }\n      else\n      {\n        /* It was a whitespace after the start of the URI */\n        if (! wsp_in_uri)\n        {\n          mhd_assert ((0 != c->rq.req_target_len) || \\\n                      (c->rq.hdrs.rq_line.rq_tgt + 1 == c->read_buffer + p));\n          mhd_assert (NULL == c->rq.version); /* Too many whitespaces? This error is handled at whitespace start */\n          c->rq.version = c->read_buffer + p;\n          /* Reset the whitespace marker */\n          c->rq.hdrs.rq_line.last_ws_start = 0;\n          c->rq.hdrs.rq_line.last_ws_end = 0;\n        }\n      }\n    }\n\n    /* Process the current character.\n       Is it not the end of the line.  */\n    if ((' ' == chr)\n        || (('\\t' == chr) && (tab_as_wsp))\n        || ((other_wsp_as_wsp) && ((0xb == chr) || (0xc == chr))))\n    {\n      /* A whitespace character */\n      if ((0 == c->rq.hdrs.rq_line.last_ws_end) ||\n          (p != c->rq.hdrs.rq_line.last_ws_end) ||\n          (! wsp_blocks))\n      {\n        /* Found first whitespace char of the new whitespace block */\n        if (NULL == c->rq.method)\n        {\n          /* Found the end of the HTTP method string */\n          mhd_assert (0 == c->rq.hdrs.rq_line.last_ws_start);\n          mhd_assert (0 == c->rq.hdrs.rq_line.last_ws_end);\n          mhd_assert (NULL == c->rq.hdrs.rq_line.rq_tgt);\n          mhd_assert (0 == c->rq.req_target_len);\n          mhd_assert (NULL == c->rq.version);\n          if (0 == p)\n          {\n            connection_close_error (c,\n                                    _ (\"The request line starts with \"\n                                       \"a whitespace.\\n\"));\n            return true; /* Error in the request */\n          }\n          c->read_buffer[p] = 0; /* Zero-terminate the request method string */\n          c->rq.method = c->read_buffer;\n          parse_http_std_method (c, c->rq.method, p);\n        }\n        else\n        {\n          /* A whitespace after the start of the URI */\n          if (! wsp_in_uri)\n          {\n            /* Whitespace in URI is not allowed to be parsed */\n            if (NULL == c->rq.version)\n            {\n              mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n              /* This is a delimiter between URI and HTTP version string */\n              c->read_buffer[p] = 0; /* Zero-terminate request URI string */\n              mhd_assert (((size_t) (c->rq.hdrs.rq_line.rq_tgt   \\\n                                     - c->read_buffer)) <= p);\n              c->rq.req_target_len =\n                p - (size_t) (c->rq.hdrs.rq_line.rq_tgt - c->read_buffer);\n            }\n            else\n            {\n              /* This is a delimiter AFTER version string */\n\n              /* A quick simple check whether this line looks like an HTTP request */\n              if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n                  (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n              {\n                transmit_error_response_static (c,\n                                                MHD_HTTP_BAD_REQUEST,\n                                                RQ_LINE_TOO_MANY_WSP);\n              }\n              else\n                connection_close_error (c,\n                                        _ (\"The request line has more than \"\n                                           \"two whitespaces.\\n\"));\n              return true; /* Error in the request */\n            }\n          }\n          else\n          {\n            /* Whitespace in URI is allowed to be parsed */\n            if (0 != c->rq.hdrs.rq_line.last_ws_end)\n            {\n              /* The whitespace after the start of the URI has been found already */\n              c->rq.hdrs.rq_line.num_ws_in_uri +=\n                c->rq.hdrs.rq_line.last_ws_end\n                - c->rq.hdrs.rq_line.last_ws_start;\n            }\n          }\n        }\n        c->rq.hdrs.rq_line.last_ws_start = p;\n        c->rq.hdrs.rq_line.last_ws_end = p + 1; /* Will be updated on the next char parsing */\n      }\n      else\n      {\n        /* Continuation of the whitespace block */\n        mhd_assert (0 != c->rq.hdrs.rq_line.last_ws_end);\n        mhd_assert (0 != p);\n        c->rq.hdrs.rq_line.last_ws_end = p + 1;\n      }\n    }\n    else\n    {\n      /* Non-whitespace char, not the end of the line */\n      mhd_assert ((0 == c->rq.hdrs.rq_line.last_ws_end) || \\\n                  (c->rq.hdrs.rq_line.last_ws_end == p) || \\\n                  wsp_in_uri);\n\n      if ((p == c->rq.hdrs.rq_line.last_ws_end) &&\n          (0 != c->rq.hdrs.rq_line.last_ws_end) &&\n          (wsp_blocks))\n      {\n        /* The end of the whitespace block */\n        if (NULL == c->rq.hdrs.rq_line.rq_tgt)\n        {\n          /* This is the first character of the URI */\n          mhd_assert (0 == c->rq.req_target_len);\n          mhd_assert (NULL == c->rq.version);\n          c->rq.hdrs.rq_line.rq_tgt = c->read_buffer + p;\n          /* Reset the whitespace marker */\n          c->rq.hdrs.rq_line.last_ws_start = 0;\n          c->rq.hdrs.rq_line.last_ws_end = 0;\n        }\n        else\n        {\n          if (! wsp_in_uri)\n          {\n            /* This is the first character of the HTTP version */\n            mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n            mhd_assert ((0 != c->rq.req_target_len) || \\\n                        (c->rq.hdrs.rq_line.rq_tgt + 1 == c->read_buffer + p));\n            mhd_assert (NULL == c->rq.version); /* Handled at whitespace start */\n            c->rq.version = c->read_buffer + p;\n            /* Reset the whitespace marker */\n            c->rq.hdrs.rq_line.last_ws_start = 0;\n            c->rq.hdrs.rq_line.last_ws_end = 0;\n          }\n        }\n      }\n\n      /* Handle other special characters */\n      if ('?' == chr)\n      {\n        if ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) &&\n            (NULL != c->rq.hdrs.rq_line.rq_tgt))\n        {\n          c->rq.hdrs.rq_line.rq_tgt_qmark = c->read_buffer + p;\n        }\n      }\n      else if ((0xb == chr) || (0xc == chr))\n      {\n        /* VT or LF characters */\n        mhd_assert (! other_wsp_as_wsp);\n        if ((NULL != c->rq.hdrs.rq_line.rq_tgt) &&\n            (NULL == c->rq.version) &&\n            (wsp_in_uri))\n        {\n          c->rq.hdrs.rq_line.num_ws_in_uri++;\n        }\n        else\n        {\n          connection_close_error (c,\n                                  _ (\"Invalid character is in the \"\n                                     \"request line.\\n\"));\n          return true; /* Error in the request */\n        }\n      }\n      else if (0 == chr)\n      {\n        /* NUL character */\n        connection_close_error (c,\n                                _ (\"The NUL character is in the \"\n                                   \"request line.\\n\"));\n        return true; /* Error in the request */\n      }\n    }\n\n    p++;\n  }\n\n  c->rq.hdrs.rq_line.proc_pos = p;\n  return false; /* Not enough data yet */\n}\n...\nstatic enum MHD_HdrLineReadRes_\nget_req_header (struct MHD_Connection *c,\n                bool process_footers,\n                struct _MHD_str_w_len *hdr_name,\n                struct _MHD_str_w_len *hdr_value)\n{\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Treat bare LF as the end of the line.\n     RFC 9112, section 2.2-3\n     Note: MHD never replaces bare LF with space (RFC 9110, section 5.5-5).\n     Bare LF is processed as end of the line or rejected as broken request. */\n  const bool bare_lf_as_crlf = MHD_ALLOW_BARE_LF_AS_CRLF_ (discp_lvl);\n  /* Keep bare CR character as is.\n     Violates RFC 9112, section 2.2-4 */\n  const bool bare_cr_keep = (-3 >= discp_lvl);\n  /* Treat bare CR as space; replace it with space before processing.\n     RFC 9112, section 2.2-4 */\n  const bool bare_cr_as_sp = ((! bare_cr_keep) && (-1 >= discp_lvl));\n  /* Treat NUL as space; replace it with space before processing.\n     RFC 9110, section 5.5-5 */\n  const bool nul_as_sp = (-1 >= discp_lvl);\n  /* Allow folded header lines.\n     RFC 9112, section 5.2-4 */\n  const bool allow_folded = (0 >= discp_lvl);\n  /* Do not reject headers with the whitespace at the start of the first line.\n     When allowed, the first line with whitespace character at the first\n     position is ignored (as well as all possible line foldings of the first\n     line).\n     RFC 9112, section 2.2-8 */\n  const bool allow_wsp_at_start = allow_folded && (-1 >= discp_lvl);\n  /* Allow whitespace in header (field) name.\n     Violates RFC 9110, section 5.1-2 */\n  const bool allow_wsp_in_name = (-2 >= discp_lvl);\n  /* Allow zero-length header (field) name.\n     Violates RFC 9110, section 5.1-2 */\n  const bool allow_empty_name = (-2 >= discp_lvl);\n  /* Allow whitespace before colon.\n     Violates RFC 9112, section 5.1-2 */\n  const bool allow_wsp_before_colon = (-3 >= discp_lvl);\n  /* Do not abort the request when header line has no colon, just skip such\n     bad lines.\n     RFC 9112, section 5-1 */\n  const bool allow_line_without_colon = (-2 >= discp_lvl);\n\n  size_t p; /**< The position of the currently processed character */\n\n#if ! defined (HAVE_MESSAGES) && ! defined(_DEBUG)\n  (void) process_footers; /* Unused parameter */\n#endif /* !HAVE_MESSAGES && !_DEBUG */\n\n  mhd_assert ((process_footers ? MHD_CONNECTION_FOOTERS_RECEIVING : \\\n               MHD_CONNECTION_REQ_HEADERS_RECEIVING) == \\\n              c->state);\n\n  p = c->rq.hdrs.hdr.proc_pos;\n\n  mhd_assert (p <= c->read_buffer_offset);\n  while (p < c->read_buffer_offset)\n  {\n    const char chr = c->read_buffer[p];\n    bool end_of_line;\n\n    mhd_assert ((0 == c->rq.hdrs.hdr.name_len) || \\\n                (c->rq.hdrs.hdr.name_len < p));\n    mhd_assert ((0 == c->rq.hdrs.hdr.name_len) || (0 != p));\n    mhd_assert ((0 == c->rq.hdrs.hdr.name_len) || \\\n                (c->rq.hdrs.hdr.name_end_found));\n    mhd_assert ((0 == c->rq.hdrs.hdr.value_start) || \\\n                (c->rq.hdrs.hdr.name_len < c->rq.hdrs.hdr.value_start));\n    mhd_assert ((0 == c->rq.hdrs.hdr.value_start) || \\\n                (0 != c->rq.hdrs.hdr.name_len));\n    mhd_assert ((0 == c->rq.hdrs.hdr.ws_start) || \\\n                (0 == c->rq.hdrs.hdr.name_len) || \\\n                (c->rq.hdrs.hdr.ws_start > c->rq.hdrs.hdr.name_len));\n    mhd_assert ((0 == c->rq.hdrs.hdr.ws_start) || \\\n                (0 == c->rq.hdrs.hdr.value_start) || \\\n                (c->rq.hdrs.hdr.ws_start > c->rq.hdrs.hdr.value_start));\n\n    /* Check for the end of the line */\n    if ('\\r' == chr)\n    {\n      if (0 != p)\n      {\n        /* Line is not empty, need to check for possible line folding */\n        if (p + 2 >= c->read_buffer_offset)\n          break; /* Not enough data yet to check for folded line */\n      }\n      else\n      {\n        /* Line is empty, no need to check for possible line folding */\n        if (p + 2 > c->read_buffer_offset)\n          break; /* Not enough data yet to check for the end of the line */\n      }\n      if ('\\n' == c->read_buffer[p + 1])\n        end_of_line = true;\n      else\n      {\n        /* Bare CR alone */\n        /* Must be rejected or replaced with space char.\n           See RFC 9112, section 2.2-4 */\n        if (bare_cr_as_sp)\n        {\n          c->read_buffer[p] = ' ';\n          c->rq.num_cr_sp_replaced++;\n          continue; /* Re-start processing of the current character */\n        }\n        else if (! bare_cr_keep)\n        {\n          if (! process_footers)\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            BARE_CR_IN_HEADER);\n          else\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            BARE_CR_IN_FOOTER);\n          return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n        }\n        end_of_line = false;\n      }\n    }\n    else if ('\\n' == chr)\n    {\n      /* Bare LF may be recognised as a line delimiter.\n         See RFC 9112, section 2.2-3 */\n      if (bare_lf_as_crlf)\n      {\n        if (0 != p)\n        {\n          /* Line is not empty, need to check for possible line folding */\n          if (p + 1 >= c->read_buffer_offset)\n            break; /* Not enough data yet to check for folded line */\n        }\n        end_of_line = true;\n      }\n      else\n      {\n        if (! process_footers)\n          transmit_error_response_static (c,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          BARE_LF_IN_HEADER);\n        else\n          transmit_error_response_static (c,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          BARE_LF_IN_FOOTER);\n        return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n      }\n    }\n    else\n      end_of_line = false;\n\n    if (end_of_line)\n    {\n      /* Handle the end of the line */\n      /**\n       *  The full length of the line, including CRLF (or bare LF).\n       */\n      const size_t line_len = p + (('\\r' == chr) ? 2 : 1);\n      char next_line_char;\n      mhd_assert (line_len <= c->read_buffer_offset);\n\n      if (0 == p)\n      {\n        /* Zero-length header line. This is the end of the request header\n           section.\n           RFC 9112, Section 2.1-1 */\n        mhd_assert (! c->rq.hdrs.hdr.starts_with_ws);\n        mhd_assert (! c->rq.hdrs.hdr.name_end_found);\n        mhd_assert (0 == c->rq.hdrs.hdr.name_len);\n        mhd_assert (0 == c->rq.hdrs.hdr.ws_start);\n        mhd_assert (0 == c->rq.hdrs.hdr.value_start);\n        /* Consume the line with CRLF (or bare LF) */\n        c->read_buffer += line_len;\n        c->read_buffer_offset -= line_len;\n        c->read_buffer_size -= line_len;\n        return MHD_HDR_LINE_READING_GOT_END_OF_HEADER;\n      }\n\n      mhd_assert (line_len < c->read_buffer_offset);\n      mhd_assert (0 != line_len);\n      mhd_assert ('\\n' == c->read_buffer[line_len - 1]);\n      next_line_char = c->read_buffer[line_len];\n      if ((' ' == next_line_char) ||\n          ('\\t' == next_line_char))\n      {\n        /* Folded line */\n        if (! allow_folded)\n        {\n          if (! process_footers)\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_OBS_FOLD);\n          else\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_OBS_FOLD_FOOTER);\n\n          return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n        }\n        /* Replace CRLF (or bare LF) character(s) with space characters.\n           See RFC 9112, Section 5.2-4 */\n        c->read_buffer[p] = ' ';\n        if ('\\r' == chr)\n          c->read_buffer[p + 1] = ' ';\n        continue; /* Re-start processing of the current character */\n      }\n      else\n      {\n        /* It is not a folded line, it's the real end of the non-empty line */\n        bool skip_line = false;\n        mhd_assert (0 != p);\n        if (c->rq.hdrs.hdr.starts_with_ws)\n        {\n          /* This is the first line and it starts with whitespace. This line\n             must be discarded completely.\n             See RFC 9112, Section 2.2-8 */\n          mhd_assert (allow_wsp_at_start);\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (c->daemon,\n                    _ (\"Whitespace-prefixed first header line \" \\\n                       \"has been skipped.\\n\"));\n#endif /* HAVE_MESSAGES */\n          skip_line = true;\n        }\n        else if (! c->rq.hdrs.hdr.name_end_found)\n        {\n          if (! allow_line_without_colon)\n          {\n            if (! process_footers)\n              transmit_error_response_static (c,\n                                              MHD_HTTP_BAD_REQUEST,\n                                              ERR_RSP_HEADER_WITHOUT_COLON);\n            else\n              transmit_error_response_static (c,\n                                              MHD_HTTP_BAD_REQUEST,\n                                              ERR_RSP_FOOTER_WITHOUT_COLON);\n\n            return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n          }\n          /* Skip broken line completely */\n          c->rq.skipped_broken_lines++;\n          skip_line = true;\n        }\n        if (skip_line)\n        {\n          /* Skip the entire line */\n          c->read_buffer += line_len;\n          c->read_buffer_offset -= line_len;\n          c->read_buffer_size -= line_len;\n          p = 0;\n          /* Reset processing state */\n          memset (&c->rq.hdrs.hdr, 0, sizeof(c->rq.hdrs.hdr));\n          /* Start processing of the next line */\n          continue;\n        }\n        else\n        {\n          /* This line should be valid header line */\n          size_t value_len;\n          mhd_assert ((0 != c->rq.hdrs.hdr.name_len) || allow_empty_name);\n\n          hdr_name->str = c->read_buffer + 0; /* The name always starts at the first character */\n          hdr_name->len = c->rq.hdrs.hdr.name_len;\n          mhd_assert (0 == hdr_name->str[hdr_name->len]);\n\n          if (0 == c->rq.hdrs.hdr.value_start)\n          {\n            c->rq.hdrs.hdr.value_start = p;\n            c->read_buffer[p] = 0;\n            value_len = 0;\n          }\n          else if (0 != c->rq.hdrs.hdr.ws_start)\n          {\n            mhd_assert (p > c->rq.hdrs.hdr.ws_start);\n            mhd_assert (c->rq.hdrs.hdr.ws_start > c->rq.hdrs.hdr.value_start);\n            c->read_buffer[c->rq.hdrs.hdr.ws_start] = 0;\n            value_len = c->rq.hdrs.hdr.ws_start - c->rq.hdrs.hdr.value_start;\n          }\n          else\n          {\n            mhd_assert (p > c->rq.hdrs.hdr.ws_start);\n            c->read_buffer[p] = 0;\n            value_len = p - c->rq.hdrs.hdr.value_start;\n          }\n          hdr_value->str = c->read_buffer + c->rq.hdrs.hdr.value_start;\n          hdr_value->len = value_len;\n          mhd_assert (0 == hdr_value->str[hdr_value->len]);\n          /* Consume the entire line */\n          c->read_buffer += line_len;\n          c->read_buffer_offset -= line_len;\n          c->read_buffer_size -= line_len;\n          return MHD_HDR_LINE_READING_GOT_HEADER;\n        }\n      }\n    }\n    else if ((' ' == chr) || ('\\t' == chr))\n    {\n      if (0 == p)\n      {\n        if (! allow_wsp_at_start)\n        {\n          if (! process_footers)\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_WSP_BEFORE_HEADER);\n          else\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_WSP_BEFORE_FOOTER);\n          return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n        }\n        c->rq.hdrs.hdr.starts_with_ws = true;\n      }\n      else if ((! c->rq.hdrs.hdr.name_end_found) &&\n               (! c->rq.hdrs.hdr.starts_with_ws))\n      {\n        /* Whitespace in header name / between header name and colon */\n        if (allow_wsp_in_name || allow_wsp_before_colon)\n        {\n          if (0 == c->rq.hdrs.hdr.ws_start)\n            c->rq.hdrs.hdr.ws_start = p;\n        }\n        else\n        {\n          if (! process_footers)\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_WSP_IN_HEADER_NAME);\n          else\n            transmit_error_response_static (c,\n                                            MHD_HTTP_BAD_REQUEST,\n                                            ERR_RSP_WSP_IN_FOOTER_NAME);\n\n          return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n        }\n      }\n      else\n      {\n        /* Whitespace before/inside/after header (field) value */\n        if (0 == c->rq.hdrs.hdr.ws_start)\n          c->rq.hdrs.hdr.ws_start = p;\n      }\n    }\n    else if (0 == chr)\n    {\n      if (! nul_as_sp)\n      {\n        if (! process_footers)\n          transmit_error_response_static (c,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          ERR_RSP_INVALID_CHR_IN_HEADER);\n        else\n          transmit_error_response_static (c,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          ERR_RSP_INVALID_CHR_IN_FOOTER);\n\n        return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n      }\n      c->read_buffer[p] = ' ';\n      continue; /* Re-start processing of the current character */\n    }\n    else\n    {\n      /* Not a whitespace, not the end of the header line */\n      mhd_assert ('\\r' != chr);\n      mhd_assert ('\\n' != chr);\n      mhd_assert ('\\0' != chr);\n      if ((! c->rq.hdrs.hdr.name_end_found) &&\n          (! c->rq.hdrs.hdr.starts_with_ws))\n      {\n        /* Processing the header (field) name */\n        if (':' == chr)\n        {\n          if (0 == c->rq.hdrs.hdr.ws_start)\n            c->rq.hdrs.hdr.name_len = p;\n          else\n          {\n            mhd_assert (allow_wsp_in_name || allow_wsp_before_colon);\n            if (! allow_wsp_before_colon)\n            {\n              if (! process_footers)\n                transmit_error_response_static (c,\n                                                MHD_HTTP_BAD_REQUEST,\n                                                ERR_RSP_WSP_IN_HEADER_NAME);\n              else\n                transmit_error_response_static (c,\n                                                MHD_HTTP_BAD_REQUEST,\n                                                ERR_RSP_WSP_IN_FOOTER_NAME);\n              return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n            }\n            c->rq.hdrs.hdr.name_len = c->rq.hdrs.hdr.ws_start;\n#ifndef MHD_FAVOR_SMALL_CODE\n            c->rq.hdrs.hdr.ws_start = 0; /* Not on whitespace anymore */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n          }\n          if ((0 == c->rq.hdrs.hdr.name_len) && ! allow_empty_name)\n          {\n            if (! process_footers)\n              transmit_error_response_static (c,\n                                              MHD_HTTP_BAD_REQUEST,\n                                              ERR_RSP_EMPTY_HEADER_NAME);\n            else\n              transmit_error_response_static (c,\n                                              MHD_HTTP_BAD_REQUEST,\n                                              ERR_RSP_EMPTY_FOOTER_NAME);\n            return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n          }\n          c->rq.hdrs.hdr.name_end_found = true;\n          c->read_buffer[c->rq.hdrs.hdr.name_len] = 0; /* Zero-terminate the name */\n        }\n        else\n        {\n          if (0 != c->rq.hdrs.hdr.ws_start)\n          {\n            /* End of the whitespace in header (field) name */\n            mhd_assert (allow_wsp_in_name || allow_wsp_before_colon);\n            if (! allow_wsp_in_name)\n            {\n              if (! process_footers)\n                transmit_error_response_static (c,\n                                                MHD_HTTP_BAD_REQUEST,\n                                                ERR_RSP_WSP_IN_HEADER_NAME);\n              else\n                transmit_error_response_static (c,\n                                                MHD_HTTP_BAD_REQUEST,\n                                                ERR_RSP_WSP_IN_FOOTER_NAME);\n\n              return MHD_HDR_LINE_READING_DATA_ERROR; /* Error in the request */\n            }\n#ifndef MHD_FAVOR_SMALL_CODE\n            c->rq.hdrs.hdr.ws_start = 0; /* Not on whitespace anymore */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n          }\n        }\n      }\n      else\n      {\n        /* Processing the header (field) value */\n        if (0 == c->rq.hdrs.hdr.value_start)\n          c->rq.hdrs.hdr.value_start = p;\n#ifndef MHD_FAVOR_SMALL_CODE\n        c->rq.hdrs.hdr.ws_start = 0; /* Not on whitespace anymore */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n      }\n#ifdef MHD_FAVOR_SMALL_CODE\n      c->rq.hdrs.hdr.ws_start = 0; /* Not on whitespace anymore */\n#endif /* MHD_FAVOR_SMALL_CODE */\n    }\n    p++;\n  }\n  c->rq.hdrs.hdr.proc_pos = p;\n  return MHD_HDR_LINE_READING_NEED_MORE_DATA; /* Not enough data yet */\n}\n...\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n...\nint\nMHD_str_equal_caseless_ (const char *str1,\n                         const char *str2)\n{\n  while (0 != (*str1))\n  {\n    const char c1 = *str1;\n    const char c2 = *str2;\n    if (charsequalcaseless (c1, c2))\n    {\n      str1++;\n      str2++;\n    }\n    else\n      return 0;\n  }\n  return 0 == (*str2);\n}\n...\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n...\nstatic void\nprocess_request_body (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t available;\n  bool instant_retry;\n  char *buffer_head;\n  const int discp_lvl = daemon->client_discipline;\n  /* Treat bare LF as the end of the line.\n     RFC 9112, section 2.2-3\n     Note: MHD never replaces bare LF with space (RFC 9110, section 5.5-5).\n     Bare LF is processed as end of the line or rejected as broken request. */\n  const bool bare_lf_as_crlf = MHD_ALLOW_BARE_LF_AS_CRLF_ (discp_lvl);\n  /* Allow \"Bad WhiteSpace\" in chunk extension.\n     RFC 9112, Section 7.1.1, Paragraph 2 */\n  const bool allow_bws = (2 < discp_lvl);\n\n  mhd_assert (NULL == connection->rp.response);\n\n  buffer_head = connection->read_buffer;\n  available = connection->read_buffer_offset;\n  do\n  {\n    size_t to_be_processed;\n    size_t left_unprocessed;\n    size_t processed_size;\n\n    instant_retry = false;\n    if (connection->rq.have_chunked_upload)\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size);\n      if ( (connection->rq.current_chunk_offset ==\n            connection->rq.current_chunk_size) &&\n           (0 != connection->rq.current_chunk_size) )\n      {\n        size_t i;\n        mhd_assert (0 != available);\n        /* skip new line at the *end* of a chunk */\n        i = 0;\n        if ( (2 <= available) &&\n             ('\\r' == buffer_head[0]) &&\n             ('\\n' == buffer_head[1]) )\n          i += 2;                        /* skip CRLF */\n        else if (bare_lf_as_crlf && ('\\n' == buffer_head[0]))\n          i++;                           /* skip bare LF */\n        else if (2 > available)\n          break;                         /* need more upload data */\n        if (0 == i)\n        {\n          /* malformed encoding */\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          REQUEST_CHUNKED_MALFORMED);\n          return;\n        }\n        available -= i;\n        buffer_head += i;\n        connection->rq.current_chunk_offset = 0;\n        connection->rq.current_chunk_size = 0;\n        if (0 == available)\n          break;\n      }\n      if (0 != connection->rq.current_chunk_size)\n      {\n        uint64_t cur_chunk_left;\n        mhd_assert (connection->rq.current_chunk_offset < \\\n                    connection->rq.current_chunk_size);\n        /* we are in the middle of a chunk, give\n           as much as possible to the client (without\n           crossing chunk boundaries) */\n        cur_chunk_left\n          = connection->rq.current_chunk_size\n            - connection->rq.current_chunk_offset;\n        if (cur_chunk_left > available)\n          to_be_processed = available;\n        else\n        {         /* cur_chunk_left <= (size_t)available */\n          to_be_processed = (size_t) cur_chunk_left;\n          if (available > to_be_processed)\n            instant_retry = true;\n        }\n      }\n      else\n      { /* Need the parse the chunk size line */\n        /** The number of found digits in the chunk size number */\n        size_t num_dig;\n        uint64_t chunk_size;\n        bool broken;\n        bool overflow;\n\n        mhd_assert (0 != available);\n\n        overflow = false;\n        chunk_size = 0; /* Mute possible compiler warning.\n                           The real value will be set later. */\n\n        num_dig = MHD_strx_to_uint64_n_ (buffer_head,\n                                         available,\n                                         &chunk_size);\n        mhd_assert (num_dig <= available);\n        if (num_dig == available)\n          continue; /* Need line delimiter */\n\n        broken = (0 == num_dig);\n        if (broken)\n          /* Check whether result is invalid due to uint64_t overflow */\n          overflow = ((('0' <= buffer_head[0]) && ('9' >= buffer_head[0])) ||\n                      (('A' <= buffer_head[0]) && ('F' >= buffer_head[0])) ||\n                      (('a' <= buffer_head[0]) && ('f' >= buffer_head[0])));\n        else\n        {\n          /**\n           * The length of the string with the number of the chunk size,\n           * including chunk extension\n           */\n          size_t chunk_size_line_len;\n\n          chunk_size_line_len = 0;\n          if ((';' == buffer_head[num_dig]) ||\n              (allow_bws &&\n               ((' ' == buffer_head[num_dig]) ||\n                ('\\t' == buffer_head[num_dig]))))\n          { /* Chunk extension */\n            size_t i;\n\n            /* Skip bad whitespaces (if any) */\n            for (i = num_dig; i < available; ++i)\n            {\n              if ((' ' != buffer_head[i]) && ('\\t' != buffer_head[i]))\n                break;\n            }\n            if (i == available)\n              break; /* need more data */\n            if (';' == buffer_head[i])\n            {\n              for (++i; i < available; ++i)\n              {\n                if ('\\n' == buffer_head[i])\n                  break;\n              }\n              if (i == available)\n                break; /* need more data */\n              mhd_assert (i > num_dig);\n              mhd_assert (1 <= i);\n              /* Found LF position */\n              if (bare_lf_as_crlf)\n                chunk_size_line_len = i; /* Don't care about CR before LF */\n              else if ('\\r' == buffer_head[i - 1])\n                chunk_size_line_len = i;\n            }\n            else\n            { /* No ';' after \"bad whitespace\" */\n              mhd_assert (allow_bws);\n              mhd_assert (0 == chunk_size_line_len);\n            }\n          }\n          else\n          {\n            mhd_assert (available >= num_dig);\n            if ((2 <= (available - num_dig)) &&\n                ('\\r' == buffer_head[num_dig]) &&\n                ('\\n' == buffer_head[num_dig + 1]))\n              chunk_size_line_len = num_dig + 2;\n            else if (bare_lf_as_crlf &&\n                     ('\\n' == buffer_head[num_dig]))\n              chunk_size_line_len = num_dig + 1;\n            else if (2 > (available - num_dig))\n              break; /* need more data */\n          }\n\n          if (0 != chunk_size_line_len)\n          { /* Valid termination of the chunk size line */\n            mhd_assert (chunk_size_line_len <= available);\n            /* Start reading payload data of the chunk */\n            connection->rq.current_chunk_offset = 0;\n            connection->rq.current_chunk_size = chunk_size;\n\n            available -= chunk_size_line_len;\n            buffer_head += chunk_size_line_len;\n\n            if (0 == chunk_size)\n            { /* The final (termination) chunk */\n              connection->rq.remaining_upload_size = 0;\n              break;\n            }\n            if (available > 0)\n              instant_retry = true;\n            continue;\n          }\n          /* Invalid chunk size line */\n        }\n\n        if (! overflow)\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          REQUEST_CHUNKED_MALFORMED);\n        else\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_CONTENT_TOO_LARGE,\n                                          REQUEST_CHUNK_TOO_LARGE);\n        return;\n      }\n    }\n    else\n    {\n      /* no chunked encoding, give all to the client */\n      mhd_assert (MHD_SIZE_UNKNOWN != connection->rq.remaining_upload_size);\n      mhd_assert (0 != connection->rq.remaining_upload_size);\n      if (connection->rq.remaining_upload_size < available)\n        to_be_processed = (size_t) connection->rq.remaining_upload_size;\n      else\n        to_be_processed = available;\n    }\n    left_unprocessed = to_be_processed;\n    connection->rq.client_aware = true;\n    connection->in_access_handler = true;\n    if (MHD_NO ==\n        daemon->default_handler (daemon->default_handler_cls,\n                                 connection,\n                                 connection->rq.url,\n                                 connection->rq.method,\n                                 connection->rq.version,\n                                 buffer_head,\n                                 &left_unprocessed,\n                                 &connection->rq.client_context))\n    {\n      connection->in_access_handler = false;\n      /* serious internal error, close connection */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Application reported internal error, \" \\\n                                 \"closing connection.\"));\n      return;\n    }\n    connection->in_access_handler = false;\n\n    if (left_unprocessed > to_be_processed)\n      MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n\n    connection->rq.some_payload_processed =\n      (left_unprocessed != to_be_processed);\n\n    if (0 != left_unprocessed)\n    {\n      instant_retry = false; /* client did not process everything */\n#ifdef HAVE_MESSAGES\n      if ((! connection->rq.some_payload_processed) &&\n          (! connection->suspended))\n      {\n        /* client did not process any upload data, complain if\n           the setup was incorrect, which may prevent us from\n           handling the rest of the request */\n        if (MHD_D_IS_USING_THREADS_ (daemon))\n          MHD_DLOG (daemon,\n                    _ (\"WARNING: Access Handler Callback has not processed \" \\\n                       \"any upload data and connection is not suspended. \" \\\n                       \"This may result in hung connection.\\n\"));\n      }\n#endif /* HAVE_MESSAGES */\n    }\n    processed_size = to_be_processed - left_unprocessed;\n    /* dh left \"processed\" bytes in buffer for next time... */\n    buffer_head += processed_size;\n    available -= processed_size;\n    if (! connection->rq.have_chunked_upload)\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN != connection->rq.remaining_upload_size);\n      connection->rq.remaining_upload_size -= processed_size;\n    }\n    else\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size);\n      connection->rq.current_chunk_offset += processed_size;\n    }\n  } while (instant_retry);\n  /* TODO: zero out reused memory region */\n  if ( (available > 0) &&\n       (buffer_head != connection->read_buffer) )\n    memmove (connection->read_buffer,\n             buffer_head,\n             available);\n  else\n    mhd_assert ((0 == available) || \\\n                (connection->read_buffer_offset == available));\n  connection->read_buffer_offset = available;\n}\n...\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n...\nstatic void\nsend_redirect_fixed_rq_target (struct MHD_Connection *c)\n{\n  char *b;\n  size_t fixed_uri_len;\n  size_t i;\n  size_t o;\n  char *hdr_name;\n  size_t hdr_name_len;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (0 != c->rq.hdrs.rq_line.num_ws_in_uri);\n  mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\\n              c->rq.req_target_len);\n  fixed_uri_len = c->rq.req_target_len\n                  + 2 * c->rq.hdrs.rq_line.num_ws_in_uri;\n  if ( (fixed_uri_len + 200 > c->daemon->pool_size) ||\n       (fixed_uri_len > MHD_MAX_FIXED_URI_LEN) ||\n       (NULL == (b = malloc (fixed_uri_len + 1))) )\n  {\n    connection_close_error (c,\n                            _ (\"The request has whitespace character is \" \\\n                               \"in the URI and the URI is too large to \" \\\n                               \"send automatic redirect to fixed URI.\\n\"));\n    return;\n  }\n  i = 0;\n  o = 0;\n\n  do\n  {\n    const char chr = c->rq.hdrs.rq_line.rq_tgt[i++];\n\n    mhd_assert ('\\r' != chr); /* Replaced during request line parsing */\n    mhd_assert ('\\n' != chr); /* Rejected during request line parsing */\n    mhd_assert (0 != chr); /* Rejected during request line parsing */\n    switch (chr)\n    {\n    case ' ':\n      b[o++] = '%';\n      b[o++] = '2';\n      b[o++] = '0';\n      break;\n    case '\\t':\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = '9';\n      break;\n    case 0x0B:   /* VT (vertical tab) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'B';\n      break;\n    case 0x0C:   /* FF (form feed) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'C';\n      break;\n    default:\n      b[o++] = chr;\n      break;\n    }\n  } while (i < c->rq.req_target_len);\n  mhd_assert (fixed_uri_len == o);\n  b[o] = 0; /* Zero-terminate the result */\n\n  hdr_name_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_LOCATION);\n  hdr_name = malloc (hdr_name_len + 1);\n  if (NULL != hdr_name)\n  {\n    memcpy (hdr_name,\n            MHD_HTTP_HEADER_LOCATION,\n            hdr_name_len + 1);\n    /* hdr_name and b are free()d within this call */\n    transmit_error_response_header (c,\n                                    MHD_HTTP_MOVED_PERMANENTLY,\n                                    RQ_TARGET_INVALID_CHAR,\n                                    hdr_name,\n                                    hdr_name_len,\n                                    b,\n                                    o);\n    return;\n  }\n  free (b);\n  connection_close_error (c,\n                          _ (\"The request has whitespace character is in the \" \\\n                             \"URI.\\n\"));\n  return;\n}\n...\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n...\n_MHD_EXTERN const char *\nMHD_get_reason_phrase_for (unsigned int code)\n{\n  if ( (code >= 100) &&\n       (code < 600) &&\n       (reasons[code / 100].max > (code % 100)) )\n    return reasons[code / 100].data[code % 100].str;\n  return \"Unknown\";\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided code and did not find any direct use of the standard library function memcmp. String comparisons in the supplied fragments are performed either by character-by-character loops (e.g. MHD_str_equal_caseless_), by explicit character comparisons (e.g. checking for '\\r', '\\n', space, etc.), or by bounded comparison helpers (e.g. MHD_str_equal_caseless_bin_n_) which take an explicit length. The code uses memcpy/memmove/memset for copying/manipulating buffers, not memcmp for comparison. Therefore there are no code fragments in the supplied sources that need investigation for Rule 21.14. (Note: implementations of functions not shown here\u2014if any such as MHD_str_equal_caseless_bin_n_ are defined elsewhere\u2014should be checked only if their bodies use memcmp to compare null-terminated strings; no such bodies were provided.)"
}