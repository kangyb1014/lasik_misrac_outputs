{
  "user_message": "Target function code is:\n```c\nsize_t\nMHD_str_pct_decode_lenient_n_ (const char *pct_encoded,\n                               size_t pct_encoded_len,\n                               char *decoded,\n                               size_t buf_size,\n                               bool *broken_encoding)\n{\n  size_t r;\n  size_t w;\n  r = 0;\n  w = 0;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (buf_size >= pct_encoded_len)\n  {\n    while (r < pct_encoded_len)\n    {\n      const char chr = pct_encoded[r];\n      if ('%' == chr)\n      {\n        if (2 > pct_encoded_len - r)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          decoded[w] = chr; /* Copy \"as is\" */\n        }\n        else\n        {\n          const int h = toxdigitvalue (pct_encoded[++r]);\n          const int l = toxdigitvalue (pct_encoded[++r]);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            r -= 2;\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            decoded[w] = chr; /* Copy \"as is\" */\n          }\n          else\n          {\n            out =\n              (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                               | ((uint8_t) ((unsigned int) l)));\n            decoded[w] = (char) out;\n          }\n        }\n      }\n      else\n        decoded[w] = chr;\n      ++r;\n      ++w;\n    }\n    return w;\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n  while (r < pct_encoded_len)\n  {\n    const char chr = pct_encoded[r];\n    if (w >= buf_size)\n      return 0;\n    if ('%' == chr)\n    {\n      if (2 > pct_encoded_len - r)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        decoded[w] = chr; /* Copy \"as is\" */\n      }\n      else\n      {\n        const int h = toxdigitvalue (pct_encoded[++r]);\n        const int l = toxdigitvalue (pct_encoded[++r]);\n        if ((0 > h) || (0 > l))\n        {\n          r -= 2;\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          decoded[w] = chr; /* Copy \"as is\" */\n        }\n        else\n        {\n          unsigned char out;\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          decoded[w] = (char) out;\n        }\n      }\n    }\n    else\n      decoded[w] = chr;\n    ++r;\n    ++w;\n  }\n  return w;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_str_pct_decode_lenient_n_': {'callees': ['toxdigitvalue'], 'callers': []}, 'toxdigitvalue': {'callees': [], 'callers': ['MHD_strx_to_uint32_', 'MHD_strx_to_uint32_n_', 'MHD_strx_to_uint64_', 'MHD_strx_to_uint64_n_', 'MHD_hex_to_bin', 'MHD_str_pct_decode_strict_n_', 'MHD_str_pct_decode_lenient_n_', 'MHD_str_pct_decode_in_place_strict_', 'MHD_str_pct_decode_in_place_lenient_']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "toxdigitvalue",
    "MHD_FAVOR_SMALL_CODE",
    "NULL",
    "size_t",
    "bool",
    "uint8_t"
  ],
  "explanation": "toxdigitvalue: needed to see its declaration/signature (or whether it is a macro) and to confirm it does not modify any of the target function's parameters. The call sites pass a single char/int value, but if toxdigitvalue were a macro/function with side\u2011effects that expect pointer arguments it could affect the analysis.\\nMHD_FAVOR_SMALL_CODE: the preprocessor macro controls which code path is compiled. To determine whether any compiled variant of the function assigns to its parameter variables you must know which branch is active.\\nNULL: used in tests (NULL != broken_encoding) and therefore its definition/semantics are needed to reason about whether the pointer parameter broken_encoding itself or the object it points to could be affected.\\nsize_t: the typedef of size_t is required to ensure that any apparent modifications (e.g. to buf_size or pct_encoded_len) are to local copies or to parameter objects; knowing the exact type rules helps confirm whether increments/assignments would modify parameters themselves.\\nbool: the typedef (usually from <stdbool.h>) is required to determine the type of *broken_encoding and whether stores like *broken_encoding = true modify the pointer parameter itself (they modify the pointee, which is allowed) versus the pointer variable (which would be a violation).\\nuint8_t: used in casts when forming the decoded byte; its declaration/width is relevant to ensure these casts don't involve hidden modifications to parameter objects.\\n\nThese symbols are the minimal additional declarations/macros needed to analyze whether the function body (in all compiled variants) assigns to the parameter variables themselves (which would violate the MISRA rule) versus only modifying objects pointed to by pointer parameters (which is permitted)."
}