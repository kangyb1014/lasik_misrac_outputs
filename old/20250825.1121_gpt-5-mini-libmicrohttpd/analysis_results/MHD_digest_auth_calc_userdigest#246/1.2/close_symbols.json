{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'digest_init_one_time': {'callees': ['MHD_MD5_init', 'MHD_SHA256_init', 'MHD_SHA512_256_init'], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'get_base_digest_algo': {'callees': [], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'digest_get_size': {'callees': [], 'callers': ['calculate_nonce', 'calculate_add_nonce', 'calculate_add_nonce_with_retry', 'MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'add_new_user_entry': {'callees': ['MHD_digest_auth_calc_userhash', 'MHD_digest_auth_calc_userdigest'], 'callers': ['add_new_users']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_DIGEST_HAS_EXT_ERROR",
    "struct DigestAlgorithm",
    "enum MHD_Result",
    "enum MHD_DigestAuthAlgo3",
    "digest_init_one_time (declaration)",
    "get_base_digest_algo (declaration)",
    "digest_get_size (declaration)",
    "calc_userdigest (declaration)",
    "digest_deinit (declaration)",
    "digest_ext_error (declaration)"
  ],
  "explanation": "For checking MISRA 'no language extensions' you must inspect any macros, type definitions, and function declarations that could hide compiler-specific extensions (attributes, __declspec, inline variants, calling\u2011convention keywords, asm, builtin types, etc.). _MHD_EXTERN: macro used on the function; may expand to compiler-specific storage/attribute extensions. MHD_DIGEST_HAS_EXT_ERROR: conditional compilation flag that enables use of digest_ext_error; its definition (or absence) affects whether extension-bearing code is compiled. struct DigestAlgorithm: the struct definition may use compiler extensions (packed, aligned, anonymous unions/structs, bit\u2011field extensions). enum MHD_Result and enum MHD_DigestAuthAlgo3: their definitions may include nonstandard enum extensions or attributes. Declarations of digest_init_one_time, get_base_digest_algo, digest_get_size, calc_userdigest, digest_deinit, and digest_ext_error: these prototypes may contain compiler extensions (e.g., __attribute__, __stdcall, __cdecl, __declspec, inline variants, asm labels, or nonstandard parameter annotations) that the target function relies on; you must inspect them to determine if the target uses any language extensions indirectly."
}