{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'digest_init_one_time': {'callees': ['MHD_MD5_init', 'MHD_SHA256_init', 'MHD_SHA512_256_init'], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'get_base_digest_algo': {'callees': [], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'digest_get_size': {'callees': [], 'callers': ['calculate_nonce', 'calculate_add_nonce', 'calculate_add_nonce_with_retry', 'MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'add_new_user_entry': {'callees': ['MHD_digest_auth_calc_userhash', 'MHD_digest_auth_calc_userdigest'], 'callers': ['add_new_users']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "digest_init_one_time",
    "get_base_digest_algo",
    "digest_get_size",
    "calc_userdigest",
    "digest_update",
    "digest_update_with_colon",
    "digest_update_str",
    "digest_calc_hash",
    "digest_deinit",
    "digest_ext_error",
    "strlen",
    "MHD_DIGEST_HAS_EXT_ERROR"
  ],
  "explanation": "For MISRA C rule checking (function parameters shall not be modified) we must inspect any symbol that could be implemented as a macro or expand into code that assigns to the target function's parameter variables (algo3, username, realm, password, userdigest_bin, bin_buf_size). Brief reasons for each symbol:\n\n- digest_init_one_time: Called with get_base_digest_algo(algo3). If this is a macro (or inlined code) it could perform assignments using caller identifiers \u2014 must confirm it does not assign to any parameter.\n- get_base_digest_algo: Called with the parameter algo3. If implemented as a macro it could expand to code that assigns to the caller's algo3 identifier; verify it is a pure expression/function and does not modify the parameter variable.\n- digest_get_size: Used to compare with bin_buf_size. If a macro it could expand to code that assigns to bin_buf_size (or other parameters) \u2014 include to verify no parameter modification.\n- calc_userdigest: Receives username, realm, password and userdigest_bin identifiers. If this is a macro (rather than a true function) it could contain assignments to those identifiers in the caller scope \u2014 must inspect its definition to ensure it does not modify any function parameter variables.\n- digest_update, digest_update_with_colon, digest_update_str, digest_calc_hash: Called (directly or indirectly) by calc_userdigest. If any of these are macros or inline expansions used inside calc_userdigest's macro expansion, they could end up assigning to caller identifiers; include to allow full inspection of any macro expansions.\n- digest_deinit: Called after the main block; verify it is not a macro that could modify parameter variables when expanded in caller scope.\n- digest_ext_error: Used under the conditional MHD_DIGEST_HAS_EXT_ERROR; include to inspect its definition (could be macro) and to ensure the conditional/expansion does not modify parameters.\n- strlen: Standard C library function is usually safe, but some platforms implement it as a macro; include to confirm it does not expand to code that assigns to the username/realm identifiers.\n- MHD_DIGEST_HAS_EXT_ERROR: The conditional macro controls whether digest_ext_error is evaluated; include so the analyzer can determine the compiled code path and examine digest_ext_error only when applicable.\n\nNote: The target function itself does not contain explicit assignments to its parameter variables. The primary risk for violating the MISRA rule is macro-based callees (or other inlined expansions) that expand in the caller's scope and could assign to the parameter identifiers. The listed symbols are the minimal set required to inspect those expansions and ensure no parameter identifier is modified."
}