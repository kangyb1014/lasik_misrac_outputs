{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_footers_no_space:\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nhandle_req_footers_no_space (struct MHD_Connection *c,\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter 'struct MHD_Connection *c' is not const-qualified even though the function body only reads from it (mhd_assert(c->rq.have_chunked_upload)) and forwards it to transmit_error_response_static. If handle_req_footers_no_space does not modify the pointed-to object, the parameter should be declared as 'const struct MHD_Connection *c' to comply with MISRA C 2023 Rule 8.13. (If transmit_error_response_static requires a non-const pointer, that would be a separate issue; based on the shown fragment this is a violation.)"
}