{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_footers_no_space:\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntransmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not prove a violation. If transmit_error_response_static is properly declared to take a const char * for the message (e.g. void transmit_error_response_static(struct MHD_Connection *c, int status, const char *msg)), there is no MISRA 8.13 violation. A violation would occur if the function prototype uses a non-const pointer for the message (e.g. char *msg) while the passed argument is a string literal or otherwise const-qualified (ERR_MSG_REQUEST_FOOTER_TOO_BIG). In that case the message parameter should be const char * to satisfy Rule 8.13. Note that the connection pointer c may legitimately be non-const if the function modifies the connection state."
}