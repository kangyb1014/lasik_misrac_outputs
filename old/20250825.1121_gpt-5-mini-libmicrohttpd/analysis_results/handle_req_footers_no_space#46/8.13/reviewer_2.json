{
  "user_message": "An agent A claimed that the following handle_req_footers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_footers_no_space.\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Connection *c' is not const-qualified even though the function body only reads from it (mhd_assert(c->rq.have_chunked_upload)) and forwards it to transmit_error_response_static. If handle_req_footers_no_space does not modify the pointed-to object, the parameter should be declared as 'const struct MHD_Connection *c' to comply with MISRA C 2023 Rule 8.13. (If transmit_error_response_static requires a non-const pointer, that would be a separate issue; based on the shown fragment this is a violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be shown to be correct from the provided fragment alone. Rule 8.13 says a pointer should point to a const-qualified type whenever possible, but \u201cwhenever possible\u201d depends on the wider usage and the signatures of functions that receive the pointer. In this function the pointer is only read (mhd_assert reads c->rq.have_chunked_upload), however handle_req_footers_no_space forwards c to transmit_error_response_static. If transmit_error_response_static (or other callers/ APIs/ callback expectations) requires a non-const struct MHD_Connection * then handle_req_footers_no_space must also accept a non-const pointer; changing it to const would either be incorrect or require casts. Without examining the prototype of transmit_error_response_static and other uses of this function, you cannot conclude a Rule 8.13 violation. Therefore the report as stated is not proven correct."
}