{
  "user_message": "An agent A claimed that the following handle_req_footers_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_footers_no_space.\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'c' is declared as 'struct MHD_Connection *c' but in this function it is only read (c->rq.have_chunked_upload). The pointer could be declared 'const struct MHD_Connection *c' to indicate no modification, so the current use violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct. MISRA C 2023 Rule 8.13 says a pointer parameter should be to a const-qualified type when that is feasible. Although handle_req_footers_no_space only reads c (c->rq.have_chunked_upload) in its own body, it immediately passes c to transmit_error_response_static(c, ...). That callee expects a non-const pointer (and very likely may modify the connection or its state), so it is not possible to change this parameter to const without changing the API/signature of the callee. Therefore the pointer cannot be made const \u201cwhenever possible\u201d in this context, and there is no violation of Rule 8.13 in the shown code."
}