{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of handle_req_footers_no_space:\n```c\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function handle_req_footers_no_space:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE 431\n...\n#define ERR_MSG_REQUEST_FOOTER_TOO_BIG \"<html>\"\"<head><title>Request too big</title></head>\"\"<body><p>The total size of the request headers, which includes the \"\"request target, the request field lines and the chunked trailer \"\"section exceeds the memory constraints of this web server.</p>\"\"<p>The request could be re-tried with a shorter chunked trailer \"\"section, shorter field lines, a shorter request target or \"\"a shorter request method token.</p></body>\"\"</html>\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code. Specifically:\n\n- The function definition and parameter declarations use only standard C syntax (static storage-class, pointer to struct, const qualifier, size_t).\n- The (void) add_footer and (void) add_footer_size casts are the standard idiom to silence unused-parameter warnings; this is not a language extension.\n- The mhd_assert macro expands to ((void)0), which is standard preprocessor/macro usage and not an extension.\n- The macro definitions (MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE and ERR_MSG_REQUEST_FOOTER_TOO_BIG) use ordinary #define and adjacent string literal concatenation; adjacent string literal concatenation is standard ISO C, not a compiler extension.\n- There are no uses of known compiler-specific extensions such as __attribute__, __asm, __builtin_*, typeof, statement expressions, zero-length arrays, unnamed struct/union extensions, variable-length array extensions beyond C standard, inline assembler, or other vendor-specific keywords.\n\nBecause none of the above constructs are compiler-specific extensions, there are no code fragments that need to be reported for investigation under MISRA C 2023 Rule 1.2."
}