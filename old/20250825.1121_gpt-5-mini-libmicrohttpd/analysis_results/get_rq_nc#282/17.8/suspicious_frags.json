{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_nc:\n```c\nstatic enum MHD_GetRqNCResult\nget_rq_nc (const struct MHD_RqDAuth *params,\n           uint32_t *nc)\n{\n  const struct MHD_RqDAuthParam *const nc_param =\n    &params->nc;\n  char unq[16];\n  const char *val;\n  size_t val_len;\n  size_t res;\n  uint64_t nc_val;\n\n  if (NULL == nc_param->value.str)\n    return MHD_GET_RQ_NC_NONE;\n\n  if (0 == nc_param->value.len)\n    return MHD_GET_RQ_NC_BROKEN;\n\n  if (! nc_param->quoted)\n  {\n    val = nc_param->value.str;\n    val_len = nc_param->value.len;\n  }\n  else\n  {\n    /* Actually no backslashes must be used in 'nc' */\n    if (sizeof(unq) < params->nc.value.len)\n      return MHD_GET_RQ_NC_TOO_LONG;\n    val_len = MHD_str_unquote (nc_param->value.str, nc_param->value.len, unq);\n    if (0 == val_len)\n      return MHD_GET_RQ_NC_BROKEN;\n    val = unq;\n  }\n\n  res = MHD_strx_to_uint64_n_ (val, val_len, &nc_val);\n  if (0 == res)\n  {\n    const char f = val[0];\n    if ( (('9' >= f) && ('0' <= f)) ||\n         (('F' >= f) && ('A' <= f)) ||\n         (('a' <= f) && ('f' >= f)) )\n      return MHD_GET_RQ_NC_TOO_LARGE;\n    else\n      return MHD_GET_RQ_NC_BROKEN;\n  }\n  if (val_len != res)\n    return MHD_GET_RQ_NC_BROKEN;\n  if (UINT32_MAX < nc_val)\n    return MHD_GET_RQ_NC_TOO_LARGE;\n  *nc = (uint32_t) nc_val;\n  return MHD_GET_RQ_NC_VALID;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No fragments modify a function parameter (the pointer itself). The only write to a parameter-related object is the assignment '*nc = (uint32_t) nc_val;', which modifies the object pointed to by the pointer parameter (allowed by the rule). There are no assignments to or arithmetic on the parameters 'params' or 'nc' themselves (no 'params = ...', 'nc = ...', 'nc++', etc.). The local pointer 'nc_param' is declared with a const pointer-to-const type and is not modified. Therefore no code fragments require investigation for Rule 17.8."
}