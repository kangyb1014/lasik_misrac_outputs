{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of connection_check_timedout:\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The format string passed via _(\"...\") is used where a non-const pointer parameter may be expected (e.g. if MHD_DLOG is declared to take char *fmt rather than const char *fmt). In that case a pointer to modifiable char is used where it should be a pointer to a const-qualified type (string literals / translated strings should be treated as const). This also applies if the _() macro/gettext returns a non-const char *; the logging API should use const char * for format strings. Change the logging prototype to accept const char * (or ensure the string expression is const-qualified) to conform with MISRA C 2023 Rule 8.13."
}