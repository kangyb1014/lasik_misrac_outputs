{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ws_send_frame:\n```c\nstatic ssize_t\nws_send_frame (MHD_socket sock, const char *msg, size_t length)\n{\n  unsigned char *response;\n  unsigned char frame[10];\n  unsigned char idx_first_rdata;\n  size_t idx_response;\n  size_t output;\n  MHD_socket isock;\n  size_t i;\n\n  frame[0] = (WS_FIN | WS_OPCODE_TEXT_FRAME);\n  if (length <= 125)\n  {\n    frame[1] = length & 0x7F;\n    idx_first_rdata = 2;\n  }\n#if SIZEOF_SIZE_T > 4\n  else if (0xFFFF < length)\n  {\n    frame[1] = 127;\n    frame[2] = (unsigned char) ((length >> 56) & 0xFF);\n    frame[3] = (unsigned char) ((length >> 48) & 0xFF);\n    frame[4] = (unsigned char) ((length >> 40) & 0xFF);\n    frame[5] = (unsigned char) ((length >> 32) & 0xFF);\n    frame[6] = (unsigned char) ((length >> 24) & 0xFF);\n    frame[7] = (unsigned char) ((length >> 16) & 0xFF);\n    frame[8] = (unsigned char) ((length >> 8) & 0xFF);\n    frame[9] = (unsigned char) (length & 0xFF);\n    idx_first_rdata = 10;\n  }\n#endif /* SIZEOF_SIZE_T > 4 */\n  else\n  {\n    frame[1] = 126;\n    frame[2] = (length >> 8) & 0xFF;\n    frame[3] = length & 0xFF;\n    idx_first_rdata = 4;\n  }\n  idx_response = 0;\n  response = malloc (idx_first_rdata + length + 1);\n  if (NULL == response)\n  {\n    return -1;\n  }\n  for (i = 0; i < idx_first_rdata; i++)\n  {\n    response[i] = frame[i];\n    idx_response++;\n  }\n  for (i = 0; i < length; i++)\n  {\n    response[idx_response] = (unsigned char) msg[i];\n    idx_response++;\n  }\n  response[idx_response] = '\\0';\n  output = 0;\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    isock = CLIENT_SOCKS[i];\n    if ((isock != MHD_INVALID_SOCKET) && (isock != sock))\n    {\n      output += send_all (isock, response, idx_response);\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (response);\n  return (ssize_t) output;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_send_frame:\nstatic size_t\nsend_all (MHD_socket sock, const unsigned char *buf, size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n    ret = send (sock, (const void *) &buf[off], len - off, 0);\n#else  /* Native W32 */\n    ret = send (sock, (const void *) &buf[off], (int) (len - off), 0);\n#endif /* Native W32 */\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n    {\n      break;\n    }\n  }\n  return off;\n}\n...\nstatic void\nmake_blocking (MHD_socket fd)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (fd, F_GETFL);\n  if (-1 == flags)\n    abort ();\n  if ((flags & ~O_NONBLOCK) != flags)\n    if (-1 == fcntl (fd, F_SETFL, flags & ~O_NONBLOCK))\n      abort ();\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 0;\n\n  if (0 != ioctlsocket (fd, (int) FIONBIO, &flags))\n    abort ();\n#endif /* MHD_WINSOCK_SOCKETS */\n}\n...\nstatic MHD_socket CLIENT_SOCKS[MAX_CLIENTS]\n...\n#define MAX_CLIENTS 10\n...\n#define MHD_INVALID_SOCKET (-1)\n...\nstatic pthread_mutex_t MUTEX = PTHREAD_MUTEX_INITIALIZER\n...\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define SIZEOF_SIZE_T 8\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nresponse[idx_response] = '\\0';\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The assignment response[idx_response] = '\\0'; writes a terminating NUL into the allocated buffer but that byte is never used: send_all is called with idx_response (the length excluding the NUL), no other code inspects response before it is freed, and the function returns after free. Removing this write would not change program behaviour, so the operation is dead code and violates MISRA C 2023 Rule 2.2."
}