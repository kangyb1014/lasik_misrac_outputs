{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_send_frame:\n```c\nstatic ssize_t\nws_send_frame (MHD_socket sock, const char *msg, size_t length)\n{\n  unsigned char *response;\n  unsigned char frame[10];\n  unsigned char idx_first_rdata;\n  size_t idx_response;\n  size_t output;\n  MHD_socket isock;\n  size_t i;\n\n  frame[0] = (WS_FIN | WS_OPCODE_TEXT_FRAME);\n  if (length <= 125)\n  {\n    frame[1] = length & 0x7F;\n    idx_first_rdata = 2;\n  }\n#if SIZEOF_SIZE_T > 4\n  else if (0xFFFF < length)\n  {\n    frame[1] = 127;\n    frame[2] = (unsigned char) ((length >> 56) & 0xFF);\n    frame[3] = (unsigned char) ((length >> 48) & 0xFF);\n    frame[4] = (unsigned char) ((length >> 40) & 0xFF);\n    frame[5] = (unsigned char) ((length >> 32) & 0xFF);\n    frame[6] = (unsigned char) ((length >> 24) & 0xFF);\n    frame[7] = (unsigned char) ((length >> 16) & 0xFF);\n    frame[8] = (unsigned char) ((length >> 8) & 0xFF);\n    frame[9] = (unsigned char) (length & 0xFF);\n    idx_first_rdata = 10;\n  }\n#endif /* SIZEOF_SIZE_T > 4 */\n  else\n  {\n    frame[1] = 126;\n    frame[2] = (length >> 8) & 0xFF;\n    frame[3] = length & 0xFF;\n    idx_first_rdata = 4;\n  }\n  idx_response = 0;\n  response = malloc (idx_first_rdata + length + 1);\n  if (NULL == response)\n  {\n    return -1;\n  }\n  for (i = 0; i < idx_first_rdata; i++)\n  {\n    response[i] = frame[i];\n    idx_response++;\n  }\n  for (i = 0; i < length; i++)\n  {\n    response[idx_response] = (unsigned char) msg[i];\n    idx_response++;\n  }\n  response[idx_response] = '\\0';\n  output = 0;\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    isock = CLIENT_SOCKS[i];\n    if ((isock != MHD_INVALID_SOCKET) && (isock != sock))\n    {\n      output += send_all (isock, response, idx_response);\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (response);\n  return (ssize_t) output;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ws_send_frame:\n#define MAX_CLIENTS 10\n...\nstatic MHD_socket CLIENT_SOCKS[MAX_CLIENTS]\n...\n#define MHD_INVALID_SOCKET (-1)\n...\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define SIZEOF_SIZE_T 8\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no controlling expressions that are evidently invariant and thus no fragments that require investigation for MISRA C 2023 Rule 14.3. Rationale for not reporting each controlling expression below:\n\n- if (length <= 125) / else if (0xFFFF < length) / else: these are normal runtime conditionals depending on the parameter length (and compiled conditionally with #if SIZEOF_SIZE_T > 4). They are not compile-time constant/invariant expressions.\n- idx_first_rdata assignments (2, 10, 4): these are constant assignments, but they are not loop controlling expressions by themselves; the loops that use them have i as the loop index, so the overall controlling expressions vary as i changes.\n- for (i = 0; i < idx_first_rdata; i++): the controlling expression depends on i, which is modified each iteration \u2014 not invariant.\n- for (i = 0; i < length; i++): likewise, i changes each iteration; the expression is not invariant.\n- for (i = 0; i < MAX_CLIENTS; i++): MAX_CLIENTS is a constant but the expression varies because i changes each iteration.\n- if (NULL == response): response is a runtime result of malloc and not a compile-time constant; the condition is not invariant.\n- if (0 != pthread_mutex_lock (&MUTEX)) and if (0 != pthread_mutex_unlock (&MUTEX)): both rely on function return values at runtime; not invariant.\n- if ((isock != MHD_INVALID_SOCKET) && (isock != sock)): isock varies inside the client loop (assigned from CLIENT_SOCKS[i]) and sock is a function parameter; the expression is not invariant across iterations.\n- The preprocessor conditional #if SIZEOF_SIZE_T > 4 is a compile-time inclusion directive and not a C controlling expression governed by Rule 14.3's intent regarding runtime loop/branch invariance.\n\nNo do-while or explicit infinite-loop constructs are present; the allowed exceptions to Rule 14.3 therefore do not apply here. Given the above, there are no controlling expressions in this function that appear to be invariant and warrant further investigation under Rule 14.3."
}