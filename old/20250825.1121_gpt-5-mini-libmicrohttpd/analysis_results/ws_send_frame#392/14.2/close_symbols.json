{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nws_send_frame (MHD_socket sock, const char *msg, size_t length)\n{\n  unsigned char *response;\n  unsigned char frame[10];\n  unsigned char idx_first_rdata;\n  size_t idx_response;\n  size_t output;\n  MHD_socket isock;\n  size_t i;\n\n  frame[0] = (WS_FIN | WS_OPCODE_TEXT_FRAME);\n  if (length <= 125)\n  {\n    frame[1] = length & 0x7F;\n    idx_first_rdata = 2;\n  }\n#if SIZEOF_SIZE_T > 4\n  else if (0xFFFF < length)\n  {\n    frame[1] = 127;\n    frame[2] = (unsigned char) ((length >> 56) & 0xFF);\n    frame[3] = (unsigned char) ((length >> 48) & 0xFF);\n    frame[4] = (unsigned char) ((length >> 40) & 0xFF);\n    frame[5] = (unsigned char) ((length >> 32) & 0xFF);\n    frame[6] = (unsigned char) ((length >> 24) & 0xFF);\n    frame[7] = (unsigned char) ((length >> 16) & 0xFF);\n    frame[8] = (unsigned char) ((length >> 8) & 0xFF);\n    frame[9] = (unsigned char) (length & 0xFF);\n    idx_first_rdata = 10;\n  }\n#endif /* SIZEOF_SIZE_T > 4 */\n  else\n  {\n    frame[1] = 126;\n    frame[2] = (length >> 8) & 0xFF;\n    frame[3] = length & 0xFF;\n    idx_first_rdata = 4;\n  }\n  idx_response = 0;\n  response = malloc (idx_first_rdata + length + 1);\n  if (NULL == response)\n  {\n    return -1;\n  }\n  for (i = 0; i < idx_first_rdata; i++)\n  {\n    response[i] = frame[i];\n    idx_response++;\n  }\n  for (i = 0; i < length; i++)\n  {\n    response[idx_response] = (unsigned char) msg[i];\n    idx_response++;\n  }\n  response[idx_response] = '\\0';\n  output = 0;\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    isock = CLIENT_SOCKS[i];\n    if ((isock != MHD_INVALID_SOCKET) && (isock != sock))\n    {\n      output += send_all (isock, response, idx_response);\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (response);\n  return (ssize_t) output;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'ws_send_frame': {'callees': ['send_all'], 'callers': ['run_usock']}, 'send_all': {'callees': ['make_blocking'], 'callers': ['run_usock', 'ws_send_frame']}, 'run_usock': {'callees': ['make_blocking', 'send_all', 'MHD_upgrade_action', 'ws_receive_frame', 'ws_send_frame'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "send_all",
    "make_blocking",
    "CLIENT_SOCKS",
    "MAX_CLIENTS",
    "MHD_INVALID_SOCKET",
    "MUTEX",
    "SIZEOF_SIZE_T"
  ],
  "explanation": "send_all: The third for-loop calls send_all() inside its body. MISRA requires the behaviour of called functions to be considered part of the loop body \u2014 we must inspect send_all's implementation and prototype to ensure it does not modify the loop counter (i) or any object used in the loop conditions (e.g. MAX_CLIENTS) or otherwise create persistent side-effects that would violate the second/third-clause restrictions. make_blocking: send_all calls make_blocking (per the static call graph). make_blocking must be examined as part of send_all\u2019s behaviour (and thus the loop body) to ensure it does not modify loop-control objects or the loop counter. CLIENT_SOCKS: The loop body reads CLIENT_SOCKS[i] and send_all or other called code could potentially modify the CLIENT_SOCKS array (or its elements). We must know whether CLIENT_SOCKS is written to by any called code, because the second clause must not use objects that are modified in the loop body. MAX_CLIENTS: The loop condition uses MAX_CLIENTS (i < MAX_CLIENTS). We must know whether MAX_CLIENTS is a compile-time constant or a mutable object and whether any called function could modify it; if it can be modified in the loop body that would violate the rule. MHD_INVALID_SOCKET: Used in the conditional inside the loop; if any called function can change this value (or the semantics of sockets), it affects whether the loop condition/clauses use objects modified by the body. Confirming its immutability is necessary. MUTEX: The loop is executed while a mutex (MUTEX) is held. Although lock/unlock are outside the for header, the held mutex interacts with called functions (send_all/make_blocking) and could allow or prevent modifications to shared objects used in loop conditions; inspect MUTEX and its use to ensure no prohibited modifications occur while the loop executes. SIZEOF_SIZE_T: The code contains a conditional compilation branch (#if SIZEOF_SIZE_T > 4) that changes frame layout and idx_first_rdata; knowing the value used at build time is required to determine the exact compiled code and thereby to verify the correctness/well-formedness of the two earlier for-loops (which use idx_first_rdata and length in their conditions)."
}