{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_close_:\n```c\nvoid\nMHD_connection_close_ (struct MHD_Connection *connection,\n                       enum MHD_RequestTerminationCode termination_code)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  struct MHD_Response *resp = connection->rp.response;\n\n  mhd_assert (! connection->suspended);\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n  if ( (NULL != daemon->notify_completed) &&\n       (connection->rq.client_aware) )\n    daemon->notify_completed (daemon->notify_completed_cls,\n                              connection,\n                              &connection->rq.client_context,\n                              termination_code);\n  connection->rq.client_aware = false;\n  if (NULL != resp)\n  {\n    connection->rp.response = NULL;\n    MHD_destroy_response (resp);\n  }\n  if (NULL != connection->pool)\n  {\n    MHD_pool_destroy (connection->pool);\n    connection->pool = NULL;\n  }\n\n  MHD_connection_mark_closed_ (connection);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided function for use of compiler-specific language extensions (e.g. GCC/Clang/MSVC extensions such as __attribute__, __asm, __typeof__, statement-expressions ({ ... }), nested functions, __extension__, __builtin_*, inline assembly, MSVC-specific keywords, or other non-standard syntactic constructs). None are present in the visible code:\n\n- Function signature, struct and enum usage, local variable declarations, pointer dereferences, NULL checks, and calls to other functions are all standard C constructs.\n- The backslash used in the mhd_assert line is a standard preprocessor line-continuation, not a compiler extension.\n- The use of the identifier false implies use of the standard C boolean macro from <stdbool.h> (C99), which is a standard language feature rather than a compiler extension.\n- Preprocessor conditionals (#ifdef/#endif) and comments are standard C.\n\nNote: macros and functions invoked here (e.g. mhd_assert, MHD_D_IS_USING_THREADS_, MHD_thread_handle_ID_is_current_thread_, MHD_destroy_response, MHD_pool_destroy) could themselves be defined elsewhere and might use compiler-specific extensions internally. Those definitions are not present in the fragment; therefore they cannot be flagged here. If you want rule-1.2 verification of the whole project, inspect the definitions of those macros/functions for compiler-specific extensions."
}