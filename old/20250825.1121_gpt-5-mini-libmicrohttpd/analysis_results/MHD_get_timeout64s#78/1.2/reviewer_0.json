{
  "user_message": "An agent A claimed that the following MHD_get_timeout64s code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_timeout64s.\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses the GCC/Clang compiler-specific attribute syntax via the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\")))extern. The __attribute__((...)) construct is a compiler language extension (documented by those compilers), so Rule 1.2 is violated.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_timeout64s:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The macro _MHD_EXTERN expands to the GCC/Clang-specific __attribute__((visibility(\"default\"))) extension followed by extern. The __attribute__((...)) syntax is a documented compiler language extension (not standard C), so its use violates MISRA C 2023 Rule 1.2. Hiding the attribute inside a macro does not avoid the violation \u2014 the source after preprocessing still contains the compiler-specific extension."
}