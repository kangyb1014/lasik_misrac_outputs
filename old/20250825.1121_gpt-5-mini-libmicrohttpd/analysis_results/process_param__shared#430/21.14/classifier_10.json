{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_param__shared:\n```c\nstatic enum PerfRepl_param_result\nprocess_param__shared (const char *param_name)\n{\n  if (tool_params.single)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-I' or '--single'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  if (tool_params.unique)\n  {\n    fprintf (stderr, \"Parameter '%s' cannot be used together \"\n             \"with '-U' or '--unique'.\\n\", param_name);\n    return PERF_RPL_PARAM_ERROR;\n  }\n  tool_params.shared = ! 0;\n  return '-' == param_name[1] ?\n         PERF_RPL_PARAM_FULL_STR :PERF_RPL_PARAM_ONE_CHAR;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_param__shared:\nstatic struct PerfRepl_parameters tool_params = {\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n}\n...\nstatic enum PerfRepl_param_result\nprocess_short_param (const char *param, const char *next_param)\n{\n  const char param_chr = param[0];\n  if ('A' == param_chr)\n    return process_param__all_cpus (\"-A\");\n  else if ('t' == param_chr)\n    return process_param__threads (\"-t\", param + 1, next_param);\n  else if ('P' == param_chr)\n    return process_param__thread_per_conn (\"-P\");\n  else if ('e' == param_chr)\n    return process_param__epoll (\"-e\");\n  else if ('p' == param_chr)\n    return process_param__poll (\"-p\");\n  else if ('s' == param_chr)\n    return process_param__select (\"-s\");\n  else if ('E' == param_chr)\n    return process_param__empty (\"-E\");\n  else if ('T' == param_chr)\n    return process_param__tiny (\"-T\");\n  else if ('M' == param_chr)\n    return process_param__medium (\"-M\");\n  else if ('L' == param_chr)\n    return process_param__large (\"-L\");\n  else if ('S' == param_chr)\n    return process_param__shared (\"-S\");\n  else if ('I' == param_chr)\n    return process_param__single (\"-I\");\n  else if ('U' == param_chr)\n    return process_param__unique (\"-U\");\n  else if ('c' == param_chr)\n    return process_param__connections (\"-c\", param + 1, next_param);\n  else if ('O' == param_chr)\n    return process_param__timeout (\"-O\", param + 1, next_param);\n  else if ('V' == param_chr)\n    return process_param__version (\"-V\");\n\n  fprintf (stderr, \"Unrecognised parameter: -%c.\\n\", param_chr);\n  return PERF_RPL_PARAM_ERROR;\n}\n...\nstatic enum PerfRepl_param_result\nprocess_long_param (const char *param, const char *next_param)\n{\n  const size_t param_len = strlen (param);\n\n  if ((MHD_STATICSTR_LEN_ (\"all-cpus\") == param_len) &&\n      (0 == memcmp (param, \"all-cpus\", MHD_STATICSTR_LEN_ (\"all-cpus\"))))\n    return process_param__all_cpus (\"--all-cpus\");\n  else if ((MHD_STATICSTR_LEN_ (\"threads\") <= param_len) &&\n           (0 == memcmp (param, \"threads\", MHD_STATICSTR_LEN_ (\"threads\"))))\n    return process_param__threads (\"--threads\",\n                                   param + MHD_STATICSTR_LEN_ (\"threads\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"thread-per-conn\") == param_len) &&\n           (0 == memcmp (param, \"thread-per-conn\",\n                         MHD_STATICSTR_LEN_ (\"thread-per-conn\"))))\n    return process_param__thread_per_conn (\"--thread-per-conn\");\n  else if ((MHD_STATICSTR_LEN_ (\"epoll\") == param_len) &&\n           (0 == memcmp (param, \"epoll\", MHD_STATICSTR_LEN_ (\"epoll\"))))\n    return process_param__epoll (\"--epoll\");\n  else if ((MHD_STATICSTR_LEN_ (\"poll\") == param_len) &&\n           (0 == memcmp (param, \"poll\", MHD_STATICSTR_LEN_ (\"poll\"))))\n    return process_param__poll (\"--poll\");\n  else if ((MHD_STATICSTR_LEN_ (\"select\") == param_len) &&\n           (0 == memcmp (param, \"select\", MHD_STATICSTR_LEN_ (\"select\"))))\n    return process_param__select (\"--select\");\n  else if ((MHD_STATICSTR_LEN_ (\"empty\") == param_len) &&\n           (0 == memcmp (param, \"empty\", MHD_STATICSTR_LEN_ (\"empty\"))))\n    return process_param__empty (\"--empty\");\n  else if ((MHD_STATICSTR_LEN_ (\"tiny\") == param_len) &&\n           (0 == memcmp (param, \"tiny\", MHD_STATICSTR_LEN_ (\"tiny\"))))\n    return process_param__tiny (\"--tiny\");\n  else if ((MHD_STATICSTR_LEN_ (\"medium\") == param_len) &&\n           (0 == memcmp (param, \"medium\", MHD_STATICSTR_LEN_ (\"medium\"))))\n    return process_param__medium (\"--medium\");\n  else if ((MHD_STATICSTR_LEN_ (\"large\") == param_len) &&\n           (0 == memcmp (param, \"large\", MHD_STATICSTR_LEN_ (\"large\"))))\n    return process_param__large (\"--large\");\n  else if ((MHD_STATICSTR_LEN_ (\"shared\") == param_len) &&\n           (0 == memcmp (param, \"shared\", MHD_STATICSTR_LEN_ (\"shared\"))))\n    return process_param__shared (\"--shared\");\n  else if ((MHD_STATICSTR_LEN_ (\"single\") == param_len) &&\n           (0 == memcmp (param, \"single\", MHD_STATICSTR_LEN_ (\"single\"))))\n    return process_param__single (\"--single\");\n  else if ((MHD_STATICSTR_LEN_ (\"unique\") == param_len) &&\n           (0 == memcmp (param, \"unique\", MHD_STATICSTR_LEN_ (\"unique\"))))\n    return process_param__unique (\"--unique\");\n  else if ((MHD_STATICSTR_LEN_ (\"connections\") <= param_len) &&\n           (0 == memcmp (param, \"connections\",\n                         MHD_STATICSTR_LEN_ (\"connections\"))))\n    return process_param__connections (\"--connections\",\n                                       param\n                                       + MHD_STATICSTR_LEN_ (\"connections\"),\n                                       next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"timeout\") <= param_len) &&\n           (0 == memcmp (param, \"timeout\",\n                         MHD_STATICSTR_LEN_ (\"timeout\"))))\n    return process_param__timeout (\"--timeout\",\n                                   param + MHD_STATICSTR_LEN_ (\"timeout\"),\n                                   next_param);\n  else if ((MHD_STATICSTR_LEN_ (\"date-header\") == param_len) &&\n           (0 == memcmp (param, \"date-header\",\n                         MHD_STATICSTR_LEN_ (\"date-header\"))))\n    return process_param__date_header (\"--date-header\");\n  else if ((MHD_STATICSTR_LEN_ (\"help\") == param_len) &&\n           (0 == memcmp (param, \"help\", MHD_STATICSTR_LEN_ (\"help\"))))\n    return process_param__help (\"--help\");\n  else if ((MHD_STATICSTR_LEN_ (\"version\") == param_len) &&\n           (0 == memcmp (param, \"version\", MHD_STATICSTR_LEN_ (\"version\"))))\n    return process_param__version (\"--version\");\n\n  fprintf (stderr, \"Unrecognised parameter: --%s.\\n\", param);\n  return PERF_RPL_PARAM_ERROR;\n}\n...\nstatic enum PerfRepl_param_result\nprocess_short_params_str (const char *params_str, const char *next_param)\n{\n  if (0 == params_str[0])\n  {\n    fprintf (stderr, \"Unrecognised parameter: -\\n\");\n    return PERF_RPL_PARAM_ERROR;\n  }\n  do\n  {\n    enum PerfRepl_param_result param_res;\n    param_res = process_short_param (params_str, next_param);\n    if (PERF_RPL_PARAM_ONE_CHAR != param_res)\n      return param_res;\n  } while (0 != (++params_str)[0]);\n  return PERF_RPL_PARAM_FULL_STR;\n}\n...\nstatic int\nprocess_params (int argc, char *const *argv)\n{\n  int proc_dash_param = ! 0;\n  int i;\n  for (i = 1; i < argc; ++i)\n  {\n    /**\n     * The currently processed argument\n     */\n    const char *const p = argv[i];\n    const char *const p_next = (argc == (i + 1)) ? NULL : (argv[i + 1]);\n    if (NULL == p)\n    {\n      fprintf (stderr, \"The NULL in the parameter number %d. \"\n               \"The error in the C library?\\n\", i);\n      continue;\n    }\n    else if (0 == p[0])\n      continue; /* Empty */\n    else if (proc_dash_param && ('-' == p[0]))\n    {\n      enum PerfRepl_param_result param_res;\n      if ('-' == p[1])\n      {\n        if (0 == p[2])\n        {\n          proc_dash_param = 0; /* The '--' parameter */\n          continue;\n        }\n        param_res = process_long_param (p + 2, p_next);\n      }\n      else\n        param_res = process_short_params_str (p + 1, p_next);\n\n      if (PERF_RPL_PARAM_ERROR == param_res)\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      if (PERF_RPL_PARAM_STR_PLUS_NEXT == param_res)\n        ++i;\n      else if (PERF_RPL_PARAM_ONE_CHAR == param_res)\n        abort ();\n      continue;\n    }\n    else if (('0' <= p[0]) && ('9' >= p[0]))\n    {\n      /* Process the port number */\n      unsigned int read_port;\n      size_t num_digits;\n      num_digits = mhd_tool_str_to_uint (p, &read_port);\n      if (0 != p[num_digits])\n      {\n        fprintf (stderr, \"Error in specified port number: %s\\n\", p);\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      }\n      else if (65535 < read_port)\n      {\n        fprintf (stderr, \"Wrong port number: %s\\n\", p);\n        return PERF_RPL_ERR_CODE_BAD_PARAM;\n      }\n      mhd_port = (uint16_t) read_port;\n    }\n    else\n    {\n      fprintf (stderr, \"Unrecognised parameter: %s\\n\\n\", p);\n      return PERF_RPL_ERR_CODE_BAD_PARAM;\n    }\n  }\n  return 0;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(0 == memcmp (param, \"medium\", MHD_STATICSTR_LEN_ (\"medium\")))\n```\nFocus on the above code fragment and judge whether it violates the rule 21.14 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The code uses memcmp to compare the null-terminated parameter string 'param' to the literal \"medium\": (0 == memcmp(param, \"medium\", MHD_STATICSTR_LEN_(\"medium\"))). Even though param_len (strlen(param)) is checked beforehand, memcmp is being used to compare C strings, which violates MISRA C 2023 Rule 21.14. Use strcmp/strncmp (or another string comparison API) instead."
}