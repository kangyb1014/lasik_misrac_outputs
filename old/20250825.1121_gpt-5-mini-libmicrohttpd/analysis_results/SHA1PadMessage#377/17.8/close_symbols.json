{
  "user_message": "Target function code is:\n```c\nstatic void\nSHA1PadMessage (struct SHA1Context *context)\n{\n  if (context->message_block_index > 55)\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 64)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n    SHA1ProcessMessageBlock (context);\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  else\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  context->message_block[56] = (unsigned char) (context->length_high >> 24);\n  context->message_block[57] = (unsigned char) (context->length_high >> 16);\n  context->message_block[58] = (unsigned char) (context->length_high >> 8);\n  context->message_block[59] = (unsigned char) (context->length_high);\n  context->message_block[60] = (unsigned char) (context->length_low >> 24);\n  context->message_block[61] = (unsigned char) (context->length_low >> 16);\n  context->message_block[62] = (unsigned char) (context->length_low >> 8);\n  context->message_block[63] = (unsigned char) (context->length_low);\n  SHA1ProcessMessageBlock (context);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'SHA1PadMessage': {'callees': ['SHA1ProcessMessageBlock'], 'callers': ['SHA1Result']}, 'SHA1ProcessMessageBlock': {'callees': [], 'callers': ['SHA1PadMessage', 'SHA1Input']}, 'SHA1Result': {'callees': ['SHA1PadMessage'], 'callers': ['ws_get_accept_value']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct SHA1Context (full definition)",
    "SHA1ProcessMessageBlock (declaration or macro definition)",
    "SHA1PadMessage (declaration/macro, if any)",
    "Preprocessor macros that expand or alias the identifiers used in the function: context, message_block, message_block_index, length_high, length_low, SHA1ProcessMessageBlock"
  ],
  "explanation": "1) struct SHA1Context (full definition): needed to determine whether the function modifies the pointer parameter itself or only the object it points to. The MISRA rule allows modification of the object referred to by a pointer parameter (i.e. *context and its members) but forbids modifying the pointer parameter variable. Knowing the exact types of message_block (array vs pointer), message_block_index, length_high and length_low shows whether expressions like context->message_block[...], context->message_block = ..., or context = ... occur and whether they modify the pointer or the pointee.\n\n2) SHA1ProcessMessageBlock (declaration or macro definition): the call could be to either a function or a macro. If it is a macro it might expand to code that assigns to the parameter variable 'context' (or otherwise modifies the parameter pointer). Its prototype also confirms whether it takes a plain struct SHA1Context * (no double pointer) so that the callee cannot directly reassign the caller's pointer variable.\n\n3) SHA1PadMessage (declaration/macro, if any): to confirm the actual parameter type/qualification (e.g. const) and to ensure the identifier SHA1PadMessage is not a macro that changes the effective code. The source code shown is static, but an external declaration or macro could alter interpretation.\n\n4) Preprocessor macros that expand or alias the identifiers used in the function: context, message_block, message_block_index, length_high, length_low, SHA1ProcessMessageBlock. Any macro definition for these identifiers could change the meaning of the code (for example a macro named 'context' or a macro that replaces SHA1ProcessMessageBlock with code that reassigns the pointer). To rule out a MISRA violation you must inspect such macros to ensure no assignment to the pointer parameter variable occurs."
}