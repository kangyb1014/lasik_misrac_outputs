{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of SHA1PadMessage:\n```c\nstatic void\nSHA1PadMessage (struct SHA1Context *context)\n{\n  if (context->message_block_index > 55)\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 64)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n    SHA1ProcessMessageBlock (context);\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  else\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  context->message_block[56] = (unsigned char) (context->length_high >> 24);\n  context->message_block[57] = (unsigned char) (context->length_high >> 16);\n  context->message_block[58] = (unsigned char) (context->length_high >> 8);\n  context->message_block[59] = (unsigned char) (context->length_high);\n  context->message_block[60] = (unsigned char) (context->length_low >> 24);\n  context->message_block[61] = (unsigned char) (context->length_low >> 16);\n  context->message_block[62] = (unsigned char) (context->length_low >> 8);\n  context->message_block[63] = (unsigned char) (context->length_low);\n  SHA1ProcessMessageBlock (context);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "SHA1ProcessMessageBlock (context);",
    "context->message_block[61] = (unsigned char) (context->length_low >> 16);",
    "context->message_block[63] = (unsigned char) (context->length_low);",
    "static void\nSHA1PadMessage (struct SHA1Context *context)",
    "context->message_block[context->message_block_index++] = 0x80;",
    "context->message_block[58] = (unsigned char) (context->length_high >> 8);",
    "context->message_block[62] = (unsigned char) (context->length_low >> 8);",
    "while (context->message_block_index < 64)",
    "context->message_block[60] = (unsigned char) (context->length_low >> 24);",
    "if (context->message_block_index > 55)",
    "context->message_block[57] = (unsigned char) (context->length_high >> 16);",
    "context->message_block[context->message_block_index++] = 0;",
    "context->message_block[56] = (unsigned char) (context->length_high >> 24);",
    "context->message_block[59] = (unsigned char) (context->length_high);",
    "while (context->message_block_index < 56)"
  ],
  "explanation": "MISRA C Rule 8.13 concerns pointer types that should be const-qualified when the pointee is not modified. In this function the only pointer used is the parameter 'context' (every occurrence of 'context->...' is listed above) and calls that pass it to SHA1ProcessMessageBlock are included. Other lines in the function are loop controls, integer/byte assignments, and casts that do not introduce additional pointer variables or pointer types, so they are not relevant to Rule 8.13. No other pointer declarations or pointer expressions appear in the provided code, therefore no further fragments need to be investigated for this rule."
}