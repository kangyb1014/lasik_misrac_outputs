{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    res = MHD_poll_all (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    res = MHD_epoll (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_run_wait': {'callees': ['MHD_poll_all', 'MHD_cleanup_connections', 'MHD_epoll', 'MHD_select'], 'callers': ['MHD_run']}, 'MHD_poll_all': {'callees': ['resume_suspended_connections', 'MHD_DLOG', 'get_timeout_millisec_int', 'new_connections_list_process_', 'MHD_accept_connection', 'call_handlers'], 'callers': ['MHD_poll', 'MHD_run_wait']}, 'MHD_cleanup_connections': {'callees': ['__builtin_unreachable', 'cleanup_upgraded_connection', 'MHD_pool_destroy', 'MHD_ip_limit_del', 'MHD_destroy_response'], 'callers': ['MHD_add_connection', 'internal_run_from_select', 'MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread', 'close_all_connections', 'MHD_get_daemon_info']}, 'MHD_epoll': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'resume_suspended_connections', 'get_timeout_millisec_int', 'new_connections_list_process_', 'MHD_accept_connection', 'MHD_connection_handle_idle', 'call_handlers'], 'callers': ['MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread']}, 'MHD_select': {'callees': ['resume_suspended_connections', 'internal_get_fdset2', 'MHD_DLOG', 'MHD_add_to_fd_set_', 'MHD_get_timeout64', 'internal_run_from_select'], 'callers': ['MHD_run_wait', 'MHD_polling_thread']}, 'MHD_run': {'callees': ['MHD_run_wait'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mhd_assert",
    "MHD_thread_handle_ID_is_valid_handle_",
    "MHD_D_IS_USING_THREADS_",
    "MHD_D_IS_USING_POLL_",
    "MHD_D_IS_USING_EPOLL_",
    "MHD_D_IS_USING_SELECT_",
    "MHD_poll_all",
    "MHD_epoll",
    "MHD_select",
    "MHD_cleanup_connections",
    "MHD_DLOG",
    "struct MHD_Daemon (fields: shutdown, tid, fdset_size_set_by_app, fdset_size)",
    "FD_SETSIZE",
    "HAVE_POLL",
    "EPOLL_SUPPORT",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "HAVE_MESSAGES"
  ],
  "explanation": "For checking the MISRA rule \u201cA function parameter should not be modified\u201d you must be certain which tokens in the function body are simple reads/conditions and which expand to code that could write to the parameters (either the value parameter millisec or the pointer parameter daemon). Each listed symbol is required for that determination:\n\n- mhd_assert: Often a macro; could expand to code with side effects. Need its definition to ensure it does not modify daemon or millisec.\n- MHD_thread_handle_ID_is_valid_handle_: Used inside mhd_assert; include its definition in case it is a macro or inline that modifies parameters or global state that would affect interpretation.\n- MHD_D_IS_USING_THREADS_: Macro/inline used in the condition. Must inspect expansion to ensure it only reads daemon and does not assign to the daemon parameter variable.\n- MHD_D_IS_USING_POLL_: Same reason as above (conditional macro) \u2014 inspect expansion for side effects on parameters.\n- MHD_D_IS_USING_EPOLL_: Same reason \u2014 conditional macro could contain side effects.\n- MHD_D_IS_USING_SELECT_: Same reason \u2014 used in the final branch and asserted; must confirm it only reads daemon.\n- MHD_poll_all: Called with (daemon, millisec). If it is a macro it could expand to assignments to the passed identifiers (thus modifying local millisec) \u2014 or if it is a function, it could modify the object pointed to by daemon (allowed) but cannot change the local pointer variable; include its definition to confirm no macro-based modification of the parameter variable.\n- MHD_epoll: Same as MHD_poll_all \u2014 inspect for macro expansions that could write to millisec or reassign daemon.\n- MHD_select: Same reason \u2014 it is called with millisec; must ensure it does not expand to code that assigns to the local parameter variable rather than operating on a copy.\n- MHD_cleanup_connections: Called after poll/epoll; include its definition to ensure it does not rely on or mutate the local parameter variables via macros (rare but possible) and to know whether it changes the pointed-to daemon object (which is allowed) versus the pointer variable itself.\n- MHD_DLOG: Logging macro/function used in the FD_SETSIZE warning block; macros can contain side-effects \u2014 include to ensure it does not modify parameters.\n- struct MHD_Daemon (fields: shutdown, tid, fdset_size_set_by_app, fdset_size): The code reads daemon->shutdown and other fields; to decide whether any of those accessors/macros modify the pointer or parameter you need the struct definition and any accessor macros. Also verify whether fields are plain data or accessors with side effects.\n- FD_SETSIZE: Used in comparison; include definition to understand whether it is a simple constant or a macro that could expand oddly.\n- HAVE_POLL, EPOLL_SUPPORT, HAS_FD_SETSIZE_OVERRIDABLE, HAVE_MESSAGES: Preprocessor feature macros control which code is present. You must know which of these are defined for the build being analyzed because different compilations may produce different code paths (and different potential modifying constructs).\n\nWith these symbols (macro/function definitions and the daemon struct), an analyzer can determine definitively whether the function body performs any writes to the parameter variables themselves (millisec or the pointer daemon), or whether all writes are to the object pointed to (which is permitted by the rule)."
}