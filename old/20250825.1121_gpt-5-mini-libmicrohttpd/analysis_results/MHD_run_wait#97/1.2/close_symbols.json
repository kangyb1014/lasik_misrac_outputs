{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    res = MHD_poll_all (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    res = MHD_epoll (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_run_wait': {'callees': ['MHD_poll_all', 'MHD_cleanup_connections', 'MHD_epoll', 'MHD_select'], 'callers': ['MHD_run']}, 'MHD_poll_all': {'callees': ['resume_suspended_connections', 'MHD_DLOG', 'get_timeout_millisec_int', 'new_connections_list_process_', 'MHD_accept_connection', 'call_handlers'], 'callers': ['MHD_poll', 'MHD_run_wait']}, 'MHD_cleanup_connections': {'callees': ['__builtin_unreachable', 'cleanup_upgraded_connection', 'MHD_pool_destroy', 'MHD_ip_limit_del', 'MHD_destroy_response'], 'callers': ['MHD_add_connection', 'internal_run_from_select', 'MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread', 'close_all_connections', 'MHD_get_daemon_info']}, 'MHD_epoll': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'resume_suspended_connections', 'get_timeout_millisec_int', 'new_connections_list_process_', 'MHD_accept_connection', 'MHD_connection_handle_idle', 'call_handlers'], 'callers': ['MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread']}, 'MHD_select': {'callees': ['resume_suspended_connections', 'internal_get_fdset2', 'MHD_DLOG', 'MHD_add_to_fd_set_', 'MHD_get_timeout64', 'internal_run_from_select'], 'callers': ['MHD_run_wait', 'MHD_polling_thread']}, 'MHD_run': {'callees': ['MHD_run_wait'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result",
    "struct MHD_Daemon",
    "struct MHD_Daemon.shutdown",
    "struct MHD_Daemon.tid",
    "struct MHD_Daemon.fdset_size_set_by_app",
    "struct MHD_Daemon.fdset_size",
    "MHD_D_IS_USING_THREADS_",
    "MHD_thread_handle_ID_is_valid_handle_",
    "mhd_assert",
    "HAVE_POLL",
    "MHD_D_IS_USING_POLL_",
    "MHD_poll_all",
    "MHD_cleanup_connections",
    "HAVE_EPOLL_SUPPORT",
    "MHD_D_IS_USING_EPOLL_",
    "MHD_epoll",
    "MHD_D_IS_USING_SELECT_",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "HAVE_MESSAGES",
    "MHD_DLOG",
    "_ (gettext macro or equivalent)",
    "FD_SETSIZE",
    "MHD_select"
  ],
  "explanation": "To decide whether MHD_run_wait uses any compiler language extensions you must examine the definitions and macros that can hide such extensions or enable alternative compiled branches. Specifically:\n\n- _MHD_EXTERN: may expand to compiler-specific storage-class or attribute annotations (e.g. __attribute__, __declspec) \u2014 these are common compiler extensions.\n- enum MHD_Result: the enum definition could use non-standard extensions or attributes (underlying type specifiers, attributes) that would violate the rule.\n- struct MHD_Daemon and its fields (shutdown, tid, fdset_size_set_by_app, fdset_size): the structure layout or field declarations may use compiler extensions (bit-field types, anonymous/unnamed fields, packed/aligned attributes, GCC extensions). The fields used in this function determine which members to inspect.\n- MHD_D_IS_USING_THREADS_, MHD_D_IS_USING_POLL_, MHD_D_IS_USING_EPOLL_, MHD_D_IS_USING_SELECT_: these macros/inline tests control flow. Their definitions may use statement-expressions, typeof, or other compiler-specific constructs; you must inspect them to know what actually compiles into this function.\n- MHD_thread_handle_ID_is_valid_handle_: this function/macro may use platform-specific types or attributes (inline, always_inline, register-class attributes, asm, etc.).\n- mhd_assert: assert-like macros commonly employ compiler builtins (__builtin_expect, __builtin_trap), statement expressions, or attributes \u2014 inspect its definition.\n- HAVE_POLL, HAVE_EPOLL_SUPPORT, HAS_FD_SETSIZE_OVERRIDABLE, HAVE_MESSAGES: these preprocessor symbols determine which code paths are compiled; you must know which are defined to analyze the exact compiled text for extensions.\n- MHD_poll_all, MHD_epoll, MHD_select, MHD_cleanup_connections: their declarations/definitions may contain attributes (noreturn, format, visibility) or use builtins; MHD_run_wait calls them, so their prototypes/macros can introduce extensions into the compiled call sites (e.g. via inline wrappers or macros).\n- MHD_DLOG and _ (the translation macro): logging/translation macros often use variadic macros, GCC extension syntax, or statement expressions; inspect to ensure no extensions are used.\n- FD_SETSIZE: system macro; its definition or use in conditional expressions could interact with extensions (e.g. if redefined via compiler-specific macros).\n\nCollecting these symbols (their macro definitions, typedefs/struct/enum definitions, and relevant function prototypes) lets the next analyzer see the exact expanded code and determine whether any compiler-documented language extensions are used in the compiled form of MHD_run_wait."
}