{
  "user_message": "An agent A claimed that the following MHD_set_panic_func code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_panic_func.\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe symbol _MHD_NORETURN is likely a macro that expands to a compiler-specific attribute such as GCC's __attribute__((noreturn)). Use of such __attribute__ constructs (and the project already uses __attribute__((visibility(\"default\"))) in _MHD_EXTERN) are compiler extensions and therefore violate MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_panic_func:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\ntypedef void\n(*MHD_PanicCallback) (void *cls,\n                      const char *file,\n                      unsigned int line,\n                      const char *reason)\n...\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n...\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n...\nvoid *mhd_panic_cls = NULL\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The function is declared with the _MHD_EXTERN macro, and the supplied macro definition shows it expands to __attribute__((visibility(\"default\"))) extern. __attribute__ is a compiler-specific (GCC/clang) extension that is explicitly documented as an extension, so its use constitutes a language extension per MISRA C 2023 Rule 1.2. The additional presence of _MHD_NORETURN (likely expanding to __attribute__((noreturn))) reinforces that compiler attributes are being used. If these macros are actually expanded to attributes in the build, the report is correct; only if the macros are conditionally defined as empty on the target compilation environment would there be no extension used. Based on the provided definitions, the report is correct."
}