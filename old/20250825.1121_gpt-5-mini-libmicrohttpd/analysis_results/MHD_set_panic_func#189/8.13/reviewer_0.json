{
  "user_message": "An agent A claimed that the following MHD_set_panic_func code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_panic_func.\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe callback parameter 'void *cls' is not const-qualified. In the provided mhd_panic_std implementation 'cls' is unused and not modified, so it could be declared as 'const void *cls'. As written the typedef prevents passing pointers-to-const without a cast and therefore violates MISRA C 2023 Rule 8.13. Fix by changing the typedef (and related globals) to take 'const void *cls'.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_panic_func:\ntypedef void\n(*MHD_PanicCallback) (void *cls,\n                      const char *file,\n                      unsigned int line,\n                      const char *reason)\n...\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n...\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n...\nvoid *mhd_panic_cls = NULL\n...\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n...\nvoid *mhd_panic_cls = NULL\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 8.13 advises that pointers should point to const-qualified types when that is possible without changing the intended semantics. In this API the void *cls is an opaque user-supplied context pointer that is stored and later passed to user callbacks. Although the library's default handler mhd_panic_std does not use/modify cls, the callback type and API are intentionally generic so that client code may supply and (if desired) modify state via a non-const pointer. Changing the typedef and globals to const void * would restrict the API and change its semantics. Therefore the current use of void * for the context parameter is an intentional design choice and not a MISRA 8.13 violation in this case."
}