{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_panic_func:\ntypedef void\n(*MHD_PanicCallback) (void *cls,\n                      const char *file,\n                      unsigned int line,\n                      const char *reason)\n...\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n...\n_MHD_NORETURN static void\nmhd_panic_std (void *cls,\n               const char *file,\n               unsigned int line,\n               const char *reason)\n{\n  (void) cls; /* Mute compiler warning. */\n#ifdef HAVE_MESSAGES\n  fprintf (stderr,\n           _ (\"Fatal error in GNU libmicrohttpd %s:%u: %s\\n\"),\n           file,\n           line,\n           reason);\n#else  /* ! HAVE_MESSAGES */\n  (void) file;   /* Mute compiler warning. */\n  (void) line;   /* Mute compiler warning. */\n  (void) reason; /* Mute compiler warning. */\n#endif\n  abort ();\n}\n...\nvoid *mhd_panic_cls = NULL\n...\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n...\nvoid *mhd_panic_cls = NULL\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_PanicCallback mhd_panic = (MHD_PanicCallback) NULL\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: mhd_panic is a function\u2011pointer (type MHD_PanicCallback). The typedef already const\u2011qualifies the string parameters (const char *file, const char *reason). Applying a const qualifier to a function type\u2019s target is not meaningful in C (you cannot make the function type itself const), so there is no applicable const qualification to add here. If the intent were to prevent modification of the user cls pointer by callbacks, the typedef would need to use const void *cls (an API change) \u2014 only then would Rule 8.13 be relevant."
}