{
  "user_message": "An agent A claimed that the following request_completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of request_completed_callback.\n```c\nstatic void\nrequest_completed_callback (void *cls,\n                            struct MHD_Connection *connection,\n                            void **req_cls,\n                            enum MHD_RequestTerminationCode toe)\n{\n  struct Request *request = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == request)\n    return;\n  if (NULL != request->session)\n    request->session->rc--;\n  if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);\n  free (request);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameters cls and connection are declared as non-const pointers but are not modified in the function; they could be const-qualified (e.g. const void *cls, const struct MHD_Connection *connection). req_cls cannot be made to point to a const-qualified type because the function obtains the Request object from *req_cls and modifies/frees it (request->session->rc-- and free(request)). If the function signature must match an external API callback prototype, the non-const parameters may be justified; otherwise cls and connection violate Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function request_completed_callback:\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types when possible. In the shown function req_cls cannot be made const-qualified: the code obtains the Request object via *req_cls and then mutates/frees that object (request->session->rc-- and free(request)), so the pointed-to type is deliberately modifiable.\n\nThe remaining parameters (void *cls and struct MHD_Connection *connection) are not modified in the body and thus, in isolation, could be declared to point to const-qualified types. However request_completed_callback is a callback whose signature must match the external API (libmicrohttpd) prototype. You cannot change the parameter types of a function that is used as a callback without breaking the required prototype; in that case the non-const declarations are justified. Therefore there is no actionable MISRA violation here unless the function signature is not constrained by an external API (which is not the case for this code).\n\nConclusion: the reported violation is not correct in this context \u2014 req_cls legitimately must allow modification of the pointed object, and cls/connection are constrained by the external callback prototype."
}