{
  "user_message": "An agent A claimed that the following request_completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of request_completed_callback.\n```c\nstatic void\nrequest_completed_callback (void *cls,\n                            struct MHD_Connection *connection,\n                            void **req_cls,\n                            enum MHD_RequestTerminationCode toe)\n{\n  struct Request *request = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == request)\n    return;\n  if (NULL != request->session)\n    request->session->rc--;\n  if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);\n  free (request);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter req_cls is declared as void ** but the function only reads *req_cls (it does not modify the pointer stored there). According to MISRA C 2023 Rule 8.13, the pointed-to type should be const-qualified when possible. Here the level-1 pointee (the pointer value *req_cls) could and should be const-qualified \u2014 e.g. declare the parameter as void * const *req_cls or, more precisely for this code, struct Request * const *req_cls \u2014 to express that the function will not modify the pointer itself. The current line\n    struct Request *request = *req_cls;\ntherefore participates in a violation of Rule 8.13 because req_cls does not point to a const-qualified type even though it could.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function request_completed_callback:\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s observation (that the function does not modify *req_cls and so the pointed-to pointer could be const-qualified) is technically accurate in isolation. However, in this context the parameter type is a callback signature mandated by the libmicrohttpd API (the con_cls / req_cls parameter is declared as void ** in the library) and the function must match that external prototype. Changing the declaration to void * const * or struct Request * const * would break the required callback type and is therefore not possible. MISRA\u2019s intent in Rule 8.13 is to prefer const when feasible, but it recognizes that externally prescribed interfaces (callbacks, library APIs) constrain what can be changed. For these reasons the reported violation is a false positive \u2014 the code does not constitute a MISRA 8.13 violation in this situation."
}