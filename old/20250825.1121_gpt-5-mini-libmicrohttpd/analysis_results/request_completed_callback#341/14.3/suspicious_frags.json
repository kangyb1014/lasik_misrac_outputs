{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of request_completed_callback:\n```c\nstatic void\nrequest_completed_callback (void *cls,\n                            struct MHD_Connection *connection,\n                            void **req_cls,\n                            enum MHD_RequestTerminationCode toe)\n{\n  struct Request *request = *req_cls;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == request)\n    return;\n  if (NULL != request->session)\n    request->session->rc--;\n  if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);\n  free (request);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function request_completed_callback:\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (NULL == request)\n    return;",
    "if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }",
    "if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;",
    "if (NULL != request->pp)\n    MHD_destroy_post_processor (request->pp);",
    "if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);",
    "if (NULL == pp)\n    return MHD_YES;",
    "if (NULL != request->session)\n    request->session->rc--;"
  ],
  "explanation": "Rule 14.3 concerns controlling expressions (conditions in if/while/for/do statements). I have reported every conditional (if) statement present in the supplied functions, since those are the only controlling expressions that could be invariant and thus need investigation. Other lines in the snippets \u2014 variable declarations, (void) casts, returns, free() calls, assignments, function calls and comments \u2014 are not controlling expressions and therefore are not relevant to Rule 14.3 and were not included. There are no loop constructs (while/for/do) in the provided code, so the rule exceptions for infinite loops or the do-while integer-constant case do not apply here."
}