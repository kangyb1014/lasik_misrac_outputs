{
  "user_message": "Target function code is:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_auth_rq_header_': {'callees': [], 'callers': ['MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_']}, 'MHD_get_rq_bauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_bauth_params'], 'callers': ['MHD_basic_auth_get_username_password3']}, 'MHD_get_rq_dauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_dauth_params'], 'callers': ['MHD_digest_auth_get_request_info3', 'MHD_digest_auth_get_username3', 'MHD_digest_auth_get_username', 'digest_auth_check_all_inner']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "struct MHD_HTTP_Req_Header",
    "struct _MHD_str_w_len",
    "enum MHD_AuthType",
    "MHD_AUTHTYPE_DIGEST",
    "MHD_AUTHTYPE_BASIC",
    "MHD_CONNECTION_HEADERS_PROCESSED",
    "DAUTH_SUPPORT",
    "BAUTH_SUPPORT",
    "_MHD_AUTH_DIGEST_BASE",
    "_MHD_AUTH_BASIC_BASE",
    "MHD_STATICSTR_LEN_",
    "MHD_HTTP_HEADER_AUTHORIZATION",
    "MHD_HEADER_KIND",
    "mhd_assert",
    "MHD_str_equal_caseless_bin_n_"
  ],
  "explanation": "For MISRA check of language extensions you must inspect the definitions/expansions that the target function depends on because extensions commonly appear inside macros, typedefs, asserts or helper functions. Brief reasons: \n- struct MHD_Connection: its definition (members, qualifiers) may use compiler extensions (bit-fields with non-standard widths, anonymous structs/unions, attributes, __extension__ etc.). Needed to verify no extensions are used when accessing c->state and c->rq.headers_received. \n- struct MHD_HTTP_Req_Header: its definition (fields and types) must be checked for anonymous unions/structs, attributes, GCC extensions; also its member names (kind, header_size, header, value_size, value) are referenced in the function. \n- struct _MHD_str_w_len: definition required to ensure its fields/types (str, len) do not use extensions and are used correctly. \n- enum MHD_AuthType: enum definition might use compiler-specific attributes or non-standard underlying types; constants MHD_AUTHTYPE_DIGEST and MHD_AUTHTYPE_BASIC are compared in code. \n- MHD_CONNECTION_HEADERS_PROCESSED: need the macro/constant definition to ensure it is not an extension (e.g. using compound literals or statement expressions). \n- DAUTH_SUPPORT and BAUTH_SUPPORT: preprocessor-controlled conditional compilation; their definitions or build-time usage could enable code that uses extensions \u2014 must inspect how these macros are defined/used. \n- _MHD_AUTH_DIGEST_BASE and _MHD_AUTH_BASIC_BASE: string macros/constants may be defined using extension constructs (GCC string literal attributes, asm labels, __attribute__ formats) \u2014 check expansions. \n- MHD_STATICSTR_LEN_: macro/function used to compute token_len; could use sizeof on compound literals, typeof, __builtin_constant_p, statement expressions or other extensions \u2014 inspect its definition. \n- MHD_HTTP_HEADER_AUTHORIZATION: macro used as string constant and in comparisons; its definition could involve extension constructs. \n- MHD_HEADER_KIND: constant/macro used to compare h->kind; its definition must be checked for extensions. \n- mhd_assert: assertion macro/function often hides compiler-specific constructs (do/while(0) is fine, but could use __builtin_trap, __attribute__((noreturn)), __extension__, etc.); inspect for extensions. \n- MHD_str_equal_caseless_bin_n_: function or macro used for string comparisons; it could be implemented as a macro using statement expressions, typeof, inline asm, GCC builtins, or attributes \u2014 must inspect its definition.\n\nInspecting these symbols\u2019 definitions/expansions is sufficient to determine whether the target function (as written and as expanded) uses any language/compiler extensions prohibited by MISRA C."
}