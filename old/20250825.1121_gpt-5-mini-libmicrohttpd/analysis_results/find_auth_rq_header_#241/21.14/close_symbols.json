{
  "user_message": "Target function code is:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_auth_rq_header_': {'callees': [], 'callers': ['MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_']}, 'MHD_get_rq_bauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_bauth_params'], 'callers': ['MHD_basic_auth_get_username_password3']}, 'MHD_get_rq_dauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_dauth_params'], 'callers': ['MHD_digest_auth_get_request_info3', 'MHD_digest_auth_get_username3', 'MHD_digest_auth_get_username', 'digest_auth_check_all_inner']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nThe Standard Library function memcmp shall not be used to compare null terminated strings. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_str_equal_caseless_bin_n_",
    "MHD_STATICSTR_LEN_",
    "MHD_HTTP_HEADER_AUTHORIZATION",
    "struct MHD_HTTP_Req_Header",
    "struct MHD_Connection",
    "_MHD_AUTH_BASIC_BASE",
    "_MHD_AUTH_DIGEST_BASE",
    "MHD_HEADER_KIND"
  ],
  "explanation": "Explain why each symbol is required for checking the MISRA rule about memcmp on NUL-terminated strings:\n\n- MHD_str_equal_caseless_bin_n_: This is the comparison routine called twice in the function. You must inspect its implementation to see whether it uses memcmp (or another Standard Library function) and whether it ever calls memcmp on NUL-terminated C strings rather than on explicit-length binary buffers. Determining whether a memcmp use (if any) operates on NUL-terminated strings is the core of the MISRA check.\n\n- MHD_STATICSTR_LEN_: This macro is used to compute token_len and the length passed when comparing the literal header name. You must know its semantics (does it yield length excluding the terminating NUL, e.g. sizeof(string)-1) to judge whether subsequent comparisons include or rely on NUL terminators.\n\n- MHD_HTTP_HEADER_AUTHORIZATION: The literal/header-name symbol passed to MHD_STATICSTR_LEN_ and MHD_str_equal_caseless_bin_n_. You need its actual definition (string constant) to confirm its length and whether code might rely on a terminating NUL when comparing with header->header.\n\n- struct MHD_HTTP_Req_Header: The function inspects fields header, header_size, value, value_size and kind. You need the exact types/semantics of these fields (are header/value NUL-terminated? are sizes strictly the byte counts excluding any NUL?) to decide whether any memcmp use would be comparing NUL-terminated strings.\n\n- struct MHD_Connection: The function accesses c->state and c->rq.headers_received. You need the type/semantics for rq.headers_received (the list of MHD_HTTP_Req_Header) and to confirm any invariants about header/value storage that affect whether comparisons are on NUL-terminated strings.\n\n- _MHD_AUTH_BASIC_BASE and _MHD_AUTH_DIGEST_BASE: These token string constants are used to set token and token_len. You must know their definitions (are they NUL-terminated literals and how their lengths relate to MHD_STATICSTR_LEN_) to determine whether later comparisons could cause memcmp to be used on NUL-terminated strings.\n\n- MHD_HEADER_KIND: The constant used to test h->kind; included so you can locate the full definition/type of struct MHD_HTTP_Req_Header and understand when header/value fields are valid for comparison.\n\n(Other macros/definitions used only for control flow or assertions, e.g. mhd_assert, enum MHD_AuthType, are not needed to determine whether memcmp is used on NUL-terminated strings \u2014 the above symbols are sufficient to judge whether the comparisons in this function ultimately invoke memcmp on NUL-terminated strings.)"
}