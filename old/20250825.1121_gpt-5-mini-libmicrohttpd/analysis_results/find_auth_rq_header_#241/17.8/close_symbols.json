{
  "user_message": "Target function code is:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_auth_rq_header_': {'callees': [], 'callers': ['MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_']}, 'MHD_get_rq_bauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_bauth_params'], 'callers': ['MHD_basic_auth_get_username_password3']}, 'MHD_get_rq_dauth_params_': {'callees': ['find_auth_rq_header_', 'MHD_connection_alloc_memory_', 'MHD_DLOG', 'parse_dauth_params'], 'callers': ['MHD_digest_auth_get_request_info3', 'MHD_digest_auth_get_username3', 'MHD_digest_auth_get_username', 'digest_auth_check_all_inner']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "struct MHD_HTTP_Req_Header",
    "struct _MHD_str_w_len",
    "enum MHD_AuthType",
    "MHD_AUTHTYPE_DIGEST",
    "MHD_AUTHTYPE_BASIC",
    "MHD_STATICSTR_LEN_",
    "_MHD_AUTH_DIGEST_BASE",
    "_MHD_AUTH_BASIC_BASE",
    "MHD_HTTP_HEADER_AUTHORIZATION",
    "MHD_HEADER_KIND",
    "MHD_str_equal_caseless_bin_n_",
    "mhd_assert"
  ],
  "explanation": "- struct MHD_Connection: needed to see the types and names of fields accessed (c->state and c->rq.headers_received) and to confirm whether any assignment to 'c' or its fields would violate the parameter-modification rule. It also provides the type of rq so headers_received type is known.\n- struct MHD_HTTP_Req_Header: required to confirm the types and names of h->next, h->value, h->header, h->header_size, h->value_size and h->kind. This shows that the code writes into *auth_value fields (not into pointer parameters) and that the loop advances via h->next (no parameter reassignment).\n- struct _MHD_str_w_len: required to verify the fields auth_value->str and auth_value->len exist and that writing to these fields modifies the object pointed to (permitted) rather than reassigning the parameter pointer (prohibited).\n- enum MHD_AuthType: required to understand the type of the parameter 'type' and that comparisons against constants are reads, not modifications of the parameter variable.\n- MHD_AUTHTYPE_DIGEST, MHD_AUTHTYPE_BASIC: the specific enum constants used in comparisons; included to verify they are only used for comparison (no hidden side effects changing the parameter).\n- MHD_STATICSTR_LEN_: macro used to compute token_len and header length; included to check it does not perform assignments that could modify any of the function parameters.\n- _MHD_AUTH_DIGEST_BASE, _MHD_AUTH_BASIC_BASE: string constants assigned to local token; included to ensure these macros/functions do not have hidden side effects that could modify parameters.\n- MHD_HTTP_HEADER_AUTHORIZATION: header-name macro used in comparisons; included to ensure its use does not alter any parameter.\n- MHD_HEADER_KIND: constant compared to h->kind; included to ensure no side effects on parameters.\n- MHD_str_equal_caseless_bin_n_: function used to compare strings. Its declaration/signature is required to confirm it accepts const pointers (no pointer-to-pointer or non-const reference that could modify the caller's pointer variables) and has no side effects that would modify the function parameters.\n- mhd_assert: macro used at function start; required to confirm it does not expand to code that assigns to function parameters.\n\nThese symbols let an analyzer determine whether any assignment or side-effect in called macros/functions or field accesses actually modifies the parameter variables (c, type, auth_value) themselves versus modifying objects pointed to (which is permitted by the MISRA rule)."
}