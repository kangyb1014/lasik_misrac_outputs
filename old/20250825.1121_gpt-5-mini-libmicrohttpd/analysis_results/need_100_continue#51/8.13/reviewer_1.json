{
  "user_message": "An agent A claimed that the following need_100_continue code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of need_100_continue.\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' but the function only reads from it (accesses connection->rq.http_ver and connection->rq.remaining_upload_size and performs lookups). Therefore the pointer could/should be declared as pointing to a const-qualified type (const struct MHD_Connection *connection). As written it violates MISRA C 2023 Rule 8.13 unless there is a required API that mandates a non-const argument (e.g. MHD_lookup_connection_value_n requires a non-const connection), in which case the declaration cannot be changed.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not deterministically correct. MISRA C 2023 R8.13 says a pointer should point to a const-qualified type whenever possible. In the body of need_100_continue the function only reads members of connection and stores a const char *expect, so at face value the parameter could be const. However the function passes connection to MHD_lookup_connection_value_n; if that API requires a non-const struct MHD_Connection * (i.e. its prototype does not accept a const pointer) then the parameter cannot be changed to const and there is no MISRA violation. The agent\u2019s caveat is exactly right: it is a violation only if all callees (notably MHD_lookup_connection_value_n) accept a pointer-to-const; if any required API requires a non-const pointer then the current declaration is acceptable. Without the prototype(s) of the called functions we cannot conclude a definite MISRA violation, so the agent\u2019s unconditional claim is not provably correct."
}