{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. The fragment only calls MHD_DLOG(daemon, _(\"Failed to set noninheritable mode on epoll FD.\\n\")); there is no local pointer declaration that should be const-qualified. The string is a literal (passed through _()), and the daemon argument is the existing struct MHD_Daemon * parameter. Based on this fragment alone, there is no clear pointer-to-non-const that could/should be const-qualified, so Rule 8.13 is not violated. (Note: if the prototypes of _ or MHD_DLOG take non-const pointers even though they do not modify the pointees, those prototypes should be changed to use const; that would be a separate violation in their declarations, not in this call site.)"
}