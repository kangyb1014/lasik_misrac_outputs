{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_set_nodelay_:\n```c\nint\nMHD_socket_set_nodelay_ (MHD_socket sock,\n                         bool on)\n{\n#ifdef TCP_NODELAY\n  {\n    const MHD_SCKT_OPT_BOOL_ off_val = 0;\n    const MHD_SCKT_OPT_BOOL_ on_val = 1;\n    /* Disable Nagle's algorithm for normal buffering */\n    return setsockopt (sock,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) ((on) ? &on_val : &off_val),\n                       sizeof (on_val));\n  }\n#else\n  (void) sock;\n  return 0;\n#endif /* TCP_NODELAY */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_socket_set_nodelay_:\ntypedef int MHD_SCKT_OPT_BOOL_\n...\ntypedef int MHD_socket\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were found in the provided function. Rationale:\n- The preprocessor conditional (#ifdef TCP_NODELAY / #else / #endif) yields two alternative compilations, but preprocessor-excluded text is not considered unreachable code within the compilation unit \u2014 only one branch is compiled at a time. Each compiled branch contains a single return; there is no code following a return that would be unreachable.\n- There are no unconditional infinite loops, labels skipped by unconditional jumps, or code after an unconditional return in any compiled branch.\n- The inner block that declares on_val and off_val and then returns after calling setsockopt is valid; taking addresses of these automatic objects to pass to setsockopt is used immediately in the call and not retained beyond the call, so it does not create unreachable code.\n- The alternative branch ((void) sock; return 0;) is reachable in the configuration where TCP_NODELAY is not defined; it is not dead code in that build.\n- No other constructs in this function (switch/case without fall-through, gotos, or unreachable label sequences) indicate unreachable code.\nTherefore, there are no fragments requiring investigation for MISRA C 2023 Rule 2.1 in this function."
}