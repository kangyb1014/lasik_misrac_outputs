{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_set_nodelay_:\n```c\nint\nMHD_socket_set_nodelay_ (MHD_socket sock,\n                         bool on)\n{\n#ifdef TCP_NODELAY\n  {\n    const MHD_SCKT_OPT_BOOL_ off_val = 0;\n    const MHD_SCKT_OPT_BOOL_ on_val = 1;\n    /* Disable Nagle's algorithm for normal buffering */\n    return setsockopt (sock,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) ((on) ? &on_val : &off_val),\n                       sizeof (on_val));\n  }\n#else\n  (void) sock;\n  return 0;\n#endif /* TCP_NODELAY */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code in this function calls MHD_socket_set_nodelay_ either directly or indirectly. Reasons not to investigate any fragments further: \n\n- Function signature and parameters: The declaration/definition of MHD_socket_set_nodelay_ is just the entry point and contains no self-call.\n\n- Constant definitions (off_val, on_val): These are simple local const initializations and cannot cause any recursive call.\n\n- setsockopt call: This is a single call to the standard library/system API setsockopt. There is no indication in this translation unit that setsockopt is a macro or wrapper that could call back into MHD_socket_set_nodelay_. No function pointer or callback is passed to setsockopt that could indirectly invoke this function.\n\n- Preprocessor conditional and alternate branch: The #else branch casts away sock and returns 0; this contains no function calls and therefore cannot be recursive.\n\n- No function pointers, callbacks, or global state used here that would enable an indirect call chain back to MHD_socket_set_nodelay_.\n\nGiven the provided code alone, there is no direct or indirect self-call and therefore no fragment requires investigation under MISRA C 2023 Rule 17.2."
}