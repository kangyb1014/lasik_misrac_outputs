{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_run_from_select2': {'callees': ['MHD_DLOG', 'MHD_epoll', 'MHD_cleanup_connections', 'resume_suspended_connections', 'internal_run_from_select'], 'callers': ['MHD_run_from_select']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'MHD_epoll': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'resume_suspended_connections', 'get_timeout_millisec_int', 'new_connections_list_process_', 'MHD_accept_connection', 'MHD_connection_handle_idle', 'call_handlers'], 'callers': ['MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread']}, 'MHD_cleanup_connections': {'callees': ['__builtin_unreachable', 'cleanup_upgraded_connection', 'MHD_pool_destroy', 'MHD_ip_limit_del', 'MHD_destroy_response'], 'callers': ['MHD_add_connection', 'internal_run_from_select', 'MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread', 'close_all_connections', 'MHD_get_daemon_info']}, 'resume_suspended_connections': {'callees': ['__builtin_unreachable', 'MHD_monotonic_msec_counter', 'MHD_DLOG'], 'callers': ['MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'close_all_connections']}, 'internal_run_from_select': {'callees': ['new_connections_list_process_', 'MHD_accept_connection', 'call_handlers', 'MHD_cleanup_connections'], 'callers': ['MHD_run_from_select2', 'MHD_select']}, 'MHD_run_from_select': {'callees': ['MHD_run_from_select2'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result",
    "MHD_NO",
    "MHD_D_IS_USING_POLL_",
    "MHD_D_IS_USING_THREADS_",
    "MHD_D_IS_USING_EPOLL_",
    "MHD_DLOG",
    "_",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "HAVE_MESSAGES",
    "EPOLL_SUPPORT",
    "struct MHD_Daemon",
    "MHD_TEST_ALLOW_SUSPEND_RESUME",
    "resume_suspended_connections",
    "internal_run_from_select",
    "MHD_epoll",
    "MHD_cleanup_connections",
    "fd_set",
    "FD_SETSIZE",
    "INT_MAX",
    "__builtin_unreachable"
  ],
  "explanation": "For each symbol: \n\n- _MHD_EXTERN: This macro precedes the function signature and may expand to compiler-specific storage-class specifiers or attributes (e.g. __attribute__ or __declspec). Inspecting its definition is necessary to decide if a language extension is used.\n\n- enum MHD_Result: The function return type; its definition must be checked for non\u2011standard enum extensions or compiler-specific annotations.\n\n- MHD_NO: The enum/constant used as a return value. Need the definition to confirm it is a standard enum/constant and not created via an extension.\n\n- MHD_D_IS_USING_POLL_, MHD_D_IS_USING_THREADS_, MHD_D_IS_USING_EPOLL_: These predicate macros control code flow. Macros can hide compiler extensions (builtins, attributes, statement-expressions). Their definitions must be checked.\n\n- MHD_DLOG: Logging macro/function invoked inside this function. MHD_DLOG is often a variadic macro or wrapper that may use compiler extensions (variadic macro syntax, __attribute__((format)), builtin helpers). Its expansion must be inspected.\n\n- _: The translation macro (gettext-style) used around string literals. Macros could be implemented with non-standard constructs; check its definition.\n\n- HAS_FD_SETSIZE_OVERRIDABLE, HAVE_MESSAGES, EPOLL_SUPPORT: These configuration macros determine which code paths are compiled. To prove absence of language extensions you must review the alternate code paths enabled/disabled by these macros (their definitions or configuration headers).\n\n- struct MHD_Daemon: The daemon type is dereferenced in the function (options, fdset_size, fdset_size_set_by_app). The struct or its field declarations could contain attributes, bitfields, or other compiler-specific annotations\u2014inspect its definition.\n\n- MHD_TEST_ALLOW_SUSPEND_RESUME: Option bitmask tested on daemon->options; its definition (macro/enum) should be checked for non\u2011standard constructs.\n\n- resume_suspended_connections, internal_run_from_select, MHD_epoll, MHD_cleanup_connections: These callees may be declared/defined as inline/static/with attributes or may themselves invoke compiler builtins (e.g. __builtin_unreachable). To determine whether the target function uses extensions (directly or via macros/calls inlined/expanded into it), their declarations/definitions must be inspected.\n\n- fd_set, FD_SETSIZE: These system types/macros are used in comparisons and casts. Rarely an issue, but platforms can redefine these in non-standard ways; confirm they come from standard headers and have no extensions.\n\n- INT_MAX: From limits.h; include to ensure no non\u2011standard redefinition.\n\n- __builtin_unreachable: This is a known compiler builtin (language extension). It appears in the call graph of callees; the analysis must check whether any macros or inlined callees expand to or call this builtin (or other builtins). If present in any symbol expanded/inlined into this function, it would constitute use of a language extension.\n\nIn short: collect the macro definitions, type/enum/struct declarations, and the declarations/definitions of the direct callees so the next agent can determine whether any of them (or their expansions) introduce compiler-specific language extensions into the target function's compiled code."
}