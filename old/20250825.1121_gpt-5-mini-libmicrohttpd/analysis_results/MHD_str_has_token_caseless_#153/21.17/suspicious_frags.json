{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_str_has_token_caseless_:\n_MHD_static_inline bool\ncharsequalcaseless (const char c1, const char c2)\n{\n  return ( (c1 == c2) ||\n           (isasciiupper (c1) ?\n            ((c1 - 'A' + 'a') == c2) :\n            ((c1 == (c2 - 'A' + 'a')) && isasciiupper (c2))) );\n}\n...\n_MHD_static_inline bool\nisasciiupper (char c)\n{\n  return (c >= 'A') && (c <= 'Z');\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "while (0 != *str && ',' != *str)\n      str++;",
    "while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;",
    "if (! charsequalcaseless (sc, tc))\n        break;",
    "if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }",
    "while (0 != *str)",
    "i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];"
  ],
  "explanation": "Rule 21.17 concerns accesses beyond the bounds of objects referenced by pointer parameters to string.h functions. The presented function does not call any <string.h> functions, so the rule does not apply directly to such calls. However, direct pointer/index accesses still can read beyond object bounds and should be investigated. The fragments listed above are the places where the code reads from the input buffers (str and token) without a prior guaranteed bound check and therefore merit inspection: notably token[i++] is used before any check that i < token_len, so reading token may exceed the provided token_len. All other pointer uses to *str in the function are covered below and thus were not flagged:\n\n- The early guard if (0 == token_len) return false; prevents token_len == 0 cases.\n- The outer loop condition while (0 != *str) ensures entry only when str points to a non-null character; inner whitespace-skipping loops compare *str to specific characters and will stop at '\\0' (they do not advance past '\\0' because the comparison fails on '\\0'), so those reads are bounded by the string terminator (unless the caller provided a non-terminated buffer, which is a caller contract violation rather than a local code issue). Thus individual *str reads (other than the ones already listed) are not inherently out-of-bounds given a properly NUL-terminated str.\n- The main concrete risk is token[i++] being performed before verifying i < token_len; that can read beyond the token object if token is shorter than token_len or if token_len is not consistent with the actual buffer. This is why the block extracting sc and tc and the subsequent comparison were flagged.\n- The helper functions charsequalcaseless and isasciiupper perform character arithmetic and comparisons but do not call any <string.h> functions; they do not perform indexed accesses into externally sized buffers and therefore are not relevant to Rule 21.17.\n\nTherefore the reported fragments cover all code locations that can lead to reads beyond the bounds of the objects referenced by the pointer parameters in this function. Other lines were not reported because either they do not perform pointer/indexed reads into the provided buffers or they are guarded by checks that prevent dereferencing beyond the NUL terminator (assuming a properly NUL-terminated str), so they do not present the same out-of-bounds risk with respect to Rule 21.17."
}