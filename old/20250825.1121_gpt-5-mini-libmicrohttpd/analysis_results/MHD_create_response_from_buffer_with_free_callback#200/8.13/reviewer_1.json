{
  "user_message": "An agent A claimed that the following MHD_create_response_from_buffer_with_free_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_buffer_with_free_callback.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback (size_t size,\n                                                    void *buffer,\n                                                    MHD_ContentReaderFreeCallback\n                                                    crfc)\n{\n  return MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                                 buffer,\n                                                                 crfc,\n                                                                 buffer);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *buffer' is not const-qualified. If the function does not modify the data in 'buffer' (it only supplies it to the response and to a free-callback), the pointer should be 'const void *buffer'. Leaving it as 'void *' therefore violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 encourages using const for pointers that are not used to modify the pointee, but that must be judged in the context of the API and how the pointer is used. This function forwards the buffer pointer as the \"cls\" argument to MHD_create_response_from_buffer_with_free_callback_cls (and thus to the free-callback). The free-callback API (and typical free callbacks) expect a void * context that may be passed to free() or otherwise treated as modifiable/owned memory. Because the pointer is used as an opaque ownership/context pointer for a callback that will likely deallocate or otherwise require a non-const void *, it is appropriate that the parameter is void * rather than const void *. Changing it to const void * would break the callback signature or require casts. Therefore, given the shown usage, this is not a violation of MISRA C 2023 Rule 8.13."
}