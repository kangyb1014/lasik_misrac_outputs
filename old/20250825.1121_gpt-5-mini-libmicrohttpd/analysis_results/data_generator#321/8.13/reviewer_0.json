{
  "user_message": "An agent A claimed that the following data_generator code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of data_generator.\n```c\nstatic ssize_t\ndata_generator (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) pos; /* Unused. Silent compiler warning. */\n  if (max < 80)\n    return 0;\n  memset (buf, 'A', max - 1);\n  buf[79] = '\\n';\n  return 80;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cls' is declared as void * but is not used or modified in the function (it is explicitly cast to void). Per Rule 8.13 it should be const-qualified (e.g. const void *cls). Note that 'buf' must remain char * because the function writes to it (memset and assignment).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA Rule 8.13 prefers pointers to point to const-qualified types when the pointed-to object is not modified. However, that preference does not override the requirement to match an externally mandated function prototype (e.g. a callback signature) or other interface constraints. In the snippet, the parameter cls is unused and could, in isolation, be declared const void *cls to satisfy 8.13. But there is no evidence in the report that this function is not required to match an external API whose prototype uses void *; if it must match that prototype, changing the type would be incorrect. Because the agent did not establish that a change to const is permissible, the claim of a definite MISRA 8.13 violation is not justified. If the function is purely local and not constrained by an external prototype, then the parameter should indeed be const-qualified (or removed), otherwise the current declaration is acceptable."
}