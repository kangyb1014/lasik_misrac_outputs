{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of data_generator:\n```c\nstatic ssize_t\ndata_generator (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) pos; /* Unused. Silent compiler warning. */\n  if (max < 80)\n    return 0;\n  memset (buf, 'A', max - 1);\n  buf[79] = '\\n';\n  return 80;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn 80;\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The function guards with if (max < 80) return 0; so when execution reaches the memset and buf[79] assignment, max >= 80. memset(buf, 'A', max - 1) writes at most max-1 bytes (within the buffer of size max) and buf[79] (index 79) is < max, so no out-of-bounds access by the string.h call. The statement return 80; itself does not invoke any string.h function and does not cause a bounds violation. (Note: there is a possible logical inconsistency when max > 80 because memset writes max-1 bytes while the function claims to have produced 80 bytes, but that is not a Rule 21.17 bounds violation.)"
}