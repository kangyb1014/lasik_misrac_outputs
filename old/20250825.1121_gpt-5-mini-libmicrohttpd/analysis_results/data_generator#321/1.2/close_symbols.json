{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\ndata_generator (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) pos; /* Unused. Silent compiler warning. */\n  if (max < 80)\n    return 0;\n  memset (buf, 'A', max - 1);\n  buf[79] = '\\n';\n  return 80;\n}\n```\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "ssize_t",
    "uint64_t",
    "size_t",
    "memset",
    "<sys/types.h>",
    "<stdint.h>",
    "<stddef.h>",
    "<string.h>"
  ],
  "explanation": "ssize_t \u2014 The function return type. ssize_t is not part of ISO C (it is commonly provided by POSIX in <sys/types.h>). To decide whether its use is a language/implementation extension (thus a MISRA violation) the analyzer must see the typedef/declaration and determine whether the target compiler documents ssize_t as an extension.\n\nuint64_t \u2014 Used for the pos parameter. uint64_t is defined in <stdint.h> (C99) and may be optional on some implementations; the analyzer must confirm whether this type is provided by the compiler as a standard feature or as an extension.\n\nsize_t \u2014 Used for the max parameter and for sizing. size_t is normally in <stddef.h> (or other standard headers). Confirming its standard provenance helps rule out extension usage.\n\nmemset \u2014 The function calls memset; its prototype is in <string.h>. The analyzer should check that the call matches the standard C library declaration and that the library function is not a compiler-specific extension.\n\n<stdsys/types.h>, <stdint.h>, <stddef.h>, <string.h> \u2014 The relevant headers are listed so the analyzer can locate the exact typedefs/prototypes and consult the compiler/library documentation to decide whether any of the above symbols are provided only as compiler/OS extensions (and therefore would trigger the MISRA rule)."
}