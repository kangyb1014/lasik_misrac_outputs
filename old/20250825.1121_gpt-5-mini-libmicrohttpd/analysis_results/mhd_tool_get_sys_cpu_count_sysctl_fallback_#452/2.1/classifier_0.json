{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_sysctl_fallback_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment is conditionally compiled for non-Linux targets (#ifndef __linux__) and the guarded if-statements (if (0 >= ret)) can be executed at run-time on platforms where the blocks are compiled in. None of the compiled-in statements in the fragment are inherently unreachable: the second if(0 >= ret) can be reached if the first attempt is not present or fails, and the preprocessor excludes the whole fragment on Linux (not an unreachable-code violation in the compiled translation unit). The one possibly suspicious test (sizeof(ret) != value_size) is always false given the immediately preceding assignment value_size = sizeof(ret), but that merely makes that sub-expression constant false \u2014 it does not make surrounding code unreachable in all builds."
}