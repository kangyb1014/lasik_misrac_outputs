{
  "user_message": "An agent A claimed that the following new_connection_close_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of new_connection_close_.\n```c\nstatic void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)\n{\n  mhd_assert (connection->daemon == daemon);\n  mhd_assert (! connection->in_cleanup);\n  mhd_assert (NULL == connection->next);\n  mhd_assert (NULL == connection->nextX);\n#ifdef EPOLL_SUPPORT\n  mhd_assert (NULL == connection->nextE);\n#endif /* EPOLL_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n  {\n    mhd_assert (0 != (daemon->options & MHD_USE_TLS));\n    gnutls_deinit (connection->tls_session);\n  }\n#endif /* HTTPS_SUPPORT */\n  MHD_socket_close_chk_ (connection->socket_fd);\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  free (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThis fragment violates R8.13 if the function MHD_ip_limit_del is declared with a non-const pointer parameter (for example: void MHD_ip_limit_del(struct MHD_Daemon *daemon, void *addr, size_t addr_len)) but only reads the address data. In that case the pointer should be const-qualified (e.g. const void *addr) and connection->addr (and the function parameter) should be const to conform to MISRA C 2023 Rule 8.13. If, however, MHD_ip_limit_del already declares its parameter as const (for example const void *addr), then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is only conditionally correct \u2014 you cannot determine a definite MISRA R8.13 violation from the snippet alone. R8.13 says pointers should point to const-qualified types whenever possible. If the prototype of MHD_ip_limit_del (and the type of connection->addr) declares a non-const pointer but the function only reads the pointed-at data, then that declaration should indeed use a const-qualified pointer and that would be a violation of R8.13. However, the snippet does free(connection->addr) later; if connection->addr must be passed to free (which takes a void *), making connection->addr const may not be possible without casting, so const-qualification might not be \u201cpossible\u201d here. Thus the presence or absence of a violation depends on the (missing) declarations and overall usage: (a) if MHD_ip_limit_del already takes a const void * (or connection->addr is const) then there is no violation, (b) if MHD_ip_limit_del is declared to take a non-const pointer but only reads the data, then that declaration (not necessarily this caller) should be changed to use const and the agent\u2019s report would be correct. In short: plausible but not provable from the provided code alone."
}