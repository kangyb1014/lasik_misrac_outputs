{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of new_connection_close_:\n```c\nstatic void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)\n{\n  mhd_assert (connection->daemon == daemon);\n  mhd_assert (! connection->in_cleanup);\n  mhd_assert (NULL == connection->next);\n  mhd_assert (NULL == connection->nextX);\n#ifdef EPOLL_SUPPORT\n  mhd_assert (NULL == connection->nextE);\n#endif /* EPOLL_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n  {\n    mhd_assert (0 != (daemon->options & MHD_USE_TLS));\n    gnutls_deinit (connection->tls_session);\n  }\n#endif /* HTTPS_SUPPORT */\n  MHD_socket_close_chk_ (connection->socket_fd);\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  free (connection);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)",
    "if (NULL != connection->addr)\n    free (connection->addr);",
    "MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);",
    "free (connection);",
    "gnutls_deinit (connection->tls_session);"
  ],
  "explanation": "Investigations for Rule 8.13 should focus on pointer declarations and pointer-valued arguments that might be better declared to point to const-qualified types. The fragments selected above cover the function parameters and the places where pointer members are passed to other functions or freed, which are the relevant locations to check whether const qualification is possible or appropriate. Other lines in the function do not need investigation for this rule: the mhd_assert checks merely read/compare pointer values (they do not indicate whether a pointee could be const-qualified); MHD_socket_close_chk_ operates on connection->socket_fd (an integer descriptor), not a pointer to data that could be const-qualified; the NULL-checks and assertions about connection->next/nextX/nextE are simple pointer-state checks and not declarations or parameter-passing sites relevant to const qualification. Also, because connection and connection->addr are explicitly freed in this function and connection->tls_session is passed to gnutls_deinit (which modifies/deinitializes the session), those particular pointees cannot be made const in this function's implementation \u2014 but their declarations or the signatures of the called functions (e.g. MHD_ip_limit_del, gnutls_deinit) might still be worth reviewing to ensure pointer const-correctness across interfaces. Other code fragments in the function therefore do not present additional candidates for Rule 8.13 inspection."
}