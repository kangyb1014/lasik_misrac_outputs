{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of new_connection_close_:\n```c\nstatic void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)\n{\n  mhd_assert (connection->daemon == daemon);\n  mhd_assert (! connection->in_cleanup);\n  mhd_assert (NULL == connection->next);\n  mhd_assert (NULL == connection->nextX);\n#ifdef EPOLL_SUPPORT\n  mhd_assert (NULL == connection->nextE);\n#endif /* EPOLL_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n  {\n    mhd_assert (0 != (daemon->options & MHD_USE_TLS));\n    gnutls_deinit (connection->tls_session);\n  }\n#endif /* HTTPS_SUPPORT */\n  MHD_socket_close_chk_ (connection->socket_fd);\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  free (connection);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function new_connection_close_:\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return;\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n    return;\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n    MHD_ip_count_unlock (daemon);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of memcmp in the provided code fragments. The code only performs pointer/null checks, numeric comparisons, and operations on socket address structures and binary keys (e.g. MHD_ip_addr_to_key, MHD_ip_addr_compare used with tfind/tdelete). Those comparisons operate on sockaddr_storage/binary data, not null-terminated strings. new_connection_close_ and MHD_ip_limit_del do not call memcmp nor perform string comparisons of NUL-terminated char arrays, so there are no fragments here that would violate MISRA C 2023 Rule 21.14. If you want a further check, provide the implementations of MHD_ip_addr_to_key and MHD_ip_addr_compare; only those could possibly use memcmp on strings, but based on their purpose they are expected to handle fixed-size binary address data rather than NUL-terminated strings."
}