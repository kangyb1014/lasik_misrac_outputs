{
  "user_message": "An agent A claimed that the following new_connection_close_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of new_connection_close_.\n```c\nstatic void\nnew_connection_close_ (struct MHD_Daemon *daemon,\n                       struct MHD_Connection *connection)\n{\n  mhd_assert (connection->daemon == daemon);\n  mhd_assert (! connection->in_cleanup);\n  mhd_assert (NULL == connection->next);\n  mhd_assert (NULL == connection->nextX);\n#ifdef EPOLL_SUPPORT\n  mhd_assert (NULL == connection->nextE);\n#endif /* EPOLL_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n  if (NULL != connection->tls_session)\n  {\n    mhd_assert (0 != (daemon->options & MHD_USE_TLS));\n    gnutls_deinit (connection->tls_session);\n  }\n#endif /* HTTPS_SUPPORT */\n  MHD_socket_close_chk_ (connection->socket_fd);\n  MHD_ip_limit_del (daemon,\n                    connection->addr,\n                    connection->addr_len);\n  if (NULL != connection->addr)\n    free (connection->addr);\n  free (connection);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe assertion is an executable check with no side effects that documents an invariant already guaranteed by program logic. For example, if new_connection_close_ is only ever called when connection->in_cleanup is false (the call sites and state machine ensure this invariant), then mhd_assert(! connection->in_cleanup); is executed but its removal would not affect program behaviour \u2014 it is dead code.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not justified on the information given. MISRA Rule 2.2 forbids executed code whose removal would not affect program behaviour, but you cannot determine that from the snippet alone. Whether mhd_assert constitutes \"dead code\" depends on (at least): the definition of the mhd_assert macro (does it log/abort/modify state or is it compiled out?), the build configuration, and whether the asserted invariants are provably guaranteed by the rest of the program. Even an assertion that is always true in correct operation may still affect behaviour (diagnostics on failure, aborting, or timing) and so may not be dead code per the rule and its notes. To establish a genuine 2.2 violation you would need evidence that the assertion expands to an executed operation with no side effects in all builds and that its removal would not change program behaviour (including timing/diagnostics). Absent that evidence, the report is not correct."
}