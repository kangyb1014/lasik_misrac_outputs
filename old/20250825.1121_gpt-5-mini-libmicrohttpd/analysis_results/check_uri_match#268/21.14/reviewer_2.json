{
  "user_message": "An agent A claimed that the following check_uri_match code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of check_uri_match.\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses memcmp(uri, connection->rq.url, uri_len) to compare two strings that are null-terminated: uri is explicitly null-terminated earlier (uri[uri_len] = 0 and possibly *qmark = '\\0') and connection->rq.url is associated with connection->rq.url_len. Even though the lengths are checked first, memcmp is being used to compare null-terminated strings, which violates MISRA C 2023 Rule 21.14.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code explicitly null-terminates uri (uri[uri_len] = 0 and possibly *qmark = '\\0'), then uses memcmp(uri, connection->rq.url, uri_len) to compare it with connection->rq.url. MISRA C:2023 Rule 21.14 forbids using memcmp to compare null-terminated strings. The prior length check does not avoid the rule: memcmp is still being applied where at least one operand (uri) is a null-terminated C string, so this usage violates Rule 21.14. (If the intent were to compare pure byte buffers, the code should avoid inserting the NUL terminator or use an appropriate string function such as strncmp with correct guarantees.)"
}