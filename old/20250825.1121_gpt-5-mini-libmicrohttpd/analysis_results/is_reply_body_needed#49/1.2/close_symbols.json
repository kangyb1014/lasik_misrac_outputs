{
  "user_message": "Target function code is:\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'is_reply_body_needed': {'callees': [], 'callers': ['setup_reply_properties', 'MHD_queue_response']}, 'setup_reply_properties': {'callees': ['keepalive_possible', 'is_reply_body_needed'], 'callers': ['build_header_response']}, 'MHD_queue_response': {'callees': ['MHD_DLOG', 'is_reply_body_needed', 'MHD_increment_response_rc', 'MHD_connection_handle_idle', 'MHD_update_last_activity_'], 'callers': ['transmit_error_response_len', 'queue_auth_required_response3_inner', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'return_directory_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'answer_shared_response', 'answer_single_response', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "enum replyBodyUse",
    "RP_BODY_NONE",
    "RP_BODY_HEADERS_ONLY",
    "RP_BODY_SEND",
    "struct MHD_Connection",
    "mhd_assert",
    "MHD_HTTP_NO_CONTENT",
    "MHD_HTTP_NOT_MODIFIED",
    "MHD_HTTP_MTHD_HEAD",
    "MHD_HTTP_MTHD_CONNECT"
  ],
  "explanation": "Needed symbols and why:\n\n- enum replyBodyUse: The function returns this enum type. Inspecting the enum definition is required to check for any compiler-specific extensions used in the enum declaration (e.g. non\u2011standard underlying type attributes, GCC __extension__ usage or other compiler-specific annotations).\n\n- RP_BODY_NONE, RP_BODY_HEADERS_ONLY, RP_BODY_SEND: These enumerators (or macros) are returned/used by the function. Their definitions must be checked to ensure they are normal enum constants or defines and do not expand to compiler extensions or annotated expressions.\n\n- struct MHD_Connection: The function accesses members of this struct (c->rq.http_mthd). The struct definition must be inspected for use of language extensions such as anonymous structs/unions, bit\u2011fields with implementation\u2011defined behaviour, nonstandard packing attributes, __attribute__ annotations, or other compiler\u2011specific constructs.\n\n- mhd_assert: This macro/function is used in the function. Many projects implement assert-like macros using compiler extensions (statement expressions, __builtin_expect, __attribute__ annotations, or inline assembly). Its definition must be checked to ensure it does not rely on language/compiler extensions.\n\n- MHD_HTTP_NO_CONTENT, MHD_HTTP_NOT_MODIFIED, MHD_HTTP_MTHD_HEAD, MHD_HTTP_MTHD_CONNECT: These constants/macros are compared against rcode and http_mthd. Their definitions may be simple integer macros or could expand to expressions or use compiler extensions (e.g. cast expressions, typeof, attribute annotations). Inspecting them ensures no language extensions are introduced by these macros.\n\nRationale: To determine whether the target function violates the MISRA rule forbidding compiler language extensions, any types, macros, or members the function uses must be inspected because they may expand or be declared using compiler-specific extensions. The listed symbols cover the return type, all enumerators/values returned, the connection structure and member accessed, and the assert macro used \u2014 these are the likely places where extensions could be hidden."
}