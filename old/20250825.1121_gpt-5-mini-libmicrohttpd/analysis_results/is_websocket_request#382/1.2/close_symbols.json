{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'is_websocket_request': {'callees': [], 'callers': ['ahc_cb']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "enum MHD_Result",
    "MHD_YES",
    "MHD_NO",
    "WS_UPGRADE_VALUE",
    "strcmp",
    "strstr",
    "NULL",
    "struct MHD_Connection",
    "headers/translation unit that declare/define the above (e.g. microhttpd public headers, <string.h>)"
  ],
  "explanation": "You must inspect the definitions/declarations of these symbols to determine whether any compiler language extensions are being used (which would violate the MISRA rule). Specifically:\n\n- enum MHD_Result: the enum definition may contain compiler-specific extensions or attributes (e.g. __attribute__, nonstandard enum storage, or other annotations).  Need the exact declaration.\n- MHD_YES / MHD_NO: these are the enum values or macros for the return codes; they may be macros or defined in a way that hides extensions.\n- WS_UPGRADE_VALUE: this macro/constant provides the comparison string. A macro expansion could use compiler extensions (concatenation, GNU string literal extensions, or other nonstandard constructs).\n- strcmp / strstr: their declarations (and any project wrappers/macros) must be checked to ensure they are the standard library functions and not redefined via compiler builtins or nonstandard macros.\n- NULL: the NULL macro definition can vary; check it to ensure no nonstandard extension is used.\n- struct MHD_Connection: even though unused here, its definition must be inspected in case it uses nonstandard attributes or language extensions that affect the translation unit.\n- headers / translation unit that declare/define the above (e.g. microhttpd public headers, <string.h>): the header files may contain compiler-specific pragmas, attributes, inline semantics, or macro tricks. The translation-unit-level includes/macros can introduce language extensions (GNU attributes, __extension__, builtins), so the exact header contents are needed to conclude compliance.\n\nIn short, examining these symbols (and the headers that define them) lets you detect any use of compiler-specific attributes, builtins, or macro constructs that would constitute a language extension for the MISRA check."
}