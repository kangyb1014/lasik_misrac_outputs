{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function is_websocket_request:\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\n#define WS_UPGRADE_VALUE \"websocket\"\n...\nstruct MHD_Connection\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code fragments. Specific observations: \n\n- No compiler-specific keywords or built-ins are present (e.g. no __attribute__, __asm__, __inline__, __builtin_..., typeof, statement-expressions ({ ... }), __extension__, asm, pragma GCC, or other vendor-specific extensions).\n- The '(void) con;' idiom to silence unused-parameter warnings is standard C and not an extension.\n- The enum declaration and use of 'enum MHD_Result' as a type is standard C (no enum extensions are used). The numeric enumerators (MHD_NO, MHD_YES) are plain standard enumerators.\n- The macro WS_UPGRADE_VALUE is a simple string literal via #define, which is standard preprocessor usage.\n- Standard library functions strcmp and strstr are used; these are part of the C standard library, not compiler extensions.\n- The ternary operator and pointer/NULL comparisons are standard C constructs.\n\nNote: The ellipsis (...) shown in the additional-code block appears to be truncation/omission in the snippet, not an actual extension. Based on the provided code, there are no fragments that require investigation for MISRA C 2023 Rule 1.2 (use of language extensions)."
}