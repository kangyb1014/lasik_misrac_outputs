{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'is_websocket_request': {'callees': [], 'callers': ['ahc_cb']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "WS_UPGRADE_VALUE",
    "struct MHD_Connection (definition)",
    "ahc_cb (declaration and call-site)",
    "strcmp (prototype, from <string.h>)",
    "strstr (prototype, from <string.h>)"
  ],
  "explanation": "To determine whether is_websocket_request violates the MISRA rule that a pointer should point to a const-qualified type whenever possible, the analyser needs the following symbols:\n\n- WS_UPGRADE_VALUE: The upgrade value compared by strcmp; its declaration/type (e.g. \"const char *\" vs \"char[]\" or \"char *\") is required to know whether a non-const pointer to character data is being used when it could/should be const.\n\n- struct MHD_Connection (definition): The parameter con is declared as \"struct MHD_Connection *con\" but is unused in the function. To decide whether the pointer parameter could/should be changed to \"const struct MHD_Connection *con\" (and therefore whether the current declaration violates the rule), the concrete type/definition is needed and the analyser should inspect usages in callers.\n\n- ahc_cb (declaration and call-site): ahc_cb is the only caller shown in the static call graph. The analyser must inspect the call-site and ahc_cb's own handling of the MHD_Connection pointer to ensure changing is_websocket_request's parameter to point to const would not cause incompatible semantics in the codebase and to verify whether callers pass a const or non-const pointer.\n\n- strcmp (prototype, from <string.h>): To confirm that passing upg_header (const char *) to strcmp does not violate const-correctness, the analyser needs the standard prototype (int strcmp(const char *, const char *)) to check that the function accepts const-qualified arguments.\n\n- strstr (prototype, from <string.h>): Similarly, to verify that passing con_header (const char *) and the string literal \"Upgrade\" to strstr is const-correct, the analyser needs the prototype (char *strstr(const char *, const char *)) to inspect parameter const-qualification (and understand any implications of the return type).\n\nThese symbols give the necessary information about the pointee types and caller usage so the next agent can decide if any pointer parameter (notably con or any global string symbol) should be made const to comply with the MISRA rule."
}