{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'struct MHD_Connection *con' is not const-qualified even though it is unused and not modified in the function. It could be declared as 'const struct MHD_Connection *con' (or removed) so the pointer should point to a const-qualified type. The other pointer parameters are already const-qualified.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function is_websocket_request:\n#define WS_UPGRADE_VALUE \"websocket\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in general. MISRA C:2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In the shown code the parameter 'struct MHD_Connection *con' is unused ((void) con) and not modified; therefore it could be declared as 'const struct MHD_Connection *con' (or removed) and so it violates Rule 8.13. The only possible justification for keeping it non-const would be if the function must match an external/non\u2011modifiable API or callback prototype that requires a non-const pointer; no such constraint is demonstrated in the snippet (the function is static), so the report is reasonable and correct."
}