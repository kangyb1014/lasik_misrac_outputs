{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'con' is declared as 'struct MHD_Connection *con' but is unused and never modified in the function. Per MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so this parameter should be declared as 'const struct MHD_Connection *con' (or otherwise const-qualified) if the API/signature allows it. The current non-const pointer therefore violates the rule unless the function must match an external API that requires a non-const parameter (in which case the deviation should be documented).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function is_websocket_request:\n#define WS_UPGRADE_VALUE \"websocket\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible. In the body of is_websocket_request the parameter con is unused (the code even uses (void) con;), so from a purely local view the function does not modify the object pointed to by con and could accept a pointer-to-const.\n\nHowever, MISRA\u2019s \u201cwhenever possible\u201d must be interpreted in the context of the required function signature. The use of (void) con strongly suggests this parameter exists only to satisfy an external API/callback prototype (for example, libmicrohttpd callback signatures require a non-const struct MHD_Connection *). If the function must match such an external prototype, the signature cannot be changed and there is no MISRA violation \u2014 instead a documented deviation is appropriate. If there is no external requirement and you are free to change the signature, then the parameter should be declared as const struct MHD_Connection *con to comply with Rule 8.13.\n\nAgent A\u2019s report is incomplete: it correctly identifies a potential issue, but it does not establish whether the signature is constrained by an external API. Without evidence that the signature can be changed, you cannot conclude a definite violation. The correct action is either (a) change the parameter to point to a const-qualified type if the API allows, or (b) document a deviation if the non-const signature is mandated by an external API.\n"
}