{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\ninternal_add_connection (struct MHD_Daemon *daemon,\n                         MHD_socket client_socket,\n                         const struct sockaddr_storage *addr,\n                         socklen_t addrlen,\n                         bool external_add,\n                         bool non_blck,\n                         bool sk_spipe_supprs,\n                         enum MHD_tristate sk_is_nonip)\n{\n  struct MHD_Connection *connection;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Direct add to master daemon could never happen. */\n  mhd_assert (NULL == daemon->worker_pool);\n#endif\n\n  if (MHD_D_IS_USING_SELECT_ (daemon) &&\n      (! MHD_D_DOES_SCKT_FIT_FDSET_ (client_socket, daemon)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"New connection socket descriptor (%d) is not less \" \\\n                 \"than FD_SETSIZE (%d).\\n\"),\n              (int) client_socket,\n              (int) MHD_D_GET_FD_SETSIZE_ (daemon));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n    errno = ENFILE;\n#endif\n    return MHD_NO;\n  }\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (! non_blck) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Epoll mode supports only non-blocking sockets\\n\"));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(EINVAL) && (EINVAL + 0 != 0)\n    errno = EINVAL;\n#endif\n    return MHD_NO;\n  }\n\n  connection = new_connection_prepare_ (daemon,\n                                        client_socket,\n                                        addr, addrlen,\n                                        external_add,\n                                        non_blck,\n                                        sk_spipe_supprs,\n                                        sk_is_nonip);\n  if (NULL == connection)\n    return MHD_NO;\n\n  if ((external_add) &&\n      MHD_D_IS_THREAD_SAFE_ (daemon))\n  {\n    /* Connection is added externally and MHD is thread safe mode. */\n    MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n    DLL_insert (daemon->new_connections_head,\n                daemon->new_connections_tail,\n                connection);\n    daemon->have_new = true;\n    MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n\n    /* The rest of connection processing must be handled in\n     * the daemon thread. */\n    if ((MHD_ITC_IS_VALID_ (daemon->itc)) &&\n        (! MHD_itc_activate_ (daemon->itc, \"n\")))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal new connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n    return MHD_YES;\n  }\n\n  return new_connection_process_ (daemon, connection);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'internal_add_connection': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'new_connection_prepare_', 'new_connection_process_'], 'callers': ['MHD_add_connection', 'MHD_accept_connection']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'new_connection_prepare_': {'callees': ['MHD_ip_limit_add', 'MHD_DLOG', '__builtin_unreachable', 'MHD_ip_limit_del', 'MHD_monotonic_msec_counter', 'MHD_set_http_callbacks_'], 'callers': ['internal_add_connection']}, 'new_connection_process_': {'callees': ['MHD_pool_create', 'MHD_DLOG', '__builtin_unreachable', 'MHD_connection_set_initial_state_', 'MHD_create_named_thread_', 'MHD_pool_destroy', 'MHD_ip_limit_del'], 'callers': ['internal_add_connection', 'new_connections_list_process_']}, 'MHD_add_connection': {'callees': ['MHD_cleanup_connections', 'MHD_DLOG', 'MHD_socket_nonblocking_', 'MHD_socket_noninheritable_', 'internal_add_connection', '__builtin_unreachable'], 'callers': []}, 'MHD_accept_connection': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'MHD_socket_nonblocking_', 'MHD_socket_noninheritable_', 'internal_add_connection'], 'callers': ['internal_run_from_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mhd_assert",
    "MHD_D_IS_USING_SELECT_",
    "MHD_D_DOES_SCKT_FIT_FDSET_",
    "MHD_D_GET_FD_SETSIZE_",
    "MHD_socket_close_chk_",
    "MHD_DLOG",
    "MHD_D_IS_USING_EPOLL_",
    "new_connection_prepare_",
    "MHD_D_IS_THREAD_SAFE_",
    "MHD_mutex_lock_chk_",
    "DLL_insert",
    "MHD_mutex_unlock_chk_",
    "MHD_ITC_IS_VALID_",
    "MHD_itc_activate_",
    "new_connection_process_"
  ],
  "explanation": "For checking the MISRA rule \u201ca function parameter shall not be modified\u201d we must ensure that none of the identifiers used in internal_add_connection expand to code that assigns to the formal parameters (daemon, client_socket, addr, addrlen, external_add, non_blck, sk_spipe_supprs, sk_is_nonip). Each listed symbol is referenced by the function (either as a function call or a macro) and therefore must be inspected to ensure it does not perform assignments to those parameter variables (note: modifying the object pointed to by a pointer parameter is allowed by the rule, but assigning to the parameter variable itself is not). Brief reasons per symbol: \n\n- mhd_assert: a macro/function used at top with daemon; macros can contain assignments \u2014 must confirm it does not assign to the daemon parameter. \n- MHD_D_IS_USING_SELECT_: a macro/inline taking daemon \u2014 could expand to code that mutates the daemon parameter variable; must be checked. \n- MHD_D_DOES_SCKT_FIT_FDSET_: macro/inline taking client_socket and daemon \u2014 must ensure it doesn't assign to either parameter variable. \n- MHD_D_GET_FD_SETSIZE_: macro/inline used with daemon (for logging) \u2014 verify it does not modify daemon. \n- MHD_socket_close_chk_: called with client_socket \u2014 might be a macro that assigns to its argument (e.g. sets it to invalid); must confirm it does not reassign the client_socket parameter variable. \n- MHD_DLOG: logging macro/function used multiple times \u2014 macros sometimes evaluate arguments in ways that could modify them (or expand to statements that assign); confirm it does not assign to any parameter variables passed or referenced. \n- MHD_D_IS_USING_EPOLL_: macro/inline taking daemon \u2014 verify it does not modify daemon. \n- new_connection_prepare_: called with (daemon, client_socket, addr, addrlen, external_add, non_blck, sk_spipe_supprs, sk_is_nonip) \u2014 must inspect its definition to ensure it is a true function (not a macro) and that it does not assign to any of these parameter variables (it may of course modify objects pointed to, which is allowed). \n- MHD_D_IS_THREAD_SAFE_: macro/inline taking daemon \u2014 ensure it does not assign to daemon. \n- MHD_mutex_lock_chk_: called with &daemon->new_connections_mutex \u2014 while it operates on a member of *daemon (allowed), confirm the macro/function does not also assign to the daemon parameter itself. \n- DLL_insert: called with daemon->new_connections_head/tail and connection \u2014 check the macro/function expansion for any accidental assignment to daemon or other formal parameters. \n- MHD_mutex_unlock_chk_: same rationale as lock: verify it does not assign to the daemon parameter. \n- MHD_ITC_IS_VALID_: used with daemon->itc \u2014 ensure the macro/function does not assign to the daemon parameter or any other formal parameter. \n- MHD_itc_activate_: called with daemon->itc and a string \u2014 inspect to ensure it does not assign to daemon or other formals. \n- new_connection_process_: called with daemon and connection \u2014 must verify it does not assign to the daemon parameter (or other formals) via macro-expansion or by other means.\n\nIn short: each of these symbols either (a) is a macro that could expand to code that assigns to the formal parameters, or (b) is a function called with one or more of the formals and therefore needs inspection to ensure the caller's parameter variables are not being reassigned by macro substitution. The next analysis step should review the definitions/implementations (or macro expansions) of these symbols to conclusively determine compliance with the MISRA rule."
}