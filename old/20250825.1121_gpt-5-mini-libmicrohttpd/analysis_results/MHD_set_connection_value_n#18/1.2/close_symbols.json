{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_set_connection_value_n': {'callees': ['MHD_set_connection_value_n_nocheck_'], 'callers': ['connection_add_header']}, 'MHD_set_connection_value_n_nocheck_': {'callees': ['MHD_connection_alloc_memory_'], 'callers': ['MHD_set_connection_value_n', 'MHD_set_connection_value', 'parse_cookies_string', 'get_req_headers']}, 'connection_add_header': {'callees': ['MHD_set_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result",
    "enum MHD_ValueKind",
    "MHD_GET_ARGUMENT_KIND",
    "MHD_NO",
    "MHD_set_connection_value_n_nocheck_ (declaration/definition)",
    "struct MHD_Connection",
    "strlen"
  ],
  "explanation": "To determine whether the target function uses compiler language extensions (MISRA ban), the analyzer must inspect the definitions/declarations that can introduce such extensions: \n\n- _MHD_EXTERN: This macro controls linkage/attributes of the function. It frequently expands to compiler-specific storage-class or attribute annotations (e.g. __attribute__, __declspec). Inspecting its definition is required to detect such extensions.\n\n- enum MHD_Result: The enum definition may include implementation-specific extensions (attributes on the enum or enumerators, or nonstandard underlying type annotations). Check it to ensure no extensions are used.\n\n- enum MHD_ValueKind: Same rationale as above; the enum or related macros could use compiler extensions.\n\n- MHD_GET_ARGUMENT_KIND: This symbol is used in the conditional. It may be a macro or constant that itself uses extensions (e.g. typeof, statement-expression, or __extension__). Its definition must be checked.\n\n- MHD_NO: The return value used by the function \u2014 often a macro or named constant \u2014 could be defined using extensions. Verify its definition.\n\n- MHD_set_connection_value_n_nocheck_ (declaration/definition): The function call target may have nonstandard declaration attributes (visibility, calling conventions, attributes) that are expressed via compiler extensions. Its prototype/definition must be inspected.\n\n- struct MHD_Connection: The type of the connection parameter may carry structure-level extensions (packed attributes, alignment attributes, zero-length/flexible-array usage, or other compiler-specific extensions). Inspecting the struct definition is necessary.\n\n- strlen: Although a standard library function, strlen could be redefined as a macro or wrapper that uses compiler extensions in this codebase. Verify its declaration/definition in the included headers to rule out extensions.\n\nChecking these symbols (their macro expansions, typedefs, prototypes and attribute uses) will allow a precise determination of whether any compiler-specific language extensions are used by the target function."
}