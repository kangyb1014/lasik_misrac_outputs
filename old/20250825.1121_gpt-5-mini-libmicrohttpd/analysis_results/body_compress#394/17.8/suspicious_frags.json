{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of body_compress:\n```c\nstatic enum MHD_Result\nbody_compress (void **buf,\n               size_t *buf_size)\n{\n  Bytef *cbuf;\n  uLongf cbuf_size;\n  int ret;\n\n  cbuf_size = compressBound ((uLong) * buf_size);\n  cbuf = malloc (cbuf_size);\n  if (NULL == cbuf)\n    return MHD_NO;\n  ret = compress (cbuf,\n                  &cbuf_size,\n                  (const Bytef *) *buf,\n                  (uLong) * buf_size);\n  if ((Z_OK != ret) ||\n      (cbuf_size >= *buf_size))\n  {\n    /* compression failed */\n    free (cbuf);\n    return MHD_NO;\n  }\n  free (*buf);\n  *buf = (void *) cbuf;\n  *buf_size = (size_t) cbuf_size;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter variable is assigned to in this function. The code only reads the pointer parameters (buf, buf_size) and modifies the objects they point to via *buf = (void *) cbuf; and *buf_size = (size_t) cbuf_size;. MISRA C 2023 Rule 17.8 permits modification of the object referred to by a pointer parameter while forbidding modification of the pointer parameter itself; there are no assignments to buf or buf_size (the pointer parameters), so no fragments violate the rule. Operations such as free(*buf) and casts (e.g. (uLong) *buf_size) do not modify the parameter variables themselves and therefore do not require investigation under this rule."
}