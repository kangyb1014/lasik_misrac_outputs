{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of body_compress:\n```c\nstatic enum MHD_Result\nbody_compress (void **buf,\n               size_t *buf_size)\n{\n  Bytef *cbuf;\n  uLongf cbuf_size;\n  int ret;\n\n  cbuf_size = compressBound ((uLong) * buf_size);\n  cbuf = malloc (cbuf_size);\n  if (NULL == cbuf)\n    return MHD_NO;\n  ret = compress (cbuf,\n                  &cbuf_size,\n                  (const Bytef *) *buf,\n                  (uLong) * buf_size);\n  if ((Z_OK != ret) ||\n      (cbuf_size >= *buf_size))\n  {\n    /* compression failed */\n    free (cbuf);\n    return MHD_NO;\n  }\n  free (*buf);\n  *buf = (void *) cbuf;\n  *buf_size = (size_t) cbuf_size;\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function body_compress:\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  enum MHD_Result comp;\n  size_t body_len;\n  char *body_str;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO; /* unexpected method */\n  if (! *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n\n  body_str = strdup (PAGE);\n  if (NULL == body_str)\n  {\n    return MHD_NO;\n  }\n  body_len = strlen (body_str);\n  /* try to compress the body */\n  comp = MHD_NO;\n  if (MHD_YES ==\n      can_compress (connection))\n    comp = body_compress ((void **) &body_str,\n                          &body_len);\n  response =\n    MHD_create_response_from_buffer_with_free_callback (body_len,\n                                                        body_str,\n                                                        &free);\n\n  if (NULL == response)\n  {\n    free (body_str);\n    return MHD_NO;\n  }\n\n  if (MHD_YES == comp)\n  {\n    /* Need to indicate to client that body is compressed */\n    if (MHD_NO ==\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\"))\n    {\n      MHD_destroy_response (response);\n      return MHD_NO;\n    }\n  }\n  ret = MHD_queue_response (connection,\n                            200,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I did not find any code fragments that are provably unreachable in all circumstances. Reasoning: \n\n- body_compress: All control paths are reachable depending on runtime conditions (malloc can fail and hit the NULL == cbuf branch, compress can fail or produce no benefit and hit the (Z_OK != ret) || (cbuf_size >= *buf_size) branch, otherwise the success path is taken). There are no statements following an unconditional return within the same block that would make subsequent code unreachable; no constant-condition conditionals or labels that are never jumped to.\n\n- ahc_echo: The early return when !*req_cls is conditional and therefore does not render later code unreachable in all cases. The subsequent paths (allocation failure, successful allocation, optional compression branch, header addition failure) are all conditionally reachable at runtime. The (void) casts are just used to silence unused-parameter warnings and do not create unreachable code.\n\n- No switch statements with constant case fall-through producing unreachable code, no infinite loops with breakless exits, no code after unconditional return statements in the same scope, and no use of compile-time constant conditionals that would make code unreachable.\n\nGiven the provided code, there are no fragments that should be flagged for MISRA C 2023 Rule 2.1 (no unreachable code)."
}