{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_init_mem_pools_:\n```c\nvoid\nMHD_init_mem_pools_ (void)\n{\n#ifdef MHD_SC_PAGESIZE\n  long result;\n  result = sysconf (MHD_SC_PAGESIZE);\n  if (-1 != result)\n    MHD_sys_page_size_ = (size_t) result;\n  else\n    MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#elif defined(_WIN32)\n  SYSTEM_INFO si;\n  GetSystemInfo (&si);\n  MHD_sys_page_size_ = (size_t) si.dwPageSize;\n#else\n  MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#endif /* _WIN32 */\n  mhd_assert (0 == (MHD_sys_page_size_ % ALIGN_SIZE));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_init_mem_pools_:\n#define MHD_SC_PAGESIZE _SC_PAGE_SIZE\n...\n#define MHD_DEF_PAGE_SIZE_ _MHD_FALLBACK_PAGE_SIZE\n...\nstatic size_t MHD_sys_page_size_ = (size_t)\n#if defined(MHD_USE_PAGESIZE_MACRO_STATIC)\n                                   PAGESIZE;\n#elif defined(MHD_USE_PAGE_SIZE_MACRO_STATIC)\n                                   PAGE_SIZE;\n#else  /* ! MHD_USE_PAGE_SIZE_MACRO_STATIC */\n                                   _MHD_FALLBACK_PAGE_SIZE\n...\n#define ALIGN_SIZE (2*sizeof(void*))\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define MHD_SC_PAGESIZE _SC_PAGE_SIZE\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Defining MHD_SC_PAGESIZE as a macro alias to _SC_PAGE_SIZE does not introduce unreachable code. It only makes the first #ifdef branch of MHD_init_mem_pools_ active; the other conditional branches are excluded by the preprocessor and therefore are not unreachable code in the compiled project. A true violation would be, for example, statements that can never be executed at runtime (e.g. code after an unconditional return) or source code that is compiled in but provably never executed. The shown macro definition does not cause such a situation."
}