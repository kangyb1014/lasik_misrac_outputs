{
  "user_message": "An agent A claimed that the following MHD_init_mem_pools_ code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_init_mem_pools_.\n```c\nvoid\nMHD_init_mem_pools_ (void)\n{\n#ifdef MHD_SC_PAGESIZE\n  long result;\n  result = sysconf (MHD_SC_PAGESIZE);\n  if (-1 != result)\n    MHD_sys_page_size_ = (size_t) result;\n  else\n    MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#elif defined(_WIN32)\n  SYSTEM_INFO si;\n  GetSystemInfo (&si);\n  MHD_sys_page_size_ = (size_t) si.dwPageSize;\n#else\n  MHD_sys_page_size_ = (size_t) MHD_DEF_PAGE_SIZE_;\n#endif /* _WIN32 */\n  mhd_assert (0 == (MHD_sys_page_size_ % ALIGN_SIZE));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nMHD_SC_PAGESIZE is defined in the project as a macro (#define MHD_SC_PAGESIZE _SC_PAGE_SIZE). Because of that, the #ifdef MHD_SC_PAGESIZE branch will always be taken and the #elif defined(_WIN32) and #else branches will never be compiled. Those branches are therefore unreachable in the project, which violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_init_mem_pools_:\n#define MHD_SC_PAGESIZE _SC_PAGE_SIZE\n...\n#define MHD_DEF_PAGE_SIZE_ _MHD_FALLBACK_PAGE_SIZE\n...\nstatic size_t MHD_sys_page_size_ = (size_t)\n#if defined(MHD_USE_PAGESIZE_MACRO_STATIC)\n                                   PAGESIZE;\n#elif defined(MHD_USE_PAGE_SIZE_MACRO_STATIC)\n                                   PAGE_SIZE;\n#else  /* ! MHD_USE_PAGE_SIZE_MACRO_STATIC */\n                                   _MHD_FALLBACK_PAGE_SIZE\n...\n#define ALIGN_SIZE (2*sizeof(void*))\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA Rule 2.1 prohibits unreachable code that is present in the compiled program (i.e., code that can never be executed at run time within the given build). Code excluded by the preprocessor (the #elif and #else branches) is not part of the translation unit for the current build configuration, so it is not \"unreachable\" code in the compiled program \u2014 it is simply conditionally excluded by build-time configuration. Conditional compilation for portability (selecting one platform-specific branch) is the intended use here and does not, by itself, violate Rule 2.1. (You do need to ensure that for each actual project build configuration there is no unreachable code in the resulting translation units, but given the scenario as stated there is no Rule 2.1 violation.)"
}