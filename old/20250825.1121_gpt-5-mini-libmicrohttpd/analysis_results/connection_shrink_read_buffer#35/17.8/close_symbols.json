{
  "user_message": "Target function code is:\n```c\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    mhd_assert (0 == c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (0 == c->read_buffer_offset)\n  {\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n  }\n  else\n  {\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'connection_shrink_read_buffer': {'callees': ['MHD_pool_deallocate', 'MHD_pool_reallocate'], 'callers': ['connection_switch_from_recv_to_send']}, 'MHD_pool_deallocate': {'callees': [], 'callers': ['connection_shrink_read_buffer', 'transmit_error_response_len']}, 'MHD_pool_reallocate': {'callees': [], 'callers': ['MHD_connection_alloc_memory_', 'try_ready_chunked_body', 'try_grow_read_buffer', 'connection_shrink_read_buffer', 'connection_maximize_write_buffer', 'MHD_connection_handle_read']}, 'connection_switch_from_recv_to_send': {'callees': ['connection_shrink_read_buffer'], 'callers': ['MHD_connection_handle_idle']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (type/definition)",
    "mhd_assert (macro or function)",
    "MHD_pool_deallocate (prototype)",
    "MHD_pool_reallocate (prototype)",
    "MHD_pool_is_resizable_inplace (macro/prototype)"
  ],
  "explanation": "- struct MHD_Connection (type/definition): required to see whether any of the member accesses (connection->read_buffer, ->read_buffer_size, ->read_buffer_offset, ->pool) are implemented via macros or unusual types that could hide modification of the parameter object or aliasing that changes the parameter variable itself. Also needed to confirm the types of those members (pointer vs pointer-to-pointer) to reason whether called pool routines could indirectly modify the pointer parameter.\n\n- mhd_assert (macro or function): the code uses mhd_assert(...) in several places. If mhd_assert is a macro that expands into an expression with side effects (e.g., evaluating or assigning its argument, or redefining identifiers), it could modify the parameter variable or its alias. You must inspect its definition to ensure it does not assign to the function parameter 'connection'.\n\n- MHD_pool_deallocate (prototype): the function is called with c->pool, c->read_buffer, c->read_buffer_size. Its prototype/signature is needed to confirm it does not take (or internally treat) the passed read_buffer as a pointer-to-pointer or otherwise perform assignments that would modify members of the connection struct in a way that could be considered modifying the parameter variable itself.\n\n- MHD_pool_reallocate (prototype): this routine is used to reallocate the read_buffer. Its signature and semantics are required to confirm it does not receive or return values in a way that would modify the parameter variable 'connection' (for example, by taking a pointer-to-pointer to the connection or via global side-effects that rebind the connection pointer variable). Also needed to know whether it can change the passed pointer object (allowed) versus changing the function parameter variable (not allowed).\n\n- MHD_pool_is_resizable_inplace (macro/prototype): used inside an assertion; its definition may have side effects or hidden assignments. Verify it does not modify the parameter or alias."
}