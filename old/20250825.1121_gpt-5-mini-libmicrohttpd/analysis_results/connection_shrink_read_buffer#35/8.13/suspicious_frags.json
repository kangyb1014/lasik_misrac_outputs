{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of connection_shrink_read_buffer:\n```c\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    mhd_assert (0 == c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (0 == c->read_buffer_offset)\n  {\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n  }\n  else\n  {\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n  }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "void *new_buf;",
    "connection_shrink_read_buffer (struct MHD_Connection *connection)",
    "mhd_assert (c->read_buffer == new_buf);",
    "c->read_buffer = NULL;",
    "c->read_buffer = new_buf;",
    "mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));",
    "MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);",
    "new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);",
    "struct MHD_Connection *const c = connection; /**< a short alias */"
  ],
  "explanation": "Other code fragments do not need investigation for Rule 8.13 because they either perform checks/assertions or clearly modify the pointed-to object (so making the pointee const would be incorrect). Examples include the NULL/size checks, the early return, and the size/offset assertions (these only read state). Assignments to c->read_buffer and c->read_buffer_size (including setting read_buffer to NULL and updating size) clearly mutate the connection object's members, so the pointers involved cannot reasonably be to const-qualified pointee types. The alias 'c' is a const pointer to a modifiable struct (pointer immutability, not pointee), and the code calls pool functions that perform reallocation/deallocation \u2014 operations that inherently require non-const access to the allocated memory. Therefore those non-listed fragments are not relevant to Rule 8.13 and need no further investigation."
}