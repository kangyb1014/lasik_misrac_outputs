{
  "user_message": "Target function code is:\n```c\nstatic int\nrun_mhd (void)\n{\n  MHD_AccessHandlerCallback reply_func;\n  struct MHD_Daemon *d;\n  unsigned int use_num_threads;\n  unsigned int flags = MHD_NO_FLAG;\n  struct MHD_OptionItem opt_arr[16];\n  size_t opt_count = 0;\n  const union MHD_DaemonInfo *d_info;\n  const char *poll_mode;\n  uint16_t port;\n\n  if (tool_params.thread_per_conn)\n    use_num_threads = 0;\n  else\n    use_num_threads = get_num_threads ();\n  printf (\"\\n\");\n\n  print_perf_warnings ();\n\n  printf (\"Responses:\\n\");\n  printf (\"  Sharing:   \");\n  if (tool_params.shared)\n  {\n    reply_func = &answer_shared_response;\n    printf (\"pre-generated shared pool with %u objects\\n\", num_resps);\n  }\n  else if (tool_params.single)\n  {\n    reply_func = &answer_single_response;\n    printf (\"single pre-generated reused response object\\n\");\n  }\n  else\n  {\n    /* Unique responses */\n    if (tool_params.empty)\n      reply_func = &answer_unique_empty_response;\n    else if (tool_params.tiny)\n      reply_func = &answer_unique_tiny_response;\n    else\n      reply_func = &answer_unique_dyn_response;\n    printf (\"one-time response object generated for every request\\n\");\n  }\n  printf (\"  Body size: %s\\n\",\n          get_mhd_response_size ());\n\n  flags |= MHD_USE_ERROR_LOG;\n  flags |= MHD_USE_INTERNAL_POLLING_THREAD;\n  if (tool_params.epoll)\n    flags |= MHD_USE_EPOLL;\n  else if (tool_params.poll)\n    flags |= MHD_USE_POLL;\n  else if (tool_params.select)\n    (void) flags; /* No special additional flag */\n  else\n    flags |= MHD_USE_AUTO;\n\n  if (tool_params.thread_per_conn)\n    flags |= MHD_USE_THREAD_PER_CONNECTION;\n\n  if (! tool_params.date_header)\n    flags |= MHD_USE_SUPPRESS_DATE_NO_CLOCK;\n\n  if (0 != tool_params.connections)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_LIMIT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.connections;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1 < use_num_threads)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_THREAD_POOL_SIZE;\n    opt_arr[opt_count].value = (intptr_t) use_num_threads;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_TIMEOUT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.timeout;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    struct MHD_OptionItem option =\n    { MHD_OPTION_END, 0, NULL };\n    opt_arr[opt_count] = option;\n    if (opt_count >= (sizeof(opt_arr) / sizeof(opt_arr[0])))\n      abort ();\n  }\n  d = MHD_start_daemon (flags, mhd_port, NULL, NULL, reply_func, NULL,\n                        MHD_OPTION_ARRAY, opt_arr, MHD_OPTION_END);\n  if (NULL == d)\n  {\n    fprintf (stderr, \"Error starting MHD daemon.\\n\");\n    return 15;\n  }\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_FLAGS);\n  if (NULL == d_info)\n    abort ();\n  flags = (unsigned int) d_info->flags;\n  if (0 != (flags & MHD_USE_POLL))\n    poll_mode = \"poll()\";\n  else if (0 != (flags & MHD_USE_EPOLL))\n    poll_mode = \"epoll\";\n  else\n    poll_mode = \"select()\";\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_BIND_PORT);\n  if (NULL == d_info)\n    abort ();\n  port = d_info->port;\n  if (0 == port)\n    fprintf (stderr, \"Cannot detect port number. Consider specifying \"\n             \"port number explicitly.\\n\");\n\n  printf (\"MHD is running.\\n\");\n  printf (\"  Bind port:          %u\\n\", (unsigned int) port);\n  printf (\"  Polling function:   %s\\n\", poll_mode);\n  printf (\"  Threading:          \");\n  if (MHD_USE_THREAD_PER_CONNECTION == (flags & MHD_USE_THREAD_PER_CONNECTION))\n    printf (\"thread per connection\\n\");\n  else if (1 == get_num_threads ())\n    printf (\"one MHD thread\\n\");\n  else\n    printf (\"%u MHD threads in thread pool\\n\", get_num_threads ());\n  printf (\"  Connections limit:  %u\\n\", get_mhd_conn_limit (d));\n  printf (\"  Connection timeout: %u%s\\n\", tool_params.timeout,\n          0 == tool_params.timeout ? \" (no timeout)\" : \"\");\n  printf (\"  'Date:' header:     %s\\n\",\n          tool_params.date_header ? \"Yes\" : \"No\");\n  printf (\"To test with remote client use            \"\n          \"http://HOST_IP:%u/\\n\", (unsigned int) port);\n  printf (\"To test with client on the same host use  \"\n          \"http://127.0.0.1:%u/\\n\", (unsigned int) port);\n  printf (\"\\nPress ENTER to stop.\\n\");\n  if (1)\n  {\n    char buf[10];\n    (void) fgets (buf, sizeof(buf), stdin);\n  }\n  MHD_stop_daemon (d);\n  return 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'run_mhd': {'callees': ['get_num_threads', 'print_perf_warnings', 'get_mhd_response_size', 'MHD_start_daemon', 'MHD_get_daemon_info', 'get_mhd_conn_limit', 'MHD_stop_daemon'], 'callers': ['main']}, 'get_num_threads': {'callees': ['get_cpu_core_count', 'get_process_cpu_core_count'], 'callers': ['check_param__connections', 'init_data', 'run_mhd']}, 'print_perf_warnings': {'callees': ['MHD_is_feature_supported'], 'callers': ['run_mhd']}, 'get_mhd_response_size': {'callees': [], 'callers': ['run_mhd']}, 'MHD_start_daemon': {'callees': ['MHD_start_daemon_va'], 'callers': ['main', 'run_mhd']}, 'MHD_get_daemon_info': {'callees': ['MHD_cleanup_connections'], 'callers': ['main', 'run_mhd']}, 'get_mhd_conn_limit': {'callees': [], 'callers': ['run_mhd']}, 'MHD_stop_daemon': {'callees': ['__builtin_unreachable', 'MHD_stop_daemon', 'close_all_connections'], 'callers': ['MHD_start_daemon_va', 'MHD_stop_daemon', 'main', 'run_mhd']}, 'main': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_start_daemon', 'MHD_stop_daemon', 'MHD_destroy_response', 'MHD_get_fdset2', 'MHD_get_timeout64', 'MHD_run', 'MHD_get_daemon_info', 'MHD_get_timeout_i', 'MHD_resume_connection', 'expire_sessions', 'ignore_sigpipe', 'mark_as_html', 'update_directory', 'update_cached_response', 'check_params', 'add_new_users', 'init_rand_data', 'set_self_name', 'process_params', 'check_apply_params', 'init_data', 'run_mhd', 'deinit_data'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_AccessHandlerCallback",
    "struct MHD_Daemon",
    "union MHD_DaemonInfo",
    "struct MHD_OptionItem",
    "MHD_start_daemon",
    "MHD_start_daemon_va",
    "MHD_get_daemon_info",
    "MHD_stop_daemon",
    "get_num_threads",
    "print_perf_warnings",
    "get_mhd_response_size",
    "get_mhd_conn_limit",
    "MHD_OPTION_CONNECTION_LIMIT",
    "MHD_OPTION_THREAD_POOL_SIZE",
    "MHD_OPTION_CONNECTION_TIMEOUT",
    "MHD_OPTION_END",
    "MHD_OPTION_ARRAY",
    "MHD_NO_FLAG",
    "MHD_USE_ERROR_LOG",
    "MHD_USE_INTERNAL_POLLING_THREAD",
    "MHD_USE_EPOLL",
    "MHD_USE_POLL",
    "MHD_USE_AUTO",
    "MHD_USE_THREAD_PER_CONNECTION",
    "MHD_USE_SUPPRESS_DATE_NO_CLOCK",
    "MHD_DAEMON_INFO_FLAGS",
    "MHD_DAEMON_INFO_BIND_PORT",
    "mhd_port",
    "tool_params (type and definition)",
    "num_resps",
    "answer_shared_response",
    "answer_single_response",
    "answer_unique_empty_response",
    "answer_unique_tiny_response",
    "answer_unique_dyn_response"
  ],
  "explanation": "To decide whether run_mhd uses any compiler language extensions you must inspect all externally-declared types, macros and functions that the function uses or that could affect its syntax/semantics. The MHD_* typedefs/structs/unions and MHD_OPTION_* macros may be implemented using compiler extensions (e.g. GCC builtins, attributes, anonymous/unnamed unions/structs, variadic or non-standard macros, compound literals, or inline/variadic wrappers). MHD_start_daemon / MHD_start_daemon_va / MHD_get_daemon_info / MHD_stop_daemon may be macros or wrappers that hide compiler-specific builtins or attributes; their prototypes/definitions must be checked. The MHD flag macros (MHD_USE_*, MHD_NO_FLAG) and option constants (MHD_OPTION_*) might be defined via non-standard constructs. The MHD_OptionItem / MHD_DaemonInfo types must be inspected for anonymous unions/structs or attributes. The global mhd_port and tool_params (and its structure definition) must be checked since their declarations might use extensions (bitfields, attribute annotations, non-standard types). The response handler symbols (answer_*) and num_resps are external function/variable declarations that could use non-standard calling conventions or attributes. Finally, helper functions called by run_mhd (get_num_threads, print_perf_warnings, get_mhd_response_size, get_mhd_conn_limit) must be examined because their declarations/definitions might expose language extensions used in the interaction with run_mhd (calling conventions, attributes, macros). Inspecting these symbols will allow a thorough determination whether run_mhd itself (including the way it calls or initializes external entities) relies on compiler language extensions."
}