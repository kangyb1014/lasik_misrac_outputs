{
  "user_message": "Target function code is:\n```c\nstatic void\nuh_cb (void *cls,\n       struct MHD_Connection *connection,\n       void *req_cls,\n       const char *extra_in,\n       size_t extra_in_size,\n       MHD_socket sock,\n       struct MHD_UpgradeResponseHandle *urh)\n{\n  struct MyData *md;\n  pthread_t pt;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) req_cls;     /* Unused. Silent compiler warning. */\n\n  md = malloc (sizeof (struct MyData));\n  if (NULL == md)\n    abort ();\n  memset (md, 0, sizeof (struct MyData));\n  if (0 != extra_in_size)\n  {\n    md->extra_in = malloc (extra_in_size);\n    if (NULL == md->extra_in)\n      abort ();\n    memcpy (md->extra_in,\n            extra_in,\n            extra_in_size);\n  }\n  md->extra_in_size = extra_in_size;\n  md->sock = sock;\n  md->urh = urh;\n  if (0 != pthread_create (&pt,\n                           NULL,\n                           &run_usock,\n                           md))\n    abort ();\n  /* Note that by detaching like this we make it impossible to ensure\n     a clean shutdown, as the we stop the daemon even if a worker thread\n     is still running. Alas, this is a simple example... */\n  pthread_detach (pt);\n\n  /* This callback must return as soon as possible. */\n\n  /* Data forwarding to \"upgraded\" socket will be started\n   * after return from this callback. */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'uh_cb': {'callees': ['MHD_upgrade_action'], 'callers': []}, 'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MyData",
    "run_usock",
    "MHD_socket",
    "struct MHD_UpgradeResponseHandle",
    "struct MHD_Connection",
    "MHD_upgrade_action",
    "pthread_create",
    "pthread_detach",
    "pthread_t",
    "malloc",
    "memset",
    "memcpy",
    "abort",
    "size_t"
  ],
  "explanation": "You must inspect the declarations/definitions of these symbols to determine whether any compiler or language extensions are used (attributes, non\u2011standard calling conventions, zero\u2011length/flexible array extensions, nested functions, builtins, asm, typeof, __extension__ markers, etc.). Brief rationale per symbol: \n\n- struct MyData: its definition may use language extensions (flexible/zero\u2011length array members, compiler attributes on fields, bit\u2011field widths, packed/aligned attributes). The heap allocation and copy semantics depend on its layout. \n- run_usock: the address-of usage (&run_usock) is passed to pthread_create; its prototype may use non\u2011standard function attributes or nonstandard signature (e.g., non\u2011portable calling conventions or GCC nested function usage). \n- MHD_socket: typedef may expand to an implementation/type that uses compiler extensions or calling conventions (platform typedefs, macros). \n- struct MHD_UpgradeResponseHandle: its definition may include extensions or attributes that are language extensions. \n- struct MHD_Connection: though unused in body, its type declaration could contain extensions/attributes that affect ABI or usage. \n- MHD_upgrade_action: listed in the static call graph; its declaration/definition may contain extensions (macros, attributes) and could be invoked indirectly. \n- pthread_create / pthread_detach: their declarations (or macros wrapping them) may use extension attributes or nonstandard prototypes on some platforms; verify these are standard POSIX prototypes. \n- pthread_t: typedef may expand to an implementation type that uses extensions (e.g., structs with attributes). \n- malloc / memset / memcpy / abort: standard libc functions, but their prototypes in platform headers may include compiler extensions/attributes (e.g., __attribute__((malloc)), __noreturn__)) \u2014 check headers to ensure no non\u2011standard constructs are used. \n- size_t: fundamental type alias from headers; verify its definition is standard and not an extension. \n\nInspecting the above symbol declarations/definitions is sufficient to detect use of typical compiler language extensions that would violate the MISRA rule in the context of uh_cb."
}