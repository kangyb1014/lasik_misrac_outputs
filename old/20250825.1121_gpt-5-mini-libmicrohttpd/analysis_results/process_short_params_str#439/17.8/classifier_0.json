{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_short_params_str:\n```c\nstatic enum PerfRepl_param_result\nprocess_short_params_str (const char *params_str, const char *next_param)\n{\n  if (0 == params_str[0])\n  {\n    fprintf (stderr, \"Unrecognised parameter: -\\n\");\n    return PERF_RPL_PARAM_ERROR;\n  }\n  do\n  {\n    enum PerfRepl_param_result param_res;\n    param_res = process_short_param (params_str, next_param);\n    if (PERF_RPL_PARAM_ONE_CHAR != param_res)\n      return param_res;\n  } while (0 != (++params_str)[0]);\n  return PERF_RPL_PARAM_FULL_STR;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_short_params_str:\nstatic enum PerfRepl_param_result\nprocess_short_param (const char *param, const char *next_param)\n{\n  const char param_chr = param[0];\n  if ('A' == param_chr)\n    return process_param__all_cpus (\"-A\");\n  else if ('t' == param_chr)\n    return process_param__threads (\"-t\", param + 1, next_param);\n  else if ('P' == param_chr)\n    return process_param__thread_per_conn (\"-P\");\n  else if ('e' == param_chr)\n    return process_param__epoll (\"-e\");\n  else if ('p' == param_chr)\n    return process_param__poll (\"-p\");\n  else if ('s' == param_chr)\n    return process_param__select (\"-s\");\n  else if ('E' == param_chr)\n    return process_param__empty (\"-E\");\n  else if ('T' == param_chr)\n    return process_param__tiny (\"-T\");\n  else if ('M' == param_chr)\n    return process_param__medium (\"-M\");\n  else if ('L' == param_chr)\n    return process_param__large (\"-L\");\n  else if ('S' == param_chr)\n    return process_param__shared (\"-S\");\n  else if ('I' == param_chr)\n    return process_param__single (\"-I\");\n  else if ('U' == param_chr)\n    return process_param__unique (\"-U\");\n  else if ('c' == param_chr)\n    return process_param__connections (\"-c\", param + 1, next_param);\n  else if ('O' == param_chr)\n    return process_param__timeout (\"-O\", param + 1, next_param);\n  else if ('V' == param_chr)\n    return process_param__version (\"-V\");\n\n  fprintf (stderr, \"Unrecognised parameter: -%c.\\n\", param_chr);\n  return PERF_RPL_PARAM_ERROR;\n}\n...\nenum PerfRepl_param_result\n{\n  PERF_RPL_PARAM_ERROR,        /**< Error processing parameter */\n  PERF_RPL_PARAM_ONE_CHAR,     /**< Processed exactly one character */\n  PERF_RPL_PARAM_FULL_STR,     /**< Processed current parameter completely */\n  PERF_RPL_PARAM_STR_PLUS_NEXT /**< Current parameter completely and next parameter processed */\n}\n...\nconst char *next_param\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndo\n{\n  enum PerfRepl_param_result param_res;\n  param_res = process_short_param (params_str, next_param);\n  if (PERF_RPL_PARAM_ONE_CHAR != param_res)\n    return param_res;\n} while (0 != (++params_str)[0]);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Violation: the code increments the pointer parameter params_str in the loop via (++params_str)[0], thereby modifying the pointer parameter itself. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer value); only the object pointed-to may be modified."
}