{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls, struct MHD_Connection *con, const char *url, const\n          char *method, const char *version,\n          const char *upload_data, size_t *upload_size, void **req_cls)\n{\n  struct Holder *holder;\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n  (void) cls;\n  (void) url;\n  (void) method;\n  (void) version;\n  (void) upload_data;\n  (void) upload_size;\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  holder = calloc (1, sizeof (struct Holder));\n  if (! holder)\n    return MHD_NO;\n  holder->file = fopen (__FILE__, \"rb\");\n  if (NULL == holder->file)\n    goto file_error;\n  if (Z_OK != deflateInit (&holder->stream, Z_BEST_COMPRESSION))\n    goto stream_error;\n  holder->buf = malloc (CHUNK);\n  if (NULL == holder->buf)\n    goto buf_error;\n  res = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN, 1024, &read_cb,\n                                           holder, &free_cb);\n  if (NULL == res)\n    goto error;\n  ret = MHD_add_response_header (res, MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                 \"deflate\");\n  if (MHD_YES != ret)\n    goto res_error;\n  ret = MHD_add_response_header (res, MHD_HTTP_HEADER_CONTENT_TYPE, \"text/x-c\");\n  if (MHD_YES != ret)\n    goto res_error;\n  ret = MHD_queue_response (con, MHD_HTTP_OK, res);\nres_error:\n  MHD_destroy_response (res);\n  return ret;\nerror:\n  free (holder->buf);\nbuf_error:\n  deflateEnd (&holder->stream);\nstream_error:\n  fclose (holder->file);\nfile_error:\n  free (holder);\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ahc_echo:\nstruct Holder\n{\n  FILE *file;\n  z_stream stream;\n  void *buf;\n}\n...\nstatic ssize_t\nread_cb (void *cls, uint64_t pos, char *mem, size_t size)\n{\n  struct Holder *holder = cls;\n  void *src;\n  void *buf;\n  ssize_t ret;\n  size_t offset;\n  size_t r_size;\n\n  if (pos > SSIZE_MAX)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  offset = (size_t) pos;\n  src = malloc (size);\n  if (NULL == src)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  r_size = fread (src, 1, size, holder->file);\n  if (0 == r_size)\n  {\n    ret = (0 != ferror (holder->file)) ?\n          MHD_CONTENT_READER_END_WITH_ERROR : MHD_CONTENT_READER_END_OF_STREAM;\n    goto done;\n  }\n  if (MHD_YES != compress_buf (&holder->stream, src, r_size, &offset, &buf,\n                               &size, holder->buf))\n    ret = MHD_CONTENT_READER_END_WITH_ERROR;\n  else\n  {\n    memcpy (mem, buf, size);\n    ret = (ssize_t) size;\n  }\n  free (buf); /* Buf may be set even on error return. */\ndone:\n  free (src);\n  return ret;\n}\n...\nstatic void\nfree_cb (void *cls)\n{\n  struct Holder *holder = cls;\n  fclose (holder->file);\n  deflateEnd (&holder->stream);\n  free (holder->buf);\n  free (holder);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  void *src;",
    "  void *buf;",
    "static void\nfree_cb (void *cls)",
    "  memcpy (mem, buf, size);",
    "static ssize_t\nread_cb (void *cls, uint64_t pos, char *mem, size_t size)",
    "  holder->buf = malloc (CHUNK);",
    "  src = malloc (size);",
    "struct Holder\n{\n  FILE *file;\n  z_stream stream;\n  void *buf;\n}",
    "static enum MHD_Result\nahc_echo (void *cls, struct MHD_Connection *con, const char *url, const\n          char *method, const char *version,\n          const char *upload_data, size_t *upload_size, void **req_cls)"
  ],
  "explanation": "I did not mark other code fragments because they either already use const where appropriate or changing them to point-to-const would be inappropriate given how they are used or due to API constraints. Specifically:\n- The string parameters in the function signature are already const-qualified.\n- Many pointers refer to objects that are modified (for example FILE* and z_stream are operated on by fread/fclose/deflate functions); such pointees must not be made const.\n- Several pointer types are part of external/library callback signatures (the HTTP/MHD API) and must match the required prototype; those cannot be changed locally to add const qualification without breaking the API contract.\n- Some buffers are written to (e.g. by fread or by initialization after malloc), so their pointer types should not be const.\n- Memory-management usages (malloc/free) and the response object handling use pointer types in ways that require non-const access.\nGiven the above, I limited the suspicious fragments to places where the code currently uses unqualified void* (or pointer local variables) that appear to be used only as read-only sources (or are returned/consumed by functions) and therefore merit investigation to see whether the pointed-to type could/should be const-qualified."
}