{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of completed_callback:\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function completed_callback:\n#define SMALL (1024*128)\n...\nstatic unsigned int small_deltas[SMALL]\n...\nstruct MHD_Connection\n...\nenum MHD_RequestTerminationCode\n{\n\n  /**\n   * We finished sending the response.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_COMPLETED_OK = 0,\n\n  /**\n   * Error handling the connection (resources\n   * exhausted, application error accepting request,\n   * decrypt error (for HTTPS), connection died when\n   * sending the response etc.)\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_WITH_ERROR = 1,\n\n  /**\n   * No activity on the connection for the number\n   * of seconds specified using\n   * #MHD_OPTION_CONNECTION_TIMEOUT.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_TIMEOUT_REACHED = 2,\n\n  /**\n   * We had to close the session since MHD was being\n   * shut down.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN = 3,\n\n  /**\n   * We tried to read additional data, but the connection became broken or\n   * the other side hard closed the connection.\n   * This error is similar to #MHD_REQUEST_TERMINATED_WITH_ERROR, but\n   * specific to the case where the connection died before request completely\n   * received.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_READ_ERROR = 4,\n\n  /**\n   * The client terminated the connection by closing the socket\n   * for writing (TCP half-closed) while still sending request.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_CLIENT_ABORT = 5\n\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are present in the provided function. Specifically:\n- No compiler-specific keywords or built-ins are used (no __attribute__, __asm__, __builtin_*, typeof, statement expressions, or other vendor-specific extensions).\n- uint64_t and PRIu64 are standard integer type and format macros from C99/C11 <stdint.h>/<inttypes.h>, not compiler extensions.\n- The LL integer suffix (1000000LL) denotes a long long integer constant, which is part of standard C since C99 (only a pre-C99 compiler would treat it as an extension; that would be a compiler/standard issue, not a language-extension construct in the code itself). If you are targeting a pre-C99 compiler that documents long long as an extension, verify against that compiler documentation \u2014 but the code itself does not use any explicit compiler-only language extensions.\n- gettimeofday and struct timeval are POSIX API / library features, not language/compiler extensions; they are library/OS-level APIs and should be considered separately for portability but are not MISRA Rule 1.2 language extensions.\n- Casting to (void) to silence unused warnings, casts to uint64_t, struct/enum usage, array indexing, and standard library calls (fprintf, free) are all standard C constructs.\n\nTherefore there are no code fragments in the provided function that meet the criterion \u201cuses language compiler extensions explicitly stated as an extension in compiler documentation.\u201d If you want checks against a specific compiler (to catch things that that compiler documents as extensions), provide the compiler name/version and its documented extensions and I can re-evaluate."
}