{
  "user_message": "An agent A claimed that the following completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of completed_callback.\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameters 'cls' and 'connection' are declared as non-const pointers but are not modified in the function body; per MISRA C 2023 Rule 8.13 they should be declared to point to const-qualified types (e.g. 'const void *cls' and 'const struct MHD_Connection *connection') unless the callback signature is mandated by an external API. The 'req_cls' parameter must remain a non-const 'void **' because the function obtains and frees the pointed-to storage (freeing would not be appropriate if the pointee were const).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 Rule 8.13 does recommend that pointers point to const-qualified types where possible, but that guidance is subject to constraints imposed by external interfaces. completed_callback is a callback whose parameter types are dictated by the external API (libmicrohttpd\u2019s callback prototype); you cannot change the signature to 'const void *' or 'const struct MHD_Connection *' without breaking the required prototype. In addition, 'req_cls' must remain a non-const 'void **' because the function retrieves and frees the pointee, so const would be inappropriate there. The current use of (void) casts to silence \u201cunused\u201d warnings is acceptable. If the project enforces MISRA checks, document this as an accepted deviation / justification for the external API constraint so static analysis does not report a false positive."
}