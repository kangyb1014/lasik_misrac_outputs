{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of completed_callback:\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function completed_callback:\nstatic unsigned int small_deltas[SMALL]\n...\n#define SMALL (1024*128)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  free (tv);",
    "  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;",
    "  struct timeval *tv = *req_cls;"
  ],
  "explanation": "Rule 17.8 prohibits modifying the pointer parameter itself; the places that need inspection are all uses that obtain and then act on the object via the pointer-parameter req_cls. The three fragments above cover (1) reading the pointer value from the parameter (struct timeval *tv = *req_cls;), (2) accessing the pointed-to object fields via tv (the delta computation), and (3) freeing the pointed-to object (free (tv);). These are the only spots in the function that involve the parameter req_cls or the object it refers to. Other lines (the (void) casts for cls/connection/toe, the NULL check on tv, the small_deltas increment, and fprintf) do not assign to or otherwise modify the pointer parameters themselves and therefore do not need to be investigated for Rule 17.8."
}