{
  "user_message": "An agent A claimed that the following digest_auth_check_all code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_auth_check_all.\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'struct MHD_Connection *connection' is not const-qualified even though this function only reads from it (accesses connection->daemon->dauth_def_nonce_timeout and ->dauth_def_max_nc) and simply forwards it to digest_auth_check_all_inner. If digest_auth_check_all_inner does not modify the connection, the parameter should be declared as 'const struct MHD_Connection *connection'. If the inner routine or other code requires modification of connection, then the non-const is justified.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the information shown. MISRA C:2023 Rule 8.13 indeed recommends that a pointer parameter be to a const-qualified type when it does not need to be modified; however, in this snippet we cannot determine whether the parameter can be const. digest_auth_check_all simply reads a couple of fields from connection and forwards connection to digest_auth_check_all_inner. If digest_auth_check_all_inner (or any other caller/context) requires a modifiable struct (i.e. has a prototype taking struct MHD_Connection * and may modify it), then the non-const parameter is justified and there is no violation. Conversely, if the inner function and all uses do not modify connection, then the parameter could be const and changing it would satisfy Rule 8.13. Because the inner function prototype/behavior and any other uses are not provided, the claim of a definite MISRA 8.13 violation is unproven. To decide conclusively, inspect the signature and implementation of digest_auth_check_all_inner and any other callers; if none modify connection and all prototypes can be changed to take const struct MHD_Connection *, then the outer function should be changed and a violation exists now."
}