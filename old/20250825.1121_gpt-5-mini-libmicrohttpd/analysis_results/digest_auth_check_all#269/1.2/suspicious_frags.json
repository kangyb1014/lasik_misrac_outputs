{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of digest_auth_check_all:\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function digest_auth_check_all:\nstruct MHD_Connection\n{\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * Next pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *nextE;\n\n  /**\n   * Previous pointer for the EDLL listing connections that are epoll-ready.\n   */\n  struct MHD_Connection *prevE;\n#endif\n\n  /**\n   * Next pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *next;\n\n  /**\n   * Previous pointer for the DLL describing our IO state.\n   */\n  struct MHD_Connection *prev;\n\n  /**\n   * Next pointer for the XDLL organizing connections by timeout.\n   * This DLL can be either the\n   * 'manual_timeout_head/manual_timeout_tail' or the\n   * 'normal_timeout_head/normal_timeout_tail', depending on whether a\n   * custom timeout is set for the connection.\n   */\n  struct MHD_Connection *nextX;\n\n  /**\n   * Previous pointer for the XDLL organizing connections by timeout.\n   */\n  struct MHD_Connection *prevX;\n\n  /**\n   * Reference to the MHD_Daemon struct.\n   */\n  struct MHD_Daemon *daemon;\n\n  /**\n   * Request-specific data\n   */\n  struct MHD_Request rq;\n\n  /**\n   * Reply-specific data\n   */\n  struct MHD_Reply rp;\n\n  /**\n   * The memory pool is created whenever we first read from the TCP\n   * stream and destroyed at the end of each request (and re-created\n   * for the next request).  In the meantime, this pointer is NULL.\n   * The pool is used for all connection-related data except for the\n   * response (which maybe shared between connections) and the IP\n   * address (which persists across individual requests).\n   */\n  struct MemoryPool *pool;\n\n  /**\n   * We allow the main application to associate some pointer with the\n   * TCP connection (which may span multiple HTTP requests).  Here is\n   * where we store it.  (MHD does not know or care what it is).\n   * The location is given to the #MHD_NotifyConnectionCallback and\n   * also accessible via #MHD_CONNECTION_INFO_SOCKET_CONTEXT.\n   */\n  void *socket_context;\n\n  /**\n   * Close connection after sending response?\n   * Functions may change value from \"Unknown\" or \"KeepAlive\" to \"Must close\",\n   * but no functions reset value \"Must Close\" to any other value.\n   */\n  enum MHD_ConnKeepAlive keepalive;\n\n  /**\n   * Buffer for reading requests.  Allocated in pool.  Actually one\n   * byte larger than @e read_buffer_size (if non-NULL) to allow for\n   * 0-termination.\n   */\n  char *read_buffer;\n\n  /**\n   * Buffer for writing response (headers only).  Allocated\n   * in pool.\n   */\n  char *write_buffer;\n\n  /**\n   * Foreign address (of length @e addr_len).  MALLOCED (not\n   * in pool!).\n   */\n  struct sockaddr_storage *addr;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Thread handle for this connection (if we are using\n   * one thread per connection).\n   */\n  MHD_thread_handle_ID_ tid;\n#endif\n\n  /**\n   * Size of @e read_buffer (in bytes).\n   * This value indicates how many bytes we're willing to read\n   * into the buffer.\n   */\n  size_t read_buffer_size;\n\n  /**\n   * Position where we currently append data in @e read_buffer (the\n   * next char after the last valid position).\n   */\n  size_t read_buffer_offset;\n\n  /**\n   * Size of @e write_buffer (in bytes).\n   */\n  size_t write_buffer_size;\n\n  /**\n   * Offset where we are with sending from @e write_buffer.\n   */\n  size_t write_buffer_send_offset;\n\n  /**\n   * Last valid location in write_buffer (where do we\n   * append and up to where is it safe to send?)\n   */\n  size_t write_buffer_append_offset;\n\n  /**\n   * Position in the 100 CONTINUE message that\n   * we need to send when receiving http 1.1 requests.\n   */\n  size_t continue_message_write_offset;\n\n  /**\n   * Length of the foreign address.\n   */\n  socklen_t addr_len;\n\n  /**\n   * Last time this connection had any activity\n   * (reading or writing).\n   */\n  uint64_t last_activity;\n\n  /**\n   * After how many milliseconds of inactivity should\n   * this connection time out?\n   * Zero for no timeout.\n   */\n  uint64_t connection_timeout_ms;\n\n  /**\n   * Socket for this connection.  Set to #MHD_INVALID_SOCKET if\n   * this connection has died (daemon should clean\n   * up in that case).\n   */\n  MHD_socket socket_fd;\n\n  /**\n   * true if @e socket_fd is not TCP/IP (a UNIX domain socket, a pipe),\n   * false (TCP/IP) otherwise.\n   */\n  enum MHD_tristate is_nonip;\n\n  /**\n   * true if #socket_fd is non-blocking, false otherwise.\n   */\n  bool sk_nonblck;\n\n  /**\n   * true if connection socket has set SIGPIPE suppression\n   */\n  bool sk_spipe_suppress;\n\n  /**\n   * Tracks TCP_CORK / TCP_NOPUSH of the connection socket.\n   */\n  enum MHD_tristate sk_corked;\n\n  /**\n   * Tracks TCP_NODELAY state of the connection socket.\n   */\n  enum MHD_tristate sk_nodelay;\n\n  /**\n   * Has this socket been closed for reading (i.e.  other side closed\n   * the connection)?  If so, we must completely close the connection\n   * once we are done sending our response (and stop trying to read\n   * from this socket).\n   */\n  bool read_closed;\n\n  /**\n   * Some error happens during processing the connection therefore this\n   * connection must be closed.\n   * The error may come from the client side (like wrong request format),\n   * from the application side (like data callback returned error), or from\n   * the OS side (like out-of-memory).\n   */\n  bool stop_with_error;\n\n  /**\n   * Response queued early, before the request is fully processed,\n   * the client upload is rejected.\n   * The connection cannot be reused for additional requests as the current\n   * request is incompletely read and it is unclear where is the initial\n   * byte of the next request.\n   */\n  bool discard_request;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Set to `true` if the thread has been joined.\n   */\n  bool thread_joined;\n#endif\n\n  /**\n   * Are we currently inside the \"idle\" handler (to avoid recursively\n   * invoking it).\n   */\n  bool in_idle;\n\n  /**\n   * Connection is in the cleanup DL-linked list.\n   */\n  bool in_cleanup;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * What is the state of this socket in relation to epoll?\n   */\n  enum MHD_EpollState epoll_state;\n#endif\n\n  /**\n   * State in the FSM for this connection.\n   */\n  enum MHD_CONNECTION_STATE state;\n\n  /**\n   * What is this connection waiting for?\n   */\n  enum MHD_ConnectionEventLoopInfo event_loop_info;\n\n  /**\n   * Function used for reading HTTP request stream.\n   */\n  ReceiveCallback recv_cls;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * If this connection was upgraded, this points to\n   * the upgrade response details such that the\n   * #thread_main_connection_upgrade()-logic can perform the\n   * bi-directional forwarding.\n   */\n  struct MHD_UpgradeResponseHandle *urh;\n#endif /* UPGRADE_SUPPORT */\n\n#ifdef HTTPS_SUPPORT\n\n  /**\n   * State required for HTTPS/SSL/TLS support.\n   */\n  gnutls_session_t tls_session;\n\n  /**\n   * State of connection's TLS layer\n   */\n  enum MHD_TLS_CONN_STATE tls_state;\n\n  /**\n   * Could it be that we are ready to read due to TLS buffers\n   * even though the socket is not?\n   */\n  bool tls_read_ready;\n#endif /* HTTPS_SUPPORT */\n\n  /**\n   * Is the connection suspended?\n   */\n  bool suspended;\n\n  /**\n   * Are we currently in the #MHD_AccessHandlerCallback\n   * for this connection (and thus eligible to receive\n   * calls to #MHD_queue_response()?).\n   */\n  bool in_access_handler;\n\n  /**\n   * Is the connection wanting to resume?\n   */\n  volatile bool resuming;\n\n  /**\n   * Special member to be returned by #MHD_get_connection_info()\n   */\n  union MHD_ConnectionInfo connection_info_dummy;\n}\n...\nstruct DigestAlgorithm\n{\n  /**\n   * A context for the digest algorithm, already initialized to be\n   * useful for @e init, @e update and @e digest.\n   */\n  union DigestCtx ctx;\n\n  /**\n   * The hash calculation algorithm.\n   */\n  enum MHD_DigestBaseAlgo algo;\n\n  /**\n   * Buffer for hex-print of the final digest.\n   */\n#ifdef _DEBUG\n  bool uninitialised; /**< The structure has been not set-up */\n  bool algo_selected; /**< The algorithm has been selected */\n  bool ready_for_hashing; /**< The structure is ready to hash data */\n  bool hashing; /**< Some data has been hashed, but the digest has not finalised yet */\n#endif /* _DEBUG */\n}\n...\nenum MHD_DigestAuthResult\n{\n  /**\n   * Authentication OK.\n   */\n  MHD_DAUTH_OK = 1,\n\n  /**\n   * General error, like \"out of memory\".\n   */\n  MHD_DAUTH_ERROR = 0,\n\n  /**\n   * No \"Authorization\" header or wrong format of the header.\n   * Also may be returned if required parameters in client Authorisation header\n   * are missing or broken (in invalid format).\n   */\n  MHD_DAUTH_WRONG_HEADER = -1,\n\n  /**\n   * Wrong 'username'.\n   */\n  MHD_DAUTH_WRONG_USERNAME = -2,\n\n  /**\n   * Wrong 'realm'.\n   */\n  MHD_DAUTH_WRONG_REALM = -3,\n\n  /**\n   * Wrong 'URI' (or URI parameters).\n   */\n  MHD_DAUTH_WRONG_URI = -4,\n\n  /**\n   * Wrong 'qop'.\n   */\n  MHD_DAUTH_WRONG_QOP = -5,\n\n  /**\n   * Wrong 'algorithm'.\n   */\n  MHD_DAUTH_WRONG_ALGO = -6,\n\n  /**\n   * Too large (>64 KiB) Authorization parameter value.\n   */\n  MHD_DAUTH_TOO_LARGE = -15,\n\n  /* The different form of naming is intentionally used for the results below,\n   * as they are more important */\n\n  /**\n   * The 'nonce' is too old. Suggest the client to retry with the same\n   * username and password to get the fresh 'nonce'.\n   * The validity of the 'nonce' may be not checked.\n   */\n  MHD_DAUTH_NONCE_STALE = -17,\n\n  /**\n   * The 'nonce' was generated by MHD for other conditions.\n   * This value is only returned if #MHD_OPTION_DIGEST_AUTH_NONCE_BIND_TYPE\n   * is set to anything other than #MHD_DAUTH_BIND_NONCE_NONE.\n   * The interpretation of this code could be different. For example, if\n   * #MHD_DAUTH_BIND_NONCE_URI is set and client just used the same 'nonce' for\n   * another URI, the code could be handled as #MHD_DAUTH_NONCE_STALE as\n   * RFCs allow nonces re-using for other URIs in the same \"protection\n   * space\". However, if only #MHD_DAUTH_BIND_NONCE_CLIENT_IP bit is set and\n   * it is know that clients have fixed IP addresses, this return code could\n   * be handled like #MHD_DAUTH_NONCE_WRONG.\n   */\n  MHD_DAUTH_NONCE_OTHER_COND = -18,\n\n  /**\n   * The 'nonce' is wrong. May indicate an attack attempt.\n   */\n  MHD_DAUTH_NONCE_WRONG = -33,\n\n  /**\n   * The 'response' is wrong. Typically it means that wrong password used.\n   * May indicate an attack attempt.\n   */\n  MHD_DAUTH_RESPONSE_WRONG = -34\n}\n...\nenum MHD_DigestAuthMultiQOP\n{\n  /**\n   * Invalid/unknown QOP.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_INVALID = MHD_DIGEST_AUTH_QOP_INVALID,\n\n  /**\n   * No QOP parameter.\n   * As described in old RFC 2069 original specification.\n   * This mode is not allowed by latest RFCs and should be used only to\n   * communicate with clients that do not support more modern modes (with QOP\n   * parameter).\n   * This mode is less secure than other modes and inefficient.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_NONE = MHD_DIGEST_AUTH_QOP_NONE,\n\n  /**\n   * The 'auth' QOP type.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_AUTH = MHD_DIGEST_AUTH_QOP_AUTH,\n\n  /**\n   * The 'auth-int' QOP type.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_AUTH_INT = MHD_DIGEST_AUTH_QOP_AUTH_INT,\n\n  /**\n   * The 'auth' QOP type OR the old RFC2069 (no QOP) type.\n   * In other words: any types except 'auth-int'.\n   * RFC2069-compatible mode is allowed, thus this value should be used only\n   * when it is really necessary.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT =\n    MHD_DIGEST_AUTH_QOP_NONE | MHD_DIGEST_AUTH_QOP_AUTH,\n\n  /**\n   * Any 'auth' QOP type ('auth' or 'auth-int').\n   * Currently supported as 'auth' QOP type only.\n   */\n  MHD_DIGEST_AUTH_MULT_QOP_AUTH_ANY =\n    MHD_DIGEST_AUTH_QOP_AUTH | MHD_DIGEST_AUTH_QOP_AUTH_INT\n}\n...\nenum MHD_DigestAuthMultiAlgo3\n{\n  /**\n   * Unknown or wrong algorithm type.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_INVALID = MHD_DIGEST_AUTH_ALGO3_INVALID,\n\n  /**\n   * The 'MD5' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5 = MHD_DIGEST_AUTH_ALGO3_MD5,\n\n  /**\n   * The 'MD5-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION,\n\n  /**\n   * The 'SHA-256' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256 = MHD_DIGEST_AUTH_ALGO3_SHA256,\n\n  /**\n   * The 'SHA-256-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION,\n\n  /**\n   * The 'SHA-512-256' (SHA-512/256) algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256 = MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * The 'SHA-512-256-sess' (SHA-512/256 session) algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * SHA-256 or SHA-512/256 non-session algorithm, MHD will choose\n   * the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256 | MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * Any non-session algorithm, MHD will choose the preferred or\n   * the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\n    | MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * Any session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The MD5 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_MD5 | MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION,\n\n  /**\n   * The SHA-256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION,\n\n  /**\n   * The SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION,\n\n  /**\n   * Any algorithm, MHD will choose the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_SESSION\n}\n...\n#define digest_setup_zero(da) (void)0\n...\n#define digest_deinit(da) (void)0\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the provided function and related definitions for use of compiler-specific language extensions (examples: GCC/Clang __attribute__ annotations, __asm__ inline assembly, typeof, statement expressions ({ ... }), nested functions, inline assembly, compiler-specific keywords, anonymous structures/unions as non-standard, or other extensions documented as such). None of the shown code fragments use any such extensions. The constructs present are standard C (static function, enums, structs, unions, pointer usage, standard integer types uint8_t/uint32_t from <stdint.h>, bool/_Bool via stdbool.h, preprocessor conditionals, macros, and calls to free). The macros shown (digest_setup_zero, digest_deinit) expand to standard (void)0 and do not rely on compiler extensions. External types (gnutls_session_t, socklen_t) are library/OS typedefs, not compiler language extensions. Therefore there are no code fragments that need investigation for MISRA C 2023 Rule 1.2 (language extensions)."
}