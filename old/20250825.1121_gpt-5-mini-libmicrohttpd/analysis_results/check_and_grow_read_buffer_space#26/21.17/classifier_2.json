{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_and_grow_read_buffer_space:\n```c\nstatic bool\ncheck_and_grow_read_buffer_space (struct MHD_Connection *c)\n{\n  /**\n   * The increase of read buffer size is desirable.\n   */\n  bool rbuff_grow_desired;\n  /**\n   * The increase of read buffer size is a hard requirement.\n   */\n  bool rbuff_grow_required;\n\n  mhd_assert (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info));\n  mhd_assert (! c->discard_request);\n\n  rbuff_grow_required = (c->read_buffer_offset == c->read_buffer_size);\n  if (rbuff_grow_required)\n    rbuff_grow_desired = true;\n  else\n  {\n    rbuff_grow_desired = (c->read_buffer_offset + c->daemon->pool_increment >\n                          c->read_buffer_size);\n\n    if ((rbuff_grow_desired) &&\n        (MHD_CONNECTION_BODY_RECEIVING == c->state))\n    {\n      if (! c->rq.have_chunked_upload)\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN != c->rq.remaining_upload_size);\n        /* Do not grow read buffer more than necessary to process the current\n           request. */\n        rbuff_grow_desired =\n          (c->rq.remaining_upload_size > c->read_buffer_size);\n      }\n      else\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN == c->rq.remaining_upload_size);\n        if (0 == c->rq.current_chunk_size)\n          rbuff_grow_desired =  /* Reading value of the next chunk size */\n                               (MHD_CHUNK_HEADER_REASONABLE_LEN >\n                                c->read_buffer_size);\n        else\n        {\n          const uint64_t cur_chunk_left =\n            c->rq.current_chunk_size - c->rq.current_chunk_offset;\n          /* Do not grow read buffer more than necessary to process the current\n             chunk with terminating CRLF. */\n          mhd_assert (c->rq.current_chunk_offset <= c->rq.current_chunk_size);\n          rbuff_grow_desired =\n            ((cur_chunk_left + 2) > (uint64_t) (c->read_buffer_size));\n        }\n      }\n    }\n  }\n\n  if (! rbuff_grow_desired)\n    return true; /* No need to increase the buffer */\n\n  if (try_grow_read_buffer (c, rbuff_grow_required))\n    return true; /* Buffer increase succeed */\n\n  if (! rbuff_grow_required)\n    return true; /* Can continue without buffer increase */\n\n  /* Failed to increase the read buffer size, but need to read the data\n     from the network.\n     No more space left in the buffer, no more space to increase the buffer. */\n\n  /* 'PROCESS_READ' event state flag must be set only if the last application\n     callback has processed some data. If any data is processed then some\n     space in the read buffer must be available. */\n  mhd_assert (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info));\n\n  if ((! MHD_D_IS_USING_THREADS_ (c->daemon))\n      && (MHD_CONNECTION_BODY_RECEIVING == c->state)\n      && has_unprocessed_upload_body_data_in_buffer (c))\n  {\n    /* The application is handling processing cycles.\n       The data could be processed later. */\n    c->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n    return true;\n  }\n  else\n  {\n    enum MHD_ProcRecvDataStage stage;\n\n    switch (c->state)\n    {\n    case MHD_CONNECTION_INIT:\n      stage = MHD_PROC_RECV_INIT;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd)\n        stage = MHD_PROC_RECV_METHOD;\n      else if (0 == c->rq.req_target_len)\n        stage = MHD_PROC_RECV_URI;\n      else\n        stage = MHD_PROC_RECV_HTTPVER;\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      stage = MHD_PROC_RECV_HEADERS;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      stage = c->rq.have_chunked_upload ?\n              MHD_PROC_RECV_BODY_CHUNKED : MHD_PROC_RECV_BODY_NORMAL;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      stage = MHD_PROC_RECV_FOOTERS;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n    case MHD_CONNECTION_CONTINUE_SENDING:\n    case MHD_CONNECTION_BODY_RECEIVED:\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    case MHD_CONNECTION_START_REPLY:\n    case MHD_CONNECTION_HEADERS_SENDING:\n    case MHD_CONNECTION_HEADERS_SENT:\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    case MHD_CONNECTION_FOOTERS_SENDING:\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n    case MHD_CONNECTION_CLOSED:\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n#endif\n    default:\n      stage = MHD_PROC_RECV_BODY_NORMAL;\n      mhd_assert (0);\n    }\n\n    handle_recv_no_space (c, stage);\n  }\n  return false;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function check_and_grow_read_buffer_space:\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  if (0 == avail_size)\n    return false;               /* No more space available */\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    mhd_assert (0);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    mhd_assert (0);\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  return true;\n}\n...\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n...\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n...\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n...\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n...\nstatic void\nconnection_close_error (struct MHD_Connection *connection,\n                        const char *emsg)\n{\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  if (NULL != emsg)\n    MHD_DLOG (connection->daemon,\n              \"%s\\n\",\n              emsg);\n#else  /* ! HAVE_MESSAGES */\n  (void) emsg; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n  MHD_connection_close_ (connection,\n                         MHD_REQUEST_TERMINATED_WITH_ERROR);\n}\n...\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n...\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n...\nstatic void\nhandle_req_chunk_size_line_no_space (struct MHD_Connection *c,\n                                     const char *chunk_size_line,\n                                     size_t chunk_size_line_size)\n{\n  unsigned int err_code;\n\n  if (NULL != chunk_size_line)\n  {\n    const char *semicol;\n    /* Check for chunk extension */\n    semicol = memchr (chunk_size_line, ';', chunk_size_line_size);\n    if (NULL != semicol)\n    { /* Chunk extension present. It could be removed without any loss of the\n         details of the request. */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      ERR_MSG_REQUEST_CHUNK_LINE_EXT_TOO_BIG);\n    }\n  }\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_BODY_CHUNKED,\n                                           chunk_size_line,\n                                           chunk_size_line_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_CHUNK_LINE_TOO_BIG);\n}\n...\nstatic void\nhandle_req_footers_no_space (struct MHD_Connection *c,\n                             const char *add_footer,\n                             size_t add_footer_size)\n{\n  (void) add_footer; (void) add_footer_size; /* Unused */\n  mhd_assert (c->rq.have_chunked_upload);\n\n  /* Footers should be optional */\n  transmit_error_response_static (c,\n                                  MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                  ERR_MSG_REQUEST_FOOTER_TOO_BIG);\n}\n...\n#define MHD_CHUNK_HEADER_REASONABLE_LEN 24\n...\n#define MHD_SIZE_UNKNOWN UINT64_MAX\n...\n#define MHD_D_IS_USING_THREADS_(d) (0!=(d->options&(MHD_USE_INTERNAL_POLLING_THREAD)))\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmemset (old, 0, old_size);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: the call memset(old, 0, old_size) is executed only when old != NULL and old_size != 0, and the function contains prior checks and assertions that the old block lies entirely inside the pool and that old_size fits (e.g. assertions that (pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size) and pool->size >= old_size). Additionally memcpy(new_blc, old, old_size) is performed immediately before, which would likewise overflow if the region were invalid. Therefore, under the established preconditions and checks, memset does not access beyond the bounds of the object. (If the pool or pointers were corrupted, an out-of-bounds access could occur, but that would be a violation of those invariants, not this call in normal operation.)"
}