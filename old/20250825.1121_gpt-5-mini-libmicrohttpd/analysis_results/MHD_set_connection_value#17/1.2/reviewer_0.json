{
  "user_message": "An agent A claimed that the following MHD_set_connection_value code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: the macro _MHD_EXTERN expands to GCC/Clang attribute syntax __attribute__((visibility(\"default\"))) which is a compiler-specific language extension. The function declaration uses this attribute (via _MHD_EXTERN), so a non\u2011standard compiler extension is used, violating MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_connection_value:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The macro _MHD_EXTERN expands to the GCC/Clang attribute syntax __attribute__((visibility(\"default\"))) which is a compiler-specific language extension (not part of standard C). MISRA C 2023 Rule 1.2 prohibits use of language extensions (unless explicitly handled per project policy), and the provided code unconditionally uses that extension in the function declaration. Therefore the reported violation is valid. (If the project had conditional macros that expand to nothing on strictly standard compilers, that would mitigate the issue; as given the macro is an unconditional GCC attribute.)"
}