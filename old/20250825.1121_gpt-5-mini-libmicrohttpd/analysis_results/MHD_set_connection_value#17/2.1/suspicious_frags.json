{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_set_connection_value:\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the provided functions appear to be unreachable under normal compilation/execution, so there are no fragments to report for investigation under MISRA C 2023 Rule 2.1. Rationale: \n\n- MHD_set_connection_value contains a single return statement that forwards its arguments to MHD_set_connection_value_n_nocheck_; there is no code after this return and no conditional or constant expression that would make any part of the function unreachable.\n- The ternary expressions used to compute key and value lengths depend on the runtime values of key and value (NULL or not), so both branches are potentially reachable and not statically dead.\n- In MHD_set_connection_value_n_nocheck_, the allocation check (if (NULL == pos) return MHD_NO;) and the subsequent path (setting fields and appending to the list, then returning MHD_YES) are both reachable depending on the result of MHD_connection_alloc_memory_. The two branches are therefore not unreachable.\n- The linked-list append code (if (NULL == connection->rq.headers_received_tail) { ... } else { ... }) depends on the runtime state of connection->rq.headers_received_tail; both branches are potentially reachable and not statically dead.\n\nNote: There are other potential issues (for example the allocation uses sizeof(struct MHD_HTTP_Res_Header) while the pointer is declared as struct MHD_HTTP_Req_Header *), but such issues relate to correctness/consistency or undefined behavior rather than to unreachable code per MISRA Rule 2.1, so they are not reported here."
}