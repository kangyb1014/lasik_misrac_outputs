{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_set_thread_name_:\n```c\nstatic int\nMHD_set_thread_name_ (const MHD_thread_ID_native_ thread_id,\n                      const char *thread_name)\n{\n  if (NULL == thread_name)\n    return 0;\n\n#if defined(HAVE_PTHREAD_SETNAME_NP_GNU)\n  return ! pthread_setname_np (thread_id, thread_name);\n#elif defined(HAVE_PTHREAD_SET_NAME_NP_FREEBSD)\n  /* FreeBSD and OpenBSD use different function name and void return type */\n  pthread_set_name_np (thread_id, thread_name);\n  return ! 0;\n#elif defined(HAVE_PTHREAD_SETNAME_NP_NETBSD)\n  /* NetBSD use 3 arguments: second argument is string in printf-like format,\n   *                         third argument is a single argument for printf();\n   * OSF1 use 3 arguments too, but last one always must be zero (NULL).\n   * MHD doesn't use '%' in thread names, so both form are used in same way.\n   */\n  return ! pthread_setname_np (thread_id, thread_name, 0);\n#endif /* HAVE_PTHREAD_SETNAME_NP_NETBSD */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_set_thread_name_:\ntypedef pthread_t MHD_thread_ID_native_\n...\n#define HAVE_PTHREAD_SETNAME_NP_GNU 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code. The items that might appear non-standard are actually not compiler extensions and therefore do not need investigation under MISRA C 2023 Rule 1.2:\n\n- The pthread_setname_np / pthread_set_name_np / pthread_setname_np (NetBSD) calls are OS/library-specific APIs (POSIX/OS-specific), not compiler language extensions. The suffix \u201c_np\u201d indicates a non-portable library function, but that is a library API difference, not a compiler extension documented by compilers.\n- The conditional compilation (#if defined(...)/#elif/#endif) and preprocessor macros (HAVE_PTHREAD_...) are standard C preprocessor usage, not extensions.\n- The typedef of pthread_t to MHD_thread_ID_native_ is standard C typedef usage.\n- The negation operator (!) and return statements used (including return !0) are standard C and not compiler extensions.\n\nThere are no occurrences of known compiler-specific extensions (for example: GCC/Clang __attribute__ or __builtin__ usages, inline assembly, typeof, statement expressions, anonymous structs/unions that are compiler-specific, or other documented compiler-only language features). Therefore no code fragments are reported for further investigation under Rule 1.2."
}