{
  "user_message": "An agent A claimed that the following MHD_set_thread_name_ code violates the MISRA C 2023 rule 17.2.\n<misra_rule>\nMISRA C 2023 Rule 17.2 is Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_thread_name_.\n```c\nstatic int\nMHD_set_thread_name_ (const MHD_thread_ID_native_ thread_id,\n                      const char *thread_name)\n{\n  if (NULL == thread_name)\n    return 0;\n\n#if defined(HAVE_PTHREAD_SETNAME_NP_GNU)\n  return ! pthread_setname_np (thread_id, thread_name);\n#elif defined(HAVE_PTHREAD_SET_NAME_NP_FREEBSD)\n  /* FreeBSD and OpenBSD use different function name and void return type */\n  pthread_set_name_np (thread_id, thread_name);\n  return ! 0;\n#elif defined(HAVE_PTHREAD_SETNAME_NP_NETBSD)\n  /* NetBSD use 3 arguments: second argument is string in printf-like format,\n   *                         third argument is a single argument for printf();\n   * OSF1 use 3 arguments too, but last one always must be zero (NULL).\n   * MHD doesn't use '%' in thread names, so both form are used in same way.\n   */\n  return ! pthread_setname_np (thread_id, thread_name, 0);\n#endif /* HAVE_PTHREAD_SETNAME_NP_NETBSD */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nnamed_thread_starter obtains a function pointer thr_func from param->start_routine and then invokes thr_func(arg). If param->start_routine is (or eventually calls) named_thread_starter (for example, the thread was created with start_routine == named_thread_starter), named_thread_starter will indirectly call itself, causing recursion and thus violating MISRA C 2023 Rule 17.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_thread_name_:\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the shown function. MHD_set_thread_name_ does not call itself (directly or indirectly) \u2014 it only calls platform-specific pthread_setname_np variants (or returns). There is no recursion in MHD_set_thread_name_.\n\nThe scenario described by agent A actually concerns named_thread_starter, not MHD_set_thread_name_. named_thread_starter does invoke a function pointer thr_func obtained from param->start_routine; if that pointer happens to point back to named_thread_starter at runtime then an indirect recursive call would occur and that would violate MISRA C 2023 Rule 17.2. However that is a separate function and not the code shown for MHD_set_thread_name_."
}