{
  "user_message": "An agent A claimed that the following handle_req_cookie_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_cookie_no_space.\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe third parameter of transmit_error_response_static is a non-const pointer (e.g. declared as char *msg) and a string literal macro ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG is passed. Passing a string literal to a non-const char * parameter violates MISRA C 2023 Rule 8.13 \u2014 the pointer should be to a const-qualified type (const char *).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct under the scenario given. MISRA C 2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible. If transmit_error_response_static's third parameter is declared as a non-const pointer (e.g. char *msg) and a string literal macro (ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG) is passed, that indicates the parameter could/should be declared as const char * since string literals are not modifiable. That would be a violation of Rule 8.13. Caveat: if the actual declaration of transmit_error_response_static already uses const char * for that parameter, or if the function legitimately modifies the buffer pointed to (so const is not possible), then there is no violation. Given the agent A scenario (third parameter is non-const and the function does not require modification), the report is correct and the proper fix is to change the parameter to const char * (avoid casting the literal to char *)."
}