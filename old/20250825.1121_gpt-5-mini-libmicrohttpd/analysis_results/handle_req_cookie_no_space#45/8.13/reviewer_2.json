{
  "user_message": "An agent A claimed that the following handle_req_cookie_no_space code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of handle_req_cookie_no_space.\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'c' is declared as 'struct MHD_Connection *c' but in this function it is only used for read-only operations (passed to get_no_space_err_status_code and transmit_error_response_static). Therefore it could and should be declared as 'const struct MHD_Connection *c' to indicate it is not modified. If the called functions accept a const pointer, leaving it non-const violates MISRA C 2023 Rule 8.13. (If those called APIs require a non-const pointer, then making it const here may not be possible.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be determined correct from the snippet alone. MISRA C 2023 Rule 8.13 does encourage declaring pointer parameters as pointing to const-qualified types when they are not modified. In handle_req_cookie_no_space the parameter c is not modified by the body of the function, so making it const would be appropriate \u2014 but only if the functions it is passed to (get_no_space_err_status_code and transmit_error_response_static) accept a pointer-to-const. If those callees take a const struct MHD_Connection * (or can be changed to do so), then the parameter here should be const and agent A\u2019s report is correct. If the callees require a non-const pointer (they modify the object or their prototypes are non-const and cannot be changed), then making c const is not possible and there is no violation of Rule 8.13 in this function as written. Because the prototypes of the called functions are not provided, you cannot definitively conclude a violation from the presented code alone. Recommended action: inspect the prototypes of the two called functions and, if they accept (or can be changed to accept) const struct MHD_Connection *, change this function\u2019s parameter to const; otherwise document/justify why const cannot be used."
}