{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_cookie_no_space:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter 'c' is declared as 'struct MHD_Connection *c' but in this function it is only used for read-only operations (passed to get_no_space_err_status_code and transmit_error_response_static). Therefore it could and should be declared as 'const struct MHD_Connection *c' to indicate it is not modified. If the called functions accept a const pointer, leaving it non-const violates MISRA C 2023 Rule 8.13. (If those called APIs require a non-const pointer, then making it const here may not be possible.)"
}