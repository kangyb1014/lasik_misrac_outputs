{
  "user_message": "Target function code is:\n```c\nstatic void\nhandle_req_cookie_no_space (struct MHD_Connection *c)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_COOKIE,\n                                           NULL,\n                                           0);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'handle_req_cookie_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['parse_connection_headers']}, 'get_no_space_err_status_code': {'callees': ['MHD_lookup_connection_value_n'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space']}, 'transmit_error_response_len': {'callees': ['MHD_DLOG', 'connection_close_error', 'MHD_pool_deallocate', 'MHD_destroy_response', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'build_header_response', 'MHD_pool_reset'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space', 'handle_req_footers_no_space', 'handle_recv_no_space', 'connection_add_header', 'parse_http_version', 'process_request_body', 'parse_connection_headers', 'get_request_line_inner', 'send_redirect_fixed_rq_target', 'get_request_line', 'get_req_header']}, 'parse_connection_headers': {'callees': ['parse_cookie_header', 'handle_req_cookie_no_space', 'MHD_lookup_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len', 'MHD_str_equal_caseless_', 'MHD_str_to_uint64_n_'], 'callers': ['MHD_connection_handle_idle']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "get_no_space_err_status_code",
    "transmit_error_response_static",
    "transmit_error_response_len",
    "MHD_PROC_RECV_COOKIE",
    "ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG"
  ],
  "explanation": "Why each symbol is needed to check for language extensions\n\n- struct MHD_Connection: the parameter type of the target function. Its definition can contain compiler/implementation extensions (anonymous/unnamed structs/unions, bit-field/packing pragmas, GCC attributes, flexible-array-member forms, etc.). Confirming the struct is standard C is required for MISRA rule analysis.\n\n- get_no_space_err_status_code: the function called to produce err_code. You must inspect its declaration/definition to ensure it is not a macro using compiler extensions (statement-expressions, typeof, nested functions), does not rely on nonstandard linkage/attributes (e.g. __attribute__), and that its prototype is present (no implicit-declaration extension).\n\n- transmit_error_response_static: the function called to send the error. Inspect its declaration/definition to ensure it is a real function (not a macro wrapper using extensions), that its prototype is standard C, and that it does not embed compiler-specific constructs or attributes affecting call semantics.\n\n- transmit_error_response_len: call graph shows this related symbol (the target calls a transmit_error_response variant). Include its definition because the static name mismatch may indicate a macro alias or inline wrapper; that wrapper could use extensions (macros with GNU extensions, inline asm, attributes). Checking both names rules out hidden extensions.\n\n- MHD_PROC_RECV_COOKIE: the symbolic constant passed to get_no_space_err_status_code. Its definition (enum/macro) must be checked for nonstandard constructs (macro tricks, use of bitwise extensions, or attribute-bearing macros).\n\n- ERR_MSG_REQUEST_HEADER_WITH_COOKIES_TOO_BIG: the message token passed to transmit_error_response_static. It is likely a macro or static string; its definition must be checked for use of preprocessor extensions or nonstandard constructs (variadic-macro shenanigans, GCC string literal attributes, statement-expressions in macros).\n\nIn short, to determine if the target function uses compiler language extensions you must inspect the referenced types, macros and called-function declarations/definitions listed above because they are the only places extensions could be introduced affecting the target's apparent use of language features."
}