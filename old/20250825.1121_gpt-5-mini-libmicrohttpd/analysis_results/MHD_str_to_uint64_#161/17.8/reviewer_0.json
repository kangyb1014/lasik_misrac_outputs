{
  "user_message": "An agent A claimed that the following MHD_str_to_uint64_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_to_uint64_.\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer parameter 'str' (declared as const char *str) is incremented via 'str++' inside the loop, which modifies the pointer parameter. MISRA C 2023 Rule 17.8 forbids modifying function parameters \u2014 in particular the pointer itself shall not be modified (the pointee may be). Use a local pointer (e.g. const char *p = str) and increment that instead.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_str_to_uint64_:\nconst char *const start = str\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the pointer object itself shall not be modified; the object pointed to may be). In the function MHD_str_to_uint64_ the parameter str (type const char *str) is incremented via str++ inside the loop, which modifies the pointer parameter. Declaring const char *const start = str only makes start a const pointer; it does not prevent modifying the parameter variable str. The recommended fix is to iterate with a local pointer (e.g. const char *p = str; use p++ and compute p - start or store start = p) or make the parameter a const pointer-to-const if appropriate. Therefore the reported violation is valid."
}