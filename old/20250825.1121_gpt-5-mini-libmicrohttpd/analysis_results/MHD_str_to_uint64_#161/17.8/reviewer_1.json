{
  "user_message": "An agent A claimed that the following MHD_str_to_uint64_ code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_str_to_uint64_.\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'str++;' modifies the function parameter pointer 'str' (declared as const char *str). MISRA C 2023 Rule 17.8 prohibits modifying a pointer parameter itself (the pointed-to object may be modified, but not the pointer). Therefore this is a violation. A fix is to use a local pointer copy (e.g. 'const char *p = str;') or declare the parameter as 'const char *const str' to prevent modification.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_str_to_uint64_:\nconst char *const start = str\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified; although the pointed-to object may be changed, the pointer object itself must not be modified. In the code the statement 'str++;' modifies the parameter pointer 'str' (which has type 'const char *'), so this violates Rule 17.8. Declaring a local pointer copy (e.g. 'const char *p = str;' and use p++), or making the parameter itself non-modifiable in the function signature (e.g. using 'const char * const str' in the definition) are appropriate fixes (the former is the usual portable remedy). Note that 'const char *const start = str;' does not prevent modification of the parameter 'str' itself."
}