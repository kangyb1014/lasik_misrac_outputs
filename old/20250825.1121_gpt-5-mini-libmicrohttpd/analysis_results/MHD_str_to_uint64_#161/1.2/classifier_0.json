{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_str_to_uint64_:\n_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation found in the shown fragment. The code uses standard C constructs (the bool type from <stdbool.h> and a plain function definition). The token _MHD_static_inline is an identifier (presumably a macro) and by itself is not a compiler language extension. If that macro expanded to compiler-specific keywords/attributes (for example __attribute__ or a non\u2011standard inline form) then a violation could occur, but no such extension is present in the fragment provided."
}