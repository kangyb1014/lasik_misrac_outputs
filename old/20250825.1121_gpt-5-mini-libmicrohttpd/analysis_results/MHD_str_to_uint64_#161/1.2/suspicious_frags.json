{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_str_to_uint64_:\n_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}"
  ],
  "explanation": "The rest of the code uses standard C constructs (size_t, uint64_t, bool, casting, do/while, pointer arithmetic, UINT64_MAX) and no obvious compiler-specific keywords or attributes (no __attribute__, __asm__, __inline__ spellings, pragmas, or other vendor extensions). The only fragment that might hide a compiler extension is the use of the macro-like token _MHD_static_inline in the isasciidigit definition: its actual definition (not provided) could expand to a compiler-specific extension (for example compiler-specific inline/attribute syntax). That macro definition should be inspected to ensure it does not expand to a documented compiler extension. No other code fragments in the provided snippets appear to rely on language extensions."
}