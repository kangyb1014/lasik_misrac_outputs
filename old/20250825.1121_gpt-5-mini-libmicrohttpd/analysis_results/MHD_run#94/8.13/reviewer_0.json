{
  "user_message": "An agent A claimed that the following MHD_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_run.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter daemon is used only for read-only checks in the fragment (daemon->shutdown and MHD_D_IS_USING_THREADS_(daemon)). Because the pointer is not used to modify the pointed-to object here, it could (and according to MISRA 8.13 should) be declared to point to a const-qualified type (e.g. const struct MHD_Daemon *daemon). Thus the current use indicates a violation of Rule 8.13. (If elsewhere in the function or in called functions the object is actually modified, making the parameter non-const would be justified \u2014 but based on the shown fragment alone, the pointer should be const.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 8.13 says a pointer should be const-qualified when it does not need to be used to modify the pointed-to object, but you must judge that across the whole function (and the functions it calls), not just by local reads. In this snippet MHD_run forwards the daemon pointer to MHD_run_wait(daemon, 0) and uses the daemon in macros; if MHD_run_wait or those macros expect a non-const pointer or may modify the object, the parameter cannot be changed to const. From the fragment alone you cannot determine that the object is never modified, so the agent\u2019s claim (that the parameter should be const and thus this is a Rule 8.13 violation) is unsubstantiated. Therefore the report is not correct."
}