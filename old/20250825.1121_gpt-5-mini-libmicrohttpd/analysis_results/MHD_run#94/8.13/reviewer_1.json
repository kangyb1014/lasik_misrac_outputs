{
  "user_message": "An agent A claimed that the following MHD_run code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_run.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nMHD_run takes a non-const pointer (struct MHD_Daemon *daemon) but in the shown body it only reads fields (daemon->shutdown, MHD_D_IS_USING_THREADS_(daemon)) and passes the pointer to MHD_run_wait(daemon, 0). If neither MHD_run nor the called MHD_run_wait modify the pointed-to object, the parameter should be const-qualified (const struct MHD_Daemon *daemon). Therefore, as shown, this declaration is a violation of MISRA C 2023 Rule 8.13 unless MHD_run_wait or other unseen code requires a mutable pointer.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reporter's reasoning is plausible but incomplete. MISRA Rule 8.13 indeed recommends that a pointer parameter be const-qualified when the function does not need to modify the pointee. However, the snippet alone does not prove a violation: MHD_run forwards the pointer to MHD_run_wait(daemon, 0). If MHD_run_wait (or any other called function reachable from here) is declared to take a non-const struct MHD_Daemon * and/or may modify the object, then MHD_run cannot lawfully change its parameter to const without changing those other APIs. Conversely, to demonstrate a true Rule 8.13 violation you must show that neither MHD_run nor any called function (including MHD_run_wait) ever modifies the pointee and that no API constraints require a non-const parameter. Because that information is not present, the claim of a violation is not proven from the shown code. Therefore the report is not correct as stated; further inspection of MHD_run_wait and related declarations/uses is needed to decide whether the parameter can be const-qualified."
}