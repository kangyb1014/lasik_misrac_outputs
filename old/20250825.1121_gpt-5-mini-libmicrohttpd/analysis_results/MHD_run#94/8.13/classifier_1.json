{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "MHD_run takes a non-const pointer (struct MHD_Daemon *daemon) but in the shown body it only reads fields (daemon->shutdown, MHD_D_IS_USING_THREADS_(daemon)) and passes the pointer to MHD_run_wait(daemon, 0). If neither MHD_run nor the called MHD_run_wait modify the pointed-to object, the parameter should be const-qualified (const struct MHD_Daemon *daemon). Therefore, as shown, this declaration is a violation of MISRA C 2023 Rule 8.13 unless MHD_run_wait or other unseen code requires a mutable pointer."
}