{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void) MHD_run_wait (daemon, 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "This fragment may violate Rule 8.13 when MHD_run_wait does not need to modify the daemon object but its parameter is a non-const pointer. For example, if MHD_run_wait is declared as\n\n  enum MHD_Result MHD_run_wait(struct MHD_Daemon *daemon, unsigned int timeout);\n\nand the implementation only reads from *daemon (does not modify it), then the pointer parameter should be declared as const struct MHD_Daemon *daemon and the call (void) MHD_run_wait(daemon, 0); would violate Rule 8.13 because a pointer that can be to const-qualified data is not const-qualified. If, however, MHD_run_wait legitimately modifies the daemon, then no violation occurs."
}