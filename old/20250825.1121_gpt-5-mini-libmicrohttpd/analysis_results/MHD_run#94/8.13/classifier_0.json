{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter daemon is used only for read-only checks in the fragment (daemon->shutdown and MHD_D_IS_USING_THREADS_(daemon)). Because the pointer is not used to modify the pointed-to object here, it could (and according to MISRA 8.13 should) be declared to point to a const-qualified type (e.g. const struct MHD_Daemon *daemon). Thus the current use indicates a violation of Rule 8.13. (If elsewhere in the function or in called functions the object is actually modified, making the parameter non-const would be justified \u2014 but based on the shown fragment alone, the pointer should be const.)"
}