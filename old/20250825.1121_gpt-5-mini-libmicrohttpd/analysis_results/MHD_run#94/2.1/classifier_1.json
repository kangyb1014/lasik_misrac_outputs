{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_run:\nconst MHD_SCKT_OPT_BOOL_ on = 1\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n(void) MHD_run_wait (daemon, 0);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No evidence in the supplied code that the call is unreachable: MHD_run calls MHD_run_wait(daemon, 0) only when neither daemon->shutdown nor MHD_D_IS_USING_THREADS_(daemon) is true, so the fragment is reachable in general. A concrete violation scenario would be if either condition is a compile-time constant true (for example if MHD_D_IS_USING_THREADS_(daemon) is defined to the constant 1, or daemon->shutdown is guaranteed non\u2011zero by prior preprocessing), in which case the early return is always taken and the (void) MHD_run_wait(daemon, 0); statement (and the subsequent return MHD_YES) would be unreachable, violating MISRA C 2023 Rule 2.1."
}