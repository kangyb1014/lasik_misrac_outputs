{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_run:\nconst MHD_SCKT_OPT_BOOL_ on = 1\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn MHD_YES;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The return MHD_YES; statement is reachable whenever (daemon->shutdown) is false and MHD_D_IS_USING_THREADS_(daemon) is false: the function then calls MHD_run_wait(daemon, 0) and falls through to return MHD_YES. There is no evidence in the provided code that MHD_run_wait is a non\u2011returning function or that MHD_D_IS_USING_THREADS_ always evaluates to true. Therefore no MISRA C 2023 Rule 2.1 violation is present. (A violation would occur only if MHD_run_wait were guaranteed not to return or if the conditional were provably always true, making the return unreachable.)"
}