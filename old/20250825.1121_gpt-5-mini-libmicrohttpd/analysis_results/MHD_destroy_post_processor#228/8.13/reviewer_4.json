{
  "user_message": "An agent A claimed that the following MHD_destroy_post_processor code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_destroy_post_processor.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes a string literal (\"\\n\") to post_process_urlencoded. If post_process_urlencoded's parameter is declared as a non-const pointer (e.g. char *), this violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (const char *) when the pointed data is not intended to be modified. The correct fix is to declare the function parameter as const char * (or otherwise ensure the pointer type is const-qualified). If the function is already declared to take const char *, there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is potentially valid but cannot be confirmed from the code shown. MISRA C:2023 Rule 8.13 requires that pointers should be to const-qualified types whenever possible (i.e. where the pointed-to object is not intended to be modified). The call post_process_urlencoded(pp, \"\\n\", 1); passes a string literal. If post_process_urlencoded is declared with a parameter type like char * (non-const), then that is a violation: the function should instead accept const char * (or an appropriately const-qualified pointer) because the data passed is immutable. However, the source for post_process_urlencoded (or its prototype) is not provided here. If that function is already declared to take a const char * (or equivalent const-qualified type), there is no violation. Therefore the agent\u2019s report is not conclusively correct based on the provided snippet; the correctness depends on the declaration of post_process_urlencoded. Recommended fix (if the function currently takes a non-const pointer) is to change its parameter to const char * (and propagate constness through its callers) or otherwise ensure the pointer type is const-qualified."
}