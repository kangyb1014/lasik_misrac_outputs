{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN char *\nMHD_basic_auth_get_username_password (struct MHD_Connection *connection,\n                                      char **password)\n{\n  struct MHD_BasicAuthInfo *info;\n\n  info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == info)\n    return NULL;\n\n  /* For backward compatibility this function must return NULL if\n   * no password is provided */\n  if (NULL != info->password)\n  {\n    char *username;\n\n    username = malloc (info->username_len + 1);\n    if (NULL != username)\n    {\n      memcpy (username, info->username, info->username_len + 1);\n      mhd_assert (0 == username[info->username_len]);\n      if (NULL != password)\n      {\n        *password = malloc (info->password_len + 1);\n        if (NULL != *password)\n        {\n          memcpy (*password, info->password, info->password_len + 1);\n          mhd_assert (0 == (*password)[info->password_len]);\n\n          free (info);\n          return username; /* Success exit point */\n        }\n#ifdef HAVE_MESSAGES\n        else\n          MHD_DLOG (connection->daemon,\n                    _ (\"Failed to allocate memory.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n      else\n      {\n        free (info);\n        return username; /* Success exit point */\n      }\n\n      free (username);\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to allocate memory.\\n\"));\n#endif /* HAVE_MESSAGES */\n\n  }\n  free (info);\n  if (NULL != password)\n    *password = NULL;\n  return NULL;  /* Failure exit point */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_basic_auth_get_username_password': {'callees': ['MHD_basic_auth_get_username_password3', 'MHD_DLOG'], 'callers': []}, 'MHD_basic_auth_get_username_password3': {'callees': ['MHD_get_rq_bauth_params_', 'MHD_base64_to_bin_n', 'MHD_DLOG'], 'callers': ['MHD_basic_auth_get_username_password', 'ahc_echo', 'answer_to_connection']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "struct MHD_BasicAuthInfo",
    "struct MHD_Connection",
    "MHD_basic_auth_get_username_password3",
    "mhd_assert",
    "MHD_DLOG",
    "_",
    "HAVE_MESSAGES"
  ],
  "explanation": "To determine whether the target function uses compiler/language extensions you must examine any macros, type definitions, and called routines that can hide extensions. Reasoning for each symbol:\n\n- _MHD_EXTERN\n  - The function is declared with this macro. It may expand to compiler-specific storage-class or attribute syntax (for example __attribute__((...)) or __declspec(...)). Inspecting its definition is required to detect use of such extensions.\n\n- struct MHD_BasicAuthInfo\n  - The code accesses fields info->username, info->password, username_len, password_len. The struct's definition must be checked to see if it uses nonstandard features (e.g. zero-length arrays, compiler-specific packing/attributes, bit-field extensions, or nonstandard flexible-array declarations) which would violate the MISRA prohibition on language extensions.\n\n- struct MHD_Connection\n  - The function references connection and passes connection->daemon into MHD_DLOG. The struct definition could contain extension usage (attributes on members, nonstandard types, bitfields, or other compiler-specific annotations) that must be examined.\n\n- MHD_basic_auth_get_username_password3\n  - This callee may be declared with function-level attributes or macros that expand to compiler extensions (visibility attributes, calling-convention specifiers, __attribute__ annotations). Its prototype/definition must be checked for such extensions.\n\n- mhd_assert\n  - This macro/function is used in the code. Its definition may expand to compiler built-ins or inline assembly or other extensions (e.g. __builtin_expect, custom attributes). Inspecting it ensures no language extensions are being used indirectly.\n\n- MHD_DLOG\n  - This logging macro/function is invoked under HAVE_MESSAGES. It often is a macro that may use variadic macro extensions, attributes, or other compiler-specific constructs. Its definition must be checked for use of language extensions (variadic macros are standard in C99 but may be implemented with compiler-specific tokens on some compilers; also it could use __attribute__).\n\n- _ (single underscore macro, usually gettext)\n  - The code uses _(\u2026) in MHD_DLOG calls. The definition of this macro/function could hide compiler extensions or attributes; verify it is a plain macro/function and not an extension.\n\n- HAVE_MESSAGES\n  - This compile-time macro controls whether MHD_DLOG is invoked. Knowing its definition/value is necessary to know whether the extension-bearing code path is enabled and thus whether any extension in MHD_DLOG or related macros actually affects the compiled target function.\n\nNote: Standard library functions used here (malloc, memcpy, free) are normal C library symbols and do not need further inspection for compiler language-extension usage in this context. Inspecting the listed symbols will allow detection of any __attribute__, __declspec, inline asm, zero-length arrays, or other documented compiler extensions that would violate the MISRA rule."
}