{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN char *\nMHD_basic_auth_get_username_password (struct MHD_Connection *connection,\n                                      char **password)\n{\n  struct MHD_BasicAuthInfo *info;\n\n  info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == info)\n    return NULL;\n\n  /* For backward compatibility this function must return NULL if\n   * no password is provided */\n  if (NULL != info->password)\n  {\n    char *username;\n\n    username = malloc (info->username_len + 1);\n    if (NULL != username)\n    {\n      memcpy (username, info->username, info->username_len + 1);\n      mhd_assert (0 == username[info->username_len]);\n      if (NULL != password)\n      {\n        *password = malloc (info->password_len + 1);\n        if (NULL != *password)\n        {\n          memcpy (*password, info->password, info->password_len + 1);\n          mhd_assert (0 == (*password)[info->password_len]);\n\n          free (info);\n          return username; /* Success exit point */\n        }\n#ifdef HAVE_MESSAGES\n        else\n          MHD_DLOG (connection->daemon,\n                    _ (\"Failed to allocate memory.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n      else\n      {\n        free (info);\n        return username; /* Success exit point */\n      }\n\n      free (username);\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to allocate memory.\\n\"));\n#endif /* HAVE_MESSAGES */\n\n  }\n  free (info);\n  if (NULL != password)\n    *password = NULL;\n  return NULL;  /* Failure exit point */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_basic_auth_get_username_password': {'callees': ['MHD_basic_auth_get_username_password3', 'MHD_DLOG'], 'callers': []}, 'MHD_basic_auth_get_username_password3': {'callees': ['MHD_get_rq_bauth_params_', 'MHD_base64_to_bin_n', 'MHD_DLOG'], 'callers': ['MHD_basic_auth_get_username_password', 'ahc_echo', 'answer_to_connection']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_basic_auth_get_username_password3",
    "MHD_DLOG",
    "malloc",
    "free",
    "memcpy",
    "mhd_assert",
    "struct MHD_BasicAuthInfo",
    "struct MHD_Connection",
    "HAVE_MESSAGES",
    "_ (gettext macro)"
  ],
  "explanation": "For checking the MISRA rule \u201ca function parameter should not be modified\u201d for MHD_basic_auth_get_username_password you need the following symbols and why:\n\n- MHD_basic_auth_get_username_password3: This callee produces the 'info' object from the 'connection' parameter and may read/modify the pointees of 'connection'. Knowing its prototype and behavior is necessary to determine whether any modification to the function parameters or the objects they point to occurs before or as a result of this call.\n\n- MHD_DLOG: Logging is conditional in the function (under HAVE_MESSAGES). MHD_DLOG could be a macro or function that takes connection->daemon (derived from the 'connection' parameter). You must inspect it to ensure it does not (via macro expansion or side effects) assign to the parameter variables themselves.\n\n- malloc, free: These standard allocation functions are used to assign to *password and local pointer username. Knowing their semantics confirms that only the pointees are modified (heap memory and the object *password), not the parameter pointer variables themselves.\n\n- memcpy: Used to copy username/password data into allocated buffers. You need to confirm it operates on the memory pointed to by parameters/pointees (allowed) and does not modify the parameter pointer variables.\n\n- mhd_assert: Likely a macro; must check it does not expand to code that assigns to parameters (e.g., unusual debug macros that might alter variables).\n\n- struct MHD_BasicAuthInfo: Definition is required to see types of info->username, info->password, username_len/password_len. This determines whether info->password is a pointer (pointee modification) or whether any assignment in this function could be interpreted as modifying a parameter rather than the pointee.\n\n- struct MHD_Connection: Definition is required to inspect any uses of the 'connection' parameter (e.g., connection->daemon passed to MHD_DLOG) and to verify that no assignment to the parameter variable occurs; also to confirm no hidden macro uses modify the parameter.\n\n- HAVE_MESSAGES: The conditional compilation symbol controls whether MHD_DLOG calls are present; you must know its value to know whether MHD_DLOG (and thus any potential side effects) are in effect.\n\n- _ (gettext macro): The localized string macro used inside MHD_DLOG can be a macro with side effects in some builds; verify it does not perform assignments to parameters.\n\nTogether these symbols allow determining whether the code assigns to the parameter variables 'connection' or 'password' (which would violate the MISRA rule), versus only modifying objects pointed to by those parameters (which is permitted)."
}