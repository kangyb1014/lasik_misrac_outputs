{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion uses memcmp to compare hdr->value (a header value that is null\u2011terminated elsewhere: hdr->value[hdr->value_size] = 0) with the string literal \"close\" (also a null\u2011terminated C string). Using memcmp to test string equality (memcmp(hdr->value, \"close\", 5)) is comparing null\u2011terminated strings and therefore violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/398.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe / logging helpers - append-only logging to /tmp/logs/398.txt */\nstatic void write_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/398.txt\", \"a\");\n  if (NULL == fp)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n  fclose(fp);\n}\n\nstatic void log_header_state(const char *stage,\n                             struct MHD_Response *response,\n                             struct MHD_HTTP_Res_Header *pos,\n                             const char *header, size_t header_len,\n                             const char *content, size_t content_len)\n{\n  write_log(\"%s: response=%p, pos=%p, header=\\\"%.*s\\\", header_len=%zu, content=\\\"%.*s\\\", content_len=%zu\\n\",\n            stage,\n            (void *)response,\n            (void *)pos,\n            (int)header_len, header ? header : \"(null)\", header_len,\n            (int)content_len, content ? content : \"(null)\", content_len);\n  if (NULL != pos)\n  {\n    write_log(\"    pos->header_size=%zu, pos->value_size=%zu, pos->header_ptr=%p, pos->value_ptr=%p\\n\",\n              pos->header_size, pos->value_size,\n              (void *)pos->header, (void *)pos->value);\n  }\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  log_header_state(\"ENTRY\", response, NULL, header, 0, content, 0);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    write_log(\"NULL parameter: header=%p, content=%p - returning MHD_NO\\n\",\n              (void *)header, (void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  write_log(\"Computed header_len=%zu for header=\\\"%.*s\\\"\\n\",\n            header_len, (int)header_len, header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    write_log(\"Connection header special-case matched - delegating to del_response_header_connection\\n\");\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  write_log(\"Computed content_len=%zu for content=\\\"%.*s\\\"\\n\",\n            content_len, (int)content_len, content);\n\n  pos = response->first_header;\n  log_header_state(\"LOOP_START\", response, pos, header, header_len, content, content_len);\n  while (NULL != pos)\n  {\n    /* Log current pos state before evaluating the removal condition */\n    log_header_state(\"ITER\", response, pos, header, header_len, content, content_len);\n\n    /* Evaluate size equality before calling memcmp to avoid unnecessary memcmp calls */\n    int header_size_eq = (header_len == pos->header_size);\n    int content_size_eq = (content_len == pos->value_size);\n    int header_cmp = 1; /* non-zero means different */\n    int value_cmp = 1;\n\n    if (header_size_eq)\n      header_cmp = memcmp (header, pos->header, header_len);\n    if (content_size_eq)\n      value_cmp = memcmp (content, pos->value, content_len);\n\n    write_log(\"    checks: header_size_eq=%d, content_size_eq=%d, header_cmp=%d, value_cmp=%d\\n\",\n              header_size_eq, content_size_eq, header_cmp, value_cmp);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      write_log(\"    MATCH found - removing header. header=\\\"%.*s\\\", value=\\\"%.*s\\\"\\n\",\n                (int)pos->header_size, pos->header ? pos->header : \"(null)\",\n                (int)pos->value_size, pos->value ? pos->value : \"(null)\");\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      write_log(\"Returning MHD_YES\\n\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  write_log(\"No matching header found - returning MHD_NO\\n\");\n  return MHD_NO;\n}\n"
}