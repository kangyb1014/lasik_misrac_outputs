{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn del_response_header_connection the code sets hdr->value[hdr->value_size] = 0 (making hdr->value a NUL-terminated C string) and then calls memcmp(hdr->value, \"close\", MHD_STATICSTR_LEN_(\"close\")). This uses memcmp to compare a NUL-terminated string against a string literal, which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/398.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/398.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/398.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    probe_log(\"MHD_del_response_header: early return NULL param header=%p content=%p\",\n              (const void *) header, (const void *) content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  probe_log(\"MHD_del_response_header: entry header='%.*s' ptr=%p header_len=%zu\",\n            (int)header_len, header, (const void *) header, header_len);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    /* Log content info before delegating */\n    content_len = strlen (content);\n    probe_log(\"MHD_del_response_header: delegating to del_response_header_connection: content='%.*s' ptr=%p content_len=%zu\",\n              (int)content_len, content, (const void *) content, content_len);\n\n    /* Call the connection-specific handler and record result */\n    enum MHD_Result res = del_response_header_connection (response, content);\n    probe_log(\"MHD_del_response_header: del_response_header_connection returned %d\", (int) res);\n    return res;\n  }\n\n  content_len = strlen (content);\n  probe_log(\"MHD_del_response_header: searching headers: content='%.*s' ptr=%p content_len=%zu\",\n            (int)content_len, content, (const void *) content, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    probe_log(\"MHD_del_response_header: inspect pos=%p header_size=%zu value_size=%zu\",\n              (const void *) pos, pos->header_size, pos->value_size);\n\n    /* Compute comparators in variables for logging, but preserve original checks */\n    int r_header = 1;\n    int r_content = 1;\n\n    if (header_len == pos->header_size)\n    {\n      r_header = memcmp (header,\n                         pos->header,\n                         header_len);\n    }\n    else\n    {\n      probe_log(\"MHD_del_response_header: header size mismatch: header_len=%zu pos->header_size=%zu\",\n                header_len, pos->header_size);\n    }\n\n    if (content_len == pos->value_size)\n    {\n      r_content = memcmp (content,\n                          pos->value,\n                          content_len);\n    }\n    else\n    {\n      probe_log(\"MHD_del_response_header: content size mismatch: content_len=%zu pos->value_size=%zu\",\n                content_len, pos->value_size);\n    }\n\n    probe_log(\"MHD_del_response_header: memcmp results r_header=%d r_content=%d\",\n              r_header, r_content);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == r_header) &&\n        (0 == r_content))\n    {\n      probe_log(\"MHD_del_response_header: match found, removing header at pos=%p\", (const void *) pos);\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        probe_log(\"MHD_del_response_header: clearing MHD_RAF_HAS_TRANS_ENC_CHUNKED flag (was 0x%X)\", (unsigned) response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: clearing MHD_RAF_HAS_DATE_HDR flag (was 0x%X)\", (unsigned) response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          probe_log(\"MHD_del_response_header: clearing MHD_RAF_HAS_CONTENT_LENGTH flag (was 0x%X)\", (unsigned) response->flags_auto);\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n        }\n      }\n      probe_log(\"MHD_del_response_header: returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  probe_log(\"MHD_del_response_header: no matching header found, returning MHD_NO\");\n  return MHD_NO;\n}\n"
}