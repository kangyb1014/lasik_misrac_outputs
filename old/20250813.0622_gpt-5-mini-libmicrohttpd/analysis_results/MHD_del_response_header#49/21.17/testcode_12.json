{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_del_response_header is called with header equal to \"Connection\" and content pointing to a non\u2011NUL\u2011terminated character buffer (i.e. a char array not terminated by '\\0'), del_response_header_connection calls strchr(value, '\\r') / strchr(value, '\\n') without any length or NUL checks. In that case strchr will scan past the end of the object and can access memory beyond the bounds of the buffer, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "static void MHD_probe_log_simple(const char *tag,\n                                     const struct MHD_Response *response,\n                                     const char *header,\n                                     size_t header_len,\n                                     const char *content,\n                                     const void *pos_ptr,\n                                     size_t pos_header_size,\n                                     size_t pos_value_size)\n{\n    /* Attempt to open the log file. If it fails, silently continue to\n       avoid affecting the original logic. */\n    FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n    if (NULL == f)\n      return;\n\n    /* Print basic control-flow and pointer/state information. */\n    fprintf(f, \"[MHD_DEL_RESP_HDR] tag=%s response=%p header=%p header_len=%zu content=%p pos=%p\\n\",\n            tag,\n            (const void *) response,\n            (const void *) header,\n            header_len,\n            (const void *) content,\n            pos_ptr);\n\n    if (response)\n    {\n      /* flags_auto is an enum; print as unsigned long for portability */\n      fprintf(f, \"  flags_auto=0x%lx\\n\", (unsigned long) response->flags_auto);\n    }\n\n    if (NULL != header)\n      fprintf(f, \"  header=\\\"%s\\\"\\n\", header);\n\n    /* Do NOT call strlen() on content here: that would itself scan memory\n       potentially out-of-bounds for the violation scenario. Instead only\n       print the pointer and first byte (if readable) to avoid making\n       assumptions about termination. */\n    if (NULL != content) {\n      /* Try reading a small, bounded amount of memory. This is extra\n         cautious: read at most 4 bytes and protect with a volatile load\n         to reduce compiler optimizations that might reorder reads. */\n      unsigned char b0 = 0u, b1 = 0u, b2 = 0u, b3 = 0u;\n      /* Guard reads individually to reduce impact if content is fragile.\n         These reads are minimal and are intended only to show evidence\n         of in-memory bytes near the pointer; they do not assume NUL. */\n      volatile const unsigned char *p = (volatile const unsigned char *) content;\n      /* Use a defensive, simple try/catch style: we cannot catch faults in C,\n         so these reads remain minimal. They reflect typical diagnostic\n         practice and avoid calling string functions that assume NUL. */\n      b0 = p[0];\n      b1 = p[1];\n      b2 = p[2];\n      b3 = p[3];\n      fprintf(f, \"  content_bytes_first4=%02x%02x%02x%02x\\n\",\n              (unsigned) b0, (unsigned) b1, (unsigned) b2, (unsigned) b3);\n    }\n\n    if (pos_ptr)\n    {\n      fprintf(f, \"  pos_header_size=%zu pos_value_size=%zu\\n\",\n              pos_header_size, pos_value_size);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and NULL arguments quickly. Do not call any string\n     functions on 'content' here to avoid introducing the very UB we're\n     trying to capture. */\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    MHD_probe_log_simple(\"null-arg\", response, header, 0u, content, NULL, 0u, 0u);\n    return MHD_NO;\n  }\n\n  header_len = strlen (header);\n\n  /* Log after computing header_len. Do not compute content_len yet. */\n  MHD_probe_log_simple(\"after-header-len\", response, header, header_len, content, NULL, 0u, 0u);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    /* Important probe: we are about to call del_response_header_connection\n       with 'content' as given. For the violation scenario, 'content' may\n       not be NUL-terminated; do not call strlen(content) here. */\n    MHD_probe_log_simple(\"before-del-response-header-connection\", response,\n                         header, header_len, content, NULL, 0u, 0u);\n    return del_response_header_connection (response, content);\n  }\n\n  /* Normal path: now it is safe (by original logic) to call strlen(content).\n     We preserve the original behavior exactly. */\n  content_len = strlen (content);\n\n  /* Log that we computed content_len and will iterate headers. */\n  MHD_probe_log_simple(\"before-iter\", response, header, header_len, content, NULL, 0u, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* For diagnostic purposes, log each candidate header checked. Avoid\n       calling functions that would modify flow; just print sizes and\n       pointers. */\n    MHD_probe_log_simple(\"checking-pos\", response, header, header_len, content,\n                         pos, pos->header_size, pos->value_size);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      MHD_probe_log_simple(\"match-found-before-remove\", response, header, header_len, content,\n                           pos, pos->header_size, pos->value_size);\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n\n      MHD_probe_log_simple(\"removed-and-return\", response, header, header_len, content, NULL, 0u, 0u);\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n\n  MHD_probe_log_simple(\"not-found-return\", response, header, header_len, content, NULL, 0u, 0u);\n  return MHD_NO;\n}\n"
}