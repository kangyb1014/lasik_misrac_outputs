{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memmove in the fragment can write past the end of buf because the allocation (buf_size = old_value_len + initial_norm_len) does not guarantee space for inserting the prefix \"close, \" plus the normalized tokens and the terminating NUL. The code only has an mhd_assert to check buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1, but that assert is not a runtime bound-check (it may be compiled out). If the computed initial_norm_len used for allocation is too small relative to the actual norm_len returned by MHD_str_remove_token_caseless_ plus the extra \"close, \" prefix, the memmove (moving norm_len+1 bytes to buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len) will access/write beyond the allocated buf. Thus Rule 21.17 is violated (possible out-of-bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/399.txt */\nstatic void\nmhd_logf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  mhd_logf (\"MHD_del_response_header: entry: response=%p, header=%p, content=%p\",\n            (void *) response, (void *) header, (void *) content);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    mhd_logf (\"MHD_del_response_header: early return MHD_NO because header or content is NULL (header=%p, content=%p)\",\n              (void *) header, (void *) content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  mhd_logf (\"MHD_del_response_header: header_len=%zu, header='%s'\", header_len, header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    mhd_logf (\"MHD_del_response_header: connection header special-case triggered: response->flags_auto=0x%lX\",\n              (unsigned long) response->flags_auto);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  mhd_logf (\"MHD_del_response_header: content_len=%zu, content='%s'\", content_len, content);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    mhd_logf (\"MHD_del_response_header: iter pos=%p: pos->header_size=%zu, pos->value_size=%zu, pos->header=%p, pos->value=%p\",\n              (void *) pos, pos->header_size, pos->value_size, (void *) pos->header, (void *) pos->value);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      /* Log the exact match condition before modifying state */\n      mhd_logf (\"MHD_del_response_header: match found at pos=%p (header_len=%zu, content_len=%zu). Preparing to remove header.\",\n                (void *) pos, header_len, content_len);\n\n      _MHD_remove_header (response, pos);\n      mhd_logf (\"MHD_del_response_header: _MHD_remove_header called for pos=%p\", (void *) pos);\n\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      mhd_logf (\"MHD_del_response_header: freed pos and its header/value memory\");\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        mhd_logf (\"MHD_del_response_header: clearing MHD_RAF_HAS_TRANS_ENC_CHUNKED flag. flags_auto before=0x%lX\",\n                  (unsigned long) response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        mhd_logf (\"MHD_del_response_header: flags_auto after=0x%lX\",\n                  (unsigned long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        mhd_logf (\"MHD_del_response_header: clearing MHD_RAF_HAS_DATE_HDR flag. flags_auto before=0x%lX\",\n                  (unsigned long) response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        mhd_logf (\"MHD_del_response_header: flags_auto after=0x%lX\",\n                  (unsigned long) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          mhd_logf (\"MHD_del_response_header: no other Content-Length header found; clearing MHD_RAF_HAS_CONTENT_LENGTH. flags_auto before=0x%lX\",\n                    (unsigned long) response->flags_auto);\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          mhd_logf (\"MHD_del_response_header: flags_auto after=0x%lX\",\n                    (unsigned long) response->flags_auto);\n        }\n        else\n        {\n          mhd_logf (\"MHD_del_response_header: another Content-Length header present; not clearing flag.\");\n        }\n      }\n\n      mhd_logf (\"MHD_del_response_header: returning MHD_YES\");\n      return MHD_YES;\n    }\n\n    /* Log the fact that this pos did not match (if lengths or memcmp differ) */\n    mhd_logf (\"MHD_del_response_header: pos=%p did not match; moving to next. next=%p\",\n              (void *) pos, (void *) pos->next);\n    pos = pos->next;\n  }\n\n  mhd_logf (\"MHD_del_response_header: completed iteration with no match; returning MHD_NO\");\n  return MHD_NO;\n}\n"
}