{
  "user_message": "An agent A claimed that the following MHD_del_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_del_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The memcpy copies hdr->value_size bytes into buf at offset pos but buf was allocated with buf_size = old_value_len + norm_len. In the path where value_has_close is true (and !already_has_close) pos is advanced by the length of \"close\" and then by 2 for \", \" before the memcpy. If norm_len is small (for example norm_len == 0) buf_size can be smaller than pos + hdr->value_size, so memcpy(buf + pos, hdr->value, hdr->value_size) writes past the end of buf. Example: hdr->value_size = 10 -> old_value_len = 12, norm_len = 0 -> buf_size = 12, pos after inserting \"close\" and \", \" = 7, pos + hdr->value_size = 17 > 12 -> out-of-bounds write. This violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    probe_log(\"MHD_del_response_header: null parameter(s): header=%p content=%p\", (void *)header, (void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n\n  /* Log entry state */\n  probe_log(\"MHD_del_response_header: entry header='%.*s' header_len=%zu response=%p flags_auto=0x%08x\",\n            (int)header_len, header, header_len, (void *)response, (unsigned)response->flags_auto);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    probe_log(\"MHD_del_response_header: delegated to del_response_header_connection for header='%.*s'\",\n              (int)header_len, header);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n\n  probe_log(\"MHD_del_response_header: after checks content='%.*s' content_len=%zu\",\n            (int)content_len, content, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Compute comparisons once and log them to help reproduce control path */\n    int header_size_match = (header_len == pos->header_size);\n    int value_size_match = (content_len == pos->value_size);\n    int header_cmp = 0;\n    int value_cmp = 0;\n\n    if (header_size_match)\n      header_cmp = memcmp (header, pos->header, header_len);\n    else\n      header_cmp = 1; /* non-zero */\n\n    if (value_size_match)\n      value_cmp = memcmp (content, pos->value, content_len);\n    else\n      value_cmp = 1; /* non-zero */\n\n    probe_log(\"MHD_del_response_header: visiting pos=%p pos->header_size=%zu pos->value_size=%zu header_size_match=%d value_size_match=%d header_cmp=%d value_cmp=%d\",\n              (void *)pos, pos->header_size, pos->value_size, header_size_match, value_size_match, header_cmp, value_cmp);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == header_cmp) &&\n        (0 == value_cmp))\n    {\n      probe_log(\"MHD_del_response_header: match found at pos=%p -- removing header/value\", (void *)pos);\n      _MHD_remove_header (response, pos);\n      probe_log(\"MHD_del_response_header: after _MHD_remove_header for pos=%p\", (void *)pos);\n      free (pos->header);\n      probe_log(\"MHD_del_response_header: freed pos->header for pos=%p\", (void *)pos);\n      free (pos->value);\n      probe_log(\"MHD_del_response_header: freed pos->value for pos=%p\", (void *)pos);\n      free (pos);\n      probe_log(\"MHD_del_response_header: freed pos structure %p\", (void *)pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched TRANSFER-ENCODING header; clearing MHD_RAF_HAS_TRANS_ENC_CHUNKED flag (before=0x%08x)\", (unsigned)response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched DATE header; clearing MHD_RAF_HAS_DATE_HDR flag (before=0x%08x)\", (unsigned)response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched CONTENT-LENGTH header; checking response elements (flags_auto before=0x%08x)\", (unsigned)response->flags_auto);\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          probe_log(\"MHD_del_response_header: no content-length element found; clearing MHD_RAF_HAS_CONTENT_LENGTH flag\");\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n        }\n        else\n        {\n          probe_log(\"MHD_del_response_header: content-length element still present; not clearing flag\");\n        }\n      }\n\n      probe_log(\"MHD_del_response_header: finished removal, returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  probe_log(\"MHD_del_response_header: header/value pair not found, returning MHD_NO\");\n  return MHD_NO;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_del_response_header: entry header='Header-Type-A' header_len=13 response=0x556be47072a0 flags_auto=0x00000000\nMHD_del_response_header: after checks content='value-a1' content_len=8\nMHD_del_response_header: visiting pos=0x556be47073a0 pos->header_size=13 pos->value_size=8 header_size_match=1 value_size_match=1 header_cmp=0 value_cmp=0\nMHD_del_response_header: match found at pos=0x556be47073a0 -- removing header/value\nMHD_del_response_header: after _MHD_remove_header for pos=0x556be47073a0\nMHD_del_response_header: freed pos->header for pos=0x556be47073a0\nMHD_del_response_header: freed pos->value for pos=0x556be47073a0\nMHD_del_response_header: freed pos structure 0x556be47073a0\nMHD_del_response_header: finished removal, returning MHD_YES\nMHD_del_response_header: entry header='Header-Type-A' header_len=13 response=0x556be47072a0 flags_auto=0x00000000\nMHD_del_response_header: after checks content='value-a3' content_len=8\nMHD_del_response_header: visiting pos=0x556be4707420 pos->header_size=13 pos->value_size=8 header_size_match=1 value_size_match=1 header_cmp=0 value_cmp=1\nMHD_del_response_header: visiting pos=0x556be4707640 pos->header_size=13 pos->value_size=8 header_size_match=1 value_size_match=1 header_cmp=0 value_cmp=0\nMHD_del_response_header: match found at pos=0x556be4707640 -- removing header/value\nMHD_del_response_header: after _MHD_remove_header for pos=0x556be4707640\nMHD_del_response_header: freed pos->header for pos=0x556be4707640\nMHD_del_response_header: freed pos->value for pos=0x556be4707640\nMHD_del_response_header: freed pos structure 0x556be4707640\nMHD_del_response_header: finished removal, returning MHD_YES\nMHD_del_response_header: entry header='Header-Type-C' header_len=13 response=0x556be47072a0 flags_auto=0x00000000\nMHD_del_response_header: after checks content='value-a3' content_len=8\nMHD_del_response_header: visiting pos=0x556be4707420 pos->header_size=13 pos->value_size=8 header_size_match=1 value_size_match=1 header_cmp=2 value_cmp=1\nMHD_del_response_header: header/value pair not found, returning MHD_NO\nMHD_del_response_header: entry header='Header-Type-A' header_len=13 response=0x556be47072a0 flags_auto=0x00000000\nMHD_del_response_header: after checks content='value-c' content_len=7\nMHD_del_response_header: visiting pos=0x556be4707420 pos->header_size=13 pos->value_size=8 header_size_match=1 value_size_match=0 header_cmp=0 value_cmp=1\nMHD_del_response_header: header/value pair not found, returning MHD_NO\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000001\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000001\nMHD_del_response_header: delegated to del_response_header_connection for header='Connection'\nMHD_del_response_header: entry header='Connection' header_len=10 response=0x556be47072a0 flags_auto=0x00000003\nMHD_del_response_header: delegated to del_response_header_connection for header='Co\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct for the shown MHD_del_response_header code. The agent's scenario describes a buffer allocation + memcpy bug (advancing pos then copying hdr->value_size bytes) that does not exist in the provided function. MHD_del_response_header only uses strlen and memcmp (and some helper comparisons). Before calling memcmp it explicitly checks that header_len == pos->header_size and content_len == pos->value_size, so the number of bytes passed to memcmp is guaranteed to be no greater than the stored sizes of pos->header and pos->value. The function also checks for NULL header/content before calling strlen. Therefore the string.h calls in this function cannot, as written, access beyond the bounds of the objects referenced by their pointer parameters. The test logs also show normal matches/delegation and no evidence of out-of-bounds behavior. Consequently the MISRA C 2023 Rule 21.17 violation claim for this function is incorrect."
}