{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The memcpy copies hdr->value_size bytes into buf at offset pos but buf was allocated with buf_size = old_value_len + norm_len. In the path where value_has_close is true (and !already_has_close) pos is advanced by the length of \"close\" and then by 2 for \", \" before the memcpy. If norm_len is small (for example norm_len == 0) buf_size can be smaller than pos + hdr->value_size, so memcpy(buf + pos, hdr->value, hdr->value_size) writes past the end of buf. Example: hdr->value_size = 10 -> old_value_len = 12, norm_len = 0 -> buf_size = 12, pos after inserting \"close\" and \", \" = 7, pos + hdr->value_size = 17 > 12 -> out-of-bounds write. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified MHD_del_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/399.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    probe_log(\"MHD_del_response_header: null parameter(s): header=%p content=%p\", (void *)header, (void *)content);\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n\n  /* Log entry state */\n  probe_log(\"MHD_del_response_header: entry header='%.*s' header_len=%zu response=%p flags_auto=0x%08x\",\n            (int)header_len, header, header_len, (void *)response, (unsigned)response->flags_auto);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    probe_log(\"MHD_del_response_header: delegated to del_response_header_connection for header='%.*s'\",\n              (int)header_len, header);\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n\n  probe_log(\"MHD_del_response_header: after checks content='%.*s' content_len=%zu\",\n            (int)content_len, content, content_len);\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    /* Compute comparisons once and log them to help reproduce control path */\n    int header_size_match = (header_len == pos->header_size);\n    int value_size_match = (content_len == pos->value_size);\n    int header_cmp = 0;\n    int value_cmp = 0;\n\n    if (header_size_match)\n      header_cmp = memcmp (header, pos->header, header_len);\n    else\n      header_cmp = 1; /* non-zero */\n\n    if (value_size_match)\n      value_cmp = memcmp (content, pos->value, content_len);\n    else\n      value_cmp = 1; /* non-zero */\n\n    probe_log(\"MHD_del_response_header: visiting pos=%p pos->header_size=%zu pos->value_size=%zu header_size_match=%d value_size_match=%d header_cmp=%d value_cmp=%d\",\n              (void *)pos, pos->header_size, pos->value_size, header_size_match, value_size_match, header_cmp, value_cmp);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == header_cmp) &&\n        (0 == value_cmp))\n    {\n      probe_log(\"MHD_del_response_header: match found at pos=%p -- removing header/value\", (void *)pos);\n      _MHD_remove_header (response, pos);\n      probe_log(\"MHD_del_response_header: after _MHD_remove_header for pos=%p\", (void *)pos);\n      free (pos->header);\n      probe_log(\"MHD_del_response_header: freed pos->header for pos=%p\", (void *)pos);\n      free (pos->value);\n      probe_log(\"MHD_del_response_header: freed pos->value for pos=%p\", (void *)pos);\n      free (pos);\n      probe_log(\"MHD_del_response_header: freed pos structure %p\", (void *)pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched TRANSFER-ENCODING header; clearing MHD_RAF_HAS_TRANS_ENC_CHUNKED flag (before=0x%08x)\", (unsigned)response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched DATE header; clearing MHD_RAF_HAS_DATE_HDR flag (before=0x%08x)\", (unsigned)response->flags_auto);\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        probe_log(\"MHD_del_response_header: matched CONTENT-LENGTH header; checking response elements (flags_auto before=0x%08x)\", (unsigned)response->flags_auto);\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          probe_log(\"MHD_del_response_header: no content-length element found; clearing MHD_RAF_HAS_CONTENT_LENGTH flag\");\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          probe_log(\"MHD_del_response_header: flags_auto after clear=0x%08x\", (unsigned)response->flags_auto);\n        }\n        else\n        {\n          probe_log(\"MHD_del_response_header: content-length element still present; not clearing flag\");\n        }\n      }\n\n      probe_log(\"MHD_del_response_header: finished removal, returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  probe_log(\"MHD_del_response_header: header/value pair not found, returning MHD_NO\");\n  return MHD_NO;\n}\n"
}