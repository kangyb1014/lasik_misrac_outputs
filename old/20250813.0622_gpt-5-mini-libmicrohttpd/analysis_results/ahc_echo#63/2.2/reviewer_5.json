{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data;' is a no-op expression cast used only to silence an 'unused parameter' warning. It has no side effects and removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_echo_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameter pointers. These logs help demonstrate that\n   * the (void) upload_data; cast is a no-op: upload_data is not used by\n   * the function beyond being logged here (no side-effects). */\n  ahc_echo_log(\"ahc_echo: entry cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n               cls, (void *) connection, (const void *) url, (const void *) method, (const void *) version,\n               (const void *) upload_data, (const void *) upload_data_size, (void *) req_cls);\n\n  ahc_echo_log(\"ahc_echo: executed unused casts including (void) upload_data; upload_data pointer=%p\",\n               (const void *) upload_data);\n\n  /* For safer logging we capture current *req_cls if req_cls is non-NULL.\n   * Note: original logic dereferences *req_cls below without a NULL check\n   * (it is expected MHD provides a valid pointer). We only read it for\n   * logging to show the control-flow decision that follows. */\n  void *req_cls_val = NULL;\n  if (req_cls)\n    req_cls_val = *req_cls;\n  ahc_echo_log(\"ahc_echo: before first-call check req_cls_ptr=%p req_cls_val=%p marker_addr=%p\",\n               (void *) req_cls, req_cls_val, (void *) &already_called_marker);\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    ahc_echo_log(\"ahc_echo: first-time entry: setting *req_cls to marker (%p)\", (void *) &already_called_marker);\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    ahc_echo_log(\"ahc_echo: returning MHD_YES to wait for more data\");\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  ahc_echo_log(\"ahc_echo: digest auth result res_e=%d\", (int) res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    ahc_echo_log(\"ahc_echo: auth failed (res_e=%d); creating auth-required response\", (int) res_e);\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n    {\n      ahc_echo_log(\"ahc_echo: failed to create response; returning MHD_NO\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    ahc_echo_log(\"ahc_echo: queued auth-required response; ret=%d\", (int) ret);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_echo_log(\"ahc_echo: success path queued response; ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_echo_log(\"ahc_echo: exiting with ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. The (void) upload_data; expression is an idiomatic no-op used to document an intentionally unused parameter and to suppress compiler warnings. Although the cast has no side effects and its removal would not change program execution, MISRA\u2019s intent for Rule 2.2 is to forbid code that is functionally redundant in the sense of actual program behaviour and maintainability; in practice the explicit discard of an unused parameter is an accepted idiom (and often necessary when implementing callbacks with fixed signatures). If a project policy forbids such idioms, the correct remedy is to omit the parameter name where the language and the required signature permit it or to document a deviation \u2014 not to single out this harmless cast as a Rule 2.2 defect. (Note: if the parameter were volatile or its evaluation had side effects, the cast would not be a no-op.)"
}