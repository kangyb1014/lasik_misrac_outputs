{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data_size;' is an executed no-op expression statement used only to silence an \"unused parameter\" warning. Its removal would not affect program behaviour (it has no side effects), so it qualifies as dead code under MISRA C 2023 Rule 2.2. (Remediation: omit the parameter name in the prototype/definition or use an approved 'unused' attribute/annotation instead of emitting a no-op statement.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nahc_log_probe (const char *fmt, ...)\n{\n  char buf[512];\n  va_list ap;\n  FILE *f;\n\n  va_start (ap, fmt);\n  (void) vsnprintf (buf, sizeof (buf), fmt, ap);\n  va_end (ap);\n\n  f = fopen (\"/tmp/logs/506.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf (f, \"%s\\n\", buf);\n    (void) fclose (f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry and parameter state */\n  ahc_log_probe (\"ahc_echo entered: cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n                 cls, connection, (const void *) url, (const void *) method, (const void *) version,\n                 (const void *) upload_data, (const void *) upload_data_size, (const void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Record that the no-op expression statement for upload_data_size executed */\n  ahc_log_probe (\"Executed no-op '(void) upload_data_size;' pointer=%p\", (const void *) upload_data_size);\n\n  if (req_cls != NULL)\n  {\n    ahc_log_probe (\"req_cls before check: req_cls=%p *req_cls=%p\", (const void *) req_cls, (const void *) *req_cls);\n  }\n  else\n  {\n    ahc_log_probe (\"req_cls is NULL\");\n  }\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    ahc_log_probe (\"First invocation path: setting *req_cls to &already_called_marker and returning MHD_YES\");\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  ahc_log_probe (\"Continuing after first invocation; performing digest auth check\");\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  ahc_log_probe (\"MHD_digest_auth_check3 returned res_e=%d\", (int) res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    ahc_log_probe (\"Authentication failed (res_e=%d). Preparing auth required response.\", (int) res_e);\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n    {\n      ahc_log_probe (\"MHD_create_response_from_buffer_static returned NULL; returning MHD_NO\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    ahc_log_probe (\"Queued auth required response, ret=%d\", (int) ret);\n\n    MHD_destroy_response (response);\n    ahc_log_probe (\"Destroyed response and returning ret=%d\", (int) ret);\n    return ret;\n  }\n\n  ahc_log_probe (\"Authentication succeeded; creating page response\");\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_log_probe (\"Queued normal response, ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_log_probe (\"Destroyed response and returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The statement '(void) upload_data_size;' is an expression statement that evaluates the parameter and discards the result. It has no side effects and its removal would not change the observable behaviour of the program. Under the plain wording of MISRA C 2023 Rule 2.2 (\"Any operation that is executed but whose removal would not affect program behaviour constitutes dead code\"), this is dead code. The same reasoning applies to the other '(void) <param>;' statements in the function. The added test scaffolding simply logs when the function is executed; an empty log means the function was not exercised, which does not invalidate the static classification of the no-op statements as dead code.\n\nTherefore Agent A\u2019s report is correct: the no-op '(void) upload_data_size;' statement constitutes dead code per MISRA C 2023 Rule 2.2. Remediation would be to avoid introducing such no-op statements (for example omit the parameter name where permitted, or use a compiler-supported UNUSED/attribute mechanism or an approved annotation/macro that is accepted by your MISRA compliance process)."
}