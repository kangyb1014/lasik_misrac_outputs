{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression-statement (void) cls; is executed but has no effect on program behaviour; removing it would not change runtime behaviour (it only suppresses a compiler warning). Therefore this is dead code and violates MISRA C 2023 Rule 2.2. The same reasoning applies to the similar (void) casts for url, method, version, upload_data and upload_data_size in the function.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry and parameter/state snapshot before the unused-cast statements */\n  ahc_log(\"ahc_echo ENTER: cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p *req_cls=%p already_marker_addr=%p\",\n          cls, connection, (const void *)url, (const void *)method, (const void *)version,\n          (const void *)upload_data, (const void *)upload_data_size, (const void *)req_cls,\n          (const void *)(req_cls ? *req_cls : NULL), (const void *)&already_called_marker);\n\n  ahc_log(\"ahc_echo: about to execute (void) casts for unused parameters (these casts are executed but have no runtime effect)\");\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log after the (void) casts to show that executing them did not change state */\n  ahc_log(\"ahc_echo: after (void) casts: req_cls=%p *req_cls=%p already_marker_addr=%p\",\n          (const void *)req_cls, (const void *)(req_cls ? *req_cls : NULL), (const void *)&already_called_marker);\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    ahc_log(\"ahc_echo: first call detected: setting *req_cls to marker (%p) and returning MHD_YES\", (const void *)&already_called_marker);\n\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  ahc_log(\"ahc_echo: continuing after first-call marker, calling MHD_digest_auth_check3\");\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  ahc_log(\"ahc_echo: MHD_digest_auth_check3 returned res_e=%d\", (int)res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    ahc_log(\"ahc_echo: authentication failed (res_e=%d), preparing auth-required response\", (int)res_e);\n\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n    {\n      ahc_log(\"ahc_echo: MHD_create_response_from_buffer_static returned NULL -> returning MHD_NO\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    ahc_log(\"ahc_echo: queued auth-required response, ret=%d\", (int)ret);\n\n    MHD_destroy_response (response);\n    ahc_log(\"ahc_echo: destroyed response after auth-required flow, returning ret=%d\", (int)ret);\n    return ret;\n  }\n\n  ahc_log(\"ahc_echo: authentication OK, creating normal PAGE response\");\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_log(\"ahc_echo: queued normal response, ret=%d\", (int)ret);\n  MHD_destroy_response (response);\n  ahc_log(\"ahc_echo: destroyed response, returning ret=%d\", (int)ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The six statements of the form (void) x; are not properly classified as dead code for the purposes of MISRA C 2023 Rule 2.2. Rule 2.2 forbids operations that are executed and whose removal would not affect program behaviour. The (void) cast idiom is used to indicate intentionally unused parameters and (in C) evaluates its operand (so it can have an effect if the operand involves volatile objects or expressions with side\u2011effects). Even when the operand is a plain parameter with no side effects, removing those statements can still alter low\u2011level behaviour (timing, code generation, register usage) in an embedded system \u2014 and Note 1 to Rule 2.2 explicitly highlights that timing can be part of observable behaviour. Moreover, the cast documents intent and is the standard, portable way to suppress \u201cunused parameter\u201d warnings; many MISRA interpretations accept this idiom (or provide alternative mechanisms) rather than treating it as dead code. For these reasons the blanket claim that these statements are dead code and therefore violate Rule 2.2 is incorrect."
}