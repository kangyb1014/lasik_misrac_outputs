{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement '(void) method;' is a no-op used solely to suppress an 'unused parameter' warning. It has no side-effects and removing it would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2. (It should be handled by omitting the parameter name in the prototype, using a compiler-supported annotation, or another approved mechanism instead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/506.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry and parameter pointer/state information */\n  probe_log(\"ahc_echo: entry\");\n  probe_log(\"  cls=%p, connection=%p\", (const void *)cls, (const void *)connection);\n  probe_log(\"  url=%p, method=%p, version=%p\", (const void *)url, (const void *)method, (const void *)version);\n  probe_log(\"  upload_data=%p, upload_data_size=%p, req_cls=%p\", (const void *)upload_data, (const void *)upload_data_size, (const void *)req_cls);\n  if (req_cls != NULL)\n    probe_log(\"  *req_cls (before) = %p\", *req_cls);\n  probe_log(\"  &already_called_marker = %p\", (void *)&already_called_marker);\n\n  /* Unused. Silent compiler warning. Keep the original no-op casts, but log before/after to show they are no-ops. */\n  probe_log(\"  (void) cls: before = %p\", (const void *)cls);\n  (void) cls;               /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) cls: after  = %p\", (const void *)cls);\n\n  probe_log(\"  (void) url: before = %p\", (const void *)url);\n  (void) url;               /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) url: after  = %p\", (const void *)url);\n\n  probe_log(\"  (void) method: before = %p\", (const void *)method);\n  (void) method;            /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) method: after  = %p\", (const void *)method);\n\n  probe_log(\"  (void) version: before = %p\", (const void *)version);\n  (void) version;           /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) version: after  = %p\", (const void *)version);\n\n  probe_log(\"  (void) upload_data: before = %p\", (const void *)upload_data);\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) upload_data: after  = %p\", (const void *)upload_data);\n\n  probe_log(\"  (void) upload_data_size: before = %p\", (const void *)upload_data_size);\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  probe_log(\"  (void) upload_data_size: after  = %p\", (const void *)upload_data_size);\n\n  /* Log decision whether this is the first call */\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    probe_log(\"  First call detected: &already_called_marker(%p) != *req_cls(%p)\", (void *)&already_called_marker, *req_cls);\n    *req_cls = &already_called_marker;\n    probe_log(\"  Set *req_cls = %p and returning MHD_YES (wait for complete request)\", (void *)*req_cls);\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n  probe_log(\"  Not first call: &already_called_marker(%p) == *req_cls(%p)\", (void *)&already_called_marker, *req_cls);\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  probe_log(\"  MHD_digest_auth_check3 returned %d\", (int)res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    probe_log(\"  Authentication failed (res_e=%d). Preparing auth-required response.\", (int)res_e);\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n    {\n      probe_log(\"  MHD_create_response_from_buffer_static returned NULL. Returning MHD_NO.\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    probe_log(\"  MHD_queue_auth_required_response3 returned %d\", (int)ret);\n\n    MHD_destroy_response (response);\n    probe_log(\"  Destroyed response. Returning %d\", (int)ret);\n    return ret;\n  }\n  probe_log(\"  Authentication OK. Creating page response.\");\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  probe_log(\"  MHD_queue_response returned %d\", (int)ret);\n  MHD_destroy_response (response);\n  probe_log(\"  Destroyed response. Returning %d\", (int)ret);\n  return ret;\n}\n"
}