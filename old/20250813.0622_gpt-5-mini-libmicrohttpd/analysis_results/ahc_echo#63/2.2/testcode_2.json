{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"(void) url;\" is an expression-statement that merely evaluates and discards the parameter with no side effects. Removing this line (or all similar \"(void) <param>;\" lines) would not change program behavior, so it is an executed operation whose removal has no effect \u2014 i.e. dead code. Therefore Rule 2.2 is violated by this fragment.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helper: append simple logs to /tmp/logs/506.txt. */\nstatic void probe_log_ptr(const char *msg, const void *p)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s %p\\n\", msg, p);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_msg(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry and pointers to capture control flow/state for analysis */\n  probe_log_msg(\"ahc_echo: entry\");\n  probe_log_ptr(\"ahc_echo: connection=\", (const void *) connection);\n  probe_log_ptr(\"ahc_echo: req_cls=\", (const void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) cls; (param ptr)\", cls);\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) url; (param ptr)\", url);\n\n  (void) method;            /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) method; (param ptr)\", method);\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) version; (param ptr)\", version);\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) upload_data; (param ptr)\", upload_data);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  probe_log_ptr(\"ahc_echo: executed (void) upload_data_size; (param ptr)\", upload_data_size);\n\n  /* Log marker address for comparison tracing */\n  probe_log_ptr(\"ahc_echo: &already_called_marker=\", &already_called_marker);\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    probe_log_msg(\"ahc_echo: first call detected (setting req_cls and returning MHD_YES)\");\n    probe_log_ptr(\"ahc_echo: incoming *req_cls before set=\", *req_cls);\n    *req_cls = &already_called_marker;\n    probe_log_ptr(\"ahc_echo: *req_cls after set=\", *req_cls);\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  probe_log_msg(\"ahc_echo: request already marked as read - proceeding to auth check\");\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n\n  probe_log_ptr(\"ahc_echo: auth result (enum value ptr)=\", (const void *)&res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    probe_log_msg(\"ahc_echo: auth failed - preparing auth required response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n    {\n      probe_log_msg(\"ahc_echo: response creation failed - returning MHD_NO\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    probe_log_ptr(\"ahc_echo: queued auth response, response ptr=\", response);\n\n    MHD_destroy_response (response);\n    probe_log_msg(\"ahc_echo: destroyed auth response and returning ret\");\n    probe_log_ptr(\"ahc_echo: ret ptr=\", (const void *)&ret);\n    return ret;\n  }\n\n  probe_log_msg(\"ahc_echo: auth succeeded - preparing normal page response\");\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  probe_log_ptr(\"ahc_echo: queued normal response ptr=\", response);\n  MHD_destroy_response (response);\n  probe_log_ptr(\"ahc_echo: destroyed normal response and returning ret ptr=\", (const void *)&ret);\n  return ret;\n}\n"
}