{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses the WINAPI calling\u2011convention macro in the function\u2011pointer typedef. WINAPI is a Windows-specific macro that expands to a compiler calling\u2011convention attribute (e.g. __stdcall or an equivalent attribute) which is not part of standard C and is documented as a compiler/ABI extension. Therefore this use violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/320.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "static void\nlog_str (const char *s)\n{\n  FILE *f = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"%s\\n\", s);\n    fclose (f);\n  }\n}\n\nstatic void\nlog_label_int (const char *label, int v)\n{\n  FILE *f = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (f)\n  {\n    fprintf (f, \"%s %d\\n\", label, v);\n    fclose (f);\n  }\n}\n\nstatic void\nlog_compile_time_info (void)\n{\n  /* Log whether certain platform/compiler macros are defined at compile time. */\n#ifdef WINAPI\n  log_str (\"COMPILE-TIME: WINAPI is DEFINED\");\n#else\n  log_str (\"COMPILE-TIME: WINAPI is UNDEFINED\");\n#endif\n#ifdef MHD_REAL_CPU_COUNT\n  log_str (\"COMPILE-TIME: MHD_REAL_CPU_COUNT is DEFINED\");\n#else\n  log_str (\"COMPILE-TIME: MHD_REAL_CPU_COUNT is UNDEFINED\");\n#endif\n#ifdef _MSC_VER\n  log_str (\"COMPILE-TIME: _MSC_VER is DEFINED (MSVC likely)\");\n#else\n  log_str (\"COMPILE-TIME: _MSC_VER is UNDEFINED\");\n#endif\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n\n  log_str (\"ENTER: detect_cpu_core_count\");\n  log_compile_time_info ();\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  log_label_int (\"AFTER mhd_tool_get_system_cpu_count, sys_cpu_count=\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    log_str (\"BRANCH: system detection failed, attempting process-level detection\");\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_label_int (\"AFTER mhd_tool_get_proc_cpu_count, proc_cpu_count=\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      log_str (\"FALLBACK: using proc_cpu_count as sys_cpu_count\");\n      sys_cpu_count = proc_cpu_count;\n      log_label_int (\"UPDATED sys_cpu_count=\", sys_cpu_count);\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      log_str (\"FALLBACK: attempting MHD_REAL_CPU_COUNT fallback\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      log_label_int (\"UPDATED sys_cpu_count (from MHD_REAL_CPU_COUNT)=\", sys_cpu_count);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    log_label_int (\"FINAL sys_cpu_count after fallbacks=\", sys_cpu_count);\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_str (\"EXIT: detect_cpu_core_count (assumed)\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_label_int (\"EXIT: detect_cpu_core_count (detected) sys_cpu_count=\", sys_cpu_count);\n  }\n  return (unsigned int) sys_cpu_count;\n}\n"
}