{
  "user_message": "An agent A claimed that the following detect_cpu_core_count code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of detect_cpu_core_count.\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The typedef uses the WINAPI calling-convention macro: 'typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);'. On Windows this macro expands to a compiler-specific calling convention keyword (e.g. __stdcall) which is an implementation extension documented by compilers. Using such a non-standard calling convention is a language extension and therefore violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nwrite_log (const char *format, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* If logging cannot be done, do not disturb original program flow. */\n    return;\n  }\n\n  va_list ap;\n  va_start (ap, format);\n  vfprintf (f, format, ap);\n  va_end (ap);\n  fputc ('\\n', f);\n  fclose (f);\n}\nstatic void\nlog_violation_example (void)\n{\n  write_log (\"[violation-scenario] Example typedef reported by analyzer:\");\n  write_log (\"[violation-scenario] typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\");\n  write_log (\"[violation-scenario] Note: 'WINAPI' expands to a compiler-specific calling-convention keyword (e.g. __stdcall) on Windows.\");\n  write_log (\"[violation-scenario] Such a non-standard calling convention is an implementation extension documented by compilers and may violate MISRA C 2023 Rule 1.2 if present.\");\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  write_log (\"enter detect_cpu_core_count\");\n\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  write_log (\"mhd_tool_get_system_cpu_count() -> %d\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    write_log (\"branch: sys_cpu_count <= 0 -> entering fallback path\");\n\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    write_log (\"stderr: failure to detect system CPU count reported\");\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    write_log (\"mhd_tool_get_proc_cpu_count() -> %d\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      write_log (\"stderr: using proc_cpu_count as fallback -> %d\", proc_cpu_count);\n      sys_cpu_count = proc_cpu_count;\n      write_log (\"sys_cpu_count updated from proc_cpu_count -> %d\", sys_cpu_count);\n    }\n\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      write_log (\"stderr: using MHD_REAL_CPU_COUNT as fallback (macro present)\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      write_log (\"sys_cpu_count updated from MHD_REAL_CPU_COUNT -> %d\", sys_cpu_count);\n    }\n#endif\n\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    write_log (\"final sys_cpu_count value in fallback path -> %d\", sys_cpu_count);\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    write_log (\"stdout: Assuming %d logical CPU core(s)\", sys_cpu_count);\n  }\n  else\n  {\n    write_log (\"branch: sys_cpu_count > 0 -> detected path\");\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    write_log (\"stdout: Detected %d logical CPU core(s)\", sys_cpu_count);\n  }\n\n  /* Log an example of the reported violation so that logs contain direct evidence\n     (textual) for inspection by other tools or developers. This does not change\n     program logic or introduce compiler-specific constructs. */\n  log_violation_example ();\n\n  write_log (\"exit detect_cpu_core_count returning %d\", sys_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for detect_cpu_core_count. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct for the provided code. The detect_cpu_core_count implementation uses only standard C constructs (static, int/unsigned int, conditional compilation with #ifdef, standard library I/O and varargs in the test harness). There is no use of compiler-specific calling-convention keywords (e.g. __stdcall, __cdecl), no use of WINAPI, no __attribute__ or inline assembly, and no other documented compiler language extension in the shown code. The agent's example typedef (typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);) describes a situation that would violate Rule 1.2 if such a macro expanded to a compiler-specific calling convention in this translation unit, but that typedef does not appear in the target code. Only if a macro used here (e.g. MHD_REAL_CPU_COUNT) expanded to a documented compiler extension would Rule 1.2 be implicated; there is no evidence of that in the presented code. Therefore the report is a false positive."
}