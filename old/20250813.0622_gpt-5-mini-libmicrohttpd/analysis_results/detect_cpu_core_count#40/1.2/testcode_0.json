{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe typedef uses the WINAPI calling-convention macro (e.g. expands to MSVC/MinGW __stdcall), which is a compiler-specific calling-convention extension. When compiled on Windows with MSVC/MinGW this invokes a non\u2011standard language extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/320.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "static void\nmhd_log_probe (const char *stage, int sys_cpu, int proc_cpu, int used_real)\n{\n  FILE *f = fopen (\"/tmp/logs/320.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log stage and relevant integer state values. */\n    fprintf (f, \"detect_cpu_core_count: %s; sys_cpu=%d; proc_cpu=%d; used_real=%d\\n\",\n             stage, sys_cpu, proc_cpu, used_real);\n    fclose (f);\n  }\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  int proc_cpu_count = -1;\n  int used_real = 0;\n\n  mhd_log_probe (\"entry\", -1, -1, 0);\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  mhd_log_probe (\"after_mhd_tool_get_system_cpu_count\", sys_cpu_count, -1, 0);\n\n  if (0 >= sys_cpu_count)\n  {\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    mhd_log_probe (\"sys_count_failed_before_proc\", sys_cpu_count, -1, 0);\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    mhd_log_probe (\"after_mhd_tool_get_proc_cpu_count\", sys_cpu_count,\n                   proc_cpu_count, 0);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      mhd_log_probe (\"using_proc_fallback\", sys_cpu_count, proc_cpu_count, 0);\n      sys_cpu_count = proc_cpu_count;\n      mhd_log_probe (\"sys_count_set_to_proc\", sys_cpu_count, proc_cpu_count, 0);\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      mhd_log_probe (\"about_to_use_MHD_REAL_CPU_COUNT\", sys_cpu_count,\n                     proc_cpu_count, 0);\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      used_real = 1;\n      mhd_log_probe (\"used_MHD_REAL_CPU_COUNT\", sys_cpu_count,\n                     proc_cpu_count, used_real);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n\n    mhd_log_probe (\"before_assuming_message\", sys_cpu_count, proc_cpu_count,\n                   used_real);\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    mhd_log_probe (\"detected_system_count_ok\", sys_cpu_count, -1, 0);\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n\n  mhd_log_probe (\"exit\", sys_cpu_count, proc_cpu_count, used_real);\n  return (unsigned int) sys_cpu_count;\n}"
}