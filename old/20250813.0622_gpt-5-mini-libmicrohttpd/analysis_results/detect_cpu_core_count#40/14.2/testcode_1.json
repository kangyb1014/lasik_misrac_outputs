{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nMultiple clause violations: the loop initialises the loop counter (ret = 0) but the loop body modifies the counter (++ret) which violates clause 4 (loop counter shall not be modified in the loop body). The third clause (enb_set &= enb_set - 1) modifies enb_set rather than only the loop counter, violating clause 3. The second clause (0 != enb_set) uses enb_set which is modified by the loop (in the third clause), violating clause 2 (the second clause shall not use objects modified in the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/324.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probes: write execution trace and state to /tmp/logs/324.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *fp = fopen (\"/tmp/logs/324.txt\", \"a\");\n  if (NULL == fp)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', fp);\n  fclose (fp);\n}\n\n/* External helpers used by the original code (kept as extern to preserve linkage) */\nextern int mhd_tool_get_system_cpu_count (void);\nextern int mhd_tool_get_proc_cpu_count (void);\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  log_probe (\"enter: detect_cpu_core_count\");\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  log_probe (\"mhd_tool_get_system_cpu_count() -> %d\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    log_probe (\"branch: failed to detect system cpu count (sys_cpu_count=%d)\", sys_cpu_count);\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_probe (\"mhd_tool_get_proc_cpu_count() -> %d\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      log_probe (\"using proc_cpu_count as fallback: %d\", proc_cpu_count);\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      log_probe (\"attempting MHD_REAL_CPU_COUNT fallback (before) sys_cpu_count=%d\", sys_cpu_count);\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      log_probe (\"MHD_REAL_CPU_COUNT applied -> sys_cpu_count=%d\", sys_cpu_count);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    log_probe (\"final chosen sys_cpu_count (after fallbacks) = %d\", sys_cpu_count);\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_probe (\"printed assumption message for %d cores\", sys_cpu_count);\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_probe (\"printed detected message for %d cores\", sys_cpu_count);\n  }\n\n  log_probe (\"exit: detect_cpu_core_count returning %d\", sys_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n"
}