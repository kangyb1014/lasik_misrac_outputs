{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses ret as the loop counter (initialized in the first clause) but the third clause modifies cur_mask (cur_mask &= cur_mask - 1) rather than only modifying the loop counter. The second clause (0 != cur_mask) also depends on cur_mask which is modified by the iteration expression. This violates clauses 2, 3 and 4 of Rule 14.2: the third clause must modify only the loop counter and there must be only one loop counter which is not modified elsewhere in the for statement.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/324.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append logs to /tmp/logs/324.txt capturing control flow and state. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/324.txt\", \"a\");\n  if (f != NULL)\n  {\n    va_list ap;\n    va_start (ap, fmt);\n    vfprintf (f, fmt, ap);\n    va_end (ap);\n    fputc('\\n', f);\n    fclose (f);\n  }\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n\n  log_probe (\"enter: detect_cpu_core_count\");\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  log_probe (\"mhd_tool_get_system_cpu_count -> %d\", sys_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    log_probe (\"branch: system count <= 0, falling back to proc count\");\n\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    log_probe (\"mhd_tool_get_proc_cpu_count -> %d\", proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      log_probe (\"using proc_cpu_count (%d) as fallback\", proc_cpu_count);\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      log_probe (\"using MHD_REAL_CPU_COUNT (%d) as fallback\", MHD_REAL_CPU_COUNT);\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n    {\n      log_probe (\"final fallback to 1 core\");\n      sys_cpu_count = 1;\n    }\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_probe (\"printed assumption, sys_cpu_count=%d\", sys_cpu_count);\n  }\n  else\n  {\n    log_probe (\"branch: detected system cpu count > 0, value=%d\", sys_cpu_count);\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    log_probe (\"printed detected, sys_cpu_count=%d\", sys_cpu_count);\n  }\n\n  log_probe (\"exit: detect_cpu_core_count returning %u\", (unsigned int) sys_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n"
}