{
  "user_message": "An agent A claimed that the following detect_cpu_core_count code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. .\n</misra_rule>\n<target_code>\nHere is the original code of detect_cpu_core_count.\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop uses count_by_proc_aff_mask as the loop counter in the first clause, but the third clause modifies proc_aff (proc_aff &= proc_aff - 1) rather than only the loop counter. MISRA C 2023 Rule 14.2 requires the third clause to modify only the loop counter (and not other objects), and the second clause must not rely on objects that are modified within the loop iteration. Because the iteration expression modifies a different object (proc_aff), this loop violates Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log(const char *event, int sys_cpu_count, int proc_cpu_count)\n{\n    FILE *f = fopen(\"/tmp/logs/324.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"EVENT=%s, sys_cpu_count=%d, proc_cpu_count=%d\\n\",\n                event, sys_cpu_count, proc_cpu_count);\n        fclose(f);\n    }\n}\n\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  int proc_cpu_count = -1; /* -1 means unknown */\n\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  probe_log(\"after_get_system_cpu_count\", sys_cpu_count, proc_cpu_count);\n\n  if (0 >= sys_cpu_count)\n  {\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    probe_log(\"enter_fallback_path\", sys_cpu_count, proc_cpu_count);\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    probe_log(\"after_get_proc_cpu_count\", sys_cpu_count, proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      probe_log(\"using_proc_cpu_count_fallback\", sys_cpu_count, proc_cpu_count);\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      probe_log(\"before_hardcoded_fallback\", sys_cpu_count, proc_cpu_count);\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      probe_log(\"after_hardcoded_fallback\", sys_cpu_count, proc_cpu_count);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    probe_log(\"final_fallback_value\", sys_cpu_count, proc_cpu_count);\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    probe_log(\"detected_system_value\", sys_cpu_count, proc_cpu_count);\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  probe_log(\"about_to_return\", sys_cpu_count, proc_cpu_count);\n  return (unsigned int) sys_cpu_count;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for detect_cpu_core_count. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 14.2 concerns the three clauses of a for statement. The provided detect_cpu_core_count implementation contains no for loop at all (only calls, if/else and preprocessor conditionals). Therefore the claimed violation (modification of proc_aff in the third clause) cannot apply to this function \u2014 the reported for-loop details do not exist in the shown code. The report is incorrect (likely a case of confusing this function with another one that does contain a for loop)."
}