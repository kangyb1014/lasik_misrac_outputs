{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe outer conditional `if (1)` is always true and thus redundant: evaluating the condition and performing the branch selection is executed but removing the `if (1)` wrapper (leaving the inner block) would not change program behaviour. The constant-true conditional therefore constitutes dead code (executed code whose removal would not affect behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified detect_cpu_core_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/322.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of detect_cpu_core_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of detect_cpu_core_count:\n```c\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n```\n</target_code>\nPlease provide the modified detect_cpu_core_count code.\n",
  "test_code": "static unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n\n  /* Open log file for appending control-flow and state information. */\n  FILE *log = fopen(\"/tmp/logs/322.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"enter detect_cpu_core_count: sys_cpu_count after mhd_tool_get_system_cpu_count = %d\\n\",\n            sys_cpu_count);\n  }\n\n  if (0 >= sys_cpu_count)\n  {\n    if (log)\n      fprintf(log, \"branch: sys_cpu_count <= 0 -> entering fallback path\\n\");\n\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    if (log)\n      fprintf(log, \"stderr message emitted: failed to detect system cpu count\\n\");\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (log)\n      fprintf(log, \"proc_cpu_count after mhd_tool_get_proc_cpu_count = %d\\n\",\n              proc_cpu_count);\n\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      if (log)\n        fprintf(log, \"proc_cpu_count > 0 -> using proc_cpu_count as fallback: %d\\n\",\n                proc_cpu_count);\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      if (log)\n        fprintf(log, \"sys_cpu_count still <= 0 after proc fallback -> attempting MHD_REAL_CPU_COUNT fallback\\n\");\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n      if (log)\n        fprintf(log, \"MHD_REAL_CPU_COUNT used: %d\\n\", sys_cpu_count);\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n\n    if (log)\n      fprintf(log, \"final sys_cpu_count after fallbacks = %d\\n\", sys_cpu_count);\n\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    if (log)\n      fprintf(log, \"printed: Assuming message (sys_cpu_count=%d)\\n\", sys_cpu_count);\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"branch: sys_cpu_count > 0 -> detected path (sys_cpu_count=%d)\\n\",\n              sys_cpu_count);\n\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n    if (log)\n      fprintf(log, \"printed: Detected message (sys_cpu_count=%d)\\n\", sys_cpu_count);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"returning sys_cpu_count = %d\\n\\n\", sys_cpu_count);\n    fclose(log);\n  }\n\n  return (unsigned int) sys_cpu_count;\n}\n"
}