{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn the fragment, the pointer parameter 'value_start' (declared as 'const char *value_start') is incremented with 'value_start += delta', i.e. the pointer parameter itself is reassigned. MISRA C 2023 Rule 17.8 forbids modifying a function parameter (the pointer itself shall not be modified). This is a direct violation. A correct approach is to copy the parameter into a local pointer (e.g. 'const char *p = value_start') and update that local variable instead, or use an offset index.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of process_value as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\nPlease provide the modified process_value code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append execution state information to /tmp/logs/653.txt */\nstatic void\nlog_probe (const char *event,\n           const struct MHD_PostProcessor *pp,\n           const char *value_start,\n           const char *value_end,\n           const char *last_escape,\n           size_t xoff,\n           size_t delta,\n           bool cut,\n           size_t clen)\n{\n  FILE *f = fopen(\"/tmp/logs/653.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Print pointer addresses and some pp state so other agents can reproduce */\n  fprintf (f,\n           \"%s: value_start=%p value_end=%p last_escape=%p xbuf_pos=%zu xoff=%zu delta=%zu cut=%d clen=%zu value_offset=%zu must_ikvi=%d state=%d\\n\",\n           event,\n           (const void *) value_start,\n           (const void *) value_end,\n           (const void *) last_escape,\n           (size_t) pp->xbuf_pos,\n           xoff,\n           delta,\n           cut ? 1 : 0,\n           clen,\n           (size_t) pp->value_offset,\n           pp->must_ikvi ? 1 : 0,\n           (int) pp->state);\n  fclose (f);\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n\n  /* Log entry state */\n  log_probe (\"enter\", pp, value_start, value_end, last_escape, 0, 0, false, 0);\n\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n    /* Log that we adjusted value_end due to last_escape handling */\n    log_probe (\"adjust_last_escape\", pp, value_start, value_end, last_escape, xoff, 0, false, 0);\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      /* Log before advancing value_start */\n      log_probe (\"before_memcpy_advance\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta; /* <-- this is the reported violation: parameter is modified */\n      /* Log after advancing value_start to capture the changed pointer */\n      log_probe (\"after_memcpy_advance\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n        log_probe (\"cut_1_set\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n        log_probe (\"skip_escape_1\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n        log_probe (\"cut_2_set\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n        log_probe (\"skip_escape_2\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n      /* Log after unescape to capture resulting xoff */\n      log_probe (\"after_unescape\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      /* Log before calling ikvi */\n      log_probe (\"before_ikvi_call\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        /* Log the error return */\n        log_probe (\"ikvi_return_error\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n        return;\n      }\n      /* Log after successful ikvi call */\n      log_probe (\"after_ikvi_call\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n    }\n    pp->value_offset += xoff;\n    if (cut)\n    {\n      log_probe (\"break_on_cut\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n      break;\n    }\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n      log_probe (\"after_clen_memmove\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n    }\n    xoff = clen;\n    /* Log end of loop iteration */\n    log_probe (\"loop_iteration_end\", pp, value_start, value_end, last_escape, xoff, delta, cut, clen);\n  }\n\n  /* Log exit state */\n  log_probe (\"exit\", pp, value_start, value_end, last_escape, xoff, 0, false, 0);\n}\n"
}