{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function process_value:\nvoid\nMHD_unescape_plus (char *arg)\n{\n  char *p;\n\n  for (p = strchr (arg, '+'); NULL != p; p = strchr (p + 1, '+'))\n    *p = ' ';\n}\n...\n_MHD_EXTERN size_t\nMHD_http_unescape (char *val)\n{\n  return MHD_str_pct_decode_in_place_lenient_ (val, NULL);\n}\n...\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  len = strlen (str);\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  str[res] = 0;\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n...\nstruct MHD_PostProcessor\n{\n\n  /**\n   * The connection for which we are doing\n   * POST processing.\n   */\n  struct MHD_Connection *connection;\n\n  /**\n   * Function to call with POST data.\n   */\n  MHD_PostDataIterator ikvi;\n\n  /**\n   * Extra argument to ikvi.\n   */\n  void *cls;\n\n  /**\n   * Encoding as given by the headers of the connection.\n   */\n  const char *encoding;\n\n  /**\n   * Primary boundary (points into encoding string)\n   */\n  const char *boundary;\n\n  /**\n   * Nested boundary (if we have multipart/mixed encoding).\n   */\n  char *nested_boundary;\n\n  /**\n   * Pointer to the name given in disposition.\n   */\n  char *content_name;\n\n  /**\n   * Pointer to the (current) content type.\n   */\n  char *content_type;\n\n  /**\n   * Pointer to the (current) filename.\n   */\n  char *content_filename;\n\n  /**\n   * Pointer to the (current) encoding.\n   */\n  char *content_transfer_encoding;\n\n  /**\n   * Value data left over from previous iteration.\n   */\n  char xbuf[2];\n\n  /**\n   * Size of our buffer for the key.\n   */\n  size_t buffer_size;\n\n  /**\n   * Current position in the key buffer.\n   */\n  size_t buffer_pos;\n\n  /**\n   * Current position in @e xbuf.\n   */\n  size_t xbuf_pos;\n\n  /**\n   * Current offset in the value being processed.\n   */\n  uint64_t value_offset;\n\n  /**\n   * strlen(boundary) -- if boundary != NULL.\n   */\n  size_t blen;\n\n  /**\n   * strlen(nested_boundary) -- if nested_boundary != NULL.\n   */\n  size_t nlen;\n\n  /**\n   * Do we have to call the 'ikvi' callback when processing the\n   * multipart post body even if the size of the payload is zero?\n   * Set to #MHD_YES whenever we parse a new multiparty entry header,\n   * and to #MHD_NO the first time we call the 'ikvi' callback.\n   * Used to ensure that we do always call 'ikvi' even if the\n   * payload is empty (but not more than once).\n   */\n  bool must_ikvi;\n\n  /**\n   * Set if we still need to run the unescape logic\n   * on the key allocated at the end of this struct.\n   */\n  bool must_unescape_key;\n\n  /**\n   * State of the parser.\n   */\n  enum PP_State state;\n\n  /**\n   * Side-state-machine: skip CRLF (or just LF).\n   * Set to 0 if we are not in skip mode.  Set to 2\n   * if a CRLF is expected, set to 1 if a CR should\n   * be skipped if it is the next character.\n   */\n  enum RN_State skip_rn;\n\n  /**\n   * If we are in skip_rn with \"dash\" mode and\n   * do find 2 dashes, what state do we go into?\n   */\n  enum PP_State dash_state;\n\n  /**\n   * Which headers are global? (used to tell which\n   * headers were only valid for the nested multipart).\n   */\n  enum NE_State have;\n\n}\n...\n#define XBUF_SIZE 512\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "void\nMHD_unescape_plus (char *arg)\n{\n  char *p;\n\n  for (p = strchr (arg, '+'); NULL != p; p = strchr (p + 1, '+'))\n    *p = ' ';\n}"
  ],
  "explanation": "Rule 14.2 applies to for statements. The provided code contains only one for statement: the loop in MHD_unescape_plus shown above. All other loops in the supplied code are while loops (for example in MHD_str_pct_decode_in_place_lenient_ and process_value) or there are no loops; these are outside the scope of MISRA C 2023 Rule 14.2 (which concerns for loops being well-formed). Other code fragments are assertions, memcpy/memmove calls, and control-flow statements (if/else), not for-statements, so they do not need to be investigated for this specific rule."
}