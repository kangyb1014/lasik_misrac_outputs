{
  "user_message": "An agent A claimed that the following MHD_select code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_select.\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function MHD_select assigns to its scalar parameter millisec (e.g. the statement `if (MHD_NO != err_state) millisec = 0;`). Modifying a non-pointer function parameter directly violates MISRA C 2023 Rule 17.8.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log_state (const char *event, struct MHD_Daemon *daemon, int32_t millisec)\n{\n  FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t now = time(NULL);\n  fprintf (f, \"[%ld] EVENT: %s\\n\", (long) now, event);\n  fprintf (f, \"  daemon ptr: %p\\n\", (void *) daemon);\n  /* print a handful of daemon fields accessed in this function; cast to int where appropriate */\n  if (daemon != NULL)\n  {\n    fprintf (f, \"  daemon->shutdown: %d\\n\", (int) daemon->shutdown);\n    fprintf (f, \"  daemon->options: 0x%08x\\n\", (unsigned int) daemon->options);\n    fprintf (f, \"  daemon->connections: %d\\n\", (int) daemon->connections);\n    fprintf (f, \"  daemon->connection_limit: %d\\n\", (int) daemon->connection_limit);\n    fprintf (f, \"  daemon->at_limit: %d\\n\", (int) daemon->at_limit);\n    fprintf (f, \"  daemon->was_quiesced: %d\\n\", (int) daemon->was_quiesced);\n    fprintf (f, \"  daemon->listen_fd: %p\\n\", (void *) (intptr_t) daemon->listen_fd);\n    /* Print the address of the itc member rather than attempting to cast the member value\n       to a pointer type (the member might be a struct or integer type). */\n    fprintf (f, \"  daemon->itc: %p\\n\", (void *) &daemon->itc);\n  }\n  fprintf (f, \"  millisec (view): %d\\n\", (int) millisec);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\nstatic void\nprobe_log_simple (const char *event, int32_t millisec)\n{\n  FILE *f = fopen(\"/tmp/logs/133.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t now = time(NULL);\n  fprintf (f, \"[%ld] EVENT: %s -- millisec=%d\\n\", (long) now, event, (int) millisec);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  /* Log entry and initial parameter value */\n  probe_log_state (\"entry\", daemon, millisec);\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n  {\n    probe_log_state (\"early_return_shutdown\", daemon, millisec);\n    return MHD_NO;\n  }\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n  {\n    probe_log_state (\"before_set_millisec_due_to_resume_suspended_connections\", daemon, millisec);\n    /* This assignment is the reported Rule 17.8 violation: modifying a scalar parameter. */\n    millisec = 0;\n    probe_log_state (\"after_set_millisec_due_to_resume_suspended_connections\", daemon, millisec);\n  }\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    probe_log_state (\"single_threaded_enter\", daemon, millisec);\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n      probe_log_state (\"internal_get_fdset2_failed\", daemon, millisec);\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n        probe_log_state (\"itc_add_failed\", daemon, millisec);\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n          probe_log_state (\"add_listen_fd_failed\", daemon, millisec);\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n  {\n    probe_log_state (\"before_set_millisec_due_to_err_state\", daemon, millisec);\n    /* Reported second place where parameter is modified */\n    millisec = 0;\n    probe_log_state (\"after_set_millisec_due_to_err_state\", daemon, millisec);\n  }\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n    probe_log_state (\"timeout_zero_tv_set\", daemon, millisec);\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n      probe_log_state (\"timeout_from_mhd_get_timeout64\", daemon, millisec);\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n      probe_log_state (\"timeout_from_millisec\", daemon, millisec);\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n      probe_log_state (\"timeout_none_tv_null\", daemon, millisec);\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n      probe_log_simple (\"timeout_set\", millisec);\n    }\n  }\n  probe_log_state (\"before_select_call\", daemon, millisec);\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  probe_log_simple (\"after_select_call\", num_ready);\n  if (daemon->shutdown)\n  {\n    probe_log_state (\"post_select_shutdown\", daemon, millisec);\n    return MHD_NO;\n  }\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    probe_log_simple (\"select_failed_errno\", err);\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      probe_log_simple (\"select_eintr_return_decision\", (MHD_NO == err_state) ? MHD_YES : MHD_NO);\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    probe_log_state (\"select_failed_non_eintr\", daemon, millisec);\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n  {\n    probe_log_state (\"internal_run_from_select_non_no\", daemon, millisec);\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  }\n  probe_log_state (\"exit_normal\", daemon, millisec);\n  return MHD_NO;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[1755066473] EVENT: entry\n  daemon ptr: 0x557d98a57160\n  daemon->shutdown: 1\n  daemon->options: 0x00000009\n  daemon->connections: 0\n  daemon->connection_limit: 510\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x557d98a57358\n  millisec (view): -1\n\n[1755066473] EVENT: early_return_shutdown\n  daemon ptr: 0x557d98a57160\n  daemon->shutdown: 1\n  daemon->options: 0x00000009\n  daemon->connections: 0\n  daemon->connection_limit: 510\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x557d98a57358\n  millisec (view): -1\n\n[1755066473] EVENT: entry\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: single_threaded_enter\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: timeout_zero_tv_set\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: before_select_call\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: after_select_call -- millisec=0\n[1755066473] EVENT: internal_run_from_select_non_no\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: entry\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: single_threaded_enter\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: timeout_zero_tv_set\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: before_select_call\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: after_select_call -- millisec=0\n[1755066473] EVENT: internal_run_from_select_non_no\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: entry\n  daemon ptr: 0x556da63da860\n  daemon->shutdown: 0\n  daemon->options: 0x00000001\n  daemon->connections: 0\n  daemon->connection_limit: 1019\n  daemon->at_limit: 0\n  daemon->was_quiesced: 0\n  daemon->listen_fd: 0x3\n  daemon->itc: 0x556da63daa58\n  millisec (view): 0\n\n[1755066473] EVENT: single_threaded_enter\n  daemon ptr: 0x556da63da8\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In MHD_select the scalar parameter millisec is assigned to (for example: \"millisec = 0;\" in two places), which directly modifies the parameter and therefore violates Rule 17.8. The supplied probe logs and test code show the parameter being observed before and after such code paths, confirming the assignments occur at runtime. The report by agent A is correct. (Typical remediation: copy millisec to a local variable and modify the local copy instead of the parameter.)"
}