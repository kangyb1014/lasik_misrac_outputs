{
  "user_message": "An agent A claimed that the following calculate_add_nonce_with_retry code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of calculate_add_nonce_with_retry.\n```c\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n      return false; /* No need to re-try */\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n      return false; /* No need to re-try */\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (timestamp1 == timestamp2)\n    {\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n        timestamp2 -= 2; /* Fallback value */\n    }\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n  return true;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro _MHD_ROTR32 expands to the compiler builtin __builtin_rotateright32 (see: #define _MHD_ROTR32(value32, bits) ((uint32_t)__builtin_rotateright32((value32),(bits)))). Using __builtin_rotateright32 is a compiler-specific builtin/intrinsic (an extension to standard C) and is documented as such by common compilers (GCC/Clang). The statement base2 = _MHD_ROTR32(base2, 4); therefore uses a language/compiler extension and violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log(const char *event, const char *func, uint64_t timestamp1,\n              uint64_t timestamp2, uint64_t base1, uint32_t base2_before,\n              uint32_t base2_after, uint16_t base3, uint8_t base4,\n              const char *note)\n{\n  /* Ensure directory exists; ignore errors if it already does. */\n  (void) mkdir(\"/tmp/logs\", 0755);\n\n  FILE *f = fopen(\"/tmp/logs/592.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  function: %s\\n\", func ? func : \"(null)\");\n  fprintf(f, \"  timestamp1: %llu\\n\", (unsigned long long) timestamp1);\n  fprintf(f, \"  timestamp2: %llu\\n\", (unsigned long long) timestamp2);\n  fprintf(f, \"  base1: 0x%016llx\\n\", (unsigned long long) base1);\n  fprintf(f, \"  base2_before: 0x%08x\\n\", base2_before);\n  fprintf(f, \"  base2_after: 0x%08x\\n\", base2_after);\n  fprintf(f, \"  base3: 0x%04x\\n\", base3);\n  fprintf(f, \"  base4: 0x%02x\\n\", base4);\n  if (note)\n    fprintf(f, \"  note: %s\\n\", note);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n      return false; /* No need to re-try */\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n      return false; /* No need to re-try */\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (timestamp1 == timestamp2)\n    {\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n\n      /* Probe: log before calling _MHD_ROTR32 */\n      {\n        uint32_t before_rotr = base2;\n        uint32_t after_rotr = _MHD_ROTR32 (base2, 4);\n        /* Preserve original behavior */\n        base2 = after_rotr;\n\n        mhd_probe_log(\"use_rotr32\",\n                      __func__, timestamp1, timestamp2, base1,\n                      before_rotr, after_rotr, 0, 0,\n                      \"Called _MHD_ROTR32 (rotation right by 4)\");\n      }\n\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n\n      /* Probe: log before and after _MHD_ROTL32 call */\n      {\n        uint32_t before_rotl = base2;\n        uint32_t shift = (((base4 >> 4) ^ base4) % 32);\n        uint32_t after_rotl = _MHD_ROTL32 (base2, shift);\n        base2 = after_rotl;\n\n        mhd_probe_log(\"use_rotl32\",\n                      __func__, timestamp1, timestamp2, base1,\n                      before_rotl, after_rotl, 0, base4,\n                      \"Called _MHD_ROTL32 (variable shift)\");\n      }\n\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n\n      /* Probe: record timestamp adjustments */\n      mhd_probe_log(\"timestamp_adjust\",\n                    __func__, timestamp1, timestamp2, 0, 0, 0, base3, base4,\n                    \"After applying base4 jumpback\");\n\n      if (timestamp1 == timestamp2)\n      {\n        timestamp2 -= 2; /* Fallback value */\n        mhd_probe_log(\"timestamp_fallback\",\n                      __func__, timestamp1, timestamp2, 0, 0, 0, 0, 0,\n                      \"Applied fallback decrement of 2\");\n      }\n    }\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      mhd_probe_log(\"no_free_slot\",\n                    __func__, timestamp1, timestamp2, 0, 0, 0, 0, 0,\n                    \"No free slot found after retry\");\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n  return true;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for calculate_add_nonce_with_retry. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 1.2 forbids use of language/compiler extensions that are explicitly documented as such by the compiler. The code fragment calls macros _MHD_ROTR32 and _MHD_ROTL32. If, as agent A states, _MHD_ROTR32 expands to the compiler builtin __builtin_rotateright32 (and analogously for _MHD_ROTL32), then the source text effectively uses a compiler-specific builtin/intrinsic. Such builtins are compiler extensions and therefore constitute a violation of MISRA C 2023 Rule 1.2.\n\nThat said, the snippet in the report does not include the macro definitions, so the presence (or absence) of a violation depends on how those macros are defined in the project and on which build configuration is used. If the macros are conditionally defined to fall back to a pure-standard-C rotate implementation (shifts and ORs) when the compiler builtin is not desired, then the particular build configuration must be inspected: only builds that expand to the __builtin_* form would violate Rule 1.2.\n\nThe fact the test code compiled successfully (and that the test log is empty) does not negate the possibility of a MISRA 1.2 violation \u2014 successful compilation only shows the compiler accepted the builtin; it does not make the builtin standard C.\n\nConclusion: given agent A\u2019s stated macro definition (expansion to __builtin_rotateright32), the report is correct. To be certain in a real review you must locate the macro definitions and the project\u2019s build-time configuration to confirm whether the builtin is actually used in the relevant build(s)."
}