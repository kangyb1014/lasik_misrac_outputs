{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function fill_v1_v2_form:\nstruct Session\n{\n  /**\n   * We keep all sessions in a linked list.\n   */\n  struct Session *next;\n\n  /**\n   * Unique ID for this session.\n   */\n  char sid[33];\n\n  /**\n   * Reference counter giving the number of connections\n   * currently using this session.\n   */\n  unsigned int rc;\n\n  /**\n   * Time when this session was last active.\n   */\n  time_t start;\n\n  /**\n   * String submitted via form.\n   */\n  char value_1[64];\n\n  /**\n   * Another value submitted via form.\n   */\n  char value_2[64];\n\n}\n...\n#define FORM_V1_V2 SECOND_PAGE\n...\nstruct MHD_Response\n...\nstruct MHD_Connection\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n",
    "response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n",
    "struct Session\n{\n  ...\n  char value_1[64];\n  char value_2[64];\n\n}\n",
    "char *reply;\nreply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n",
    "if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n",
    "add_session_cookie (session, response);\n",
    "static enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n"
  ],
  "explanation": "Other pointer uses in the function either are already const-qualified or must remain non-const due to how they are used or the called APIs. For example, the parameters declared as const (cls, mime) are already const-qualified. The format string macro (FORM_V1_V2) is a compile-time string literal. Buffers that are written into (snprintf, malloc result) necessarily require a non-const target. Calls into the MHD API use signatures that accept non-const/void* buffers and free-callbacks, so those API boundaries enforce non-const types. Therefore only the listed fragments warrant further investigation to determine whether const qualification could be applied without breaking semantics or API contracts; other code fragments do not need investigation for Rule 8.13. "
}