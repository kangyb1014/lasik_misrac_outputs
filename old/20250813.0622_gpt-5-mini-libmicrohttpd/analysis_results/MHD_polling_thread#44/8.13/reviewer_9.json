{
  "user_message": "An agent A claimed that the following MHD_polling_thread code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_polling_thread.\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call passes 'daemon' as a non-const pointer. If the function MHD_poll does not modify the daemon object (i.e. its prototype could be MHD_poll(const struct MHD_Daemon *, int)), then the pointer should be const-qualified and the code violates MISRA C 2023 Rule 8.13. To fix: declare the local variable and the function parameter as const struct MHD_Daemon * (and update callers) so pointers that are not used to modify the object are const-qualified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef void * MHD_THRD_RTRN_TYPE_;\ntypedef /* calling convention placeholder */ void MHD_THRD_CALL_SPEC_;\nconst int MHD_YES = 1;\nconst unsigned long MHD_TEST_ALLOW_SUSPEND_RESUME = 0x2UL;\nstatic void MHD_log_state(const struct MHD_Daemon *d, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/355.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log basic pointer and a few observable fields in a defensive manner */\n    (void) fprintf(f, \"[MHD] %s: daemon=%p\\n\", stage, (const void *) d);\n    if (d != NULL)\n    {\n      /* Print fields that are used in this function. Cast to unsigned long/int to\n       * avoid format mismatches for unknown underlying types. */\n      (void) fprintf(f, \"    shutdown=%d, options=0x%lx, sigpipe_blocked=%d, tid_addr=%p\\n\",\n                     (int) d->shutdown,\n                     (unsigned long) d->options,\n                     (int) d->sigpipe_blocked,\n                     (void *) &(d->tid));\n    }\n    (void) fclose(f);\n  }\n}\nstatic void MHD_log_action(const struct MHD_Daemon *d, const char *action)\n{\n  FILE *f = fopen(\"/tmp/logs/355.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"[MHD] ACTION: %s (daemon=%p)\\n\", action, (const void *) d);\n    (void) fclose(f);\n  }\n}\nstatic void MHD_thread_handle_ID_set_current_thread_ID_ (pthread_t *out)\n{\n  if (out)\n    *out = pthread_self();\n}\nstatic int MHD_D_IS_USING_POLL_ (const struct MHD_Daemon *d)\n{\n  /* If bit 0 of options is set, treat as using poll. */\n  return d && (d->options & 0x1UL);\n}\nstatic int MHD_D_IS_USING_EPOLL_ (const struct MHD_Daemon *d)\n{\n  /* If bit 1 of options is set, treat as using epoll. */\n  return d && (d->options & 0x4UL);\n}\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_;\n\nstatic void MHD_poll (struct MHD_Daemon *daemon, int yes)\n{\n  (void) daemon; (void) yes;\n  /* Simulate waiting briefly */\n  usleep(1000);\n}\nstatic void MHD_epoll (struct MHD_Daemon *daemon, int timeout)\n{\n  (void) daemon; (void) timeout;\n  usleep(1000);\n}\nstatic void MHD_select (struct MHD_Daemon *daemon, int timeout)\n{\n  (void) daemon; (void) timeout;\n  usleep(1000);\n}\nstatic void MHD_cleanup_connections (struct MHD_Daemon *daemon)\n{\n  (void) daemon;\n  /* no-op cleanup in this test scaffolding */\n}\nstatic void resume_suspended_connections (struct MHD_Daemon *daemon)\n{\n  (void) daemon;\n}\nstatic void close_all_connections (struct MHD_Daemon *daemon)\n{\n  (void) daemon;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 recommends that a pointer should point to a const-qualified type when the pointed-to object is not modified through that pointer. In MHD_polling_thread the daemon pointer is used to modify the daemon object: e.g. MHD_thread_handle_ID_set_current_thread_ID_(&(daemon->tid)) writes into daemon->tid, the code assigns daemon->sigpipe_blocked = true, and other non-const operations (cleanup/close/resume) are performed by passing daemon to functions that are likely to modify it. Because the function uses daemon for mutations, it is not appropriate (and would be incorrect) to declare it as pointing to const. Therefore there is no violation of MISRA C 2023 Rule 8.13 in the provided code."
}