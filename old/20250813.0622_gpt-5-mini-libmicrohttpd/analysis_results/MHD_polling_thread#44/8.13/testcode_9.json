{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'daemon' as a non-const pointer. If the function MHD_poll does not modify the daemon object (i.e. its prototype could be MHD_poll(const struct MHD_Daemon *, int)), then the pointer should be const-qualified and the code violates MISRA C 2023 Rule 8.13. To fix: declare the local variable and the function parameter as const struct MHD_Daemon * (and update callers) so pointers that are not used to modify the object are const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_polling_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/355.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_polling_thread code.\n",
  "test_code": "static void MHD_log_state(const struct MHD_Daemon *d, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/355.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log basic pointer and a few observable fields in a defensive manner */\n    (void) fprintf(f, \"[MHD] %s: daemon=%p\\n\", stage, (const void *) d);\n    if (d != NULL)\n    {\n      /* Print fields that are used in this function. Cast to unsigned long/int to\n       * avoid format mismatches for unknown underlying types. */\n      (void) fprintf(f, \"    shutdown=%d, options=0x%lx, sigpipe_blocked=%d, tid_addr=%p\\n\",\n                     (int) d->shutdown,\n                     (unsigned long) d->options,\n                     (int) d->sigpipe_blocked,\n                     (void *) &(d->tid));\n    }\n    (void) fclose(f);\n  }\n}\n\nstatic void MHD_log_action(const struct MHD_Daemon *d, const char *action)\n{\n  FILE *f = fopen(\"/tmp/logs/355.txt\", \"a\");\n  if (f != NULL)\n  {\n    (void) fprintf(f, \"[MHD] ACTION: %s (daemon=%p)\\n\", action, (const void *) d);\n    (void) fclose(f);\n  }\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  /* Log entry and initial state. */\n  MHD_log_state(daemon, \"entry\");\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n  /* Log result of signal mask attempt */\n  MHD_log_state(daemon, \"after_sigmask_attempt\");\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n    {\n      MHD_log_action(daemon, \"using poll - about to call MHD_poll\");\n      MHD_poll (daemon, MHD_YES);\n      MHD_log_action(daemon, \"returned from MHD_poll\");\n    }\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      MHD_log_action(daemon, \"using epoll - about to call MHD_epoll\");\n      MHD_epoll (daemon, -1);\n      MHD_log_action(daemon, \"returned from MHD_epoll\");\n    }\n    else\n#endif\n    {\n      MHD_log_action(daemon, \"using select - about to call MHD_select\");\n      MHD_select (daemon, -1);\n      MHD_log_action(daemon, \"returned from MHD_select\");\n    }\n\n    /* Log state before cleanup */\n    MHD_log_state(daemon, \"before_cleanup_connections\");\n    MHD_cleanup_connections (daemon);\n    MHD_log_state(daemon, \"after_cleanup_connections\");\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n  {\n    MHD_log_action(daemon, \"about to resume_suspended_connections\");\n    resume_suspended_connections (daemon);\n    MHD_log_action(daemon, \"returned from resume_suspended_connections\");\n  }\n\n  MHD_log_action(daemon, \"about to close_all_connections\");\n  close_all_connections (daemon);\n  MHD_log_action(daemon, \"returned from close_all_connections\");\n\n  MHD_log_state(daemon, \"exit\");\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}"
}