{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses 'pos' as the loop counter but the third clause is 'pos = posn' where 'posn' is assigned inside the loop body (posn = pos->prev). Clause 3 of MISRA C 2023 Rule 14.2 forbids the third clause from using objects that are modified in the loop body. Because the third-clause expression depends on 'posn' which is modified in the loop body, this violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_polling_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/356.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\nPlease provide the modified MHD_polling_thread code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/356.txt */\nstatic void MHD_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/356.txt\", \"a\");\n    if (f == NULL)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Prepend a simple timestamp for ordering */\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  /* Log entry to polling thread and the daemon pointer */\n  MHD_log_probe(\"MHD_polling_thread: start, daemon=%p\", (void *)daemon);\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n\n  /* Log result of pthread_sigmask attempt */\n  MHD_log_probe(\"pthread_sigmask returned err=%d, errno=%d\", err, errno);\n\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  /* Loop until shutdown; log each iteration and which polling mechanism is used. */\n  {\n    unsigned long iteration = 0UL;\n\n    while (! daemon->shutdown)\n    {\n      iteration++;\n      MHD_log_probe(\"iteration=%lu, daemon->shutdown=%d, daemon=%p\",\n                    iteration, (int)daemon->shutdown, (void *)daemon);\n\n#ifdef HAVE_POLL\n      if (MHD_D_IS_USING_POLL_ (daemon))\n      {\n        MHD_log_probe(\"iteration=%lu: using poll\", iteration);\n        MHD_poll (daemon, MHD_YES);\n      }\n      else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon))\n      {\n        MHD_log_probe(\"iteration=%lu: using epoll\", iteration);\n        MHD_epoll (daemon, -1);\n      }\n      else\n#endif\n      {\n        MHD_log_probe(\"iteration=%lu: using select\", iteration);\n        MHD_select (daemon, -1);\n      }\n\n      MHD_log_probe(\"iteration=%lu: poll/select returned, about to cleanup connections\", iteration);\n      MHD_cleanup_connections (daemon);\n      MHD_log_probe(\"iteration=%lu: cleanup_connections completed\", iteration);\n    }\n\n    MHD_log_probe(\"exiting polling loop after %lu iterations, daemon->shutdown=%d\",\n                  iteration, (int)daemon->shutdown);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n  {\n    MHD_log_probe(\"before resume_suspended_connections, daemon=%p\", (void *)daemon);\n    resume_suspended_connections (daemon);\n    MHD_log_probe(\"after resume_suspended_connections, daemon=%p\", (void *)daemon);\n  }\n\n  MHD_log_probe(\"before close_all_connections, daemon=%p\", (void *)daemon);\n  close_all_connections (daemon);\n  MHD_log_probe(\"after close_all_connections, daemon=%p\", (void *)daemon);\n\n  MHD_log_probe(\"MHD_polling_thread: returning\");\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n"
}