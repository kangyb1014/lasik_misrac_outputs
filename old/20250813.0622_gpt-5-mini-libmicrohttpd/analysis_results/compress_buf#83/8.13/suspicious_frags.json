{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);",
    "strm->next_in = (const Bytef *) src;",
    "strm->next_out = tmp;"
  ],
  "explanation": "Other pointer uses in this function do not need investigation for MISRA C 2023 Rule 8.13 because they either already use const where appropriate or the pointed-to object is legitimately modified and so cannot be const-qualified: - The parameter \"const void *src\" is already const-qualified (appropriate for a read-only input). - The z_stream pointer \"z_stream *strm\" and its fields (avail_in, avail_out, next_out, etc.) are written to by this function/deflate, so the object they point to must be modifiable (cannot be const). - The parameters size_t *offset and size_t *dest_size are output/accumulation parameters (they are modified), so they must be non-const. - The parameter void **dest is used to return an allocated (modifiable) buffer and is updated in the function, so it cannot point to a const object. - The local pointer tmp_dest and the call to realloc manipulate/return modifiable memory, so those pointers cannot be const. The three selected fragments involve assignments or uses of pointers where const-qualification could be inconsistent between caller/library types (assignment of a const-qualified byte pointer to a stream input field, use of tmp as the stream output buffer and as a memcpy source), so they should be investigated to ensure proper const qualification (and that no qualifiers are being discarded or should be added to satisfy Rule 8.13)."
}