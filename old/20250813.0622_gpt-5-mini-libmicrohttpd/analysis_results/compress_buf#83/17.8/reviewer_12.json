{
  "user_message": "An agent A claimed that the following compress_buf code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of compress_buf.\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The value parameter 'src_size' is modified in-place by the statement 'src_size -= CHUNK;'. Rule 17.8 forbids modifying function parameters, so changing the value of the parameter 'src_size' violates the rule (instead, a local copy should be used).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/669.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n\n  /* Log entry and initial state */\n  mhd_log(\"compress_buf: ENTER src=%p initial_src_size=%zu initial_offset=%zu dest=%p dest_size=%zu\",\n          src, src_size, (offset != NULL) ? *offset : (size_t)0, *dest, *dest_size);\n\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      /* Log decision path and src_size before modification */\n      mhd_log(\"compress_buf: PATH CHUNK branch BEFORE modification src_size=%zu CHUNK=%d\",\n              src_size, CHUNK);\n\n      strm->avail_in = CHUNK;\n\n      /* This is the reported violation site: modifying function parameter in-place */\n      src_size -= CHUNK;\n\n      /* Log src_size after modification so callers can observe the in-place change */\n      mhd_log(\"compress_buf: PATH CHUNK branch AFTER modification src_size=%zu\",\n              src_size);\n\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      /* Log decision path for the else branch */\n      mhd_log(\"compress_buf: PATH SYNC_FLUSH branch src_size=%zu\",\n              src_size);\n\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n\n    *offset += strm->avail_in;\n\n    /* Log offset update */\n    mhd_log(\"compress_buf: offset updated by avail_in=%u new_offset=%zu\",\n            (unsigned) strm->avail_in, (offset != NULL) ? *offset : (size_t)0);\n\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n\n      /* Log state before deflate call */\n      mhd_log(\"compress_buf: calling deflate avail_in=%u avail_out=%u flush=%d\",\n              (unsigned) strm->avail_in, (unsigned) strm->avail_out, flush);\n\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n\n      /* Log result of deflate and stream state */\n      mhd_log(\"compress_buf: deflate returned %s avail_out_after=%u\",\n              (ret == MHD_YES) ? \"Z_OK->MHD_YES\" : \"MHD_NO\", (unsigned) strm->avail_out);\n\n      have = CHUNK - strm->avail_out;\n\n      /* Log how many bytes were produced and destination sizing */\n      mhd_log(\"compress_buf: have=%u dest_size_before=%zu\", have, *dest_size);\n\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        /* Log allocation failure */\n        mhd_log(\"compress_buf: realloc FAILED requested_dest_size=%zu\", *dest_size);\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n\n      /* Log copy operation details */\n      mhd_log(\"compress_buf: memcpy append have=%u new_dest_size=%zu dest_ptr=%p\",\n              have, *dest_size, *dest);\n\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n\n      /* Log loop iteration end state */\n      mhd_log(\"compress_buf: inner loop iteration end dest_size=%zu\", *dest_size);\n    }\n    while (0 == strm->avail_out);\n\n    /* Log after inner loop (one chunk processed) */\n    mhd_log(\"compress_buf: processed chunk; current_src_size=%zu flush=%d\", src_size, flush);\n  }\n  while (flush != Z_SYNC_FLUSH);\n\n  /* Log exit state */\n  mhd_log(\"compress_buf: EXIT ret=%d final_src_size=%zu final_offset=%zu final_dest=%p final_dest_size=%zu\",\n          (int) ret, src_size, (offset != NULL) ? *offset : (size_t)0, *dest, *dest_size);\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for compress_buf. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified. In compress_buf the value parameter src_size is updated in-place (src_size -= CHUNK;), which is a direct modification of a parameter variable. That is a violation of 17.8. The other mutations in the function (modifying *offset, *dest, *dest_size or members of the object pointed to by strm) modify pointees and are allowed; only the parameter variable src_size is the problem. Fix by copying src_size into a local variable (for example remaining or rem_size) and modify that local variable instead."
}