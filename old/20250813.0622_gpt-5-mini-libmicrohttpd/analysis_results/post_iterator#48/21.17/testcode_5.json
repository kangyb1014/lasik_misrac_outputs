{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(\"v2\", key) may read bytes from the object pointed to by key until a terminating '\\0' is found. If key is NULL or does not point to a properly NUL-terminated character array (for example, an unterminated buffer or truncated input), strcmp will access memory beyond the bounds of that object -> undefined behaviour. No prior check in the shown code guarantees key is non-NULL and NUL-terminated, so this is a potential violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/391.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_iterator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_iterator code.\n",
  "test_code": "static void post_iterator_probe_log(const char *stage,\n                                        const char *key,\n                                        const char *data,\n                                        unsigned long long off,\n                                        size_t size,\n                                        struct Session *session)\n{\n  FILE *f = fopen(\"/tmp/logs/391.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Log pointer-valued state only. Do not attempt to print key as a C string\n     because it might be NULL or not NUL-terminated (which would be UB). */\n  fprintf(f, \"[post_iterator] %s: key=%p, data=%p, off=%llu, size=%zu, session=%p\\n\",\n          stage, (void *) key, (void *) data, off, size, (void *) session);\n\n  /* If session is present, log some of its pointers/addresses but avoid\n     dereferencing arbitrary character pointers from external input. The\n     original function prints session->sid and values, so those are likely\n     valid, but to be conservative we log their addresses. */\n  if (session)\n  {\n    fprintf(f, \"[post_iterator] session->sid=%p, value_1=%p, value_2=%p\\n\",\n            (void *) session->sid,\n            (void *) session->value_1,\n            (void *) session->value_2);\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Probe: log entry and key/data/session state (without dereferencing key). */\n  post_iterator_probe_log(\"enter\", key, data, (unsigned long long) off, size, session);\n\n  /* Log that we're about to compare against the literal \"DONE\". We intentionally\n     do not dereference `key` here (print only pointer) because `key` may be\n     NULL or non-NUL-terminated; calling strcmp with such a key is the\n     potential violation we want to capture (it may crash or read out-of-bounds). */\n  post_iterator_probe_log(\"compare: DONE\", key, data, (unsigned long long) off, size, session);\n  if (0 == strcmp (\"DONE\", key))\n  {\n    /* Log that we've taken this branch and then preserve original behavior. */\n    post_iterator_probe_log(\"branch: DONE_taken\", key, data, (unsigned long long) off, size, session);\n\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n\n  post_iterator_probe_log(\"compare: v1\", key, data, (unsigned long long) off, size, session);\n  if (0 == strcmp (\"v1\", key))\n  {\n    post_iterator_probe_log(\"branch: v1_taken\", key, data, (unsigned long long) off, size, session);\n\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n\n    post_iterator_probe_log(\"after_write: v1\", key, data, (unsigned long long) off, size, session);\n    return MHD_YES;\n  }\n\n  post_iterator_probe_log(\"compare: v2\", key, data, (unsigned long long) off, size, session);\n  if (0 == strcmp (\"v2\", key))\n  {\n    post_iterator_probe_log(\"branch: v2_taken\", key, data, (unsigned long long) off, size, session);\n\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n\n    post_iterator_probe_log(\"after_write: v2\", key, data, (unsigned long long) off, size, session);\n    return MHD_YES;\n  }\n\n  /* Log unsupported key event; again, avoid printing key as a string. */\n  {\n    FILE *f = fopen(\"/tmp/logs/391.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[post_iterator] unsupported key branch: key=%p\\n\", (void *) key);\n      fclose(f);\n    }\n  }\n\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n"
}