{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function post_iterator:\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\nenum MHD_ValueKind\n{\n\n  /**\n   * Response header\n   * @deprecated\n   */\n  MHD_RESPONSE_HEADER_KIND = 0,\n#define MHD_RESPONSE_HEADER_KIND \\\n  _MHD_DEPR_IN_MACRO ( \\\n    \"Value MHD_RESPONSE_HEADER_KIND is deprecated and not used\") \\\n  MHD_RESPONSE_HEADER_KIND\n\n  /**\n   * HTTP header (request/response).\n   */\n  MHD_HEADER_KIND = 1,\n\n  /**\n   * Cookies.  Note that the original HTTP header containing\n   * the cookie(s) will still be available and intact.\n   */\n  MHD_COOKIE_KIND = 2,\n\n  /**\n   * POST data.  This is available only if a content encoding\n   * supported by MHD is used (currently only URL encoding),\n   * and only if the posted content fits within the available\n   * memory pool.  Note that in that case, the upload data\n   * given to the #MHD_AccessHandlerCallback will be\n   * empty (since it has already been processed).\n   */\n  MHD_POSTDATA_KIND = 4,\n\n  /**\n   * GET (URI) arguments.\n   */\n  MHD_GET_ARGUMENT_KIND = 8,\n\n  /**\n   * HTTP footer (only for HTTP 1.1 chunked encodings).\n   */\n  MHD_FOOTER_KIND = 16\n}\n...\nstruct Request\n{\n\n  /**\n   * Associated session.\n   */\n  struct Session *session;\n\n  /**\n   * Post processor handling form data (IF this is\n   * a POST request).\n   */\n  struct MHD_PostProcessor *pp;\n\n  /**\n   * URL to serve in response to this POST (if this request\n   * was a 'POST')\n   */\n  const char *post_url;\n\n}\n...\nstruct Session\n{\n  /**\n   * We keep all sessions in a linked list.\n   */\n  struct Session *next;\n\n  /**\n   * Unique ID for this session.\n   */\n  char sid[33];\n\n  /**\n   * Reference counter giving the number of connections\n   * currently using this session.\n   */\n  unsigned int rc;\n\n  /**\n   * Time when this session was last active.\n   */\n  time_t start;\n\n  /**\n   * String submitted via form.\n   */\n  char value_1[64];\n\n  /**\n   * Another value submitted via form.\n   */\n  char value_2[64];\n\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  MHD_RESPONSE_HEADER_KIND = 0,",
    "#define MHD_RESPONSE_HEADER_KIND \\\n  _MHD_DEPR_IN_MACRO ( \\\n    \"Value MHD_RESPONSE_HEADER_KIND is deprecated and not used\") \\\n  MHD_RESPONSE_HEADER_KIND"
  ],
  "explanation": "All other code constructs in the provided snippets are standard C language constructs or use standard library types/functions (enums, structs, static function definition, casts to void for unused parameters, fixed-width integer uint64_t, size_t, memcpy, strcmp, fprintf, sizeof on arrays, pointer usage, etc.). These do not, by themselves, indicate use of compiler-specific language extensions. The only fragment that may involve a compiler-specific extension is the deprecation-related macro (_MHD_DEPR_IN_MACRO) and the enum enumerator being redefined as a macro; that macro invocation could expand to compiler-specific attributes or pragmas documented as extensions, so it should be investigated. No other lines show explicit use of non-standard language extensions (e.g. __attribute__, __builtin_*, typeof, statement expressions, inline assembly, or other well-known compiler-specific constructs)."
}