{
  "user_message": "An agent A claimed that the following post_iterator code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of post_iterator.\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter 'size' (a function parameter) is assigned to in the fragment: `size = (size_t) (sizeof (session->value_2) - off - 1);`. MISRA C 2023 Rule 17.8 prohibits modifying function parameters. Although 'size' is passed by value, changing the parameter itself still violates the rule. Use a local variable (e.g. `size_t adj_size = size;`) and modify that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\npost_iterator_log (const char *stage,\n                   const char *key,\n                   uint64_t off,\n                   size_t size,\n                   const struct Session *session,\n                   const char *note)\n{\n  FILE *fp = fopen(\"/tmp/logs/389.txt\", \"a\");\n  if (fp == NULL)\n    return; /* best-effort logging */\n\n  fprintf (fp, \"stage=%s key=%s off=%llu size=%zu note=%s\\n\",\n           stage,\n           (key != NULL) ? key : \"(null)\",\n           (unsigned long long) off,\n           size,\n           (note != NULL) ? note : \"\");\n  if (session != NULL)\n  {\n    /* Print known session fields used by post_iterator. Guard against NULL strings. */\n    fprintf (fp, \"  session->sid=%s\\n\",\n             (session->sid != NULL) ? session->sid : \"(null)\");\n    fprintf (fp, \"  session->value_1=%s\\n\",\n             (session->value_1 != NULL) ? session->value_1 : \"(null)\");\n    fprintf (fp, \"  session->value_2=%s\\n\",\n             (session->value_2 != NULL) ? session->value_2 : \"(null)\");\n  }\n  fflush (fp);\n  fclose (fp);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry with initial state */\n  post_iterator_log (\"entry\", key, off, size, session, \"entering post_iterator\");\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    post_iterator_log (\"done_branch\", key, off, size, session, \"DONE branch taken\");\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    post_iterator_log (\"v1_enter\", key, off, size, session, \"enter v1 branch\");\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      post_iterator_log (\"v1_discard\", key, off, size, session, \"off beyond buffer: discarding\");\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n    {\n      /* Log the fact we're about to crop size (this is the modification of the parameter) */\n      post_iterator_log (\"v1_before_crop\", key, off, size, session, \"about to crop size parameter\");\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n      post_iterator_log (\"v1_after_crop\", key, off, size, session, \"size parameter cropped\");\n    }\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    post_iterator_log (\"v1_finish\", key, off, size, session, \"finished v1 write\");\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    post_iterator_log (\"v2_enter\", key, off, size, session, \"enter v2 branch\");\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      post_iterator_log (\"v2_discard\", key, off, size, session, \"off beyond buffer: discarding\");\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n    {\n      post_iterator_log (\"v2_before_crop\", key, off, size, session, \"about to crop size parameter\");\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n      post_iterator_log (\"v2_after_crop\", key, off, size, session, \"size parameter cropped\");\n    }\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    post_iterator_log (\"v2_finish\", key, off, size, session, \"finished v2 write\");\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  post_iterator_log (\"unsupported\", key, off, size, session, \"unsupported key\");\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for post_iterator. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In post_iterator the parameter 'size' is assigned to in two places: size = (size_t) (sizeof(session->value_1) - off - 1); and size = (size_t) (sizeof(session->value_2) - off - 1);. Although 'size' is passed by value, writing to the parameter variable itself is a modification of a function parameter and therefore violates Rule 17.8. The fact that the test logging showed no runs of this function does not change the static violation. Recommended fix: copy the incoming size into a local variable (for example size_t adj_size = size;) and modify that local variable for cropping/limits, leaving the parameter unmodified. Also consider declaring parameters const where appropriate to prevent accidental modification."
}