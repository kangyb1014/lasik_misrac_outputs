{
  "user_message": "An agent A claimed that the following post_iterator code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of post_iterator.\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'size' (size_t size) is assigned to (size = (size_t)(...)), so the parameter is modified inside the function. This violates MISRA C 2023 Rule 17.8. Fix: copy 'size' to a local variable (e.g. size_t to_copy = size;) and adjust that instead of modifying the parameter.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *event, const char *key, uint64_t off, size_t size, const void *data_ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/389.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log the event, key, offset, size and data pointer to help reproduce the scenario. */\n    fprintf (f, \"EVENT=%s KEY=%s OFF=%\" PRIu64 \" SIZE=%zu DATA_PTR=%p\\n\",\n             event,\n             (key != NULL) ? key : \"(null)\",\n             off,\n             size,\n             data_ptr);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry to this function with initial parameter values. */\n  probe_log (\"entry\", key, off, size, data);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    probe_log (\"done_path\", key, off, size, data);\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    probe_log (\"v1_path_enter\", key, off, size, data);\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      probe_log (\"v1_discard_extra\", key, off, size, data);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n    {\n      /* Log the fact that the parameter 'size' is about to be modified (evidence of violation). */\n      probe_log (\"v1_about_to_crop_size\", key, off, size, data);\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n      probe_log (\"v1_cropped_size\", key, off, size, data);\n    }\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    probe_log (\"v1_path_exit\", key, off, size, data);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    probe_log (\"v2_path_enter\", key, off, size, data);\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      probe_log (\"v2_discard_extra\", key, off, size, data);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n    {\n      /* Log the fact that the parameter 'size' is about to be modified (evidence of violation). */\n      probe_log (\"v2_about_to_crop_size\", key, off, size, data);\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n      probe_log (\"v2_cropped_size\", key, off, size, data);\n    }\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    probe_log (\"v2_path_exit\", key, off, size, data);\n    return MHD_YES;\n  }\n  probe_log (\"unsupported_key\", key, off, size, data);\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for post_iterator. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C:2023 Rule 17.8 prohibits modifying function parameters (the object passed as a parameter may be altered via a pointer, but the parameter variable itself shall not be assigned to). In the posted code the parameter size (type size_t) is assigned to in two places (size = (size_t)(...)) which is a direct modification of a function parameter and therefore violates R17.8. The probe/logging code does not change this fact; successful compilation or empty logs do not affect the rule conformance.\n\nSuggested fixes: copy the parameter into a local variable (e.g. size_t to_copy = size;) and adjust/use that local, or compute a separate clipped_size/minimum value rather than assigning back to the parameter."
}