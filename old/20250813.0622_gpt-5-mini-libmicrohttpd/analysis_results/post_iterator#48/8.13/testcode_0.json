{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns the incoming void *cls to a non-const pointer: `struct Request *request = cls;`. The function only reads `request->session` (it does not modify the Request object itself), so `request` could and should be declared as `const struct Request *request = cls;`. Using a non-const pointer when a const-qualified pointer is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/387.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of post_iterator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified post_iterator code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/387.txt. */\nstatic void\npost_iterator_log(const char *event,\n                  void *cls,\n                  struct Request *request,\n                  struct Session *session,\n                  const char *key,\n                  const char *data,\n                  uint64_t off,\n                  size_t size)\n{\n  FILE *fp = fopen(\"/tmp/logs/387.txt\", \"a\");\n  if (fp == NULL)\n    return;\n\n  fprintf(fp, \"EVENT: %s\\n\", event);\n  fprintf(fp, \"  cls=%p, request=%p, session=%p\\n\", cls, (void *)request, (void *)session);\n  if (key)\n    fprintf(fp, \"  key='%s'\\n\", key);\n  else\n    fprintf(fp, \"  key=(null)\\n\");\n  fprintf(fp, \"  off=%llu, size=%zu\\n\", (unsigned long long)off, size);\n\n  if (data != NULL && size > 0)\n  {\n    /* print up to first 32 bytes of data in hex for inspection */\n    size_t to_print = size < 32u ? size : 32u;\n    fprintf(fp, \"  data(hex, first %zu bytes):\", to_print);\n    for (size_t i = 0; i < to_print; ++i)\n      fprintf(fp, \" %02x\", (unsigned char)data[i]);\n    fprintf(fp, \"\\n\");\n  }\n  else\n  {\n    fprintf(fp, \"  data=(null or empty)\\n\");\n  }\n\n  if (session != NULL)\n  {\n    /* session fields inspected by original function */\n    fprintf(fp, \"  session->sid='%s'\\n\", session->sid ? session->sid : \"(null)\");\n    fprintf(fp, \"  session->value_1='%s'\\n\", session->value_1 ? session->value_1 : \"(null)\");\n    fprintf(fp, \"  session->value_2='%s'\\n\", session->value_2 ? session->value_2 : \"(null)\");\n  }\n\n  fprintf(fp, \"--\\n\");\n  fclose(fp);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  /* Original non-const assignment (kept to demonstrate the reported violation). */\n  struct Request *request = cls;\n  struct Session *session = request->session;\n\n  /* Log entry and the fact that the incoming void* was assigned to a non-const pointer. */\n  post_iterator_log(\"entry (assigned void* to non-const struct Request*)\",\n                    cls, request, session, key, data, off, size);\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    post_iterator_log(\"branch DONE (about to print submission)\", cls, request, session, key, data, off, size);\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    post_iterator_log(\"returning MHD_YES from DONE\", cls, request, session, key, data, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    post_iterator_log(\"branch v1 (receive chunk)\", cls, request, session, key, data, off, size);\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      post_iterator_log(\"v1: off >= sizeof(value_1)-1 (discard extra)\", cls, request, session, key, data, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n    {\n      post_iterator_log(\"v1: cropping extra data to fit value_1\", cls, request, session, key, data, off, size);\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    }\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    post_iterator_log(\"v1: chunk written\", cls, request, session, key, data, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    post_iterator_log(\"branch v2 (receive chunk)\", cls, request, session, key, data, off, size);\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      post_iterator_log(\"v2: off >= sizeof(value_2)-1 (discard extra)\", cls, request, session, key, data, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n    {\n      post_iterator_log(\"v2: cropping extra data to fit value_2\", cls, request, session, key, data, off, size);\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    }\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    post_iterator_log(\"v2: chunk written\", cls, request, session, key, data, off, size);\n    return MHD_YES;\n  }\n  post_iterator_log(\"branch unsupported key (fallthrough)\", cls, request, session, key, data, off, size);\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  post_iterator_log(\"returning MHD_YES from unsupported key\", cls, request, session, key, data, off, size);\n  return MHD_YES;\n}\n"
}