{
  "user_message": "An agent A claimed that the following MHD_set_response_options code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_response_options.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro defines _MHD_EXTERN as __attribute__((visibility(\"default\")))extern, which uses the GCC/Clang __attribute__ extension (visibility attribute) documented as a compiler-specific extension. This is a language/compiler extension and therefore violates MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void MHD_probe_log(const char *stage,\n                          struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          enum MHD_ResponseOptions ro,\n                          enum MHD_Result ret)\n{\n  FILE *f = fopen(\"/tmp/logs/304.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"Stage: %s\\n\", stage);\n  fprintf(f, \"response=%p\\n\", (void *)response);\n  if (response != NULL)\n  {\n    /* Print relevant response fields as integers to capture state */\n    fprintf(f, \" response->flags_auto=%llu\\n\",\n            (unsigned long long) response->flags_auto);\n    fprintf(f, \" response->flags=%llu\\n\",\n            (unsigned long long) response->flags);\n    fprintf(f, \" response->total_size=%llu\\n\",\n            (unsigned long long) response->total_size);\n  }\n  fprintf(f, \" flags(param)=%llu\\n\", (unsigned long long) flags);\n  fprintf(f, \" ro(current)=%llu\\n\", (unsigned long long) ro);\n  fprintf(f, \" ret(current)=%llu\\n\", (unsigned long long) ret);\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  /* Log entry into function with initial state */\n  MHD_probe_log(\"entry\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    MHD_probe_log(\"has_content_length_branch\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      MHD_probe_log(\"early_return_remove_insanity\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      MHD_probe_log(\"has_head_only_branch\", response, flags, (enum MHD_ResponseOptions)0, (enum MHD_Result)0);\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        MHD_probe_log(\"early_return_remove_head_only_requires_insanity\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    MHD_probe_log(\"early_return_head_only_with_total_size\", response, flags, (enum MHD_ResponseOptions)0, MHD_NO);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n  MHD_probe_log(\"after_set_flags\", response, flags, (enum MHD_ResponseOptions)0, ret);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    /* Log each option read from varargs */\n    MHD_probe_log(\"vararg_option_read\", response, flags, ro, ret);\n\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      MHD_probe_log(\"vararg_unrecognized_option\", response, flags, ro, ret);\n      break;\n    }\n  }\n  va_end (ap);\n\n  MHD_probe_log(\"exit\", response, flags, (enum MHD_ResponseOptions)0, ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_set_response_options. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 1.2 prohibits the use of compiler/language extensions. The snippet uses the macro _MHD_EXTERN but does not show its definition. Agent A states that _MHD_EXTERN expands to __attribute__((visibility(\"default\"))) extern. The GCC/Clang __attribute__ mechanism is a documented compiler extension. If _MHD_EXTERN is indeed defined as __attribute__((visibility(\"default\"))) extern (or otherwise expands to a compiler-specific __attribute__), then the code uses a compiler extension and therefore violates MISRA C 2023 Rule 1.2 \u2014 so Agent A\u2019s report is correct in that case.\n\nHowever, from the provided target_code alone you cannot prove the violation because the macro definition is not present; if _MHD_EXTERN simply expands to the standard extern (or to nothing on compilers that don't support the attribute), there would be no Rule 1.2 violation. In short: Agent A is correct if the macro expands to the GCC/Clang __attribute__ form; otherwise the report is not supported by the shown code."
}