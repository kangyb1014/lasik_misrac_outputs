{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member is declared as a pointer to a non-const type: \"MHD_iovec_ *data_iov;\". If the library does not need to modify the pointed-to iovec array (which is implied by other members such as \"const char *data\" and typical use of an iovec provided by the caller), then the pointer should be to a const-qualified type (const MHD_iovec_ *data_iov). As written it allows modification of the pointee and thus violates MISRA C 2023 Rule 8.13. (If, however, the implementation actually needs to modify the iovec elements, then the non-const pointer is justified and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_set_response_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/307.txt\", \"a\");\n  if (NULL == fp)\n  {\n    /* If logging is not possible, silently continue to preserve original behavior. */\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  fprintf(fp, \"\\n\");\n  va_end(ap);\n  fclose(fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  /* Entry probe: log incoming pointer and flags */\n  mhd_probe_log(\"ENTRY: MHD_set_response_options response=%p flags=0x%X\", (void *)response, (unsigned)flags);\n  if (NULL != response)\n  {\n    /* Log observable fields used by this function. Casts used for portable printing. */\n    mhd_probe_log(\"STATE: response->flags_auto=0x%X response->flags=0x%X response->total_size=%llu\",\n                  (unsigned)response->flags_auto,\n                  (unsigned)response->flags,\n                  (unsigned long long)response->total_size);\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    mhd_probe_log(\"BRANCH: response has custom Content-Length (flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)\");\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      mhd_probe_log(\"REJECT: attempt to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH while response had it (return MHD_NO)\");\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      mhd_probe_log(\"BRANCH: response had MHD_RF_HEAD_ONLY_RESPONSE and flags request removes it\");\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        mhd_probe_log(\"REJECT: cannot remove MHD_RF_HEAD_ONLY_RESPONSE without also requesting MHD_RF_INSANITY_HEADER_CONTENT_LENGTH (return MHD_NO)\");\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    mhd_probe_log(\"REJECT: HEAD_ONLY response requested but total_size != 0 (total_size=%llu) (return MHD_NO)\", (unsigned long long)response->total_size);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n  mhd_probe_log(\"STATE_CHANGE: response->flags set to 0x%X, ret initialized to MHD_YES\", (unsigned)response->flags);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    mhd_probe_log(\"VA_LOOP: got response option ro=%d\", (int)ro);\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      mhd_probe_log(\"CASE: MHD_RO_END encountered inside loop (unexpected)\");\n      break;\n    default:\n      mhd_probe_log(\"CASE: unknown/unsupported response option, setting ret=MHD_NO\");\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n\n  mhd_probe_log(\"EXIT: returning %d\", (int)ret);\n  return ret;\n}\n"
}