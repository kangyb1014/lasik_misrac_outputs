{
  "user_message": "An agent A claimed that the following MHD_pool_reallocate code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_reallocate.\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as ((void)0). That means every call like mhd_assert(pool->end >= pool->pos); in MHD_pool_reallocate becomes an executed no-op expression statement. Removing those mhd_assert call sites would not affect program behaviour, so those statements are dead code and thus the project violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/10.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\nstatic void\nmhd_probe_log_pool_state (struct MemoryPool *pool,\n                          void *old,\n                          size_t old_size,\n                          size_t new_size)\n{\n  /* Print pointer and size fields */\n  mhd_probe_log (\"MHD_pool_reallocate ENTRY: pool=%p memory=%p pos=%zu end=%zu size=%zu old=%p old_size=%zu new_size=%zu\",\n                 (void *) pool, (void *) pool->memory, pool->pos, pool->end, pool->size, old, old_size, new_size);\n\n  /* Evaluate and log asserted conditions explicitly so their values are visible even if mhd_assert is a no-op. */\n  mhd_probe_log (\"ASSERT: pool->end >= pool->pos => %s\", (pool->end >= pool->pos) ? \"true\" : \"false\");\n  mhd_probe_log (\"ASSERT: pool->size >= pool->end - pool->pos => %s\", (pool->size >= pool->end - pool->pos) ? \"true\" : \"false\");\n  mhd_probe_log (\"ASSERT: old != NULL || old_size == 0 => %s\", ((old != NULL) || (old_size == 0)) ? \"true\" : \"false\");\n  mhd_probe_log (\"ASSERT: pool->size >= old_size => %s\", (pool->size >= old_size) ? \"true\" : \"false\");\n  /* pos alignment assertion is not evaluated here because ROUND_TO_ALIGN may be project-specific; log raw pos instead */\n  mhd_probe_log (\"INFO: pool->pos (raw) = %zu\", pool->pos);\n#ifdef MHD_ASAN_POISON_ACTIVE\n#ifdef HAVE___ASAN_REGION_IS_POISONED\n  /* If ASAN check available, log its result */\n  mhd_probe_log (\"ASAN: __asan_region_is_poisoned(old, old_size) => %p\", __asan_region_is_poisoned (old, old_size));\n#endif\n#endif\n}\n\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  /* Log initial state and values that mhd_assert would check */\n  mhd_probe_log_pool_state (pool, old, old_size, new_size);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    /* Log offset and shrinking decision */\n    mhd_probe_log (\"HAVE OLD: old_offset=%zu shrinking=%s\", old_offset, shrinking ? \"true\" : \"false\");\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      mhd_probe_log (\"SHRINK: zeroing from %p + %zu, len=%zu\", old, new_size, old_size - new_size);\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      mhd_probe_log (\"LAST_BLOCK: old_offset=%zu old_size=%zu new_size=%zu new_apos=%zu pool->pos=%zu pool->end=%zu\",\n                     old_offset, old_size, new_size, new_apos, pool->pos, pool->end);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n        {\n          mhd_probe_log (\"NO_SPACE: cannot grow in-place (new_apos=%zu pool->end=%zu pool->pos=%zu)\", new_apos, pool->end, pool->pos);\n          return NULL;                /* No space */\n        }\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      mhd_probe_log (\"RESIZED_IN_PLACE: returning old=%p new_size=%zu pool->pos=%zu\", old, new_size, pool->pos);\n      return old;\n    }\n    if (shrinking)\n    {\n      mhd_probe_log (\"SHRINK_NOT_LAST: resized in-place logically, old remains allocated, returning old=%p new_size=%zu\", old, new_size);\n      return old;   /* Resized in-place, freed part remains allocated */\n    }\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n  {\n    mhd_probe_log (\"ALLOC_FAIL: asize=%zu available=%zu (pool->end=%zu pool->pos=%zu) new_size=%zu\", asize, pool->end - pool->pos, pool->end, pool->pos, new_size);\n    return NULL;\n  }\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    mhd_probe_log (\"COPYING: new_blc=%p old=%p old_size=%zu\", new_blc, old, old_size);\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  mhd_probe_log (\"ALLOC_OK: returning new_blc=%p new_size=%zu pool->pos=%zu\", new_blc, new_size, pool->pos);\n  return new_blc;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_pool_reallocate ENTRY: pool=0x565409687ae0 memory=0x565409687b10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x565409687b50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x565409687ae0 memory=0x565409687b10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x565409687b50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x565409687ae0 memory=0x565409690f30 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x565409690f70 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc66c000de0 memory=0x7fc66c000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc66c000e50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc66c000de0 memory=0x7fc66c000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc66c000e50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc66c000de0 memory=0x7fc66c000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc66c000e50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc66c000de0 memory=0x7fc66c000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc66c000e50 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc674000b90 memory=0x7fc6740012c0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc674001300 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc674000dc0 memory=0x7fc674001070 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc6740010b0 new_size=32576 pool->pos=32640\nMHD_pool_reallocate ENTRY: pool=0x7fc664000de0 memory=0x7fc664000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\nASSERT: pool->end >= pool->pos => true\nASSERT: pool->size >= pool->end - pool->pos => true\nASSERT: old != NULL || old_size == 0 => true\nASSERT: pool->size >= old_size => true\nINFO: pool->pos (raw) = 64\nALLOC_OK: returning new_blc=0x7fc664000e50 new_size=32576 pool->pos=32640\nMHD_po\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. With mhd_assert defined as ((void)0) each mhd_assert(...); in MHD_pool_reallocate becomes a no-op expression statement that produces no effect at run-time; removing those statements cannot change program behaviour. The provided test output shows the function operates identically with the assertions being no-ops (all asserted conditions logged separately evaluate true and the function returns as expected), so those statements meet the definition of dead code in MISRA C 2023 Rule 2.2. Therefore the report that the code violates Rule 2.2 is correct."
}