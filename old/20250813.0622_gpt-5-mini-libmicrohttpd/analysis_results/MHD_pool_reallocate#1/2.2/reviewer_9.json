{
  "user_message": "An agent A claimed that the following MHD_pool_reallocate code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_reallocate.\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call _MHD_POISON_MEMORY(old, old_size) is a no-op because the macro is defined as (void)0 in the project. In the path where old_size != 0 (after memcpy and memset) this statement is executed but has no effect; removing it would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  /* Log entry: parameters and pool state */\n  {\n    FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"MHD_pool_reallocate ENTRY: pool=%p old=%p old_size=%zu new_size=%zu pos=%zu end=%zu size=%zu\\n\",\n               (void *) pool, (void *) old, old_size, new_size,\n               (size_t) pool->pos, (size_t) pool->end, (size_t) pool->size);\n      fclose (lf);\n    }\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    /* Log path into existing block */\n    {\n      FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"EXISTING_BLOCK: old=%p old_offset=%zu old_size=%zu new_size=%zu shrinking=%d\\n\",\n                 (void *) old, old_offset, old_size, new_size, (int) shrinking);\n        fclose (lf);\n      }\n    }\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      /* Log shrinking details */\n      {\n        FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"SHRINK_IN_PLACE: old=%p new_size=%zu freed_bytes=%zu freed_addr=%p\\n\",\n                   (void *) old, new_size, (size_t) (old_size - new_size), (void *) ((uint8_t *) old + new_size));\n          fclose (lf);\n        }\n      }\n\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n      /* Log that poison call was made (may be a no-op if macro is (void)0) */\n      {\n        FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"CALLED _MHD_POISON_MEMORY on %p len=%zu\\n\",\n                   (void *) ((uint8_t *) old + new_size), (size_t) (old_size - new_size));\n          fclose (lf);\n        }\n      }\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n\n      /* Log last-block resize attempt */\n      {\n        FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"LAST_BLOCK: old_offset=%zu old_size=%zu new_size=%zu new_apos=%zu pos=%zu end=%zu shrinking=%d\\n\",\n                   old_offset, old_size, new_size, new_apos, (size_t) pool->pos, (size_t) pool->end, (int) (old_size > new_size));\n          fclose (lf);\n        }\n      }\n\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n        {\n          FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n          if (lf)\n          {\n            fprintf (lf, \"NO_SPACE for in-place grow: new_apos=%zu end=%zu pos=%zu\\n\",\n                     new_apos, (size_t) pool->end, (size_t) pool->pos);\n            fclose (lf);\n          }\n          return NULL;                /* No space */\n        }\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      /* Log unpoison and return */\n      {\n        FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"RESIZED_IN_PLACE: old=%p new_size=%zu new_pos=%zu RETURN old\\n\",\n                   (void *) old, new_size, (size_t) pool->pos);\n          fclose (lf);\n        }\n      }\n      return old;\n    }\n    if (shrinking)\n    {\n      /* Log that shrinking returned the same pointer */\n      {\n        FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"SHRINK_RETURN_OLD: old=%p old_size=%zu new_size=%zu\\n\",\n                   (void *) old, old_size, new_size);\n          fclose (lf);\n        }\n      }\n      return old;   /* Resized in-place, freed part remains allocated */\n    }\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n\n  /* Log allocation decision */\n  {\n    FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"ALLOCATE_NEW: new_size=%zu asize=%zu available=%zu\\n\",\n               new_size, asize, (size_t) (pool->end - pool->pos));\n      fclose (lf);\n    }\n  }\n\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n  {\n    FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"ALLOC_FAIL: asize=%zu new_size=%zu available=%zu\\n\",\n               asize, new_size, (size_t) (pool->end - pool->pos));\n      fclose (lf);\n    }\n    return NULL;\n  }\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  /* Log new block assignment */\n  {\n    FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"NEW_BLOCK: new_blc=%p new_size=%zu asize=%zu new_pos=%zu\\n\",\n               (void *) new_blc, new_size, asize, (size_t) pool->pos);\n      fclose (lf);\n    }\n  }\n\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    {\n      FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"MOVE_DATA: new_blc=%p old=%p old_size=%zu\\n\",\n                 (void *) new_blc, (void *) old, old_size);\n        fclose (lf);\n      }\n    }\n\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n    /* Log poison call on old block (may be no-op) */\n    {\n      FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"CALLED _MHD_POISON_MEMORY on old=%p len=%zu\\n\", (void *) old, old_size);\n        fclose (lf);\n      }\n    }\n  }\n\n  /* Log final return */\n  {\n    FILE *lf = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"RETURN_NEW_BLOCK: %p\\n\", (void *) new_blc);\n      fclose (lf);\n    }\n  }\n  return new_blc;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_pool_reallocate ENTRY: pool=0x564fbb932ae0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x564fbb932b50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x564fbb932b50\nMHD_pool_reallocate ENTRY: pool=0x564fbb932ae0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x564fbb932b50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x564fbb932b50\nMHD_pool_reallocate ENTRY: pool=0x564fbb932ae0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x564fbb93bf70 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x564fbb93bf70\nMHD_pool_reallocate ENTRY: pool=0x7f5904000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f5904000e50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f5904000e50\nMHD_pool_reallocate ENTRY: pool=0x7f5904000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f5904000e50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f5904000e50\nMHD_pool_reallocate ENTRY: pool=0x7f5904000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f5904000e50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f5904000e50\nMHD_pool_reallocate ENTRY: pool=0x7f5904000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f5904000e50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f5904000e50\nMHD_pool_reallocate ENTRY: pool=0x7f5904000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f5904000e50 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f5904000e50\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000b90 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc001300 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc001300\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000dc0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc0010b0 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc0010b0\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000dc0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc0010b0 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc0010b0\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc0010b0 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc0010b0\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc0010b0 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc0010b0\nMHD_pool_reallocate ENTRY: pool=0x7f58fc000de0 old=(nil) old_size=0 new_size=32576 pos=64 end=32640 size=32768\nALLOCATE_NEW: new_size=32576 asize=32576 available=32576\nNEW_BLOCK: new_blc=0x7f58fc0010b0 new_size=32576 asize=32576 new_pos=32640\nRETURN_NEW_BLOCK: 0x7f58fc0010b0\nMHD_pool_reallocate ENTRY: pool=0x561f97ab9300 old=(nil) old_size=0 new_size=3904 pos=64 end=3968 size=4096\nALLOCATE_NEW: new_size=3904 asize=3904 available=3904\nNEW_BLOCK: new_blc=0x561f97ab9370 new_size=3904 asize=3904 new_pos=396\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In the project configuration described the macro _MHD_POISON_MEMORY expands to (void)0, so the statement _MHD_POISON_MEMORY(old, old_size) is an executed no-op. Removing that statement would not change program behaviour, therefore it constitutes dead code under MISRA C 2023 Rule 2.2. To remediate, either make the poisoning macro produce a meaningful effect in the build (when required) or guard the calls with the same conditional compilation that enables the poisoning behaviour so the no-op calls are not present in the compiled project."
}