{
  "user_message": "An agent A claimed that the following MHD_pool_reallocate code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_reallocate.\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement _MHD_UNPOISON_MEMORY(new_blc, new_size) expands to (void)0 (a no-op) in the provided definitions. That call is executed but has no effect; removing it would not change program behaviour (in builds where the ASAN macros are disabled), so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_log_probe (const char *tag,\n               struct MemoryPool *pool,\n               void *old,\n               size_t old_size,\n               void *new_blc,\n               size_t new_size)\n{\n  FILE *f = fopen(\"/tmp/logs/10.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Try to create parent directory and reopen; ignore failures silently. */\n    (void) mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/10.txt\", \"a\");\n  }\n  if (NULL != f)\n  {\n    /* Print tag, pointers and numeric state. Use %p for pointer values. */\n    (void) fprintf (f,\n                    \"%s: pool=%p pos=%zu end=%zu size=%zu old=%p old_size=%zu new=%p new_size=%zu\\n\",\n                    tag,\n                    (void *) pool,\n                    (NULL != pool) ? pool->pos : (size_t) 0,\n                    (NULL != pool) ? pool->end : (size_t) 0,\n                    (NULL != pool) ? pool->size : (size_t) 0,\n                    old,\n                    old_size,\n                    new_blc,\n                    new_size);\n    (void) fclose (f);\n  }\n}\n\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  /* Log entry to the function with initial state. */\n  mhd_log_probe (\"enter\", pool, old, old_size, NULL, new_size);\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n      /* Log that shrinking occurred. */\n      mhd_log_probe (\"shrinking_in_place\", pool, old, old_size, NULL, new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      /* Log just before the UNPOISON call that is relevant to the violation scenario. */\n      mhd_log_probe (\"before_unpoison_old\", pool, old, old_size, NULL, new_size);\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      /* Log just after the UNPOISON call. If the macro expands to (void)0 the logs\n         will still show that the code path executed; other agents can inspect these\n         logs to corroborate that the call site was reached but may be a no-op. */\n      mhd_log_probe (\"after_unpoison_old\", pool, old, old_size, NULL, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  /* Log just before UNPOISONing the newly allocated block. */\n  mhd_log_probe (\"before_unpoison_new\", pool, old, old_size, new_blc, new_size);\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  mhd_log_probe (\"after_unpoison_new\", pool, old, old_size, new_blc, new_size);\n\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n    mhd_log_probe (\"moved_and_poisoned_old\", pool, old, old_size, new_blc, new_size);\n  }\n  /* Log final return. */\n  mhd_log_probe (\"return_new\", pool, old, old_size, new_blc, new_size);\n  return new_blc;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nenter: pool=0x564aab315ae0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nafter_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nreturn_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nenter: pool=0x564aab315ae0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nafter_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nreturn_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab315b50 new_size=32576\nenter: pool=0x564aab315ae0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab31ef70 new_size=32576\nafter_unpoison_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab31ef70 new_size=32576\nreturn_new: pool=0x564aab315ae0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x564aab31ef70 new_size=32576\nenter: pool=0x7f0ec0000de0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nafter_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nreturn_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nenter: pool=0x7f0ec0000de0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nafter_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nreturn_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nenter: pool=0x7f0ec0000de0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nafter_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nreturn_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nenter: pool=0x7f0ec0000de0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nafter_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nreturn_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nenter: pool=0x7f0ec0000de0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nafter_unpoison_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nreturn_new: pool=0x7f0ec0000de0 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0ec0000e50 new_size=32576\nenter: pool=0x7f0eb8000b90 pos=64 end=32640 size=32768 old=(nil) old_size=0 new=(nil) new_size=32576\nbefore_unpoison_new: pool=0x7f0eb8000b90 pos=32640 end=32640 size=32768 old=(nil) old_size=0 new=0x7f0eb80011e0 new_size=32576\nafter_unpoison_new: pool=0x7f0eb8000b90 pos=32640 end=32640 size=32768 old=(nil) old_size=0 \n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the test configuration the call _MHD_UNPOISON_MEMORY(new_blc, new_size) expands to a no-op ((void)0) and is executed at runtime (logs show the code path was reached both before and after the call) but has no effect on program behaviour. Per MISRA C 2023 Rule 2.2, any operation that is executed but whose removal would not affect program behaviour is dead code; therefore the call site is dead code in that build and violates Rule 2.2."
}