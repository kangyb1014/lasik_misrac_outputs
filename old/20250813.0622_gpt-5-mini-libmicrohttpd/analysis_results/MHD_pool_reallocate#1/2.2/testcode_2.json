{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as ((void)0) in the project, so the statement mhd_assert(pool->size >= old_size); is a no-op. It is executed but has no effect and can be removed without changing program behaviour, i.e. it is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reallocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/10.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_reallocate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reallocate:\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_reallocate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logger: append messages to /tmp/logs/10.txt */\nstatic void mhd_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void mhd_log_pred(const char *label, bool val)\n{\n    mhd_log_printf(\"ASSERT? %s => %s\", label, val ? \"true\" : \"false\");\n}\n\n/* The original function with inserted logging probes. */\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  /* Log entry state */\n  if (pool != NULL)\n  {\n    mhd_log_printf(\"ENTER MHD_pool_reallocate: pool=%p old=%p old_size=%zu new_size=%zu pos=%zu end=%zu size=%zu memory=%p\",\n                   (void *)pool, old, old_size, new_size,\n                   (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size,\n                   (void *)pool->memory);\n  }\n  else\n    mhd_log_printf(\"ENTER MHD_pool_reallocate: pool=NULL old=%p old_size=%zu new_size=%zu\", old, old_size, new_size);\n\n  /* Original assertions: we keep them, but also evaluate and log their predicates\n     so that a test harness can observe whether the asserted conditions hold\n     at runtime. This is useful to demonstrate that mhd_assert may be a no-op. */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_log_pred(\"pool->end >= pool->pos\", (pool != NULL) ? (pool->end >= pool->pos) : false);\n\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_log_pred(\"pool->size >= pool->end - pool->pos\", (pool != NULL) ? (pool->size >= (pool->end - pool->pos)) : false);\n\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_log_pred(\"old != NULL || old_size == 0\", (old != NULL) || (old_size == 0));\n\n  mhd_assert (pool->size >= old_size);\n  mhd_log_pred(\"pool->size >= old_size\", (pool != NULL) ? (pool->size >= old_size) : false);\n\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  mhd_log_pred(\"pool->pos == ROUND_TO_ALIGN(pool->pos)\", (pool != NULL) ? (pool->pos == ROUND_TO_ALIGN(pool->pos)) : false);\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n  mhd_log_pred(\"__asan_region_is_poisoned(old, old_size) == NULL\", (NULL == __asan_region_is_poisoned (old, old_size)));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    mhd_log_pred(\"mp_ptr_le_(pool->memory, old)\", mp_ptr_le_(pool->memory, old));\n\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    mhd_log_pred(\"(pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)\",\n                 ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_log_pred(\"(old_size == 0) || (pool->pos > old_offset)\",\n                 ((old_size == 0) || (pool->pos > old_offset)));\n\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    mhd_log_pred(\"(old_size == 0) || ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size))\",\n                 ((old_size == 0) || ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size))));\n\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n      mhd_log_printf(\"shrinking: zeroed and poisoned offset=%zu len=%zu\", (size_t)new_size, (size_t)(old_size - new_size));\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n        {\n          mhd_log_printf(\"grow-in-place: no space new_apos=%zu end=%zu pos=%zu\", new_apos, pool->end, pool->pos);\n          return NULL;                /* No space */\n        }\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      mhd_log_printf(\"resized in-place: old=%p new_size=%zu new_pos=%zu\", old, new_size, pool->pos);\n      return old;\n    }\n    if (shrinking)\n    {\n      mhd_log_printf(\"shrinking but not last block: returning old=%p\", old);\n      return old;   /* Resized in-place, freed part remains allocated */\n    }\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n  {\n    mhd_log_printf(\"allocate: not enough space or wrap asize=%zu available=%zu\", asize, (size_t)(pool->end - pool->pos));\n    return NULL;\n  }\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n    mhd_log_printf(\"moved data: old=%p old_size=%zu new_blc=%p\", old, old_size, (void *)new_blc);\n  }\n  mhd_log_printf(\"allocated new block: new_blc=%p new_size=%zu new_pos=%zu\", (void *)new_blc, new_size, pool->pos);\n  return new_blc;\n}\n"
}