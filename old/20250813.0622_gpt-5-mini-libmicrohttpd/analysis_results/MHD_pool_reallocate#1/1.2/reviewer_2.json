{
  "user_message": "An agent A claimed that the following MHD_pool_reallocate code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_reallocate.\n```c\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n          return NULL;                /* No space */\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      return old;\n    }\n    if (shrinking)\n      return old;   /* Resized in-place, freed part remains allocated */\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n    return NULL;\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n  }\n  return new_blc;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code calls __asan_region_is_poisoned(), which is an AddressSanitizer/compiler runtime API (a non\u2011standard, compiler-specific symbol). Even though the call is conditionally compiled (#if defined(HAVE___ASAN_REGION_IS_POISONED)), it still uses a compiler/toolchain extension (ASan runtime API) not part of standard ISO C, so Rule 1.2 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log8(const char *tag,\n                               struct MemoryPool *pool,\n                               void *old,\n                               size_t old_size,\n                               size_t new_size,\n                               const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/8.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[%s] pool=%p memory=%p pos=%zu end=%zu size=%zu old=%p old_size=%zu new_size=%zu\",\n          tag, (void *)pool, (void *)pool->memory, (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size,\n          old, old_size, new_size);\n  if (extra)\n    fprintf(f, \" info=%s\", extra);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nvoid *\nMHD_pool_reallocate (struct MemoryPool *pool,\n                     void *old,\n                     size_t old_size,\n                     size_t new_size)\n{\n  size_t asize;\n  uint8_t *new_blc;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (old != NULL || old_size == 0);\n  mhd_assert (pool->size >= old_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Log entry state */\n  mhd_probe_log8(\"ENTRY\", pool, old, old_size, new_size, NULL);\n\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  {\n    const void *asan_res = __asan_region_is_poisoned (old, old_size);\n    if (NULL == asan_res)\n      mhd_probe_log8(\"ASAN_CHECK\", pool, old, old_size, new_size, \"asan_region_is_poisoned=NULL\");\n    else\n      mhd_probe_log8(\"ASAN_CHECK\", pool, old, old_size, new_size, \"asan_region_is_poisoned=NON_NULL\");\n  }\n  mhd_assert (NULL == __asan_region_is_poisoned (old, old_size));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  if (NULL != old)\n  {   /* Have previously allocated data */\n    const size_t old_offset = mp_ptr_diff_ (old, pool->memory);\n    const bool shrinking = (old_size > new_size);\n\n    mhd_probe_log8(\"OLD_BLOCK\", pool, old, old_size, new_size, (shrinking ? \"shrinking=1\" : \"shrinking=0\"));\n    mhd_probe_log8(\"OLD_OFFSET\", pool, old, old_size, new_size, (char[]){0});\n\n    mhd_assert (mp_ptr_le_ (pool->memory, old));\n    /* (pool->memory + pool->size >= (uint8_t*) old + old_size) */\n    mhd_assert ((pool->size - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size));\n    /* Blocks \"from the end\" must not be reallocated */\n    /* (old_size == 0 || pool->memory + pool->pos > (uint8_t*) old) */\n    mhd_assert ((old_size == 0) || \\\n                (pool->pos > old_offset));\n    mhd_assert ((old_size == 0) || \\\n                ((pool->end - _MHD_RED_ZONE_SIZE) >= (old_offset + old_size)));\n    /* Try resizing in-place */\n    if (shrinking)\n    {     /* Shrinking in-place, zero-out freed part */\n      memset ((uint8_t *) old + new_size, 0, old_size - new_size);\n      _MHD_POISON_MEMORY ((uint8_t *) old + new_size, old_size - new_size);\n      mhd_probe_log8(\"SHRINK_ZEROED\", pool, old, old_size, new_size, NULL);\n    }\n    if (pool->pos ==\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + old_size))\n    {     /* \"old\" block is the last allocated block */\n      const size_t new_apos =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (old_offset + new_size);\n      mhd_probe_log8(\"LAST_ALLOCATED_BLOCK\", pool, old, old_size, new_size, NULL);\n      if (! shrinking)\n      {                               /* Grow in-place, check for enough space. */\n        if ( (new_apos > pool->end) ||\n             (new_apos < pool->pos) ) /* Value wrap */\n        {\n          mhd_probe_log8(\"NO_SPACE_WRAP\", pool, old, old_size, new_size, NULL);\n          return NULL;                /* No space */\n        }\n      }\n      /* Resized in-place */\n      pool->pos = new_apos;\n      _MHD_UNPOISON_MEMORY (old, new_size);\n      mhd_probe_log8(\"RESIZED_IN_PLACE\", pool, old, old_size, new_size, NULL);\n      return old;\n    }\n    if (shrinking)\n    {\n      mhd_probe_log8(\"SHRINK_REMAIN_ALLOCATED\", pool, old, old_size, new_size, NULL);\n      return old;   /* Resized in-place, freed part remains allocated */\n    }\n  }\n  /* Need to allocate new block */\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  if ( ( (0 == asize) &&\n         (0 != new_size) ) || /* Value wrap, too large new_size. */\n       (asize > pool->end - pool->pos) ) /* Not enough space */\n  {\n    mhd_probe_log8(\"ALLOC_FAIL\", pool, old, old_size, new_size, NULL);\n    return NULL;\n  }\n\n  new_blc = pool->memory + pool->pos;\n  pool->pos += asize;\n\n  _MHD_UNPOISON_MEMORY (new_blc, new_size);\n  if (0 != old_size)\n  {\n    /* Move data to new block, old block remains allocated */\n    memcpy (new_blc, old, old_size);\n    /* Zero-out old block */\n    memset (old, 0, old_size);\n    _MHD_POISON_MEMORY (old, old_size);\n    mhd_probe_log8(\"MOVED_DATA\", pool, old, old_size, new_size, NULL);\n  }\n  mhd_probe_log8(\"RETURN_NEW\", pool, new_blc, old_size, new_size, NULL);\n  return new_blc;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[ENTRY] pool=0x5560a1961ae0 memory=0x5560a1961b10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x5560a1961ae0 memory=0x5560a1961b10 pos=32640 end=32640 size=32768 old=0x5560a1961b50 old_size=0 new_size=32576\n[ENTRY] pool=0x5560a1961ae0 memory=0x5560a1961b10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x5560a1961ae0 memory=0x5560a1961b10 pos=32640 end=32640 size=32768 old=0x5560a1961b50 old_size=0 new_size=32576\n[ENTRY] pool=0x5560a1961ae0 memory=0x5560a196af30 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x5560a1961ae0 memory=0x5560a196af30 pos=32640 end=32640 size=32768 old=0x5560a196af70 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=32640 end=32640 size=32768 old=0x7fc700000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=32640 end=32640 size=32768 old=0x7fc700000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=32640 end=32640 size=32768 old=0x7fc700000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=32640 end=32640 size=32768 old=0x7fc700000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc700000de0 memory=0x7fc700000e10 pos=32640 end=32640 size=32768 old=0x7fc700000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6fc000b90 memory=0x7fc6fc0011a0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6fc000b90 memory=0x7fc6fc0011a0 pos=32640 end=32640 size=32768 old=0x7fc6fc0011e0 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6f8000cf0 memory=0x7fc6f80012c0 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6f8000cf0 memory=0x7fc6f80012c0 pos=32640 end=32640 size=32768 old=0x7fc6f8001300 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6f8000de0 memory=0x7fc6f8001070 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6f8000de0 memory=0x7fc6f8001070 pos=32640 end=32640 size=32768 old=0x7fc6f80010b0 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6f0000de0 memory=0x7fc6f0000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6f0000de0 memory=0x7fc6f0000e10 pos=32640 end=32640 size=32768 old=0x7fc6f0000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6f0000de0 memory=0x7fc6f0000e10 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6f0000de0 memory=0x7fc6f0000e10 pos=32640 end=32640 size=32768 old=0x7fc6f0000e50 old_size=0 new_size=32576\n[ENTRY] pool=0x7fc6f8000de0 memory=0x7fc6f8001070 pos=64 end=32640 size=32768 old=(nil) old_size=0 new_size=32576\n[RETURN_NEW] pool=0x7fc6f8000de0 memory=0x7fc6f8001070 pos=32640 end=32640 size=32768 old=0x7fc6f80010b0 old_size=0 new_size=32576\n[ENTRY] pool=0x561b5c34a300 memory=0x561b5c34a330 pos=64 end=3968 size=4096 old=(nil) old_size=0 new_size=3904\n[RETURN_NEW] pool=0x561b5c34a300 memory=0x561b5c34a330 pos=3968 end=3968 size=4096 old=0x561b5c34a370 old_size=0 new_size=3904\n[ENTRY] pool=0x561b5c34a300 memory=0x561b5c34a330 pos=64 end=3968 size=4096 old=(nil) old_size=0 new_size=3904\n[RETURN_NEW] pool=0x561b5c34a300 memory=0x561b5c34a330 pos=3968 end=3968 size=4096 old=0x561b5c34a370 old_size=0 new_size=3904\n[ENTRY] pool=0x561b5c34a300 memory=0x561b5c34c750 pos=64 end=3968 size=4096 old=(nil) old_size=0 new_size=3904\n[RETURN_NEW] pool=0x561b5c34a300 memory=0x561b5c34c750 pos=3968 end=3968 size=4\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 1.2 targets language/compiler extensions (non\u2011standard language constructs or compiler-provided language features explicitly documented as extensions). The code only calls an AddressSanitizer runtime function (__asan_region_is_poisoned), which is a tool/runtime API, not a language syntax/semantic extension. Moreover that call is inside a conditional compilation block guarded by MHD_ASAN_POISON_ACTIVE and HAVE___ASAN_REGION_IS_POISONED, so it is only present when those macros are defined. The provided test output contains no ASAN_CHECK entries, showing the ASan path was not active in the tested builds. Therefore this use does not constitute the kind of language extension prohibited by Rule 1.2, and the agent A report is incorrect."
}