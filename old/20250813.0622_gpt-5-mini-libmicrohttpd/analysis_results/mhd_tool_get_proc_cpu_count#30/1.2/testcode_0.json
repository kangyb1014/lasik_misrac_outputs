{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe typedef declares a function-pointer using the WINAPI calling-convention macro: 'typedef BOOL (WINAPI *GPGA_PTR)(HANDLE hProcess, PUSHORT GroupCount, PUSHORT GroupArray);'. On Windows headers WINAPI typically expands to a compiler-specific calling-convention keyword (e.g. __stdcall), which is a non\u2011standard compiler extension per compiler documentation. Using such calling-convention specifiers is a language extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_proc_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/240.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_proc_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_proc_cpu_count:\n```c\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  if (0 < res)\n    return res;\n\n  return -1;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_proc_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/240.txt\", \"a\");\n    if (!f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  const char *platform = \"__linux__ or __GLIBC__\";\n#else\n  const char *platform = \"non-linux/non-glibc\";\n#endif\n\n  mhd_probe_log(\"ENTER mhd_tool_get_proc_cpu_count; platform=%s\", platform);\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_sched_getaffinity_()\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_sched_getaffinity_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via sched_getaffinity)\", res);\n    return res;\n  }\n\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via cpuset_getaffinity)\", res);\n    return res;\n  }\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\");\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_cpuset_getaffinity_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via cpuset_getaffinity)\", res);\n    return res;\n  }\n\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_sched_getaffinity_()\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_sched_getaffinity_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via sched_getaffinity)\", res);\n    return res;\n  }\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_sched_getaffinity_np_()\");\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_sched_getaffinity_np_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via sched_getaffinity_np)\", res);\n    return res;\n  }\n\n  mhd_probe_log(\"calling mhd_tool_get_proc_cpu_count_w32_()\");\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  mhd_probe_log(\"returned %d from mhd_tool_get_proc_cpu_count_w32_()\", res);\n  if (0 < res)\n  {\n    mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> %d (via w32)\", res);\n    return res;\n  }\n\n  mhd_probe_log(\"EXIT mhd_tool_get_proc_cpu_count -> -1 (no method succeeded)\");\n  return -1;\n}\n"
}