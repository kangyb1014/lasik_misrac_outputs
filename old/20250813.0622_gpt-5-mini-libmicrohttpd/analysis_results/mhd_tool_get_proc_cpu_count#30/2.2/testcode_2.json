{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (1)' conditional is a constant-true condition that is evaluated at runtime but has no effect on program behaviour; removing the 'if (1)' (or replacing it with a plain block) would not change the program. Thus the executed evaluation of the constant condition constitutes dead code. Suggest removing 'if (1)' and using a simple block '{ ... }' if a scope is needed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_proc_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/242.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_proc_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_proc_cpu_count:\n```c\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n#if defined(__linux__) || defined(__GLIBC__)\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n#else  /* ! __linux__ && ! __GLIBC__ */\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  if (0 < res)\n    return res;\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  if (0 < res)\n    return res;\n\n  return -1;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_proc_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers. These preserve program logic and only append\n   human-readable control-flow/state information to /tmp/logs/242.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/242.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change behavior of the function. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint\nmhd_tool_get_proc_cpu_count (void)\n{\n  int res;\n\n  probe_log(\"mhd_tool_get_proc_cpu_count: enter\");\n\n#if defined(__linux__) || defined(__GLIBC__)\n  probe_log(\"Platform branch: __linux__ || __GLIBC__\");\n  /* On Linux kernel try first 'sched_getaffinity()' as it should be\n     the native API.\n     Also try it first on other kernels if Glibc is used. */\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_sched_getaffinity_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (sched_getaffinity)\", res);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_cpuset_getaffinity_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (cpuset_getaffinity)\", res);\n    return res;\n  }\n#else  /* ! __linux__ && ! __GLIBC__ */\n  probe_log(\"Platform branch: !__linux__ && !__GLIBC__\");\n  /* On non-Linux kernels 'cpuset_getaffinity()' could be the native API,\n     while 'sched_getaffinity()' could be implemented in compatibility layer. */\n  res = mhd_tool_get_proc_cpu_count_cpuset_getaffinity_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_cpuset_getaffinity_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (cpuset_getaffinity)\", res);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_sched_getaffinity_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (sched_getaffinity)\", res);\n    return res;\n  }\n#endif /* ! __linux__ && ! __GLIBC__ */\n\n  res = mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_sched_getaffinity_np_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (sched_getaffinity_np)\", res);\n    return res;\n  }\n\n  res = mhd_tool_get_proc_cpu_count_w32_ ();\n  probe_log(\"Called mhd_tool_get_proc_cpu_count_w32_(), res=%d\", res);\n  if (0 < res)\n  {\n    probe_log(\"Early return with res=%d (w32)\", res);\n    return res;\n  }\n\n  probe_log(\"No method succeeded, returning -1\");\n  return -1;\n}\n"
}