{
  "user_message": "An agent A claimed that the following file_reader code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of file_reader.\n```c\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  if (offset64 < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n\n#if defined(HAVE_PREAD64)\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    if (0 == resRead)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter 'max' is assigned to (max = SSIZE_MAX;) to clamp its value. Modifying a non-pointer function parameter directly violates MISRA C 2023 Rule 17.8. Fix: introduce a local variable (e.g. size_t to_read = (max > SSIZE_MAX) ? SSIZE_MAX : max;) and use that instead of modifying 'max'.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  /* Ensure directory exists (best-effort). Ignore errors. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  FILE *f = fopen(\"/tmp/logs/621.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  /* Log entry into function and initial state */\n  probe_log(\"file_reader ENTRY: pos=%llu, initial_max=%zu, fd=%d, fd_off=%lld, offset64=%lld\",\n            (unsigned long long) pos,\n            max,\n            response->fd,\n            (long long) response->fd_off,\n            (long long) offset64);\n\n  if (offset64 < 0)\n  {\n    probe_log(\"file_reader: offset64 < 0 => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n  {\n    /* Evidence of parameter modification: record original and clamped values. */\n    probe_log(\"file_reader: max (%zu) > SSIZE_MAX (%lld); clamping max to SSIZE_MAX\",\n              max,\n              (long long) SSIZE_MAX);\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n    probe_log(\"file_reader: max after clamp=%zu\", max);\n  }\n\n#if defined(HAVE_PREAD64)\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    probe_log(\"file_reader: offset64 too large for off_t => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n  }\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    probe_log(\"file_reader: lseek64 failed (cannot seek to required position) => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    probe_log(\"file_reader: offset64 too large for off_t (lseek) => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    probe_log(\"file_reader: lseek failed => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n  {\n    probe_log(\"file_reader: read returned 0 => MHD_CONTENT_READER_END_OF_STREAM\");\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    probe_log(\"file_reader: read returned negative (%lld) => MHD_CONTENT_READER_END_WITH_ERROR\", (long long) n);\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  }\n  probe_log(\"file_reader: read/pread returned n=%lld\", (long long) n);\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n  {\n    probe_log(\"file_reader (WIN): INVALID_HANDLE_VALUE => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  }\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    probe_log(\"file_reader (WIN): pos=%llu, max=%zu, toRead=%u, fd=%d, offset64=%lld\",\n              (unsigned long long) pos,\n              max,\n              (unsigned) toRead,\n              response->fd,\n              (long long) offset64);\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n    {\n      probe_log(\"file_reader (WIN): ReadFile failed => returning MHD_CONTENT_READER_END_WITH_ERROR\");\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    }\n    if (0 == resRead)\n    {\n      probe_log(\"file_reader (WIN): ReadFile returned 0 => MHD_CONTENT_READER_END_OF_STREAM\");\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    }\n    probe_log(\"file_reader (WIN): ReadFile read %u bytes\", (unsigned) resRead);\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for file_reader. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code assigns to the value parameter 'max' (if (max > SSIZE_MAX) max = SSIZE_MAX;), which directly modifies a non-pointer function parameter and therefore violates MISRA C 2023 Rule 17.8. MISRA forbids modifying value parameters; the standard-compliant fix is to introduce a local variable (e.g. size_t to_read = (max > SSIZE_MAX) ? SSIZE_MAX : max;) and use that in calls to pread/read instead of writing to 'max'. Note: the Windows branch already uses a local toRead; make the non-Windows branch consistent by using a local clamped variable and avoid assigning to the parameter."
}