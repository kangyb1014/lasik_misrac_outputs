{
  "user_message": "An agent A claimed that the following try_ready_normal_body code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of try_ready_normal_body.\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If mhd_assert is a diagnostic-only macro (typical pattern: checks in debug builds, expands to a no-op in production, e.g. ((void)0)), then the statement mhd_assert(connection->rp.props.send_reply_body); has no effect at runtime and its removal would not change program behaviour. In that configuration it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If, instead, mhd_assert has observable side-effects such as logging or aborting on failure, then it would not be dead code.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_logf (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/706.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  /* Probe the asserted expression so we can detect if the assert is a no-op */\n  probe_logf (\"try_ready_normal_body: enter; connection=%p response=%p send_reply_body=%d\",\n              (void *) connection, (void *) response,\n              (int) connection->rp.props.send_reply_body);\n\n  mhd_assert (connection->rp.props.send_reply_body);\n  probe_logf (\"after mhd_assert: send_reply_body=%d\",\n              (int) connection->rp.props.send_reply_body);\n\n  probe_logf (\"response sizes: total_size=%llu rsp_write_position=%llu\",\n              (unsigned long long) response->total_size,\n              (unsigned long long) connection->rp.rsp_write_position);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    probe_logf (\"early return: zero-byte response or already written; total_size=%llu rsp_write_position=%llu\",\n                (unsigned long long) response->total_size,\n                (unsigned long long) connection->rp.rsp_write_position);\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    probe_logf (\"response->data_iov present: data_iovcnt=%zu resp_iov.iov=%p\",\n                response->data_iovcnt,\n                (void *) connection->rp.resp_iov.iov);\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      probe_logf (\"resp_iov already set; returning YES\");\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    probe_logf (\"allocating resp_iov.iov: size=%zu\", copy_size);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      probe_logf (\"allocation failed for resp_iov.iov (size=%zu)\", copy_size);\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    probe_logf (\"copied data_iov into resp_iov: cnt=%zu sent=%u\",\n                connection->rp.resp_iov.cnt,\n                (unsigned) connection->rp.resp_iov.sent);\n    return MHD_YES;\n  }\n  probe_logf (\"no data_iov; response->crc=%p\", (void *) response->crc);\n  if (NULL == response->crc)\n  {\n    probe_logf (\"response->crc is NULL; returning YES\");\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    probe_logf (\"response already ready: data_start=%llu data_size=%zu rsp_write_position=%llu\",\n                (unsigned long long) response->data_start,\n                response->data_size,\n                (unsigned long long) connection->rp.rsp_write_position);\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    probe_logf (\"using sendfile resp_sender; returning YES\");\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  probe_logf (\"invoking crc: crc_cls=%p rsp_write_position=%llu data=%p data_buffer_size=%zu total_size=%llu\",\n              (void *) response->crc_cls,\n              (unsigned long long) connection->rp.rsp_write_position,\n              (void *) response->data,\n              (size_t) response->data_buffer_size,\n              (unsigned long long) response->total_size);\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  probe_logf (\"crc returned: ret=%zd\", ret);\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    probe_logf (\"crc error path: updating total_size from %llu to %llu\",\n                (unsigned long long) response->total_size,\n                (unsigned long long) connection->rp.rsp_write_position);\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n    {\n      probe_logf (\"crc indicated end of stream; closing connection normally\");\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      probe_logf (\"crc indicated error (ret=%zd); closing connection with error\", ret);\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    }\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  probe_logf (\"crc success: data_start=%llu data_size=%zu\",\n              (unsigned long long) response->data_start,\n              response->data_size);\n  if (0 == ret)\n  {\n    probe_logf (\"crc returned 0: marking connection as NORMAL_BODY_UNREADY and returning NO\");\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  probe_logf (\"ready to send body; returning YES\");\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for try_ready_normal_body. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in the scenario they described. MISRA C 2023 Rule 2.2 forbids dead code \u2014 any executed operation whose removal would not alter program behaviour. If, in the project build, mhd_assert is a diagnostic-only macro that expands to a no-op (common pattern, e.g. assert() under NDEBUG \u2192 ((void)0)), then the statement\n\n  mhd_assert (connection->rp.props.send_reply_body);\n\nis executed but does nothing; its removal would not change program behaviour in that configuration, so it is dead code and would violate Rule 2.2. Conversely, if mhd_assert expands to something that has observable side effects (logging, calling abort(), checking and acting on the condition), then it is not dead and there is no violation. The correctness of Agent A\u2019s report therefore depends on the actual definition/expansion of mhd_assert in the project build \u2014 given the typical diagnostic-only definition, the report is correct."
}