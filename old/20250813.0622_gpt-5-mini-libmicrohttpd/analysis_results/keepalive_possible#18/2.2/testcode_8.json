{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as ((void)0). The statement mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver)); therefore expands to a no-op at compile time and has no runtime effect. Because this operation is executed but its removal would not affect program behaviour, it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If mhd_assert were implemented to perform real checks or have side effects, this would not be a violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void mhd_probe_fmt(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Probe: entry state */\n  mhd_probe_fmt(\"ENTER keepalive_possible: c=%p, r=%p, keepalive=%d, rq.http_ver=%d, read_closed=%d, discard_request=%d, stop_with_error=%d\",\n                (void *)c,\n                (void *)r,\n                (int)c->keepalive,\n                (int)c->rq.http_ver,\n                (int)c->read_closed,\n                (int)c->discard_request,\n                (int)c->stop_with_error);\n\n  mhd_assert (NULL != r);\n  /* Probe the assertion condition even though mhd_assert may be a no-op. */\n  mhd_probe_fmt(\"ASSERT NULL != r : %s\", (NULL != r) ? \"true\" : \"false\");\n\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_probe_fmt(\"DECISION: keepalive == MHD_CONN_MUST_CLOSE -> return MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_probe_fmt(\"ASSERT (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) == 0 : %s\",\n                  (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)) ? \"true\" : \"false\");\n\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_probe_fmt(\"ASSERT MHD_IS_HTTP_VER_SUPPORTED(rq.http_ver) : %s\",\n                  MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver) ? \"true\" : \"false\");\n\n    mhd_assert (! c->stop_with_error);\n    mhd_probe_fmt(\"ASSERT !c->stop_with_error : %s\", (! c->stop_with_error) ? \"true\" : \"false\");\n\n    mhd_probe_fmt(\"DECISION: r->upgrade_handler != NULL -> return MHD_CONN_MUST_UPGRADE (c=%p, r=%p)\", (void *)c, (void *)r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  mhd_probe_fmt(\"ASSERT ((!c->stop_with_error) || c->discard_request) : %s\",\n                (((! c->stop_with_error) || (c->discard_request)) ? \"true\" : \"false\"));\n\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_probe_fmt(\"DECISION: read_closed || discard_request -> return MHD_CONN_MUST_CLOSE (read_closed=%d, discard_request=%d)\",\n                  (int)c->read_closed, (int)c->discard_request);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_probe_fmt(\"DECISION: r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT -> return MHD_CONN_MUST_CLOSE (r->flags=0x%08x)\", (unsigned int)r->flags);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_fmt(\"DECISION: r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE -> return MHD_CONN_MUST_CLOSE (r->flags_auto=0x%08x)\", (unsigned int)r->flags_auto);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe HTTP version supported check before using it */\n  {\n    int http_ver_supported = MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver) ? 1 : 0;\n    mhd_probe_fmt(\"CHECK: MHD_IS_HTTP_VER_SUPPORTED(rq.http_ver) -> %s\", http_ver_supported ? \"true\" : \"false\");\n    if (! http_ver_supported)\n    {\n      mhd_probe_fmt(\"DECISION: HTTP version not supported -> return MHD_CONN_MUST_CLOSE (http_ver=%d)\", (int)c->rq.http_ver);\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  /* Evaluate connection: close header once, log and reuse result */\n  {\n    int has_conn_close = MHD_lookup_header_s_token_ci (c,\n                                                       MHD_HTTP_HEADER_CONNECTION,\n                                                       \"close\");\n    mhd_probe_fmt(\"CHECK: MHD_lookup_header_s_token_ci(..., \\\"close\\\") -> %s\", has_conn_close ? \"true\" : \"false\");\n    if (has_conn_close)\n    {\n      mhd_probe_fmt(\"DECISION: Connection: close header present -> return MHD_CONN_MUST_CLOSE\");\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    /* Evaluate Keep-Alive token once and reuse */\n    int has_keep_alive = MHD_lookup_header_s_token_ci (connection,\n                                                       MHD_HTTP_HEADER_CONNECTION,\n                                                       \"Keep-Alive\");\n    mhd_probe_fmt(\"BRANCH: HTTP/1.0 path: rq.http_ver=%d, response->flags=0x%08x, has_keep_alive=%s\",\n                  (int)connection->rq.http_ver,\n                  (unsigned int)connection->rp.response->flags,\n                  has_keep_alive ? \"true\" : \"false\");\n\n    if (has_keep_alive)\n    {\n      mhd_probe_fmt(\"DECISION: Keep-Alive header present on HTTP/1.0 -> return MHD_CONN_USE_KEEPALIVE\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_probe_fmt(\"DECISION: HTTP/1.0 without Keep-Alive -> return MHD_CONN_MUST_CLOSE\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_probe_fmt(\"DECISION: HTTP/1.1 compatible -> return MHD_CONN_USE_KEEPALIVE (http_ver=%d)\", (int)c->rq.http_ver);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_probe_fmt(\"DEFAULT DECISION: return MHD_CONN_MUST_CLOSE\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}