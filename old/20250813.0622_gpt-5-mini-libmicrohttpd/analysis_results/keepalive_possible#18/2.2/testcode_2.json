{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert(buf_size > pos); expands to ((void)0) via the provided macro definition, so it is a no-op at build time. Because the operation is executed but has no effect and removing it would not change the program behaviour, this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - writes human-readable trace information to a file\n * This helper intentionally does not change program logic; it only observes\n * and logs runtime state so that the presence (or no-op nature) of asserts\n * can be evidenced. */\nstatic void keepalive_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void keepalive_log_state(struct MHD_Connection *c,\n                                struct MHD_Response *r,\n                                const char *stage)\n{\n  keepalive_log_probe(\"[keepalive] %s: connection=%p response=%p\",\n                      stage, (void *)c, (void *)r);\n  if (c) {\n    keepalive_log_probe(\"  keepalive=%d read_closed=%d discard_request=%d stop_with_error=%d\",\n                        (int)c->keepalive,\n                        (int)c->read_closed,\n                        (int)c->discard_request,\n                        (int)c->stop_with_error);\n    /* rq and rp are expected to be present in the environment where this\n     * function is used; we log some commonly used fields (cast to int for\n     * safe printing). */\n    keepalive_log_probe(\"  rq.http_ver=%d\", (int)c->rq.http_ver);\n    if (c->rp.response)\n      keepalive_log_probe(\"  rp.response.flags=0x%08x flags_auto=0x%08x\",\n                          (unsigned int)c->rp.response->flags,\n                          (unsigned int)c->rp.response->flags_auto);\n    else\n      keepalive_log_probe(\"  rp.response=NULL\");\n  }\n}\n\nstatic void keepalive_log_decision(const char *decision)\n{\n  keepalive_log_probe(\"[keepalive] decision: %s\", decision);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log initial state and the value of the assertion expression so that\n   * other agents can determine whether the mhd_assert would have fired (in\n   * builds where it is active) or whether it is effectively a no-op. */\n  keepalive_log_state(c, r, \"entry\");\n  keepalive_log_probe(\"[keepalive] assert(NULL != r) -> %d\", (int)(NULL != r));\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive) {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (keepalive flag)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    keepalive_log_probe(\"[keepalive] assert(0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)) -> %d\",\n                        (int)(0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE)));\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    keepalive_log_probe(\"[keepalive] assert(MHD_IS_HTTP_VER_SUPPORTED(c->rq.http_ver)) -> %d\",\n                        (int)MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    keepalive_log_probe(\"[keepalive] assert(! c->stop_with_error) -> %d\",\n                        (int)(! c->stop_with_error));\n    mhd_assert (! c->stop_with_error);\n    keepalive_log_decision(\"MHD_CONN_MUST_UPGRADE (upgrade_handler present)\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  keepalive_log_probe(\"[keepalive] assert((! c->stop_with_error) || (c->discard_request)) -> %d\",\n                      (int)((! c->stop_with_error) || (c->discard_request)));\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (read_closed || discard_request)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (HTTP 1.0 strict flag)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (has Connection: close header auto-flag)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (HTTP version not supported)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (Connection: close header present)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      keepalive_log_decision(\"MHD_CONN_USE_KEEPALIVE (HTTP/1.0 + Keep-Alive header)\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (HTTP/1.0 without Keep-Alive)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    keepalive_log_decision(\"MHD_CONN_USE_KEEPALIVE (HTTP/1.1 compatible)\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  keepalive_log_decision(\"MHD_CONN_MUST_CLOSE (default)\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}