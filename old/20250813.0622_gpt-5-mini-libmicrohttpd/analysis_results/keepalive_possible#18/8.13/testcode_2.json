{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a non-const pointer (connection: struct MHD_Connection *) to a lookup routine that only inspects the connection. The pointee could and should be const-qualified (e.g. const struct MHD_Connection *) so the function parameter and the local alias should use a const-qualified target. Example fix: declare the alias as 'const struct MHD_Connection *c = connection;' and have MHD_lookup_header_s_token_ci take a 'const struct MHD_Connection *' parameter. Because the code uses a modifiable pointer where a const-qualified pointee is possible, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/147.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (NULL == f)\n        return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry and key state values */\n  mhd_probe_log(\"keepalive_possible: entry: connection=%p, c=%p, r=%p\",\n                (void *)connection, (void *)c, (void *)r);\n\n  if (r != NULL)\n  {\n    /* Print several important fields used in decision logic */\n    mhd_probe_log(\n      \"state: c->keepalive=%d, c->rq.http_ver=%d, r->flags=0x%08x, r->flags_auto=0x%08x, r->upgrade_handler=%p, c->stop_with_error=%d, c->read_closed=%d, c->discard_request=%d\",\n      (int)c->keepalive,\n      (int)c->rq.http_ver,\n      (unsigned int)r->flags,\n      (unsigned int)r->flags_auto,\n      (void *)r->upgrade_handler,\n      (int)c->stop_with_error,\n      (int)c->read_closed,\n      (int)c->discard_request\n    );\n  }\n  else\n  {\n    mhd_probe_log(\"state: r == NULL (unexpected if assertions enabled)\");\n  }\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (keepalive flag)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    mhd_probe_log(\"early return: MHD_CONN_MUST_UPGRADE (upgrade_handler present)\");\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (read_closed || discard_request)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (HTTP/1.0 compatible strict flag set)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (response has Connection: close)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (HTTP version not supported): rq.http_ver=%d\",\n                  (int)c->rq.http_ver);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* First lookup: intentionally uses the const-like local alias 'c' in original\n     code. Capture and log the result. */\n  {\n    int lookup_close = MHD_lookup_header_s_token_ci (c,\n                                                      MHD_HTTP_HEADER_CONNECTION,\n                                                      \"close\");\n    mhd_probe_log(\"MHD_lookup_header_s_token_ci called with c=%p (alias): returned=%d\",\n                  (void *)c, lookup_close);\n    if (lookup_close)\n    {\n      mhd_probe_log(\"early return: MHD_CONN_MUST_CLOSE (Connection: close header present for c)\");\n      return MHD_CONN_MUST_CLOSE;\n    }\n  }\n\n  /* The following block intentionally uses 'connection' (non-const pointer)\n     as in the original code. This is the spot reported in the violation\n     scenario: a non-const pointer is passed to a lookup routine that only\n     inspects the connection. We log the pointer and the result to provide\n     evidence. */\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    int lookup_keepalive = MHD_lookup_header_s_token_ci (connection,\n                                                         MHD_HTTP_HEADER_CONNECTION,\n                                                         \"Keep-Alive\");\n    mhd_probe_log(\"MHD_lookup_header_s_token_ci called with connection=%p (non-const): returned=%d\",\n                  (void *)connection, lookup_keepalive);\n    if (lookup_keepalive)\n    {\n      mhd_probe_log(\"early return: MHD_CONN_USE_KEEPALIVE (Connection: Keep-Alive header present for connection)\");\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    mhd_probe_log(\"return: MHD_CONN_MUST_CLOSE (HTTP/1.0 path without Keep-Alive)\");\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    mhd_probe_log(\"return: MHD_CONN_USE_KEEPALIVE (HTTP/1.1 compatible)\");\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  mhd_probe_log(\"return: MHD_CONN_MUST_CLOSE (default)\");\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}