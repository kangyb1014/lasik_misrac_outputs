{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the string literal \"close\" (and also the header macro) to MHD_lookup_header_s_token_ci. If that function\u2019s prototype declares the corresponding parameters as non-const (for example: int MHD_lookup_header_s_token_ci(struct MHD_Connection *conn, char *header, char *token);), this violates MISRA C 2023 Rule 8.13 \u2014 a pointer should point to a const-qualified type whenever possible. In that scenario the token/header parameters (and possibly the connection pointer if the function only reads it) should be const-qualified (e.g. const char *header, const char *token and/or const struct MHD_Connection *conn).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of keepalive_possible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\nPlease provide the modified keepalive_possible code.\n",
  "test_code": "static void\nkeepalive_probe_lookup (const struct MHD_Connection *conn,\n                        const char *header,\n                        const char *token,\n                        const char *site)\n{\n  FILE *f = fopen(\"/tmp/logs/147.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[keepalive_probe_lookup] site=%s\\n\", site ? site : \"(null)\");\n  fprintf (f, \"  conn=%p, header=%p, token=%p\\n\",\n           (const void *) conn,\n           (const void *) header,\n           (const void *) token);\n  fprintf (f, \"  header_str='%s', token_str='%s'\\n\",\n           (NULL != header) ? header : \"(null)\",\n           (NULL != token) ? token : \"(null)\");\n\n  if (NULL != conn)\n  {\n    fprintf (f, \"  conn->keepalive=%d, conn->read_closed=%d, conn->discard_request=%d, conn->stop_with_error=%d\\n\",\n             (int) conn->keepalive,\n             (int) conn->read_closed,\n             (int) conn->discard_request,\n             (int) conn->stop_with_error);\n    fprintf (f, \"  conn->rq.http_ver=%d\\n\", (int) conn->rq.http_ver);\n    fprintf (f, \"  conn->rp.response=%p\\n\", (const void *) conn->rp.response);\n  }\n\n  fclose (f);\n}\n\nstatic void\nkeepalive_probe_event (const char *event,\n                        const struct MHD_Connection *conn,\n                        const struct MHD_Response *resp)\n{\n  FILE *f = fopen(\"/tmp/logs/147.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf (f, \"[keepalive_probe_event] event=%s\\n\", event ? event : \"(null)\");\n  fprintf (f, \"  conn=%p, response=%p\\n\",\n           (const void *) conn,\n           (const void *) resp);\n  if (NULL != conn)\n    fprintf (f, \"  conn->rq.http_ver=%d, conn->read_closed=%d, conn->discard_request=%d, conn->stop_with_error=%d\\n\",\n             (int) conn->rq.http_ver,\n             (int) conn->read_closed,\n             (int) conn->discard_request,\n             (int) conn->stop_with_error);\n  if (NULL != resp)\n    fprintf (f, \"  resp->flags=0x%08x, resp->flags_auto=0x%08x\\n\",\n             (unsigned) resp->flags,\n             (unsigned) resp->flags_auto);\n\n  fclose (f);\n}\n\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Log entry and basic state */\n  keepalive_probe_event (\"entry\", c, r);\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    keepalive_probe_event (\"must_close_due_to_keepalive_flag\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    keepalive_probe_event (\"must_upgrade\", c, r);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    keepalive_probe_event (\"must_close_due_to_read_closed_or_discard\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    keepalive_probe_event (\"must_close_due_to_http_1_0_strict\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    keepalive_probe_event (\"must_close_due_to_connection_close_flag\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    keepalive_probe_event (\"must_close_due_to_unsupported_http_ver\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe the call that is relevant to the reported violation scenario. */\n  keepalive_probe_lookup (c,\n                          MHD_HTTP_HEADER_CONNECTION,\n                          \"close\",\n                          \"before_first_lookup\");\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    keepalive_probe_event (\"must_close_due_to_connection_header_close\", c, r);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    keepalive_probe_lookup (connection,\n                            MHD_HTTP_HEADER_CONNECTION,\n                            \"Keep-Alive\",\n                            \"before_second_lookup\");\n\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      keepalive_probe_event (\"use_keepalive_due_to_connection_header_keep_alive\", connection, connection->rp.response);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    keepalive_probe_event (\"must_close_after_1_0_checks\", connection, connection->rp.response);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    keepalive_probe_event (\"use_keepalive_due_to_http_1_1_compat\", c, r);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  keepalive_probe_event (\"must_close_fallback\", c, r);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}