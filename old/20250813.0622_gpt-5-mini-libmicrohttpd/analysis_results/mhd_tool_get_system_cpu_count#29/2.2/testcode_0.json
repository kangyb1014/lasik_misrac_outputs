{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe unconditional conditional 'if (1)' is executed but has no effect: evaluating a constant true condition and entering the block is redundant. Removing the 'if (1)' and its braces would not change program behaviour, so the conditional test is a dead operation and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_system_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/234.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_system_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_system_cpu_count:\n```c\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      return res;\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n#endif /* __linux__ || __GLIBC__  */\n\n  return -1; /* Cannot detect */\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_system_cpu_count code.\n",
  "test_code": "int\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n  FILE *fp;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  /* Probe: log return of specialised API */\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"stage=special_api res=%d\\n\", res);\n    fclose(fp);\n  }\n  if (0 < res)\n  {\n    /* Probe: logging before returning */\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_special_api returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  /* Probe: log return of sysctl API */\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"stage=sysctl res=%d\\n\", res);\n    fclose(fp);\n  }\n  if (0 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysctl returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  /* Probe: log return of sysconf API */\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"stage=sysconf res=%d\\n\", res);\n    fclose(fp);\n  }\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysconf returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysconf_gt2 returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n\n    /* Probe: log proc_cpu_count and comparison */\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"stage=proc_check sysconf_res=%d proc_cpu_count=%d\\n\", res, proc_cpu_count);\n      fclose(fp);\n    }\n\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n      if (fp)\n      {\n        fprintf(fp, \"branch=proc_equals_sysconf returning=%d\\n\", res);\n        fclose(fp);\n      }\n\n      return res;\n    }\n    else\n    {\n      fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n      if (fp)\n      {\n        fprintf(fp, \"branch=proc_not_equal_sysconf sysconf_res=%d proc_cpu_count=%d\\n\", res, proc_cpu_count);\n        fclose(fp);\n      }\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"stage=sysctl_fallback res=%d\\n\", res);\n    fclose(fp);\n  }\n  if (0 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysctl_fallback returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"stage=sysconf_fallback res=%d\\n\", res);\n    fclose(fp);\n  }\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysconf_fallback returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"branch=early_return_sysconf_fallback_gt2 returning=%d\\n\", res);\n      fclose(fp);\n    }\n\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  fp = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"final=unable_to_detect returning=-1\\n\");\n    fclose(fp);\n  }\n\n  return -1; /* Cannot detect */\n}\n"
}