{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional if (1) is a tautology: it is always true. The evaluation of this constant conditional and its branching are executed but removing the if (i.e. executing the block unconditionally) would not change program behaviour. Therefore the if (1) construct is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_system_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/234.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_system_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_system_cpu_count:\n```c\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      return res;\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n#endif /* __linux__ || __GLIBC__  */\n\n  return -1; /* Cannot detect */\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_system_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper. Appends human-readable logs to /tmp/logs/234.txt.\n   Keep side effects minimal: if opening the file fails, the probe is silently ignored. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/234.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  mhd_probe_log (\"ENTER: mhd_tool_get_system_cpu_count\");\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  mhd_probe_log (\"after mhd_tool_get_sys_cpu_count_special_api_(): res=%d\", res);\n  if (0 < res)\n  {\n    mhd_probe_log (\"early return: specialised API provided positive count: %d\", res);\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  mhd_probe_log (\"after mhd_tool_get_sys_cpu_count_sysctl_(): res=%d\", res);\n  if (0 < res)\n  {\n    mhd_probe_log (\"early return: sysctl provided positive count: %d\", res);\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  mhd_probe_log (\"after mhd_tool_get_sys_cpu_count_sysconf_(): res=%d\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  mhd_probe_log (\"compiled path: non-linux && non-glibc\");\n  if (0 < res)\n  {\n    mhd_probe_log (\"early return: sysconf provided positive count: %d\", res);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  mhd_probe_log (\"compiled path: linux || glibc\");\n  if (2 < res)\n  {\n    mhd_probe_log (\"early return: linux/glibc branch, res > 2: %d\", res);\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    mhd_probe_log (\"proc_cpu_count=%d, sysconf_res=%d\", proc_cpu_count, res);\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      mhd_probe_log (\"early return: proc_cpu_count equals sysconf_res (%d)\", res);\n      return res;\n    }\n    mhd_probe_log (\"proc_cpu_count != sysconf_res (proc=%d, sys=%d); continuing\", proc_cpu_count, res);\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  mhd_probe_log (\"after mhd_tool_get_sys_cpu_count_sysctl_fallback_(): res=%d\", res);\n  if (0 < res)\n  {\n    mhd_probe_log (\"early return: sysctl_fallback provided positive count: %d\", res);\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  mhd_probe_log (\"after mhd_tool_get_sys_cpu_count_sysconf_fallback_(): res=%d\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  mhd_probe_log (\"compiled path (fallback): non-linux && non-glibc\");\n  if (0 < res)\n  {\n    mhd_probe_log (\"early return: sysconf_fallback positive count: %d\", res);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  mhd_probe_log (\"compiled path (fallback): linux || glibc\");\n  if (2 < res)\n  {\n    mhd_probe_log (\"early return: fallback linux/glibc branch, res > 2: %d\", res);\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  mhd_probe_log (\"exit: cannot detect CPU count, returning -1\");\n  return -1; /* Cannot detect */\n}\n"
}