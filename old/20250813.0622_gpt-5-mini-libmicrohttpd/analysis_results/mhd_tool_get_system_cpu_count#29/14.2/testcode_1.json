{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop \"for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1) ++ret;\" violates Rule 14.2. The third clause modifies enb_set (enb_set &= enb_set - 1) rather than modifying only the loop counter, and the loop counter ret is incremented in the loop body (++ret) even though the loop counter shall not be modified in the body. Thus the third-clause and loop-counter-in-body requirements of Rule 14.2 are breached.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_system_cpu_count code that contains useful probe functions that print useful logs to a file \"/tmp/logs/236.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_system_cpu_count as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_system_cpu_count:\n```c\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      return res;\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n#endif /* __linux__ || __GLIBC__  */\n\n  return -1; /* Cannot detect */\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_system_cpu_count code.\n",
  "test_code": "#include <stdio.h>\n\n/* Prototypes for external helper functions used by the original code. */\nextern int mhd_tool_get_sys_cpu_count_special_api_(void);\nextern int mhd_tool_get_sys_cpu_count_sysctl_(void);\nextern int mhd_tool_get_sys_cpu_count_sysconf_(void);\nextern int mhd_tool_get_proc_cpu_count(void);\nextern int mhd_tool_get_sys_cpu_count_sysctl_fallback_(void);\nextern int mhd_tool_get_sys_cpu_count_sysconf_fallback_(void);\n\n/* Simple probing helpers that append logs to the required file. */\nstatic void probe_log_msg(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/236.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_val(const char *label, int value, const char *note)\n{\n  FILE *f = fopen(\"/tmp/logs/236.txt\", \"a\");\n  if (f != NULL)\n  {\n    if (note != NULL)\n      fprintf(f, \"%s: %d (%s)\\n\", label, value, note);\n    else\n      fprintf(f, \"%s: %d\\n\", label, value);\n    fclose(f);\n  }\n}\n\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  probe_log_msg(\"enter mhd_tool_get_system_cpu_count\");\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  probe_log_val(\"mhd_tool_get_sys_cpu_count_special_api_\", res, \"after call\");\n  if (0 < res)\n  {\n    probe_log_val(\"returning\", res, \"from special_api\");\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  probe_log_val(\"mhd_tool_get_sys_cpu_count_sysctl_\", res, \"after call\");\n  if (0 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysctl\");\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  probe_log_val(\"mhd_tool_get_sys_cpu_count_sysconf_\", res, \"after call\");\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysconf (non-linux)\");\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysconf (linux: >2)\");\n    return res;\n  }\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    probe_log_val(\"mhd_tool_get_proc_cpu_count\", proc_cpu_count, \"after call\");\n    probe_log_val(\"sysconf_res\", res, \"sysconf result\");\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      probe_log_val(\"returning\", res, \"proc_cpu_count == res\");\n      return res;\n    }\n    probe_log_msg(\"proc_cpu_count != res; continuing with fallbacks\");\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  probe_log_val(\"mhd_tool_get_sys_cpu_count_sysctl_fallback_\", res, \"after call\");\n  if (0 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysctl_fallback\");\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  probe_log_val(\"mhd_tool_get_sys_cpu_count_sysconf_fallback_\", res, \"after call\");\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysconf_fallback (non-linux)\");\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    probe_log_val(\"returning\", res, \"from sysconf_fallback (linux: >2)\");\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  probe_log_msg(\"returning -1 ; Cannot detect\");\n  return -1; /* Cannot detect */\n}\n"
}