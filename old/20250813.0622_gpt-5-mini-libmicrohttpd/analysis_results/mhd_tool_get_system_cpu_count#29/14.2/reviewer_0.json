{
  "user_message": "An agent A claimed that the following mhd_tool_get_system_cpu_count code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. .\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_system_cpu_count.\n```c\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  if (0 < res)\n    return res;\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n  if (0 < res)\n  {\n    /* '1' or '2' could a be fallback number.\n     * See get_nprocs_fallback() in glibc\n       sysdeps/unix/sysv/linux/getsysstats.c */\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      return res;\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  if (0 < res)\n    return res;\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n    return res;\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n    return res;\n#endif /* __linux__ || __GLIBC__  */\n\n  return -1; /* Cannot detect */\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop uses count_by_proc_aff_mask as the loop counter (initialized in the first clause) but the loop counter is incremented in the loop body (++count_by_proc_aff_mask) instead of being modified only in the third clause. The third clause (proc_aff &= proc_aff - 1) modifies proc_aff, not the loop counter, so it does not \u2018modify only the value of the loop counter\u2019 as required. Additionally the condition (0 != proc_aff) refers to proc_aff which is modified by the third clause, conflicting with the rule\u2019s requirement about clause usage. These aspects violate MISRA C 2023 Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_tool_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/236.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* Best-effort logging: do not disturb behavior if logging fails. */\n  }\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nint\nmhd_tool_get_system_cpu_count (void)\n{\n  int res;\n\n  mhd_tool_log(\"ENTRY: mhd_tool_get_system_cpu_count\");\n\n  /* Try specialised APIs first */\n  res = mhd_tool_get_sys_cpu_count_special_api_ ();\n  mhd_tool_log(\"after special_api: res=%d\", res);\n  if (0 < res)\n  {\n    mhd_tool_log(\"returning from special_api with res=%d\", res);\n    return res;\n  }\n\n  /* Try sysctl*(). This is typically a direct interface to\n     kernel values. */\n  res = mhd_tool_get_sys_cpu_count_sysctl_ ();\n  mhd_tool_log(\"after sysctl: res=%d\", res);\n  if (0 < res)\n  {\n    mhd_tool_log(\"returning from sysctl with res=%d\", res);\n    return res;\n  }\n\n  /* Try sysconf() as the last resort as this is a generic interface\n     which can be implemented by parsing system files. */\n  res = mhd_tool_get_sys_cpu_count_sysconf_ ();\n  mhd_tool_log(\"after sysconf: res=%d\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    mhd_tool_log(\"non-linux/glibc branch: returning res=%d\", res);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    mhd_tool_log(\"linux/glibc branch: res>2 so returning res=%d\", res);\n    return res;\n  }\n  if (0 < res)\n  {\n    mhd_tool_log(\"linux/glibc branch: 0<res<=2 res=%d; checking proc_cpu_count\", res);\n\n    int proc_cpu_count;\n\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    mhd_tool_log(\"proc_cpu_count=%d\", proc_cpu_count);\n    if (proc_cpu_count == res)\n    {\n      /* The detected number of CPUs available for the process\n         is equal to the detected number of system CPUs.\n         Assume detected number is correct. */\n      mhd_tool_log(\"proc_cpu_count == res (%d); returning res\", res);\n      return res;\n    }\n    else\n    {\n      mhd_tool_log(\"proc_cpu_count (%d) != res (%d); continuing\", proc_cpu_count, res);\n    }\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  /* Try available fallbacks */\n\n  res = mhd_tool_get_sys_cpu_count_sysctl_fallback_ ();\n  mhd_tool_log(\"after sysctl_fallback: res=%d\", res);\n  if (0 < res)\n  {\n    mhd_tool_log(\"returning from sysctl_fallback: res=%d\", res);\n    return res;\n  }\n\n  res = mhd_tool_get_sys_cpu_count_sysconf_fallback_ ();\n  mhd_tool_log(\"after sysconf_fallback: res=%d\", res);\n#if ! defined(__linux__) && ! defined(__GLIBC__)\n  if (0 < res)\n  {\n    mhd_tool_log(\"non-linux/glibc fallback returning res=%d\", res);\n    return res;\n  }\n#else  /* __linux__ || __GLIBC__ */\n  if (2 < res)\n  {\n    mhd_tool_log(\"linux/glibc fallback res>2 returning res=%d\", res);\n    return res;\n  }\n#endif /* __linux__ || __GLIBC__  */\n\n  mhd_tool_log(\"cannot detect, returning -1\");\n  return -1; /* Cannot detect */\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for mhd_tool_get_system_cpu_count. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The provided mhd_tool_get_system_cpu_count function contains no for statements at all\u2014only assignments, if/else blocks and returns\u2014so MISRA C:2023 Rule 14.2 (which applies specifically to the well-formedness of for loops) cannot be violated by this function. The loop variables and expressions mentioned by Agent A (count_by_proc_aff_mask, proc_aff, increment in loop body, etc.) do not appear in the supplied source; it appears Agent A analyzed or described a different function. The logging variant compiled but produced no log because the test likely never exercised this function; that runtime observation does not make Rule 14.2 applicable. If Agent A believes a violation exists, they must supply the actual code containing the for loop in question for review."
}