{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ws_get_accept_value:\n#define WS_KEY_LEN 24\n...\n#define WS_GUID \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"\n...\n#define WS_GUID_LEN 36\n...\n#define WS_KEY_GUID_LEN ((WS_KEY_LEN)+(WS_GUID_LEN))\n...\n#define SHA1HashSize 20\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "strncpy (str, key, (WS_KEY_LEN + 1));",
    "strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);",
    "if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))"
  ],
  "explanation": "Only the calls to functions from <string.h> and their immediate use need investigation under MISRA C 2023 Rule 21.17. The three flagged fragments are the only uses of such string.h functions in the function: the strlen check and the two strncpy calls. They must be checked to ensure they cannot read or write beyond the bounds of the source or destination objects in all usage scenarios (e.g. that key is NUL-terminated within its accessible bounds, that the copy lengths and destination allocation match, and that overlapping writes are intended and safe).\n\nOther fragments do not invoke <string.h> functions and therefore are not in scope for Rule 21.17: the malloc call allocates WS_KEY_LEN + WS_GUID_LEN + 1 bytes which matches the sizes used for copying; SHA1Input is given an explicit byte count (WS_KEY_GUID_LEN) and operates on the allocated buffer (no string.h usage); free and the SHA1/SHA1Result/BASE64Encode calls are not standard string.h functions (BASE64Encode allocation/size behavior should be checked under other rules but not under Rule 21.17). The final assignment (*val)[len] = '\\0' is not a string.h call (its safety depends on BASE64Encode behavior and should be checked separately). Therefore no other code fragments need to be investigated specifically for Rule 21.17."
}