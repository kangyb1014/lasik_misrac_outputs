{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ws_get_accept_value:\n```c\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ws_get_accept_value:\n#define WS_KEY_LEN 24\n...\n#define WS_GUID_LEN 36\n...\n#define WS_KEY_GUID_LEN ((WS_KEY_LEN)+(WS_GUID_LEN))\n...\n#define WS_GUID \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"\n...\n#define SHA1HashSize 20\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "strncpy (str, key, (WS_KEY_LEN + 1));",
    "if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }",
    "return MHD_YES;",
    "SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);",
    "len = BASE64Encode (hash, SHA1HashSize, val);",
    "free (str);",
    "strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);",
    "if (-1 == len)\n  {\n    return MHD_NO;\n  }",
    "(*val)[len] = '\\0';"
  ],
  "explanation": "I did not include the variable declarations or the initial guard/memory-allocation error returns as suspicious because they are simple declarations or deliberate error-handling early exits (they are intentionally reachable only on those error conditions). The remaining executable statements that are not listed are straightforward control-flow steps (e.g. SHA1Reset call and the initial NULL/length checks) that are reachable by design given the preceding checks. The fragments above were selected because they are the places where control flow, buffer composition/termination, external-call success/failure handling, allocation/return interaction, or post-call use of returned buffers might cause code to be effectively dead or unreachable in some configurations and thus deserve investigation for compliance with Rule 2.1."
}