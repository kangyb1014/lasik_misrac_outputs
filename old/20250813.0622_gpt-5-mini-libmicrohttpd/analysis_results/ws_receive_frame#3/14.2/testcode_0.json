{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement initializes and updates two loop counters (i and j): for (i = idx_first_data, j = 0; i < *length; i++, j++). MISRA C 2023 Rule 14.2 requires there be only one loop counter and that the third clause modify only that loop counter. Here two counters are initialized in the first clause and both are incremented in the third clause, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/28.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nPlease provide the modified ws_receive_frame code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log = fopen(\"/tmp/logs/28.txt\", \"a\");\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  if (log != NULL)\n  {\n    fprintf(log, \"\\n--- enter ws_receive_frame ---\\n\");\n    fprintf(log, \"initial frame[0]=0x%02X, *length=%zd\\n\", frame[0], *length);\n  }\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (log != NULL)\n    {\n      fprintf(log, \"text frame detected: mask_byte=0x%02X, flength=0x%02X\\n\", mask, flength);\n    }\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log != NULL)\n      {\n        fprintf(log, \"extended 16-bit length: idx_first_mask=%u\\n\", (unsigned) idx_first_mask);\n      }\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log != NULL)\n      {\n        fprintf(log, \"extended 64-bit length: idx_first_mask=%u\\n\", (unsigned) idx_first_mask);\n      }\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    if (log != NULL)\n    {\n      fprintf(log, \"idx_first_mask=%u, idx_first_data=%u, data_length=%zu\\n\",\n              (unsigned) idx_first_mask, (unsigned) idx_first_data, data_length);\n      fprintf(log, \"masks = 0x%02X 0x%02X 0x%02X 0x%02X\\n\",\n              masks[0], masks[1], masks[2], masks[3]);\n    }\n\n    msg = malloc (data_length + 1);\n    if (log != NULL)\n    {\n      fprintf(log, \"malloc(%zu+1) -> %p\\n\", data_length, (void *) msg);\n    }\n    if (NULL != msg)\n    {\n      /*\n       * The following loop intentionally initializes and updates two loop\n       * counters (i and j). Logging records the initial values and each\n       * iteration so others can reproduce the scenario and observe the\n       * modification of two counters within the for statement.\n       */\n      if (log != NULL)\n      {\n        fprintf(log, \"entering loop: for (i = %u, j = 0; i < %zd; i++, j++)\\n\",\n                (unsigned) idx_first_data, *length);\n      }\n\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        unsigned char original = frame[i];\n        unsigned char key = masks[j % 4];\n        unsigned char result = original ^ key;\n        msg[j] = result;\n\n        if (log != NULL)\n        {\n          fprintf(log, \"iter: i=%d j=%d frame[i]=0x%02X mask=0x%02X xor=0x%02X -> msg[%d]=0x%02X\\n\",\n                  i, j, original, key, result, j, result);\n        }\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n\n      if (log != NULL)\n      {\n        fprintf(log, \"after loop: final j=%d, reported length=%zd, msg[0..min(16,data_length)-1]=\",\n                j, *length);\n        {\n          size_t k;\n          size_t to_print = data_length < 16U ? data_length : 16U;\n          for (k = 0U; k < to_print; k++)\n          {\n            fprintf(log, \"%02X\", (unsigned char) msg[k]);\n            if (k + 1U < to_print)\n            {\n              fprintf(log, \" \");\n            }\n          }\n        }\n        fprintf(log, \"\\n\");\n      }\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n    if (log != NULL)\n    {\n      fprintf(log, \"control close frame detected\\n\");\n    }\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log != NULL)\n    {\n      fprintf(log, \"other frame type = 0x%02X\\n\", *type);\n    }\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"--- exit ws_receive_frame (return %p) ---\\n\", (void *) msg);\n    fclose(log);\n  }\n  return msg;\n}\n"
}