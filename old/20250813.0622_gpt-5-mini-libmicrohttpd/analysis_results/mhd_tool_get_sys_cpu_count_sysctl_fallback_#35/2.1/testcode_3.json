{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf the translation unit is built with __linux__ defined (or with none of HAVE_SYSCTLBYNAME / HAVE_SYSCTL / related macros enabled), ret is initialized to -1 and never modified. The test if (0 >= ret) is therefore always true and the function returns -1, making the subsequent \"return ret;\" unreachable in that build.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_sysctl_fallback_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/281.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_sysctl_fallback_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_sysctl_fallback_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_sysctl_fallback_ code.\n",
  "test_code": "static int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  /* Logging probe: capture control flow and state. Append to /tmp/logs/281.txt */\n  FILE *mhd_log = fopen(\"/tmp/logs/281.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"ENTER: mhd_tool_get_sys_cpu_count_sysctl_fallback_ initial ret=%d\\n\", ret);\n    fflush(mhd_log);\n  }\n\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: HAVE_SYSCTLBYNAME taken (0 >= ret).\\n\");\n\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"sysctlbyname: failed or size mismatch (value_size=%zu, ret=%d). Setting ret=-1.\\n\", value_size, ret);\n      ret = -1;\n    }\n    else\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"sysctlbyname: succeeded (value_size=%zu, ret=%d).\\n\", value_size, ret);\n    }\n    if (mhd_log)\n      fflush(mhd_log);\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: HAVE_SYSCTL taken (0 >= ret).\\n\");\n\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"sysctl: failed or size mismatch (value_size=%zu, ret=%d). Setting ret=-1.\\n\", value_size, ret);\n      ret = -1;\n    }\n    else\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"sysctl: succeeded (value_size=%zu, ret=%d).\\n\", value_size, ret);\n    }\n    if (mhd_log)\n      fflush(mhd_log);\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n\n  if (mhd_log)\n    fprintf(mhd_log, \"AFTER_GUARDED_BLOCKS: ret=%d\\n\", ret);\n\n  if (0 >= ret)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"RETURN: returning -1 because (0 >= ret) is true with ret=%d\\n\", ret);\n      fflush(mhd_log);\n      fclose(mhd_log);\n    }\n    return -1;\n  }\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"RETURN: returning ret=%d\\n\", ret);\n    fflush(mhd_log);\n    fclose(mhd_log);\n  }\n  return ret;\n}\n"
}