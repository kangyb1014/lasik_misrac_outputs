{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn mhd_tool_get_sys_cpu_count_special_api_ (Windows branch) the code zeroes the local SYSTEM_INFO structure immediately before calling ptrGetNativeSystemInfo():\nmemset((void *)&sysInfo, 0, sizeof(sysInfo));\nptrGetNativeSystemInfo(&sysInfo);\nThe Windows API GetNativeSystemInfo initializes all fields of SYSTEM_INFO (including dwNumberOfProcessors) before it is used, so the prior memset has no effect on subsequent program behaviour and is therefore executed but removable without changing behaviour. This constitutes dead (redundant) code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_sysctl_fallback_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_sysctl_fallback_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_sysctl_fallback_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_sysctl_fallback_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void\nmhd_tool_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_fallback_ (void)\n{\n  int ret = -1;\n  mhd_tool_log_probe(\"enter mhd_tool_get_sys_cpu_count_sysctl_fallback_: initial ret=%d\", ret);\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int sysrc = sysctlbyname (\"hw.ncpu\", &ret, &value_size,\n                              NULL, 0);\n    mhd_tool_log_probe(\"sysctlbyname called: sysrc=%d, value_size=%zu, ret(before check)=%d\",\n                       sysrc, value_size, ret);\n    if ((0 != sysrc)\n        || (sizeof (ret) != value_size))\n    {\n      ret = -1;\n      mhd_tool_log_probe(\"sysctlbyname: result indicates failure, set ret=-1\");\n    }\n    else\n    {\n      mhd_tool_log_probe(\"sysctlbyname: success, ret=%d\", ret);\n    }\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPU)\n  if (0 >= ret)\n  {\n    /* FreeBSD, OpenBSD, NetBSD, Darwin (and others?): The number of CPUs */\n    int mib[2] = {CTL_HW, HW_NCPU};\n    size_t value_size = sizeof (ret);\n    int sysrc = sysctl (mib, 2, &ret, &value_size, NULL, 0);\n    mhd_tool_log_probe(\"sysctl called: sysrc=%d, mib[0]=%d, mib[1]=%d, value_size=%zu, ret(before check)=%d\",\n                       sysrc, mib[0], mib[1], value_size, ret);\n    if ((0 != sysrc)\n        || (sizeof (ret) != value_size))\n    {\n      ret = -1;\n      mhd_tool_log_probe(\"sysctl: result indicates failure, set ret=-1\");\n    }\n    else\n    {\n      mhd_tool_log_probe(\"sysctl: success, ret=%d\", ret);\n    }\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n  {\n    mhd_tool_log_probe(\"exit mhd_tool_get_sys_cpu_count_sysctl_fallback_: returning -1 (ret=%d)\", ret);\n    return -1;\n  }\n  mhd_tool_log_probe(\"exit mhd_tool_get_sys_cpu_count_sysctl_fallback_: returning ret=%d\", ret);\n  return ret;\n}\n"
}