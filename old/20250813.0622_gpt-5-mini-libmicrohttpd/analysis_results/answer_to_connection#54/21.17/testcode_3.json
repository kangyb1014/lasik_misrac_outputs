{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nsend_page calls strlen(page) where page may be con_info->answerstring (set from POST processing). con_info->answerstring is not initialized to a NUL-terminated buffer in this fragment and may come from MHD_post_process/iterate_post as raw POST data (which is passed with an explicit length and is not guaranteed NUL-terminated). Therefore strlen(page) can read past the end of the object referenced by page, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "static void probe_log(const char *tag,\n                          struct connection_info_struct *con_info,\n                          const char *method,\n                          const char *upload_data,\n                          size_t upload_data_size,\n                          void *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print pointer and size information only. Do NOT attempt to treat\n     potentially non-NUL-terminated buffers as strings (no %s for\n     con_info->answerstring). This minimizes risk of introducing new\n     out-of-bounds reads. */\n  fprintf(f, \"%s: method=%s connection=%p con_info=%p\",\n          tag, method ? method : \"(null)\", connection, (void *) con_info);\n\n  if (con_info != NULL)\n  {\n    fprintf(f, \" postprocessor=%p answerstring=%p\",\n            (void *) con_info->postprocessor,\n            (void *) con_info->answerstring);\n  }\n\n  fprintf(f, \" upload_data=%p upload_data_size=%zu\\n\",\n          (void *) upload_data, upload_data_size);\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    /* Log creation and initial state */\n    probe_log(\"NEW_REQ_INITIAL\", con_info, method, upload_data, *upload_data_size, connection);\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        /* Log postprocessor creation failure */\n        probe_log(\"POSTPROC_CREATE_FAIL\", con_info, method, upload_data, *upload_data_size, connection);\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n\n      /* Log successful creation for POST */\n      probe_log(\"NEW_REQ_POST_CREATED\", con_info, method, upload_data, *upload_data_size, connection);\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n\n      /* Log creation for GET */\n      probe_log(\"NEW_REQ_GET_CREATED\", con_info, method, upload_data, *upload_data_size, connection);\n    }\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"HANDLE_GET\", *req_cls, method, upload_data, *upload_data_size, connection);\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      /* Log incoming upload data pointer and size before processing. */\n      probe_log(\"POST_PROCESSING_CHUNK\", con_info, method, upload_data, *upload_data_size, connection);\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n\n      /* After handing the chunk to the post processor, reset the size\n         as original logic does and log that we returned to caller. */\n      *upload_data_size = 0;\n\n      probe_log(\"POST_PROCESSING_CHUNK_DONE\", con_info, method, upload_data, *upload_data_size, connection);\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      /* We MUST NOT call strlen or treat answerstring as a C string here\n         because it may originate from raw POST data that isn't NUL\n         terminated. Log the pointer and make it visible that send_page\n         is being invoked with a possibly non-NUL-terminated buffer. */\n      probe_log(\"POST_DONE_ANSWER_PRESENT\", con_info, method, upload_data, *upload_data_size, connection);\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  /* Default error path; log before sending errorpage */\n  probe_log(\"DEFAULT_ERROR_RETURN\", NULL, method, upload_data, *upload_data_size, connection);\n  return send_page (connection, errorpage);\n}\n"
}