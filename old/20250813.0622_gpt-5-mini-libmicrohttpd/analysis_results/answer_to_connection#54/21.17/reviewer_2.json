{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If send_page is called with page == con_info->answerstring and that buffer is not guaranteed to be NUL-terminated (for example, populated from POST data by the post-processor via memcpy/strncpy-like operations or truncated without appending '\\0'), then strlen(page) will read past the allocated buffer and access memory beyond the object bounds. In the POST path the code allows con_info->answerstring to be supplied by the post-processor, but there is no shown guarantee of NUL-termination, so strlen(page) can cause an out-of-bounds access.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_basic(const char *stage, const char *method, size_t upload_data_size, void *req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s: method=%s, upload_data_size=%zu, req_cls_ptr=%p\\n\",\n          stage,\n          (NULL == method) ? \"(null)\" : method,\n          upload_data_size,\n          req_cls);\n\n  fclose(f);\n}\nstatic void probe_log_con_info(const char *stage, struct connection_info_struct *con_info)\n{\n  FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  if (NULL == con_info)\n  {\n    fprintf(f, \"%s: con_info=(null)\\n\", stage);\n  }\n  else\n  {\n    /* Log pointer values and connectiontype but do NOT dereference answerstring contents\n       to avoid introducing additional out-of-bounds accesses. */\n    fprintf(f, \"%s: con_info=%p, answerstring_ptr=%p, postprocessor_ptr=%p, connectiontype=%d\\n\",\n            stage,\n            (void *) con_info,\n            (void *) con_info->answerstring,\n            (void *) con_info->postprocessor,\n            (int) con_info->connectiontype);\n  }\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry with basic request info. */\n  probe_log_basic(\"entry\", method, (NULL == upload_data_size) ? 0u : *upload_data_size, *req_cls);\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    /* Log newly-created connection_info_struct state. */\n    probe_log_con_info(\"after_alloc\", con_info);\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    /* Log which page is about to be sent (askpage). We only log the pointer value. */\n    FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"sending GET: askpage_ptr=%p\\n\", (void *) askpage);\n      fclose(f);\n    }\n\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    /* Log con_info state on POST handling entry. */\n    probe_log_con_info(\"post_entry\", con_info);\n\n    if (*upload_data_size != 0)\n    {\n      /* Log that upload data is being processed and how many bytes. */\n      FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"post_data_process: upload_data_size=%zu, upload_data_ptr=%p\\n\",\n                *upload_data_size, (void *) upload_data);\n        fclose(f);\n      }\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      /* Important probe: log that we are about to call send_page with con_info->answerstring.\n         We intentionally do NOT call strlen or otherwise inspect the buffer contents here,\n         because that could read beyond bounds if the buffer is not NUL-terminated. */\n      FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"sending POST result: answerstring_ptr=%p (contents not inspected)\\n\",\n                (void *) con_info->answerstring);\n        fclose(f);\n      }\n\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  /* Log that we are sending the error page. */\n  {\n    FILE *f = fopen(\"/tmp/logs/439.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"sending error page: errorpage_ptr=%p\\n\", (void *) errorpage);\n      fclose(f);\n    }\n  }\n\n  return send_page (connection, errorpage);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for answer_to_connection. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct as a plausible MISRA 21.17 violation. In the shown code answer_to_connection passes con_info->answerstring into send_page without ensuring the buffer is NUL-terminated (or otherwise providing an associated length). If send_page (or any other code it calls) uses string.h functions that expect a NUL-terminated C string (for example strlen, strcpy, strcat, etc.), and con_info->answerstring can be populated by the POST post-processor via raw memcpy/strncpy-like operations or truncated without appending '\\0', then those string functions may read beyond the object bounds and violate Rule 21.17. \n\nThat said, the code excerpt does not show send_page or the post-processor implementation. If the post-processor guarantees NUL-termination of con_info->answerstring, or if send_page uses bounded APIs that take an explicit length and never use string.h functions in an unsafe way, then no violation occurs. Given only the provided code, however, there is no demonstrated guarantee of termination, so the agent\u2019s reported potential violation is valid."
}