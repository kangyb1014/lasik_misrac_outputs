{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_create_post_processor the value parameter 'buffer_size' is modified (buffer_size += 4;). Modifying a non\u2011pointer function parameter violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/437.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry and initial state */\n  probe_log(\"answer_to_connection: entry: connection=%p, url=%s, method=%s, version=%s, upload_data=%p, upload_data_size_ptr=%p, *upload_data_size=%zu, req_cls_ptr=%p, req_cls_deref=%p\",\n            (void *) connection,\n            (url != NULL) ? url : \"(null)\",\n            (method != NULL) ? method : \"(null)\",\n            (version != NULL) ? version : \"(null)\",\n            (void *) upload_data,\n            (void *) upload_data_size,\n            (upload_data_size != NULL) ? *upload_data_size : 0U,\n            (void *) req_cls,\n            (req_cls != NULL && *req_cls != NULL) ? *req_cls : NULL);\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    probe_log(\"answer_to_connection: allocated con_info=%p (malloc)\", (void *) con_info);\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      probe_log(\"answer_to_connection: preparing POST: calling MHD_create_post_processor with buffer_size=%d\", POSTBUFFERSIZE);\n\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      probe_log(\"answer_to_connection: returned from MHD_create_post_processor -> postprocessor=%p\",\n                (void *) con_info->postprocessor);\n\n      if (NULL == con_info->postprocessor)\n      {\n        probe_log(\"answer_to_connection: MHD_create_post_processor returned NULL, freeing con_info=%p\", (void *) con_info);\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      probe_log(\"answer_to_connection: POST setup complete: con_info=%p, connectiontype=POST, postprocessor=%p\",\n                (void *) con_info, (void *) con_info->postprocessor);\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      probe_log(\"answer_to_connection: connectiontype set to GET for con_info=%p\", (void *) con_info);\n    }\n\n    *req_cls = (void *) con_info;\n    probe_log(\"answer_to_connection: stored req_cls -> %p\", (void *) *req_cls);\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"answer_to_connection: method=GET: calling send_page with askpage\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n    probe_log(\"answer_to_connection: method=POST: con_info=%p, postprocessor=%p, upload_data_size_ptr=%p, *upload_data_size=%zu\",\n              (void *) con_info,\n              (void *) ((con_info != NULL) ? con_info->postprocessor : NULL),\n              (void *) upload_data_size,\n              (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n    if (*upload_data_size != 0)\n    {\n      probe_log(\"answer_to_connection: upload_data present: calling MHD_post_process with upload_data=%p, size=%zu\",\n                (void *) upload_data,\n                (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        probe_log(\"answer_to_connection: MHD_post_process returned != MHD_YES -> returning MHD_NO\");\n        return MHD_NO;\n      }\n\n      probe_log(\"answer_to_connection: MHD_post_process returned MHD_YES: setting *upload_data_size to 0 (previous=%zu)\", *upload_data_size);\n      *upload_data_size = 0;\n\n      probe_log(\"answer_to_connection: leaving POST handling block: returning MHD_YES\");\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      probe_log(\"answer_to_connection: POST finished and answerstring present -> sending page: answerstring=%s\",\n                (con_info->answerstring != NULL) ? con_info->answerstring : \"(null)\");\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  probe_log(\"answer_to_connection: falling through -> sending errorpage\");\n  return send_page (connection, errorpage);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for answer_to_connection. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is incorrect. The presented answer_to_connection does not modify any of its non\u2011pointer parameters. It writes through pointer parameters (e.g. *upload_data_size = 0 and *req_cls = con_info), which MISRA C 2023 Rule 17.8 explicitly permits (the object referred to by a pointer parameter may be modified). The pointer parameters themselves are not reassigned. The only potential violation described (buffer_size += 4) is inside MHD_create_post_processor; if true, that would be a violation of Rule 17.8 in MHD_create_post_processor itself, not in answer_to_connection. Therefore agent A's report that answer_to_connection violates Rule 17.8 is not correct."
}