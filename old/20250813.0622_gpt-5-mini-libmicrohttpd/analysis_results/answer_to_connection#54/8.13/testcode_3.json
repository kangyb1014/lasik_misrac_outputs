{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\ncon_info->answerstring is declared as 'char *answerstring' but is used to hold/read constant string data (e.g. passed to send_page which takes a const char*, and may point to the const string literals askpage/errorpage). Although this line only assigns NULL, the underlying pointer type should be const char * when it is used only for read-only strings, so the current declaration/usage violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/435.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/435.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n\n  fputc ('\\n', f);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log function entry and key input parameters. */\n  log_probe (\"answer_to_connection ENTER: method=%s, connection=%p, req_cls=%p, upload_data_size=%zu\",\n             (NULL != method) ? method : \"(null)\", (void *) connection, (void *) *req_cls, (NULL != upload_data_size) ? *upload_data_size : (size_t)0u);\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    log_probe (\"req_cls is NULL: allocating connection_info_struct\");\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      log_probe (\"malloc failed allocating connection_info_struct\");\n      return MHD_NO;\n    }\n\n    /* Preserve original behavior: initialize answerstring to NULL. */\n    con_info->answerstring = NULL;\n    log_probe (\"allocated con_info=%p, initialized answerstring=%p\", (void *) con_info, (void *) con_info->answerstring);\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        log_probe (\"post processor creation failed for con_info=%p\", (void *) con_info);\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      log_probe (\"POST connection: con_info=%p, postprocessor=%p\", (void *) con_info, (void *) con_info->postprocessor);\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      log_probe (\"GET connection: con_info=%p\", (void *) con_info);\n    }\n\n    *req_cls = (void *) con_info;\n\n    log_probe (\"req_cls now set to %p, returning MHD_YES\", (void *) *req_cls);\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    log_probe (\"Handling GET: calling send_page with askpage=%p\", (void *) askpage);\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    log_probe (\"Handling POST: con_info=%p, answerstring=%p, upload_data_size=%zu, postprocessor=%p\",\n               (void *) con_info,\n               (NULL != con_info) ? (void *) con_info->answerstring : NULL,\n               (NULL != upload_data_size) ? *upload_data_size : (size_t)0u,\n               (NULL != con_info) ? (void *) con_info->postprocessor : NULL);\n\n    if (*upload_data_size != 0)\n    {\n      log_probe (\"POST upload data present: size=%zu, calling MHD_post_process\", *upload_data_size);\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        log_probe (\"MHD_post_process failed for con_info=%p\", (void *) con_info);\n        return MHD_NO;\n      }\n\n      log_probe (\"MHD_post_process succeeded for con_info=%p; setting upload_data_size to 0 and returning MHD_YES\", (void *) con_info);\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      /* Log the pointer and try to log a short preview of the string if available. */\n      if (NULL != con_info->answerstring)\n      {\n        /* Safe print: limit to first 128 bytes to avoid huge logs. */\n        char preview[129];\n        size_t i;\n        for (i = 0u; i < sizeof (preview) - 1u && con_info->answerstring[i] != '\\0'; ++i)\n        {\n          preview[i] = con_info->answerstring[i];\n        }\n        preview[i] = '\\0';\n        log_probe (\"POST complete: sending page using con_info->answerstring=%p, preview=\\\"%s\\\"\", (void *) con_info->answerstring, preview);\n      }\n      else\n      {\n        log_probe (\"POST complete: con_info->answerstring is NULL (unexpected path)\");\n      }\n\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  log_probe (\"Falling through: sending errorpage=%p\", (void *) errorpage);\n  return send_page (connection, errorpage);\n}\n"
}