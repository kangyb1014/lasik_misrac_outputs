{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn iterate_post, the expression-statement \u201c(void) transfer_encoding;\u201d evaluates the parameter and discards it; it has no side-effects and removing that statement does not change program behaviour, so it is an executed operation whose removal would not affect the program \u2014 dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "static enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* Small probe helper that appends a single line to the log file. */\n  static void probe_log(const char *msg)\n  {\n    FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"%s\\n\", msg);\n      fclose(f);\n    }\n  }\n\n  char buf[256];\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry with method and req_cls pointer (may be NULL). */\n  snprintf(buf, sizeof(buf), \"answer_to_connection: entry method=%s req_cls=%p\",\n           (method != NULL) ? method : \"(null)\", (void *) *req_cls);\n  probe_log(buf);\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    snprintf(buf, sizeof(buf), \"answer_to_connection: new request, allocating con_info\");\n    probe_log(buf);\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      probe_log(\"answer_to_connection: malloc failed\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      snprintf(buf, sizeof(buf), \"answer_to_connection: method=POST, creating postprocessor\");\n      probe_log(buf);\n\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      snprintf(buf, sizeof(buf), \"answer_to_connection: postprocessor=%p\",\n               (void *) con_info->postprocessor);\n      probe_log(buf);\n\n      if (NULL == con_info->postprocessor)\n      {\n        probe_log(\"answer_to_connection: postprocessor creation failed, freeing con_info\");\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n    {\n      probe_log(\"answer_to_connection: method!=POST, treating as GET\");\n      con_info->connectiontype = GET;\n    }\n\n    *req_cls = (void *) con_info;\n\n    probe_log(\"answer_to_connection: stored con_info in req_cls and returning MHD_YES\");\n    return MHD_YES;\n  }\n\n  /* Existing request: log method and branch choices. */\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"answer_to_connection: handling GET -> send_page(askpage)\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    snprintf(buf, sizeof(buf), \"answer_to_connection: handling POST, upload_data_size=%zu, answerstring=%p\",\n             (upload_data_size != NULL) ? *upload_data_size : (size_t)0,\n             (void *) con_info->answerstring);\n    probe_log(buf);\n\n    if (*upload_data_size != 0)\n    {\n      snprintf(buf, sizeof(buf), \"answer_to_connection: calling MHD_post_process with upload_data=%p size=%zu\",\n               (void *) upload_data, *upload_data_size);\n      probe_log(buf);\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        probe_log(\"answer_to_connection: MHD_post_process failed -> returning MHD_NO\");\n        return MHD_NO;\n      }\n\n      probe_log(\"answer_to_connection: MHD_post_process succeeded, setting upload_data_size to 0 and returning MHD_YES\");\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      probe_log(\"answer_to_connection: POST complete and answerstring present -> send_page(answerstring)\");\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  probe_log(\"answer_to_connection: falling through -> send_page(errorpage)\");\n  return send_page (connection, errorpage);\n}\n"
}