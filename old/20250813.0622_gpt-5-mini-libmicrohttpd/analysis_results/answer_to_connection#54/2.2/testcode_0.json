{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement '(void) kind;' is a no-op used to silence an unused-parameter warning. It has no side effects and removing it would not change program behaviour, so it constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helper: append a timestamped message to the log file. */\nstatic void write_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  if (t != (time_t)-1)\n    fprintf(f, \"[%ld] \", (long)t);\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\nstatic void log_state(const char *stage, struct MHD_Connection *connection,\n                      const char *method, const char *url, const char *version,\n                      size_t upload_data_size, void *req_cls, void *deref_req_cls)\n{\n  /* We deliberately do not dereference pointers other than deref_req_cls which\n     is provided only when safe to do so by the caller. Keep logs informative\n     but avoid changing program behaviour. */\n  write_log(\"stage=%s connection=%p method=%s url=%p version=%p upload_data_size=%zu req_cls=%p *req_cls=%p\",\n            stage,\n            (void *) connection,\n            method ? method : \"(null)\",\n            (void *) url,\n            (void *) version,\n            upload_data_size,\n            req_cls,\n            deref_req_cls);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  /* The following expression-statements are intentionally present in the\n     original code as no-ops to silence unused-parameter warnings. We keep\n     them to preserve original behaviour and additionally log when they are\n     executed so that other agents can reproduce and gather evidence for the\n     reported dead-code scenario. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log that the no-op casts were executed. This does not access the values\n     of the parameters and thus preserves original behaviour. */\n  write_log(\"Executed no-op casts for parameters: (void) cls; (void) url; (void) version;\");\n\n  /* Log entry with available state. Only dereference *req_cls when req_cls\n     is non-NULL to avoid introducing undefined behaviour. */\n  log_state(\"entry\", connection, method, url, version,\n            upload_data_size ? *upload_data_size : 0,\n            (void *) req_cls,\n            (req_cls != NULL) ? *req_cls : NULL);\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    write_log(\"branch: initial request (req_cls was NULL)\");\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      write_log(\"malloc failed for connection_info_struct\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      write_log(\"method POST for initial request: creating post processor\");\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        write_log(\"post processor creation failed: freeing con_info and returning MHD_NO\");\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      write_log(\"post processor created successfully; connectiontype set to POST\");\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      write_log(\"initial request: connectiontype set to GET\");\n    }\n\n    *req_cls = (void *) con_info;\n\n    write_log(\"initial request handled: stored con_info at %p and returning MHD_YES\", (void *) con_info);\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    write_log(\"branch: method == GET -> send_page(askpage)\");\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    write_log(\"branch: method == POST, con_info=%p upload_data_size=%zu\", (void *) con_info,\n              (upload_data_size != NULL) ? *upload_data_size : 0);\n\n    if (*upload_data_size != 0)\n    {\n      write_log(\"POST: upload_data_size != 0 -> calling MHD_post_process (size=%zu)\", *upload_data_size);\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        write_log(\"MHD_post_process returned not MHD_YES -> returning MHD_NO\");\n        return MHD_NO;\n      }\n      *upload_data_size = 0;\n\n      write_log(\"MHD_post_process returned MHD_YES; reset *upload_data_size to 0 and returning MHD_YES\");\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      write_log(\"POST: upload_data_size == 0 and con_info->answerstring != NULL -> send_page(answerstring)\");\n      return send_page (connection, con_info->answerstring);\n    }\n  }\n\n  write_log(\"fallthrough: sending errorpage\");\n  return send_page (connection, errorpage);\n}\n"
}