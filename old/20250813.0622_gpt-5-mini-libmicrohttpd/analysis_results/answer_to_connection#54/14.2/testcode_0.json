{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses 'pos' as the single loop counter, but the loop body calls the external callback 'iterator'. The rule requires the loop counter not be modified in the loop body (and that the third clause only uses the loop counter and not objects modified by the body). Because the behaviour of functions called in the loop body is part of the loop behaviour, the iterator callback could modify the linked list (e.g. remove or alter nodes or next pointers) or even modify 'pos' itself. In that case the third clause 'pos = pos->next' would use an object modified by the body (or access freed memory), violating Rule 14.2. No guarantee is present in the code that the iterator does not modify the list/current node, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/436.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper: append messages to /tmp/logs/436.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/436.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  probe_log(\"enter answer_to_connection: connection=%p method=%s url=%p version=%p req_cls_ptr=%p req_cls_val=%p\",\n            (void *) connection,\n            (NULL == method) ? \"(null)\" : method,\n            (void *) url,\n            (void *) version,\n            (void *) req_cls,\n            (void *) (NULL == req_cls ? NULL : *req_cls));\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    probe_log(\"allocating connection_info_struct\");\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n    {\n      probe_log(\"malloc failed for connection_info_struct\");\n      return MHD_NO;\n    }\n    con_info->answerstring = NULL;\n\n    probe_log(\"allocated con_info=%p, answerstring=%p\", (void *) con_info, (void *) con_info->answerstring);\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      probe_log(\"created postprocessor=%p for con_info=%p\", (void *) con_info->postprocessor, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        probe_log(\"postprocessor creation failed, freeing con_info=%p\", (void *) con_info);\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n      probe_log(\"connection type set to POST for con_info=%p\", (void *) con_info);\n    }\n    else\n    {\n      con_info->connectiontype = GET;\n      probe_log(\"connection type set to GET for con_info=%p\", (void *) con_info);\n    }\n\n    *req_cls = (void *) con_info;\n\n    probe_log(\"stored *req_cls=%p, returning MHD_YES\", (void *) *req_cls);\n\n    return MHD_YES;\n  }\n\n  probe_log(\"existing req_cls found: %p\", (void *) *req_cls);\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    probe_log(\"handling GET: calling send_page(connection=%p, askpage=%p)\", (void *) connection, (void *) askpage);\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    probe_log(\"handling POST: con_info=%p answerstring=%p postprocessor=%p upload_data_size=%zu\",\n              (void *) con_info, (void *) con_info->answerstring, (void *) con_info->postprocessor,\n              (NULL == upload_data_size) ? 0 : *upload_data_size);\n\n    if (*upload_data_size != 0)\n    {\n      probe_log(\"calling MHD_post_process with upload_data_size=%zu\", *upload_data_size);\n\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n      {\n        probe_log(\"MHD_post_process failed for con_info=%p\", (void *) con_info);\n        return MHD_NO;\n      }\n\n      probe_log(\"MHD_post_process succeeded for con_info=%p, setting *upload_data_size=0 and returning MHD_YES\", (void *) con_info);\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n    {\n      probe_log(\"POST finished and answerstring present for con_info=%p: calling send_page(connection=%p, answerstring=%p)\",\n                (void *) con_info, (void *) connection, (void *) con_info->answerstring);\n      return send_page (connection, con_info->answerstring);\n    }\n    else\n    {\n      probe_log(\"POST finished but no answerstring for con_info=%p\", (void *) con_info);\n    }\n  }\n\n  probe_log(\"fallthrough: calling send_page(connection=%p, errorpage=%p)\", (void *) connection, (void *) errorpage);\n  return send_page (connection, errorpage);\n}\n"
}