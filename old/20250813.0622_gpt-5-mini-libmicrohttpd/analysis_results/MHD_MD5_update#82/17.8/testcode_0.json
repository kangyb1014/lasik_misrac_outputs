{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'data' (declared as const uint8_t *data) is modified by the statement 'data += MD5_BLOCK_SIZE;'. This changes the pointer parameter itself (not the object it points to), which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/661.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "static void\nmhd_probe_log(const char *event,\n              const struct Md5Ctx *ctx,\n              const uint8_t *data,\n              size_t length,\n              unsigned int bytes_have,\n              unsigned int bytes_left)\n{\n  FILE *f = fopen(\"/tmp/logs/661.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Print a concise snapshot of relevant state. */\n    fprintf(f, \"[%s] ctx=%p data=%p length=%zu ctx->count=%zu bytes_have=%u bytes_left=%u\\n\",\n            event,\n            (const void *) ctx,\n            (const void *) data,\n            length,\n            (size_t) ctx->count,\n            bytes_have,\n            bytes_left);\n    fclose(f);\n  }\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log entry state */\n  mhd_probe_log(\"entry\", ctx, data, length, 0u, 0u);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    mhd_probe_log(\"early_return_zero_length\", ctx, data, length, 0u, 0u);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log state after updating count */\n  mhd_probe_log(\"after_count_update\", ctx, data, length, bytes_have, 0u);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    /* Log that we entered the bytes_have != 0 branch */\n    mhd_probe_log(\"bytes_have_nonzero_enter\", ctx, data, length, bytes_have, bytes_left);\n\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log before copying into buffer */\n      mhd_probe_log(\"before_memcpy_combine\", ctx, data, length, bytes_have, bytes_left);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log pointer value before incrementing the parameter 'data' */\n      mhd_probe_log(\"before_data_increment_1\", ctx, data, length, bytes_have, bytes_left);\n\n      data += bytes_left; /* <-- This modifies the pointer parameter (evidence point) */\n\n      /* Log pointer value after incrementing the parameter 'data' */\n      mhd_probe_log(\"after_data_increment_1\", ctx, data, length - bytes_left, 0u, 0u);\n\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n\n      /* Log after processing the combined block */\n      mhd_probe_log(\"after_processing_combined_block\", ctx, data, length, bytes_have, 0u);\n    }\n    else\n    {\n      /* Not enough data to complete a block: log and leave */\n      mhd_probe_log(\"not_enough_to_complete_block\", ctx, data, length, bytes_have, bytes_left);\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log before processing a full block from 'data' */\n    mhd_probe_log(\"before_block_transform\", ctx, data, length, 0u, 0u);\n\n    md5_transform (ctx->H, data);\n\n    /* Log pointer value before incrementing in the loop */\n    mhd_probe_log(\"before_data_increment_block\", ctx, data, length, 0u, 0u);\n\n    data += MD5_BLOCK_SIZE; /* <-- This modifies the pointer parameter (evidence point) */\n\n    /* Log pointer value after incrementing in the loop */\n    mhd_probe_log(\"after_data_increment_block\", ctx, data, length - MD5_BLOCK_SIZE, 0u, 0u);\n\n    length -= MD5_BLOCK_SIZE;\n\n    /* Log after processing one block in the loop */\n    mhd_probe_log(\"after_block_processed_in_loop\", ctx, data, length, 0u, 0u);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    /* Log before copying remaining partial block */\n    mhd_probe_log(\"before_final_memcpy\", ctx, data, length, 0u, 0u);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n\n    /* Log after copying remaining partial block */\n    mhd_probe_log(\"after_final_memcpy\", ctx, data, length, bytes_have, 0u);\n  }\n\n  /* Log exit state */\n  mhd_probe_log(\"exit\", ctx, data, length, bytes_have, 0u);\n}\n"
}