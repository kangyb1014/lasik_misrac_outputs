{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'data += bytes_left;' modifies the pointer parameter 'data' (i.e. the pointer itself is changed). MISRA C 2023 Rule 17.8 prohibits modifying function parameters \u2014 while the object pointed to may be modified, the pointer parameter must not be changed. (Note: the code also later does 'data += MD5_BLOCK_SIZE;' which is the same violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/661.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\nPlease provide the modified MHD_MD5_update code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Helper logging function to capture control flow and state. */\nstatic void mhd_log_state(const char *label,\n                          const uint8_t *data_ptr,\n                          size_t length,\n                          unsigned int bytes_have,\n                          unsigned int bytes_left)\n{\n  FILE *f = fopen(\"/tmp/logs/661.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"%s: data=%p length=%zu bytes_have=%u bytes_left=%u\\n\",\n          label, (const void *) data_ptr, length, bytes_have, bytes_left);\n  if ((data_ptr != NULL) && (length > 0))\n  {\n    size_t n = (length < 16) ? length : 16;\n    fprintf(f, \"%s: first %zu bytes:\", label, n);\n    for (size_t i = 0; i < n; ++i)\n      fprintf(f, \" %02x\", data_ptr[i]);\n    fprintf(f, \"\\n\");\n  }\n  fclose(f);\n}\n\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Log on entry */\n  mhd_log_state(\"entry\", data, length, 0u, 0u);\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  /* Log after updating count */\n  mhd_log_state(\"after_count\", data, length, bytes_have, 0u);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log state just before memcpy and pointer modification */\n      mhd_log_state(\"pre_first_copy\", data, length, bytes_have, bytes_left);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      /* Log state immediately after memcpy, before pointer change */\n      mhd_log_state(\"post_first_copy_before_ptr_inc\", data, length, bytes_have, bytes_left);\n\n      /* This is where the pointer parameter is modified in the original code. */\n      data += bytes_left;\n\n      /* Log state immediately after pointer change (evidence of pointer modification) */\n      mhd_log_state(\"post_first_copy_after_ptr_inc\", data, length - bytes_left, bytes_have, bytes_left);\n\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  /* Log before processing full blocks in the loop */\n  mhd_log_state(\"before_full_blocks_loop\", data, length, bytes_have, 0u);\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Log each iteration: pointer before transform */\n    mhd_log_state(\"loop_before_transform\", data, length, bytes_have, MD5_BLOCK_SIZE);\n\n    md5_transform (ctx->H, data);\n\n    /* Log state just before pointer increment */\n    mhd_log_state(\"loop_after_transform_before_ptr_inc\", data, length, bytes_have, MD5_BLOCK_SIZE);\n\n    data += MD5_BLOCK_SIZE;\n\n    /* Log state immediately after pointer change (evidence of pointer modification) */\n    mhd_log_state(\"loop_after_transform_after_ptr_inc\", data, length - MD5_BLOCK_SIZE, bytes_have, MD5_BLOCK_SIZE);\n\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    mhd_log_state(\"pre_final_copy\", data, length, bytes_have, 0u);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    mhd_log_state(\"post_final_copy\", data, length, bytes_have, 0u);\n  }\n\n  /* Log on exit with final pointer/length status */\n  mhd_log_state(\"exit\", data, length, bytes_have, 0u);\n}\n"
}