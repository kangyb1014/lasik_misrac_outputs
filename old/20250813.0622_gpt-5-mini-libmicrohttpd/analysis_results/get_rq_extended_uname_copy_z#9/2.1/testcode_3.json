{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn toxdigitvalue (when MHD_FAVOR_SMALL_CODE is not defined) the switch is written over (unsigned char) c and explicitly lists case labels covering 0x00 through 0xFF; therefore the default: branch can never be taken. The statement mhd_assert(0); inside that default branch is unreachable code (the comment even says \"Should be unreachable\"). This constitutes a violation of MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_extended_uname_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_extended_uname_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_extended_uname_copy_z:\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\nPlease provide the modified get_rq_extended_uname_copy_z code.\n",
  "test_code": "#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <limits.h>\n#include <sys/types.h>\n\n/* Lightweight logging helper that appends human-readable probes to the\n   required file. Keeping it minimal to avoid changing program behaviour. */\nstatic void mhd_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void mhd_log_hex_snip(const char *tag, const char *data, size_t len, size_t max_print)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (NULL == f)\n        return;\n    fprintf(f, \"%s: len=%zu, data=\", tag, len);\n    size_t to_print = (len < max_print) ? len : max_print;\n    for (size_t i = 0; i < to_print; ++i)\n        fprintf(f, \"%02X\", (unsigned char) data[i]);\n    if (to_print < len)\n        fprintf(f, \"..(+%zu bytes)\", len - to_print);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  /* Entry probe */\n  mhd_log(\"ENTER get_rq_extended_uname_copy_z: uname_ext=%p uname_ext_len=%zu buf=%p buf_size=%zu\",\n          (const void *) uname_ext, uname_ext_len, (void *) buf, buf_size);\n  mhd_log_hex_snip(\"uname_ext_prefix_bytes\", uname_ext, uname_ext_len, 64);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    mhd_log(\"RETURN Too long input string: uname_ext_len=%zu > SSIZE_MAX=%d\", uname_ext_len, SSIZE_MAX);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    mhd_log(\"RETURN Required prefix missing: uname_ext_len=%zu < MHD_DAUTH_EXT_PARAM_MIN_LEN=%d\",\n            uname_ext_len, MHD_DAUTH_EXT_PARAM_MIN_LEN);\n    return -1; /* Required prefix is missing */\n  }\n\n  /* Log intent to call prefix equality check */\n  mhd_log(\"CALL MHD_str_equal_caseless_bin_n_: uname_ext_len=%zu prefix_len=%zu\",\n          uname_ext_len,\n          (size_t) MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX));\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_log(\"RETURN Prefix mismatch: uname_ext does not start with required prefix\");\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  mhd_log(\"PREFIX_OK: required prefix present\");\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n\n  size_t loop_count = 0;\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n\n    if (loop_count < 256)\n      mhd_log(\"LANG_TAG_CHAR idx=%zu chr=0x%02X (%c)\", r, (unsigned char) chr,\n              ((' ' <= chr && chr <= '~') ? chr : '.'));\n    else if (loop_count == 256)\n      mhd_log(\"LANG_TAG: more than 256 iterations - stopping detailed logs\");\n\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_log(\"RETURN Wrong char in language tag at idx=%zu chr=0x%02X\", r, (unsigned char) chr);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n    loop_count++;\n  }\n  if (r >= uname_ext_len)\n  {\n    mhd_log(\"RETURN The end of the language tag was not found: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n\n  mhd_log(\"CALL MHD_str_pct_decode_strict_n_: r=%zu remaining=%zu buf_size=%zu\",\n          r, (uname_ext_len - r), buf_size);\n  mhd_log_hex_snip(\"pct-encoded-input\", uname_ext + r, (uname_ext_len - r), 128);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n\n  mhd_log(\"RETURN FROM pct_decode: w=%zu (0 meaning failure), buf[0]=0x%02X\", w, (unsigned char) buf[0]);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_log(\"RETURN Broken percent encoding detected: w=0 remaining=%zu\", uname_ext_len - r);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n\n  mhd_log(\"EXIT OK: decoded_length=%zu final_buf=%p\", w, (void *) buf);\n  return (ssize_t) w;\n}\n"
}