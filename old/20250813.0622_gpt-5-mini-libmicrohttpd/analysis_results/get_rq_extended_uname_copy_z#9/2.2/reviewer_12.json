{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as ((void)0). Therefore the statement mhd_assert (sizeof (tmp1) >= (2 * digest_size)); expands to a no-op and has no effect at run-time. Removing that line would not change program behaviour, so in this build the assertion call is dead code (the checked expression has no side\u2011effects), violating MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n    if (f == NULL)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  mhd_probe_log(\"enter get_rq_extended_uname_copy_z: uname_ext=%p, uname_ext_len=%zu, buf=%p, buf_size=%zu\",\n                (const void *) uname_ext, uname_ext_len, (const void *) buf, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len) {\n    mhd_probe_log(\"early return: input too long: uname_ext_len=%zu, SSIZE_MAX=%zd\", uname_ext_len, (ssize_t) SSIZE_MAX);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len) {\n    mhd_probe_log(\"early return: missing required prefix: uname_ext_len=%zu, min=%zu\",\n                  uname_ext_len, (size_t) MHD_DAUTH_EXT_PARAM_MIN_LEN);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    mhd_probe_log(\"early return: prefix mismatch (caseless bin n)\");\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  mhd_probe_log(\"after prefix: r=%zu\", r);\n\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    mhd_probe_log(\"language-tag scan: r=%zu chr=0x%02x ('%c')\", r, (unsigned char) chr, ((' ' <= chr && chr <= '~') ? chr : '?'));\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      mhd_probe_log(\"early return: wrong char in language tag at r=%zu chr=0x%02x\", r, (unsigned char) chr);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len) {\n    mhd_probe_log(\"early return: end of language tag not found: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  mhd_probe_log(\"after language tag: r=%zu remaining=%zu\", r, uname_ext_len - r);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  mhd_probe_log(\"percent-decode result: w=%zu (decoded bytes), remaining_input=%zu\", w, uname_ext_len - r);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    mhd_probe_log(\"early return: broken percent encoding: w=%zu remaining=%zu\", w, uname_ext_len - r);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_probe_log(\"buffer terminated: buf[%zu]=0; about to assert SSIZE_MAX > w (SSIZE_MAX=%zd, w=%zu)\", w, (ssize_t) SSIZE_MAX, w);\n\n  /* The original assertion is preserved exactly as in the target code. */\n  mhd_assert (SSIZE_MAX > w);\n\n  /* Log after assertion to provide evidence whether the assertion call executed (even if it is a no-op in the build). */\n  mhd_probe_log(\"after mhd_assert: continuing to return w=%zu\", w);\n\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct under the stated assumptions. MISRA C 2023 Rule 2.2 forbids executed operations whose removal would not affect program behaviour. If, in the project build, mhd_assert is defined as ((void)0) and the checked expression (SSIZE_MAX > w) has no side\u2011effects, the mhd_assert(...) statement becomes an executed no\u2011op; removing that statement would not change program behaviour, so it meets the definition of dead code and thus violates Rule 2.2. The empty test log does not refute this (it only shows the function was not exercised during the test run). Note that the conclusion depends on the actual definition of mhd_assert in the build: if mhd_assert can produce side\u2011effects (e.g. logging, aborting) in some configurations then the statement would not be dead in those builds."
}