{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert macro is defined as ((void)0) in the provided project. Therefore the statement mhd_assert(buf_size >= buf_used); expands to a no-op expression-statement with no side effects. Removing that statement would not change program behaviour in this build configuration, so it constitutes dead code under MISRA C 2023 Rule 2.2. (If the macro is non-empty in some other build configurations, the assertion would not be dead in those builds; but given the provided definition the project contains dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_extended_uname_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/74.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_extended_uname_copy_z as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_extended_uname_copy_z:\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\nPlease provide the modified get_rq_extended_uname_copy_z code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <sys/types.h>\n#include <limits.h>\n\n/* Helper: append probe logs to /tmp/logs/74.txt */\nstatic void\nlog_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  /* Log entry and initial state */\n  log_probe(\"ENTER get_rq_extended_uname_copy_z: uname_ext=%p uname_ext_len=%zu buf=%p buf_size=%zu\",\n            (const void *) uname_ext, uname_ext_len, (const void *) buf, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len) {\n    log_probe(\"EARLY RETURN: input too long: SSIZE_MAX=%zu uname_ext_len=%zu\", (size_t) SSIZE_MAX, uname_ext_len);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len) {\n    log_probe(\"EARLY RETURN: missing required prefix: MHD_DAUTH_EXT_PARAM_MIN_LEN=%zu uname_ext_len=%zu\",\n              (size_t) MHD_DAUTH_EXT_PARAM_MIN_LEN, uname_ext_len);\n    return -1; /* Required prefix is missing */\n  }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n  {\n    log_probe(\"EARLY RETURN: prefix mismatch: uname_ext first bytes=%p prefix=%p\",\n              (const void *) uname_ext, (const void *) MHD_DAUTH_EXT_PARAM_PREFIX);\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  log_probe(\"AFTER PREFIX: r=%zu (prefix length)\", r);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      log_probe(\"EARLY RETURN: wrong char in language tag at r=%zu chr=%d ('%c')\",\n                r, (int) chr, (chr >= ' ' && chr <= '~') ? chr : '?');\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len) {\n    log_probe(\"EARLY RETURN: end of language tag not found: r=%zu uname_ext_len=%zu\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  log_probe(\"AFTER LANG TAG: r=%zu remaining_len=%zu\", r, (uname_ext_len > r) ? (uname_ext_len - r) : 0);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  log_probe(\"AFTER PCT DECODE: w=%zu buf_size=%zu\", w, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r)) {\n    log_probe(\"EARLY RETURN: broken percent encoding: w=0 remaining=%zu\", (uname_ext_len - r));\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n\n  /* Log the intended assertion condition and its evaluation so that a reviewer\n     can see whether the assertion would ever fire. This records the values\n     even if mhd_assert is compiled out (e.g. to ((void)0)). */\n  {\n    int assert_condition = (SSIZE_MAX > w);\n    log_probe(\"ASSERTION CHECK: SSIZE_MAX=%zu w=%zu condition=(SSIZE_MAX > w)=%d\",\n              (size_t) SSIZE_MAX, w, assert_condition);\n  }\n\n  mhd_assert (SSIZE_MAX > w);\n  log_probe(\"RETURN OK: w=%zu (cast to ssize_t) returning=%zd\", w, (ssize_t) w);\n  return (ssize_t) w;\n}\n"
}