{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The use of \"if (1)\" in digest_auth_check_all_inner creates an always-true conditional. The evaluation of the constant expression and the conditional itself are executed but have no effect on program behaviour \u2014 removing the \"if (1)\" (i.e. unwrapping its block) would not change behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (! f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void) fclose (f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  log_probe (\"enter get_rq_extended_uname_copy_z: uname_ext=%p uname_ext_len=%zu buf=%p buf_size=%zu\\n\",\n             (const void *) uname_ext, uname_ext_len, (const void *) buf, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n  {\n    log_probe (\"reject: input length %zu exceeds SSIZE_MAX (%zu)\\n\",\n               uname_ext_len, (size_t) SSIZE_MAX);\n    return -1; /* Too long input string */\n  }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n  {\n    log_probe (\"reject: input length %zu smaller than required min %zu\\n\",\n               uname_ext_len, (size_t) MHD_DAUTH_EXT_PARAM_MIN_LEN);\n    return -1; /* Required prefix is missing */\n  }\n\n  {\n    int prefix_ok = MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                                   MHD_STATICSTR_LEN_ ( \\\n                                                     MHD_DAUTH_EXT_PARAM_PREFIX));\n    log_probe (\"prefix check result: %d\\n\", prefix_ok);\n    if (! prefix_ok)\n    {\n      log_probe (\"reject: prefix mismatch (only UTF-8 supported)\\n\");\n      return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n    }\n  }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  log_probe (\"initial r (after prefix) = %zu\\n\", r);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    log_probe (\"language-tag char at r=%zu: '%c' (0x%02x)\\n\", r, (chr >= ' ' && chr <= '~') ? chr : '?', (unsigned char) chr);\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n    {\n      log_probe (\"reject: wrong char in language tag at r=%zu: 0x%02x\\n\", r, (unsigned char) chr);\n      return -1; /* Wrong char in language tag */\n    }\n    r++;\n  }\n  if (r >= uname_ext_len)\n  {\n    log_probe (\"reject: end of language tag not found (r=%zu uname_ext_len=%zu)\\n\", r, uname_ext_len);\n    return -1; /* The end of the language tag was not found */\n  }\n  r++; /* Advance to the next char */\n  log_probe (\"after skipping quote, r=%zu remaining_len=%zu\\n\", r, uname_ext_len - r);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  log_probe (\"percent-decode returned w=%zu (remaining input len=%zu)\\n\",\n             w, uname_ext_len - r);\n  if ((0 == w) && (0 != uname_ext_len - r))\n  {\n    log_probe (\"reject: broken percent encoding (w==0 but remaining input len=%zu)\\n\", uname_ext_len - r);\n    return -1; /* Broken percent encoding */\n  }\n  buf[w] = 0; /* Zero terminate the result */\n  log_probe (\"decoded uname: '%s' (length=%zu)\\n\", buf, w);\n  mhd_assert (SSIZE_MAX > w);\n  log_probe (\"exit get_rq_extended_uname_copy_z: returning %zd\\n\", (ssize_t) w);\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the supplied function. The shown get_rq_extended_uname_copy_z contains no \"if (1)\" or any other always-true conditional wrapper; every conditional, loop and assignment in the function can affect control flow or the returned result (length checks, prefix check, language-tag scan, percent-decode, zero-termination and return). Removing any of those statements would change behaviour, so they are not dead code under MISRA C 2023 Rule 2.2. The test harness producing no log simply means the function was not exercised at runtime (or the test did not reach it); that does not make the function dead code in the project.\n\n(If there really were an \"if (1)\" around a block that merely wraps code without changing semantics, the conditional expression and its evaluation would be unnecessary and could be considered dead code under Rule 2.2. However the agent pointed to a different function (digest_auth_check_all_inner) and did not show such an if(1) in the provided target; therefore the specific report about get_rq_extended_uname_copy_z violating Rule 2.2 is incorrect.)"
}