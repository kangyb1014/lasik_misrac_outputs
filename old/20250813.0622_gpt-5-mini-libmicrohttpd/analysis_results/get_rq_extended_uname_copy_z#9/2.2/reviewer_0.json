{
  "user_message": "An agent A claimed that the following get_rq_extended_uname_copy_z code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_extended_uname_copy_z.\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert(ignore) is defined as ((void)0), so every call like mhd_assert(...); becomes a no-op expression statement. Those statements are executed but have no effect \u2014 removing them would not change program behaviour. Examples: mhd_assert (SSIZE_MAX > w); in get_rq_extended_uname_copy_z and the many mhd_assert(...) calls in get_rq_uname and digest_auth_check_all_inner are therefore dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/74.txt\", \"a\");\n  if (!f)\n    {\n      /* Try to create directory then open again. If still failing, give up silently. */\n      (void) mkdir(\"/tmp/logs\", 0700);\n      f = fopen(\"/tmp/logs/74.txt\", \"a\");\n      if (!f)\n        return;\n    }\n  va_list ap;\n  va_start (ap, fmt);\n  (void) vfprintf (f, fmt, ap);\n  va_end (ap);\n  (void) fflush (f);\n  (void) fclose (f);\n}\n\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  mhd_log_probe (\"enter get_rq_extended_uname_copy_z: uname_ext_len=%zu, buf_size=%zu\\n\",\n                 uname_ext_len, buf_size);\n\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    {\n      mhd_log_probe (\"return -1: too long input string: uname_ext_len=%zu SSIZE_MAX=%zu\\n\",\n                     uname_ext_len, (size_t) SSIZE_MAX);\n      return -1; /* Too long input string */\n    }\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    {\n      mhd_log_probe (\"return -1: required prefix missing: uname_ext_len=%zu MHD_DAUTH_EXT_PARAM_MIN_LEN=%zu\\n\",\n                     uname_ext_len, (size_t) MHD_DAUTH_EXT_PARAM_MIN_LEN);\n      return -1; /* Required prefix is missing */\n    }\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    {\n      mhd_log_probe (\"return -1: prefix mismatch (UTF-8 requirement)\\n\");\n      return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n    }\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  mhd_log_probe (\"after prefix, start scanning language tag at r=%zu\\n\", r);\n\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n    {\n      const char chr = uname_ext[r];\n      if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n          (';' == chr) )\n        {\n          mhd_log_probe (\"return -1: wrong char in language tag at r=%zu char=0x%02x ('%c')\\n\",\n                         r, (unsigned char) chr, (chr >= ' ' && chr <= '~') ? chr : '?');\n          return -1; /* Wrong char in language tag */\n        }\n      r++;\n    }\n  if (r >= uname_ext_len)\n    {\n      mhd_log_probe (\"return -1: end of language tag not found: r=%zu uname_ext_len=%zu\\n\",\n                     r, uname_ext_len);\n      return -1; /* The end of the language tag was not found */\n    }\n  r++; /* Advance to the next char */\n  mhd_log_probe (\"language tag ended, data starts at r=%zu remaining=%zu\\n\",\n                 r, (uname_ext_len > r) ? (uname_ext_len - r) : 0);\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  mhd_log_probe (\"percent-decode returned w=%zu (requested input_len=%zu)\\n\",\n                 w, (uname_ext_len > r) ? (uname_ext_len - r) : 0);\n\n  if ((0 == w) && (0 != uname_ext_len - r))\n    {\n      mhd_log_probe (\"return -1: broken percent encoding: w=0 remaining=%zu\\n\",\n                     uname_ext_len - r);\n      return -1; /* Broken percent encoding */\n    }\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_log_probe (\"buffer zero-terminated at buf[%zu]=0\\n\", w);\n\n  /* Log the assertion check that is reported as a no-op (possible dead code).\n     We keep the original mhd_assert call to preserve logic; record the values\n     to allow reproduction/evidence that the assert is effectively ignored. */\n  mhd_log_probe (\"about to call mhd_assert(SSIZE_MAX > w): SSIZE_MAX=%lld w=%zu\\n\",\n                 (long long) SSIZE_MAX, w);\n\n  mhd_assert (SSIZE_MAX > w);\n\n  mhd_log_probe (\"returning (ssize_t) w=%zu\\n\", w);\n  return (ssize_t) w;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_extended_uname_copy_z. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. If, in the project configuration referenced, mhd_assert is defined as ((void)0) then each call mhd_assert(...); in the compiled code is an executed no-op expression statement with no side-effects. By the MISRA C 2023 definition quoted (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d) such statements are dead code. The fact that these calls are intended as assertions for other build configurations (e.g. enabled in debug) does not change the fact that in the given project configuration they are dead code. (The empty test log simply indicates the function may not have been exercised by the test run and is unrelated to the correctness of the dead-code classification.)"
}