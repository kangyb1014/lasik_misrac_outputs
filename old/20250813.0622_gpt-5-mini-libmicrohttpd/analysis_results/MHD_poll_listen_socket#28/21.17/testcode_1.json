{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemset uses (size_t)addrlen where addrlen was set via addrlen = (socklen_t) sizeof(addrstorage). On typical platforms sizeof(addrstorage) fits in socklen_t and the call is safe (memset size equals the object size). However if sizeof(addrstorage) cannot be represented in socklen_t (e.g. socklen_t is narrower than size_t on some exotic platform), the conversion to socklen_t is implementation-defined and may produce a negative or otherwise incorrect value; converting that back to size_t could yield a very large size, causing memset to access beyond &addrstorage and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll_listen_socket code that contains useful probe functions that print useful logs to a file \"/tmp/logs/231.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_poll_listen_socket as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_poll_listen_socket:\n```c\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    return MHD_YES;\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_YES;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    return MHD_NO;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    (void) MHD_accept_connection (daemon);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_poll_listen_socket code.\n",
  "test_code": "static enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n  FILE *log = NULL;\n\n  /* Open probe log early so we can record control flow and state. */\n  log = fopen(\"/tmp/logs/231.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTER MHD_poll_listen_socket: daemon=%p, may_block=%d\\n\", (void *) daemon, may_block);\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  if (log)\n    fprintf(log, \"About to memset p: &p=%p, sizeof(p)=%lu\\n\", (void *)&p, (unsigned long) sizeof (p));\n\n  memset (&p,\n          0,\n          sizeof (p));\n\n  if (log)\n    fprintf(log, \"After memset p: p[0].fd=%d, p[1].fd=%d\\n\", p[0].fd, p[1].fd);\n\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    if (log)\n      fprintf(log, \"Added listen_fd: ls=%d at poll_count=%u (poll_listen=%d)\\n\", ls, (unsigned) poll_count, poll_listen);\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    if (log)\n      fprintf(log, \"Added itc fd: fd=%d at poll_count=%u (poll_itc_idx=%d)\\n\", p[poll_count].fd, (unsigned) poll_count, poll_itc_idx);\n    poll_count++;\n  }\n\n  if (log)\n    fprintf(log, \"After setup: poll_count=%u, poll_listen=%d, poll_itc_idx=%d, daemon->options=0x%x, daemon->have_new=%d, daemon->shutdown=%d\\n\",\n            poll_count, poll_listen, poll_itc_idx, (unsigned) daemon->options, (int) daemon->have_new, (int) daemon->shutdown);\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count) {\n    if (log) {\n      fprintf(log, \"No fds to poll: returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n  if (log) {\n    /* Log the pollfd array contents up to poll_count */\n    for (unsigned int i = 0; i < poll_count; ++i)\n      fprintf(log, \"pollfd[%u]: fd=%d, events=0x%x, revents=0x%x\\n\", i, p[i].fd, p[i].events, p[i].revents);\n    fprintf(log, \"Calling MHD_sys_poll_ with timeout=%d\\n\", timeout);\n  }\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (log)\n      fprintf(log, \"MHD_sys_poll_ failed: err=%d, str=%s\\n\", err, MHD_socket_strerr_ (err));\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err)) {\n      if (log) {\n        fprintf(log, \"poll interrupted by EINTR: returning MHD_YES\\n\");\n        fclose(log);\n      }\n      return MHD_YES;\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    if (log) {\n      fprintf(log, \"poll failed unrecoverable: returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (log) {\n    for (unsigned int i = 0; i < poll_count; ++i)\n      fprintf(log, \"After poll - pollfd[%u]: fd=%d, events=0x%x, revents=0x%x\\n\", i, p[i].fd, p[i].events, p[i].revents);\n  }\n\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) ) {\n    if (log)\n      fprintf(log, \"ITC ready: index=%d, clearing ITC\\n\", poll_itc_idx);\n    MHD_itc_clear_ (daemon->itc);\n  }\n\n  /* handle shutdown */\n  if (daemon->shutdown) {\n    if (log) {\n      fprintf(log, \"Daemon in shutdown: returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Process externally added connection if any */\n  if (daemon->have_new) {\n    if (log)\n      fprintf(log, \"Processing externally added connections (have_new=1)\\n\");\n    new_connections_list_process_ (daemon);\n  }\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) ) {\n    if (log)\n      fprintf(log, \"Listen socket ready: poll_listen=%d, calling MHD_accept_connection\\n\", poll_listen);\n    (void) MHD_accept_connection (daemon);\n  }\n\n  if (log) {\n    fprintf(log, \"Exiting MHD_poll_listen_socket: returning MHD_YES\\n\");\n    fclose(log);\n  }\n  return MHD_YES;\n}\n"
}