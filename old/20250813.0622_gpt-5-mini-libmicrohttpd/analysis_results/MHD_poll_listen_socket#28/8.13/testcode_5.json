{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe rule would be violated if the error-string function or the logging API use non-const pointers for read-only strings. For example, if MHD_socket_strerr_ is declared as `char *MHD_socket_strerr_(int err)` (returning a non-const pointer to a read-only/static error message) or if MHD_DLOG takes a non-const `char *` for its format/argument strings, then pointers to these immutable strings are not const-qualified and Rule 8.13 is violated. If both MHD_socket_strerr_ and MHD_DLOG are correctly declared to use `const char *`, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll_listen_socket code that contains useful probe functions that print useful logs to a file \"/tmp/logs/227.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_poll_listen_socket as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_poll_listen_socket:\n```c\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    return MHD_YES;\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_YES;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    return MHD_NO;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    (void) MHD_accept_connection (daemon);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified MHD_poll_listen_socket code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper: writes human-readable trace to /tmp/logs/227.txt */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/227.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time (NULL);\n  struct tm *tm = localtime (&t);\n  if (tm)\n    fprintf (f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n             tm->tm_year + 1900,\n             tm->tm_mon + 1,\n             tm->tm_mday,\n             tm->tm_hour,\n             tm->tm_min,\n             tm->tm_sec);\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  /* Log entry and initial state */\n  mhd_probe_log (\"enter MHD_poll_listen_socket: daemon=%p, may_block=%d, listen_fd=%p, was_quiesced=%d, itc=%p, options=0x%08x\",\n                 (void *) daemon,\n                 may_block,\n                 (void *) (intptr_t) daemon->listen_fd,\n                 (int) daemon->was_quiesced,\n                 (void *) (intptr_t) daemon->itc,\n                 (unsigned) daemon->options);\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  /* Log pollfd table after setup */\n  for (unsigned int i = 0; i < poll_count; ++i)\n    mhd_probe_log (\"pollfd[%u]: fd=%d, events=0x%x, revents=0x%x\",\n                   i,\n                   p[i].fd,\n                   p[i].events,\n                   p[i].revents);\n  mhd_probe_log (\"poll_count=%u, poll_listen=%d, poll_itc_idx=%d\",\n                 poll_count,\n                 poll_listen,\n                 poll_itc_idx);\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n\n  mhd_probe_log (\"will call poll with timeout=%d\", timeout);\n\n  if (0 == poll_count)\n  {\n    mhd_probe_log (\"no fds to poll, returning MHD_YES\");\n    return MHD_YES;\n  }\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    mhd_probe_log (\"poll returned error, err=%d\", err);\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      mhd_probe_log (\"poll interrupted by signal (EINTR), returning MHD_YES\");\n      return MHD_YES;\n    }\n#ifdef HAVE_MESSAGES\n    {\n      /* Capture error string as const char * to avoid treating read-only strings as modifiable */\n      const char *errstr = MHD_socket_strerr_ (err);\n      if (NULL == errstr)\n        errstr = \"(null)\";\n      mhd_probe_log (\"poll failed: %s\", errstr);\n      MHD_DLOG (daemon,\n                _ (\"poll failed: %s\\n\"),\n                errstr);\n    }\n#else\n    /* If HAVE_MESSAGES is not defined, still log the numeric error for evidence */\n    mhd_probe_log (\"poll failed (no message subsystem): err=%d\", err);\n#endif\n    return MHD_NO;\n  }\n\n  /* Log results from poll */\n  for (unsigned int i = 0; i < poll_count; ++i)\n    mhd_probe_log (\"after poll: pollfd[%u]: fd=%d, events=0x%x, revents=0x%x\",\n                   i,\n                   p[i].fd,\n                   p[i].events,\n                   p[i].revents);\n\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n  {\n    mhd_probe_log (\"itc fd %d has POLLIN, clearing itc\", p[poll_itc_idx].fd);\n    MHD_itc_clear_ (daemon->itc);\n  }\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n  {\n    mhd_probe_log (\"daemon->shutdown is set, returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n  {\n    mhd_probe_log (\"daemon->have_new is set, calling new_connections_list_process_\");\n    new_connections_list_process_ (daemon);\n  }\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n  {\n    mhd_probe_log (\"listen fd %d has POLLIN, calling MHD_accept_connection\", p[poll_listen].fd);\n    (void) MHD_accept_connection (daemon);\n  }\n  mhd_probe_log (\"exiting MHD_poll_listen_socket with MHD_YES\");\n  return MHD_YES;\n}\n"
}