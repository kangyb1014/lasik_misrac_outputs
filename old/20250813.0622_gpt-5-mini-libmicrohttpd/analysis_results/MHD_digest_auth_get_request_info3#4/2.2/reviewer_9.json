{
  "user_message": "An agent A claimed that the following MHD_digest_auth_get_request_info3 code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_get_request_info3.\n```c\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n  }\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  return info;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement 'mhd_assert (0 != len);' expands to ((void)0) (mhd_assert is defined as ((void)0)) so it is a no-op statement that is executed but has no effect. Removing that statement would not change program behaviour, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If mhd_assert were defined to perform checks/side-effects in some builds, it would not be dead; in the provided project it is an empty macro.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log_state(const char *event,\n                                const void *params_ptr,\n                                const void *info_ptr,\n                                size_t unif_buf_size,\n                                size_t unif_buf_used,\n                                int uname_type)\n{\n  FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Try to create the directory if it does not exist and reopen. */\n    (void) mkdir(\"/tmp/logs\", 0777);\n    f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  }\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: params=%p info=%p unif_buf_size=%zu unif_buf_used=%zu uname_type=%d\\n\",\n            event, params_ptr, info_ptr, unif_buf_size, unif_buf_used, uname_type);\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  /* Log after we've obtained params */\n  mhd_probe_log_state(\"entry_after_get_params\", params, NULL, 0U, 0U, -1);\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  /* Log uname_type discovery */\n  mhd_probe_log_state(\"after_uname_type\", params, NULL, 0U, 0U, (int) uname_type);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n\n  /* Log before allocation */\n  mhd_probe_log_state(\"before_alloc\", params, NULL, unif_buf_size, 0U, (int) uname_type);\n\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  /* Log after allocation */\n  mhd_probe_log_state(\"after_alloc\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n\n  info->algo3 = params->algo3;\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  /* Log after handling username */\n  mhd_probe_log_state(\"after_uname_handling\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n\n    /* Log after copying opaque */\n    mhd_probe_log_state(\"after_copy_opaque\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n\n    /* Log after copying realm */\n    mhd_probe_log_state(\"after_copy_realm\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n  }\n\n  /* Log immediately before the assert that is reported as a no-op */\n  mhd_probe_log_state(\"before_mhd_assert\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  /* Log immediately after the assert to show that execution continued and state unchanged */\n  mhd_probe_log_state(\"after_mhd_assert\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  /* Final state log before returning */\n  mhd_probe_log_state(\"return\", params, info, unif_buf_size, unif_buf_used, (int) uname_type);\n\n  return info;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_get_request_info3. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct under the assumptions stated. If, in the project configuration being analysed, mhd_assert is defined as an empty macro that expands to ((void)0), then the statement\n  mhd_assert (unif_buf_size >= unif_buf_used);\nbecomes an expression statement that performs no action. According to the rule text, dead code is an operation that is executed but whose removal would not affect program behaviour. An expression statement that expands to (void)0 has no side effects and removing it would not change program behaviour, so it meets the definition of dead code and therefore violates MISRA C 2023 Rule 2.2.\n\nCaveats:\n- This conclusion depends on the actual macro definition used when the project is built. If some project build configurations define mhd_assert to perform checks or have observable side-effects, then in those configurations the statement is not dead. MISRA compliance is assessed for the project/build under consideration, so you must check the active definition of mhd_assert for the build being certified.\n- If the containing function is never executed in the delivered project, the assertion is not executed; note that unreachable code is a different concept (note 2) and would not be classed as dead code by the rule. The agent's test run not producing logs does not change the static fact that, when executed with the macro defined as ((void)0), the statement is a no-op and thus dead code.\n\nRecommendation: either remove the no-op assertion or ensure the project configuration documents and justifies it (or provide a configuration where the assertion is active), or mark the deviation from Rule 2.2 with appropriate justification per process."
}