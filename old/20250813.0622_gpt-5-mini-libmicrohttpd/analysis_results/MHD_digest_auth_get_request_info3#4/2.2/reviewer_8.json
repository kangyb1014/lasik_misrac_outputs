{
  "user_message": "An agent A claimed that the following MHD_digest_auth_get_request_info3 code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_get_request_info3.\n```c\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n  }\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  return info;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert macro is defined as ((void)0) so the statement mhd_assert(unif_buf_size >= unif_buf_used); expands to a no-op. That operation is executed but has no effect and its removal would not change program behaviour \u2014 it therefore constitutes dead code in this project configuration.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  mhd_log_probe(\"MHD_digest_auth_get_request_info3: entry connection=%p\", (void *)connection);\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n  {\n    mhd_log_probe(\"MHD_digest_auth_get_request_info3: params == NULL -> returning NULL\");\n    return NULL;\n  }\n\n  /* start computing buffer sizes */\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n  mhd_log_probe(\"uname_type=%d\", (int)uname_type);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n  mhd_log_probe(\"after get_rq_unames_size: unif_buf_size=%zu\", unif_buf_size);\n\n  if (NULL != params->opaque.value.str)\n  {\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n    mhd_log_probe(\"opaque present: len=%zu -> unif_buf_size=%zu\", params->opaque.value.len, unif_buf_size);\n  }\n  else\n  {\n    mhd_log_probe(\"opaque not present\");\n  }\n\n  if (NULL != params->realm.value.str)\n  {\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n    mhd_log_probe(\"realm present: len=%zu -> unif_buf_size=%zu\", params->realm.value.len, unif_buf_size);\n  }\n  else\n  {\n    mhd_log_probe(\"realm not present\");\n  }\n\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  mhd_log_probe(\"allocated info=%p (size request=%zu)\", (void *)info, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n  mhd_log_probe(\"algo3 set: %d\", (int)info->algo3);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n  {\n    size_t added = get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n    unif_buf_used += added;\n    mhd_log_probe(\"get_rq_uname added=%zu -> unif_buf_used=%zu\", added, unif_buf_used);\n  }\n  else\n  {\n    info->uname_type = uname_type;\n    mhd_log_probe(\"uname_type stored in info: %d\", (int)info->uname_type);\n  }\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    mhd_log_probe(\"copied opaque: opaque_len=%zu\", info->opaque_len);\n    unif_buf_used += info->opaque_len + 1;\n    mhd_log_probe(\"after opaque copy -> unif_buf_used=%zu\", unif_buf_used);\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    mhd_log_probe(\"copied realm: realm_len=%zu\", info->realm_len);\n    unif_buf_used += info->realm_len + 1;\n    mhd_log_probe(\"after realm copy -> unif_buf_used=%zu\", unif_buf_used);\n  }\n\n  /* Record sizes immediately before calling mhd_assert */\n  mhd_log_probe(\"before mhd_assert: unif_buf_size=%zu, unif_buf_used=%zu\", unif_buf_size, unif_buf_used);\n\n  /* Call the assertion as in the original code - keep behavior unchanged */\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  /* Record that execution continued after mhd_assert - this can be used as evidence\n     that the assertion macro does not abort the program in the current project config. */\n  mhd_log_probe(\"after mhd_assert: execution continued\");\n\n  info->qop = params->qop;\n  mhd_log_probe(\"qop set: %d\", (int)info->qop);\n\n  if (NULL != params->cnonce.value.str)\n  {\n    info->cnonce_len = params->cnonce.value.len;\n    mhd_log_probe(\"cnonce present: cnonce_len=%zu\", info->cnonce_len);\n  }\n  else\n  {\n    info->cnonce_len = 0;\n    mhd_log_probe(\"cnonce not present: cnonce_len=0\");\n  }\n\n  nc_res = get_rq_nc (params, &info->nc);\n  mhd_log_probe(\"get_rq_nc returned %d\", (int)nc_res);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n  {\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n    mhd_log_probe(\"nc invalid -> set to MHD_DIGEST_AUTH_INVALID_NC_VALUE\");\n  }\n\n  mhd_log_probe(\"MHD_digest_auth_get_request_info3: returning info=%p\", (void *)info);\n  return info;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_get_request_info3. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is sound provided the project actually defines mhd_assert as a no-op. MISRA C 2023 Rule 2.2 forbids dead code: any operation that is executed but whose removal would not affect program behaviour is dead code. If mhd_assert expands to ((void)0) (or an equivalent no-op) in the project build, the statement\n  mhd_assert (unif_buf_size >= unif_buf_used);\nperforms no observable action and removing that statement would not change program behaviour \u2014 therefore it meets the definition of dead code and is a Rule 2.2 violation.\n\nCaveat: whether there is a violation depends on the actual project configuration. If mhd_assert is defined to perform checks, logging or aborts in the project's build (i.e. it has observable effects), then the statement is not dead and there is no Rule 2.2 issue. To confirm the violation you must inspect the mhd_assert definition used in the project (and all build configurations that must comply with MISRA). Suggested remedies: give the assertion observable behaviour in the compliant build, remove the no-op assertion, or provide an explicit and documented justification/suppression consistent with your project's MISRA process."
}