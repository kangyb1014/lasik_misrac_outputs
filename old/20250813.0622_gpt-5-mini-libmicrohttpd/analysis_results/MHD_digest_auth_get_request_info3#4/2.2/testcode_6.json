{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn get_rq_uname(), the final else branch contains the statement mhd_assert(0);. In the provided project mhd_assert is defined as ((void)0), so this statement is a no-op that is executed when an unexpected uname_type is encountered. Because it performs no action, removing this statement would not change program behaviour, which makes it dead code and thus a violation of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_request_info3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_get_request_info3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_request_info3:\n```c\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n  }\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  return info;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_get_request_info3 code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe wrapper for get_rq_uname to capture parameters and control flow. */\nstatic size_t\nprobe_get_rq_uname (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type,\n                    struct MHD_DigestAuthUsernameInfo *uname_info,\n                    uint8_t *buf, size_t buf_sz)\n{\n  FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"probe_get_rq_uname: params=%p uname_type=%d uname_info=%p buf=%p buf_sz=%zu\\n\",\n            (void *) params, (int) uname_type, (void *) uname_info,\n            (void *) buf, buf_sz);\n    fclose(f);\n  }\n\n  /* Call the original function and log its return value. */\n  size_t res = get_rq_uname (params, uname_type, uname_info, buf, buf_sz);\n\n  f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"probe_get_rq_uname: returned %zu\\n\", res);\n    fclose(f);\n  }\n\n  return res;\n}\n\n/* Probe helper to log various intermediate state values */\nstatic void\nprobe_log_state_start (const struct MHD_RqDAuth *params)\n{\n  FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"MHD_digest_auth_get_request_info3: entry params=%p\\n\", (void *) params);\n    if (params != NULL)\n    {\n      fprintf(f, \"  opaque=%p opaque.len=%zu realm=%p realm.len=%zu qop=%d cnonce=%p cnonce.len=%zu\\n\",\n              (void *) params->opaque.value.str, params->opaque.value.len,\n              (void *) params->realm.value.str, params->realm.value.len,\n              (int) params->qop,\n              (void *) params->cnonce.value.str, params->cnonce.value.len);\n    }\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_mid (enum MHD_DigestAuthUsernameType uname_type,\n               size_t unif_buf_size, size_t unif_buf_used)\n{\n  FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"  uname_type=%d unif_buf_size=%zu unif_buf_used(before)=%zu\\n\",\n            (int) uname_type, unif_buf_size, unif_buf_used);\n    fclose(f);\n  }\n}\n\nstatic void\nprobe_log_end (struct MHD_DigestAuthInfo *info, enum MHD_GetRqNCResult nc_res)\n{\n  FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n  if (f != NULL)\n  {\n    fprintf(f, \"MHD_digest_auth_get_request_info3: exit info=%p algo3=%d uname_type=%d opaque=%p opaque_len=%zu realm=%p realm_len=%zu qop=%d cnonce_len=%zu nc_res=%d nc=%u\\n\",\n            (void *) info,\n            (int) info->algo3,\n            (int) info->uname_type,\n            (void *) info->opaque, info->opaque_len,\n            (void *) info->realm, info->realm_len,\n            (int) info->qop,\n            info->cnonce_len,\n            (int) nc_res,\n            (unsigned) info->nc);\n    fclose(f);\n  }\n}\n\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  probe_log_state_start (params);\n  if (NULL == params)\n    return NULL;\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n\n  probe_log_mid (uname_type, unif_buf_size, unif_buf_used);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n  {\n    /* Use probe wrapper so that inputs and return value of get_rq_uname are logged. */\n    size_t got = probe_get_rq_uname (params, uname_type,\n                                     (struct MHD_DigestAuthUsernameInfo *) info,\n                                     unif_buf_ptr + unif_buf_used,\n                                     unif_buf_size - unif_buf_used);\n    unif_buf_used += got;\n\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"  get_rq_uname taken, added %zu bytes, unif_buf_used=%zu\\n\", got, unif_buf_used);\n      fclose(f);\n    }\n  }\n  else\n  {\n    info->uname_type = uname_type;\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"  uname branch not taken, set info->uname_type=%d\\n\", (int) uname_type);\n      fclose(f);\n    }\n  }\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"  opaque processed, opaque_len=%zu unif_buf_used=%zu\\n\", info->opaque_len, unif_buf_used);\n      fclose(f);\n    }\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"  realm processed, realm_len=%zu unif_buf_used=%zu\\n\", info->realm_len, unif_buf_used);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  probe_log_end (info, nc_res);\n\n  return info;\n}\n"
}