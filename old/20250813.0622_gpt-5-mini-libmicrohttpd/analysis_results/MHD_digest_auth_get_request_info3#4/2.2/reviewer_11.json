{
  "user_message": "An agent A claimed that the following MHD_digest_auth_get_request_info3 code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_get_request_info3.\n```c\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  unif_buf_size = 0;\n\n  uname_type = get_rq_uname_type (params);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n\n  if (NULL != params->opaque.value.str)\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  if (NULL != params->realm.value.str)\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n  }\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  info->qop = params->qop;\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n\n  nc_res = get_rq_nc (params, &info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  return info;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call mhd_assert(buf_size >= buf_used); expands to ((void)0) (see provided definition #define mhd_assert(ignore) ((void)0)). As written this statement produces no observable effect; removing it would not change program behaviour. Therefore it is dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n_MHD_EXTERN struct MHD_DigestAuthInfo *\nMHD_digest_auth_get_request_info3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  struct MHD_DigestAuthInfo *info;\n  enum MHD_DigestAuthUsernameType uname_type;\n  size_t unif_buf_size;\n  uint8_t *unif_buf_ptr;\n  size_t unif_buf_used;\n  enum MHD_GetRqNCResult nc_res;\n\n  mhd_log_probe(\"ENTER: MHD_digest_auth_get_request_info3 connection=%p\", (void *)connection);\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  mhd_log_probe(\"params pointer=%p\", (void *)params);\n  if (NULL == params)\n  {\n    mhd_log_probe(\"EXIT: params == NULL -> returning NULL\");\n    return NULL;\n  }\n\n  unif_buf_size = 0;\n  mhd_log_probe(\"initial unif_buf_size=%zu\", unif_buf_size);\n\n  uname_type = get_rq_uname_type (params);\n  mhd_log_probe(\"uname_type=%d\", (int)uname_type);\n\n  unif_buf_size += get_rq_unames_size (params, uname_type);\n  mhd_log_probe(\"after get_rq_unames_size unif_buf_size=%zu\", unif_buf_size);\n\n  if (NULL != params->opaque.value.str)\n  {\n    mhd_log_probe(\"opaque present len=%zu\", params->opaque.value.len);\n    unif_buf_size += params->opaque.value.len + 1;  /* Add one for zero-termination */\n  }\n  else\n  {\n    mhd_log_probe(\"opaque not present\");\n  }\n\n  if (NULL != params->realm.value.str)\n  {\n    mhd_log_probe(\"realm present len=%zu\", params->realm.value.len);\n    unif_buf_size += params->realm.value.len + 1;   /* Add one for zero-termination */\n  }\n  else\n  {\n    mhd_log_probe(\"realm not present\");\n  }\n\n  info = (struct MHD_DigestAuthInfo *)\n         MHD_calloc_ (1, (sizeof(struct MHD_DigestAuthInfo)) + unif_buf_size);\n  mhd_log_probe(\"allocated info=%p unif_buf_size=%zu\", (void *)info, unif_buf_size);\n\n  unif_buf_ptr = (uint8_t *) (info + 1);\n  unif_buf_used = 0;\n\n  info->algo3 = params->algo3;\n  mhd_log_probe(\"info->algo3 set to %d\", (int)info->algo3);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type) )\n    unif_buf_used +=\n      get_rq_uname (params, uname_type,\n                    (struct MHD_DigestAuthUsernameInfo *) info,\n                    unif_buf_ptr + unif_buf_used,\n                    unif_buf_size - unif_buf_used);\n  else\n    info->uname_type = uname_type;\n\n  mhd_log_probe(\"after uname handling unif_buf_used=%zu info->uname_type=%d\",\n                unif_buf_used, (int)info->uname_type);\n\n  if (NULL != params->opaque.value.str)\n  {\n    info->opaque = (char *) (unif_buf_ptr + unif_buf_used);\n    info->opaque_len = get_rq_param_unquoted_copy_z (&params->opaque,\n                                                     info->opaque);\n    unif_buf_used += info->opaque_len + 1;\n    mhd_log_probe(\"copied opaque -> info->opaque=%p info->opaque_len=%zu\",\n                  (void *)info->opaque, info->opaque_len);\n  }\n  if (NULL != params->realm.value.str)\n  {\n    info->realm = (char *) (unif_buf_ptr + unif_buf_used);\n    info->realm_len = get_rq_param_unquoted_copy_z (&params->realm,\n                                                    info->realm);\n    unif_buf_used += info->realm_len + 1;\n    mhd_log_probe(\"copied realm  -> info->realm=%p info->realm_len=%zu\",\n                  (void *)info->realm, info->realm_len);\n  }\n\n  /* Log state just before the assert site to capture the violation scenario */\n  mhd_log_probe(\"BEFORE mhd_assert: unif_buf_size=%zu unif_buf_used=%zu info=%p\",\n                unif_buf_size, unif_buf_used, (void *)info);\n\n  mhd_assert (unif_buf_size >= unif_buf_used);\n\n  /* Log immediately after the assert call to show it did not alter state */\n  mhd_log_probe(\"AFTER mhd_assert: unif_buf_size=%zu unif_buf_used=%zu info=%p\",\n                unif_buf_size, unif_buf_used, (void *)info);\n\n  info->qop = params->qop;\n  mhd_log_probe(\"info->qop set to %d\", (int)info->qop);\n\n  if (NULL != params->cnonce.value.str)\n    info->cnonce_len = params->cnonce.value.len;\n  else\n    info->cnonce_len = 0;\n  mhd_log_probe(\"info->cnonce_len=%zu\", info->cnonce_len);\n\n  nc_res = get_rq_nc (params, &info->nc);\n  mhd_log_probe(\"get_rq_nc returned %d info->nc=%u\", (int)nc_res, (unsigned)info->nc);\n  if (MHD_GET_RQ_NC_VALID != nc_res)\n    info->nc = MHD_DIGEST_AUTH_INVALID_NC_VALUE;\n\n  mhd_log_probe(\"EXIT: returning info=%p\", (void *)info);\n  return info;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_digest_auth_get_request_info3. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s observation (that mhd_assert expands to ((void)0) and thus produces no observable effect) is correct as a description of the expansion, but the conclusion that this necessarily constitutes a MISRA C 2023 Rule 2.2 violation is not justified from the information given. Rule 2.2 forbids dead code in the project \u2014 i.e. operations that are executed yet whose removal would not affect program behaviour in the project configuration being assessed. Whether the assert call is \u201cdead\u201d therefore depends on the project build/configuration used for the MISRA assessment: \n\n- If the project (the configuration that is being certified against MISRA) defines mhd_assert as ((void)0) everywhere, then every occurrence of mhd_assert in that project is a no\u2011op whose removal would not change behaviour, and those calls would meet the definition of dead code under Rule 2.2. In that case A\u2019s report would be correct. \n\n- If the project uses alternate builds/configurations (for example, a debug configuration where mhd_assert expands to a runtime check or logging), then mhd_assert is not dead across the project as a whole; it is a conditional diagnostic that can have observable effect in some configurations, and therefore cannot be declared dead for the project. In that case A\u2019s report is not correct. \n\nThe provided test instrumentation showing no log output does not establish either way (it only shows the test didn\u2019t exercise the function). Conclusion: the claim that the code violates MISRA Rule 2.2 cannot be accepted unconditionally. Without evidence that the project being assessed always defines mhd_assert as a no\u2011op, the report is not correct. Recommended actions: (a) clarify the assertion macro definition used for the certified build, (b) if it is always ((void)0) and you want to be MISRA\u2011compliant, remove the redundant assert statements or justify a deviation, or (c) enable/assert implementation only in configurations where diagnostics are required."
}