{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the result of GetProcAddress (an object/data pointer) to a function pointer via an intermediate (void*) cast: (GNSI_PTR) (void *) GetProcAddress(...). Converting between object pointers and function pointers is not defined by ISO C and relies on compiler-specific behavior/extension (a non\u2011portable language extension). This use violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_special_api_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/296.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_special_api_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_special_api_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    /* HP-UX things */\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    /* VxWorks */\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    /* Native W32 */\n    HMODULE k32hndl;\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    if (NULL != k32hndl)\n    {\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      GNSI_PTR ptrGetNativeSystemInfo;\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n          ret = -1; /* Overflow */\n      }\n    }\n    if (NULL != k32hndl)\n      FreeLibrary (k32hndl);\n  }\n  if (0 >= ret)\n  {\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n      ret = -1; /* Overflow */\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_special_api_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append messages to /tmp/logs/296.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/296.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic int\nmhd_tool_get_sys_cpu_count_special_api_ (void)\n{\n  int ret = -1;\n#ifdef HAVE_PSTAT_GETDYNAMIC\n  if (0 >= ret)\n  {\n    /* HP-UX things */\n    struct pst_dynamic psd_data;\n    memset ((void *) &psd_data, 0, sizeof (psd_data));\n    if (1 == pstat_getdynamic (&psd_data, sizeof (psd_data), (size_t) 1, 0))\n    {\n      if (0 < psd_data.psd_proc_cnt)\n        ret = (int) psd_data.psd_proc_cnt;\n    }\n  }\n#endif /* HAVE_PSTAT_GETDYNAMIC */\n#ifdef HAVE_VXCPUENABLEDGET\n  if (0 >= ret)\n  {\n    /* VxWorks */\n    cpuset_t enb_set;\n    enb_set = vxCpuEnabledGet ();\n    /* Count set bits */\n    for (ret = 0; 0 != enb_set; enb_set &= enb_set - 1)\n      ++ret;\n  }\n#endif /* HAVE_VXCPUENABLEDGET */\n#if defined(_WIN32) && ! defined (__CYGWIN__)\n  if (0 >= ret)\n  {\n    /* Native W32 */\n    HMODULE k32hndl;\n    log_probe (\"Windows branch entered, initial ret=%d\", ret);\n    k32hndl = LoadLibraryA (\"kernel32.dll\");\n    log_probe (\"LoadLibraryA returned k32hndl=%p\", (void *) k32hndl);\n    if (NULL != k32hndl)\n    {\n      typedef DWORD (WINAPI *GAPC_PTR)(WORD GroupNumber);\n      GAPC_PTR ptrGetActiveProcessorCount;\n      /* Available on W7 or later */\n      log_probe (\"Calling GetProcAddress('GetActiveProcessorCount')\");\n      FARPROC fp_ga = GetProcAddress (k32hndl, \"GetActiveProcessorCount\");\n      log_probe (\"GetProcAddress('GetActiveProcessorCount') returned %s\",\n                 (NULL == fp_ga) ? \"NULL\" : \"non-NULL\");\n      /* keep original cast sequence to preserve logic */\n      ptrGetActiveProcessorCount =\n        (GAPC_PTR) (void *) fp_ga;\n      log_probe (\"Performed cast: (GAPC_PTR) (void *) GetProcAddress(...) -> %s\",\n                 (NULL == ptrGetActiveProcessorCount) ? \"NULL\" : \"non-NULL\");\n      if (NULL != ptrGetActiveProcessorCount)\n      {\n        DWORD res;\n        res = ptrGetActiveProcessorCount (ALL_PROCESSOR_GROUPS);\n        log_probe (\"GetActiveProcessorCount returned res=%u\", (unsigned) res);\n        ret = (int) res;\n        if (res != (DWORD) ret)\n        {\n          ret = -1; /* Overflow */\n          log_probe (\"Overflow detected converting res to int, res=%u\", (unsigned) res);\n        }\n      }\n    }\n    if ((0 >= ret) && (NULL != k32hndl))\n    {\n      typedef void (WINAPI *GNSI_PTR)(SYSTEM_INFO *pSysInfo);\n      GNSI_PTR ptrGetNativeSystemInfo;\n      /* May give incorrect (low) result on versions from W7 to W11\n         when more then 64 CPUs are available */\n      log_probe (\"Calling GetProcAddress('GetNativeSystemInfo')\");\n      FARPROC fp_gnsi = GetProcAddress (k32hndl, \"GetNativeSystemInfo\");\n      log_probe (\"GetProcAddress('GetNativeSystemInfo') returned %s\",\n                 (NULL == fp_gnsi) ? \"NULL\" : \"non-NULL\");\n      /* Keep the original cast that is the subject of the reported issue */\n      ptrGetNativeSystemInfo =\n        (GNSI_PTR) (void *) fp_gnsi;\n      log_probe (\"Performed cast: (GNSI_PTR) (void *) GetProcAddress(...) -> %s\",\n                 (NULL == ptrGetNativeSystemInfo) ? \"NULL\" : \"non-NULL\");\n      if (NULL != ptrGetNativeSystemInfo)\n      {\n        SYSTEM_INFO sysInfo;\n\n        memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n        ptrGetNativeSystemInfo (&sysInfo);\n        log_probe (\"GetNativeSystemInfo filled dwNumberOfProcessors=%u\",\n                   (unsigned) sysInfo.dwNumberOfProcessors);\n        ret = (int) sysInfo.dwNumberOfProcessors;\n        if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n        {\n          ret = -1; /* Overflow */\n          log_probe (\"Overflow detected converting dwNumberOfProcessors to int, dw=%u\",\n                     (unsigned) sysInfo.dwNumberOfProcessors);\n        }\n      }\n    }\n    if (NULL != k32hndl)\n    {\n      FreeLibrary (k32hndl);\n      log_probe (\"Freed kernel32.dll handle\");\n    }\n  }\n  if (0 >= ret)\n  {\n    /* May give incorrect (low) result on versions from W7 to W11\n       when more then 64 CPUs are available */\n    SYSTEM_INFO sysInfo;\n    memset ((void *) &sysInfo, 0, sizeof (sysInfo));\n    GetSystemInfo (&sysInfo);\n    log_probe (\"GetSystemInfo returned dwNumberOfProcessors=%u\",\n               (unsigned) sysInfo.dwNumberOfProcessors);\n    ret = (int) sysInfo.dwNumberOfProcessors;\n    if (sysInfo.dwNumberOfProcessors != (DWORD) ret)\n    {\n      ret = -1; /* Overflow */\n      log_probe (\"Overflow detected converting GetSystemInfo dwNumberOfProcessors to int, dw=%u\",\n                 (unsigned) sysInfo.dwNumberOfProcessors);\n    }\n  }\n#endif /* _WIN32 && ! __CYGWIN__ */\n  if (0 >= ret)\n    return -1;\n  log_probe (\"Returning final cpu count ret=%d\", ret);\n  return ret;\n}\n"
}