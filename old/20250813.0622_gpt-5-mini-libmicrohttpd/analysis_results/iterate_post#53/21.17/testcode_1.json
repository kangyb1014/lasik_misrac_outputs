{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the POST data buffer 'data' is not NUL-terminated, the test (size > 0 && size <= MAXNAMESIZE) still permits acceptance. Later snprintf(..., GREETINGPAGE, data) uses %s which scans until a NUL; therefore snprintf can read past the 'size' bytes of the POST data and access memory beyond the object. Example: an input of exactly MAXNAMESIZE non-NUL bytes with size == MAXNAMESIZE passes the check but causes snprintf to read out-of-bounds. This constitutes an out-of-bounds access by a string-handling operation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "static enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Probe/logging helper: append a single line to the log file. Keep it\n     simple to avoid introducing dependencies. */\n  {\n    FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n    if (lf)\n    {\n      fprintf(lf, \"iterate_post enter: con_info=%p key=%p\\n\", (void *)con_info, (void *)key);\n      if (key)\n        fprintf(lf, \"  key=\" \"%s\" \"\\n\", key);\n      fprintf(lf, \"  data_ptr=%p size=%zu off=%llu\\n\", (void *)data, size, (unsigned long long)off);\n      fclose(lf);\n    }\n  }\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    /* Log that we matched the key and the size check about to run */\n    {\n      FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n      if (lf)\n      {\n        fprintf(lf, \"key == \\\"name\\\" matched. size=%zu MAXNAMESIZE=%d\\n\", size, MAXNAMESIZE);\n        fclose(lf);\n      }\n    }\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      /* Before proceeding, probe the POST data buffer for an in-range NUL.\n         We must not read beyond 'size' bytes. */\n      size_t nul_index = (size_t)-1;\n      size_t inspect = size;\n      if (inspect > 1024) /* avoid extremely large logging */\n        inspect = 1024;\n      for (size_t i = 0; i < inspect; ++i)\n      {\n        if (data[i] == '\\0')\n        {\n          nul_index = i;\n          break;\n        }\n      }\n\n      /* Write detailed information to the log file. This will show whether\n         the POST data contains a NUL within the provided 'size' bytes or\n         not (the core of the reported violation scenario). */\n      {\n        FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n        if (lf)\n        {\n          if (nul_index != (size_t)-1)\n            fprintf(lf, \"  NUL found at index %zu within first %zu bytes\\n\", nul_index, inspect);\n          else\n            fprintf(lf, \"  No NUL found within first %zu bytes (reported size=%zu)\\n\", inspect, size);\n\n          /* Print a truncated hex/printable dump of the first bytes of data\n             (only up to 'inspect' bytes). This helps reproduce the input. */\n          fprintf(lf, \"  data dump (up to %zu bytes):\\n    \", inspect);\n          for (size_t i = 0; i < inspect; ++i)\n          {\n            unsigned char c = (unsigned char)data[i];\n            fprintf(lf, \"%02X\", c);\n            if ((i & 0xF) == 0xF && i + 1 < inspect)\n              fprintf(lf, \"\\n    \");\n            else if (i + 1 < inspect)\n              fprintf(lf, \" \");\n          }\n          fprintf(lf, \"\\n\");\n          fclose(lf);\n        }\n      }\n\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      /* Log just before the snprintf call so we can see if data lacked a NUL\n         within the provided 'size' bytes (which may cause snprintf to read\n         out-of-bounds). Do not attempt to read beyond 'size' bytes here. */\n      {\n        FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n        if (lf)\n        {\n          fprintf(lf, \"  allocated answerstring=%p MAXANSWERSIZE=%d\\n\", (void *)answerstring, MAXANSWERSIZE);\n          if (nul_index == (size_t)-1)\n            fprintf(lf, \"  WARNING: input data not NUL-terminated within reported size=%zu; snprintf with %%s may read out-of-bounds.\\n\", size);\n          else\n            fprintf(lf, \"  input appears NUL-terminated within reported size at %zu; proceeding.\\n\", nul_index);\n          fprintf(lf, \"  calling snprintf(answerstring, MAXANSWERSIZE, GREETINGPAGE, data)\\n\");\n          fclose(lf);\n        }\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      /* Log completion of snprintf and pointer assignment. Avoid inspecting\n         answerstring contents to prevent reading memory that snprintf may\n         have read/written in an undefined manner if there was a violation. */\n      {\n        FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n        if (lf)\n        {\n          fprintf(lf, \"  snprintf returned; answerstring=%p assigned to con_info\\n\", (void *)answerstring);\n          fclose(lf);\n        }\n      }\n    }\n    else\n    {\n      /* Log why the input was rejected. */\n      FILE *lf = fopen(\"/tmp/logs/431.txt\", \"a\");\n      if (lf)\n      {\n        if (size == 0)\n          fprintf(lf, \"  rejected: size == 0\\n\");\n        else if (size > MAXNAMESIZE)\n          fprintf(lf, \"  rejected: size (%zu) > MAXNAMESIZE (%d)\\n\", size, MAXNAMESIZE);\n        else\n          fprintf(lf, \"  rejected: unknown reason; size=%zu\\n\", size);\n        fclose(lf);\n      }\n\n      con_info->answerstring = NULL;\n    }\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n"
}