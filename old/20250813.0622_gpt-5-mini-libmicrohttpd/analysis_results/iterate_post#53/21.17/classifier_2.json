{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function iterate_post:\n#define MAXNAMESIZE 20\n...\n#define MAXANSWERSIZE 512\n...\n#define GREETINGPAGE \"<html><body><h1>Welcome, %s!</center></h1></body></html>\"\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nanswerstring = malloc (MAXANSWERSIZE);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The malloc itself does not call any of the <string.h> functions and therefore the single fragment answerstring = malloc(MAXANSWERSIZE); does not, by itself, violate MISRA C 2023 Rule 21.17. However, a concrete violation scenario exists in the surrounding code: snprintf(answerstring, MAXANSWERSIZE, GREETINGPAGE, data); uses the %s format to read from data which is a POST data chunk that may not be NUL-terminated. If data is not NUL-terminated (size <= MAXNAMESIZE only limits the chunk length, it does not guarantee termination), snprintf will read past the bounds of the object referenced by data (out\u2011of\u2011bounds read) and may also cause answerstring to be overrun if no upper limit on the string length is enforced. That out\u2011of\u2011bounds access would violate the intent of Rule 21.17. Suggested mitigation: ensure data is NUL-terminated (e.g., copy up to size bytes into a local buffer and append '\\0') and use a bounded print (or explicitly limit the number of characters inserted) so snprintf cannot read or write beyond object bounds."
}