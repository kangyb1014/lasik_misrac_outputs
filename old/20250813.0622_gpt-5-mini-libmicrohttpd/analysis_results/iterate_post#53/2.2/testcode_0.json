{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) kind;' is an executed no-op used solely to silence an unused-parameter warning. Removing it does not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2 (and the same applies to the similar '(void) filename;' etc. lines).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Minimal stand-ins so this snippet compiles in isolation. */\nstatic const size_t MAXNAMESIZE = 128U;\nstatic const size_t MAXANSWERSIZE = 512U;\nstatic const char GREETINGPAGE[] = \"Hello %s\";\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ValueKind { MHD_KIND_UNUSED = 0 };\n\nstruct connection_info_struct\n{\n  char *answerstring;\n};\n\n/* Logging helpers that append to /tmp/logs/426.txt. These are non-intrusive\n   probes: they do not alter iterate_post logic (except for the side-effect of\n   logging) and they allow reproducing the control flow/state for the reported\n   violation scenario. */\nstatic void log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (!f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void probe_param_noop_executed(const char *param_name)\n{\n  /* Record that the explicit no-op cast statement for the parameter was\n     reached. This provides runtime evidence that lines like '(void) kind;'\n     executed, which is the subject of the reported MISRA Rule 2.2 issue. */\n  log_append(\"probe: executed no-op for parameter '%s'\", param_name);\n}\n\nstatic void probe_entry(const char *key, const char *filename,\n                        const char *content_type, const char *transfer_encoding,\n                        const char *data, uint64_t off, size_t size,\n                        int kind_value)\n{\n  log_append(\"iterate_post entry: key='%s', filename='%s', content_type='%s', transfer_encoding='%s', data_ptr=%p, off=%\" PRIu64 \", size=%zu, kind=%d\",\n             key ? key : \"(null)\", filename ? filename : \"(null)\",\n             content_type ? content_type : \"(null)\",\n             transfer_encoding ? transfer_encoding : \"(null)\", (void *) data,\n             off, size, kind_value);\n}\n\n/* Modified iterate_post with probes inserted. Original logic is preserved. */\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* Log entry and parameter state. The log shows that these parameters are\n     present at runtime and provides a pointer/value snapshot for reproducing\n     the scenario. */\n  probe_entry(key, filename, content_type, transfer_encoding, data, off, size, (int) kind);\n\n  /* The original code contained explicit no-op casts to silence unused\n     parameter warnings. We keep them here (so the exact source lines that\n     were reported remain present) and record that each such no-op statement\n     was reached. This provides runtime evidence that the no-op statements\n     executed but did not affect program behaviour. */\n  (void) kind;               /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"kind\");\n\n  (void) filename;           /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"filename\");\n\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"content_type\");\n\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"transfer_encoding\");\n\n  (void) off;                /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"off\");\n\n  /* Record which parameters are actually used by the control flow below. */\n  log_append(\"probe: parameters used by logic: key, data, size\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        log_append(\"probe: malloc failed allocating answerstring\");\n        return MHD_NO;\n      }\n\n      /* Preserve original behavior: create the answer string using GREETINGPAGE. */\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      log_append(\"probe: created answerstring at %p, content='%s'\", (void *) answerstring, answerstring);\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      log_append(\"probe: size out of range (%zu); answerstring set to NULL\", size);\n    }\n\n    log_append(\"iterate_post: returning MHD_NO (handled key='name')\");\n    return MHD_NO;\n  }\n\n  log_append(\"iterate_post: returning MHD_YES (key not 'name')\");\n  return MHD_YES;\n}\n"
}