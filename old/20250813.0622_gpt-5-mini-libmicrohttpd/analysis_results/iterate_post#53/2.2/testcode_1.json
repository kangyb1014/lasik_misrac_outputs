{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void) filename;' is a no-op executed only to suppress an unused-parameter compiler warning. Removing this statement does not change the program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "static void iterate_post_probe(const char *stage, const char *key, const char *filename, const char *content_type, const char *transfer_encoding, uint64_t off, size_t size, const char *data, int kind)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"[probe] stage=%s kind=%d key=%s filename=%p content_type=%s transfer_encoding=%s off=%llu size=%zu data=%p\\n\",\n            stage,\n            kind,\n            key ? key : \"(null)\",\n            (void *) filename,\n            content_type ? content_type : \"(null)\",\n            transfer_encoding ? transfer_encoding : \"(null)\",\n            (unsigned long long) off,\n            size,\n            (void *) data);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* Log entry with the incoming parameter values. This uses the parameters\n     so that the log shows their runtime values; afterwards we still execute\n     the original \"(void) ...;\" statements which are no-ops. */\n  iterate_post_probe(\"entry\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n\n  (void) kind;               /* Unused. Silent compiler warning. */\n\n  /* Capture filename pointer before and after the explicit void cast to\n     demonstrate that the cast does not change state at runtime (it is a\n     no-op). */\n  const void *filename_before = (const void *) filename;\n  (void) filename;           /* Unused. Silent compiler warning. */\n  const void *filename_after = (const void *) filename;\n  {\n    FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"[probe] filename_before=%p filename_after=%p equal=%s\\n\",\n              filename_before,\n              filename_after,\n              (filename_before == filename_after) ? \"true\" : \"false\");\n      fclose(f);\n    }\n  }\n\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    iterate_post_probe(\"branch:name_enter\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        iterate_post_probe(\"malloc_failed\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n        return MHD_NO;\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      iterate_post_probe(\"name_handled_allocated\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      iterate_post_probe(\"name_handled_null\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n    }\n\n    iterate_post_probe(\"return_MHD_NO\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n    return MHD_NO;\n  }\n\n  iterate_post_probe(\"return_MHD_YES\", key, filename, content_type, transfer_encoding, off, size, data, (int) kind);\n  return MHD_YES;\n}\n"
}