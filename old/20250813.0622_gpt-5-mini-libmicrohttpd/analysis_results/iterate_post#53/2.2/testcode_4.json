{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) off;' is an executed no-op whose only purpose is to silence an unused-parameter warning. Removing that statement does not change the program's behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe function: append a concise log entry to /tmp/logs/426.txt.\n   Keeps side effects minimal and does not alter the original logic. */\nstatic void iterate_post_log(const char *stage,\n                             const char *key,\n                             const char *filename,\n                             uint64_t off,\n                             size_t size,\n                             const char *data)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (f)\n  {\n    /* Log stage, key, filename, offset and size. */\n    fprintf(f, \"[iterate_post] %s: key=\\\"%s\\\" filename=\\\"%s\\\" off=%llu size=%zu\\n\",\n            stage,\n            key ? key : \"(null)\",\n            filename ? filename : \"(null)\",\n            (unsigned long long) off,\n            size);\n\n    /* Log a short preview of data if present (first up to 64 bytes). */\n    if (data != NULL && size > 0)\n    {\n      size_t preview = size > 64 ? 64 : size;\n      fprintf(f, \"[iterate_post] %s: data_preview(%zu): '\", stage, preview);\n      fwrite(data, 1, preview, f);\n      if (preview < size)\n        fprintf(f, \"...'\");\n      else\n        fprintf(f, \"'\\n\");\n    }\n\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log that we have executed the casts to void (no-ops) and capture state.\n     This log entry gives reproducible evidence that the '(void) off;' statement\n     was reached and executed in normal control flow. */\n  iterate_post_log(\"after_voids\", key, filename, off, size, data);\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    iterate_post_log(\"branch_key_is_name_enter\", key, filename, off, size, data);\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        iterate_post_log(\"alloc_failed\", key, filename, off, size, data);\n        return MHD_NO;\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n\n      /* Log allocation success and a short preview of the generated answer. */\n      iterate_post_log(\"alloc_and_snprintf_done\", key, filename, off, size, answerstring);\n\n      con_info->answerstring = answerstring;\n    }\n    else\n    {\n      iterate_post_log(\"size_out_of_range\", key, filename, off, size, data);\n      con_info->answerstring = NULL;\n    }\n\n    iterate_post_log(\"return_MHD_NO\", key, filename, off, size, data);\n    return MHD_NO;\n  }\n\n  iterate_post_log(\"return_MHD_YES\", key, filename, off, size, data);\n  return MHD_YES;\n}\n"
}