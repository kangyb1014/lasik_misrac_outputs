{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement '(void) transfer_encoding;' is an executed no-op whose removal would not change program behaviour. It exists solely to silence an \"unused parameter\" warning, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of iterate_post as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified iterate_post code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/426.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* Log entry and a few key parameters (do NOT reference transfer_encoding value) */\n  probe_log (\"iterate_post ENTRY: key=\\\"%s\\\", data_ptr=%p, size=%zu, off=%\" PRIu64,\n             key ? key : \"(null)\", (void *) data, size, off);\n\n  (void) kind;               /* Unused. Silent compiler warning. */\n  probe_log (\"executed (void) kind;\");\n  (void) filename;           /* Unused. Silent compiler warning. */\n  probe_log (\"executed (void) filename;\");\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  probe_log (\"executed (void) content_type;\");\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  /* Record that the no-op cast for transfer_encoding was executed (no access to its value). */\n  probe_log (\"executed (void) transfer_encoding; (no-op)\");\n  (void) off;                /* Unused. Silent compiler warning. */\n  probe_log (\"executed (void) off;\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log (\"branch: key == \\\"name\\\", size=%zu\", size);\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      probe_log (\"malloc answerstring=%p\", (void *) answerstring);\n      if (! answerstring)\n      {\n        probe_log (\"malloc failed, returning MHD_NO\");\n        return MHD_NO;\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      probe_log (\"snprintf wrote answerstring (prefix): \\\"%.32s\\\"\", answerstring);\n      con_info->answerstring = answerstring;\n    }\n    else\n    {\n      probe_log (\"size out of bounds (%zu), setting answerstring=NULL\", size);\n      con_info->answerstring = NULL;\n    }\n\n    probe_log (\"return MHD_NO\");\n    return MHD_NO;\n  }\n\n  probe_log (\"return MHD_YES\");\n  return MHD_YES;\n}\n"
}