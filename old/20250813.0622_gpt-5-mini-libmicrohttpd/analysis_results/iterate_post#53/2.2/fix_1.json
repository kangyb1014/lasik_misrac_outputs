{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic const size_t MAXNAMESIZE = 128U;\nstatic const size_t MAXANSWERSIZE = 512U;\nstatic const char GREETINGPAGE[] = \"Hello %s\";\nstatic void log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (!f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\nstatic void probe_param_noop_executed(const char *param_name)\n{\n  /* Record that the explicit no-op cast statement for the parameter was\n     reached. This provides runtime evidence that lines like '(void) kind;'\n     executed, which is the subject of the reported MISRA Rule 2.2 issue. */\n  log_append(\"probe: executed no-op for parameter '%s'\", param_name);\n}\nstatic void probe_entry(const char *key, const char *filename,\n                        const char *content_type, const char *transfer_encoding,\n                        const char *data, uint64_t off, size_t size,\n                        int kind_value)\n{\n  log_append(\"iterate_post entry: key='%s', filename='%s', content_type='%s', transfer_encoding='%s', data_ptr=%p, off=%\" PRIu64 \", size=%zu, kind=%d\",\n             key ? key : \"(null)\", filename ? filename : \"(null)\",\n             content_type ? content_type : \"(null)\",\n             transfer_encoding ? transfer_encoding : \"(null)\", (void *) data,\n             off, size, kind_value);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* Log entry and parameter state. The log shows that these parameters are\n     present at runtime and provides a pointer/value snapshot for reproducing\n     the scenario. */\n  probe_entry(key, filename, content_type, transfer_encoding, data, off, size, (int) kind);\n\n  /* The original code contained explicit no-op casts to silence unused\n     parameter warnings. We keep them here (so the exact source lines that\n     were reported remain present) and record that each such no-op statement\n     was reached. This provides runtime evidence that the no-op statements\n     executed but did not affect program behaviour. */\n  (void) kind;               /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"kind\");\n\n  (void) filename;           /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"filename\");\n\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"content_type\");\n\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"transfer_encoding\");\n\n  (void) off;                /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"off\");\n\n  /* Record which parameters are actually used by the control flow below. */\n  log_append(\"probe: parameters used by logic: key, data, size\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        log_append(\"probe: malloc failed allocating answerstring\");\n        return MHD_NO;\n      }\n\n      /* Preserve original behavior: create the answer string using GREETINGPAGE. */\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      log_append(\"probe: created answerstring at %p, content='%s'\", (void *) answerstring, answerstring);\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      log_append(\"probe: size out of range (%zu); answerstring set to NULL\", size);\n    }\n\n    log_append(\"iterate_post: returning MHD_NO (handled key='name')\");\n    return MHD_NO;\n  }\n\n  log_append(\"iterate_post: returning MHD_YES (key not 'name')\");\n  return MHD_YES;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nsimplepost.c:33:25: error: expected identifier or '(' before numeric constant\n   33 | #define MAXNAMESIZE     20\n      |                         ^~\nsimplepost.c:79:21: note: in expansion of macro 'MAXNAMESIZE'\n   79 | static const size_t MAXNAMESIZE = 128U;\n      |                     ^~~~~~~~~~~\nsimplepost.c:34:25: error: expected identifier or '(' before numeric constant\n   34 | #define MAXANSWERSIZE   512\n      |                         ^~~\nsimplepost.c:80:21: note: in expansion of macro 'MAXANSWERSIZE'\n   80 | static const size_t MAXANSWERSIZE = 512U;\n      |                     ^~~~~~~~~~~~~\nsimplepost.c:55:3: error: expected identifier or '(' before string constant\n   55 |   \"<html><body><h1>Welcome, %s!</center></h1></body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsimplepost.c:55:3: note: in definition of macro 'GREETINGPAGE'\n   55 |   \"<html><body><h1>Welcome, %s!</center></h1></body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsimplepost.c: In function 'probe_entry':\nsimplepost.c:108:122: error: expected ')' before 'PRIu64'\n  108 |   log_append(\"iterate_post entry: key='%s', filename='%s', content_type='%s', transfer_encoding='%s', data_ptr=%p, off=%\" PRIu64 \", size=%zu, kind=%d\",\n      |             ~                                                                                                            ^~~~~~~\n      |                                                                                                                          )\nsimplepost.c:22:1: note: 'PRIu64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   21 | #include <microhttpd.h>\n  +++ |+#include <inttypes.h>\n   22 | #include <stdio.h>\nmake[4]: *** [Makefile:649: simplepost.o] Error 1\nmake[3]: *** [Makefile:685: all-recursive] Error 1\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of iterate_post as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <microhttpd.h>\n#include <inttypes.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\nstatic const size_t max_name_size = 128U;\nstatic const size_t max_answer_size = 512U;\nstatic const char greeting_page[] = \"Hello %s\";\n\nstatic void log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (!f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic void probe_param_noop_executed(const char *param_name)\n{\n  /* Record that the explicit no-op cast statement for the parameter was\n     reached. This provides runtime evidence that lines like '(void) kind;'\n     executed, which is the subject of the reported MISRA Rule 2.2 issue. */\n  log_append(\"probe: executed no-op for parameter '%s'\", param_name);\n}\n\nstatic void probe_entry(const char *key, const char *filename,\n                        const char *content_type, const char *transfer_encoding,\n                        const char *data, uint64_t off, size_t size,\n                        int kind_value)\n{\n  log_append(\"iterate_post entry: key='%s', filename='%s', content_type='%s', transfer_encoding='%s', data_ptr=%p, off=%\" PRIu64 \", size=%zu, kind=%d\",\n             key ? key : \"(null)\", filename ? filename : \"(null)\",\n             content_type ? content_type : \"(null)\",\n             transfer_encoding ? transfer_encoding : \"(null)\", (void *) data,\n             off, size, kind_value);\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* Log entry and parameter state. The log shows that these parameters are\n     present at runtime and provides a pointer/value snapshot for reproducing\n     the scenario. */\n  probe_entry(key, filename, content_type, transfer_encoding, data, off, size, (int) kind);\n\n  /* The original code contained explicit no-op casts to silence unused\n     parameter warnings. We keep them here (so the exact source lines that\n     were reported remain present) and record that each such no-op statement\n     was reached. This provides runtime evidence that the no-op statements\n     executed but did not affect program behaviour. */\n  (void) kind;               /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"kind\");\n\n  (void) filename;           /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"filename\");\n\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"content_type\");\n\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"transfer_encoding\");\n\n  (void) off;                /* Unused. Silent compiler warning. */\n  probe_param_noop_executed(\"off\");\n\n  /* Record which parameters are actually used by the control flow below. */\n  log_append(\"probe: parameters used by logic: key, data, size\");\n\n  if ((key != NULL) && (0 == strcmp (key, \"name\")))\n  {\n    if ((size > 0) && (size <= max_name_size))\n    {\n      char *answerstring;\n      answerstring = malloc (max_answer_size);\n      if (! answerstring)\n      {\n        log_append(\"probe: malloc failed allocating answerstring\");\n        return MHD_NO;\n      }\n\n      /* Preserve original behavior: create the answer string using greeting_page. */\n      snprintf (answerstring, max_answer_size, greeting_page, data);\n      con_info->answerstring = answerstring;\n\n      log_append(\"probe: created answerstring at %p, content='%s'\", (void *) answerstring, answerstring);\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      log_append(\"probe: size out of range (%zu); answerstring set to NULL\", size);\n    }\n\n    log_append(\"iterate_post: returning MHD_NO (handled key='name')\");\n    return MHD_NO;\n  }\n\n  log_append(\"iterate_post: returning MHD_YES (key not 'name')\");\n  return MHD_YES;\n}\n",
  "explanation": "I fixed macro name collisions by renaming the constants and the greeting string to identifiers that cannot be preprocessed away (max_name_size, max_answer_size, greeting_page). I added the missing #include <inttypes.h> so PRIu64 is available. I also added the necessary standard headers (stdio.h, stdlib.h, stdarg.h, string.h, stdint.h) to ensure the helper functions compile. Finally, I added a NULL check on key before strcmp to avoid NULL dereference while preserving the original iterate_post logic."
}