{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe #if condition is always true in this project because MHD_USE_POSIX_THREADS is defined as 1. Therefore the #else branch containing \"(void) daemon;\" can never be compiled/executed and is unreachable; this violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/689.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_lock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe: append logs about control flow/state to /tmp/logs/689.txt */\nstatic void\nmhd_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/689.txt\", \"a\");\n    if (NULL == fp)\n    {\n        /* If logging can't be performed, do not alter program flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    /* ensure the log is flushed for external observers */\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n\n  /* Record entry and key state */\n  mhd_probe_log(\"ENTER: MHD_ip_count_lock - daemon=%p, master=%p\\n\",\n                (void *)daemon, (void *)daemon->master);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log which compile-time branch was taken and preserve original logic */\n  mhd_probe_log(\"BRANCH: threads path taken - locking per_ip_connection_mutex at %p\\n\",\n                (void *)&daemon->per_ip_connection_mutex);\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n  mhd_probe_log(\"AFTER_LOCK: per_ip_connection_mutex locked - daemon=%p\\n\",\n                (void *)daemon);\n#else\n  /* This branch is expected to be unreachable when threads are enabled. */\n  mhd_probe_log(\"BRANCH: non-threads path taken - (void) daemon executed\\n\");\n  (void) daemon;\n#endif\n\n  mhd_probe_log(\"EXIT: MHD_ip_count_lock - daemon=%p\\n\", (void *)daemon);\n}\n"
}