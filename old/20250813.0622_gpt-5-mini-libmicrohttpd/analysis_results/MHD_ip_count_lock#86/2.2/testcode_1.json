{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen the code is built without thread support (neither MHD_USE_POSIX_THREADS nor MHD_USE_W32_THREADS defined), the preprocessor selects the else branch and the statement '(void) daemon;' is executed. That statement is a no-op whose removal would not affect program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2. (The no-op is only present to suppress an \"unused parameter\" warning.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/690.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_lock code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write a simple trace to /tmp/logs/690.txt indicating\n   which branch was taken and the state of the daemon pointer. */\nstatic void\nmhd_probe_log_690 (const struct MHD_Daemon *daemon, const char *branch)\n{\n  FILE *f = fopen(\"/tmp/logs/690.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print the branch taken and pointers that help reproduce the scenario. */\n  fprintf (f, \"MHD_ip_count_lock: branch=%s, daemon=%p, master=%p\\n\",\n           branch,\n           (const void *) daemon,\n           (const void *) (daemon ? daemon->master : NULL));\n  fclose (f);\n}\n\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log that we are taking the threaded path, then perform the original action. */\n  mhd_probe_log_690 (daemon, \"THREAD_LOCK\");\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  /* Log that we are taking the non-threaded path where the original code\n     contained the (void) daemon; no-op intended to suppress unused-parameter\n     warnings. Keep the no-op to preserve original semantics. */\n  mhd_probe_log_690 (daemon, \"NO_THREAD_NOP\");\n  (void) daemon;\n#endif\n}\n"
}