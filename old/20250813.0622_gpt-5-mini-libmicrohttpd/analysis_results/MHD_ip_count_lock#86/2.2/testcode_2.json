{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro mhd_assert is defined as #define mhd_assert(ignore) ((void)0). The statement mhd_assert(NULL == daemon->master); therefore expands to a no-op expression-statement ((void)0); which is executed but has no effect and its removal would not change program behaviour. This constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/690.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_lock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal stand-in for the daemon structure used by the function under test.\n   This preserves the fields used by MHD_ip_count_lock so the code is\n   compilable as a unit for testing/logging. */\nstruct MHD_Daemon\n{\n  void *master;\n  int per_ip_connection_mutex; /* opaque placeholder for a mutex object */\n};\n\n/* Probe logger: append a timestamped message to /tmp/logs/690.txt.\n   Kept small and self-contained to avoid changing program logic. */\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n  struct timespec ts;\n  char timebuf[64] = \"\";\n\n  /* Ensure directory exists; ignore errors (exists or permission issues). */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  f = fopen(\"/tmp/logs/690.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  if (clock_gettime (CLOCK_REALTIME, &ts) == 0)\n  {\n    time_t sec = (time_t) ts.tv_sec;\n    struct tm tmv;\n    if (localtime_r (&sec, &tmv) != NULL)\n    {\n      (void) strftime (timebuf, sizeof (timebuf), \"%Y-%m-%d %H:%M:%S\", &tmv);\n    }\n  }\n\n  fprintf (f, \"%s.%03ld: \", timebuf, (long) (ts.tv_nsec / 1000000));\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Provide a no-op implementation of mhd_assert so the snippet is\n   compilable standalone. This mirrors the reported scenario where\n   mhd_assert was defined as a no-op macro. We intentionally do NOT\n   introduce logging inside this function to preserve the \"no-op\"\n   character for the purposes of reproducing the violation scenario. */\nstatic void\nmhd_assert (int ignore)\n{\n  (void) ignore;\n}\n\n/* Provide a stub for the mutex lock helper so the threaded branch\n   can be exercised without depending on external code. The stub logs\n   its invocation and returns immediately. */\nstatic void\nMHD_mutex_lock_chk_ (void *mutex)\n{\n  mhd_probe_log (\"MHD_mutex_lock_chk_ called with mutex=%p\", mutex);\n  /* intentionally do nothing else */\n}\n\n/* Modified MHD_ip_count_lock with logging probes inserted around the\n   original assertion and the threading branch. The original logic is\n   preserved to the extent possible; additional logging calls do not\n   alter program state. */\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_probe_log (\"ENTER: MHD_ip_count_lock daemon=%p\", (void *) daemon);\n\n  if (daemon == NULL)\n  {\n    mhd_probe_log (\"daemon is NULL before mhd_assert\");\n  }\n  else\n  {\n    mhd_probe_log (\"daemon->master = %p before mhd_assert\", daemon->master);\n  }\n\n  /* Original assertion retained; in the reported scenario this is a\n     no-op. We log immediately before and after to provide evidence that\n     the call has no observable effect on program state. */\n  mhd_probe_log (\"About to invoke mhd_assert(NULL == daemon->master)\");\n  mhd_assert (NULL == daemon->master);\n  mhd_probe_log (\"Returned from mhd_assert(NULL == daemon->master)\");\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_probe_log (\"Threaded build: locking per_ip_connection_mutex at %p\",\n                 (void *) &daemon->per_ip_connection_mutex);\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n  mhd_probe_log (\"Threaded build: returned from MHD_mutex_lock_chk_\");\n#else\n  (void) daemon;\n  mhd_probe_log (\"Non-threaded build: (void) daemon executed\");\n#endif\n\n  mhd_probe_log (\"EXIT: MHD_ip_count_lock daemon=%p\", (void *) daemon);\n}\n"
}