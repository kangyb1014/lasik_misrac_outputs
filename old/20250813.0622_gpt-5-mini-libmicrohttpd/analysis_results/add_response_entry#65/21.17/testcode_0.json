{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code can invoke memchr(header, '\\t', header_len) with an invalid pointer/length. add_response_entry calls header_len = strlen(header) without checking header != NULL, so passing a NULL header (or a header whose representation/length does not match header_len) leads to undefined behaviour: strlen(NULL) already dereferences NULL and, more generally, memchr will read header_len bytes from header and thus may access beyond the bounds of the object referenced by header. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function: logs control flow and state for add_response_entry to /tmp/logs/527.txt.\n   This function intentionally does NOT change program logic: it only observes pointers\n   and (safely) the content length after the caller has ensured content != NULL.\n*/\nstatic void add_response_entry_probe(const char *header, const char *content)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"add_response_entry invoked\\n\");\n  fprintf(f, \"  header pointer: %p\\n\", (const void *) header);\n  fprintf(f, \"  content pointer: %p\\n\", (const void *) content);\n\n  if (content != NULL)\n  {\n    /* content is guaranteed non-NULL by the original function's check, so it's safe to measure. */\n    size_t content_len = strlen(content);\n    fprintf(f, \"  content length (strlen): %zu\\n\", content_len);\n  }\n  else\n  {\n    fprintf(f, \"  content is NULL\\n\");\n  }\n\n  /* We explicitly log that we're about to call strlen(header). Do NOT call strlen(header) here,\n     because we must preserve the original ordering/behavior (including the potential UB when\n     header is NULL) so that the violation scenario can be reproduced and evidenced. */\n  if (header == NULL)\n    fprintf(f, \"  header is NULL -- about to call strlen(header) (this will cause undefined behavior)\\n\");\n  else\n    fprintf(f, \"  header non-NULL -- about to call strlen(header)\\n\");\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  /* Insert probe here to capture the control flow and state before the risky call to strlen(header).\n     This preserves the original logic and ordering so the violation can be reproduced. */\n  add_response_entry_probe(header, content);\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n"
}