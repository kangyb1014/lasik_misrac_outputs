{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. For example, if a caller invokes MHD_add_response_footer(response, NULL, \"value\") (or otherwise passes header==NULL to add_response_entry), add_response_entry calls strlen(header) without checking header!=NULL \u2014 strlen(NULL) will dereference beyond the object. Similarly, if header points to a buffer that is not NUL-terminated within its allocated bounds, strlen(header) will read past the buffer. Both cases violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append a single-line log entry to /tmp/logs/527.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry with pointer/state information before any string operations. */\n  probe_log(\"add_response_entry: called (response=%p, kind=%d, header=%p, content=%p)\",\n            (void *) response, (int) kind, (const void *) header, (const void *) content);\n\n  if (NULL == content) {\n    probe_log(\"add_response_entry: early return because content == NULL (response=%p, kind=%d, header=%p, content=%p)\",\n              (void *) response, (int) kind, (const void *) header, (const void *) content);\n    return MHD_NO;\n  }\n\n  /* Record that header is NULL (this will reproduce the violation scenario when followed\n     by the strlen(header) call below). We intentionally do not change the original\n     control flow \u2014 we log the condition and then proceed exactly as before. */\n  if (NULL == header) {\n    probe_log(\"add_response_entry: header == NULL (about to call strlen(header) which will dereference NULL). (response=%p, kind=%d, header=%p, content=%p)\",\n              (void *) response, (int) kind, (const void *) header, (const void *) content);\n  } else {\n    probe_log(\"add_response_entry: header != NULL (pointer=%p). (response=%p, kind=%d, content=%p)\",\n              (const void *) header, (void *) response, (int) kind, (const void *) content);\n  }\n\n  /* Preserve original behavior/order: calling strlen(header) first as in the original code. */\n  header_len = strlen (header);\n  probe_log(\"add_response_entry: computed header_len=%zu (header=%p)\", header_len, (const void *) header);\n\n  content_len = strlen (content);\n  probe_log(\"add_response_entry: computed content_len=%zu (content=%p)\", content_len, (const void *) content);\n\n  int added = add_response_entry_n (response, kind, header,\n                                    header_len, content,\n                                    content_len) ? 1 : 0;\n  probe_log(\"add_response_entry: add_response_entry_n returned %d -> returning %s (response=%p)\",\n            added, added ? \"MHD_YES\" : \"MHD_NO\", (void *) response);\n\n  return added ? MHD_YES : MHD_NO;\n}\n"
}