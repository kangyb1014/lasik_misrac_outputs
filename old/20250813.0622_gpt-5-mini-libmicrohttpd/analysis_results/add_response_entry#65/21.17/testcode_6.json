{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nadd_response_entry calls strlen(header) without checking that header is non-NULL and points to a NUL-terminated object. If add_response_entry is invoked with header == NULL (e.g. a caller passes NULL) strlen(header) will dereference a NULL pointer and cause an out-of-bounds access. Likewise, if header points to a buffer that is not NUL-terminated within its allocated bounds, strlen may read past the object\u2019s bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append log lines to /tmp/logs/527.txt. */\nstatic void\nadd_response_entry_log_probe_pre(const char *header, const char *content)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"add_response_entry: ENTER\\n\");\n  fprintf(f, \"  header ptr = %p\\n\", (void *) header);\n  fprintf(f, \"  content ptr = %p\\n\", (void *) content);\n  if (content == NULL)\n    fprintf(f, \"  content == NULL -> will return MHD_NO (early exit)\\n\");\n  else\n    fprintf(f, \"  content != NULL -> continue\\n\");\n  fprintf(f, \"  about to call strlen(header) (this may crash if header == NULL or not NUL-terminated)\\n\");\n  fclose(f);\n}\n\nstatic void\nadd_response_entry_log_probe_post(const char *header, const char *content,\n                                  size_t header_len, size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"add_response_entry: AFTER strlen calls\\n\");\n  fprintf(f, \"  header ptr = %p, header_len = %zu\\n\", (void *) header, header_len);\n  fprintf(f, \"  content ptr = %p, content_len = %zu\\n\", (void *) content, content_len);\n  fprintf(f, \"add_response_entry: EXIT\\n\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log state before doing anything that may dereference pointers. */\n  add_response_entry_log_probe_pre(header, content);\n\n  if (NULL == content)\n    return MHD_NO;\n\n  /* Intentionally preserve original logic: calling strlen(header) as in the\n     original code. The pre-log above records the header pointer so callers\n     can reproduce and observe cases where header is NULL or not NUL-terminated. */\n  header_len = strlen (header);\n  content_len = strlen (content);\n\n  /* Log lengths after successful strlen calls. If strlen(header) crashed,\n     the pre-log will still provide evidence. */\n  add_response_entry_log_probe_post(header, content, header_len, content_len);\n\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n"
}