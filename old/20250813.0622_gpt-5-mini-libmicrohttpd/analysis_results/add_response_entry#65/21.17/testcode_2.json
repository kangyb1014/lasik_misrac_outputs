{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The memchr call can access out-of-bounds if the pointer/length pair is not valid. For example: (1) add_response_entry calls header_len = strlen(header) but does not check header != NULL \u2014 passing header == NULL causes undefined access (strlen then memchr will operate on an invalid pointer). (2) add_response_entry_n accepts an explicit header_len; if a caller provides a non-zero header_len that is larger than the actual object (or header == NULL), memchr(header, '\\r', header_len) will read beyond the object. Both cases violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified add_response_entry code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type stubs so this snippet can be compiled/linked for testing.\n   In the real project these types/functions are provided elsewhere. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ValueKind { MHD_VALUE_KIND_UNKNOWN = 0 };\nstruct MHD_Response { int _dummy; };\n\n/* Forward declaration of the real function. A lightweight stub is provided\n   below to allow linking and execution in isolation for testing probes. */\nstatic int add_response_entry_n (struct MHD_Response *response,\n                                 enum MHD_ValueKind kind,\n                                 const char *header,\n                                 size_t header_len,\n                                 const char *content,\n                                 size_t content_len);\n\n/* Probe functions: append logs to /tmp/logs/527.txt. They do not dereference\n   the header/content pointers (except where safe) so they do not introduce\n   additional undefined behaviour beyond the original function. */\nstatic void log_probe_entry(const char *header, const char *content)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"add_response_entry: ENTRY header=%p content=%p\\n\", (void *) header, (void *) content);\n    fclose(f);\n  }\n}\n\nstatic void log_probe_before_strlen(const char *header)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f)\n  {\n    /* We intentionally log the pointer value only. We do NOT dereference\n       header here because the original code calls strlen(header) unguarded;\n       logging the pointer value before that call lets observers reproduce\n       the null/invalid-pointer scenario. */\n    fprintf(f, \"add_response_entry: about to call strlen(header), header=%p\\n\", (void *) header);\n    fclose(f);\n  }\n}\n\nstatic void log_probe_after_lengths(const char *header, size_t header_len, const char *content, size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"add_response_entry: header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *) header, header_len, (void *) content, content_len);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  /* Log entry and pointer state so callers that pass a NULL or invalid\n     header/content can be observed. This logging is intentionally done\n     without changing the original control flow/behaviour. */\n  log_probe_entry(header, content);\n\n  if (NULL == content)\n  {\n    FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"add_response_entry: content == NULL -> returning MHD_NO\\n\");\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n\n  /* Log that we are about to call strlen(header). If header is NULL this\n     call below will reproduce the undefined behaviour described in the\n     violation scenario; the pointer value is already recorded above. */\n  log_probe_before_strlen(header);\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n\n  log_probe_after_lengths(header, header_len, content, content_len);\n\n  int ret = add_response_entry_n (response, kind, header,\n                                  header_len, content,\n                                  content_len);\n\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"add_response_entry: add_response_entry_n returned %d -> returning %s\\n\",\n            ret, ret ? \"MHD_YES\" : \"MHD_NO\");\n    fclose(f);\n  }\n\n  return ret ? MHD_YES : MHD_NO;\n}\n\n/* Lightweight stub for add_response_entry_n so this file can be compiled and\n   linked as a standalone test. The stub logs its inputs and returns success\n   if both header and content are non-NULL. In real usage the project's\n   implementation would be used instead. */\nstatic int add_response_entry_n (struct MHD_Response *response,\n                                 enum MHD_ValueKind kind,\n                                 const char *header,\n                                 size_t header_len,\n                                 const char *content,\n                                 size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/527.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"add_response_entry_n: called header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *) header, header_len, (void *) content, content_len);\n    fclose(f);\n  }\n\n  /* Simple behaviour: succeed if both pointers are non-NULL. This keeps the\n     behavior predictable for testing the logging/probing without masking the\n     original potential undefined behaviour in add_response_entry. */\n  return (header != NULL && content != NULL) ? 1 : 0;\n}\n"
}