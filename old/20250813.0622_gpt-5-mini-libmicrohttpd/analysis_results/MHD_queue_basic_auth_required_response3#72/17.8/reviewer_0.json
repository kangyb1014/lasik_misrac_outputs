{
  "user_message": "An agent A claimed that the following MHD_queue_basic_auth_required_response3 code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_basic_auth_required_response3.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_queue_response the value of the non-pointer parameter 'status_code' is modified: reply_icy = (0 != (status_code & MHD_ICY_FLAG)); followed by status_code &= ~MHD_ICY_FLAG; \u2014 this writes to the parameter variable. MISRA C 2023 Rule 17.8 forbids modifying function parameters. The fix is to copy the parameter to a local variable (e.g. unsigned int sc = status_code;) and modify that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_append(const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Ensure directory exists. Ignore errors if it cannot be created. */\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  f = fopen(\"/tmp/logs/581.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fclose(f);\n}\nstatic enum MHD_Result Probe_MHD_queue_response(struct MHD_Connection *connection,\n                                                int status_code,\n                                                struct MHD_Response *response)\n{\n  enum MHD_Result r;\n\n  probe_log_append(\"Probe_MHD_queue_response: entry: connection=%p status_code=%d response=%p\\n\",\n                   (void *) connection, status_code, (void *) response);\n\n  /* Call the actual implementation. Do not modify status_code here. */\n  r = MHD_queue_response(connection, status_code, response);\n\n  probe_log_append(\"Probe_MHD_queue_response: exit : return=%d\\n\", (int) r);\n  return r;\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: entry: connection=%p realm=%p prefer_utf8=%d response=%p\\n\",\n                   (void *) connection, (void *) realm, prefer_utf8, (void *) response);\n\n  if (NULL == response)\n  {\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: early return: response==NULL -> MHD_NO\\n\");\n    return MHD_NO;\n  }\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: computed: prefix_len=%zu realm_len=%zu suffix_len=%zu h_maxlen=%zu\\n\",\n                   prefix_len, realm_len, suffix_len, h_maxlen);\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: malloc failed\\n\");\n    return MHD_NO;\n  }\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: malloc succeeded: h_str=%p\\n\", (void *) h_str);\n\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: after quote: pos=%zu realm_quoted_len=%zu\\n\",\n                   pos, realm_quoted_len);\n\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: prefer_utf8==0: terminated at pos=%zu\\n\", pos);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: prefer_utf8!=0: copied suff_charset, pos=%zu\\n\", pos);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: MHD_add_response_header returned %d\\n\", (int) ret);\n\n  free (h_str);\n\n  if (MHD_NO != ret)\n  {\n    /* Use the probe wrapper so we log the status_code and the call/return of MHD_queue_response. */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: calling MHD_queue_response (wrapped) with status=MHD_HTTP_UNAUTHORIZED\\n\");\n    ret = Probe_MHD_queue_response (connection,\n                                    MHD_HTTP_UNAUTHORIZED,\n                                    response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n    probe_log_append(\"MHD_queue_basic_auth_required_response3: failed to add header, returning %d\\n\", (int) ret);\n  }\n\n  probe_log_append(\"MHD_queue_basic_auth_required_response3: exit: returning %d\\n\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_queue_basic_auth_required_response3. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim as stated is not correct. MHD_queue_basic_auth_required_response3 does not assign to or modify any of its (non-pointer) parameters: it only reads prefer_utf8, realm, connection and response and passes constants/pointers to other functions. The probe wrapper you added likewise does not modify the status_code parameter before calling the real implementation. MISRA C 2023 Rule 17.8 forbids modifying a function\u2019s own parameter variables; it applies to the function in which the modification occurs. The code lines cited by agent A (reply_icy = (0 != (status_code & MHD_ICY_FLAG)); followed by status_code &= ~MHD_ICY_FLAG;)\u2014if present\u2014would violate Rule 17.8 in MHD_queue_response itself, not in MHD_queue_basic_auth_required_response3. So the reported violation is real only if those modifying statements exist in MHD_queue_response, but the claim that MHD_queue_basic_auth_required_response3 violates 17.8 is incorrect. Recommended fix (if MHD_queue_response indeed contains those statements): copy the parameter to a local variable and modify the local instead (e.g. unsigned int sc = status_code;), which cures the MISRA violation."
}