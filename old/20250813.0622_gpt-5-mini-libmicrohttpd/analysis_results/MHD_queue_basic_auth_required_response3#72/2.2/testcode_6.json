{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the statement 'mhd_assert (w >= r);' in MHD_str_quote expands to the macro mhd_assert(ignore) ((void)0), producing a no-op. The assertion thus has no effect at runtime and removing the statement would not change program behaviour, which meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_basic_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_queue_basic_auth_required_response3 as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_queue_basic_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_queue_basic_auth_required_response3 code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  /* Probe log file. Append mode to preserve history across calls. */\n  {\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER MHD_queue_basic_auth_required_response3: connection=%p realm=%s prefer_utf8=%d\\n\",\n              (void *) connection, (realm ? realm : \"(null)\"), prefer_utf8);\n      fprintf(log, \"prefix_len=%zu suff_simple_len=%zu suff_charset_len=%zu\\n\",\n              prefix_len, suff_simple_len, suff_charset_len);\n      fclose(log);\n    }\n  }\n\n  if (NULL == response)\n  {\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Early return: response == NULL -> MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Computed sizes: realm_len=%zu h_maxlen=%zu suffix_len=%zu\\n\",\n              realm_len, h_maxlen, suffix_len);\n      fclose(log);\n    }\n  }\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"malloc failed for size=%zu -> returning MHD_NO\\n\", h_maxlen + 1);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n\n  /* Log the state around the assertion so callers can see the truth value\n     even if mhd_assert is a no-op. This helps reproduce the scenario where\n     the assertion expands to ((void)0). */\n  {\n    int cond = (int) (pos + suffix_len <= h_maxlen);\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"After MHD_str_quote: realm_quoted_len=%zu pos=%zu h_maxlen=%zu suffix_len=%zu cond(pos+suffix_len<=h_maxlen)=%d\\n\",\n              realm_quoted_len, pos, h_maxlen, suffix_len, cond);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (pos + suffix_len <= h_maxlen);\n\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n\n    {\n      int cond = (int) (pos <= h_maxlen + 1);\n      FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Branch prefer_utf8==0: wrote \\\" and NUL, new pos=%zu cond(pos<=h_maxlen+1)=%d h_str=\" , pos, cond);\n        /* Print the header safely up to h_maxlen (it is NUL-terminated here). */\n        fprintf(log, \"%s\\n\", h_str);\n        fclose(log);\n      }\n    }\n\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    {\n      int cond = (int) (pos + suff_charset_len <= h_maxlen);\n      FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Branch prefer_utf8!=0: before memcpy pos=%zu suff_charset_len=%zu h_maxlen=%zu cond(pos+suff_charset_len<=h_maxlen)=%d\\n\",\n                pos, suff_charset_len, h_maxlen, cond);\n        fclose(log);\n      }\n    }\n\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n\n    {\n      int zero_is_zero = (int) (0 == h_str[pos + suff_charset_len]);\n      FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"After memcpy: appended suff_charset at pos=%zu zero_is_zero=%d header=\", pos, zero_is_zero);\n        fprintf(log, \"%s\\n\", h_str);\n        fclose(log);\n      }\n    }\n\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n\n  {\n    FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_header returned %d\\n\", (int) ret);\n      fclose(log);\n    }\n  }\n\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n    {\n      FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MHD_queue_response returned %d -> final ret=%d\\n\", (int) ret, (int) ret);\n        fclose(log);\n      }\n    }\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n    {\n      FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Failed to add Basic Authentication header, ret=MHD_NO\\n\");\n        fclose(log);\n      }\n    }\n  }\n\n  return ret;\n}\n"
}