{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct exposes username and password as 'char *' even though the API treats them as immutable read-only strings to the caller \u2014 they should be declared 'const char *'. Specifically, the fields 'char *username' and 'char *password' can (and should) be 'const char *username' and 'const char *password' so callers cannot modify the pointed-to data. The library code can still construct/terminate the internal buffers before returning and assign them to const pointers, so making these pointers const is feasible. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified answer_to_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of answer_to_connection as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of answer_to_connection:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified answer_to_connection code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a formatted message with timestamp to /tmp/logs/611.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/611.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  struct tm lt;\n#if defined(_WIN32)\n  localtime_s(&lt, &t);\n#else\n  localtime_r(&t, &lt);\n#endif\n  char ts[64];\n  if (0 != strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &lt))\n    fprintf(f, \"%s - \", ts);\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and key inputs */\n  probe_log(\"enter answer_to_connection: method='%s', url='%s', req_cls_ptr=%p, req_cls_val=%p\",\n            method ? method : \"(null)\", url ? url : \"(null)\", (void *)req_cls, req_cls ? *req_cls : NULL);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    probe_log(\"method != GET -> returning MHD_NO\");\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    probe_log(\"first call for connection: storing req_cls and returning MHD_YES\");\n    *req_cls = connection;\n    return MHD_YES;\n  }\n\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  probe_log(\"MHD_basic_auth_get_username_password3 returned %p\", (void *)auth_info);\n\n  if (NULL == auth_info)\n  {\n    probe_log(\"auth_info == NULL -> building auth required response\");\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    /* Inspect and log the auth_info fields without modifying them. */\n    const char *username = auth_info->username;\n    size_t username_len = auth_info->username_len;\n    const char *password = auth_info->password;\n    size_t password_len = auth_info->password_len;\n\n    probe_log(\"auth_info->username=%p username_len=%zu, auth_info->password=%p password_len=%zu\",\n              (void *)username, username_len, (void *)password, password_len);\n\n    /* Evaluate the same checks as the original compound condition, but\n     * capture intermediate results for logging to show the exact branch\n     * decisions and the values used in the comparisons. */\n    size_t root_len = strlen(\"root\");\n    int username_len_mismatch = (root_len != username_len);\n    int username_cmp_nonzero = 0;\n    if (!username_len_mismatch)\n    {\n      /* memcmp is only safe to call when lengths match (mirrors original short-circuit logic) */\n      username_cmp_nonzero = (0 != memcmp (username, \"root\", username_len));\n    }\n\n    int password_is_null = (NULL == password);\n    size_t pwd_expected_len = strlen(\"pa$$w0rd\");\n    int password_len_mismatch = (pwd_expected_len != password_len);\n    int password_cmp_nonzero = 0;\n    if (!password_is_null && !password_len_mismatch)\n      password_cmp_nonzero = (0 != memcmp (password, \"pa$$w0rd\", password_len));\n\n    probe_log(\"username checks: len_mismatch=%d cmp_nonzero=%d\", username_len_mismatch, username_cmp_nonzero);\n    probe_log(\"password checks: is_null=%d len_mismatch=%d cmp_nonzero=%d\", password_is_null, password_len_mismatch, password_cmp_nonzero);\n\n    if (username_len_mismatch || username_cmp_nonzero ||\n        password_is_null || password_len_mismatch || password_cmp_nonzero)\n    {\n      /* Log a safe excerpt of the credentials (limited length) to aid repro; do not modify the buffers. */\n      char uname_sample[64] = {0};\n      char pwd_sample[64] = {0};\n      if (username && username_len > 0)\n      {\n        size_t copy_len = username_len < (sizeof(uname_sample) - 1) ? username_len : (sizeof(uname_sample) - 1);\n        memcpy(uname_sample, username, copy_len);\n        uname_sample[copy_len] = '\\0';\n      }\n      if (password && password_len > 0)\n      {\n        size_t copy_len = password_len < (sizeof(pwd_sample) - 1) ? password_len : (sizeof(pwd_sample) - 1);\n        memcpy(pwd_sample, password, copy_len);\n        pwd_sample[copy_len] = '\\0';\n      }\n      probe_log(\"auth failure path: username_sample='%s' (len=%zu), password_sample='%s' (len=%zu)\",\n                uname_sample, username_len, pwd_sample, password_len);\n\n      static const char *page =\n        \"<html><body>Wrong username or password</body></html>\";\n      response = MHD_create_response_from_buffer_static (strlen (page), page);\n      ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                     \"admins\",\n                                                     MHD_YES,\n                                                     response);\n    }\n    else\n    {\n      probe_log(\"auth success path: credentials accepted\");\n      static const char *page = \"<html><body>A secret.</body></html>\";\n      response = MHD_create_response_from_buffer_static (strlen (page), page);\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    }\n  }\n\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n\n  probe_log(\"about to destroy response %p and return ret=%d\", (void *)response, (int)ret);\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}