{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If the macro mhd_assert is defined as a debug-only no-op (for example expanding to ((void)0) when assertions are disabled), the statement mhd_assert(decoded_max_len >= decoded_len); has no effect in the production build \u2014 removing it would not change program behaviour, so it is dead code and thus violates MISRA C 2023 Rule 2.2. (If, instead, mhd_assert performs observable actions such as logging or aborting on failure, then the call is not dead and no violation occurs.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/610.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  probe_log(\"enter answer_to_connection: method=%s, connection=%p, req_cls=%p\",\n            (method != NULL) ? method : \"(null)\", (void *)connection, *req_cls);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    probe_log(\"rejecting non-GET method: %s\", method);\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    probe_log(\"first call for this connection; storing req_cls=%p\", connection);\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  probe_log(\"MHD_basic_auth_get_username_password3 returned %p\", (void *)auth_info);\n  if (NULL == auth_info)\n  {\n    probe_log(\"no auth_info: queuing basic auth required response\");\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    probe_log(\"queued basic auth required response, ret=%d\", (int)ret);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    /* Log details used in the checks to provide evidence of the control flow\n       and the state that caused this branch to be taken. */\n    probe_log(\"auth_info present: username_len=%zu, password=%zu\",\n              auth_info->username_len, auth_info->password_len);\n    if (auth_info->username != NULL)\n    {\n      /* username may not be NUL-terminated; print up to username_len bytes in hex */\n      size_t i;\n      probe_log(\"username bytes:\");\n      for (i = 0; i < auth_info->username_len; ++i)\n        probe_log(\" username[%zu]=0x%02x\", i, (unsigned char)auth_info->username[i]);\n    }\n    else\n    {\n      probe_log(\"username pointer is NULL\");\n    }\n    if (auth_info->password != NULL)\n    {\n      size_t i;\n      probe_log(\"password bytes:\");\n      for (i = 0; i < auth_info->password_len; ++i)\n        probe_log(\" password[%zu]=0x%02x\", i, (unsigned char)auth_info->password[i]);\n    }\n    else\n    {\n      probe_log(\"password pointer is NULL\");\n    }\n\n    probe_log(\"authentication failed: queuing basic auth required response\");\n\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    probe_log(\"queued wrong-credentials response, ret=%d\", (int)ret);\n  }\n  else\n  {\n    probe_log(\"authentication succeeded: queuing secret page response\");\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    probe_log(\"queued secret page response, ret=%d\", (int)ret);\n  }\n  if (NULL != auth_info)\n  {\n    probe_log(\"freeing auth_info %p\", (void *)auth_info);\n    MHD_free (auth_info);\n  }\n  else\n  {\n    probe_log(\"no auth_info to free\");\n  }\n  MHD_destroy_response (response);\n  probe_log(\"destroyed response %p, returning ret=%d\", (void *)response, (int)ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for answer_to_connection. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the provided answer_to_connection code. The target function does not contain any mhd_assert or any statement like mhd_assert(decoded_max_len >= decoded_len) \u2014 the scenario described by agent A refers to a different piece of code. Rule 2.2 is a project-level requirement (dead code is any executed operation whose removal would not change behaviour), so determining a true violation requires knowledge of the whole project and the preprocessing/build configuration (how mhd_assert is defined). If an assertion macro in some other file expands to a no-op that has no side effects, then that call could indeed be considered dead code under Rule 2.2; but that is not applicable to the provided answer_to_connection source. Therefore the specific report against this function is incorrect."
}