{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: potential out-of-bounds writes when the remaining buffer space is insufficient. get_rq_param_unquoted_copy_z() uses memcpy(buf, param->value.str, param->value.len) and then buf[param->value.len]=0 without the caller guaranteeing that buf has room for param->value.len+1 bytes. get_rq_uname() calls get_rq_param_unquoted_copy_z() with buf = buf + buf_used but does not check that buf_size >= buf_used + param->value.len + 1 before the call, so memcpy (from <string.h>) may write past the buffer \u2014 violating MISRA C 2023 Rule 21.17. Additionally, in the EXTENDED path MHD_str_pct_decode_strict_n_ can return w == buf_size (it may fill all buf_size bytes) and then the fragment buf[w] = 0 writes at buf[buf_size] (one past the end), causing an out-of-bounds store (this second issue is not a <string.h> function but also results in an out-of-bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append human-readable diagnostics to /tmp/logs/23.txt */\nstatic void\nmhd_log_uname_state(const char *stage,\n                    const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type,\n                    uint8_t *buf,\n                    size_t buf_size,\n                    size_t buf_used)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"[get_rq_uname] %s\\n\", stage);\n  fprintf(f, \"  uname_type=%d, buf=%p, buf_size=%zu, buf_used=%zu\\n\",\n          (int) uname_type, (void *) buf, buf_size, buf_used);\n  if (params)\n  {\n    /* Guarded prints in case the fields exist in the struct used by callers. */\n    fprintf(f, \"  params->username.value.str=%p, params->username.value.len=%zu\\n\",\n            (void *) params->username.value.str,\n            (size_t) params->username.value.len);\n    fprintf(f, \"  params->username_ext.value.str=%p, params->username_ext.value.len=%zu\\n\",\n            (void *) params->username_ext.value.str,\n            (size_t) params->username_ext.value.len);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void\nmhd_log_after_param_copy(const char *stage,\n                         const struct MHD_RqDAuth *params,\n                         enum MHD_DigestAuthUsernameType uname_type,\n                         uint8_t *buf,\n                         size_t buf_size,\n                         size_t buf_used,\n                         size_t ret_len)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  size_t remaining = 0;\n  if (buf_size >= buf_used)\n    remaining = buf_size - buf_used;\n  fprintf(f, \"[get_rq_uname] %s (after copy)\\n\", stage);\n  fprintf(f, \"  returned_len=%zu, remaining_space=%zu\\n\", ret_len, remaining);\n  if (ret_len + 1 > remaining)\n    fprintf(f, \"  WARNING: returned_len+1 (%zu) > remaining_space (%zu) -> possible overflow\\n\",\n            ret_len + 1, remaining);\n  else\n    fprintf(f, \"  OK: returned_len+1 (%zu) <= remaining_space (%zu)\\n\",\n            ret_len + 1, remaining);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic void\nmhd_log_after_extended(const char *stage,\n                       const struct MHD_RqDAuth *params,\n                       enum MHD_DigestAuthUsernameType uname_type,\n                       uint8_t *buf,\n                       size_t buf_size,\n                       size_t buf_used,\n                       ssize_t res)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  size_t remaining = 0;\n  if (buf_size >= buf_used)\n    remaining = buf_size - buf_used;\n  fprintf(f, \"[get_rq_uname] %s (after extended copy)\\n\", stage);\n  fprintf(f, \"  res=%zd, remaining_space=%zu\\n\", res, remaining);\n  if (res == (ssize_t) remaining)\n    fprintf(f, \"  WARNING: res == remaining_space (%zu) -> writing terminator at buf[buf_size] possible\\n\",\n            remaining);\n  else if (res > (ssize_t) remaining)\n    fprintf(f, \"  ERROR: res (%zd) > remaining_space (%zu) -> overflow already occurred\\n\",\n            res, remaining);\n  else\n    fprintf(f, \"  OK: res (%zd) < remaining_space (%zu)\\n\", res, remaining);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Log entry state */\n  mhd_log_uname_state(\"entry\", params, uname_type, buf, buf_size, buf_used);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n\n    /* Log before invoking the copy helper */\n    mhd_log_uname_state(\"before STANDARD copy\", params, uname_type, buf, buf_size, buf_used);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    /* Log result and whether it would overflow given remaining space */\n    mhd_log_after_param_copy(\"STANDARD\", params, uname_type, buf, buf_size, buf_used, uname_info->username_len);\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n\n    /* Log before invoking the copy helper */\n    mhd_log_uname_state(\"before USERHASH copy\", params, uname_type, buf, buf_size, buf_used);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    /* Log result and whether it would overflow given remaining space */\n    mhd_log_after_param_copy(\"USERHASH\", params, uname_type, buf, buf_size, buf_used, uname_info->userhash_hex_len);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n\n    /* Log before invoking the extended copy helper */\n    mhd_log_uname_state(\"before EXTENDED copy\", params, uname_type, buf, buf_size, buf_used);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      /* Log the result and potential off-by-one terminator issue */\n      mhd_log_after_extended(\"EXTENDED\", params, uname_type, buf, buf_size, buf_used, res);\n\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  /* Log final state */\n  mhd_log_uname_state(\"exit\", params, uname_type, buf, buf_size, buf_used);\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}