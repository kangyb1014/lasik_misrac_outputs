{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs in the MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH branch: uname_info->userhash_bin is set to (uint8_t *)(buf + buf_used) and MHD_hex_to_bin is called without checking that (buf_size - buf_used) is large enough. MHD_hex_to_bin writes binary bytes into that pointer (out[w++] assignments) and get_rq_param_unquoted_copy_z earlier may also memcpy hex chars into buf without any remaining-size check. The later buf_used += res merely updates the counter and does not prevent the prior unchecked writes; since mhd_assert is a no-op, no runtime bound check exists. Therefore the code can cause accesses beyond the bounds of buf \u2014 violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <sys/types.h>\n\n/* Minimal type and function declarations to allow compilation. */\nenum MHD_DigestAuthUsernameType\n{\n  MHD_DIGEST_AUTH_UNAME_TYPE_INVALID = 0,\n  MHD_DIGEST_AUTH_UNAME_TYPE_MISSING = 1,\n  MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD = 2,\n  MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH = 3,\n  MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED = 4\n};\n\nstruct {\n  const char *str;\n  size_t len;\n};\n\nstruct MHD_RqDAuth {\n  const char *username;\n  struct {\n    const char *str;\n    size_t len;\n  } username_ext;\n};\n\nstruct MHD_DigestAuthUsernameInfo {\n  char *username;\n  size_t username_len;\n  char *userhash_hex;\n  size_t userhash_hex_len;\n  uint8_t *userhash_bin;\n  enum MHD_DigestAuthUsernameType uname_type;\n};\n\n/* External functions used by get_rq_uname (declared, not defined here). */\nextern enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params);\n\nextern size_t\nget_rq_param_unquoted_copy_z (const char *src, char *dst);\n\nextern size_t\nMHD_hex_to_bin (const char *hex, size_t hexlen, uint8_t *out);\n\nextern ssize_t\nget_rq_extended_uname_copy_z (const char *str, size_t len, char *out, size_t outlen);\n\n/* mhd_assert is defined as a no-op to preserve original behaviour. */\nstatic void mhd_assert (int x)\n{\n  (void)x;\n}\n\n/* Simple logging helper that appends formatted messages to /tmp/logs/23.txt. */\nstatic void\nmhd_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (NULL == f)\n    return; /* Don't affect program flow if logging fails */\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Initial state logging */\n  mhd_log (\"enter get_rq_uname: uname_type=%d, buf=%p, buf_size=%zu\", (int) uname_type, (void *) buf, buf_size);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    mhd_log (\"branch: STANDARD\");\n    uname_info->username = (char *) (buf + buf_used);\n    mhd_log (\"before get_rq_param_unquoted_copy_z (STANDARD): dst=%p, buf_used=%zu, buf_size=%zu\", (void *) uname_info->username, buf_used, buf_size);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    mhd_log (\"after get_rq_param_unquoted_copy_z (STANDARD): username_len=%zu\", uname_info->username_len);\n    buf_used += uname_info->username_len + 1;\n    mhd_log (\"updated buf_used=%zu\", buf_used);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    mhd_log (\"branch: USERHASH\");\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    mhd_log (\"before get_rq_param_unquoted_copy_z (USERHASH hex): dst=%p, buf_used=%zu, buf_size=%zu\", (void *) uname_info->userhash_hex, buf_used, buf_size);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    mhd_log (\"after get_rq_param_unquoted_copy_z (USERHASH hex): userhash_hex_len=%zu\", uname_info->userhash_hex_len);\n    buf_used += uname_info->userhash_hex_len + 1;\n    mhd_log (\"after reserving hex in buffer: buf_used=%zu\", buf_used);\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n\n    /* Log remaining space available for binary data and expected bin length */\n    {\n      size_t remaining = (buf_size > buf_used) ? (buf_size - buf_used) : 0;\n      size_t expected_bin_len = uname_info->userhash_hex_len / 2;\n      mhd_log (\"about to call MHD_hex_to_bin: userhash_hex=%p, hex_len=%zu, userhash_bin=%p, remaining_space=%zu, expected_bin_len=%zu\",\n               (void *) uname_info->userhash_hex,\n               uname_info->userhash_hex_len,\n               (void *) uname_info->userhash_bin,\n               remaining,\n               expected_bin_len);\n    }\n\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    mhd_log (\"MHD_hex_to_bin returned res=%zu\", res);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      mhd_log (\"hex_to_bin length mismatch: res=%zu, expected=%zu => marking INVALID\", res, uname_info->userhash_hex_len / 2);\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      mhd_log (\"USERHASH success: userhash_bin=%p, res=%zu, buf_used=%zu\", (void *) uname_info->userhash_bin, res, buf_used);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    mhd_log (\"branch: EXTENDED (before get_rq_extended_uname_copy_z): dst=%p, buf_used=%zu, buf_size=%zu\", (void *) (buf + buf_used), buf_used, buf_size);\n    res = get_rq_extended_uname_copy_z (params->username_ext.str,\n                                        params->username_ext.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    mhd_log (\"get_rq_extended_uname_copy_z returned res=%zd\", res);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      mhd_log (\"EXTENDED success: username_len=%zu, buf_used=%zu\", uname_info->username_len, buf_used);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    mhd_log (\"branch: UNKNOWN -> INVALID\");\n  }\n  mhd_log (\"final buf_used=%zu, buf_size=%zu, uname_type=%d\", buf_used, buf_size, (int) uname_info->uname_type);\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}