{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation: buf_used is incremented without ensuring the destination buffer has enough remaining space. In the USERHASH branch uname_info->userhash_hex is set to (char *)(buf + buf_used) and get_rq_param_unquoted_copy_z copies param->value.len bytes via memcpy into that location and writes a terminating NUL (buf[uname_info->userhash_hex_len] = 0) but no check is made against buf_size - buf_used. If buf_size - buf_used < uname_info->userhash_hex_len + 1, memcpy and the terminating write will access beyond the bounds of buf (and subsequently MHD_hex_to_bin may also write beyond the buffer when filling userhash_bin). Example scenario: buf_size == 10, buf_used == 6, and the username hex length is 5 -> get_rq_param_unquoted_copy_z will copy 5 bytes and write a NUL (6 bytes) into buf+6 which exceeds buf_size; this causes out-of-bounds writes by memcpy/byte store, violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputs(\"\\n\", f);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Initial state logging */\n  mhd_probe_log (\"ENTER get_rq_uname: uname_type=%d, params=%p, buf=%p, buf_size=%zu\",\n                 (int) uname_type, (const void *) params, (const void *) buf, buf_size);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    mhd_probe_log (\"BRANCH STANDARD: buf_used=%zu, target_ptr=%p, remaining=%zu\",\n                   buf_used, (const void *) (buf + buf_used),\n                   (buf_size >= buf_used) ? buf_size - buf_used : 0);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    /* Log after copy: length and remaining space vs required */\n    {\n      size_t needed = uname_info->username_len + 1U;\n      size_t remaining = (buf_size >= buf_used) ? buf_size - buf_used : 0;\n      mhd_probe_log (\"AFTER STANDARD copy: username_len=%zu, needed=%zu, remaining_before=%zu\",\n                     uname_info->username_len, needed, remaining);\n    }\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    mhd_probe_log (\"BRANCH USERHASH: buf_used=%zu, target_hex_ptr=%p, remaining=%zu\",\n                   buf_used, (const void *) (buf + buf_used),\n                   (buf_size >= buf_used) ? buf_size - buf_used : 0);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    /* Probe right after writing hex string into buffer */\n    {\n      size_t needed_hex = uname_info->userhash_hex_len + 1U; /* include terminating NUL */\n      size_t remaining_before = (buf_size >= buf_used) ? buf_size - buf_used : 0;\n      mhd_probe_log (\"AFTER USERHASH hex copy: userhash_hex_len=%zu, needed_hex=%zu, remaining_before=%zu, buf_size=%zu, buf_used=%zu\",\n                     uname_info->userhash_hex_len, needed_hex, remaining_before, buf_size, buf_used);\n\n      if (remaining_before < needed_hex)\n      {\n        mhd_probe_log (\"POTENTIAL OVERFLOW DETECTED: remaining_before (%zu) < needed_hex (%zu)\",\n                       remaining_before, needed_hex);\n      }\n    }\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    mhd_probe_log (\"MHD_hex_to_bin returned res=%zu, expected=%zu\",\n                   res, uname_info->userhash_hex_len / 2U);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      mhd_probe_log (\"USERHASH parse failed: setting userhash_bin=NULL and uname_type=INVALID\");\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      /* Log buffer usage after converting hex to binary */\n      mhd_probe_log (\"AFTER USERHASH bin write: res=%zu, buf_used=%zu, buf_size=%zu, remaining_after=%zu\",\n                     res, buf_used, buf_size,\n                     (buf_size >= buf_used) ? buf_size - buf_used : 0);\n\n      if (buf_size < buf_used)\n      {\n        mhd_probe_log (\"BUFFER OVERFLOW OCCURRED: buf_used (%zu) > buf_size (%zu)\", buf_used, buf_size);\n      }\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    mhd_probe_log (\"BRANCH EXTENDED: buf_used=%zu, remaining=%zu\",\n                   buf_used, (buf_size >= buf_used) ? buf_size - buf_used : 0);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      mhd_probe_log (\"AFTER EXTENDED copy: username_len=%zu, buf_used=%zu, buf_size=%zu, remaining_after=%zu\",\n                     uname_info->username_len, buf_used, buf_size,\n                     (buf_size >= buf_used) ? buf_size - buf_used : 0);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  /* Final state logging before returning */\n  mhd_probe_log (\"EXIT get_rq_uname: buf_used=%zu, buf_size=%zu, uname_type_result=%d, username=%p, username_len=%zu, userhash_hex=%p, userhash_hex_len=%zu, userhash_bin=%p\",\n                 buf_used, buf_size, (int) uname_info->uname_type,\n                 (const void *) uname_info->username, uname_info->username_len,\n                 (const void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n                 (const void *) uname_info->userhash_bin);\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_uname. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function performs writes into buf via helper functions without ensuring the destination has enough remaining space in the STANDARD and USERHASH branches. In USERHASH the code does: uname_info->userhash_hex = (char *)(buf + buf_used); then calls get_rq_param_unquoted_copy_z(..., uname_info->userhash_hex) which (by its API) returns the copied length but does not receive a destination-size argument; it therefore may copy the hex string and a terminating NUL beyond buf if buf_size - buf_used < uname_info->userhash_hex_len + 1. After increasing buf_used the code sets uname_info->userhash_bin = buf + buf_used and calls MHD_hex_to_bin to write binary data there; that too can write out of bounds if insufficient remaining space. The STANDARD branch has the same pattern (copy without passing remaining size). Only the EXTENDED branch passes a remaining-size parameter. Because no pre-checks are made to ensure buf_size - buf_used is large enough before the copies, out-of-bounds writes are possible and thus the code can violate MISRA C 2023 Rule 21.17. (The empty probe log does not invalidate the logic; the presented example values demonstrate the overflow.)"
}