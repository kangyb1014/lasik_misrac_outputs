{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nMHD_hex_to_bin writes (len+1)/2 bytes to uname_info->userhash_bin which was set to (uint8_t *)(buf + buf_used) but there is no check that the remaining buffer (buf_size - buf_used) is large enough. get_rq_param_unquoted_copy_z that filled userhash_hex also uses memcpy without checking available space and the mhd_asserts are no-ops, so a carefully crafted username hex string (or a too-small buf_size) can make MHD_hex_to_bin write past the end of buf. Therefore this call can result in accesses beyond the bounds of the object referenced by uname_info->userhash_bin.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\nstatic void\nmhd_logf (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fputc('\\n', f);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  /* Log entry state */\n  mhd_logf (\"get_rq_uname ENTRY: uname_type=%d buf=%p buf_size=%zu\",\n            (int) uname_type, (void *) buf, (size_t) buf_size);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    mhd_logf (\"STANDARD: username_len=%zu before buf_used=%zu\",\n              uname_info->username_len, buf_used);\n    buf_used += uname_info->username_len + 1;\n    mhd_logf (\"STANDARD: buf_used(after)=%zu buf_size=%zu\",\n              buf_used, buf_size);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    mhd_logf (\"USERHASH: hex buffer at %p buf_used=%zu buf_size=%zu\",\n              (void *) uname_info->userhash_hex, buf_used, buf_size);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    mhd_logf (\"USERHASH: userhash_hex_len=%zu after hex copy\",\n              uname_info->userhash_hex_len);\n    buf_used += uname_info->userhash_hex_len + 1;\n    mhd_logf (\"USERHASH: buf_used(after hex)=%zu buf_size=%zu\",\n              buf_used, buf_size);\n\n    /* Log potential space needed for binary form: MHD_hex_to_bin may write (hex_len+1)/2 bytes */\n    {\n      size_t expected_write = (uname_info->userhash_hex_len + 1) / 2;\n      if (buf_used + expected_write > buf_size)\n      {\n        mhd_logf (\"POTENTIAL_OVERFLOW: hex_len=%zu expected_bin_bytes=%zu \"\n                  \"buf_used=%zu buf_size=%zu -> will overflow\",\n                  uname_info->userhash_hex_len, expected_write,\n                  buf_used, buf_size);\n      }\n      else\n      {\n        mhd_logf (\"USERHASH: enough space predicted: expected_bin_bytes=%zu\",\n                  expected_write);\n      }\n    }\n\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    mhd_logf (\"USERHASH: calling MHD_hex_to_bin hex=%p hex_len=%zu bin=%p\",\n              (void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n              (void *) uname_info->userhash_bin);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    mhd_logf (\"USERHASH: MHD_hex_to_bin returned res=%zu expected=%zu\",\n              res, uname_info->userhash_hex_len / 2);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      mhd_logf (\"USERHASH: invalid conversion: setting userhash_bin=NULL uname_type=INVALID\");\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n      {\n        mhd_logf (\"USERHASH: res==0 -> setting userhash_bin to username pointer %p\",\n                  (void *) uname_info->username);\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      }\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      mhd_logf (\"USERHASH: buf_used(after bin)=%zu buf_size=%zu\",\n                buf_used, buf_size);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    mhd_logf (\"EXTENDED: calling get_rq_extended_uname_copy_z with buf_used=%zu buf_size=%zu\",\n              buf_used, buf_size);\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    mhd_logf (\"EXTENDED: get_rq_extended_uname_copy_z returned %zd\", res);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n      mhd_logf (\"EXTENDED: buf_used(after)=%zu buf_size=%zu\",\n                buf_used, buf_size);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_logf (\"get_rq_uname EXIT: final buf_used=%zu buf_size=%zu uname_type=%d username=%p \"\n            \"username_len=%zu userhash_hex=%p userhash_hex_len=%zu userhash_bin=%p\",\n            buf_used, buf_size, (int) uname_info->uname_type,\n            (void *) uname_info->username, uname_info->username_len,\n            (void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n            (void *) uname_info->userhash_bin);\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}