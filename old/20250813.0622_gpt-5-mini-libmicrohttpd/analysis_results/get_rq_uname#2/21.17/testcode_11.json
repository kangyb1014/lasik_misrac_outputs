{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs when uname_type == MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD (or USERHASH) and the remaining buffer (buf_size - buf_used) is smaller than the source length + 1. get_rq_uname passes (buf + buf_used) to get_rq_param_unquoted_copy_z which unconditionally does memcpy(buf, param->value.str, param->value.len) and writes buf[param->value.len] = 0. Because there is no prior check that buf_size - buf_used >= param->value.len + 1 (mhd_assert is a no-op), the memcpy and the terminating write can write beyond the provided buffer; updating buf_used with buf_used += username_len + 1 only occurs after the out-of-bounds write. Thus Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper. Attempts to be minimally invasive. */\nstatic void\nmhd_log_probe_get_rq_uname(const char *note,\n                           const struct MHD_RqDAuth *params,\n                           enum MHD_DigestAuthUsernameType uname_type,\n                           struct MHD_DigestAuthUsernameInfo *uname_info,\n                           uint8_t *buf,\n                           size_t buf_size,\n                           size_t buf_used,\n                           size_t param_len)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s\\n\", (long)t, note);\n  fprintf(f, \"  uname_type=%d, buf=%p, buf_size=%lu, buf_used=%lu\\n\",\n          (int) uname_type, (void *) buf, (unsigned long) buf_size,\n          (unsigned long) buf_used);\n  if (uname_info)\n  {\n    fprintf(f, \"  uname_info=%p, uname_info->username=%p, username_len=%lu, userhash_hex=%p, userhash_hex_len=%lu, userhash_bin=%p\\n\",\n            (void *) uname_info,\n            (void *) uname_info->username,\n            (unsigned long) uname_info->username_len,\n            (void *) uname_info->userhash_hex,\n            (unsigned long) uname_info->userhash_hex_len,\n            (void *) uname_info->userhash_bin);\n  }\n  fprintf(f, \"  param_len=%lu\\n\", (unsigned long) param_len);\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  /* Log entry state */\n  mhd_log_probe_get_rq_uname(\"enter get_rq_uname\", params, uname_type,\n                             uname_info, buf, buf_size, buf_used, 0);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    size_t param_len = 0;\n\n    /* Try to capture the reported parameter length for diagnostics. */\n    /* Accessing params->username.value.len mirrors how the function uses the param. */\n    param_len = (size_t) params->username.value.len;\n\n    uname_info->username = (char *) (buf + buf_used);\n\n    mhd_log_probe_get_rq_uname(\"before get_rq_param_unquoted_copy_z (STANDARD)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, param_len);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    mhd_log_probe_get_rq_uname(\"after get_rq_param_unquoted_copy_z (STANDARD)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, (size_t) uname_info->username_len);\n\n    buf_used += uname_info->username_len + 1;\n\n    mhd_log_probe_get_rq_uname(\"after increment buf_used (STANDARD)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, (size_t) uname_info->username_len);\n\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n    size_t param_len = (size_t) params->username.value.len;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n\n    mhd_log_probe_get_rq_uname(\"before get_rq_param_unquoted_copy_z (USERHASH)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, param_len);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    mhd_log_probe_get_rq_uname(\"after get_rq_param_unquoted_copy_z (USERHASH)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, (size_t) uname_info->userhash_hex_len);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n\n      mhd_log_probe_get_rq_uname(\"userhash hex->bin failed (USERHASH)\",\n                                 params, uname_type, uname_info, buf, buf_size,\n                                 buf_used, (size_t) uname_info->userhash_hex_len);\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      mhd_log_probe_get_rq_uname(\"after processing USERHASH success\", params,\n                                 uname_type, uname_info, buf, buf_size,\n                                 buf_used, (size_t) uname_info->userhash_hex_len);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    size_t param_len = (size_t) params->username_ext.value.len;\n\n    mhd_log_probe_get_rq_uname(\"before get_rq_extended_uname_copy_z (EXTENDED)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, param_len);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n\n    mhd_log_probe_get_rq_uname(\"after get_rq_extended_uname_copy_z (EXTENDED)\",\n                               params, uname_type, uname_info, buf, buf_size,\n                               buf_used, (res >= 0) ? (size_t) res : 0);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      mhd_log_probe_get_rq_uname(\"after increment buf_used (EXTENDED)\",\n                                 params, uname_type, uname_info, buf, buf_size,\n                                 buf_used, uname_info->username_len);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n\n    mhd_log_probe_get_rq_uname(\"unexpected uname_type (else branch)\", params,\n                               uname_type, uname_info, buf, buf_size, buf_used, 0);\n  }\n  mhd_assert (buf_size >= buf_used);\n\n  mhd_log_probe_get_rq_uname(\"exit get_rq_uname\", params, uname_type,\n                             uname_info, buf, buf_size, buf_used, 0);\n  return buf_used;\n}\n"
}