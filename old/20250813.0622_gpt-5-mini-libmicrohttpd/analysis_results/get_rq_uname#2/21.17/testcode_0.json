{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen uname_type is STANDARD (or USERHASH) the code sets uname_info->username = (char *)(buf + buf_used) and immediately calls get_rq_param_unquoted_copy_z which performs memcpy(buf, param->value.str, param->value.len) and then writes a terminating '\\0' at buf[param->value.len]. There is no check that buf_size - buf_used > = param->value.len + 1, so if the remaining buffer space is smaller than the username length + 1 this results in writes beyond the bounds of buf (buffer overflow).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Helper probe that logs control flow and key state to /tmp/logs/23.txt */\nstatic void\nmhd_log_uname_probe(const char *stage,\n                     const struct MHD_RqDAuth *params,\n                     enum MHD_DigestAuthUsernameType uname_type,\n                     struct MHD_DigestAuthUsernameInfo *uname_info,\n                     uint8_t *buf,\n                     size_t buf_size,\n                     size_t buf_used)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf(f, \"STAGE=%s\\n\", stage);\n  fprintf(f, \"  uname_type=%d\\n\", (int) uname_type);\n  fprintf(f, \"  params=%p\\n\", (const void *) params);\n  if (params)\n  {\n    /* Print fields we expect to exist/are used by the implementation */\n    fprintf(f, \"  params->username (struct) addr=%p\\n\", (const void *) &params->username);\n    /* Try to print the length and pointer of the param value if available */\n    fprintf(f, \"  params->username.value.str=%p\\n\", (const void *) params->username.value.str);\n    fprintf(f, \"  params->username.value.len=%llu\\n\", (unsigned long long) params->username.value.len);\n  }\n\n  fprintf(f, \"  buf=%p\\n\", (const void *) buf);\n  fprintf(f, \"  buf_size=%llu\\n\", (unsigned long long) buf_size);\n  fprintf(f, \"  buf_used=%llu\\n\", (unsigned long long) buf_used);\n  fprintf(f, \"  uname_info=%p\\n\", (const void *) uname_info);\n  if (uname_info)\n  {\n    fprintf(f, \"  uname_info->username=%p\\n\", (const void *) uname_info->username);\n    fprintf(f, \"  uname_info->username_len=%llu\\n\", (unsigned long long) uname_info->username_len);\n    fprintf(f, \"  uname_info->userhash_hex=%p\\n\", (const void *) uname_info->userhash_hex);\n    fprintf(f, \"  uname_info->userhash_hex_len=%llu\\n\", (unsigned long long) uname_info->userhash_hex_len);\n    fprintf(f, \"  uname_info->userhash_bin=%p\\n\", (const void *) uname_info->userhash_bin);\n  }\n  fprintf(f, \"\\n\");\n\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  /* Log entry state */\n  mhd_log_uname_probe(\"entry\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n\n    /* Probe before calling get_rq_param_unquoted_copy_z for STANDARD */\n    mhd_log_uname_probe(\"before_unquoted_copy_standard\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    /* Probe after the copy (captures username_len and updated memory pointers) */\n    mhd_log_uname_probe(\"after_unquoted_copy_standard\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n\n    /* Probe before calling get_rq_param_unquoted_copy_z for USERHASH */\n    mhd_log_uname_probe(\"before_unquoted_copy_userhash\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    /* Log right after hex string copy */\n    mhd_log_uname_probe(\"after_unquoted_copy_userhash\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n\n    /* Probe final state inside USERHASH branch */\n    mhd_log_uname_probe(\"end_userhash_branch\", params, uname_type, uname_info, buf, buf_size, buf_used);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n\n    /* Probe state after EXTENDED handling */\n    mhd_log_uname_probe(\"end_extended_branch\", params, uname_type, uname_info, buf, buf_size, buf_used);\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  /* Final probe before return - captures final sizes used and buffer limits */\n  mhd_log_uname_probe(\"final\", params, uname_type, uname_info, buf, buf_size, buf_used);\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}