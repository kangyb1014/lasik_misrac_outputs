{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen uname_type == MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH and buf does not have at least (params->username.value.len + 1) bytes remaining at offset buf_used: uname_info->userhash_hex is set to (char *)(buf + buf_used) and then get_rq_param_unquoted_copy_z performs memcpy(buf+buf_used, param->value.str, param->value.len) and writes a terminating NUL at buf[param->value.len], which can write past buf_size \u2014 causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/23.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_rq_uname as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\nPlease provide the modified get_rq_uname code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\nstatic void\nmhd_log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/23.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  /* Log entry and basic inputs */\n  mhd_log_probe(\"ENTER get_rq_uname: uname_type=%d, buf=%p, buf_size=%zu\",\n                (int) uname_type, (void *) buf, buf_size);\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    /* Log branch taken and parameter info */\n    mhd_log_probe(\"BRANCH STANDARD: params->username.value.str=%p, params->username.value.len=%zu, buf_used=%zu\",\n                  (void *) params->username.value.str,\n                  (size_t) params->username.value.len,\n                  buf_used);\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    /* Log result of copy */\n    mhd_log_probe(\"AFTER copy STANDARD: username_len=%zu, buf_used_before=%zu\",\n                  uname_info->username_len, buf_used);\n\n    buf_used += uname_info->username_len + 1;\n\n    mhd_log_probe(\"AFTER STANDARD: buf_used=%zu, buf_size=%zu, username_ptr=%p\",\n                  buf_used, buf_size, (void *) uname_info->username);\n\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    /* Log branch taken and parameter info relevant to the reported scenario */\n    mhd_log_probe(\"BRANCH USERHASH: params->username.value.str=%p, params->username.value.len=%zu, buf=%p, buf_size=%zu, buf_used=%zu\",\n                  (void *) params->username.value.str,\n                  (size_t) params->username.value.len,\n                  (void *) buf,\n                  buf_size,\n                  buf_used);\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    /* Log the length copied into hex buffer and the intended write positions */\n    mhd_log_probe(\"AFTER copy USERHASH: userhash_hex_len=%zu, buf_used_before=%zu, write_end_index=%zu, buf_size=%zu\",\n                  uname_info->userhash_hex_len,\n                  buf_used,\n                  buf_used + uname_info->userhash_hex_len,\n                  buf_size);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n\n    mhd_log_probe(\"BEFORE hex_to_bin: userhash_hex=%p, userhash_hex_len=%zu, userhash_bin_ptr=%p, buf_used_after_hex=%zu\",\n                  (void *) uname_info->userhash_hex,\n                  uname_info->userhash_hex_len,\n                  (void *) (buf + buf_used),\n                  buf_used);\n\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    mhd_log_probe(\"AFTER hex_to_bin: res=%zu, expected_bin_len=%zu, buf_used_before_bin_add=%zu, buf_size=%zu\",\n                  res,\n                  uname_info->userhash_hex_len / 2,\n                  buf_used,\n                  buf_size);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n\n      mhd_log_probe(\"USERHASH INVALID: res_mismatch, set uname_type=INVALID\");\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      mhd_log_probe(\"USERHASH OK: buf_used_after_all=%zu, buf_size=%zu, userhash_hex_ptr=%p, userhash_bin_ptr=%p\",\n                    buf_used, buf_size, (void *) uname_info->userhash_hex, (void *) uname_info->userhash_bin);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n\n    mhd_log_probe(\"BRANCH EXTENDED: params->username_ext.value.str=%p, params->username_ext.value.len=%zu, buf_used=%zu, buf_size=%zu\",\n                  (void *) params->username_ext.value.str,\n                  (size_t) params->username_ext.value.len,\n                  buf_used,\n                  buf_size);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n\n    mhd_log_probe(\"AFTER copy EXTENDED: res=%zd, buf_used_before=%zu, buf_size=%zu\",\n                  res, buf_used, buf_size);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      mhd_log_probe(\"EXTENDED OK: username_len=%zu, buf_used=%zu, buf_size=%zu, username_ptr=%p\",\n                    uname_info->username_len, buf_used, buf_size, (void *) uname_info->username);\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    mhd_log_probe(\"BRANCH UNKNOWN: set uname_type=INVALID\");\n  }\n\n  mhd_log_probe(\"EXIT get_rq_uname: final_buf_used=%zu, buf_size=%zu, assert_check=%d\",\n                buf_used, buf_size, (int) (buf_size >= buf_used));\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}