{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression-statement \u201c(void) used;\u201d is an executed no-op whose removal would not affect program behaviour (it only suppresses an unused-variable warning). Therefore it constitutes dead code according to Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n  FILE *log = fopen(\"/tmp/logs/18.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER get_rq_uname: params=%p uname_type=%d buf=%p buf_size=%zu\\n\",\n            (const void *) params, (int) uname_type, (void *) buf, buf_size);\n  }\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (log)\n  {\n    fprintf(log, \"After init: username=%p username_len=%zu userhash_hex=%p userhash_hex_len=%zu userhash_bin=%p buf_used=%zu\\n\",\n            (void *) uname_info->username, uname_info->username_len,\n            (void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n            (void *) uname_info->userhash_bin, buf_used);\n  }\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    if (log)\n      fprintf(log, \"BRANCH: STANDARD\\n\");\n\n    uname_info->username = (char *) (buf + buf_used);\n    if (log)\n      fprintf(log, \"Calling get_rq_param_unquoted_copy_z for STANDARD: dest=%p\\n\", (void *) uname_info->username);\n\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n\n    if (log)\n      fprintf(log, \"Returned username_len=%zu\\n\", uname_info->username_len);\n\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    if (log)\n      fprintf(log, \"STANDARD done: username=%p username_len=%zu buf_used=%zu\\n\",\n              (void *) uname_info->username, uname_info->username_len, buf_used);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    if (log)\n      fprintf(log, \"BRANCH: USERHASH\\n\");\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    if (log)\n      fprintf(log, \"Calling get_rq_param_unquoted_copy_z for USERHASH: dest=%p\\n\", (void *) uname_info->userhash_hex);\n\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n\n    if (log)\n      fprintf(log, \"Returned userhash_hex_len=%zu\\n\", uname_info->userhash_hex_len);\n\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n\n    if (log)\n      fprintf(log, \"Calling MHD_hex_to_bin: hex=%p hex_len=%zu dest_bin=%p\\n\",\n              (void *) uname_info->userhash_hex, uname_info->userhash_hex_len, (void *) uname_info->userhash_bin);\n\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n\n    if (log)\n      fprintf(log, \"MHD_hex_to_bin returned res=%zu\\n\", res);\n\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      if (log)\n        fprintf(log, \"USERHASH invalid: expected %zu got %zu\\n\",\n                uname_info->userhash_hex_len / 2, res);\n\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n      {\n        if (log)\n          fprintf(log, \"USERHASH res==0: point userhash_bin to username (%p) to avoid OOB\\n\", (void *) uname_info->username);\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      }\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      if (log)\n        fprintf(log, \"USERHASH done: userhash_hex=%p userhash_hex_len=%zu userhash_bin=%p buf_used=%zu\\n\",\n                (void *) uname_info->userhash_hex, uname_info->userhash_hex_len, (void *) uname_info->userhash_bin, buf_used);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n\n    if (log)\n      fprintf(log, \"BRANCH: EXTENDED\\nCalling get_rq_extended_uname_copy_z with src=%p len=%zu dest=%p avail=%zu\\n\",\n              (void *) params->username_ext.value.str, (size_t) params->username_ext.value.len,\n              (void *) (buf + buf_used), buf_size - buf_used);\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n\n    if (log)\n      fprintf(log, \"get_rq_extended_uname_copy_z returned res=%zd\\n\", res);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      if (log)\n        fprintf(log, \"EXTENDED done: username=%p username_len=%zu buf_used=%zu\\n\",\n                (void *) uname_info->username, uname_info->username_len, buf_used);\n    }\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"BRANCH: UNKNOWN uname_type=%d -- triggering assert and setting INVALID\\n\", (int) uname_type);\n\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"Before final assert: buf_size=%zu buf_used=%zu uname_type=%d username=%p username_len=%zu userhash_hex=%p userhash_hex_len=%zu userhash_bin=%p\\n\",\n            buf_size, buf_used, (int) uname_info->uname_type,\n            (void *) uname_info->username, uname_info->username_len,\n            (void *) uname_info->userhash_hex, uname_info->userhash_hex_len,\n            (void *) uname_info->userhash_bin);\n    fflush(log);\n    fclose(log);\n  }\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for get_rq_uname. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct for the supplied code. The reported offending expression \"(void) used;\" does not appear anywhere in the original get_rq_uname implementation you provided, nor in the instrumentation (logging) version. Therefore Agent A's scenario does not correspond to the target code and cannot be used to show a Rule 2.2 violation of this function.\n\n(For completeness: an expression-statement such as (void)x; that solely exists to suppress an \"unused variable\" warning is a no-op whose removal would not change program behaviour and would indeed meet the textual definition of \"dead code\" in Rule 2.2. However, since no such statement exists in the shown code, that observation is irrelevant here. The empty test log only indicates the instrumented function was not executed by the test harness; it does not demonstrate the presence of the claimed statement.)"
}