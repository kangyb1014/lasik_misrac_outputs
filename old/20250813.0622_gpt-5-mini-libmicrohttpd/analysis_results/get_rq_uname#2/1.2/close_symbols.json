{
  "user_message": "Target function code is:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_rq_uname': {'callees': ['get_rq_param_unquoted_copy_z', 'MHD_hex_to_bin', 'get_rq_extended_uname_copy_z'], 'callers': ['MHD_digest_auth_get_request_info3', 'MHD_digest_auth_get_username3', 'MHD_digest_auth_get_username']}, 'get_rq_param_unquoted_copy_z': {'callees': ['MHD_str_unquote'], 'callers': ['get_rq_uname', 'MHD_digest_auth_get_request_info3']}, 'MHD_hex_to_bin': {'callees': ['toxdigitvalue'], 'callers': ['get_rq_uname', 'digest_auth_check_all_inner']}, 'get_rq_extended_uname_copy_z': {'callees': ['MHD_str_pct_decode_strict_n_'], 'callers': ['get_rq_uname', 'digest_auth_check_all_inner']}, 'MHD_digest_auth_get_request_info3': {'callees': ['MHD_get_rq_dauth_params_', 'get_rq_uname_type', 'get_rq_unames_size', 'get_rq_uname', 'get_rq_param_unquoted_copy_z', 'get_rq_nc'], 'callers': []}, 'MHD_digest_auth_get_username3': {'callees': ['MHD_get_rq_dauth_params_', 'get_rq_uname_type', 'get_rq_unames_size', 'get_rq_uname'], 'callers': ['handle_sec_areas_req']}, 'MHD_digest_auth_get_username': {'callees': ['MHD_get_rq_dauth_params_', 'get_rq_uname_type', 'get_rq_unames_size', 'get_rq_uname'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mhd_assert",
    "get_rq_uname_type",
    "enum MHD_DigestAuthUsernameType",
    "MHD_DIGEST_AUTH_UNAME_TYPE_INVALID",
    "MHD_DIGEST_AUTH_UNAME_TYPE_MISSING",
    "MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD",
    "MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH",
    "MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED",
    "struct MHD_DigestAuthUsernameInfo",
    "struct MHD_RqDAuth (fields: username, username_ext)",
    "get_rq_param_unquoted_copy_z",
    "MHD_hex_to_bin",
    "get_rq_extended_uname_copy_z",
    "MHD_str_unquote",
    "MHD_str_pct_decode_strict_n_",
    "toxdigitvalue",
    "typedef ssize_t",
    "typedef uint8_t",
    "typedef size_t"
  ],
  "explanation": "For checking use of compiler language extensions you must inspect not only the target function body but also any macros, types and called routines that could hide extensions (attributes, builtin intrinsics, GCC/Clang keywords, statement-expressions, nested functions, inline asm, nonstandard typedefs, etc.). For each listed symbol you should verify the following:\n\n- mhd_assert: likely a macro; macros often wrap compiler builtins or attributes (e.g. __builtin_expect, __attribute__, statement-expression ({ ... })) or nonstandard diagnostics. Inspect its definition for any compiler-specific extensions.\n\n- get_rq_uname_type: could be a function-like macro or inline function that uses extensions; check its definition for statement-expressions, typeof, __attribute__, nested functions, or other extensions.\n\n- enum MHD_DigestAuthUsernameType and MHD_DIGEST_AUTH_UNAME_TYPE_* constants: check how the enum/constants are declared (enum vs macros) and whether any nonstandard annotations (e.g. __attribute__((packed)), unusual underlying type specifiers) are used.\n\n- struct MHD_DigestAuthUsernameInfo: inspect the struct definition for compiler-specific annotations on members or the struct itself (e.g. __attribute__((aligned/...)), packed, visibility attributes) and any nonstandard member types.\n\n- struct MHD_RqDAuth (especially fields username and username_ext): the function uses params->username and params->username_ext.value.* \u2014 inspect these declarations for unions, flexible array usage, or attributes that might be extensions.\n\n- get_rq_param_unquoted_copy_z, MHD_hex_to_bin, get_rq_extended_uname_copy_z: these callee implementations/prototypes may themselves use compiler extensions (attributes on functions, inline assembly, statement-expressions, GCC attributes like format, sentinel, visibility, or nonstandard calling conventions). Inspect prototypes and bodies for any such extensions.\n\n- MHD_str_unquote and MHD_str_pct_decode_strict_n_: indirect callees used by the above helpers; they can also embed extensions (macros, builtins) that affect overall conformance \u2014 check their definitions.\n\n- toxdigitvalue: used inside MHD_hex_to_bin (static call graph). If it is a macro or inline helper it might use statement-expressions or other extensions \u2014 check definition.\n\n- typedef ssize_t, typedef uint8_t, typedef size_t: verify these type definitions come from standard headers and are not implemented via compiler-specific typedefs or intrinsics. ssize_t is POSIX (not strictly ISO C); confirm how it is provided in the codebase/headers and whether any nonstandard synonyms or attributes are involved.\n\nThese symbols together cover macros, types, struct/enum declarations and called functions that could conceal language/compiler extensions; each should be inspected so the next analyzer can determine whether the target function (and its dependent definitions) uses any compiler language extensions forbidden by the MISRA rule."
}