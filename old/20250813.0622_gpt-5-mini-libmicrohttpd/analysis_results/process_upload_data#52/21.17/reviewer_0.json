{
  "user_message": "An agent A claimed that the following process_upload_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of process_upload_data.\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call to memcpy(&buf[old_len], data, size) can read beyond the bounds of the source object if the caller supplies a data pointer that does not reference at least size bytes (for example, data == NULL with size > 0, or size larger than the actual buffer provided). In that case memcpy will access memory beyond the source object and violate MISRA C 2023 Rule 21.17. (The destination is sized correctly by malloc(old_len + size + 1), so overflow of the destination is not the issue.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Opaque declaration so the pointer can be printed. The definition is not\n   required for this function to compile. */\nstruct UploadContext;\n\nstatic void\nprobe_log(const char *stage,\n          struct UploadContext *uc,\n          const char *key,\n          const char *filename,\n          const char *content_type,\n          const char *transfer_encoding,\n          const char *data,\n          uint64_t off,\n          size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"STAGE: %s\\n\", stage ? stage : \"(null)\");\n  fprintf(f,\n          \"  cls(uc)=%p, key=%p (%s), filename=%p (%s), content_type=%p (%s), transfer_encoding=%p (%s)\\n\",\n          (void *) uc,\n          (const void *) key, (key != NULL) ? key : \"(null)\",\n          (const void *) filename, (filename != NULL) ? filename : \"(null)\",\n          (const void *) content_type, (content_type != NULL) ? content_type : \"(null)\",\n          (const void *) transfer_encoding, (transfer_encoding != NULL) ? transfer_encoding : \"(null)\");\n\n  /* Use PRIu64 for portable printing of uint64_t and %zu for size_t. */\n  fprintf(f, \"  off=%\" PRIu64 \", size=%zu\\n\", off, size);\n\n  if (data != NULL && size > 0) {\n    /* Print the data in a readable form: printable characters as-is,\n       non-printable bytes as hex escapes. Limit is the provided size. */\n    fprintf(f, \"  data (first %zu bytes): \", size);\n    for (size_t i = 0; i < size; ++i) {\n      unsigned char c = (unsigned char) data[i];\n      if (c >= 32 && c <= 126) {\n        fputc(c, f);\n      } else {\n        fprintf(f, \"\\\\x%02x\", c);\n      }\n    }\n    fputc('\\n', f);\n  } else {\n    fprintf(f, \"  data=(null) or size=0\\n\");\n  }\n\n  fclose(f);\n}\n\n```\nThe test code failed to parse, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation (memcpy(&buf[old_len], data, size) reading past the source) describes a real class of defect, but the evidence in the supplied process_upload_data() is insufficient to conclude a definitive MISRA 21.17 violation. process_upload_data() itself does not call memcpy or other <string.h> functions; it forwards the pointer and length to do_append(&uc->category, data, size) and do_append(&uc->language, data, size). If do_append internally performs a raw memcpy(src=data, n=size) without checking that data is non-NULL and that it points to at least size bytes, then that implementation would indeed violate Rule 21.17. However, that is a property of do_append (or of the caller/API contract) \u2014 not proven from the code shown here. Also, if the surrounding API (e.g. the MHD library callback contract) guarantees that when size>0 the data pointer is valid and addresses at least size bytes (and data is non-NULL), then passing data and size is safe and no MISRA violation occurs in this function.\n\nConclusion: the agent\u2019s scenario is plausible but not established by the provided code. To decide definitively you must either inspect the implementation of do_append (to see whether it guards/checks or blindly calls memcpy) or show the external API precondition that data is valid for size bytes. Without that, the report is not proven correct."
}