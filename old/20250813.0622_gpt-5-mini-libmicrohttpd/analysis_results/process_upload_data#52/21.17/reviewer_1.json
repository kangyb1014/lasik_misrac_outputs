{
  "user_message": "An agent A claimed that the following process_upload_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of process_upload_data.\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Calling strcmp(key, \"category\") without first ensuring that key is a valid non-NULL, NUL-terminated string can cause out\u2011of\u2011bounds accesses. For example, if key == NULL (or points to a buffer that is not NUL-terminated), strcmp will dereference/read beyond the object\u2019s bounds, violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  FILE *logf = NULL;\n\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  /* Probe: log entry state. We intentionally do NOT dereference `key` here,\n     to avoid introducing additional undefined behaviour beyond the original\n     code. We log pointer values and sizes so a reproducer can see what was\n     provided prior to any strcmp invocation. */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"process_upload_data ENTRY: uc=%p key=%p filename=%p data=%p off=%llu size=%zu\\n\",\n            (void *) uc,\n            (void *) key,\n            (void *) filename,\n            (void *) data,\n            (unsigned long long) off,\n            size);\n    fclose(logf);\n  }\n\n  /* Log just before the first strcmp. Purposefully do not change the\n     subsequent strcmp call (even if key is NULL) so that a crash or other\n     misbehaviour observed corresponds to the original code path. */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"category\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 == strcmp (key, \"category\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Matched form field: category (key=%p)\\n\", (void *) key);\n      fclose(logf);\n    }\n    return do_append (&uc->category, data, size);\n  }\n\n  /* Log before second strcmp */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"language\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 == strcmp (key, \"language\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Matched form field: language (key=%p)\\n\", (void *) key);\n      fclose(logf);\n    }\n    return do_append (&uc->language, data, size);\n  }\n\n  /* Log before third strcmp */\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call strcmp(key, \\\"upload\\\"): key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  if (0 != strcmp (key, \"upload\"))\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      /* Note: avoid printing `key` as a string because it may be NULL or\n         not NUL-terminated; print only the pointer. */\n      fprintf (logf,\n               \"Ignoring unexpected form value: key=%p\\n\",\n               (void *) key);\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n\n  if (NULL == filename)\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"No filename provided for upload (key=%p). Aborting.\\n\", (void *) key);\n      fclose(logf);\n    }\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf,\n              \"Missing form data for upload: filename=%p uc->category=%p uc->language=%p\\n\",\n              (void *) filename, (void *) uc->category, (void *) uc->language);\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf, \"Error opening file for upload: path=%s errno=%d (%s)\\n\", fn, errno, strerror(errno));\n        fclose(logf);\n      }\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Error writing to file: filename=%p uc->filename=%p errno=%d (%s)\\n\",\n              (void *) filename,\n              (void *) uc->filename,\n              errno,\n              strerror(errno));\n      fclose(logf);\n    }\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n\n  logf = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"process_upload_data EXIT: returning MHD_YES for key=%p\\n\", (void *) key);\n    fclose(logf);\n  }\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for process_upload_data. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's scenario is correct. The function calls strcmp(key, \"...\") three times without checking that key is non-NULL or otherwise guaranteeing that key points to a NUL-terminated object. If key were NULL (or pointed to a buffer that is not NUL-terminated), those strcmp calls would read out of bounds, which violates MISRA C 2023 Rule 21.17. \n\nNote: if there is a documented, verifiable external guarantee from the caller/library (e.g. the API that invokes process_upload_data always supplies a valid, NUL-terminated, non-NULL key), then the code could be considered compliant because the precondition prevents out-of-bounds access. Absent such a proven guarantee in the codebase, the function itself must ensure the pointer is valid (e.g. test key != NULL before using strcmp, and ensure any buffer length/termination guarantees)."
}