{
  "user_message": "An agent A claimed that the following process_upload_data code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of process_upload_data.\n```c\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"category\"))\n    return do_append (&uc->category, data, size);\n  if (0 == strcmp (key, \"language\"))\n    return do_append (&uc->language, data, size);\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    return MHD_NO;   /* no filename, error */\n  }\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    if ( (NULL != strstr (filename, \"..\")) ||\n         (NULL != strchr (filename, '/')) ||\n         (NULL != strchr (filename, '\\\\')) )\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If filename is non-NULL but not guaranteed to be a NUL-terminated C string (for example a malformed/malicious input or a buffer with no terminating '\\0' within the referenced object), calls to strstr(filename, \"..\") and strchr(filename, '/')/('\\\\') will scan past the end of the object searching for a '\\0' or the target character, resulting in out-of-bounds reads and undefined behavior. The code does not explicitly ensure filename is NUL-terminated before calling these <string.h> functions, so the rule can be violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nprocess_upload_data (void *cls,\n                     enum MHD_ValueKind kind,\n                     const char *key,\n                     const char *filename,\n                     const char *content_type,\n                     const char *transfer_encoding,\n                     const char *data,\n                     uint64_t off,\n                     size_t size)\n{\n  struct UploadContext *uc = cls;\n  size_t i;\n  int res;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n  (void) off;               /* Unused. Silent compiler warning. */\n\n  /* Log entry into function and key/filename pointers */\n  log_probe(\"process_upload_data: entry; key=%p filename=%p size=%zu\",\n            (void *) key, (void *) filename, size);\n\n  if (0 == strcmp (key, \"category\")) {\n    log_probe(\"process_upload_data: appending to category; data_size=%zu\", size);\n    return do_append (&uc->category, data, size);\n  }\n  if (0 == strcmp (key, \"language\")) {\n    log_probe(\"process_upload_data: appending to language; data_size=%zu\", size);\n    return do_append (&uc->language, data, size);\n  }\n  if (0 != strcmp (key, \"upload\"))\n  {\n    fprintf (stderr,\n             \"Ignoring unexpected form value `%s'\\n\",\n             key);\n    log_probe(\"process_upload_data: unexpected form key='%s' (ignored)\", key);\n    return MHD_YES;   /* ignore */\n  }\n  if (NULL == filename)\n  {\n    fprintf (stderr, \"No filename, aborting upload.\\n\");\n    log_probe(\"process_upload_data: filename is NULL; aborting\");\n    return MHD_NO;   /* no filename, error */\n  }\n\n  /* Log that filename is non-NULL; do not attempt to read beyond what original\n     code would read. We will call the same string functions as original code\n     and capture their results so we don't duplicate reads. */\n  log_probe(\"process_upload_data: filename pointer non-NULL=%p\", (void *) filename);\n\n  if ( (NULL == uc->category) ||\n       (NULL == uc->language) )\n  {\n    fprintf (stderr,\n             \"Missing form data for upload `%s'\\n\",\n             filename);\n    log_probe(\"process_upload_data: missing form data; filename='%s'\", filename);\n    uc->response = request_refused_response;\n    return MHD_NO;\n  }\n  if (-1 == uc->fd)\n  {\n    char fn[PATH_MAX];\n\n    /* To avoid multiple traversals of the potentially non-terminated\n       filename (which is the original source of the rule violation),\n       call the checked functions once and record results, then log them. */\n    const char *found_parent = strstr (filename, \"..\");\n    const char *found_slash = strchr (filename, '/');\n    const char *found_backslash = strchr (filename, '\\\\');\n\n    log_probe(\"process_upload_data: filename checks: filename=%p found_parent=%p found_slash=%p found_backslash=%p\",\n              (void *) filename,\n              (void *) found_parent,\n              (void *) found_slash,\n              (void *) found_backslash);\n\n    if ( (NULL != found_parent) ||\n         (NULL != found_slash) ||\n         (NULL != found_backslash) )\n    {\n      log_probe(\"process_upload_data: refused upload due to suspicious filename; filename=%p\", (void *) filename);\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    /* create directories -- if they don't exist already */\n#ifdef WINDOWS\n    (void) mkdir (uc->language);\n#else\n    (void) mkdir (uc->language, S_IRWXU);\n#endif\n    snprintf (fn, sizeof (fn),\n              \"%s/%s\",\n              uc->language,\n              uc->category);\n#ifdef WINDOWS\n    (void) mkdir (fn);\n#else\n    (void) mkdir (fn, S_IRWXU);\n#endif\n    /* open file */\n    res = snprintf (fn, sizeof (fn),\n                    \"%s/%s/%s\",\n                    uc->language,\n                    uc->category,\n                    filename);\n    log_probe(\"process_upload_data: snprintf returned %d for path generation\", res);\n    if ((0 >= res) || (sizeof (fn) <= (size_t) res))\n    {\n      log_probe(\"process_upload_data: path too long or snprintf error; res=%d\", res);\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    for (i = 0; i < (size_t) res; i++)\n      if (! isprint ((unsigned char) fn[i]))\n        fn[i] = '_';\n    uc->fd = open (fn,\n                   O_CREAT | O_EXCL\n#ifdef O_LARGEFILE\n                   | O_LARGEFILE\n#endif\n                   | O_WRONLY,\n                   S_IRUSR | S_IWUSR);\n    if (-1 == uc->fd)\n    {\n      fprintf (stderr,\n               \"Error opening file `%s' for upload: %s\\n\",\n               fn,\n               strerror (errno));\n      log_probe(\"process_upload_data: open failed for '%s' errno=%d (%s)\", fn, errno, strerror(errno));\n      uc->response = request_refused_response;\n      return MHD_NO;\n    }\n    uc->filename = strdup (fn);\n    log_probe(\"process_upload_data: created and opened file '%s' fd=%d\", fn, uc->fd);\n  }\n  if ( (0 != size) &&\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n       (size != (size_t) write (uc->fd, data, size))\n#else  /* Native W32 */\n       (size != (size_t) write (uc->fd, data, (unsigned int) size))\n#endif /* Native W32 */\n       )\n  {\n    /* write failed; likely: disk full */\n    fprintf (stderr,\n             \"Error writing to file `%s': %s\\n\",\n             uc->filename,\n             strerror (errno));\n    log_probe(\"process_upload_data: write failed to '%s' fd=%d errno=%d (%s)\",\n              uc->filename ? uc->filename : \"(null)\", uc->fd, errno, strerror(errno));\n    uc->response = internal_error_response;\n    (void) close (uc->fd);\n    uc->fd = -1;\n    if (NULL != uc->filename)\n    {\n      unlink (uc->filename);\n      free (uc->filename);\n      uc->filename = NULL;\n    }\n    return MHD_NO;\n  }\n  log_probe(\"process_upload_data: write ok (or no data to write); returning MHD_YES\");\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for process_upload_data. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code calls the string.h functions (strstr, strchr, strcmp, snprintf with a %s argument and later fprintf/strdup of filename) on the pointer filename (and strcmp on key) without any explicit check that those pointers reference NUL-terminated character arrays. Those functions read until a NUL byte, so if a caller were to pass a pointer to a non-NUL-terminated buffer (malformed or malicious input) the calls could scan past the object bounds and cause out-of-bounds reads (undefined behavior). That is exactly what MISRA C 2023 Rule 21.17 prohibits unless there is a documented and enforced precondition that the objects are proper NUL-terminated C strings. The empty test log does not invalidate the correctness of the static issue \u2014 it only shows the test didn\u2019t exercise the function or demonstrate the fault.\n\nMitigations: either ensure by contract that key and filename are always NUL-terminated (and document that precondition), or validate/limit scans (e.g. use strnlen/explicit length checks, memchr/memmem with known lengths, or change the API to pass lengths) before calling the string.h routines.\n"
}