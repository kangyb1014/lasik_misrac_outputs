{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void\nprobe_log(const char *stage,\n          struct UploadContext *uc,\n          const char *key,\n          const char *filename,\n          const char *content_type,\n          const char *transfer_encoding,\n          const char *data,\n          uint64_t off,\n          size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"STAGE: %s\\n\", stage);\n  fprintf(f, \"  cls(uc)=%p, key=%p (%s), filename=%p (%s), content_type=%p, transfer_encoding=%p\\n\",\n          (void *) uc,\n          (const void *) key, (key != NULL) ? key : \"(null)\",\n          (const void *) filename, (filename != NULL) ? filename : \"(null)\",\n          (const void *) content_type,\n          (const void *) transfer_encoding);\n  fprintf(f, \"  off=%\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of process_upload_data as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Opaque declaration so the pointer can be printed. The definition is not\n   required for this function to compile. */\nstruct UploadContext;\n\nstatic void\nprobe_log(const char *stage,\n          struct UploadContext *uc,\n          const char *key,\n          const char *filename,\n          const char *content_type,\n          const char *transfer_encoding,\n          const char *data,\n          uint64_t off,\n          size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/423.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"STAGE: %s\\n\", stage ? stage : \"(null)\");\n  fprintf(f,\n          \"  cls(uc)=%p, key=%p (%s), filename=%p (%s), content_type=%p (%s), transfer_encoding=%p (%s)\\n\",\n          (void *) uc,\n          (const void *) key, (key != NULL) ? key : \"(null)\",\n          (const void *) filename, (filename != NULL) ? filename : \"(null)\",\n          (const void *) content_type, (content_type != NULL) ? content_type : \"(null)\",\n          (const void *) transfer_encoding, (transfer_encoding != NULL) ? transfer_encoding : \"(null)\");\n\n  /* Use PRIu64 for portable printing of uint64_t and %zu for size_t. */\n  fprintf(f, \"  off=%\" PRIu64 \", size=%zu\\n\", off, size);\n\n  if (data != NULL && size > 0) {\n    /* Print the data in a readable form: printable characters as-is,\n       non-printable bytes as hex escapes. Limit is the provided size. */\n    fprintf(f, \"  data (first %zu bytes): \", size);\n    for (size_t i = 0; i < size; ++i) {\n      unsigned char c = (unsigned char) data[i];\n      if (c >= 32 && c <= 126) {\n        fputc(c, f);\n      } else {\n        fprintf(f, \"\\\\x%02x\", c);\n      }\n    }\n    fputc('\\n', f);\n  } else {\n    fprintf(f, \"  data=(null) or size=0\\n\");\n  }\n\n  fclose(f);\n}\n",
  "explanation": "The original code was truncated in the middle of a fprintf format string. I completed the probe_log implementation, added the necessary includes (stdio.h, stdint.h, inttypes.h, stddef.h), and provided an opaque declaration for struct UploadContext so the file compiles without needing the full struct definition. I fixed format specifiers by using PRIu64 for uint64_t and %zu for size_t, handled NULL pointer cases safely, printed data bytes in a readable form, and ensured the file is closed. No main function or macros were added."
}