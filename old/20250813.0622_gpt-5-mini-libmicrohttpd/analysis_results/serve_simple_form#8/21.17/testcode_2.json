{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nadd_response_entry calls strlen(content) after only checking content != NULL but without guaranteeing the buffer is NUL-terminated. If MHD_add_response_header (or any caller) passes a pointer to a buffer that is not terminated with '\\0' (for example a binary buffer or a fixed-size header/value buffer filled without a terminating NUL), strlen(content) will read past the buffer bounds and cause out-of-bounds access/undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* probe logging: record entry and pointer state */\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"ENTER serve_simple_form: cls=%p mime=%p session=%p connection=%p\\n\",\n              cls, (void *) mime, (void *) session, (void *) connection);\n      fprintf(log, \"form(pointer)=%p\\n\", (void *) form);\n      fprintf(log, \"about to call strlen(form) -- this mirrors original behavior\\n\");\n      fclose(log);\n    }\n  }\n\n  /* preserve original logic: call strlen(form) as in the original code */\n  size_t form_len = strlen (form);\n\n  /* log the result of strlen and a hex-dump (bounded) of the scanned bytes to help reproduce UB */\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"strlen(form) -> %zu\\n\", form_len);\n      /* Dump up to 64 bytes (bounded) of the buffer that strlen traversed. This will not read\n         more than strlen already did (we cap to 64 bytes) so we avoid introducing extra out-of-bounds\n         accesses beyond what the original strlen may have done. */\n      size_t dump = form_len < 64 ? form_len : 64;\n      fprintf(log, \"form hex dump (up to %zu bytes):\", dump);\n      for (size_t i = 0; i < dump; ++i)\n        fprintf(log, \" %02x\", (unsigned char) form[i]);\n      fprintf(log, \"\\n\");\n      fclose(log);\n    }\n  }\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (form_len,\n                                                     (const void *) form);\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"MHD_create_response_from_buffer_static returned %p\\n\", (void *) response);\n      fclose(log);\n    }\n  }\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    /* log header failure without dereferencing mime (print pointer only) */\n    {\n      FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n      if (log) {\n        fprintf(log, \"MHD_add_response_header failed: header=%p\\n\", (void *) mime);\n        fclose(log);\n      }\n    }\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"MHD_queue_response returned %d\\n\", (int) ret);\n      fprintf(log, \"EXIT serve_simple_form ret=%d\\n\", (int) ret);\n      fclose(log);\n    }\n  }\n  MHD_destroy_response (response);\n  return ret;\n}"
}