{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(form) assumes cls points to a non-NULL, NUL-terminated string. If cls is NULL or points to a buffer that is not NUL-terminated (or shorter than expected), strlen will read past the object bounds and cause undefined behavior (out-of-bounds access). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static void probe_log_before(const void *cls,\n                                 const char *mime,\n                                 struct Session *session,\n                                 struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf(f, \"[serve_simple_form] ENTER\\n\");\n  fprintf(f, \"[serve_simple_form] cls=%p, mime=%p, session=%p, connection=%p\\n\",\n          cls, mime, session, connection);\n  fprintf(f, \"[serve_simple_form] cls_is_null=%d, mime_is_null=%d\\n\",\n          (cls == NULL) ? 1 : 0,\n          (mime == NULL) ? 1 : 0);\n  if (mime != NULL)\n  {\n    /* Print the mime string only if not NULL to avoid undefined behaviour. */\n    fprintf(f, \"[serve_simple_form] mime=\\\"%s\\\"\\n\", mime);\n  }\n  fprintf(f, \"[serve_simple_form] About to call strlen(form) (this may trigger the reported violation)\\n\");\n\n  fclose(f);\n}\n\nstatic void probe_log_after_response(struct MHD_Response *response)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"[serve_simple_form] MHD_create_response_from_buffer_static returned response=%p\\n\", response);\n  fclose(f);\n}\n\nstatic void probe_log_after_queue(enum MHD_Result ret)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"[serve_simple_form] MHD_queue_response returned ret=%d\\n\", (int)ret);\n  fprintf(f, \"[serve_simple_form] EXIT\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Probe: log entry state. This captures the control path and state\n     prior to calling strlen(form), which is the location of the\n     reported Rule 21.17 violation when cls is NULL or the buffer is\n     not NUL-terminated. */\n  probe_log_before(cls, mime, session, connection);\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  probe_log_after_response(response);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  probe_log_after_queue(ret);\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}