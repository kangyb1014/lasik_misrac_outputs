{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcmp call uses a fixed length of 5: memcmp(hdr->value, \"close\", 5). There is no prior check that hdr->value actually has at least 5 bytes (hdr->value_size >= 5). If hdr->value points to a shorter buffer (for example the Connection header value is \"clo\" or \"\"), memcmp will read beyond the bounds of that object and thus violate MISRA C 2023 Rule 21.17. (In short: calling memcmp with n=5 on a potentially shorter hdr->value can access out-of-bounds memory.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Probe logging: record entry and parameter/state info to /tmp/logs/71.txt */\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"serve_simple_form ENTRY: cls=%p mime=%p session=%p connection=%p\\n\",\n              cls, (void *) mime, (void *) session, (void *) connection);\n      if (form == NULL)\n      {\n        fprintf(log, \"  form == NULL\\n\");\n      }\n      else\n      {\n        /* Safely measure and print a prefix of the form to avoid large outputs */\n        size_t form_len = strlen(form);\n        fprintf(log, \"  form_len=%zu\\n\", form_len);\n        size_t print_len = (form_len < 256U) ? form_len : 256U;\n        fprintf(log, \"  form_prefix_len=%zu form_prefix='\", print_len);\n        if (print_len > 0U)\n        {\n          fwrite(form, 1, print_len, log);\n        }\n        if (print_len < form_len)\n          fprintf(log, \"'... (truncated)\\n\");\n        else\n          fprintf(log, \"'\\n\");\n      }\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"serve_simple_form: MHD_create_response_from_buffer_static returned NULL\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  add_session_cookie (session, response);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    /* Log this event with the mime value (safe-guard null) */\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"serve_simple_form: MHD_add_response_header failed for mime='%s'\\n\", mime ? mime : \"(null)\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n\n  /* Log exit and return code */\n  {\n    FILE *log = fopen(\"/tmp/logs/71.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"serve_simple_form EXIT: ret=%d\\n\", (int) ret);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return ret;\n}\n"
}