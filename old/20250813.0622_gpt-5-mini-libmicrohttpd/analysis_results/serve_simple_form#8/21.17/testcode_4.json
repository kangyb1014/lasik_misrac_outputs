{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memmove copies norm_len+1 bytes from buf+old_value_len to buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len. The buffer was allocated with buf_size = old_value_len + initial_norm_len where initial_norm_len = value_len + value_len/2 + 1, and norm_len is later resized to the actual used length returned by the token-removal routine. The code only has an mhd_assert that there is enough room (buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1) but this assert can be compiled out. If the assertion does not hold, memmove will write/read past the end of the allocated buf. Example: with old_value_len == 0 and value_len == 5 (initial_norm_len == 8) and the removal routine leaving norm_len == 5, the memmove will attempt to move 6 bytes to buf+7 but buf was only allocated 8 bytes (indices 0..7), so the write at positions >=8 is out-of-bounds. Therefore this use of memmove can access beyond object bounds and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static void\nlog_probe (const char *tag,\n           const char *form,\n           size_t form_len,\n           const char *mime,\n           const void *session,\n           const void *connection,\n           const void *response_ptr,\n           int header_status,\n           int ret_code)\n{\n  FILE *f = fopen (\"/tmp/logs/71.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Protect against NULL strings in the log to avoid crashing the logger. */\n  fprintf (f,\n           \"%s: form=%p len=%zu mime=%s session=%p connection=%p response=%p header=%d ret=%d\\n\",\n           tag,\n           (const void *) form,\n           form_len,\n           (mime != NULL) ? mime : \"(null)\",\n           session,\n           connection,\n           response_ptr,\n           header_status,\n           ret_code);\n\n  if (form != NULL)\n  {\n    /* Log a limited prefix of the form to avoid huge logs */\n    fprintf (f, \"%s: form-prefix=\\\"%.200s\\\"\\n\", tag, form);\n  }\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n  size_t form_len = 0;\n\n  /* compute form length safely for logging (original code called strlen(form) */\n  if (form != NULL)\n    form_len = strlen (form);\n\n  /* Log entry state */\n  log_probe (\"ENTER\", form, form_len, mime, (const void *) session, (const void *) connection, NULL, -1, -1);\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n\n  /* Log after create attempt */\n  log_probe (\"AFTER_CREATE\", form, form_len, mime, (const void *) session, (const void *) connection, (const void *) response, -1, -1);\n\n  if (NULL == response)\n  {\n    log_probe (\"CREATE_FAILED\", form, form_len, mime, (const void *) session, (const void *) connection, NULL, -1, (int) MHD_NO);\n    return MHD_NO;\n  }\n\n  add_session_cookie (session, response);\n\n  /* capture header result for logging */\n  int header_res = MHD_add_response_header (response,\n                                            MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                            mime);\n\n  if (MHD_YES != header_res)\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    /* Log header failure */\n    log_probe (\"HEADER_FAIL\", form, form_len, mime, (const void *) session, (const void *) connection, (const void *) response, header_res, -1);\n  }\n  else\n  {\n    /* Log header success */\n    log_probe (\"HEADER_OK\", form, form_len, mime, (const void *) session, (const void *) connection, (const void *) response, header_res, -1);\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  /* Log queued response and the return code from queue */\n  log_probe (\"AFTER_QUEUE\", form, form_len, mime, (const void *) session, (const void *) connection, (const void *) response, header_res, (int) ret);\n\n  MHD_destroy_response (response);\n\n  /* Final state log */\n  log_probe (\"EXIT\", form, form_len, mime, (const void *) session, (const void *) connection, NULL, header_res, (int) ret);\n\n  return ret;\n}"
}