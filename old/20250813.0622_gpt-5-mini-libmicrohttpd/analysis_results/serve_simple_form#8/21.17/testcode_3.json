{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(header) without validating that header is non-NULL and NUL-terminated. Since add_response_entry() can be reached via the public API MHD_add_response_header(), a caller could pass header == NULL (or a non-NUL-terminated buffer). In that case strlen(header) will dereference a NULL pointer or read past the object bounds, causing undefined behavior. Example: calling MHD_add_response_header(resp, NULL, \"value\") leads to add_response_entry executing header_len = strlen(header), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "static void probe_log(const char *stage,\n                          const void *cls,\n                          const char *form,\n                          const char *mime,\n                          struct MHD_Response *response,\n                          int add_hdr_result,\n                          enum MHD_Result ret,\n                          size_t form_len)\n{\n  FILE *f = fopen(\"/tmp/logs/71.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Log control point, pointer values and known sizes only. */\n  fprintf(f, \"[%s] cls=%p form=%p mime=%p response=%p form_len=%zu add_hdr_result=%d ret=%d\\n\",\n          stage, cls, form, mime, response, form_len, add_hdr_result, (int) ret);\n\n  /* Record simple predicates useful to reproduce the strlen(NULL) scenario\n     without attempting to dereference any pointer that might be invalid. */\n  fprintf(f, \"[%s] form_is_null=%d mime_is_null=%d\\n\",\n          stage, (form == NULL) ? 1 : 0, (mime == NULL) ? 1 : 0);\n\n  fclose(f);\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n  int add_hdr_result = 0;\n  size_t form_len;\n\n  /* Probe: entering function, record pointers but do not dereference them here. */\n  probe_log(\"enter\", cls, form, mime, NULL, -1, 0, 0);\n\n  /* return static form */\n  /* preserve original behavior: compute length exactly as before */\n  form_len = strlen (form);\n  probe_log(\"before_create_response\", cls, form, mime, NULL, -1, 0, form_len);\n\n  response = MHD_create_response_from_buffer_static (form_len,\n                                                     (const void *) form);\n  probe_log(\"after_create_response\", cls, form, mime, response, -1, 0, form_len);\n\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n\n  /* Log immediately before attempting to add header so callers can see\n     whether mime (header) is NULL which is the root cause of the reported UB. */\n  probe_log(\"before_add_response_header\", cls, form, mime, response, -1, 0, form_len);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    add_hdr_result = 1; /* non-success */\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  probe_log(\"after_add_response_header\", cls, form, mime, response, add_hdr_result, 0, form_len);\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  probe_log(\"after_queue_response\", cls, form, mime, response, add_hdr_result, ret, form_len);\n\n  MHD_destroy_response (response);\n  probe_log(\"after_destroy_response\", cls, form, mime, NULL, add_hdr_result, ret, form_len);\n\n  return ret;\n}"
}