{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_set_connection_value_n': {'callees': ['MHD_set_connection_value_n_nocheck_'], 'callers': ['connection_add_header']}, 'MHD_set_connection_value_n_nocheck_': {'callees': ['MHD_connection_alloc_memory_'], 'callers': ['MHD_set_connection_value_n', 'MHD_set_connection_value', 'parse_cookies_string', 'get_req_headers']}, 'connection_add_header': {'callees': ['MHD_set_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_GET_ARGUMENT_KIND",
    "MHD_set_connection_value_n_nocheck_",
    "enum MHD_Result",
    "enum MHD_ValueKind",
    "struct MHD_Connection",
    "MHD_NO"
  ],
  "explanation": "To determine whether the target function uses any compiler language extensions you must inspect the definitions/expansions of the macros, types, and referenced function prototype that could hide extensions. Reasons:\n\n- _MHD_EXTERN: This macro may expand to compiler-specific storage-class or attribute tokens (for example __attribute__((...)), __declspec(...), extern \"C\" when headers try to be C/C++ compatible, visibility pragmas). Any such expansion would be a language/implementation extension and must be checked.\n\n- MHD_GET_ARGUMENT_KIND: It is a macro (or constant) used in the condition. Its definition could use non-standard constructs (statement-expression ({ ... }), typeof, builtins, GCC extensions) or other extensions; inspect its expansion.\n\n- MHD_set_connection_value_n_nocheck_: You must examine the function prototype/definition that the call targets; it may carry compiler-specific function attributes (nonnull, sentinel, visibility, inline attributes, calling-convention keywords) or use nonstandard parameter annotations.\n\n- enum MHD_Result: The enum declaration could include implementation-defined extensions (explicit underlying-type attributes or annotated macros) or be wrapped in macros that inject extensions.\n\n- enum MHD_ValueKind: Same rationale as MHD_Result \u2014 the enum/type declaration might use nonstandard annotations or macros that expand to extensions.\n\n- struct MHD_Connection: The struct declaration could include nonstandard extensions (packed, aligned, attributes on members, flexible-array tricks implemented via extensions) introduced via macros or attributes.\n\n- MHD_NO: This token (likely an enum constant or macro) should be checked to ensure it is a plain enum/constant and not a macro that expands to an expression containing extensions.\n\nInspecting these symbols (their header declarations/definitions) is sufficient to decide whether the target function text relies on or hides any compiler language extensions."
}