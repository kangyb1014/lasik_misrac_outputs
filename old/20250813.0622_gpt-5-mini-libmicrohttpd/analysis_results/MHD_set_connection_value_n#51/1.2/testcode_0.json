{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro _MHD_EXTERN expands to the GCC/Clang-specific attribute syntax __attribute__((visibility(\"default\"))). This is a compiler language extension (GCC attribute syntax) and thus violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/408.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal stubs so this test file is self-contained and compilable. */\nstruct MHD_Connection { void *opaque; };\n\nenum MHD_ValueKind { MHD_GET_ARGUMENT_KIND = 0, MHD_OTHER_KIND = 1 };\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Helper to append logs to /tmp/logs/408.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/408.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* Try to create the directory then reopen. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/408.txt\", \"a\");\n    }\n    if (NULL == f)\n    {\n        /* If still failing, give up silently to avoid changing program logic. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* A small stub for the _nocheck_ function so this compilation unit is\n   executable for testing. It preserves the same signature and logs its call. */\nenum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                    enum MHD_ValueKind kind,\n                                    const char *key,\n                                    size_t key_size,\n                                    const char *value,\n                                    size_t value_size)\n{\n    probe_log(\"MHD_set_connection_value_n_nocheck_ called: connection=%p, kind=%d, key=%p, key_size=%zu, value=%p, value_size=%zu\",\n              (void *)connection, (int)kind, (void *)key, key_size, (void *)value, value_size);\n    /* For test purposes return success. */\n    probe_log(\"MHD_set_connection_value_n_nocheck_: returning %d\", (int)MHD_YES);\n    return MHD_YES;\n}\n\n/* Modified MHD_set_connection_value_n with inserted probes. The original\n   logic is preserved: return MHD_NO only when the conditions match. */\nenum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n    /* Capture initial state */\n    probe_log(\"ENTER MHD_set_connection_value_n: connection=%p, kind=%d, key=%p, key_size=%zu, value=%p, value_size=%zu\",\n              (void *)connection, (int)kind, (void *)key, key_size, (void *)value, value_size);\n\n    size_t actual_key_len = key ? strlen(key) : 0;\n    size_t actual_value_len = value ? strlen(value) : 0;\n\n    probe_log(\"Computed lengths: actual_key_len=%zu, actual_value_len=%zu\",\n              actual_key_len, actual_value_len);\n\n    int is_get_kind = (MHD_GET_ARGUMENT_KIND == kind);\n    probe_log(\"Kind check: MHD_GET_ARGUMENT_KIND == kind -> %d\", is_get_kind);\n\n    int size_mismatch = (actual_key_len != key_size) || (actual_value_len != value_size);\n    probe_log(\"Size comparison: (actual_key_len != key_size) -> %d, (actual_value_len != value_size) -> %d, overall_size_mismatch=%d\",\n              (int)(actual_key_len != key_size), (int)(actual_value_len != value_size), size_mismatch);\n\n    if ((MHD_GET_ARGUMENT_KIND != kind) && (size_mismatch))\n    {\n        probe_log(\"Branch: early return MHD_NO (binary zero allowed only in GET arguments)\");\n        probe_log(\"EXIT MHD_set_connection_value_n: returning %d\", (int)MHD_NO);\n        return MHD_NO; /* binary zero is allowed only in GET arguments */\n    }\n\n    probe_log(\"Branch: calling MHD_set_connection_value_n_nocheck_\");\n    enum MHD_Result res = MHD_set_connection_value_n_nocheck_(connection,\n                                                              kind,\n                                                              key,\n                                                              key_size,\n                                                              value,\n                                                              value_size);\n    probe_log(\"Returned from MHD_set_connection_value_n_nocheck_: result=%d\", (int)res);\n    probe_log(\"EXIT MHD_set_connection_value_n: returning %d\", (int)res);\n    return res;\n}\n"
}