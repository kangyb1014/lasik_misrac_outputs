{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls strlen(key) and strlen(value) whenever key/value are non-NULL to compare against the supplied sizes. If the caller supplies a non-NUL-terminated buffer (e.g. a buffer of length key_size/value_size that does not contain a terminating '\\0' within those bytes), strlen will scan past the provided object bounds until a '\\0' is found, causing an out-of-bounds access. Thus the use of strlen here can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/415.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helpers: write concise state and control-flow logs to /tmp/logs/415.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Safe hex-dump of up to max_bytes bytes from buf (does not assume NUL termination).\n   This reads at most buf_size bytes (supplied by caller) and caps output at max_bytes. */\nstatic void probe_hexdump(const void *buf, size_t buf_size, size_t max_bytes)\n{\n  if (buf == NULL || buf_size == 0)\n    return;\n  FILE *f = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (f == NULL)\n    return;\n  const unsigned char *p = (const unsigned char *)buf;\n  size_t n = buf_size < max_bytes ? buf_size : max_bytes;\n  fprintf(f, \"hexdump (%zu bytes):\", n);\n  for (size_t i = 0; i < n; ++i) {\n    if ((i % 16) == 0)\n      fprintf(f, \"\\n\");\n    fprintf(f, \" %02x\", (unsigned)p[i]);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Log entry and raw parameter state (do not print key/value as strings to avoid\n     unintended reads past provided sizes). */\n  probe_log(\"ENTER MHD_set_connection_value_n: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n\n  /* Provide a safe hex-dump of the provided buffers up to 64 bytes to help reproduce\n     scenarios where buffers are not NUL-terminated. This reads only up to the\n     supplied sizes (does not call strlen here). */\n  if (key)\n    probe_hexdump(key, key_size, 64);\n  if (value)\n    probe_hexdump(value, value_size, 64);\n\n  /* Compute lengths using strlen as in the original logic. This is intentional so\n     that callers supplying non-NUL-terminated buffers will trigger the same\n     behavior (potential out-of-bounds access) and the logs will capture the\n     conditions leading up to that. */\n  size_t key_len = key ? strlen(key) : 0;\n  size_t val_len = value ? strlen(value) : 0;\n  probe_log(\"Computed strlen results: key_len=%zu val_len=%zu\", key_len, val_len);\n\n  /* Preserve original decision logic, using the computed lengths. */\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? key_len : 0) != key_size) ||\n         ((value ? val_len : 0) != value_size) ) ) {\n    probe_log(\"Decision: returning MHD_NO (length mismatch). key_present=%d key_len=%zu key_size=%zu value_present=%d val_len=%zu value_size=%zu\",\n              key ? 1 : 0, key_len, key_size, value ? 1 : 0, val_len, value_size);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  probe_log(\"Decision: calling MHD_set_connection_value_n_nocheck_\");\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                                            kind,\n                                                            key,\n                                                            key_size,\n                                                            value,\n                                                            value_size);\n  probe_log(\"Returned from MHD_set_connection_value_n_nocheck_: result=%d\", (int)res);\n  return res;\n}\n"
}