{
  "user_message": "An agent A claimed that the following MHD_set_connection_value_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_value_n.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The code calls strlen(key) and strlen(value) whenever key/value are non-NULL to compare against the supplied sizes. If the caller supplies a non-NUL-terminated buffer (e.g. a buffer of length key_size/value_size that does not contain a terminating '\\0' within those bytes), strlen will scan past the provided object bounds until a '\\0' is found, causing an out-of-bounds access. Thus the use of strlen here can violate MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\nstatic void probe_hexdump(const void *buf, size_t buf_size, size_t max_bytes)\n{\n  if (buf == NULL || buf_size == 0)\n    return;\n  FILE *f = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (f == NULL)\n    return;\n  const unsigned char *p = (const unsigned char *)buf;\n  size_t n = buf_size < max_bytes ? buf_size : max_bytes;\n  fprintf(f, \"hexdump (%zu bytes):\", n);\n  for (size_t i = 0; i < n; ++i) {\n    if ((i % 16) == 0)\n      fprintf(f, \"\\n\");\n    fprintf(f, \" %02x\", (unsigned)p[i]);\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Log entry and raw parameter state (do not print key/value as strings to avoid\n     unintended reads past provided sizes). */\n  probe_log(\"ENTER MHD_set_connection_value_n: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n\n  /* Provide a safe hex-dump of the provided buffers up to 64 bytes to help reproduce\n     scenarios where buffers are not NUL-terminated. This reads only up to the\n     supplied sizes (does not call strlen here). */\n  if (key)\n    probe_hexdump(key, key_size, 64);\n  if (value)\n    probe_hexdump(value, value_size, 64);\n\n  /* Compute lengths using strlen as in the original logic. This is intentional so\n     that callers supplying non-NUL-terminated buffers will trigger the same\n     behavior (potential out-of-bounds access) and the logs will capture the\n     conditions leading up to that. */\n  size_t key_len = key ? strlen(key) : 0;\n  size_t val_len = value ? strlen(value) : 0;\n  probe_log(\"Computed strlen results: key_len=%zu val_len=%zu\", key_len, val_len);\n\n  /* Preserve original decision logic, using the computed lengths. */\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? key_len : 0) != key_size) ||\n         ((value ? val_len : 0) != value_size) ) ) {\n    probe_log(\"Decision: returning MHD_NO (length mismatch). key_present=%d key_len=%zu key_size=%zu value_present=%d val_len=%zu value_size=%zu\",\n              key ? 1 : 0, key_len, key_size, value ? 1 : 0, val_len, value_size);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  probe_log(\"Decision: calling MHD_set_connection_value_n_nocheck_\");\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                                            kind,\n                                                            key,\n                                                            key_size,\n                                                            value,\n                                                            value_size);\n  probe_log(\"Returned from MHD_set_connection_value_n_nocheck_: result=%d\", (int)res);\n  return res;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_set_connection_value_n. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code calls strlen(key) and strlen(value) whenever the pointer is non-NULL. strlen scans memory until it finds a NUL byte; if the caller supplies a non-NUL-terminated buffer whose valid storage is limited to key_size/value_size, strlen may read past the object bounds and thus cause an out-of-bounds access. That behavior directly contravenes MISRA C 2023 Rule 21.17, which forbids use of string.h functions in a way that can access beyond object bounds. The empty test log does not refute the issue \u2014 it only shows the test did not exercise the function \u2014 the potential violation is real and must be addressed. A safe fix is to avoid unbounded strlen and instead limit the scan to the supplied sizes (for example, use memchr to look for '\\0' within key_size/value_size and compute the length from that, or use a bounded-strlen equivalent), ensuring no reads beyond the provided object bounds."
}