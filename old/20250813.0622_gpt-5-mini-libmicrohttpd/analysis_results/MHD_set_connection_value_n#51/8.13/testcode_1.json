{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the callee is declared to take non-const pointers, e.g.:\n\nenum MHD_Result MHD_set_connection_value_n_nocheck_(struct MHD_Connection *connection,\n                                                  enum MHD_ValueKind kind,\n                                                  char *key,\n                                                  size_t key_size,\n                                                  char *value,\n                                                  size_t value_size);\n\nIn that case the call passes const char *key and const char *value to parameters of type char *, discarding the const qualifier and allowing the callee to modify data through those pointers \u2014 this violates MISRA C 2023 Rule 8.13. If, however, the callee's prototype uses const char * for key and value, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/411.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nPlease provide the modified MHD_set_connection_value_n code.\n",
  "test_code": "static void MHD_log_probe(const char *event,\n                                 struct MHD_Connection *connection,\n                                 enum MHD_ValueKind kind,\n                                 const char *key,\n                                 size_t key_size,\n                                 const char *value,\n                                 size_t value_size,\n                                 const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/411.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  /* Log a concise snapshot of control flow and state. Use safe prints. */\n  fprintf(f, \"EVENT=%s\\n\", event);\n  fprintf(f, \" connection=%p kind=%d\\n\", (void *) connection, (int) kind);\n  fprintf(f, \" key_ptr=%p key_size=%zu\\n\", (const void *) key, key_size);\n  if (key != NULL)\n    fprintf(f, \" key_str=\\\"%s\\\"\\n\", key);\n  else\n    fprintf(f, \" key_str=NULL\\n\");\n  fprintf(f, \" value_ptr=%p value_size=%zu\\n\", (const void *) value, value_size);\n  if (value != NULL)\n    fprintf(f, \" value_str=\\\"%s\\\"\\n\", value);\n  else\n    fprintf(f, \" value_str=NULL\\n\");\n  if (extra != NULL)\n    fprintf(f, \" extra=%s\\n\", extra);\n  fprintf(f, \"---\\n\");\n\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Probe: entry */\n  MHD_log_probe(\"enter\", connection, kind, key, key_size, value, value_size, NULL);\n\n  /* Compute lengths explicitly for clearer logs and to preserve original logic. */\n  size_t computed_key_len = (key ? strlen (key) : 0U);\n  size_t computed_value_len = (value ? strlen (value) : 0U);\n\n  /* Log computed lengths and the decision about the GET-argument check */\n  {\n    char extra[128];\n    /* Describe the check that will be performed. */\n    (void) snprintf(extra, sizeof(extra), \"computed_key_len=%zu computed_value_len=%zu\",\n                    computed_key_len, computed_value_len);\n    MHD_log_probe(\"pre_check\", connection, kind, key, key_size, value, value_size, extra);\n  }\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( (computed_key_len != key_size) ||\n         (computed_value_len != value_size) ) )\n  {\n    /* Probe: early return due to length mismatch (binary zero allowed only in GET args) */\n    MHD_log_probe(\"early_return_length_mismatch\", connection, kind, key, key_size, value, value_size,\n                  \"binary zero is allowed only in GET arguments\");\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  /* Probe: about to call the nocheck function. This is where const -> non-const pointer\n     conversion would occur if the callee expects non-const char * parameters. */\n  MHD_log_probe(\"calling_nocheck\", connection, kind, key, key_size, value, value_size,\n                \"Note: passing const char *key/value to MHD_set_connection_value_n_nocheck_\");\n\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                                            kind,\n                                                            key,\n                                                            key_size,\n                                                            value,\n                                                            value_size);\n\n  /* Probe: result from nocheck call */\n  {\n    char extra[64];\n    (void) snprintf(extra, sizeof(extra), \"result=%d\", (int) res);\n    MHD_log_probe(\"post_nocheck\", connection, kind, key, key_size, value, value_size, extra);\n  }\n\n  return res;\n}\n"
}