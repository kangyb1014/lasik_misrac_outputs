{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided codebase mhd_assert is defined as #define mhd_assert(ignore) ((void)0). Therefore the statement mhd_assert(pool->pos == ROUND_TO_ALIGN(pool->pos)); expands to a no-op; the argument expression is not evaluated and the statement has no effect. Removing that statement would not change program behaviour in this build configuration, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "struct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  /* Probe: entry */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: ENTRY max=%zu\\n\", max);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n  {\n    /* Probe: allocation failed for pool */\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: malloc(sizeof(MemoryPool)) returned NULL\\n\");\n      fclose(f);\n    }\n    return NULL;\n  }\n\n  /* Probe: pool allocated */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: pool=%p alloc_size(initial)=%zu\\n\", (void *)pool, alloc_size);\n      fclose(f);\n    }\n  }\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    /* Probe: chose MAP_FAILED path due to small max */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: small max -> use MAP_FAILED (max=%zu)\\n\", max);\n        fclose(f);\n      }\n    }\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n    /* Probe: attempted mmap/VirtualAlloc */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: attempted mmap/VirtualAlloc alloc_size=%zu -> memory=%p\\n\", alloc_size, (void *)pool->memory);\n        fclose(f);\n      }\n    }\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n  /* Probe: no mmap support */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: no MAP_ANONYMOUS/_WIN32 -> MAP_FAILED\\n\");\n      fclose(f);\n    }\n  }\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      /* Probe: fallback malloc failed */\n      {\n        FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n        if (f) {\n          fprintf(f, \"MHD_pool_create: fallback malloc(%zu) returned NULL\\n\", alloc_size);\n          fclose(f);\n        }\n      }\n      return NULL;\n    }\n    pool->is_mmap = false;\n    /* Probe: fallback malloc succeeded */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: fallback malloc memory=%p alloc_size=%zu is_mmap=0\\n\", (void *)pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    /* Probe: mmap/VirtualAlloc succeeded */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: mmap/VirtualAlloc succeeded memory=%p alloc_size=%zu is_mmap=1\\n\", (void *)pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n\n  /* Probe: capture values related to the assertion that might be compiled out\n     elsewhere (evidence for dead code if assertions are no-ops). We explicitly\n     evaluate and log the expression values so external reviewers can see them. */\n  {\n    size_t pos_val = pool->pos;\n    size_t round_pos = ROUND_TO_ALIGN (pool->pos);\n    uintptr_t mem_addr = (uintptr_t) pool->memory;\n    size_t mem_align_mod = (size_t) (mem_addr % (uintptr_t) ALIGN_SIZE);\n\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: probe pool=%p memory=%p mem_addr=%llu mem_align_mod=%zu alloc_size=%zu\\n\",\n              (void *)pool, (void *)pool->memory, (unsigned long long) mem_addr, mem_align_mod, alloc_size);\n      fprintf(f, \"MHD_pool_create: probe pos=%zu ROUND_TO_ALIGN(pos)=%zu\\n\", pos_val, round_pos);\n      /* Also log the value of the assertion that sometimes is disabled: */\n      fprintf(f, \"MHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = %d\\n\", (int) (pos_val == round_pos));\n      fclose(f);\n    }\n  }\n\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n\n  /* Probe: exit */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: EXIT pool=%p size=%zu is_mmap=%d\\n\", (void *)pool, pool->size, pool->is_mmap ? 1 : 0);\n      fclose(f);\n    }\n  }\n  return pool;\n}\n"
}