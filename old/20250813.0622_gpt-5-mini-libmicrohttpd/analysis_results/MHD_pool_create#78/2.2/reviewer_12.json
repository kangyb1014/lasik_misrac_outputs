{
  "user_message": "An agent A claimed that the following MHD_pool_create code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_create.\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the provided codebase mhd_assert is defined as #define mhd_assert(ignore) ((void)0). Therefore the statement mhd_assert(pool->pos == ROUND_TO_ALIGN(pool->pos)); expands to a no-op; the argument expression is not evaluated and the statement has no effect. Removing that statement would not change program behaviour in this build configuration, so it constitutes dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  /* Probe: entry */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: ENTRY max=%zu\\n\", max);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n  {\n    /* Probe: allocation failed for pool */\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: malloc(sizeof(MemoryPool)) returned NULL\\n\");\n      fclose(f);\n    }\n    return NULL;\n  }\n\n  /* Probe: pool allocated */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: pool=%p alloc_size(initial)=%zu\\n\", (void *)pool, alloc_size);\n      fclose(f);\n    }\n  }\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    /* Probe: chose MAP_FAILED path due to small max */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: small max -> use MAP_FAILED (max=%zu)\\n\", max);\n        fclose(f);\n      }\n    }\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n    /* Probe: attempted mmap/VirtualAlloc */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: attempted mmap/VirtualAlloc alloc_size=%zu -> memory=%p\\n\", alloc_size, (void *)pool->memory);\n        fclose(f);\n      }\n    }\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n  /* Probe: no mmap support */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: no MAP_ANONYMOUS/_WIN32 -> MAP_FAILED\\n\");\n      fclose(f);\n    }\n  }\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      /* Probe: fallback malloc failed */\n      {\n        FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n        if (f) {\n          fprintf(f, \"MHD_pool_create: fallback malloc(%zu) returned NULL\\n\", alloc_size);\n          fclose(f);\n        }\n      }\n      return NULL;\n    }\n    pool->is_mmap = false;\n    /* Probe: fallback malloc succeeded */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: fallback malloc memory=%p alloc_size=%zu is_mmap=0\\n\", (void *)pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    /* Probe: mmap/VirtualAlloc succeeded */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"MHD_pool_create: mmap/VirtualAlloc succeeded memory=%p alloc_size=%zu is_mmap=1\\n\", (void *)pool->memory, alloc_size);\n        fclose(f);\n      }\n    }\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n\n  /* Probe: capture values related to the assertion that might be compiled out\n     elsewhere (evidence for dead code if assertions are no-ops). We explicitly\n     evaluate and log the expression values so external reviewers can see them. */\n  {\n    size_t pos_val = pool->pos;\n    size_t round_pos = ROUND_TO_ALIGN (pool->pos);\n    uintptr_t mem_addr = (uintptr_t) pool->memory;\n    size_t mem_align_mod = (size_t) (mem_addr % (uintptr_t) ALIGN_SIZE);\n\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: probe pool=%p memory=%p mem_addr=%llu mem_align_mod=%zu alloc_size=%zu\\n\",\n              (void *)pool, (void *)pool->memory, (unsigned long long) mem_addr, mem_align_mod, alloc_size);\n      fprintf(f, \"MHD_pool_create: probe pos=%zu ROUND_TO_ALIGN(pos)=%zu\\n\", pos_val, round_pos);\n      /* Also log the value of the assertion that sometimes is disabled: */\n      fprintf(f, \"MHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = %d\\n\", (int) (pos_val == round_pos));\n      fclose(f);\n    }\n  }\n\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n\n  /* Probe: exit */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"MHD_pool_create: EXIT pool=%p size=%zu is_mmap=%d\\n\", (void *)pool, pool->size, pool->is_mmap ? 1 : 0);\n      fclose(f);\n    }\n  }\n  return pool;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e499660e0 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e499660e0 mem_addr=94894242029792 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49967340 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49967340 mem_addr=94894242034496 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49967590 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49967590 mem_addr=94894242035088 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e499677e0 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e499677e0 mem_addr=94894242035680 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49967a30 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49967a30 mem_addr=94894242036272 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49967c80 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49967c80 mem_addr=94894242036864 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49967ed0 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49967ed0 mem_addr=94894242037456 mem_align_mod=0 alloc_size=32768\nMHD_pool_create: probe pos=0 ROUND_TO_ALIGN(pos)=0\nMHD_pool_create: probe asserted_condition (pos == ROUND_TO_ALIGN(pos)) = 1\nMHD_pool_create: EXIT pool=0x564e499660b0 size=32768 is_mmap=0\nMHD_pool_create: ENTRY max=32768\nMHD_pool_create: pool=0x564e499660b0 alloc_size(initial)=0\nMHD_pool_create: small max -> use MAP_FAILED (max=32768)\nMHD_pool_create: fallback malloc memory=0x564e49968120 alloc_size=32768 is_mmap=0\nMHD_pool_create: probe pool=0x564e499660b0 memory=0x564e49968120 mem_ad\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. With the given macro definition (#define mhd_assert(ignore) ((void)0)) each mhd_assert(...) invocation becomes a no-op statement that neither evaluates its argument nor affects program state. Under MISRA C 2023 Rule 2.2 (\u201cA project shall not contain dead code\u201d), an executed operation whose removal would not affect program behaviour is dead code. The mhd_assert statements in MHD_pool_create meet that definition in this build configuration: they are executed as no-ops and can be removed without changing behaviour. The test probes simply show the would-be asserted conditions\u2019 values but do not change that the actual mhd_assert statements are compiled out, so the report is correct."
}