{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolated: The call mhd_assert(0 < alloc_size) is dead code because mhd_assert is defined as ((void)0) in the provided build, so the statement compiles to a no-op. It is executed (reachable) but its removal would not change program behaviour, which matches MISRA C 2023 Rule 2.2\u2019s definition of dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nstruct MemoryPool;\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  /* Log entry into function and input value */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_create: entry max=%zu\\n\", max);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n\n  /* Log after alloc_size initialized to zero */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"after alloc_size=0, alloc_size=%zu\\n\", alloc_size);\n      fclose(f);\n    }\n  }\n\n  pool = malloc (sizeof (struct MemoryPool));\n\n  /* Log result of malloc for pool */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"after malloc pool=%p\\n\", (void *) pool);\n      fclose(f);\n    }\n  }\n\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n\n    /* Log decision to skip mmap and set memory to MAP_FAILED */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"choose not to mmap: max=%zu memory=MAP_FAILED\\n\", max);\n        fclose(f);\n      }\n    }\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n\n    /* Log mmap/VirtualAlloc attempt and resulting pointer and alloc_size */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"mmap/VirtualAlloc attempt alloc_size=%zu memory=%p\\n\", alloc_size, (void *) pool->memory);\n        fclose(f);\n      }\n    }\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n\n    /* Log fallback to heap allocation */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"fallback malloc alloc_size=%zu memory=%p is_mmap=false\\n\", alloc_size, (void *) pool->memory);\n        fclose(f);\n      }\n    }\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n\n    /* Log successful mmap/VirtualAlloc path */\n    {\n      FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"mmap succeeded alloc_size=%zu memory=%p is_mmap=true\\n\", alloc_size, (void *) pool->memory);\n        fclose(f);\n      }\n    }\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n\n  /* Log state immediately before the assertion that is claimed to be dead code */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"before final mhd_assert: alloc_size=%zu pool=%p memory=%p pos=%zu end=%zu size=%zu is_mmap=%d\\n\",\n              alloc_size, (void *) pool, (void *) pool->memory, pool->pos, pool->end, pool->size, pool->is_mmap);\n      fprintf(f, \"about to execute: mhd_assert(0 < alloc_size)\\n\");\n      fclose(f);\n    }\n  }\n\n  mhd_assert (0 < alloc_size);\n\n  /* Log state immediately after the assertion. This shows that execution continues and no state changed. */\n  {\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"after final mhd_assert: alloc_size=%zu pool=%p memory=%p pos=%zu end=%zu size=%zu is_mmap=%d\\n\",\n              alloc_size, (void *) pool, (void *) pool->memory, pool->pos, pool->end, pool->size, pool->is_mmap);\n      fprintf(f, \"note: if mhd_assert is defined as ((void)0) this call is a no-op and its removal would not change behavior\\n\");\n      fclose(f);\n    }\n  }\n\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n"
}