{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(pool->end >= pool->pos); is compiled as a no-op in this project because mhd_assert is defined as ((void)0). That yields an executed statement with no effect whose removal would not change program behaviour, i.e. dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_pool_create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\nPlease provide the modified MHD_pool_create code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper that appends control-flow/state information to the log file. */\nstatic void\nmhd_probe_log(const char *stage, size_t max, struct MemoryPool *pool, size_t alloc_size)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Print stage and some readily-available state. Avoid reading uninitialised\n     members of 'pool' unless we are reasonably sure they have been set. */\n  fprintf(f, \"[MHD_POOL] %s: max=%zu alloc_size=%zu pool=%p\", stage, max, alloc_size, (void *) pool);\n  if (NULL != pool)\n  {\n    /* Only print members that are safe to read in the relevant stages. */\n    /* Some stages may occur before members are initialised; guard accesses by printing only\n       those members that are expected to be initialised at that point in the original flow. */\n    fprintf(f, \" memory=%p\", (void *) pool->memory);\n    /* If pos/end/size contain meaningful values (non-zero), include them. */\n    fprintf(f, \" pos=%zu end=%zu size=%zu\", (size_t) pool->pos, (size_t) pool->end, (size_t) pool->size);\n#if defined(__STDC_VERSION__)\n    fprintf(f, \" is_mmap=%d\", (int) pool->is_mmap);\n#endif\n  }\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  /* Log entry and state just before the assertion. This documents the\n     values involved in the assert even if mhd_assert is a no-op. */\n  mhd_probe_log(\"ENTRY_BEFORE_ASSERT_max_gt_0\", max, NULL, 0);\n  mhd_assert (max > 0);\n  /* Log immediately after the assertion point to show control flow continues. */\n  mhd_probe_log(\"ENTRY_AFTER_ASSERT_max_gt_0\", max, NULL, 0);\n\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n  {\n    mhd_probe_log(\"ALLOC_POOL_FAILED\", max, NULL, 0);\n    return NULL;\n  }\n\n  mhd_probe_log(\"POOL_ALLOCATED\", max, pool, alloc_size);\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    mhd_probe_log(\"CHOOSE_MAP_FAILED_SMALL_REQUEST\", max, pool, alloc_size);\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n    mhd_probe_log(\"AFTER_MMAP_ATTEMPT\", max, pool, alloc_size);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n    mhd_probe_log(\"AFTER_VIRTUALALLOC_ATTEMPT\", max, pool, alloc_size);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n  mhd_probe_log(\"NO_ANONYMOUS_MAPS\", max, pool, alloc_size);\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      mhd_probe_log(\"FALLBACK_ALLOC_FAILED\", max, pool, alloc_size);\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n    mhd_probe_log(\"FALLBACK_MALLOC_SUCCESS\", max, pool, alloc_size);\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    mhd_probe_log(\"USING_MMAP_SUCCESS\", max, pool, alloc_size);\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n\n  /* Log alignment info just before the alignment assertion so we have a record\n     of the values that the assert would check even when the assert macro is a no-op. */\n  mhd_probe_log(\"BEFORE_ALIGNMENT_ASSERT\", max, pool, alloc_size);\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_probe_log(\"AFTER_INIT_POS_END_SIZE\", max, pool, alloc_size);\n\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  mhd_probe_log(\"RETURNING_POOL\", max, pool, alloc_size);\n  return pool;\n}\n"
}