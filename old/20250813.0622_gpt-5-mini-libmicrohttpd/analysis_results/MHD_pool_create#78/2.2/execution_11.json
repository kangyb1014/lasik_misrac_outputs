{
  "result": "success",
  "message": "ENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce70e0\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce70e0, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce8340\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce8340, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce8590\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce8590, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce87e0\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce87e0, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce8a30\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce8a30, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce8c80\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce8c80, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce8ed0\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce8ed0, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: MHD_pool_create called with max=32768\nAFTER_ASSERT: reached after mhd_assert(max>0); max=32768\nmalloc(sizeof(MemoryPool)) -> pool=0x55e42cce70b0\nBRANCH: small allocation or less than threshold -> set pool->memory = MAP_FAILED; max=32768\nFALLBACK: using malloc for pool->memory; alloc_size rounded to 32768\nmalloc(alloc_size) -> pool->memory=0x55e42cce9120\nPOOL_STATE: is_mmap=false\nFINAL_STATE: pool=0x55e42cce70b0, memory=0x55e42cce9120, pos=0, end=32768, size=32768\nEXIT: returning pool=0x55e42cce70b0\nENTRY: M"
}