{
  "user_message": "An agent A claimed that the following MHD_pool_create code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_create.\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro _MHD_POISON_MEMORY(pointer, size) is defined as (void)0. Calls such as _MHD_POISON_MEMORY(pool->memory, pool->size); in MHD_pool_create therefore compile to a no-op expression statement that is executed but has no effect. Removing that statement would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nmhd_probe_log_state(const char *label,\n                    struct MemoryPool *pool,\n                    size_t alloc_size,\n                    void *memory_ptr,\n                    size_t pos_val,\n                    size_t end_val,\n                    size_t size_val,\n                    int is_mmap_known,\n                    int is_mmap)\n{\n  FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"MHD_pool_create: %s\\n\", label);\n  fprintf(f, \"  pool=%p alloc_size=%zu\\n\", (void *) pool, alloc_size);\n  fprintf(f, \"  memory_ptr=%p\\n\", memory_ptr);\n  if (pos_val || end_val || size_val)\n    fprintf(f, \"  pos=%zu end=%zu size=%zu\\n\", pos_val, end_val, size_val);\n  if (is_mmap_known)\n    fprintf(f, \"  is_mmap=%d\\n\", is_mmap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n\n  /* Log: after allocating pool structure (fields not yet initialised). */\n  mhd_probe_log_state(\"after_pool_alloc\", pool, alloc_size, NULL, 0, 0, 0, 0, 0);\n\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n\n  /* Log: after deciding/attempting to obtain memory region. */\n  mhd_probe_log_state(\"after_memory_assignment\", pool, alloc_size, pool->memory, 0, 0, 0, 0, 0);\n\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n\n    /* Log: after malloc fallback and is_mmap set false. */\n    mhd_probe_log_state(\"after_malloc_fallback\", pool, alloc_size, pool->memory, 0, 0, 0, 1, 0);\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n\n    /* Log: after successful mmap/VirtualAlloc and is_mmap set true. */\n    mhd_probe_log_state(\"after_mmap_success\", pool, alloc_size, pool->memory, 0, 0, 0, 1, 1);\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n\n  /* Log: just before calling _MHD_POISON_MEMORY. Capture complete state. */\n  mhd_probe_log_state(\"before_poison\", pool, alloc_size, pool->memory, pool->pos, pool->end, pool->size, 1, pool->is_mmap ? 1 : 0);\n\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n\n  /* Log: immediately after calling _MHD_POISON_MEMORY to show no state change. */\n  mhd_probe_log_state(\"after_poison\", pool, alloc_size, pool->memory, pool->pos, pool->end, pool->size, 1, pool->is_mmap ? 1 : 0);\n  return pool;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676080e0\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676080e0\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676080e0\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609340\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609340\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609340\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609590\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609590\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609590\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676097e0\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676097e0\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb676097e0\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609a30\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609a30\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609a30\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609c80\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609c80\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609c80\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_pool_alloc\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=(nil)\n\nMHD_pool_create: after_memory_assignment\n  pool=0x55fb67607ed0 alloc_size=0\n  memory_ptr=0xffffffffffffffff\n\nMHD_pool_create: after_malloc_fallback\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609ed0\n  is_mmap=0\n\nMHD_pool_create: before_poison\n  pool=0x55fb67607ed0 alloc_size=32768\n  memory_ptr=0x55fb67609ed0\n  pos=0 end=32768 size=32768\n  is_mmap=0\n\nMHD_pool_create: after_poison\n  pool=0x55fb67607ed0 alloc_size=\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The probe shows that _MHD_POISON_MEMORY expands to a no-op and that the program state before and after the call is identical in all exhaustive tests. Under MISRA C 2023 Rule 2.2, an executed operation whose removal would not affect program behaviour is dead code. Given the provided evidence and the assumptions, the _MHD_POISON_MEMORY(pool->memory, pool->size); invocation is dead code in this project build and thus violates Rule 2.2."
}