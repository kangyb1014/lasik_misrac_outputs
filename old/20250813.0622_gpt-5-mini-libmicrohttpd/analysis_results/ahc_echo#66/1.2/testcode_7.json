{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function is prefixed by the macro _MHD_EXTERN. That macro is typically used to inject compiler-specific storage/visibility attributes (for example __attribute__((visibility(\"default\"))) or __declspec(dllexport)) which are compiler extensions. If _MHD_EXTERN expands to such compiler-specific attributes/keywords, this use violates MISRA C 2023 Rule 1.2 (language extensions must not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/528.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper that appends diagnostic information to /tmp/logs/528.txt.\n * This does not change the logic of ahc_echo; it only records control flow\n * and relevant state to help reproduce the reported scenario.\n */\nstatic void\nahc_echo_log_probe(const char *stage,\n                   const char *method,\n                   const char *url,\n                   const char *version,\n                   void **req_cls,\n                   void *aptr_addr)\n{\n  FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"---- ahc_echo probe: %s ----\\n\", stage ? stage : \"(null)\");\n\n  /* Compile-time presence of the indicator macro reported by the other agent. */\n#ifdef _MHD_EXTERN\n  fprintf(f, \"_MHD_EXTERN: DEFINED\\n\");\n#else\n  fprintf(f, \"_MHD_EXTERN: NOT DEFINED\\n\");\n#endif\n\n  /* Some compiler-identifying macros for additional context (optional). */\n#ifdef __GNUC__\n  fprintf(f, \"__GNUC__: %d\\n\", __GNUC__);\n#endif\n#ifdef _MSC_VER\n  fprintf(f, \"_MSC_VER: %d\\n\", _MSC_VER);\n#endif\n\n  fprintf(f, \"method: %s\\n\", method ? method : \"(null)\");\n  fprintf(f, \"url ptr: %p, version ptr: %p\\n\", (void *) url, (void *) version);\n  fprintf(f, \"aptr addr: %p, req_cls ptr: %p\\n\", aptr_addr, (void *) req_cls);\n  if (NULL != req_cls)\n  {\n    void *req_cls_val = *req_cls;\n    fprintf(f, \"*req_cls (current value): %p\\n\", req_cls_val);\n  }\n  else\n    fprintf(f, \"req_cls is NULL\\n\");\n\n  fprintf(f, \"Comparing method to \\\"GET\\\" -> strcmp result: \");\n  if (NULL == method)\n    fprintf(f, \"(null method)\\n\");\n  else\n    fprintf(f, \"%d\\n\", strcmp(method, \"GET\"));\n\n  fprintf(f, \"-------------------------------\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and compile-time info (e.g. whether _MHD_EXTERN was defined at compile time). */\n  ahc_echo_log_probe(\"entry\", method, url, version, req_cls, &aptr);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    /* Log unexpected method before returning. */\n    ahc_echo_log_probe(\"unexpected_method\", method, url, version, req_cls, &aptr);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    /* Log that we're registering the request context and returning early. */\n    ahc_echo_log_probe(\"first_call_set_req_cls\", method, url, version, req_cls, &aptr);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n\n  /* For logging: safely capture some auth_info fields if present. */\n  int auth_username_len = -1;\n  int auth_password_len = -1;\n  const char *auth_username = NULL;\n  const char *auth_password = NULL;\n  if (NULL != auth_info)\n  {\n    auth_username_len = auth_info->username_len;\n    auth_password_len = auth_info->password_len;\n    auth_username = auth_info->username;\n    auth_password = auth_info->password;\n  }\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  /* Log authentication details and decision. */\n  {\n    FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"auth_info ptr: %p\\n\", (void *) auth_info);\n      fprintf(f, \"auth_username_len: %d, auth_password_len: %d\\n\",\n              auth_username_len, auth_password_len);\n      if (NULL != auth_username)\n        fprintf(f, \"auth_username (ptr): %p, prefix: '%.16s'\\n\", (void *) auth_username, auth_username);\n      else\n        fprintf(f, \"auth_username: NULL\\n\");\n      if (NULL != auth_password)\n        fprintf(f, \"auth_password (ptr): %p, prefix: '%.16s'\\n\", (void *) auth_password, auth_password);\n      else\n        fprintf(f, \"auth_password: NULL\\n\");\n      fprintf(f, \"computed fail value: %d\\n\", fail);\n      fprintf(f, \"-------------------------------\\n\");\n      fclose(f);\n    }\n  }\n\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  /* Log final return value for traceability. */\n  {\n    FILE *f = fopen(\"/tmp/logs/528.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ahc_echo returning ret: %d\\n\", (int) ret);\n      fprintf(f, \"===============================\\n\");\n      fclose(f);\n    }\n  }\n  return ret;\n}\n"
}