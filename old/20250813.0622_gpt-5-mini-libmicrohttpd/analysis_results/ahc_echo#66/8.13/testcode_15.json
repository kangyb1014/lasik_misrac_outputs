{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses auth_info->password which is (likely) declared as a non-const pointer (e.g. char *password) but is only read (memcmp) and therefore should be const-qualified. Passing a non-const pointer to a function that only inspects the data indicates the pointer in the structure should be declared as pointing to const data. (Also the string literal \"open sesame\" is effectively const and should be treated as const char[]).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stdint.h>\n\nstatic void ahc_log_probe_pre(const char *method, void **req_cls, struct MHD_BasicAuthInfo *auth_info)\n{\n  FILE *f = fopen(\"/tmp/logs/531.txt\", \"a\");\n  if (!f)\n    return;\n\n  time_t t = time(NULL);\n  fprintf(f, \"---- ahc_echo probe (pre) %ld ----\\n\", (long)t);\n  fprintf(f, \"method=%s req_cls_ptr=%p req_cls_value=%p\\n\", method, (void *)&req_cls, *req_cls);\n  fprintf(f, \"auth_info_ptr=%p\\n\", (void *) auth_info);\n  if (NULL == auth_info)\n  {\n    fprintf(f, \"auth_info: NULL\\n\");\n    fclose(f);\n    return;\n  }\n\n  fprintf(f, \"username_ptr=%p username_len=%zu\\n\",\n          (void *) auth_info->username, (size_t) auth_info->username_len);\n  /* print username safely (may not be NUL-terminated) */\n  if (auth_info->username && auth_info->username_len > 0)\n  {\n    size_t n = auth_info->username_len > 64 ? 64 : auth_info->username_len;\n    fprintf(f, \"username_sample=\\\"\");\n    fwrite(auth_info->username, 1, n, f);\n    if (auth_info->username_len > n)\n      fprintf(f, \"...\\\"\");\n    else\n      fprintf(f, \"\\\"\");\n    fprintf(f, \" (len=%zu)\\n\", (size_t) auth_info->username_len);\n  }\n  else\n  {\n    fprintf(f, \"username_sample=(none)\\n\");\n  }\n\n  fprintf(f, \"password_ptr=%p password_len=%zu\\n\",\n          (void *) auth_info->password, (size_t) auth_info->password_len);\n  if (auth_info->password && auth_info->password_len > 0)\n  {\n    size_t n = auth_info->password_len > 64 ? 64 : auth_info->password_len;\n    fprintf(f, \"password_sample=\\\"\");\n    fwrite(auth_info->password, 1, n, f);\n    if (auth_info->password_len > n)\n      fprintf(f, \"...\\\"\");\n    else\n      fprintf(f, \"\\\"\");\n    fprintf(f, \" (len=%zu)\\n\", (size_t) auth_info->password_len);\n  }\n  else\n  {\n    fprintf(f, \"password_sample=(none)\\n\");\n  }\n\n  /* Perform the same comparisons used by ahc_echo for logging only. */\n  if (NULL != auth_info && NULL != auth_info->username)\n  {\n    int cmp_user = memcmp(auth_info->username, \"Aladdin\", auth_info->username_len);\n    fprintf(f, \"memcmp(username, \\\"Aladdin\\\", username_len) => %d\\n\", cmp_user);\n  }\n  else\n  {\n    fprintf(f, \"memcmp(username, ...) => not performed (NULL)\\n\");\n  }\n\n  if (NULL != auth_info && NULL != auth_info->password)\n  {\n    int cmp_pw = memcmp(auth_info->password, \"open sesame\", auth_info->password_len);\n    fprintf(f, \"memcmp(password, \\\"open sesame\\\", password_len) => %d\\n\", cmp_pw);\n  }\n  else\n  {\n    fprintf(f, \"memcmp(password, ...) => not performed (NULL)\\n\");\n  }\n\n  fclose(f);\n}\n\nstatic void ahc_log_probe_post(int fail, enum MHD_Result ret, struct MHD_BasicAuthInfo *auth_info)\n{\n  FILE *f = fopen(\"/tmp/logs/531.txt\", \"a\");\n  if (!f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"---- ahc_echo probe (post) %ld ----\\n\", (long)t);\n  fprintf(f, \"auth_info_ptr=%p fail=%d ret=%d\\n\",\n          (void *) auth_info, fail, (int) ret);\n  if (NULL != auth_info)\n    fprintf(f, \"freeing auth_info at %p\\n\", (void *) auth_info);\n  fprintf(f, \"-------------------------------\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n\n  /* Insert probes to log control flow and state relevant to the auth check. */\n  ahc_log_probe_pre(method, req_cls, auth_info);\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n\n  ahc_log_probe_post(fail, ret, auth_info);\n\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}