{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert invocation is a diagnostic-only macro. If mhd_assert expands to a no-op in production builds (for example to ((void)0) or nothing when assertions are disabled), the statement becomes an operation with no effect; removing it would not change program behaviour. That makes it dead code and thus violates MISRA C 2023 Rule 2.2. (If mhd_assert has observable side-effects in all builds, then it would not be dead; the violation scenario assumes the usual case where assert macros are compiled out.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/530.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* timestamp */\n  time_t t = time(NULL);\n  struct tm tm_buf;\n  (void)gmtime_r(&t, &tm_buf);\n  char timestr[64];\n  (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%dT%H:%M:%SZ\", &tm_buf);\n\n  fprintf(f, \"%s: \", timestr);\n  va_list ap;\n  va_start(ap, fmt);\n  (void)vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Safely copy up to 'max' bytes from a possibly non-NUL-terminated buffer\n * into a local NUL-terminated string for logging.\n */\nstatic void probe_copy_str(char *dst, size_t dst_size, const char *src, size_t src_len)\n{\n  if (dst_size == 0U)\n    return;\n  if (src == NULL)\n  {\n    dst[0] = '\\0';\n    return;\n  }\n  size_t n = src_len;\n  if (n > dst_size - 1U)\n    n = dst_size - 1U;\n  if (n > 0U)\n    (void)memcpy(dst, src, n);\n  dst[n] = '\\0';\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and key inputs */\n  probe_log(\"ahc_echo entry: method='%s', req_cls_ptr=%p, *req_cls=%p, aptr_addr=%p\",\n            (method != NULL) ? method : \"(null)\", (void *) &req_cls, (void *) *req_cls, (void *) &aptr);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    probe_log(\"unexpected method '%s' -> returning MHD_NO\", (method != NULL) ? method : \"(null)\");\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    probe_log(\"first call for this connection: storing &aptr (%p) into *req_cls and returning MHD_YES\", (void *) &aptr);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  probe_log(\"subsequent call: clearing *req_cls and continuing\");\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    probe_log(\"auth_info == NULL\");\n  }\n  else\n  {\n    char uname[65];\n    char passwd[65];\n    probe_copy_str(uname, sizeof(uname), auth_info->username, auth_info->username_len);\n    probe_copy_str(passwd, sizeof(passwd), auth_info->password, auth_info->password_len);\n    probe_log(\"auth_info: username_len=%zu, password_len=%zu, username_preview='%s', password_preview='%s'\",\n              (size_t)auth_info->username_len, (size_t)auth_info->password_len, uname, passwd);\n  }\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  probe_log(\"authentication evaluation complete: fail=%d\", fail);\n\n  if (fail)\n  {\n    probe_log(\"preparing DENIED response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n    probe_log(\"queued basic auth response, ret=%d\", (int) ret);\n  }\n  else\n  {\n    probe_log(\"preparing PAGE response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    probe_log(\"queued OK response, ret=%d\", (int) ret);\n  }\n  if (NULL != auth_info)\n  {\n    MHD_free (auth_info);\n    probe_log(\"freed auth_info\");\n  }\n  MHD_destroy_response (response);\n  probe_log(\"destroyed response, returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}