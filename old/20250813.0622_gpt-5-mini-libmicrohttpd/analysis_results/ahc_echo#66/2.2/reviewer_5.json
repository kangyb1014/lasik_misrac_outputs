{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data;' is an executed no-op whose removal would not affect program behaviour \u2014 it only suppresses an unused-parameter warning. According to MISRA C 2023 Rule 2.2 (any executed operation whose removal does not change behaviour is dead code), this constitutes dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void write_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameter state (do not dereference req_cls if NULL) */\n  write_log(\"ahc_echo: entry: method=%s, url=%s, version=%s, cls=%p, req_cls=%p\",\n            method ? method : \"(null)\",\n            url ? url : \"(null)\",\n            version ? version : \"(null)\",\n            cls,\n            (void *) (req_cls ? *req_cls : NULL));\n\n  /* Specifically log that the no-op cast of upload_data is executed.\n     This provides evidence that the statement is executed at runtime\n     while having no semantic effect beyond suppressing warnings. */\n  write_log(\"ahc_echo: about to execute no-op cast: (void) upload_data;\");\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    write_log(\"ahc_echo: unexpected method (not GET): %s\", method ? method : \"(null)\");\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    write_log(\"ahc_echo: first call for connection; setting req_cls to &aptr and returning MHD_YES\");\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  write_log(\"ahc_echo: subsequent call; resetting req_cls to NULL and continuing\");\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    write_log(\"ahc_echo: auth_info == NULL\");\n  }\n  else\n  {\n    write_log(\"ahc_echo: auth_info: username_len=%zu, password_len=%zu\",\n              auth_info->username_len, auth_info->password_len);\n  }\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n\n  write_log(\"ahc_echo: authentication evaluation result: fail=%d\", fail);\n\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n    write_log(\"ahc_echo: queued basic auth required response; ret=%d\", (int) ret);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    write_log(\"ahc_echo: queued OK response; ret=%d\", (int) ret);\n  }\n  if (NULL != auth_info)\n  {\n    MHD_free (auth_info);\n    write_log(\"ahc_echo: freed auth_info\");\n  }\n  MHD_destroy_response (response);\n  write_log(\"ahc_echo: exiting; return value=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The single statement \u201c(void) upload_data;\u201d is a deliberate no-op used to document/suppress an unused-parameter warning. MISRA C 2023 Rule 2.2 targets executed operations whose removal would not affect program behaviour (so-called dead code such as assignments whose removal never changes outputs or control flow). The cast-to-void expression is an idiomatic way to mark an unused parameter and is not the kind of functional dead code the rule is intended to ban. Practical points:\n\n- The cast-to-void produces no observable side\u2011effects for a non-volatile parameter and typically compiles to no instructions; it is an annotation for the reader/compiler, not behaviour-changing logic. Removing it does not change the program semantics in any meaningful way, but MISRA\u2019s concern with dead code is primarily about actual logic that is executed and could mask faults, not language idioms to silence warnings.\n- If the parameter were volatile or reading it had observable effects, then the expression would have behaviour and its removal could change program behaviour; that is not the case here (upload_data is a const char *).\n- Many coding standards (including MISRA guidance elsewhere) accept canonical forms to indicate intentionally unused parameters rather than treating them as violations of dead-code rules; static-analysis tools commonly recognize (void)param idiom.\n\nTherefore Agent A\u2019s claim that this specific line constitutes a violation of MISRA C 2023 Rule 2.2 is incorrect."
}