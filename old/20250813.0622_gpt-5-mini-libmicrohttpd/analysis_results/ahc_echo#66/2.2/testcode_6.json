{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) cls;' is an evaluation-only expression with no side effects (cls is a non-volatile parameter). Removing this statement does not change program behaviour, so it is dead code. The same reasoning applies to the similar '(void) url;', '(void) version;', '(void) upload_data;' and '(void) upload_data_size;' lines in the function.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line to /tmp/logs/530.txt */\nstatic void ahc_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n\n  /* Log entry and initial parameter/state snapshot. This preserves\n   * original logic while providing reproducible evidence that the\n   * subsequent '(void) ...;' lines are purely evaluation-only in the\n   * original code path. */\n  ahc_log(\"ahc_echo: entered; connection=%p, method=%p, req_cls=%p, *req_cls=%p\",\n          (void *) connection, (void *) method, (void *) req_cls,\n          (void *) ((req_cls != NULL) ? *req_cls : NULL));\n\n  ahc_log(\"ahc_echo: method string='%s'\", (method != NULL) ? method : \"(null)\");\n\n  /* Keep the original evaluation-only casts; add fine-grained logs\n   * immediately after to show the parameters' runtime values. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  ahc_log(\"ahc_echo: parameter cls evaluated (address=%p)\", (void *) cls);\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  if (NULL != url)\n    ahc_log(\"ahc_echo: parameter url evaluated (address=%p, first_bytes='%c%c%c')\",\n            (void *) url,\n            (url[0] != '\\0') ? url[0] : '?',\n            (url[1] != '\\0') ? url[1] : '?',\n            (url[2] != '\\0') ? url[2] : '?');\n  else\n    ahc_log(\"ahc_echo: parameter url evaluated (NULL)\");\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  if (NULL != version)\n    ahc_log(\"ahc_echo: parameter version evaluated (address=%p, text='%s')\",\n            (void *) version, version);\n  else\n    ahc_log(\"ahc_echo: parameter version evaluated (NULL)\");\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  if (NULL != upload_data)\n    ahc_log(\"ahc_echo: parameter upload_data evaluated (address=%p, first_byte=%d)\",\n            (void *) upload_data, (int)((unsigned char)upload_data[0]));\n  else\n    ahc_log(\"ahc_echo: parameter upload_data evaluated (NULL)\");\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  if (NULL != upload_data_size)\n    ahc_log(\"ahc_echo: parameter upload_data_size evaluated (address=%p, pointed_value=%zu)\",\n            (void *) upload_data_size, *upload_data_size);\n  else\n    ahc_log(\"ahc_echo: parameter upload_data_size evaluated (NULL)\");\n\n  /* Continue with original logic */\n  if (0 != strcmp (method, \"GET\"))\n  {\n    ahc_log(\"ahc_echo: unexpected method, returning MHD_NO\");\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    ahc_log(\"ahc_echo: first call for this connection, setting req_cls and returning MHD_YES\");\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  ahc_log(\"ahc_echo: proceeding to handle authenticated request; resetting req_cls\");\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL != auth_info)\n    ahc_log(\"ahc_echo: auth_info obtained (username_len=%zu, password_len=%zu)\",\n            (size_t) auth_info->username_len, (size_t) auth_info->password_len);\n  else\n    ahc_log(\"ahc_echo: no auth_info present\");\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    ahc_log(\"ahc_echo: authentication failed, queuing auth-required response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    ahc_log(\"ahc_echo: authentication succeeded, queuing OK response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n  {\n    MHD_free (auth_info);\n    ahc_log(\"ahc_echo: freed auth_info\");\n  }\n  MHD_destroy_response (response);\n  ahc_log(\"ahc_echo: returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}