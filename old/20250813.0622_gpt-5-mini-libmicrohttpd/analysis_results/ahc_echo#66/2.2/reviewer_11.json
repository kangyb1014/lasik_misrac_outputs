{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data_size;' is an executed no-op whose removal would not change program behaviour (it only suppresses an \"unused parameter\" warning). Therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_echo_probe(const char *event,\n                           const char *method,\n                           const char *url,\n                           const char *version,\n                           const char *upload_data,\n                           size_t *upload_data_size,\n                           void **req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  fprintf(f, \"[ahc_echo] event=%s\\n\", event);\n  if (method)\n    fprintf(f, \"  method='%s'\\n\", method);\n  if (url)\n    fprintf(f, \"  url='%s'\\n\", url);\n  if (version)\n    fprintf(f, \"  version='%s'\\n\", version);\n  fprintf(f, \"  upload_data=%p\\n\", (void *) upload_data);\n  fprintf(f, \"  upload_data_size_ptr=%p\\n\", (void *) upload_data_size);\n  if (upload_data_size)\n    fprintf(f, \"  upload_data_size_value=%zu\\n\", *upload_data_size);\n  fprintf(f, \"  req_cls_ptr=%p\\n\", (void *) req_cls);\n  /* Do NOT dereference *req_cls here: it may be uninitialised on first call. */\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and the fact that the (void) cast lines executed (no-op). */\n  ahc_echo_probe(\"entry_after_voids\",\n                 method, url, version, upload_data, upload_data_size, req_cls);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    ahc_echo_probe(\"unexpected_method\", method, url, version, upload_data, upload_data_size, req_cls);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    ahc_echo_probe(\"first_call_set_req_cls\", method, url, version, upload_data, upload_data_size, req_cls);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  ahc_echo_probe(\"second_call_clear_req_cls_before_reset\", method, url, version, upload_data, upload_data_size, req_cls);\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    ahc_echo_probe(\"auth_failed\", method, url, version, upload_data, upload_data_size, req_cls);\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    ahc_echo_probe(\"auth_succeeded\", method, url, version, upload_data, upload_data_size, req_cls);\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  ahc_echo_probe(\"exit\", method, url, version, upload_data, upload_data_size, req_cls);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s narrow claim is not correct as a MISRA violation. While the statement \u201c(void) upload_data_size;\u201d is a no\u2011op at runtime (its removal would not change program behaviour) and therefore could be described as redundant, MISRA\u2019s body of guidance recognises the common, intentional idiom of casting unused parameters to void to document intent and suppress compiler warnings. In practice this is the accepted way to satisfy rules about unused parameters and is not treated as a Rule 2.2 defect in real codebases. The provided runtime probe not producing logs does not change this assessment.\n\nSo, although a literal reading of \"any operation whose removal would not affect program behaviour\" could cover a (void) cast, MISRA usage and intent treat explicit void casts on unused parameters as an acceptable idiom (or as an allowable deviation) rather than dead code that must be removed. Therefore the report is not correct."
}