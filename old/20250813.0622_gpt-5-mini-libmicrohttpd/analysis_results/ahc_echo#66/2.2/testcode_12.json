{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression '(void) url;' is a no-op used solely to silence an \"unused parameter\" warning. It performs no observable action and removing it would not affect program behaviour, so it constitutes executed dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/530.txt */\nstatic void ahc_echo_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fputc('\\n', f);\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n\n  /* Log entry and pointers/state that are safe to observe without\n     changing program behaviour. We avoid dereferencing strings that\n     may be NULL; only pointer values and lengths (where available)\n     are logged. */\n  ahc_echo_log(\"ahc_echo: entry: cls=%p connection=%p url=%p method=%p version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n               cls, connection, (const void *) url, (const void *) method,\n               (const void *) version, (const void *) upload_data,\n               (const void *) upload_data_size, (const void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  ahc_echo_log(\"ahc_echo: executed no-op: (void) cls; cls=%p\", cls);\n\n  /* The following line is the reported executed no-op that constitutes\n     dead code per the violation scenario. We keep it to preserve the\n     original logic and also log immediately before and after it so\n     other tools/agents can observe that the no-op is executed. */\n  ahc_echo_log(\"ahc_echo: about to execute no-op: (void) url; url_ptr=%p\", (const void *) url);\n  (void) url;               /* Unused. Silent compiler warning. */\n  ahc_echo_log(\"ahc_echo: completed no-op: (void) url; url_ptr=%p\", (const void *) url);\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  ahc_echo_log(\"ahc_echo: executed no-op: (void) version; version_ptr=%p\", (const void *) version);\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  ahc_echo_log(\"ahc_echo: executed no-op: (void) upload_data; upload_data_ptr=%p\", (const void *) upload_data);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  ahc_echo_log(\"ahc_echo: executed no-op: (void) upload_data_size; upload_data_size_ptr=%p\", (const void *) upload_data_size);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    ahc_echo_log(\"ahc_echo: method mismatch: method=%s -> returning MHD_NO\", method ? method : \"(null)\");\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    ahc_echo_log(\"ahc_echo: first call detected: setting *req_cls=%p and returning MHD_YES\", (void *) &aptr);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  ahc_echo_log(\"ahc_echo: subsequent call: resetting *req_cls (was %p)\", *req_cls);\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  ahc_echo_log(\"ahc_echo: obtained auth_info=%p\", (void *) auth_info);\n\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  ahc_echo_log(\"ahc_echo: auth checks: fail=%d\", fail);\n  if (fail)\n  {\n    ahc_echo_log(\"ahc_echo: authentication failed -> queuing auth required response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    ahc_echo_log(\"ahc_echo: authentication succeeded -> queuing OK response\");\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n  {\n    ahc_echo_log(\"ahc_echo: freeing auth_info=%p\", (void *) auth_info);\n    MHD_free (auth_info);\n  }\n  MHD_destroy_response (response);\n  ahc_echo_log(\"ahc_echo: exit: ret=%d\", (int) ret);\n  return ret;\n}\n"
}