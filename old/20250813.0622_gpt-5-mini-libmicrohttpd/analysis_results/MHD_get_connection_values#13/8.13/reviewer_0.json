{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used to read members (pos->kind, pos->header, pos->value) and to follow the next pointer; it is never used to modify the pointed-to object. According to MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type (e.g. 'const struct MHD_HTTP_Req_Header *pos'). Thus the current declaration violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  probe_log(\"MHD_get_connection_values called: connection=%p kind=0x%X iterator=%p iterator_cls=%p\",\n            (void *)connection, (unsigned)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    probe_log(\"connection is NULL -> returning -1\");\n    return -1;\n  }\n\n  ret = 0;\n  probe_log(\"Starting headers iteration: headers_received=%p\", (void *)connection->rq.headers_received);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log(\"Visiting header node: pos=%p next=%p pos->kind=0x%X pos->header=%p pos->value=%p\",\n              (void *)pos, (void *)pos->next, (unsigned)pos->kind, (void *)pos->header, (void *)pos->value);\n\n    if (0 != (pos->kind & kind))\n    {\n      probe_log(\"Header matches requested kind: pos->kind=0x%X kind=0x%X\", (unsigned)pos->kind, (unsigned)kind);\n      ret++;\n      probe_log(\"Incremented ret -> %d\", ret);\n\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n      {\n        probe_log(\"Iterator returned MHD_NO -> early return ret=%d\", ret);\n        return ret;\n      }\n      probe_log(\"Iterator either NULL or did not return MHD_NO -> continue\");\n    }\n    else\n    {\n      probe_log(\"Header does not match requested kind: pos->kind=0x%X kind=0x%X -> continue\",\n                (unsigned)pos->kind, (unsigned)kind);\n    }\n  }\n\n  probe_log(\"Completed headers iteration -> final ret=%d\", ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for MHD_get_connection_values. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s conclusion is correct in the sense of MISRA C: the local variable pos is only used to read members and to follow the next pointer (no modifications through pos), so it can and therefore should be declared as pointing to a const-qualified type (e.g. \"const struct MHD_HTTP_Req_Header *pos\"). That is exactly what MISRA C 2023 Rule 8.13 advises: if a pointer does not modify the pointed-to object it should point to a const-qualified type. Converting connection->rq.headers_received (likely a \"struct MHD_HTTP_Req_Header *\") to \"const struct MHD_HTTP_Req_Header *\" is allowed, and the loop assignment pos = pos->next remains valid (implicit conversion from non-const pointer to pointer-to-const). Note: Rule 8.13 is a \u201cshould\u201d advisory; if there is a justified reason for keeping pos non-const (e.g. code not shown that later modifies the node via pos, or API constraints), that should be documented as a deviation. Otherwise this code violates the guidance of Rule 8.13 and should be changed to use a pointer-to-const."
}