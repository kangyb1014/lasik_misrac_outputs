{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used to read members (pos->kind, pos->header, pos->value) and to follow the next pointer; it is never used to modify the pointed-to object. According to MISRA C 2023 Rule 8.13 it should be declared as pointing to a const-qualified type (e.g. 'const struct MHD_HTTP_Req_Header *pos'). Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends formatted messages to /tmp/logs/107.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  probe_log(\"MHD_get_connection_values called: connection=%p kind=0x%X iterator=%p iterator_cls=%p\",\n            (void *)connection, (unsigned)kind, (void *)iterator, iterator_cls);\n\n  if (NULL == connection)\n  {\n    probe_log(\"connection is NULL -> returning -1\");\n    return -1;\n  }\n\n  ret = 0;\n  probe_log(\"Starting headers iteration: headers_received=%p\", (void *)connection->rq.headers_received);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_log(\"Visiting header node: pos=%p next=%p pos->kind=0x%X pos->header=%p pos->value=%p\",\n              (void *)pos, (void *)pos->next, (unsigned)pos->kind, (void *)pos->header, (void *)pos->value);\n\n    if (0 != (pos->kind & kind))\n    {\n      probe_log(\"Header matches requested kind: pos->kind=0x%X kind=0x%X\", (unsigned)pos->kind, (unsigned)kind);\n      ret++;\n      probe_log(\"Incremented ret -> %d\", ret);\n\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n      {\n        probe_log(\"Iterator returned MHD_NO -> early return ret=%d\", ret);\n        return ret;\n      }\n      probe_log(\"Iterator either NULL or did not return MHD_NO -> continue\");\n    }\n    else\n    {\n      probe_log(\"Header does not match requested kind: pos->kind=0x%X kind=0x%X -> continue\",\n                (unsigned)pos->kind, (unsigned)kind);\n    }\n  }\n\n  probe_log(\"Completed headers iteration -> final ret=%d\", ret);\n  return ret;\n}\n"
}