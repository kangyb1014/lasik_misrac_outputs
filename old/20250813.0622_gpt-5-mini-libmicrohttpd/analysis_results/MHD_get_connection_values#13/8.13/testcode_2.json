{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function pointer type MHD_KeyValueIterator and/or the struct members pos->header and pos->value are declared as non-const pointers (for example: typedef int (*MHD_KeyValueIterator)(void *cls, enum MHD_ValueKind kind, char *header, char *value); and struct MHD_HTTP_Req_Header { char *header; char *value; ... };), then Rule 8.13 is violated. The header/value pointers (and possibly iterator_cls if the iterator does not modify the pointed-to object) should be declared pointing to const-qualified types (const char * and/or const void *) whenever the objects are not modified by the iterator.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper that appends human-readable logs to /tmp/logs/107.txt. */\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  mhd_log(\"MHD_get_connection_values ENTRY: connection=%p kind=%d iterator=%p iterator_cls=%p\",\n          (void *)connection, (int)kind, (void *)iterator, (void *)iterator_cls);\n\n  if (NULL == connection)\n  {\n    mhd_log(\"MHD_get_connection_values: connection is NULL -> returning -1\");\n    return -1;\n  }\n  ret = 0;\n  mhd_log(\"MHD_get_connection_values: start iteration, initial ret=%d, headers_received=%p\",\n          ret, (void *)connection->rq.headers_received);\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log pointer and member state for each header node */\n    mhd_log(\"loop: pos=%p pos->kind=%d pos->header=%p pos->value=%p\",\n            (void *)pos, (int)pos->kind, (void *)pos->header, (void *)pos->value);\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      mhd_log(\"match: pos=%p matched kind mask, incremented ret=%d\", (void *)pos, ret);\n\n      if (NULL != iterator)\n      {\n        mhd_log(\"about to call iterator: iterator=%p iterator_cls=%p pos->kind=%d pos->header=%p pos->value=%p\",\n                (void *)iterator, (void *)iterator_cls, (int)pos->kind,\n                (void *)pos->header, (void *)pos->value);\n\n        /* Call iterator and capture its return for logging, preserving original behavior. */\n        int it_ret = iterator (iterator_cls, pos->kind, pos->header, pos->value);\n\n        mhd_log(\"iterator returned: %d (compared to MHD_NO=%d)\", it_ret, (int)MHD_NO);\n\n        if (MHD_NO == it_ret)\n        {\n          mhd_log(\"iterator requested stop -> returning ret=%d\", ret);\n          return ret;\n        }\n      }\n    }\n  }\n\n  mhd_log(\"MHD_get_connection_values EXIT: returning ret=%d\", ret);\n  return ret;\n}\n"
}