{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function declaration uses the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\"))) extern. The GCC-style __attribute__((...)) syntax is a compiler-specific language extension (documented in GCC/clang docs), so the code violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values code that contains useful probe functions that print useful logs to a file \"/tmp/logs/104.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_connection_values as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_connection_values code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_logf(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/104.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  probe_logf(\"ENTER MHD_get_connection_values: connection=%p kind=%u iterator=%p iterator_cls=%p\",\n             (void *)connection,\n             (unsigned int)kind,\n             (void *)iterator,\n             iterator_cls);\n\n  if (NULL == connection)\n  {\n    probe_logf(\"connection is NULL -> returning -1\");\n    return -1;\n  }\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    probe_logf(\"loop header: pos=%p pos->kind=%u header=%s value=%s\",\n               (void *)pos,\n               (unsigned int)pos->kind,\n               (pos->header ? pos->header : \"(null)\"),\n               (pos->value ? pos->value : \"(null)\"));\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      probe_logf(\"header matched: incremented ret to %d\", ret);\n      if (NULL != iterator)\n      {\n        probe_logf(\"calling iterator %p for pos=%p\", (void *)iterator, (void *)pos);\n        int iterator_result = iterator (iterator_cls,\n                                       pos->kind,\n                                       pos->header,\n                                       pos->value);\n        probe_logf(\"iterator returned %d\", iterator_result);\n        if (MHD_NO == iterator_result)\n        {\n          probe_logf(\"iterator requested early stop -> returning %d\", ret);\n          return ret;\n        }\n      }\n    }\n  }\n  probe_logf(\"EXIT MHD_get_connection_values: returning %d\", ret);\n  return ret;\n}\n"
}