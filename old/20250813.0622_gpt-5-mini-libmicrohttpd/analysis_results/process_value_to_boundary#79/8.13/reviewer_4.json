{
  "user_message": "An agent A claimed that the following process_value_to_boundary code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of process_value_to_boundary.\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code mixes a const-qualified pointer (r, declared as const char *) with a non-const pointer (buf, declared as char *). buf points to data that is only read, but is declared non-const (note the cast (char *) &pp[1]); therefore buf should be const char *. Subtracting r - buf exposes the mismatch. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\npp_probe_log(const struct MHD_PostProcessor *pp,\n             const char *tag,\n             size_t newline,\n             const char *r,\n             char *buf,\n             size_t blen,\n             const char *boundary,\n             size_t buffer_pos,\n             size_t buffer_size,\n             size_t value_offset,\n             size_t ioff)\n{\n  FILE *f = fopen(\"/tmp/logs/635.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Basic state */\n  fprintf(f, \"[pp_probe] tag=%s\\n\", tag);\n  fprintf(f, \"[pp_probe] pp=%p buf=%p r=%p\\n\", (void *)pp, (void *)buf, (const void *)r);\n  fprintf(f, \"[pp_probe] newline=%zu buffer_pos=%zu buffer_size=%zu value_offset=%zu ioff=%zu blen=%zu\\n\",\n          newline, buffer_pos, buffer_size, value_offset, ioff, blen);\n  if (NULL != boundary)\n  {\n    /* Print the boundary pointer and length (content may not be NUL-terminated) */\n    fprintf(f, \"[pp_probe] boundary=%p (blen=%zu)\\n\", (const void *)boundary, blen);\n  }\n\n  /* If both pointers valid, log the computed pointer difference like the original code does. */\n  if ((NULL != r) && (NULL != buf))\n  {\n    /* Note: the original code performs (size_t)(r - buf) where r is const char * and buf is char *.\n       Log that same value so agents can reproduce the mismatch evidence. */\n    size_t diff = (size_t) (r - buf);\n    fprintf(f, \"[pp_probe] computed r - buf = %zu\\n\", diff);\n  }\n\n  fprintf(f, \"[pp_probe] ----\\n\");\n  fclose(f);\n}\n\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* Log entry state */\n  pp_probe_log(pp, \"entry\", 0, NULL, buf, blen, boundary,\n               pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        /* Log memchr miss */\n        pp_probe_log(pp, \"memchr_not_found\",\n                     newline, NULL, buf, blen, boundary,\n                     pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n        break;\n      }\n\n      /* compute newline same as original code (this exposes the qualifier mix at runtime) */\n      newline = (size_t) (r - buf);\n\n      /* Log the memchr hit and pointer arithmetic */\n      pp_probe_log(pp, \"memchr_found\",\n                   newline, r, buf, blen, boundary,\n                   pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      int cmp = memcmp (&buf[newline + 4],\n                        boundary,\n                        blen);\n\n      /* Log boundary comparison details */\n      pp_probe_log(pp, (cmp == 0) ? \"boundary_match_check\" : \"boundary_no_match_check\",\n                   newline, r, buf, blen, boundary,\n                   pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n      if (0 != cmp)\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n\n        /* Log the moment of boundary found and adjustments */\n        pp_probe_log(pp, \"boundary_found\",\n                     newline, r, buf, blen, boundary,\n                     pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        /* Log the out-of-memory abort */\n        pp_probe_log(pp, \"oom_abort\",\n                     newline, r, buf, blen, boundary,\n                     pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    /* Log the call to ikvi and its failure */\n    pp_probe_log(pp, \"ikvi_failure\",\n                 newline, r, buf, blen, boundary,\n                 pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n\n  /* Log successful processing before updating offsets */\n  pp_probe_log(pp, \"success_before_update\",\n               newline, r, buf, blen, boundary,\n               pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n\n  /* Log final state at exit */\n  pp_probe_log(pp, \"exit\",\n               newline, r, buf, blen, boundary,\n               pp->buffer_pos, pp->buffer_size, pp->value_offset, *ioffptr);\n\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for process_value_to_boundary. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Rule 8.13 asks that a pointer point to a const-qualified type whenever it can be const; it does not demand that every pointer be made const if the object it points to must be modified. In this function buf is used as a mutable buffer (see buf[newline] = '\\0';) so buf must be a char * (non-const). r is declared const char * and assigned the result of memchr; that is fine because memchr accepts a const void * and returns a pointer which can be assigned to a const-qualified pointer. The \"qualifier mix\" observed by agent A is intentional/appropriate: buf is writable and therefore cannot be const, whereas r is a read-only pointer into that buffer. The presence of both const and non-const pointers to the same object in order to express mutability is not a violation of MISRA C 2023 Rule 8.13. Therefore the reported violation is incorrect."
}