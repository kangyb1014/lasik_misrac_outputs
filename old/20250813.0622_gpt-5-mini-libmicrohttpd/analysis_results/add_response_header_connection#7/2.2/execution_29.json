{
  "result": "success",
  "message": "ENTER add_response_header_connection: response=0x55c9678f32a0 value='a,b,c,d,e' flags_auto=0x0\nBRANCH: no existing Connection header (flags_auto=0x0)\nASSERT-COND: NULL == MHD_get_response_element_n_(...) -> expected=true\nASSERT-COND: 0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) -> evaluated=1\nSTATE before processing: old_value_len=0\nvalue_len=9\nnorm_len(proposed)=14\nbuf_size=14\nAFTER token removal: value_has_close=0 norm_len_s=13\nASSERT-COND: 0 <= norm_len_s -> evaluated=1\nASSERT-CHECK before final mhd_assert: value_has_close=0 already_has_close=0 pos=0 norm_len=13 old_value_len=0\nASSERT-CHECK: buf_size(14) > pos(13) -> evaluated=1\nAFTER_BUILD: buf='a, b, c, d, e' pos=13 buf_size=14\nINSERTED new header: new_hdr=0x55c9678f3680 value='a, b, c, d, e' flags_auto=0x1\nENTER add_response_header_connection: response=0x55c9678f32a0 value='i,k,l,m,n,o,p,close' flags_auto=0x0\nBRANCH: no existing Connection header (flags_auto=0x0)\nASSERT-COND: NULL == MHD_get_response_element_n_(...) -> expected=true\nASSERT-COND: 0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) -> evaluated=1\nSTATE before processing: old_value_len=0\nvalue_len=19\nnorm_len(proposed)=29\nbuf_size=29\nAFTER token removal: value_has_close=1 norm_len_s=19\nASSERT-COND: 0 <= norm_len_s -> evaluated=1\nADDING 'close' token: value_has_close=1 already_has_close=0\nASSERT-CHECK before final mhd_assert: value_has_close=1 already_has_close=0 pos=7 norm_len=19 old_value_len=0\nASSERT-CHECK: buf_size(29) > pos(26) -> evaluated=1\nAFTER_BUILD: buf='close, i, k, l, m, n, o, p' pos=26 buf_size=29\nINSERTED new header: new_hdr=0x55c9678f36f0 value='close, i, k, l, m, n, o, p' flags_auto=0x3\nENTER add_response_header_connection: response=0x55c9678f32a0 value='1,2,3,4,5,6,7,close' flags_auto=0x0\nBRANCH: no existing Connection header (flags_auto=0x0)\nASSERT-COND: NULL == MHD_get_response_element_n_(...) -> expected=true\nASSERT-COND: 0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE) -> evaluated=1\nSTATE before processing: old_value_len=0\nvalue_len=19\nnorm_len(proposed)=29\nbuf_size=29\nAFTER token removal: value_has_close=1 norm_len_s=19\nASSERT-COND: 0 <= norm_len_s -> evaluated=1\nADDING 'close' token: value_has_close=1 already_has_close=0\nASSERT-CHECK before final mhd_assert: value_has_close=1 already_has_close=0 pos=7 norm_len=19 old_value_len=0\nASSERT-CHECK: buf_size(29) > pos(26) -> evaluated=1\nAFTER_BUILD: buf='close, 1, 2, 3, 4, 5, 6, 7' pos=26 buf_size=29\nINSERTED new header: new_hdr=0x55c9678f3730 value='close, 1, 2, 3, 4, 5, 6, 7' flags_auto=0x3\nENTER add_response_header_connection: response=0x55c9678f32a0 value='8,9,close' flags_auto=0x3\nBRANCH: existing Connection header present (flags_auto=0x3)\nASSERT-CHECK: already_has_close=1 hdr=0x55c9678f3730\nHDR: header=0x55c9678f3380 value=0x55c9678f36c0 value_size=26 first5='close'\nASSERT-COND: already_has_close == (0 == memcmp(hdr->value, 'close', 5))\nASSERT-COND-EVALUATED: already_has_close=1 memcmp_result=0\nASSERT-COND: NULL != hdr -> evaluated=1\nSTATE before processing: old_value_len=28\nvalue_len=9\nnorm_len(proposed)=14\nbuf_size=42\nAFTER token removal: value_has_close=1 norm_len_s=4\nASSERT-COND: 0 <= norm_len_s -> evaluated=1\nASSERT-CHECK before final mhd_assert: value_has_close=1 already_has_close=1 pos=28 norm_len=4 old_value_len=28\nASSERT-CHECK: buf_size(42) > pos(32) -> evaluated=1\nAFTER_BUILD: buf='close, 1, 2, 3, 4, 5, 6, 7, 8, 9' pos=32 buf_size=42\nUPDATE: existing hdr=0x55c9678f3730 old_value=0x55c9678f36c0 old_value_size=26 -> replacing with buf=0x55c9678f36f0 pos=32\nEXIT: updated existing header hdr=0x55c9678f3730 new_value='close, 1, 2, 3, 4, 5, 6, 7, 8, 9' flags_auto=0x3 -> MHD_YES\nENTER add_response_header_connection: response=0x55c9678f32a0 value='10,12' flags_auto=0x3\nBRANCH: existing Connection header present (flags_auto=0x3)\nASSERT-CHECK: already_has_close=1 hdr=0x55c9678f3730\nHDR: header=0x55c9678f3380 value=0x55c9678f36f0 value_size=17 first5='close'\nASSERT-COND: already_has_close == (0 == memcmp(hdr->value, 'close', 5))\nASSERT-COND-EVALUATED: already_has_close=1 memcmp_result=0\nASSERT-COND:"
}