{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn mhd_tool_get_sys_cpu_count_sysctl_ the local variable ret is initialized to -1 and immediately tested with if (0 >= ret). That predicate is provably true at that point, so the evaluation of that condition (and the conditional branching it performs) is redundant: removing the if and executing the guarded block unconditionally would not change program behaviour. According to MISRA C 2023 Rule 2.2 (dead code prohibition) this constitutes dead code. Note: preprocessor exclusion of the whole block on __linux__ is an unrelated compile-time exclusion (unreachable via preprocessing) and is not the same as dead code per the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified mhd_tool_get_sys_cpu_count_sysconf_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of mhd_tool_get_sys_cpu_count_sysconf_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of mhd_tool_get_sys_cpu_count_sysconf_:\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysconf_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SYSCONF) && \\\n  (defined(HAS_DECL__SC_NPROCESSORS_ONLN) || defined(HAS_DECL__SC_NPROC_ONLN))\n  long value = -1;\n#ifdef HAS_DECL__SC_NPROCESSORS_ONLN\n  if (0 >= value)\n    value = sysconf (_SC_NPROCESSORS_ONLN);\n#endif /* HAS_DECL__SC_NPROCESSORS_ONLN */\n#ifdef HAS_DECL__SC_NPROC_ONLN\n  if (0 >= value)\n    value = sysconf (_SC_NPROC_ONLN);\n#endif /* HAS_DECL__SC_NPROC_ONLN */\n  if (0 >= value)\n    return -1;\n  ret = (int) value;\n  if ((long) ret != value)\n    return -1; /* Overflow */\n#endif /* HAVE_SYSCONF &&\n          (HAS_DECL__SC_NPROCESSORS_ONLN || HAS_DECL__SC_NPROC_ONLN) */\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified mhd_tool_get_sys_cpu_count_sysconf_ code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n\n/* Lightweight logging helper that appends probe information to /tmp/logs/170.txt.\n   This preserves original behavior (no side-effects except I/O) and is safe to call\n   from the function below to record control-flow and state for debugging. */\nstatic void mhd_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n  if (f == NULL)\n  {\n    return; /* Do not alter program logic if logging fails. */\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic int\nmhd_tool_get_sys_cpu_count_sysconf_ (void)\n{\n  int ret = -1;\n  mhd_log(\"ENTER: ret=%d\", ret);\n#if defined(HAVE_SYSCONF) && \\\n  (defined(HAS_DECL__SC_NPROCESSORS_ONLN) || defined(HAS_DECL__SC_NPROC_ONLN))\n  long value = -1;\n  mhd_log(\"INIT: value=%ld\", value);\n#ifdef HAS_DECL__SC_NPROCESSORS_ONLN\n  mhd_log(\"CHECK: (0 >= value) with value=%ld -> %s\", value, (0 >= value) ? \"true\" : \"false\");\n  if (0 >= value)\n  {\n    mhd_log(\"ACTION: calling sysconf(_SC_NPROCESSORS_ONLN)\");\n    value = sysconf (_SC_NPROCESSORS_ONLN);\n    mhd_log(\"RESULT: sysconf(_SC_NPROCESSORS_ONLN) returned %ld\", value);\n  }\n#endif /* HAS_DECL__SC_NPROCESSORS_ONLN */\n#ifdef HAS_DECL__SC_NPROC_ONLN\n  mhd_log(\"CHECK: (0 >= value) with value=%ld -> %s\", value, (0 >= value) ? \"true\" : \"false\");\n  if (0 >= value)\n  {\n    mhd_log(\"ACTION: calling sysconf(_SC_NPROC_ONLN)\");\n    value = sysconf (_SC_NPROC_ONLN);\n    mhd_log(\"RESULT: sysconf(_SC_NPROC_ONLN) returned %ld\", value);\n  }\n#endif /* HAS_DECL__SC_NPROC_ONLN */\n  mhd_log(\"CHECK: final (0 >= value) with value=%ld -> %s\", value, (0 >= value) ? \"true\" : \"false\");\n  if (0 >= value)\n  {\n    mhd_log(\"EXIT: returning -1 due to invalid value=%ld\", value);\n    return -1;\n  }\n  ret = (int) value;\n  mhd_log(\"ASSIGN: ret=(int)value -> ret=%d (value=%ld)\", ret, value);\n  if ((long) ret != value)\n  {\n    mhd_log(\"EXIT: returning -1 due to overflow: cast (long)ret=%ld != value=%ld\", (long) ret, value);\n    return -1; /* Overflow */\n  }\n#endif /* HAVE_SYSCONF &&\n          (HAS_DECL__SC_NPROCESSORS_ONLN || HAS_DECL__SC_NPROC_ONLN) */\n  mhd_log(\"EXIT: returning ret=%d\", ret);\n  return ret;\n}\n"
}