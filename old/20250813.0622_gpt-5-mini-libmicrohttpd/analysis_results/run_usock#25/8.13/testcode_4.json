{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable msg is declared as unsigned char * and is only read (not modified) before being freed. Per Rule 8.13 it should be a pointer to a const-qualified type (for example const unsigned char *msg) whenever possible. The free(msg) call therefore uses a non-const pointer where a const-qualified pointer could have been used, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified run_usock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of run_usock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of run_usock:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified run_usock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/203.txt. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/203.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Helper to log a short preview of a buffer (both as string and hex). */\nstatic void\nlog_buf_preview (const unsigned char *buf, size_t len)\n{\n  size_t i, limit = (len < 64u) ? len : 64u;\n  FILE *f = fopen (\"/tmp/logs/203.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf (f, \"  preview (as string): \\\"\");\n  for (i = 0; i < limit; ++i)\n  {\n    unsigned char c = buf[i];\n    if (c >= 0x20 && c < 0x7f)\n      fputc ((int) c, f);\n    else\n      fputc ('.', f);\n  }\n  if (limit < len)\n    fprintf (f, \"... (total %zu bytes)\", len);\n  fprintf (f, \"\\\"\\n  preview (hex):\");\n  for (i = 0; i < limit; ++i)\n    fprintf (f, \" %02X\", (unsigned int) buf[i]);\n  if (limit < len)\n    fprintf (f, \" ...\");\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  log_probe (\"run_usock: start - ws=%p sock=%d urh=%p\", (void *) ws,\n             (int) ws->sock, (void *) urh);\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    log_probe (\"recv returned: got=%zd for sock=%d\", got, (int) ws->sock);\n    if (0 >= got)\n    {\n      log_probe (\"recv <= 0, breaking loop (sock=%d)\", (int) ws->sock);\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    log_probe (\"ws_receive_frame returned: msg=%p got=%zd type=%d\",\n               (void *) msg, got, type);\n    if (NULL != msg)\n    {\n      /* Log a preview of the message received. Cast is only for printing. */\n      log_buf_preview (msg, (size_t) got);\n    }\n    else\n    {\n      log_probe (\"ws_receive_frame returned NULL, breaking (sock=%d)\",\n                 (int) ws->sock);\n      break;\n    }\n\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      log_probe (\"handling TEXT_FRAME (sock=%d) msg=%p\", (int) ws->sock,\n                 (void *) msg);\n\n      /* Preserve original logic: compute required buffer size. */\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock,\n                           (const char *) msg);\n      log_probe (\"snprintf sizing returned buf_size=%d\", buf_size);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock,\n                        (const char *) msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          log_probe (\"ws_send_frame returned sent=%zd for sock=%d\",\n                     sent, (int) ws->sock);\n          free (text);\n        }\n        else\n        {\n          sent = -1;\n          log_probe (\"malloc for text failed (size=%zu)\", (size_t) buf_size + 1);\n        }\n      }\n      else\n      {\n        sent = -1;\n        log_probe (\"invalid buf_size=%d (sock=%d)\", buf_size, (int) ws->sock);\n      }\n\n      /* Log msg pointer and a preview just before freeing to provide\n         evidence that msg was not modified and is freed. */\n      log_probe (\"about to free msg=%p (sock=%d)\", (void *) msg,\n                 (int) ws->sock);\n      log_buf_preview (msg, (size_t) got);\n      free (msg);\n\n      if (-1 == sent)\n      {\n        log_probe (\"sent == -1, breaking main loop (sock=%d)\",\n                   (int) ws->sock);\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        log_probe (\"received CON_CLOSE_FRAME, freeing msg=%p and breaking (sock=%d)\",\n                   (void *) msg, (int) ws->sock);\n        log_buf_preview (msg, (size_t) got);\n        free (msg);\n        break;\n      }\n      else\n      {\n        log_probe (\"received non-text non-close frame type=%d (sock=%d), freeing msg=%p\",\n                   type, (int) ws->sock, (void *) msg);\n        log_buf_preview (msg, (size_t) got);\n        free (msg);\n      }\n    }\n  }\n\n  log_probe (\"main loop exited for sock=%d, acquiring MUTEX\", (int) ws->sock);\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  log_probe (\"MUTEX acquired for sock=%d\", (int) ws->sock);\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      log_probe (\"clearing CLIENT_SOCKS[%d] (was %d)\", i, (int) CLIENT_SOCKS[i]);\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  log_probe (\"MUTEX released for sock=%d\", (int) ws->sock);\n  log_probe (\"freeing WsData at %p for sock=%d\", (void *) ws, (int) ws->sock);\n  free (ws);\n  log_probe (\"calling MHD_upgrade_action to close urh=%p (sock=%d)\",\n             (void *) urh, (int) ws->sock);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  log_probe (\"run_usock: exit for sock=%d\", (int) ws->sock);\n  return NULL;\n}\n"
}