{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer urh is not const-qualified but there is no evidence in the fragment that run_usock (or any callees used here, except possibly MHD_upgrade_action) needs to modify the object. If ws->urh is intended to be accessed read\u2011only in this function (i.e. only inspected or passed to functions that do not modify it), then the pointer should be declared const: 'const struct MHD_UpgradeResponseHandle *urh = ws->urh;'. In that case the current non-const declaration violates MISRA C 2023 Rule 8.13. Note: if the API MHD_upgrade_action or other callees mutate the upgrade handle and therefore require a non-const pointer, then the non-const declaration is required and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified run_usock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of run_usock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of run_usock:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified run_usock code.\n",
  "test_code": "static void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n  FILE *logf = NULL;\n\n  /* Probe: try to open log file (best-effort). If it fails, continue silently. */\n  logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"run_usock: start ws=%p sock=%d urh=%p\\n\",\n            (void *) ws, (int) ws->sock, (void *) urh);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n\n    /* Log recv result */\n    logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (logf != NULL)\n    {\n      fprintf(logf, \"run_usock: recv returned got=%zd for sock=%d\\n\", got, (int) ws->sock);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    if (0 >= got)\n    {\n      /* Log closed/failed receive */\n      logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n      if (logf != NULL)\n      {\n        fprintf(logf, \"run_usock: breaking loop due to recv <= 0 (got=%zd) for sock=%d\\n\", got, (int) ws->sock);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n\n    /* Log frame parse result */\n    logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (logf != NULL)\n    {\n      fprintf(logf, \"run_usock: ws_receive_frame returned msg=%p got=%zd type=%d for sock=%d\\n\",\n              (void *) msg, got, type, (int) ws->sock);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    if (NULL == msg)\n    {\n      logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n      if (logf != NULL)\n      {\n        fprintf(logf, \"run_usock: breaking loop because ws_receive_frame returned NULL for sock=%d\\n\", (int) ws->sock);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n\n      /* Log intent to format text and computed buf_size */\n      logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n      if (logf != NULL)\n      {\n        fprintf(logf, \"run_usock: text frame: computed buf_size=%d for sock=%d msg_ptr=%p\\n\",\n                buf_size, (int) ws->sock, (void *) msg);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n\n          /* Log the result of sending and the text pointer */\n          logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n          if (logf != NULL)\n          {\n            fprintf(logf, \"run_usock: after ws_send_frame text=%p sent=%zd for sock=%d\\n\",\n                    (void *) text, sent, (int) ws->sock);\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n          }\n\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n\n      free (msg);\n\n      if (-1 == sent)\n      {\n        logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n        if (logf != NULL)\n        {\n          fprintf(logf, \"run_usock: breaking loop because send failed (sent=%zd) for sock=%d\\n\", sent, (int) ws->sock);\n          fflush(logf);\n          fclose(logf);\n          logf = NULL;\n        }\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n        if (logf != NULL)\n        {\n          fprintf(logf, \"run_usock: received close frame for sock=%d msg_ptr=%p\\n\", (int) ws->sock, (void *) msg);\n          fflush(logf);\n          fclose(logf);\n          logf = NULL;\n        }\n\n        free (msg);\n        break;\n      }\n    }\n  }\n\n  /* Log before acquiring global mutex */\n  logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"run_usock: about to lock MUTEX for sock=%d ws=%p urh=%p\\n\", (int) ws->sock, (void *) ws, (void *) urh);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n\n      /* Log which client slot was cleared */\n      logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n      if (logf != NULL)\n      {\n        fprintf(logf, \"run_usock: cleared CLIENT_SOCKS[%d] for sock=%d\\n\", i, (int) ws->sock);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n\n  /* Log just before freeing ws */\n  logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"run_usock: freeing ws=%p for sock=%d\\n\", (void *) ws, (int) ws->sock);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  free (ws);\n\n  /* Log the upgrade handle state just before calling MHD_upgrade_action. This captures\n     the pointer value for later analysis to support the MISRA 8.13 investigation. */\n  logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"run_usock: calling MHD_upgrade_action with urh=%p (note: non-const pointer in this function)\\n\",\n            (void *) urh);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n\n  /* Log that the upgrade action call completed (best-effort; urh may be invalid after call).\n     We only record that the function was invoked. */\n  logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"run_usock: MHD_upgrade_action returned for urh=%p\\n\", (void *) urh);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  return NULL;\n}\n"
}