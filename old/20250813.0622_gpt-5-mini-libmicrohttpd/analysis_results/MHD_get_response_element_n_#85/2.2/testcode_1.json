{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is the usual debug-only assertion macro (i.e. compiles to a no-op in production, such as when NDEBUG is defined) then the statement becomes an operation that has no effect at runtime; removing it would not change program behaviour, so it is dead code and thus violates MISRA C 2023 Rule 2.2. (If, conversely, mhd_assert performs runtime actions such as logging or termination on failure, then it is not dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/682.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease provide the modified MHD_get_response_element_n_ code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stddef.h>\n\n/* Probe helpers: write simple logs about control flow and state to /tmp/logs/682.txt */\nstatic void mhd_probe_log(const char *msg, const void *response, const void *ptr, size_t len, int cond)\n{\n  FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n  if (f != NULL)\n  {\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s response=%p ptr=%p len=%zu cond=%d\\n\",\n            (long)t, msg, response, ptr, len, cond);\n    fclose(f);\n  }\n}\n\nstatic void mhd_probe_log_msg(const char *msg, const void *response)\n{\n  FILE *f = fopen(\"/tmp/logs/682.txt\", \"a\");\n  if (f != NULL)\n  {\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s response=%p\\n\", (long)t, msg, response);\n    fclose(f);\n  }\n}\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Preserve original evaluation order of assertions while logging the\n     evaluated boolean result to provide evidence whether the assertions\n     are active (stop/abort) or effectively no-ops in the build used. */\n  int _cond0 = (NULL != key);\n  mhd_probe_log(\"assert-eval: NULL != key\", response, key, key_len, _cond0);\n  mhd_assert (_cond0);\n\n  int _cond1 = (0 != key[0]);\n  mhd_probe_log(\"assert-eval: 0 != key[0]\", response, key, key_len, _cond1);\n  mhd_assert (_cond1);\n\n  int _cond2 = (0 != key_len);\n  mhd_probe_log(\"assert-eval: 0 != key_len\", response, key, key_len, _cond2);\n  mhd_assert (_cond2);\n\n  mhd_probe_log_msg(\"entering-loop\", response);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log inspected header state for each iteration; do not dereference\n       header contents beyond the pointer (avoid changing behaviour). */\n    mhd_probe_log(\"loop-iter: inspect header\", response, pos->header, pos->header_size, (int)pos->kind);\n\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      mhd_probe_log(\"match-found\", response, pos->header, pos->header_size, (int)pos->kind);\n      return pos;\n    }\n  }\n\n  mhd_probe_log_msg(\"no-match-found\", response);\n  return NULL;\n}\n"
}