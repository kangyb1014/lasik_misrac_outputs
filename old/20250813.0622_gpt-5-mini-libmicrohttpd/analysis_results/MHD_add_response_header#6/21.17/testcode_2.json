{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code allocates buf with buf_size = old_value_len + initial_estimate where initial_estimate is computed from the original value length. Later norm_len is overwritten with the normalized length returned by MHD_str_remove_token_caseless_ and an assert (not an enforced check) is used to claim buf is large enough to hold the inserted \"close, \" prefix plus the normalized string and NUL. The memmove call copies norm_len + 1 bytes from buf + old_value_len to buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len. If the initial estimate used for allocation is not large enough to accommodate the extra MHD_STATICSTR_LEN_(\"close, \") bytes plus the normalized string and terminating NUL, the memmove will write past the end of buf. Because the code relies on an assert rather than enforcing the size at runtime, and buf_size is computed from the original estimate rather than rechecked against the final norm_len and the extra prefix length, an out-of-bounds access is possible. Example problematic scenario: old_value_len == 0 and the normalized string length norm_len (returned by MHD_str_remove_token_caseless_) is such that close_len + norm_len + 1 > initial_estimate \u2014 in that case memmove(dest, src, norm_len + 1) will write beyond the allocated buf. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "static void mhd_log_probe(const char *stage,\n                              struct MHD_Response *response,\n                              const char *header,\n                              const char *content)\n{\n  FILE *f = fopen(\"/tmp/logs/55.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"STAGE=%s\\n\", stage);\n  fprintf(f, \" response=%p\\n\", (void *) response);\n  fprintf(f, \" header=%p\\n\", (const void *) header);\n  fprintf(f, \" content=%p\\n\", (const void *) content);\n  fprintf(f, \" header_str=%s\\n\", (header ? header : \"(null)\"));\n  fprintf(f, \" content_str=%s\\n\", (content ? content : \"(null)\"));\n  if (header)\n    fprintf(f, \" header_len=%zu\\n\", strlen(header));\n  else\n    fprintf(f, \" header_len=(null)\\n\");\n  if (content)\n    fprintf(f, \" content_len=%zu\\n\", strlen(content));\n  else\n    fprintf(f, \" content_len=(null)\\n\");\n  if (response)\n  {\n    fprintf(f, \" flags_auto=0x%08x\\n\", (unsigned int) response->flags_auto);\n    fprintf(f, \" flags=0x%08x\\n\", (unsigned int) response->flags);\n  }\n  fprintf(f, \"-----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry */\n  mhd_log_probe(\"entry\", response, header, content);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_log_probe(\"branch: CONNECTION -> add_response_header_connection\", response, header, content);\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe(\"branch: TRANSFER_ENCODING - enter\", response, header, content);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_log_probe(\"transfer_encoding: not chunked -> MHD_NO\", response, header, content);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_log_probe(\"transfer_encoding: already has chunked -> MHD_YES\", response, header, content);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_log_probe(\"transfer_encoding: has content-length and no insanity flag -> MHD_NO\", response, header, content);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    mhd_log_probe(\"transfer_encoding: about to call add_response_entry\", response, header, content);\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_log_probe(\"transfer_encoding: added entry -> MHD_YES\", response, header, content);\n      return MHD_YES;\n    }\n    mhd_log_probe(\"transfer_encoding: add_response_entry failed -> MHD_NO\", response, header, content);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe(\"branch: DATE - enter\", response, header, content);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_log_probe(\"date: existing date header removed\", response, header, content);\n    }\n    mhd_log_probe(\"date: about to call add_response_entry\", response, header, content);\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_log_probe(\"date: added entry -> MHD_YES\", response, header, content);\n      return MHD_YES;\n    }\n    mhd_log_probe(\"date: add_response_entry failed -> MHD_NO\", response, header, content);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"branch: CONTENT_LENGTH - enter\", response, header, content);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_log_probe(\"content_length: conditions met -> attempting add_response_entry\", response, header, content);\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe(\"content_length: added entry -> MHD_YES\", response, header, content);\n        return MHD_YES;\n      }\n      mhd_log_probe(\"content_length: add_response_entry failed -> MHD_NO\", response, header, content);\n    }\n    else\n    {\n      mhd_log_probe(\"content_length: conditions not met -> returning MHD_NO\", response, header, content);\n    }\n    return MHD_NO;\n  }\n\n  mhd_log_probe(\"default: about to call add_response_entry (final)\", response, header, content);\n  {\n    enum MHD_Result res = add_response_entry (response,\n                                             MHD_HEADER_KIND,\n                                             header,\n                                             content);\n    if (MHD_NO != res)\n      mhd_log_probe(\"default: add_response_entry succeeded -> MHD_YES\", response, header, content);\n    else\n      mhd_log_probe(\"default: add_response_entry failed -> MHD_NO\", response, header, content);\n    return res;\n  }\n}\n"
}