{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro mhd_assert is defined as #define mhd_assert(ignore) ((void)0). In this project configuration the statement \"mhd_assert(NULL != hdr);\" expands to a no-op and its presence/removal does not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_probe_log(\"ENTER MHD_add_response_header: header='%s' content='%s' response=%p flags=0x%08x flags_auto=0x%08x\",\n                (header?header:\"(null)\"), (content?content:\"(null)\"), (void *)response,\n                (unsigned int)response->flags, (unsigned int)response->flags_auto);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"BRANCH: Transfer-Encoding -> content='%s'\", (content?content:\"(null)\"));\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_probe_log(\"Transfer-Encoding rejected: not 'chunked'\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_probe_log(\"Transfer-Encoding already present (chunked)\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_probe_log(\"Transfer-Encoding rejected: has Content-Length and no Insanity flag\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log(\"Transfer-Encoding added: set RAF_HAS_TRANS_ENC_CHUNKED\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"Transfer-Encoding add_response_entry failed\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"BRANCH: Date header processing. initial flags_auto=0x%08x\",\n                  (unsigned int)response->flags_auto);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_probe_log(\"After get_response_element_n_: hdr=%p\", (void *)hdr);\n\n      /* Original assertion left in place; log surrounding information so\n         other agents can see the state that makes this assertion a no-op\n         in configurations where mhd_assert is defined as ((void)0). */\n      mhd_probe_log(\"About to execute mhd_assert(NULL != hdr);\");\n      mhd_assert (NULL != hdr);\n      mhd_probe_log(\"After mhd_assert (note: if mhd_assert is a no-op this will not change behavior)\");\n\n      /* Preserve original behavior: remove header when hdr is present */\n      if (hdr != NULL)\n      {\n        mhd_probe_log(\"Removing existing Date header: hdr=%p value=%p header=%p\",\n                      (void *)hdr, (void *)hdr->value, (void *)hdr->header);\n        _MHD_remove_header (response, hdr);\n        if (NULL != hdr->value)\n        {\n          mhd_probe_log(\"Freeing hdr->value at %p\", (void *)hdr->value);\n          free (hdr->value);\n        }\n        mhd_probe_log(\"Freeing hdr->header at %p and hdr at %p\", (void *)hdr->header, (void *)hdr);\n        free (hdr->header);\n        free (hdr);\n      }\n      else\n      {\n        mhd_probe_log(\"hdr was NULL: nothing to remove\");\n      }\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log(\"Date header added: set RAF_HAS_DATE_HDR. returning MHD_YES\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"Failed to add Date header: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"BRANCH: Content-Length header processing\");\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"Content-Length added: set RAF_HAS_CONTENT_LENGTH\");\n        return MHD_YES;\n      }\n    }\n    mhd_probe_log(\"Content-Length branch finished: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"Default branch: calling add_response_entry for header='%s'\", (header?header:\"(null)\"));\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a1' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a2' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a3' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nENTER MHD_add_response_header: header='Connection' content='a,b,c,d,e' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='i,k,l,m,n,o,p,close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='1,2,3,4,5,6,7,close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='8,9,close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='10,12' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000001\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close,other-token' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='close, new-token' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close, one-long-token' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='close, additional-token' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='token-1,token-2' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='token-3' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000001\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000001\nENTER MHD_add_response_header: header='Connection' content='close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close, token-4' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close, token-5' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000001\nENTER MHD_add_response_header: header='Connection' content=',,,,,,,,,,,,    ,\t\t\t, , , ' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content=',,,,,,,,,,,,    ,\t\t\t, , , ' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='keep-Alive' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='keep-Alive, Close' response=0x55f36048d2a0 flags=0x00000000 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connect\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the given project configuration mhd_assert expands to ((void)0), so the statement mhd_assert(NULL != hdr); becomes a no-op expression statement. That statement is executed (or compiles to a no-op) but its removal would not affect program behaviour, which matches the rule definition of dead code. Therefore this instance violates MISRA C 2023 Rule 2.2 in the described configuration."
}