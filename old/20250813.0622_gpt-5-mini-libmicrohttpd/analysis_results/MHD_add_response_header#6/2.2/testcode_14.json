{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe construct `if (1) { /* local scope */ ... }` is an always-true conditional. The `if` statement is executed but its removal (replacing it with a plain block `{ ... }` or removing the `if` entirely) would not affect program behaviour, so the `if (1)` is dead code according to MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n/* Probe helpers: write logs to /tmp/logs/50.txt */\nstatic void mhd_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void mhd_log_state(const char *stage,\n                          struct MHD_Response *response,\n                          const char *header,\n                          const char *content)\n{\n    unsigned long flags = 0UL;\n    unsigned long flags_auto = 0UL;\n    if (NULL != response)\n    {\n        /* Print as unsigned long to avoid type assumptions in this probe. */\n        flags = (unsigned long) response->flags;\n        flags_auto = (unsigned long) response->flags_auto;\n    }\n    mhd_log_printf(\"[MHD_add_response_header] %s: response=%p header=%s content=%s flags=0x%lx flags_auto=0x%lx\",\n                   stage, (void *) response, (header ? header : \"(null)\"), (content ? content : \"(null)\"), flags, flags_auto);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_log_state(\"entry\", response, header, content);\n\n  /* Connection header */\n  {\n    int is_conn = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION);\n    mhd_log_printf(\"checking CONNECTION header: result=%d\", is_conn);\n    if (is_conn)\n    {\n      mhd_log_state(\"branch-CONNECTION: calling add_response_header_connection\", response, header, content);\n      enum MHD_Result r = add_response_header_connection (response, content);\n      mhd_log_printf(\"add_response_header_connection returned=%d\", (int) r);\n      return r;\n    }\n  }\n\n  /* Transfer-Encoding header */\n  {\n    int is_te = MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING);\n    mhd_log_printf(\"checking TRANSFER_ENCODING header: result=%d\", is_te);\n    if (is_te)\n    {\n      int is_chunked = MHD_str_equal_caseless_ (content, \"chunked\");\n      mhd_log_printf(\"TRANSFER_ENCODING content == 'chunked'? %d\", is_chunked);\n      if (! is_chunked)\n      {\n        mhd_log_printf(\"TRANSFER_ENCODING: not 'chunked', returning MHD_NO\");\n        return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n      }\n\n      if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      {\n        mhd_log_printf(\"TRANSFER_ENCODING: already has chunked flag, returning MHD_YES\");\n        return MHD_YES;  /* Already has \"chunked\" encoding header */\n      }\n\n      if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n           (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      {\n        mhd_log_printf(\"TRANSFER_ENCODING: has Content-Length and no Insanity flag, returning MHD_NO\");\n        return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n      }\n\n      mhd_log_state(\"TRANSFER_ENCODING: attempting add_response_entry\", response, header, content);\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        mhd_log_printf(\"TRANSFER_ENCODING: entry added, flags_auto updated to 0x%lx\", (unsigned long) response->flags_auto);\n        return MHD_YES;\n      }\n      mhd_log_printf(\"TRANSFER_ENCODING: add_response_entry failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n  }\n\n  /* Date header */\n  {\n    int is_date = MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE);\n    mhd_log_printf(\"checking DATE header: result=%d\", is_date);\n    if (is_date)\n    {\n      if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n      {\n        mhd_log_printf(\"DATE: existing date header present, will remove existing header\");\n        struct MHD_HTTP_Res_Header *hdr;\n        hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                           MHD_HTTP_HEADER_DATE,\n                                           MHD_STATICSTR_LEN_ ( \\\n                                             MHD_HTTP_HEADER_DATE));\n        mhd_log_printf(\"DATE: fetched hdr pointer=%p\", (void *) hdr);\n        mhd_assert (NULL != hdr);\n        _MHD_remove_header (response, hdr);\n        mhd_log_printf(\"DATE: removed existing header via _MHD_remove_header\");\n        if (NULL != hdr->value)\n        {\n          mhd_log_printf(\"DATE: freeing hdr->value=%p\", (void *) hdr->value);\n          free (hdr->value);\n        }\n        mhd_log_printf(\"DATE: freeing hdr->header=%p and hdr=%p\", (void *) hdr->header, (void *) hdr);\n        free (hdr->header);\n        free (hdr);\n      }\n      mhd_log_state(\"DATE: attempting add_response_entry\", response, header, content);\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        mhd_log_printf(\"DATE: entry added, flags_auto updated to 0x%lx\", (unsigned long) response->flags_auto);\n        return MHD_YES;\n      }\n      mhd_log_printf(\"DATE: add_response_entry failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n  }\n\n  /* Content-Length header */\n  {\n    int is_cl = MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH);\n    mhd_log_printf(\"checking CONTENT_LENGTH header: result=%d\", is_cl);\n    if (is_cl)\n    {\n      mhd_log_printf(\"CONTENT_LENGTH: evaluating special-allow conditions\");\n      if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n           ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n            (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                           | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n      {\n        mhd_log_state(\"CONTENT_LENGTH: attempting add_response_entry\", response, header, content);\n        if (MHD_NO != add_response_entry (response,\n                                          MHD_HEADER_KIND,\n                                          header,\n                                          content))\n        {\n          response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n          mhd_log_printf(\"CONTENT_LENGTH: entry added, flags_auto updated to 0x%lx\", (unsigned long) response->flags_auto);\n          return MHD_YES;\n        }\n      }\n      mhd_log_printf(\"CONTENT_LENGTH: conditions not met or add_response_entry failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n  }\n\n  mhd_log_state(\"fallback: calling add_response_entry\", response, header, content);\n  enum MHD_Result r = add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n  mhd_log_printf(\"fallback add_response_entry returned=%d\", (int) r);\n  return r;\n}\n"
}