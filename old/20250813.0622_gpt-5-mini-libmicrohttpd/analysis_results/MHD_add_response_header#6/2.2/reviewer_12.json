{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call to mhd_assert is effectively a no-op because mhd_assert is defined as #define mhd_assert(ignore) ((void)0). Therefore the statement mhd_assert(already_has_close == (0 == memcmp(hdr->value, \"close\", 5))); executes no observable action (the memcmp/condition are not evaluated) and its removal would not change program behaviour in this build. This is an executed operation whose removal would not affect behaviour, i.e. dead code, so Rule 2.2 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (NULL == f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  mhd_probe_log(\"MHD_add_response_header: entry header='%s' content='%s' response=%p\",\n                header ? header : \"(null)\", content ? content : \"(null)\", (void *)response);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    mhd_probe_log(\"branch: CONNECTION -> add_response_header_connection\");\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"branch: TRANSFER-ENCODING content='%s'\", content ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      mhd_probe_log(\"reject: transfer-encoding not 'chunked'\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    mhd_probe_log(\"transfer-encoding is 'chunked'\");\n    mhd_probe_log(\"flags_auto=0x%08x has_trans_enc_chunked=%d\",\n                  (unsigned)response->flags_auto,\n                  (int)!!(response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED));\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      mhd_probe_log(\"already has chunked encoding -> MHD_YES\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    mhd_probe_log(\"flags_auto & HAS_CONTENT_LENGTH = %d, flags & INSANITY_HEADER_CONTENT_LENGTH = %d\",\n                  (int)!!(response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH),\n                  (int)!!(MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags));\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ) {\n      mhd_probe_log(\"reject: has Content-Length and no Insanity flag -> MHD_NO\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log(\"added transfer-encoding 'chunked', set HAS_TRANS_ENC_CHUNKED, return MHD_YES\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"failed to add transfer-encoding entry -> MHD_NO\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"branch: DATE header, flags_auto=0x%08x\", (unsigned)response->flags_auto);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_probe_log(\"existing DATE hdr pointer=%p\", (void *)hdr);\n      mhd_probe_log(\"(probe) about to assert NULL != hdr (assert may be disabled in this build)\");\n      mhd_assert (NULL != hdr);\n      mhd_probe_log(\"(probe) after assert; hdr=%p value=%s\",\n                    (void *)hdr, hdr && hdr->value ? hdr->value : \"(null)\");\n      _MHD_remove_header (response, hdr);\n      mhd_probe_log(\"removed existing DATE header\");\n      if (NULL != hdr->value) {\n        mhd_probe_log(\"freeing hdr->value %p\", (void *)hdr->value);\n        free (hdr->value);\n      }\n      if (NULL != hdr->header) {\n        mhd_probe_log(\"freeing hdr->header %p\", (void *)hdr->header);\n        free (hdr->header);\n      }\n      mhd_probe_log(\"freeing hdr %p\", (void *)hdr);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log(\"added DATE header, set HAS_DATE_HDR -> MHD_YES\");\n      return MHD_YES;\n    }\n    mhd_probe_log(\"failed to add DATE header -> MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"branch: CONTENT-LENGTH header flags=0x%08x flags_auto=0x%08x\",\n                  (unsigned)response->flags, (unsigned)response->flags_auto);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      mhd_probe_log(\"allowed: insanity or head-only response conditions met\");\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"added CONTENT-LENGTH header, set HAS_CONTENT_LENGTH -> MHD_YES\");\n        return MHD_YES;\n      }\n      mhd_probe_log(\"failed to add CONTENT-LENGTH entry -> MHD_NO\");\n    }\n    else {\n      mhd_probe_log(\"not allowed to add custom Content-Length -> MHD_NO\");\n    }\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"default: add_response_entry for header='%s'\", header ? header : \"(null)\");\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nMHD_add_response_header: entry header='Header-Type-A' content='value-a1' response=0x55c35efb52a0\ndefault: add_response_entry for header='Header-Type-A'\nMHD_add_response_header: entry header='Header-Type-A' content='value-a2' response=0x55c35efb52a0\ndefault: add_response_entry for header='Header-Type-A'\nMHD_add_response_header: entry header='Header-Type-A' content='value-a3' response=0x55c35efb52a0\ndefault: add_response_entry for header='Header-Type-A'\nMHD_add_response_header: entry header='Connection' content='a,b,c,d,e' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='i,k,l,m,n,o,p,close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='1,2,3,4,5,6,7,close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='8,9,close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='10,12' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close,other-token' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close, new-token' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close, one-long-token' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close, additional-token' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='token-1,token-2' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='token-3' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close, token-4' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='close, token-5' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content=',,,,,,,,,,,,    ,\t\t\t, , , ' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content=',,,,,,,,,,,,    ,\t\t\t, , , ' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_response_header: entry header='Connection' content='keep-Alive' response=0x55c35efb52a0\nbranch: CONNECTION -> add_response_header_connection\nMHD_add_respon\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the provided build mhd_assert is defined as #define mhd_assert(ignore) ((void)0), so the statement mhd_assert(NULL != hdr); reduces to a no-op expression statement ((void)0);. That statement is executed but performs no observable action and its removal would not change program behaviour in this build; by the rule text (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), this is dead code and thus violates MISRA C 2023 Rule 2.2."
}