{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert (buf_size > pos); in add_response_header_connection expands to ((void)0) because mhd_assert is defined as ((void)0). That makes the executed statement a no-op whose removal would not affect program behaviour, i.e. dead code (an assertion compiled-out unconditionally). This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe function: append human-readable logs to /tmp/logs/50.txt. */\nstatic void mhd_probe_log (const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/50.txt\", \"a\");\n  if (NULL == fp)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (fp, fmt, ap);\n  fprintf (fp, \"\\n\");\n  va_end (ap);\n  fclose (fp);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry and basic state */\n  mhd_probe_log (\"ENTER MHD_add_response_header: response=%p header='%s' content='%s' flags_auto=0x%08x flags=0x%08x\",\n                 (void *) response,\n                 header ? header : \"(null)\",\n                 content ? content : \"(null)\",\n                 (unsigned int) (response ? response->flags_auto : 0U),\n                 (unsigned int) (response ? response->flags : 0U));\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_probe_log (\"BRANCH: Connection header matched. Calling add_response_header_connection(response=%p, content='%s')\",\n                   (void *) response,\n                   content ? content : \"(null)\");\n    /* Preserve original behaviour: call and return directly. */\n    enum MHD_Result r = add_response_header_connection (response, content);\n    mhd_probe_log (\"RETURN from add_response_header_connection: result=%d\",\n                   (int) r);\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log (\"BRANCH: Transfer-Encoding header matched. content='%s'\",\n                   content ? content : \"(null)\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_probe_log (\"DECISION: Transfer-Encoding not 'chunked' => reject (MHD_NO)\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_probe_log (\"DECISION: Already has chunked flag => return MHD_YES\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_probe_log (\"DECISION: Has Content-Length and no Insanity flag => reject (MHD_NO)\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    {\n      enum MHD_Result add_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_probe_log (\"add_response_entry returned %d for Transfer-Encoding\", (int) add_res);\n      if (MHD_NO != add_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        mhd_probe_log (\"Updated flags_auto to 0x%08x after adding chunked header\",\n                       (unsigned int) response->flags_auto);\n        return MHD_YES;\n      }\n      mhd_probe_log (\"Failed to add Transfer-Encoding header => return MHD_NO\");\n      return MHD_NO;\n    }\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log (\"BRANCH: Date header matched. flags_auto=0x%08x\",\n                   (unsigned int) response->flags_auto);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_probe_log (\"Existing date header element lookup returned hdr=%p\", (void *) hdr);\n      mhd_probe_log (\"ASSERT_POINT: About to perform mhd_assert(NULL != hdr)\");\n      /* The agent reported the assertion inside add_response_header_connection\n         is compiled out. Here we log the point where code expects hdr != NULL. */\n      mhd_assert (NULL != hdr);\n      mhd_probe_log (\"ASSERT_POINT PASSED: hdr is not NULL (hdr=%p)\", (void *) hdr);\n      _MHD_remove_header (response, hdr);\n      mhd_probe_log (\"Removed existing date header; freeing resources\");\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_probe_log (\"Freed existing date header memory\");\n    }\n    {\n      enum MHD_Result add_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_probe_log (\"add_response_entry returned %d for Date header\", (int) add_res);\n      if (MHD_NO != add_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        mhd_probe_log (\"Updated flags_auto to 0x%08x after adding Date header\",\n                       (unsigned int) response->flags_auto);\n        return MHD_YES;\n      }\n      mhd_probe_log (\"Failed to add Date header => return MHD_NO\");\n      return MHD_NO;\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log (\"BRANCH: Content-Length header matched. flags=0x%08x flags_auto=0x%08x\",\n                   (unsigned int) response->flags,\n                   (unsigned int) response->flags_auto);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      enum MHD_Result add_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_probe_log (\"add_response_entry returned %d for Content-Length header\", (int) add_res);\n      if (MHD_NO != add_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log (\"Updated flags_auto to 0x%08x after adding Content-Length\",\n                       (unsigned int) response->flags_auto);\n        return MHD_YES;\n      }\n    }\n    mhd_probe_log (\"Decision: Not allowed to add Content-Length => return MHD_NO\");\n    return MHD_NO;\n  }\n\n  mhd_probe_log (\"DEFAULT: falling back to add_response_entry(header='%s')\",\n                 header ? header : \"(null)\");\n  {\n    enum MHD_Result add_res = add_response_entry (response,\n                                                  MHD_HEADER_KIND,\n                                                  header,\n                                                  content);\n    mhd_probe_log (\"add_response_entry returned %d in default case\", (int) add_res);\n    return add_res;\n  }\n}\n"
}