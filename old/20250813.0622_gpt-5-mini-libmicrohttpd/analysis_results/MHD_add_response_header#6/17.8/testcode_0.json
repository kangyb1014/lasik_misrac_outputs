{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function increments the pointer parameters str1 and str2 (str1++ and str2++ inside the loop), which modifies the pointer parameters themselves. This violates MISRA C 2023 Rule 17.8 (the pointer object referred to may be modified, but the pointer parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\nPlease provide the modified MHD_add_response_header code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/53.txt */\nstatic void mhd_log_probe(const char *event,\n                          struct MHD_Response *response,\n                          const char *header,\n                          const char *content,\n                          const void *addr_header_var,\n                          const void *addr_content_var)\n{\n  FILE *f = fopen(\"/tmp/logs/53.txt\", \"a\");\n  if (!f)\n    return;\n  fprintf(f, \"EVENT: %s\\n\", event ?: \"(null)\");\n  fprintf(f, \"  header_ptr=%p header_addr_on_stack=%p header_str=%s\\n\",\n          (const void *)header,\n          addr_header_var,\n          header ? header : \"(null)\");\n  fprintf(f, \"  content_ptr=%p content_addr_on_stack=%p content_str=%s\\n\",\n          (const void *)content,\n          addr_content_var,\n          content ? content : \"(null)\");\n  if (response)\n  {\n    fprintf(f, \"  response_ptr=%p flags_auto=0x%lx flags=0x%lx\\n\",\n            (void *)response,\n            (unsigned long)response->flags_auto,\n            (unsigned long)response->flags);\n  }\n  else\n  {\n    fprintf(f, \"  response_ptr=(null)\\n\");\n  }\n  fprintf(f, \"----\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry and initial parameter state (addresses of the parameter\n     variables are captured to help detect unexpected pointer modification) */\n  mhd_log_probe(\"ENTRY\",\n                response,\n                header,\n                content,\n                (const void *)&header,\n                (const void *)&content);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    mhd_log_probe(\"BRANCH: CONNECTION\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    enum MHD_Result res = add_response_header_connection (response, content);\n    mhd_log_probe(\"RETURN from CONNECTION branch\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    return res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_log_probe(\"BRANCH: TRANSFER_ENCODING (enter)\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      mhd_log_probe(\"RETURN: TRANSFER_ENCODING not chunked\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      mhd_log_probe(\"RETURN: already has chunked flag\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_log_probe(\"RETURN: has content-length and no insanity flag\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    /* Call add_response_entry once and capture its result for logging */\n    {\n      enum MHD_Result tmp_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_log_probe(\"AFTER add_response_entry (TRANSFER_ENCODING)\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      if (MHD_NO != tmp_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        mhd_log_probe(\"RETURN: TRANSFER_ENCODING added (YES)\",\n                      response,\n                      header,\n                      content,\n                      (const void *)&header,\n                      (const void *)&content);\n        return MHD_YES;\n      }\n      mhd_log_probe(\"RETURN: TRANSFER_ENCODING add failed (NO)\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      return MHD_NO;\n    }\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_log_probe(\"BRANCH: DATE (enter)\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_log_probe(\"DATE: found existing header\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n\n    {\n      enum MHD_Result tmp_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_log_probe(\"AFTER add_response_entry (DATE)\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      if (MHD_NO != tmp_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        mhd_log_probe(\"RETURN: DATE added (YES)\",\n                      response,\n                      header,\n                      content,\n                      (const void *)&header,\n                      (const void *)&content);\n        return MHD_YES;\n      }\n      mhd_log_probe(\"RETURN: DATE add failed (NO)\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      return MHD_NO;\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_log_probe(\"BRANCH: CONTENT_LENGTH (enter)\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      enum MHD_Result tmp_res = add_response_entry (response,\n                                                    MHD_HEADER_KIND,\n                                                    header,\n                                                    content);\n      mhd_log_probe(\"AFTER add_response_entry (CONTENT_LENGTH)\",\n                    response,\n                    header,\n                    content,\n                    (const void *)&header,\n                    (const void *)&content);\n      if (MHD_NO != tmp_res)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_log_probe(\"RETURN: CONTENT_LENGTH added (YES)\",\n                      response,\n                      header,\n                      content,\n                      (const void *)&header,\n                      (const void *)&content);\n        return MHD_YES;\n      }\n    }\n    mhd_log_probe(\"RETURN: CONTENT_LENGTH branch exit (NO)\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    return MHD_NO;\n  }\n\n  mhd_log_probe(\"FALLTHROUGH: generic add_response_entry\",\n                response,\n                header,\n                content,\n                (const void *)&header,\n                (const void *)&content);\n\n  /* Final generic path: call add_response_entry and return its result. */\n  {\n    enum MHD_Result tmp_res = add_response_entry (response,\n                                                  MHD_HEADER_KIND,\n                                                  header,\n                                                  content);\n    mhd_log_probe(\"AFTER add_response_entry (generic)\",\n                  response,\n                  header,\n                  content,\n                  (const void *)&header,\n                  (const void *)&content);\n    return tmp_res;\n  }\n}\n"
}