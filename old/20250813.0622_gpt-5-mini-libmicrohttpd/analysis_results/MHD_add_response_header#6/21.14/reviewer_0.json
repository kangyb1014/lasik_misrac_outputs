{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses memcmp to compare a header string to the literal \"close\": mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5))); hdr->value is a null-terminated string (the code ensures buf[pos] = 0) and \"close\" is a null-terminated string literal, so memcmp is being used to compare null-terminated strings. This violates MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void mhd_probe_log(const char *stage,\n                          const char *header,\n                          const char *content,\n                          unsigned int flags_auto,\n                          unsigned int flags)\n{\n  FILE *f = fopen(\"/tmp/logs/54.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s: header='%s' content='%s' flags_auto=0x%08x flags=0x%08x\\n\",\n          stage,\n          (header != NULL) ? header : \"(null)\",\n          (content != NULL) ? content : \"(null)\",\n          flags_auto,\n          flags);\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Log entry into the function with current flags. */\n  mhd_probe_log(\"enter\", header, content,\n                (unsigned int)response->flags_auto,\n                (unsigned int)response->flags);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    mhd_probe_log(\"branch:connection\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    mhd_probe_log(\"branch:transfer-encoding-enter\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      mhd_probe_log(\"transfer-encoding:deny-not-chunked\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      mhd_probe_log(\"transfer-encoding:already-has-chunked\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      mhd_probe_log(\"transfer-encoding:has-content-length-and-no-insanity\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      mhd_probe_log(\"transfer-encoding:added-chunked\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n      return MHD_YES;\n    }\n    mhd_probe_log(\"transfer-encoding:add-failed\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    mhd_probe_log(\"branch:date-enter\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      mhd_probe_log(\"date:removed-previous\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      mhd_probe_log(\"date:added\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n      return MHD_YES;\n    }\n    mhd_probe_log(\"date:add-failed\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    mhd_probe_log(\"branch:content-length-enter\", header, content,\n                  (unsigned int)response->flags_auto,\n                  (unsigned int)response->flags);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        mhd_probe_log(\"content-length:added\", header, content,\n                      (unsigned int)response->flags_auto,\n                      (unsigned int)response->flags);\n        return MHD_YES;\n      }\n      mhd_probe_log(\"content-length:add-failed\", header, content,\n                    (unsigned int)response->flags_auto,\n                    (unsigned int)response->flags);\n    }\n    return MHD_NO;\n  }\n\n  mhd_probe_log(\"default:add-response-entry\", header, content,\n                (unsigned int)response->flags_auto,\n                (unsigned int)response->flags);\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nenter: header='Header-Type-A' content='value-a1' flags_auto=0x00000000 flags=0x00000000\ndefault:add-response-entry: header='Header-Type-A' content='value-a1' flags_auto=0x00000000 flags=0x00000000\nenter: header='Header-Type-A' content='value-a2' flags_auto=0x00000000 flags=0x00000000\ndefault:add-response-entry: header='Header-Type-A' content='value-a2' flags_auto=0x00000000 flags=0x00000000\nenter: header='Header-Type-A' content='value-a3' flags_auto=0x00000000 flags=0x00000000\ndefault:add-response-entry: header='Header-Type-A' content='value-a3' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='a,b,c,d,e' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='a,b,c,d,e' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='i,k,l,m,n,o,p,close' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='i,k,l,m,n,o,p,close' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='1,2,3,4,5,6,7,close' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='1,2,3,4,5,6,7,close' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='8,9,close' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='8,9,close' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='10,12' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='10,12' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000001 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000001 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='close,other-token' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='close,other-token' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='close, new-token' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='close, new-token' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='close, one-long-token' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='close, one-long-token' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='close, additional-token' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' content='close, additional-token' flags_auto=0x00000003 flags=0x00000000\nenter: header='Connection' content='token-1,token-2' flags_auto=0x00000000 flags=0x00000000\nbranch:connection: header='Connection' content='token-1,token-2' flags_auto=0x00000000 flags=0x00000000\nenter: header='Connection' content='token-3' flags_auto=0x00000001 flags=0x00000000\nbranch:connection: header='Connection' content='token-3' flags_auto=0x00000001 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000001 flags=0x00000000\nbranch:connection: header='Connection' content='close' flags_auto=0x00000001 flags=0x00000000\nenter: header='Connection' content='close' flags_auto=0x00000003 flags=0x00000000\nbranch:connection: header='Connection' conten\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code (in the Connection-header handling) uses memcmp(hdr->value, \"close\", 5) to check for the token \"close\" while hdr->value is a null-terminated string (buf[pos] = 0) and the literal \"close\" is a null-terminated string literal. MISRA C:2023 Rule 21.14 explicitly forbids using memcmp to compare null-terminated strings; a string comparison function such as strcmp/strncasecmp (or an explicit binary-safe comparison of lengths plus contents) must be used instead. The provided test logs merely exercise the Connection branch but do not negate the fact that memcmp is being used to compare null-terminated strings. Therefore the reported violation is valid."
}