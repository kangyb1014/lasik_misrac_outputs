{
  "user_message": "An agent A claimed that the following MHD_add_response_header code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro _MHD_EXTERN expands to __attribute__((visibility(\"default\"))) extern, which uses GCC/Clang __attribute__ syntax (a compiler-specific language extension). This constitutes a violation of MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/48.txt\", \"a\");\n    if (NULL == f)\n        return; /* best-effort logging; do not change program behavior */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\nstatic const char *str_or_null(const char *s)\n{\n    return (s != NULL) ? s : \"(null)\";\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Entry probe */\n  log_probe(\"ENTER MHD_add_response_header: header='%s' content='%s' flags=0x%08x flags_auto=0x%08x\",\n            str_or_null(header), str_or_null(content), (unsigned)response->flags, (unsigned)response->flags_auto);\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    log_probe(\"Branch: CONNECTION header matched -> calling add_response_header_connection\");\n    enum MHD_Result r = add_response_header_connection (response, content);\n    log_probe(\"RETURN from CONNECTION branch: result=%d flags_auto=0x%08x\", (int)r, (unsigned)response->flags_auto);\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    log_probe(\"Branch: TRANSFER-ENCODING header matched (content='%s')\", str_or_null(content));\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      log_probe(\"Decision: TRANSFER-ENCODING not 'chunked' -> return MHD_NO\");\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      log_probe(\"Decision: already has TRANS_ENC_CHUNKED flag -> return MHD_YES\");\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ) {\n      log_probe(\"Decision: Has CONTENT_LENGTH and no INSANITY flag -> return MHD_NO\");\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      log_probe(\"Action: added TRANS-ENC header successfully -> set RAF_HAS_TRANS_ENC_CHUNKED, return MHD_YES flags_auto=0x%08x\", (unsigned)response->flags_auto);\n      return MHD_YES;\n    }\n    log_probe(\"Action: failed to add TRANS-ENC header -> return MHD_NO\");\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    log_probe(\"Branch: DATE header matched\");\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      log_probe(\"Action: existing DATE header found at %p -> removing (value=%s)\", (void *)hdr, str_or_null(hdr->value));\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      log_probe(\"Action: added DATE header successfully -> set RAF_HAS_DATE_HDR, return MHD_YES flags_auto=0x%08x\", (unsigned)response->flags_auto);\n      return MHD_YES;\n    }\n    log_probe(\"Action: failed to add DATE header -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    log_probe(\"Branch: CONTENT-LENGTH header matched (content='%s')\", str_or_null(content));\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        log_probe(\"Action: added CONTENT-LENGTH header -> set RAF_HAS_CONTENT_LENGTH, return MHD_YES flags_auto=0x%08x\", (unsigned)response->flags_auto);\n        return MHD_YES;\n      }\n    }\n    log_probe(\"Decision: not allowed or failed to add CONTENT-LENGTH -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  log_probe(\"Default branch: calling add_response_entry for header='%s'\", str_or_null(header));\n  enum MHD_Result final_res = add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n  log_probe(\"RETURN default branch: result=%d flags_auto=0x%08x\", (int)final_res, (unsigned)response->flags_auto);\n  return final_res;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a1' flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nRETURN default branch: result=1 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a2' flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nRETURN default branch: result=1 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Header-Type-A' content='value-a3' flags=0x00000000 flags_auto=0x00000000\nDefault branch: calling add_response_entry for header='Header-Type-A'\nRETURN default branch: result=1 flags_auto=0x00000000\nENTER MHD_add_response_header: header='Connection' content='a,b,c,d,e' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000001\nENTER MHD_add_response_header: header='Connection' content='i,k,l,m,n,o,p,close' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='1,2,3,4,5,6,7,close' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='8,9,close' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='10,12' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000001\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close,other-token' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close, new-token' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close, one-long-token' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000003\nBranch: CONNECTION header matched -> calling add_response_header_connection\nRETURN from CONNECTION branch: result=1 flags_auto=0x00000003\nENTER MHD_add_response_header: header='Connection' content='close' flags=0x00000000 flags_auto=0x00000000\nBranch: CONNECTION header matched -\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The macro _MHD_EXTERN expanding to __attribute__((visibility(\"default\"))) extern uses GCC/Clang __attribute__ syntax which is a compiler-specific language extension. MISRA C 2023 Rule 1.2 forbids use of language extensions; therefore the use of that attribute via the macro constitutes a violation."
}