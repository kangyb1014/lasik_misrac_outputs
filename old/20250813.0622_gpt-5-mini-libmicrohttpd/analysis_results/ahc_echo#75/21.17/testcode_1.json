{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(url) without first ensuring that url is non-NULL and that it points to a NUL-terminated object. If url == NULL, strlen dereferences a NULL pointer (out-of-bounds). If url is not NUL-terminated within its allocated bounds, strlen will read past the object boundary to find a terminator and return a length that causes memcpy(mhd_copy, buffer, size) in MHD_create_response_from_buffer_copy to access bytes beyond the original object. In these situations accesses beyond object bounds can occur, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/607.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper. Writes state and control-flow info to /tmp/logs/607.txt. */\nstatic void\nlog_probe(const char *msg, struct MHD_Connection *connection, const char *url, struct Request *req)\n{\n  FILE *f = fopen(\"/tmp/logs/607.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s\\n\", (long)t, msg);\n  fprintf(f, \"  connection: %p\\n\", (void *) connection);\n  fprintf(f, \"  url pointer: %p\\n\", (const void *) url);\n  if (NULL == url)\n    fprintf(f, \"  url status: NULL\\n\");\n  else\n    fprintf(f, \"  url status: not-NULL (contents not inspected to avoid additional UB)\\n\");\n  fprintf(f, \"  req pointer: %p\\n\", (void *) req);\n  if (NULL != req)\n  {\n    fprintf(f, \"  req->timerfd: %d\\n\", req->timerfd);\n  }\n  fprintf(f, \"  errno: %d (%s)\\n\", errno, strerror(errno));\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n\n  /* capture initial state (req will be set from req_cls below) */\n  req = *req_cls;\n  log_probe(\"ahc_echo enter\", connection, url, req);\n\n  if (NULL == req)\n  {\n    log_probe(\"req is NULL: allocating new Request\", connection, url, req);\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n    {\n      log_probe(\"malloc failed for Request\", connection, url, req);\n      return MHD_NO;\n    }\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n\n    log_probe(\"allocated Request and stored in req_cls\", connection, url, req);\n    return MHD_YES;\n  }\n\n  /* req is non-NULL here */\n  log_probe(\"req present, checking timerfd\", connection, url, req);\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    log_probe(\"about to call strlen(url) and create response\", connection, url, req);\n\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n\n    if (NULL == response)\n    {\n      log_probe(\"MHD_create_response_from_buffer_copy returned NULL\", connection, url, req);\n      return MHD_NO;\n    }\n\n    log_probe(\"response created successfully, queuing response\", connection, url, req);\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    log_probe(\"response queued and destroyed\", connection, url, req);\n    return ret;\n  }\n\n  /* create timer and suspend connection */\n  log_probe(\"creating timerfd and suspending connection\", connection, url, req);\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    log_probe(\"timerfd_create failed\", connection, url, req);\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    log_probe(\"epoll_ctl failed\", connection, url, req);\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    log_probe(\"timerfd_settime failed\", connection, url, req);\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  log_probe(\"connection suspended, returning MHD_YES\", connection, url, req);\n  return MHD_YES;\n}\n"
}