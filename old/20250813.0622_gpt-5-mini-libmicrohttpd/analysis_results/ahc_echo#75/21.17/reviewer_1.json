{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code calls strlen(url) without first ensuring that url is non-NULL and that it points to a NUL-terminated object. If url == NULL, strlen dereferences a NULL pointer (out-of-bounds). If url is not NUL-terminated within its allocated bounds, strlen will read past the object boundary to find a terminator and return a length that causes memcpy(mhd_copy, buffer, size) in MHD_create_response_from_buffer_copy to access bytes beyond the original object. In these situations accesses beyond object bounds can occur, violating Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probe(const char *msg, struct MHD_Connection *connection, const char *url, struct Request *req)\n{\n  FILE *f = fopen(\"/tmp/logs/607.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s\\n\", (long)t, msg);\n  fprintf(f, \"  connection: %p\\n\", (void *) connection);\n  fprintf(f, \"  url pointer: %p\\n\", (const void *) url);\n  if (NULL == url)\n    fprintf(f, \"  url status: NULL\\n\");\n  else\n    fprintf(f, \"  url status: not-NULL (contents not inspected to avoid additional UB)\\n\");\n  fprintf(f, \"  req pointer: %p\\n\", (void *) req);\n  if (NULL != req)\n  {\n    fprintf(f, \"  req->timerfd: %d\\n\", req->timerfd);\n  }\n  fprintf(f, \"  errno: %d (%s)\\n\", errno, strerror(errno));\n  fprintf(f, \"\\n\");\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n\n  /* capture initial state (req will be set from req_cls below) */\n  req = *req_cls;\n  log_probe(\"ahc_echo enter\", connection, url, req);\n\n  if (NULL == req)\n  {\n    log_probe(\"req is NULL: allocating new Request\", connection, url, req);\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n    {\n      log_probe(\"malloc failed for Request\", connection, url, req);\n      return MHD_NO;\n    }\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n\n    log_probe(\"allocated Request and stored in req_cls\", connection, url, req);\n    return MHD_YES;\n  }\n\n  /* req is non-NULL here */\n  log_probe(\"req present, checking timerfd\", connection, url, req);\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    log_probe(\"about to call strlen(url) and create response\", connection, url, req);\n\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n\n    if (NULL == response)\n    {\n      log_probe(\"MHD_create_response_from_buffer_copy returned NULL\", connection, url, req);\n      return MHD_NO;\n    }\n\n    log_probe(\"response created successfully, queuing response\", connection, url, req);\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    log_probe(\"response queued and destroyed\", connection, url, req);\n    return ret;\n  }\n\n  /* create timer and suspend connection */\n  log_probe(\"creating timerfd and suspending connection\", connection, url, req);\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    log_probe(\"timerfd_create failed\", connection, url, req);\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    log_probe(\"epoll_ctl failed\", connection, url, req);\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    log_probe(\"timerfd_settime failed\", connection, url, req);\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  log_probe(\"connection suspended, returning MHD_YES\", connection, url, req);\n  return MHD_YES;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s scenario is valid: the code calls strlen(url) (and then passes url and that length to MHD_create_response_from_buffer_copy) without first ensuring that url is non-NULL and NUL-terminated. If url were NULL, strlen would dereference a NULL pointer; if url is not NUL\u2011terminated within its object bounds, strlen may read past the object and produce a length that leads to out\u2011of\u2011bounds accesses in the subsequent buffer copy. Both situations are exactly the kind of out\u2011of\u2011bounds accesses Rule 21.17 forbids.\n\nThat said, whether this is actually a violation in a given project depends on the external API contract: if the microhttpd callback API guarantees that url is always non\u2011NULL and points to a NUL\u2011terminated string, the call is safe and no violation need be reported. MISRA allows relying on documented external preconditions, but the source code as shown makes no local checks or assertions and therefore is potentially non\u2011compliant unless the non\u2011NULL/NUL\u2011termination precondition is guaranteed and documented. In the absence of such a guarantee, Agent A\u2019s report is correct."
}