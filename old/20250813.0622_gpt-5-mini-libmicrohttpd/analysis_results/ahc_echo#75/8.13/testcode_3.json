{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'cls' is declared as 'void *cls' but is never modified (it is only cast to void to silence an unused warning). Per MISRA C 2023 Rule 8.13 this should be declared 'const void *cls' when possible. (If ahc_echo must match an external callback prototype that mandates a non-const void *, the change may be impossible; otherwise the current declaration violates the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/timerfd.h>\n#include <sys/epoll.h>\n\n/* Probe logger: append control flow and state info to /tmp/logs/603.txt */\nstatic void ahc_log(const char *tag, const void *cls, struct MHD_Connection *connection,\n                    const char *url, struct Request *req, int timerfd)\n{\n  FILE *f = fopen(\"/tmp/logs/603.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"[%s] cls=%p connection=%p url=%s req=%p timerfd=%d\\n\",\n          tag,\n          cls,\n          (void *) connection,\n          (url != NULL) ? url : \"(null)\",\n          (void *) req,\n          timerfd);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  /* Log entry and initial cls value to capture that cls is provided but not used */\n  ahc_log(\"ENTRY\", cls, connection, url, NULL, -1);\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n\n  req = *req_cls;\n  ahc_log(\"AFTER_DEREF_REQCLS\", cls, connection, url, req, (req != NULL) ? req->timerfd : -1);\n\n  if (NULL == req)\n  {\n    ahc_log(\"ALLOC_REQ_START\", cls, connection, url, NULL, -1);\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n    {\n      ahc_log(\"ALLOC_REQ_FAILED\", cls, connection, url, NULL, -1);\n      return MHD_NO;\n    }\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n\n    ahc_log(\"ALLOC_REQ_DONE\", cls, connection, url, req, req->timerfd);\n    return MHD_YES;\n  }\n\n  ahc_log(\"REQ_EXISTS\", cls, connection, url, req, req->timerfd);\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    ahc_log(\"SEND_RESPONSE_START\", cls, connection, url, req, req->timerfd);\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n    {\n      ahc_log(\"SEND_RESPONSE_CREATE_FAILED\", cls, connection, url, req, req->timerfd);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n\n    ahc_log(\"SEND_RESPONSE_DONE\", cls, connection, url, req, req->timerfd);\n    return ret;\n  }\n\n  /* create timer and suspend connection */\n  ahc_log(\"CREATE_TIMER_START\", cls, connection, url, req, req->timerfd);\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    ahc_log(\"CREATE_TIMER_FAILED\", cls, connection, url, req, req->timerfd);\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  ahc_log(\"CREATE_TIMER_DONE\", cls, connection, url, req, req->timerfd);\n\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    ahc_log(\"EPOLL_CTL_FAILED\", cls, connection, url, req, req->timerfd);\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    ahc_log(\"TIMER_SET_FAILED\", cls, connection, url, req, req->timerfd);\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  ahc_log(\"SUSPEND_CONNECTION\", cls, connection, url, req, req->timerfd);\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n"
}