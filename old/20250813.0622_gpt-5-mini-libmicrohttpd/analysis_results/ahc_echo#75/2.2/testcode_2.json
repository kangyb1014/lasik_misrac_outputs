{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment r->data_buffer_size = size; executes when MHD_create_response_from_buffer_copy successfully creates a response, but in the provided codebase there is no use/read of the data_buffer_size field (the comment even says it should be removed). Therefore the assignment has no effect on program behaviour; removing it would not change observable behaviour, so it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/602.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper: append to /tmp/logs/602.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/602.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging only */\n\n  /* timestamp */\n  time_t t = time(NULL);\n  struct tm tm;\n  if (localtime_r(&t, &tm) != NULL)\n  {\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n      fprintf(f, \"%s - \", timestr);\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n\n  /* Log entry and important pointers/inputs */\n  log_probe(\"ahc_echo entry: connection=%p, url=%p ('%s'), method=%p, req_cls=%p, *req_cls=%p\",\n            (void*)connection, (url ? url : \"\"), (url ? url : \"\"), (void*)method, (void*)req_cls, (req_cls ? *req_cls : NULL));\n\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n    {\n      log_probe(\"ahc_echo: malloc failed\");\n      return MHD_NO;\n    }\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n\n    log_probe(\"ahc_echo: allocated req=%p, req->connection=%p, req->timerfd=%d, stored in *req_cls=%p\",\n              (void*)req, (void*)req->connection, req->timerfd, (void*)*req_cls);\n\n    return MHD_YES;\n  }\n\n  log_probe(\"ahc_echo: existing req=%p, req->timerfd=%d\", (void*)req, req->timerfd);\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    log_probe(\"ahc_echo: timerfd active (%d), creating response from url of length=%zu\", req->timerfd, strlen(url));\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    log_probe(\"ahc_echo: MHD_create_response_from_buffer_copy returned %p\", (void*)response);\n    if (NULL == response)\n    {\n      log_probe(\"ahc_echo: response creation failed\");\n      return MHD_NO;\n    }\n\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    log_probe(\"ahc_echo: MHD_queue_response returned %d\", (int)ret);\n    MHD_destroy_response (response);\n\n    /* Important probe: show that nothing else from req is read here (evidence for dead assignment elsewhere).\n       We log the known fields of req so a reviewer can check whether any data_buffer_size-like field is used. */\n    log_probe(\"ahc_echo: after response queued, req=%p has connection=%p, timerfd=%d\",\n              (void*)req, (void*)req->connection, req->timerfd);\n\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    log_probe(\"ahc_echo: timerfd_create failed: %s\", strerror (errno));\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  log_probe(\"ahc_echo: timerfd created for req=%p -> timerfd=%d\", (void*)req, req->timerfd);\n\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    log_probe(\"ahc_echo: epoll_ctl add failed for timerfd=%d: %s\", req->timerfd, strerror (errno));\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  log_probe(\"ahc_echo: epoll_ctl add succeeded for timerfd=%d\", req->timerfd);\n\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    log_probe(\"ahc_echo: timerfd_settime failed for timerfd=%d: %s\", req->timerfd, strerror (errno));\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n\n  log_probe(\"ahc_echo: timerfd_settime succeeded for timerfd=%d (1s)\", req->timerfd);\n\n  MHD_suspend_connection (connection);\n  log_probe(\"ahc_echo: connection %p suspended for req=%p\", (void*)connection, (void*)req);\n  return MHD_YES;\n}\n"
}