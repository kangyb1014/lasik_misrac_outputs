{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement (void) upload_data_size; is an expression-statement that has no runtime effect other than to silence a compiler warning about an unused parameter. Removing that statement would not alter program behaviour, so it is an executed operation whose removal would not affect program behaviour \u2014 i.e. dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/602.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  req = *req_cls;\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n      return MHD_NO;\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    return MHD_YES;\n  }\n\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    return MHD_NO;\n  }\n  MHD_suspend_connection (connection);\n  return MHD_YES;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "static void ahc_echo_probe(const char *event, const char *detail, const void *ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/602.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: %s ptr=%p\\n\", event, (detail != NULL) ? detail : \"\", ptr);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct Request *req;\n  struct itimerspec ts;\n\n  /* Log entry and parameter addresses so callers can observe flow/state. */\n  ahc_echo_probe(\"ENTRY\", \"cls\", cls);\n  ahc_echo_probe(\"ENTRY\", \"connection\", connection);\n  ahc_echo_probe(\"ENTRY\", \"url\", url);\n  ahc_echo_probe(\"ENTRY\", \"method\", method);\n  ahc_echo_probe(\"ENTRY\", \"version\", version);\n  ahc_echo_probe(\"ENTRY\", \"upload_data\", upload_data);\n  ahc_echo_probe(\"ENTRY\", \"upload_data_size\", (const void *) upload_data_size);\n\n  (void) cls;\n  (void) method;\n  (void) version;           /* Unused. Silence compiler warning. */\n  (void) upload_data;       /* Unused. Silence compiler warning. */\n\n  /* Probe specifically around the statement in question so there is evidence\n     that the expression-statement (void) upload_data_size; is executed at\n     runtime. This allows reproducing the scenario described in the report. */\n  ahc_echo_probe(\"PROBE_BEFORE_CAST\", \"upload_data_size\", (const void *) upload_data_size);\n  (void) upload_data_size;  /* Unused. Silence compiler warning. */\n  ahc_echo_probe(\"PROBE_AFTER_CAST\", \"upload_data_size\", (const void *) upload_data_size);\n\n  req = *req_cls;\n  ahc_echo_probe(\"STATE\", \"req_ptr_from_req_cls\", req);\n  if (NULL == req)\n  {\n\n    req = malloc (sizeof(struct Request));\n    if (NULL == req)\n    {\n      ahc_echo_probe(\"EXIT\", \"malloc_failed\", NULL);\n      return MHD_NO;\n    }\n    req->connection = connection;\n    req->timerfd = -1;\n    *req_cls = req;\n    ahc_echo_probe(\"EXIT\", \"allocated_req_and_returning_suspend\", req);\n    return MHD_YES;\n  }\n\n  ahc_echo_probe(\"STATE\", \"req_timerfd\", (const void *) (intptr_t) req->timerfd);\n  if (-1 != req->timerfd)\n  {\n    /* send response (echo request url) */\n    response = MHD_create_response_from_buffer_copy (strlen (url),\n                                                     (const void *) url);\n    if (NULL == response)\n    {\n      ahc_echo_probe(\"EXIT\", \"create_response_failed\", NULL);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n    ahc_echo_probe(\"EXIT\", \"queued_response\", (const void *) (intptr_t) ret);\n    return ret;\n  }\n  /* create timer and suspend connection */\n  req->timerfd = timerfd_create (CLOCK_MONOTONIC, TFD_NONBLOCK);\n  if (-1 == req->timerfd)\n  {\n    printf (\"timerfd_create: %s\", strerror (errno));\n    ahc_echo_probe(\"EXIT\", \"timerfd_create_failed\", (const void *) (intptr_t) errno);\n    return MHD_NO;\n  }\n  evt.events = EPOLLIN;\n  evt.data.ptr = req;\n  if (-1 == epoll_ctl (epfd, EPOLL_CTL_ADD, req->timerfd, &evt))\n  {\n    printf (\"epoll_ctl: %s\", strerror (errno));\n    ahc_echo_probe(\"EXIT\", \"epoll_ctl_failed\", (const void *) (intptr_t) errno);\n    return MHD_NO;\n  }\n  ts.it_value.tv_sec = 1;\n  ts.it_value.tv_nsec = 0;\n  ts.it_interval.tv_sec = 0;\n  ts.it_interval.tv_nsec = 0;\n  if (-1 == timerfd_settime (req->timerfd, 0, &ts, NULL))\n  {\n    printf (\"timerfd_settime: %s\", strerror (errno));\n    ahc_echo_probe(\"EXIT\", \"timerfd_settime_failed\", (const void *) (intptr_t) errno);\n    return MHD_NO;\n  }\n  ahc_echo_probe(\"ACTION\", \"suspending_connection\", connection);\n  MHD_suspend_connection (connection);\n  ahc_echo_probe(\"EXIT\", \"suspended_and_returning\", req);\n  return MHD_YES;\n}\n"
}