{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The if (1) wrapper is an unconditional conditional whose condition is always true; evaluating that condition and branching is an operation that can be removed without changing program behaviour (the block is always executed). The if (1) is therefore dead code under MISRA C 2023 Rule 2.2. Replace the if (1) ... with a plain block { ... } (or remove the if) to avoid the violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n  if (NULL == f)\n    return; /* best-effort logging, do not affect program flow */\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and input state */\n  probe_log_fmt(\"ENTER not_found_page: cls=%p mime='%s' session=%p connection=%p\",\n                cls, (mime ? mime : \"(null)\"), session, connection);\n\n  /* unsupported HTTP method */\n  size_t err_len = strlen (NOT_FOUND_ERROR);\n  probe_log_fmt(\"Preparing NOT_FOUND payload: len=%zu\", err_len);\n\n  response =\n    MHD_create_response_from_buffer_static (err_len,\n                                            (const void *) NOT_FOUND_ERROR);\n  probe_log_fmt(\"MHD_create_response_from_buffer_static -> response=%p\",\n                response);\n\n  if (NULL == response)\n  {\n    probe_log_fmt(\"Response creation failed: returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  probe_log_fmt(\"MHD_queue_response returned ret=%d\", (int) ret);\n\n  int add_res = MHD_add_response_header (response,\n                                         MHD_HTTP_HEADER_CONTENT_ENCODING,\n                                         mime);\n  probe_log_fmt(\"MHD_add_response_header returned %d (expected MHD_YES=%d)\",\n                add_res, (int) MHD_YES);\n\n  if (MHD_YES != add_res)\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log_fmt(\"Failed to set content encoding header for mime='%s'\", (mime ? mime : \"(null)\"));\n  }\n  else\n  {\n    probe_log_fmt(\"Content encoding header set successfully for mime='%s'\", (mime ? mime : \"(null)\"));\n  }\n\n  MHD_destroy_response (response);\n  probe_log_fmt(\"Exiting not_found_page with ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for not_found_page. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The original not_found_page function contains no if(1) or any other unconditional conditional; agent A appears to have misidentified an unconditional wrapper that does not exist in the posted code. The conditionals that are present (if (NULL == response) and if (MHD_YES != MHD_add_response_header(...))) are runtime-dependent and affect control flow and observable behavior (they cause an early return and error handling respectively), so they are not dead code under MISRA C 2023 Rule 2.2. The (void) cls and (void) session lines are used to suppress compiler warnings and do not constitute executed dead code in the sense of Rule 2.2. The empty test log only indicates the function may not have been exercised by the test harness; it does not show a rule violation in the source. Therefore the reported violation is incorrect."
}