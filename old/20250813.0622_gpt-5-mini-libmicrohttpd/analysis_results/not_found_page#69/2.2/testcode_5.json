{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) session;' is a no-op used solely to silence an \"unused parameter\" compiler warning. It is executed but has no effect on program behaviour; removing it would not change the program, so it constitutes dead code (same as the similar '(void) cls;').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/554.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append simple logs to /tmp/logs/554.txt to capture control flow */\nstatic void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* Best effort: write to stderr if file cannot be opened, but do not change logic */\n        fprintf(stderr, \"probe_log: failed to open log file\\n\");\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n  probe_log(\"not_found_page: entered\");\n\n  /* Keep the original unused-parameter casts to preserve the original code shape */\n  (void) cls;     /* Unused. Silent compiler warning. */\n  probe_log(\"not_found_page: executed '(void) cls;' (no-op)\");\n  (void) session; /* Unused. Silent compiler warning. */\n  probe_log(\"not_found_page: executed '(void) session;' (no-op)\");\n\n  /* Log some state that is safe to observe without changing behavior. */\n  if (mime != NULL)\n  {\n    /* limit the amount written to the log */\n    char buf[128];\n    strncpy(buf, mime, sizeof(buf) - 1);\n    buf[sizeof(buf) - 1] = '\\0';\n    probe_log(\"not_found_page: mime present\");\n    /* also write a truncated mime for debugging */\n    FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"not_found_page: mime=\\\"%s\\\"\\n\", buf);\n      fclose(f);\n    }\n  }\n  else\n  {\n    probe_log(\"not_found_page: mime is NULL\");\n  }\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n  {\n    probe_log(\"not_found_page: MHD_create_response_from_buffer_static returned NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"not_found_page: MHD_queue_response returned %d\", (int) ret);\n    probe_log(buf);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"not_found_page: MHD_add_response_header failed\");\n  }\n  else\n  {\n    probe_log(\"not_found_page: MHD_add_response_header succeeded\");\n  }\n\n  MHD_destroy_response (response);\n\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"not_found_page: returning ret=%d\", (int) ret);\n    probe_log(buf);\n  }\n\n  return ret;\n}\n"
}