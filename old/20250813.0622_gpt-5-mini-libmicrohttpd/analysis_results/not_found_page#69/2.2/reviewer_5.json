{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) session;' is a no-op used solely to silence an \"unused parameter\" compiler warning. It is executed but has no effect on program behaviour; removing it would not change the program, so it constitutes dead code (same as the similar '(void) cls;').\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n    if (NULL == f)\n    {\n        /* Best effort: write to stderr if file cannot be opened, but do not change logic */\n        fprintf(stderr, \"probe_log: failed to open log file\\n\");\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n  probe_log(\"not_found_page: entered\");\n\n  /* Keep the original unused-parameter casts to preserve the original code shape */\n  (void) cls;     /* Unused. Silent compiler warning. */\n  probe_log(\"not_found_page: executed '(void) cls;' (no-op)\");\n  (void) session; /* Unused. Silent compiler warning. */\n  probe_log(\"not_found_page: executed '(void) session;' (no-op)\");\n\n  /* Log some state that is safe to observe without changing behavior. */\n  if (mime != NULL)\n  {\n    /* limit the amount written to the log */\n    char buf[128];\n    strncpy(buf, mime, sizeof(buf) - 1);\n    buf[sizeof(buf) - 1] = '\\0';\n    probe_log(\"not_found_page: mime present\");\n    /* also write a truncated mime for debugging */\n    FILE *f = fopen(\"/tmp/logs/554.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"not_found_page: mime=\\\"%s\\\"\\n\", buf);\n      fclose(f);\n    }\n  }\n  else\n  {\n    probe_log(\"not_found_page: mime is NULL\");\n  }\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n  {\n    probe_log(\"not_found_page: MHD_create_response_from_buffer_static returned NULL -> returning MHD_NO\");\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"not_found_page: MHD_queue_response returned %d\", (int) ret);\n    probe_log(buf);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    probe_log(\"not_found_page: MHD_add_response_header failed\");\n  }\n  else\n  {\n    probe_log(\"not_found_page: MHD_add_response_header succeeded\");\n  }\n\n  MHD_destroy_response (response);\n\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"not_found_page: returning ret=%d\", (int) ret);\n    probe_log(buf);\n  }\n\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for not_found_page. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The (void) session; (and similarly (void) cls;) statements are expression-statements that perform no observable action at run time; removing them would not change program behaviour. Under the quoted MISRA C 2023 Rule 2.2 (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), these statements qualify as dead code. The empty test log only shows the function was not exercised by the test harness and does not affect the correctness of the dead-code determination. To address the rule you can remove the no-ops, avoid naming unused parameters in interfaces where allowed, or use an MISRA-acceptable mechanism (or documented deviation) to mark parameters as intentionally unused."
}