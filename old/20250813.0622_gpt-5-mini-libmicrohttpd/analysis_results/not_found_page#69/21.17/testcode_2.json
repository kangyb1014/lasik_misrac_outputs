{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function add_response_entry calls strlen(header) and strlen(content) without validating that header is non-NULL or that either pointer references a NUL-terminated object. If add_response_entry is invoked with header == NULL then strlen(header) dereferences a NULL pointer (out-of-bounds/undefined access). Likewise if either header or content points to a buffer that is not NUL-terminated within its allocated bounds, strlen will read past the object boundary. For example: add_response_entry(..., header = NULL, content = \"ok\") or add_response_entry(..., header = \"X\", content = ptr_to_non_terminated_buffer) will cause out-of-bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append messages to /tmp/logs/559.txt with timestamp. */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n  struct timespec ts;\n  char timestr[64];\n\n  /* Ensure directory exists (best-effort; ignore errors). */\n  (void) mkdir (\"/tmp/logs\", 0755);\n\n  f = fopen (\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  if (clock_gettime (CLOCK_REALTIME, &ts) == 0)\n    {\n      struct tm tm;\n      if (localtime_r (&ts.tv_sec, &tm) != NULL)\n        strftime (timestr, sizeof (timestr), \"%Y-%m-%d %H:%M:%S\", &tm);\n      else\n        snprintf (timestr, sizeof (timestr), \"unknown-time\");\n    }\n  else\n    snprintf (timestr, sizeof (timestr), \"unknown-time\");\n\n  fprintf (f, \"[%s] \", timestr);\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\n/* Modified not_found_page with probes inserted. Original logic preserved. */\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n  /* Silent compiler warnings for unused args retained. */\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and incoming parameter state (do not dereference mime). */\n  log_probe (\"entered not_found_page: cls=%p mime=%p session=%p connection=%p\",\n             cls, (const void *) mime, (const void *) session, (const void *) connection);\n  log_probe (\"mime pointer is %s\", (mime != NULL) ? \"non-NULL\" : \"NULL\");\n\n  /* Log the length of the static NOT_FOUND_ERROR constant before using it. */\n  {\n    size_t not_found_len = strlen (NOT_FOUND_ERROR);\n    log_probe (\"NOT_FOUND_ERROR length=%zu\", not_found_len);\n  }\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n\n  if (NULL == response)\n    {\n      log_probe (\"MHD_create_response_from_buffer_static returned NULL, returning MHD_NO\");\n      return MHD_NO;\n    }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  log_probe (\"MHD_queue_response returned %d\", (int) ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    /* Preserve original stderr message, but also log. */\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    log_probe (\"MHD_add_response_header failed: response=%p mime=%p\",\n               (void *) response, (const void *) mime);\n    log_probe (\"mime pointer is %s\", (mime != NULL) ? \"non-NULL\" : \"NULL\");\n  }\n\n  MHD_destroy_response (response);\n  log_probe (\"exiting not_found_page with ret=%d\", (int) ret);\n  return ret;\n}\n"
}