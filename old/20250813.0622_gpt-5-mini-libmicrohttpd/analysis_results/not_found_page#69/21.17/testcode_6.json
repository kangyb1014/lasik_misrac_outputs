{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a mime pointer that is not a valid NUL\u2011terminated string (for example a pointer into a buffer without a terminating '\\0' or an invalid/short object), MHD_add_response_header will eventually call add_response_entry which does content_len = strlen(content). strlen will read past the bounds of the referenced object, causing an out\u2011of\u2011bounds access and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  FILE *logf = NULL;\n\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Open probe log file early so we can record control flow and state. */\n  logf = fopen(\"/tmp/logs/559.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"not_found_page: entry. cls=%p, mime=%p, session=%p, connection=%p\\n\",\n            cls, (const void *) mime, (void *) session, (void *) connection);\n    /* Log the compile-time constant we're about to use. Use original strlen on NOT_FOUND_ERROR as before. */\n    fprintf(logf, \"not_found_page: NOT_FOUND_ERROR length=%zu\\n\", strlen (NOT_FOUND_ERROR));\n    fflush(logf);\n  }\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"not_found_page: MHD_create_response_from_buffer_static returned NULL\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"not_found_page: created response %p\\n\", (void *) response);\n    fflush(logf);\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  if (logf)\n  {\n    fprintf(logf, \"not_found_page: MHD_queue_response returned %d\\n\", (int) ret);\n    /* Record that we are about to call MHD_add_response_header and the pointer state of mime. */\n    fprintf(logf, \"not_found_page: about to call MHD_add_response_header with mime pointer=%p, mime_is_null=%d\\n\",\n            (const void *) mime, (mime == NULL));\n    fflush(logf);\n  }\n\n  /* Call the library function that is suspected to trigger the violation. */\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    /* Log failure to set header */\n    if (logf)\n    {\n      fprintf(logf, \"not_found_page: MHD_add_response_header returned failure for mime pointer=%p\\n\", (const void *) mime);\n      fflush(logf);\n    }\n\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"not_found_page: MHD_add_response_header returned success for mime pointer=%p\\n\", (const void *) mime);\n      fflush(logf);\n    }\n  }\n\n  MHD_destroy_response (response);\n\n  if (logf)\n  {\n    fprintf(logf, \"not_found_page: exiting with ret=%d\\n\", (int) ret);\n    fclose(logf);\n  }\n\n  return ret;\n}\n"
}