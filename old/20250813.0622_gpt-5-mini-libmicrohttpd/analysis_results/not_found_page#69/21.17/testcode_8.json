{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 buffer overflow when inserting the \"close\" token. If hdr != NULL and the incoming value contains only the token \"close\" (so value_has_close == true, already_has_close == false and norm_len == 0), buf is allocated as buf_size = old_value_len + norm_len = (hdr->value_size + 2) + 0. After inserting the \"close\" token pos becomes MHD_STATICSTR_LEN(\"close\") + 2 (i.e. 5 + 2 = 7), and the code does memcpy(buf + pos, hdr->value, hdr->value_size). That copies hdr->value_size bytes into buf starting at offset 7, so pos + hdr->value_size = 7 + hdr->value_size which is greater than buf_size = hdr->value_size + 2, causing writes beyond the allocated buffer. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified not_found_page code that contains useful probe functions that print useful logs to a file \"/tmp/logs/559.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of not_found_page as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of not_found_page:\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified not_found_page code.\n",
  "test_code": "static void\nprobe_log_state(const char *stage,\n                const void *cls,\n                const char *mime,\n                const void *session,\n                const void *connection,\n                const void *response,\n                int ret,\n                int add_hdr_res)\n{\n  FILE *f = fopen(\"/tmp/logs/559.txt\", \"a\");\n  if (NULL == f)\n  {\n    /* Keep original behavior even if logging fails. */\n    fprintf(stderr, \"probe_log_state: failed to open /tmp/logs/559.txt\\n\");\n    return;\n  }\n\n  fprintf(f, \"--- not_found_page probe (%s) ---\\n\", stage ? stage : \"(null)\");\n  fprintf(f, \"cls=%p\\n\", cls);\n  fprintf(f, \"mime=%s\\n\", mime ? mime : \"(null)\");\n  fprintf(f, \"session=%p\\n\", session);\n  fprintf(f, \"connection=%p\\n\", connection);\n  fprintf(f, \"response=%p\\n\", response);\n  fprintf(f, \"ret=%d\\n\", ret);\n  fprintf(f, \"add_header_result=%d\\n\", add_hdr_res);\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry state so other agents can correlate calls and reproductions. */\n  probe_log_state(\"entry\", cls, mime, session, connection, NULL, -1, -1);\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n  {\n    probe_log_state(\"response_create_failed\", cls, mime, session, connection, NULL, (int)MHD_NO, -1);\n    return MHD_NO;\n  }\n\n  /* Log after creating response (pointer & size info). */\n  probe_log_state(\"response_created\", cls, mime, session, connection, response, -1, -1);\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  /* Log the queue result and response pointer. */\n  probe_log_state(\"after_queue_response\", cls, mime, session, connection, response, (int)ret, -1);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    /* Record header addition failure in logs (and preserve original stderr message). */\n    probe_log_state(\"add_header_failed\", cls, mime, session, connection, response, (int)ret, 0);\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  else\n  {\n    probe_log_state(\"add_header_succeeded\", cls, mime, session, connection, response, (int)ret, 1);\n  }\n\n  MHD_destroy_response (response);\n\n  /* Final log before returning, including the return value. */\n  probe_log_state(\"exit\", cls, mime, session, connection, NULL, (int)ret, -1);\n\n  return ret;\n}\n"
}