{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of update_directory:\n```c\nstatic void\nupdate_directory (void)\n{\n  static size_t initial_allocation = 32 * 1024; /* initial size for response buffer */\n  struct MHD_Response *response;\n  struct ResponseDataContext rdc;\n  unsigned int language_idx;\n  unsigned int category_idx;\n  const struct Language *language;\n  const char *category;\n  char dir_name[128];\n  struct stat sbuf;\n  int res;\n  size_t len;\n\n  rdc.buf_len = initial_allocation;\n  if (NULL == (rdc.buf = malloc (rdc.buf_len)))\n  {\n    update_cached_response (NULL);\n    return;\n  }\n  len = strlen (INDEX_PAGE_HEADER);\n  if (rdc.buf_len <= len)\n  { /* buffer too small */\n    free (rdc.buf);\n    update_cached_response (NULL);\n    return;\n  }\n  memcpy (rdc.buf, INDEX_PAGE_HEADER, len);\n  rdc.off = len;\n  for (language_idx = 0; NULL != languages[language_idx].dirname;\n       language_idx++)\n  {\n    language = &languages[language_idx];\n\n    if (0 != stat (language->dirname, &sbuf))\n      continue; /* empty */\n    /* we ensured always +1k room, filenames are ~256 bytes,\n       so there is always still enough space for the header\n       without need for an additional reallocation check. */\n    res = snprintf (&rdc.buf[rdc.off], rdc.buf_len - rdc.off,\n                    \"<h2>%s</h2>\\n\",\n                    language->longname);\n    if (0 >= res)\n      continue;  /* snprintf() error */\n    if (rdc.buf_len - rdc.off <= (size_t) res)\n      continue;  /* buffer too small?? */\n    rdc.off += (size_t) res;\n    for (category_idx = 0; NULL != categories[category_idx]; category_idx++)\n    {\n      category = categories[category_idx];\n      res = snprintf (dir_name, sizeof (dir_name),\n                      \"%s/%s\",\n                      language->dirname,\n                      category);\n      if ((0 >= res) || (sizeof (dir_name) <= (size_t) res))\n        continue;  /* cannot print dir name */\n      if (0 != stat (dir_name, &sbuf))\n        continue;  /* empty */\n\n      /* we ensured always +1k room, filenames are ~256 bytes,\n         so there is always still enough space for the header\n         without need for an additional reallocation check. */\n      res = snprintf (&rdc.buf[rdc.off], rdc.buf_len - rdc.off,\n                      \"<h3>%s</h3>\\n\",\n                      category);\n      if (0 >= res)\n        continue;  /* snprintf() error */\n      if (rdc.buf_len - rdc.off <= (size_t) res)\n        continue;  /* buffer too small?? */\n      rdc.off += (size_t) res;\n\n      if (MHD_NO == list_directory (&rdc, dir_name))\n      {\n        free (rdc.buf);\n        update_cached_response (NULL);\n        return;\n      }\n    }\n  }\n  /* we ensured always +1k room, filenames are ~256 bytes,\n     so there is always still enough space for the footer\n     without need for a final reallocation check. */\n  len = strlen (INDEX_PAGE_FOOTER);\n  if (rdc.buf_len - rdc.off <= len)\n  { /* buffer too small */\n    free (rdc.buf);\n    update_cached_response (NULL);\n    return;\n  }\n  memcpy (rdc.buf, INDEX_PAGE_FOOTER, len);\n  rdc.off += len;\n  initial_allocation = rdc.buf_len; /* remember for next time */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (rdc.off,\n                                                        rdc.buf,\n                                                        &free);\n  mark_as_html (response);\n#ifdef FORCE_CLOSE\n  (void) MHD_add_response_header (response,\n                                  MHD_HTTP_HEADER_CONNECTION,\n                                  \"close\");\n#endif\n  update_cached_response (response);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function update_directory:\n#define INDEX_PAGE_HEADER \"<html>\\n<head><title>Welcome</title></head>\\n<body>\\n\"\"<h1>Upload</h1>\\n\"\"<form method=\\\"POST\\\" enctype=\\\"multipart/form-data\\\" action=\\\"/\\\">\\n\"\"<dl><dt>Content type:</dt><dd>\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"books\\\">Book</input>\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"images\\\">Image</input>\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"music\\\">Music</input>\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"software\\\">Software</input>\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"videos\\\">Videos</input>\\n\"\"<input type=\\\"radio\\\" name=\\\"category\\\" value=\\\"other\\\" checked>Other</input></dd>\"\"<dt>Language:</dt><dd>\"\"<input type=\\\"radio\\\" name=\\\"language\\\" value=\\\"no-lang\\\" checked>none</input>\"\"<input type=\\\"radio\\\" name=\\\"language\\\" value=\\\"en\\\">English</input>\"\"<input type=\\\"radio\\\" name=\\\"language\\\" value=\\\"de\\\">German</input>\"\"<input type=\\\"radio\\\" name=\\\"language\\\" value=\\\"fr\\\">French</input>\"\"<input type=\\\"radio\\\" name=\\\"language\\\" value=\\\"es\\\">Spanish</input></dd>\\n\"\"<dt>File:</dt><dd>\"\"<input type=\\\"file\\\" name=\\\"upload\\\"/></dd></dl>\"\"<input type=\\\"submit\\\" value=\\\"Send!\\\"/>\\n\"\"</form>\\n\"\"<h1>Download</h1>\\n\"\"<ol>\\n\"\n...\n#define INDEX_PAGE_FOOTER \"</ol>\\n</body>\\n</html>\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "len = strlen (INDEX_PAGE_FOOTER);",
    "len = strlen (INDEX_PAGE_HEADER);",
    "memcpy (rdc.buf, INDEX_PAGE_HEADER, len);",
    "memcpy (rdc.buf, INDEX_PAGE_FOOTER, len);"
  ],
  "explanation": "Rule 21.17 concerns functions from <string.h> (e.g. memcpy, strlen, strcpy, etc.). The only uses of <string.h> functions in this function are the two strlen calls and the two memcpy calls listed above, so those are flagged for investigation. Other string/format operations in the function (snprintf usage and its checks, snprintf into dir_name) are not calls from <string.h> and thus are outside the direct scope of this MISRA rule; furthermore, the snprintf calls include checks of the returned length against the available buffer size (and the dir_name snprintf checks against sizeof(dir_name)), which mitigates out-of-bounds writes for those calls. No other <string.h> functions appear in the provided code, so no additional fragments need to be investigated under Rule 21.17."
}