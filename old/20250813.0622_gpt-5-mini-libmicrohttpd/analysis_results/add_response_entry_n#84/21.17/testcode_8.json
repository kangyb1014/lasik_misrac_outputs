{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(header) in add_response_entry without validating that header is non-NULL and NUL-terminated. If a caller (for example MHD_add_response_header) passes header == NULL or passes a char buffer that is not NUL-terminated (i.e. only a pointer + length is known), strlen will read past the object bounds causing a violation (out-of-bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Probe logging: capture control path and state to /tmp/logs/679.txt. */\n  FILE *fp = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (fp)\n    {\n      fprintf(fp, \"add_response_entry_n called: response=%p, kind=%d, header=%p, header_len=%zu, content=%p, content_len=%zu\\n\",\n              (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n\n      if (NULL == response)\n        fprintf(fp, \"-> early check: response is NULL\\n\");\n\n      if (NULL == header)\n        {\n          fprintf(fp, \"-> header is NULL (will cause memchr on NULL if header_len > 0)\\n\");\n        }\n      else\n        {\n          /* Safe inspection: only examine header contents if header != NULL and within header_len. */\n          const void *nul = memchr(header, '\\0', header_len);\n          fprintf(fp, \"-> header contains NUL within header_len? %s\\n\", nul ? \"yes\" : \"no\");\n\n          /* Dump up to a limited number of bytes from header to help reproduce non-terminated buffers. */\n          size_t dump_len = header_len < 128 ? header_len : 128;\n          fprintf(fp, \"-> header bytes (hex, first %zu):\", dump_len);\n          for (size_t i = 0; i < dump_len; ++i)\n            fprintf(fp, \" %02x\", (unsigned char) header[i]);\n          fprintf(fp, \"\\n\");\n        }\n\n      if (NULL == content)\n        fprintf(fp, \"-> content is NULL\\n\");\n      else\n        {\n          const void *nulc = memchr(content, '\\0', content_len);\n          fprintf(fp, \"-> content contains NUL within content_len? %s\\n\", nulc ? \"yes\" : \"no\");\n\n          size_t cd = content_len < 128 ? content_len : 128;\n          fprintf(fp, \"-> content bytes (hex, first %zu):\", cd);\n          for (size_t i = 0; i < cd; ++i)\n            fprintf(fp, \" %02x\", (unsigned char) content[i]);\n          fprintf(fp, \"\\n\");\n        }\n\n      fclose(fp);\n    }\n\n  /* Preserve original logic exactly. */\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}