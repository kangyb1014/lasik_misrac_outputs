{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemchr(header, '\\t', header_len) is called without ensuring that 'header' points to an object of at least header_len bytes (or is non-NULL). For example, if header points to a 4-byte string \"abc\\0\" but header_len is 10, memchr will read beyond the bounds of the object; similarly, if header == NULL and header_len > 0, memchr will dereference NULL. The function does not check header != NULL or otherwise guarantee the buffer length, so these cases violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/679.txt. */\nstatic void\n__log_probe (const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (NULL == f)\n    {\n      /* Try to create directory and reopen. Ignore errors otherwise. */\n      (void) mkdir(\"/tmp/logs\", 0777);\n      f = fopen(\"/tmp/logs/679.txt\", \"a\");\n    }\n  if (NULL == f)\n    return;\n\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  __log_probe (\"ENTER add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n               (void *) response, (int) kind, (const void *) header, header_len, (const void *) content, content_len);\n\n  if (NULL == response)\n    {\n      __log_probe (\"DECISION: response == NULL -> return false\\n\");\n      return false;\n    }\n  if (0 == header_len)\n    {\n      __log_probe (\"DECISION: header_len == 0 -> return false\\n\");\n      return false;\n    }\n  if (0 == content_len)\n    {\n      __log_probe (\"DECISION: content_len == 0 -> return false\\n\");\n      return false;\n    }\n\n  /* For each memchr check we log the pointer and length BEFORE calling memchr.\n     This captures the potentially dangerous inputs (e.g. header == NULL with\n     header_len > 0) without attempting to read pointed-to memory ourselves. */\n  const void *p = NULL;\n\n  __log_probe (\"CHECK: memchr(header, '\\\\t', %zu) with header=%p\\n\", header_len, (const void *) header);\n  p = memchr (header, '\\t', header_len);\n  __log_probe (\"RESULT: memchr(header, '\\\\t') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found '\\\\t' in header -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"CHECK: memchr(header, ' ', %zu) with header=%p\\n\", header_len, (const void *) header);\n  p = memchr (header, ' ', header_len);\n  __log_probe (\"RESULT: memchr(header, ' ') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found ' ' in header -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"CHECK: memchr(header, '\\\\r', %zu) with header=%p\\n\", header_len, (const void *) header);\n  p = memchr (header, '\\r', header_len);\n  __log_probe (\"RESULT: memchr(header, '\\\\r') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found '\\\\r' in header -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"CHECK: memchr(header, '\\\\n', %zu) with header=%p\\n\", header_len, (const void *) header);\n  p = memchr (header, '\\n', header_len);\n  __log_probe (\"RESULT: memchr(header, '\\\\n') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found '\\\\n' in header -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"CHECK: memchr(content, '\\\\r', %zu) with content=%p\\n\", content_len, (const void *) content);\n  p = memchr (content, '\\r', content_len);\n  __log_probe (\"RESULT: memchr(content, '\\\\r') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found '\\\\r' in content -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"CHECK: memchr(content, '\\\\n', %zu) with content=%p\\n\", content_len, (const void *) content);\n  p = memchr (content, '\\n', content_len);\n  __log_probe (\"RESULT: memchr(content, '\\\\n') -> %p\\n\", p);\n  if (NULL != p)\n    {\n      __log_probe (\"DECISION: found '\\\\n' in content -> return false\\n\");\n      return false;\n    }\n\n  __log_probe (\"ALL CHECKS PASSED -> calling MHD_add_response_entry_no_check_()\\n\");\n  bool ret = MHD_add_response_entry_no_check_ (response, kind, header, header_len, content, content_len);\n  __log_probe (\"MHD_add_response_entry_no_check_ returned %d\\n\", (int) ret);\n  return ret;\n}\n"
}