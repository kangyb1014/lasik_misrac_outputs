{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(content) after only checking content != NULL. If a caller passes a non-NULL pointer to a character buffer that is not NUL-terminated (for example a binary buffer or a buffer allocated/filled with explicit lengths via memcpy without a terminating '\\0'), strlen will read past the buffer boundary searching for a NUL and thus perform out-of-bounds accesses. This use of strlen can therefore violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "static void\nlog_probe(const char *tag,\n          struct MHD_Response *response,\n          enum MHD_ValueKind kind,\n          const char *header,\n          size_t header_len,\n          const char *content,\n          size_t content_len)\n{\n  FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  /* Basic context */\n  fprintf(f, \"[%s] response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n          tag, (void *) response, (int) kind,\n          (void *) header, header_len, (void *) content, content_len);\n\n  /* Safe probes: only call memchr when pointer is non-NULL */\n  fprintf(f, \"[%s] header_has_tab=%d header_has_space=%d header_has_CR=%d header_has_LF=%d\\n\",\n          tag,\n          header ? (NULL != memchr(header, '\\t', header_len)) : 0,\n          header ? (NULL != memchr(header, ' ', header_len)) : 0,\n          header ? (NULL != memchr(header, '\\r', header_len)) : 0,\n          header ? (NULL != memchr(header, '\\n', header_len)) : 0);\n\n  fprintf(f, \"[%s] content_has_CR=%d content_has_LF=%d content_has_NUL_within_len=%d\\n\",\n          tag,\n          content ? (NULL != memchr(content, '\\r', content_len)) : 0,\n          content ? (NULL != memchr(content, '\\n', content_len)) : 0,\n          content ? (NULL != memchr(content, '\\0', content_len)) : 0);\n\n  fclose(f);\n}\n\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry */\n  log_probe(\"entry\", response, kind, header, header_len, content, content_len);\n\n  if (NULL == response)\n  {\n    log_probe(\"fail_null_response\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == header_len)\n  {\n    log_probe(\"fail_zero_header_len\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (0 == content_len)\n  {\n    log_probe(\"fail_zero_content_len\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (header, '\\t', header_len))\n  {\n    log_probe(\"fail_header_tab\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (header, ' ', header_len))\n  {\n    log_probe(\"fail_header_space\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (header, '\\r', header_len))\n  {\n    log_probe(\"fail_header_CR\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (header, '\\n', header_len))\n  {\n    log_probe(\"fail_header_LF\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (content, '\\r', content_len))\n  {\n    log_probe(\"fail_content_CR\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n  if (NULL != memchr (content, '\\n', content_len))\n  {\n    log_probe(\"fail_content_LF\", response, kind, header, header_len, content, content_len);\n    return false;\n  }\n\n  /* Before calling the underlying function, log the state. We do not call strlen() here\n     (which would be unsafe for non-NUL-terminated buffers). Instead we record whether a NUL\n     byte exists within the provided content_len using memchr above inside log_probe. */\n  log_probe(\"before_MHD_add\", response, kind, header, header_len, content, content_len);\n\n  bool result = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                                   content, content_len);\n\n  /* Log the result of the final call */\n  {\n    FILE *f = fopen(\"/tmp/logs/679.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"[after_MHD_add] result=%d response=%p\\n\", (int) result, (void *) response);\n      fclose(f);\n    }\n  }\n\n  return result;\n}\n"
}