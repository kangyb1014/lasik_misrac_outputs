{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member is declared as a pointer to mutable MHD_iovec_ (\"MHD_iovec_ *data_iov;\"). If the iovec entries are intended to be read-only (buffers supplied by the caller that the implementation does not modify), the pointer should point to a const-qualified type (e.g. \"const MHD_iovec_ *data_iov\"). Because the declaration lacks the const qualification when it could/should be const, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_response_entry_n as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\nPlease provide the modified add_response_entry_n code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/675.txt */\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/675.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc('\\n', f);\n  fclose (f);\n}\n\n/* Dump up to `len` bytes from `buf` in hex and ASCII (printable) form. */\nstatic void\nlog_dump_buffer (const char *label, const char *buf, size_t len)\n{\n  size_t i;\n  size_t to_print = (len < 64u) ? len : 64u; /* limit output */\n  if (buf == NULL)\n    {\n      log_probe (\"%s: NULL (len=%zu)\", label, len);\n      return;\n    }\n  log_probe (\"%s: address=%p len=%zu (first %zu bytes)\", label, (void *)buf, len, to_print);\n  {\n    char hex[3 * 64 + 1];\n    char asc[64 + 1];\n    size_t posh = 0;\n    for (i = 0; i < to_print; ++i)\n      {\n        unsigned char c = (unsigned char) buf[i];\n        if (posh + 3 < sizeof (hex))\n          {\n            int rc = snprintf (&hex[posh], sizeof (hex) - posh, \"%02x \", c);\n            if (rc > 0)\n              posh += (size_t) rc;\n          }\n        asc[i] = (c >= 32 && c <= 126) ? (char) c : '.';\n      }\n    hex[posh] = '\\0';\n    asc[to_print] = '\\0';\n    log_probe (\"%s HEX: %s\", label, hex);\n    log_probe (\"%s ASCII: %s\", label, asc);\n  }\n}\n\n/* Original function with inserted logging probes. */\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  /* Log entry and parameter state */\n  log_probe (\"enter add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (void *) header, header_len, (void *) content, content_len);\n\n  if (NULL == response)\n    {\n      log_probe (\"reject: response is NULL\");\n      return false;\n    }\n  if (0 == header_len)\n    {\n      log_probe (\"reject: header_len is 0\");\n      return false;\n    }\n  if (0 == content_len)\n    {\n      log_probe (\"reject: content_len is 0\");\n      return false;\n    }\n\n  /* Log a small portion of buffers to help reproduce caller state. */\n  log_dump_buffer (\"header\", header, header_len);\n  log_dump_buffer (\"content\", content, content_len);\n\n  const void *p_check = NULL;\n\n  p_check = memchr (header, '\\t', header_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: header contains tab at offset %td\", (const char *) p_check - header);\n      return false;\n    }\n  p_check = memchr (header, ' ', header_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: header contains space at offset %td\", (const char *) p_check - header);\n      return false;\n    }\n  p_check = memchr (header, '\\r', header_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: header contains CR at offset %td\", (const char *) p_check - header);\n      return false;\n    }\n  p_check = memchr (header, '\\n', header_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: header contains LF at offset %td\", (const char *) p_check - header);\n      return false;\n    }\n  p_check = memchr (content, '\\r', content_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: content contains CR at offset %td\", (const char *) p_check - content);\n      return false;\n    }\n  p_check = memchr (content, '\\n', content_len);\n  if (NULL != p_check)\n    {\n      log_probe (\"reject: content contains LF at offset %td\", (const char *) p_check - content);\n      return false;\n    }\n\n  log_probe (\"passing validation checks, invoking MHD_add_response_entry_no_check_\\n  response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\",\n             (void *) response, (int) kind, (void *) header, header_len, (void *) content, content_len);\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n"
}