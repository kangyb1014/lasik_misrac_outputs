{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_queue_response the value parameter 'status_code' is modified in-place via 'status_code &= ~MHD_ICY_FLAG;'. Modifying a function parameter (even a value parameter) violates MISRA C 2023 Rule 17.8. A compliant fix is to copy the parameter to a local variable (e.g. 'unsigned int sc = status_code;') and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/85.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <string.h>\n\n/* Probe/logging helpers. These do not alter program logic. They write\n   useful diagnostic information to /tmp/logs/85.txt so other agents can\n   reproduce and obtain evidence about the call to MHD_queue_response. */\nstatic void\nlog_to_file (const char *fmt, ...)\n{\n  FILE *f;\n  va_list ap;\n\n  /* Ensure directory exists. Ignore errors as this is only diagnostic. */\n  (void)mkdir(\"/tmp/logs\", 0755);\n\n  f = fopen(\"/tmp/logs/85.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  /* timestamp */\n  {\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n      char timestr[64];\n      (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n      fprintf(f, \"%s \", timestr);\n    }\n  }\n\n  /* pid for additional context */\n  fprintf(f, \"pid=%ld \", (long)getpid());\n\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n/* Wrapper around MHD_queue_response that logs the status code passed in\n   and the result. To avoid modifying the wrapper's parameter (and to\n   demonstrate a compliant caller behavior), copy the incoming\n   status_code into a local variable and pass the local variable to the\n   underlying library function. */\nstatic enum MHD_Result\nprobe_queue_response_wrapper (struct MHD_Connection *connection,\n                              unsigned int status_code,\n                              struct MHD_Response *response)\n{\n  enum MHD_Result r;\n  unsigned int sc = status_code; /* local copy to avoid modifying parameter */\n\n  log_to_file(\"Calling MHD_queue_response: connection=%p, response=%p, status_code=0x%X\",\n              (void *)connection, (void *)response, (unsigned)sc);\n\n  r = MHD_queue_response (connection, sc, response);\n\n  log_to_file(\"Returned from MHD_queue_response: result=%d (0x%X), status_code_local_after_call=0x%X\",\n              (int)r, (unsigned)r, (unsigned)sc);\n\n  return r;\n}\n\n/* Keep serve_simple_form logic intact; add probes to log control flow and\n   state around key operations: response creation, header addition, and\n   queuing the response. */\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Log entry and key input state */\n  log_to_file(\"enter serve_simple_form: cls=%p, mime=%s, session=%p, connection=%p, form_len=%zu\",\n              cls, mime ? mime : \"(null)\", (void *)session, (void *)connection,\n              (form != NULL) ? strlen(form) : 0U);\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  log_to_file(\"MHD_create_response_from_buffer_static returned response=%p\", (void *)response);\n\n  add_session_cookie (session, response);\n  log_to_file(\"add_session_cookie called: session=%p, response=%p\", (void *)session, (void *)response);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    log_to_file(\"MHD_add_response_header failed: response=%p, mime=%s\", (void *)response,\n                mime ? mime : \"(null)\");\n    /* return response without content type anyway ... */\n  }\n  else\n  {\n    log_to_file(\"MHD_add_response_header succeeded: response=%p, mime=%s\", (void *)response,\n                mime ? mime : \"(null)\");\n  }\n\n  /* Use the wrapper so the call site is well-instrumented. We pass the\n     original MHD_HTTP_OK constant; the wrapper copies it to a local\n     variable before invoking the library function. This preserves the\n     original behaviour while recording the status code value in the\n     log. */\n  ret = probe_queue_response_wrapper (connection,\n                                     MHD_HTTP_OK,\n                                     response);\n\n  log_to_file(\"MHD_queue_response returned ret=%d (0x%X)\", (int)ret, (unsigned)ret);\n\n  MHD_destroy_response (response);\n  log_to_file(\"MHD_destroy_response called on %p, exiting serve_simple_form with ret=%d\",\n              (void *)response, (int)ret);\n\n  return ret;\n}"
}