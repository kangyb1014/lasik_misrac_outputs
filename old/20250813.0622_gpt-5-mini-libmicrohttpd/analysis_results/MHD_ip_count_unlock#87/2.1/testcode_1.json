{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the given project MHD_USE_POSIX_THREADS is defined (MHD_USE_POSIX_THREADS 1). That means the #if branch is always taken and the #else branch with the single statement '(void) daemon;' is never compiled or executed. Because that alternative branch can never be reached in this project configuration, it constitutes unreachable code and therefore violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_unlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/697.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_unlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_unlock:\n```c\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_unlock code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends control-flow and state information to the\n   file /tmp/logs/697.txt so that build-time configurations (which branch\n   is compiled) and runtime state can be observed. */\nstatic void\nmhd_log_probe (const char *msg, const struct MHD_Daemon *daemon)\n{\n  FILE *f = fopen(\"/tmp/logs/697.txt\", \"a\");\n  if (f != NULL)\n  {\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n\n    if (daemon != NULL)\n    {\n      /* Print pointer values for daemon and some members to capture state. */\n      (void) fprintf(f, \"%ld pid=%ld: %s: daemon=%p master=%p per_ip_connection_mutex=%p\\n\",\n                     (long) t, (long) pid, msg,\n                     (const void *) daemon,\n                     (const void *) daemon->master,\n                     (const void *) &daemon->per_ip_connection_mutex);\n    }\n    else\n    {\n      (void) fprintf(f, \"%ld pid=%ld: %s: daemon=NULL\\n\",\n                     (long) t, (long) pid, msg);\n    }\n    (void) fclose(f);\n  }\n}\n\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log entry into the compiled thread-enabled branch. This will provide\n     evidence that the thread branch is active in the build and that the\n     alternative branch is not compiled for this configuration. */\n  mhd_log_probe(\"Entering MHD_ip_count_unlock (threads enabled)\", daemon);\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n  mhd_log_probe(\"Exiting MHD_ip_count_unlock (threads enabled)\", daemon);\n#else\n  /* Log entry into the non-thread branch. In builds where this branch is\n     unreachable it will never appear in the logs, providing evidence of the\n     unreachable code scenario. */\n  mhd_log_probe(\"MHD_ip_count_unlock: non-thread branch taken\", daemon);\n  (void) daemon;\n#endif\n}\n"
}