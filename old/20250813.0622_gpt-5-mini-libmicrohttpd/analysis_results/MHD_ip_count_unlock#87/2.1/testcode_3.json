{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe project defines MHD_USE_POSIX_THREADS as 1, so the #if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS) branch is always taken. The #else branch (the '(void) daemon;' statement) is never compiled/used in this build configuration and therefore is unreachable code in the project.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_unlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/697.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_ip_count_unlock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_unlock:\n```c\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\nPlease provide the modified MHD_ip_count_unlock code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Simple probe logger that appends control-flow and state info to /tmp/logs/697.txt */\nstatic void\nmhd_log_probe (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/697.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fputc('\\n', f);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  /* preserve original assertion */\n  mhd_assert (NULL == daemon->master);\n\n  /* Log entry and key state info (addresses and master pointer) */\n  mhd_log_probe(\"MHD_ip_count_unlock: enter; daemon=%p, master=%p, per_ip_connection_mutex=%p\",\n                 (void *) daemon,\n                 (void *) daemon->master,\n                 (void *) &daemon->per_ip_connection_mutex);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* This branch is expected to be taken in threaded builds. */\n  mhd_log_probe(\"MHD_ip_count_unlock: compiled with thread support; unlocking mutex %p\",\n                 (void *) &daemon->per_ip_connection_mutex);\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n  mhd_log_probe(\"MHD_ip_count_unlock: mutex unlocked for daemon=%p\", (void *) daemon);\n#else\n  /* This branch is not compiled in threaded builds; its absence from logs\n     serves as evidence of unreachable (not compiled) code when thread\n     macros are defined. */\n  mhd_log_probe(\"MHD_ip_count_unlock: compiled WITHOUT thread support; (void)daemon executed; daemon=%p\",\n                 (void *) daemon);\n  (void) daemon;\n#endif\n}\n"
}