{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\npages[i].mime refers to immutable MIME strings (e.g. \"text/html\") but is used with a non-const pointer type \u2014 either pages[i].mime is declared as 'char *' instead of 'const char *', or the handler's prototype takes 'char *mime' (non-const), thereby omitting or discarding const qualification. In that situation a pointer that should be to a const-qualified type is not, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/547.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "static void\nprobe_log_simple (const char *s)\n{\n  FILE *f = fopen(\"/tmp/logs/547.txt\", \"a\");\n  if (f != NULL)\n  {\n    time_t t = time (NULL);\n    fprintf (f, \"[%ld] %s\\n\", (long) t, s);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  char buf[512];\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  snprintf (buf, sizeof (buf), \"enter create_response: url=%s method=%s\", url ? url : \"(NULL)\", method ? method : \"(NULL)\");\n  probe_log_simple (buf);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    snprintf (buf, sizeof (buf), \"request == NULL: allocating Request for url=%s\", url ? url : \"(NULL)\");\n    probe_log_simple (buf);\n\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      probe_log_simple (\"calloc failed in create_response\");\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        snprintf (buf, sizeof (buf), \"Failed to setup post processor for url=%s\", url ? url : \"(NULL)\");\n        probe_log_simple (buf);\n        return MHD_NO; /* internal error */\n      }\n      else\n      {\n        probe_log_simple (\"post processor created successfully\");\n      }\n    }\n    probe_log_simple (\"initial request created, returning MHD_YES to continue processing\");\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      snprintf (buf, sizeof (buf), \"get_session failed for url=%s\", url ? url : \"(NULL)\");\n      probe_log_simple (buf);\n      return MHD_NO; /* internal error */\n    }\n    else\n    {\n      probe_log_simple (\"session established for request\");\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    snprintf (buf, sizeof (buf), \"processing POST data: upload_data_size=%zu\", upload_data_size ? *upload_data_size : 0);\n    probe_log_simple (buf);\n\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      probe_log_simple (\"MHD_post_process returned != MHD_YES\");\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      probe_log_simple (\"More upload data expected: returning MHD_YES to indicate more data is needed\");\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n\n    snprintf (buf, sizeof (buf), \"POST processing complete, switched to GET; url=%s\", url ? url : \"(NULL)\");\n    probe_log_simple (buf);\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n\n    /* Log the candidate page information to gather evidence about pages[i].mime */\n    if (pages[i].url == NULL)\n      snprintf (buf, sizeof (buf), \"no matching page found for url=%s; index=%u\", url ? url : \"(NULL)\", i);\n    else\n      snprintf (buf, sizeof (buf), \"selected page index=%u url=%s mime=%s mime_ptr=%p handler_ptr=%p handler_cls=%p\", i, pages[i].url ? pages[i].url : \"(NULL)\", pages[i].mime ? pages[i].mime : \"(NULL)\", (void *) pages[i].mime, (void *) pages[i].handler, (void *) pages[i].handler_cls);\n    probe_log_simple (buf);\n\n    /* Before calling the handler, record the state that is relevant to Rule 8.13\n       (we cannot inspect compile-time const qualification here, but we can\n       capture the mime pointer value and its contents so other agents can\n       examine whether it looks like a static string literal such as \"text/html\"). */\n    if (pages[i].mime)\n    {\n      /* Safely copy a short preview of the mime string for the log */\n      char mime_preview[128];\n      size_t mlen = strlen (pages[i].mime);\n      if (mlen >= sizeof (mime_preview))\n        mlen = sizeof (mime_preview) - 1;\n      memcpy (mime_preview, pages[i].mime, mlen);\n      mime_preview[mlen] = '\\0';\n      snprintf (buf, sizeof (buf), \"mime preview: '%s' (len=%zu) at %p\", mime_preview, strlen (mime_preview), (void *) pages[i].mime);\n      probe_log_simple (buf);\n    }\n    else\n    {\n      probe_log_simple (\"mime is NULL for selected page\");\n    }\n\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n\n    snprintf (buf, sizeof (buf), \"handler returned: %d for url=%s (page index=%u)\", (int) ret, url ? url : \"(NULL)\", i);\n    probe_log_simple (buf);\n\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  probe_log_simple (\"unsupported HTTP method, returning METHOD_ERROR response\");\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}"
}