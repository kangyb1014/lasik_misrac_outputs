{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nMETHOD_ERROR is (or expands to) a non-const string (e.g. a char[] or char * pointing to a string literal) and is explicitly cast to (const void *) when passed to MHD_create_response_from_buffer_static. MISRA C 2023 Rule 8.13 expects pointers to point to const-qualified types when modification is not required; here the underlying object is not declared const and the code relies on a cast to add const qualification rather than declaring METHOD_ERROR as const (e.g. const char[] or const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/547.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <time.h>\n#include <stdarg.h>\n\n/* Probe logging function: append human-readable traces to /tmp/logs/547.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/547.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputs (\"\\n\", f);\n  fflush (f);\n  fclose (f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  probe_log (\"ENTER create_response: url='%s' method='%s' version='%s' upload_data_size=%zu\",\n             url ? url : \"(null)\", method ? method : \"(null)\",\n             version ? version : \"(null)\", upload_data_size ? *upload_data_size : 0);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    probe_log (\"request is NULL: allocating Request for url='%s' method='%s'\", url ? url : \"(null)\", method ? method : \"(null)\");\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      probe_log (\"calloc error: %s\", strerror (errno));\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      probe_log (\"method POST: setting up post processor for url='%s'\", url ? url : \"(null)\");\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        probe_log (\"Failed to setup post processor for '%s'\", url ? url : \"(null)\");\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    probe_log (\"initial request created and stored in req_cls\");\n    return MHD_YES;\n  }\n  probe_log (\"existing request found in req_cls\");\n\n  if (NULL == request->session)\n  {\n    probe_log (\"request->session is NULL: obtaining session for connection\");\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      probe_log (\"Failed to setup session for '%s'\", url ? url : \"(null)\");\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  probe_log (\"session start set: start=%ld\", (long) session->start);\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    probe_log (\"processing POST data: upload_data_size=%zu\", upload_data_size ? *upload_data_size : 0);\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      probe_log (\"POST upload_data remaining: %zu -> reset to 0 and return MHD_YES\", *upload_data_size);\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    probe_log (\"done with POST data: destroying post processor and converting to GET\");\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n    {\n      url = request->post_url;\n      probe_log (\"using post_url='%s'\", url ? url : \"(null)\");\n    }\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    probe_log (\"serving GET/HEAD for url='%s'\", url ? url : \"(null)\");\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    probe_log (\"selected page index=%u url='%s' handler=%p\", i, pages[i].url ? pages[i].url : \"(null)\", (void *) pages[i].handler);\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    probe_log (\"page handler returned %d for url='%s'\", (int) ret, url ? url : \"(null)\");\n    return ret;\n  }\n  /* unsupported HTTP method */\n\n  /* Log detailed evidence for the violation scenario: METHOD_ERROR is passed\n     to MHD_create_response_from_buffer_static with an explicit cast to const void *.\n     We record the pointer value and the length used. */\n  probe_log (\"unsupported method '%s' for url='%s' -> preparing METHOD_ERROR response\", method ? method : \"(null)\", url ? url : \"(null)\");\n  probe_log (\"METHOD_ERROR pointer=%p strlen=%zu casting to (const void *) and passing to MHD_create_response_from_buffer_static\",\n             (const void *) METHOD_ERROR, strlen (METHOD_ERROR));\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  probe_log (\"MHD_create_response_from_buffer_static returned response=%p\", (void *) response);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  probe_log (\"MHD_queue_response returned %d; destroying response %p\", (int) ret, (void *) response);\n  MHD_destroy_response (response);\n  probe_log (\"exit create_response returning %d\", (int) ret);\n  return ret;\n}\n"
}