{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'url' (declared as const char *url) is assigned to with 'url = request->post_url;'. This modifies the pointer parameter itself (not the pointee), which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified create_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of create_response as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of create_response:\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified create_response code.\n",
  "test_code": "static void\nprobe_log(const char *event,\n          const char *url,\n          const char *method,\n          const struct Request *request,\n          size_t upload_data_size)\n{\n  FILE *f = fopen(\"/tmp/logs/549.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"EVENT: %s\\n\", event);\n  fprintf(f, \"  url ptr: %p\\n\", (const void *) url);\n  if (url != NULL)\n    fprintf(f, \"  url str: '%s'\\n\", url);\n  fprintf(f, \"  method ptr: %p\\n\", (const void *) method);\n  if (method != NULL)\n    fprintf(f, \"  method str: '%s'\\n\", method);\n  fprintf(f, \"  upload_data_size: %zu\\n\", upload_data_size);\n  fprintf(f, \"  request ptr: %p\\n\", (const void *) request);\n  if (request != NULL)\n  {\n    fprintf(f, \"    request->pp ptr: %p\\n\", (const void *) request->pp);\n    fprintf(f, \"    request->post_url ptr: %p\\n\", (const void *) request->post_url);\n    if (request->post_url != NULL)\n      fprintf(f, \"    request->post_url str: '%s'\\n\", request->post_url);\n    fprintf(f, \"    request->session ptr: %p\\n\", (const void *) request->session);\n  }\n  fprintf(f, \"---\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* Log entry state */\n  probe_log(\"entry\", url, method, *req_cls, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    probe_log(\"request_null_before_alloc\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      probe_log(\"calloc_failed\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n      return MHD_NO;\n    }\n    *req_cls = request;\n    probe_log(\"request_allocated\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        probe_log(\"post_processor_failed\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n        return MHD_NO; /* internal error */\n      }\n    }\n    probe_log(\"request_init_complete\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n    return MHD_YES;\n  }\n  probe_log(\"have_request\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      probe_log(\"session_setup_failed\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  probe_log(\"session_ready\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    probe_log(\"enter_post_processing\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      probe_log(\"post_more_data_needed\", url, method, request, *upload_data_size);\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n\n    /* Log state immediately before potential url pointer reassignment */\n    probe_log(\"before_post_url_assignment\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n    if (NULL != request->post_url)\n    {\n      /* Capture old URL pointer for logging evidence that the pointer value changes */\n      const char *old_url_ptr = url;\n      probe_log(\"post_url_present_before_assign\", old_url_ptr, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n\n      url = request->post_url;\n\n      /* Log after assignment to capture change of the parameter pointer value */\n      probe_log(\"post_url_assigned\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n    }\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    probe_log(\"page_found_before_handler\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    probe_log(\"returning_from_handler\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  probe_log(\"unsupported_method_response\", url, method, request, (upload_data_size != NULL) ? *upload_data_size : 0U);\n  return ret;\n}\n"
}