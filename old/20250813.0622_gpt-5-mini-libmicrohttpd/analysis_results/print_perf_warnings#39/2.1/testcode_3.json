{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nGiven MHD_VERSION >= 0x00097701 (true for the provided definition 0x01000100) and when the project is built without _DEBUG defined, MHD_is_feature_supported(MHD_FEATURE_DEBUG_BUILD) unconditionally returns MHD_NO. The test if (MHD_NO != MHD_is_feature_supported(...)) is therefore always false and the fprintf/newline statements inside the if are unreachable in that build configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified print_perf_warnings code that contains useful probe functions that print useful logs to a file \"/tmp/logs/313.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of print_perf_warnings as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of print_perf_warnings:\n```c\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (newline_needed)\n    printf (\"\\n\");\n}\n```\n</target_code>\nPlease provide the modified print_perf_warnings code.\n",
  "test_code": "static void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n  FILE *log = fopen(\"/tmp/logs/313.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"print_perf_warnings: enter\\n\");\n#if defined(_DEBUG)\n    fprintf(log, \"compile-time: _DEBUG defined\\n\");\n#else\n    fprintf(log, \"compile-time: _DEBUG NOT defined\\n\");\n#endif\n#if defined(__GNUC__)\n    fprintf(log, \"compile-time: __GNUC__ defined\\n\");\n#else\n    fprintf(log, \"compile-time: __GNUC__ NOT defined\\n\");\n#endif\n#if defined(__OPTIMIZE__)\n    fprintf(log, \"compile-time: __OPTIMIZE__ defined\\n\");\n#else\n    fprintf(log, \"compile-time: __OPTIMIZE__ NOT defined\\n\");\n#endif\n#if defined(__OPTIMIZE_SIZE__)\n    fprintf(log, \"compile-time: __OPTIMIZE_SIZE__ defined\\n\");\n#else\n    fprintf(log, \"compile-time: __OPTIMIZE_SIZE__ NOT defined\\n\");\n#endif\n#if defined(MHD_VERSION)\n    fprintf(log, \"compile-time: MHD_VERSION = 0x%08X\\n\", (unsigned) MHD_VERSION);\n#else\n    fprintf(log, \"compile-time: MHD_VERSION NOT defined\\n\");\n#endif\n    fprintf(log, \"initial newline_needed = %d\\n\", newline_needed);\n    fflush(log);\n  }\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  if (log)\n    fprintf(log, \"emitted warning: Running with debug asserts enabled\\n\");\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n  if (log)\n    fprintf(log, \"emitted warning: compiled without enabled compiler optimisations\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n  if (log)\n    fprintf(log, \"emitted warning: compiled with size optimisations\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  {\n    /* Probe the feature API result once so we can log it without changing\n       the control-flow semantics of the original code. */\n    int mhd_feature_ret = (int) MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD);\n    if (log)\n      fprintf(log, \"MHD_is_feature_supported(MHD_FEATURE_DEBUG_BUILD) -> %d\\n\", mhd_feature_ret);\n    if (MHD_NO != mhd_feature_ret)\n    {\n      fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n               \"debug asserts enabled, the performance is suboptimal.\\n\");\n      if (log)\n        fprintf(log, \"emitted warning: libmicrohttpd debug asserts enabled\\n\");\n      newline_needed |=  ! 0;\n      if (log)\n        fprintf(log, \"newline_needed updated to %d (after libmicrohttpd branch)\\n\", newline_needed);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"libmicrohttpd debug-build feature NOT supported (branch not taken)\\n\");\n    }\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (log)\n  {\n    fprintf(log, \"final newline_needed = %d\\n\", newline_needed);\n    fprintf(log, \"print_perf_warnings: exit\\n\");\n    fclose(log);\n  }\n  if (newline_needed)\n    printf (\"\\n\");\n}\n"
}