{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe use of an unconditional 'if (1)' introduces an executed control operation (the constant conditional test and associated branch) that has no effect on program behaviour \u2014 removing the surrounding 'if (1) { ... }' (i.e. executing the block unconditionally) does not change the program. Therefore the constant conditional is dead code under MISRA C 2023 Rule 2.2. Note: the statements inside the block are not dead, only the redundant 'if (1)' check is.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified print_perf_warnings code that contains useful probe functions that print useful logs to a file \"/tmp/logs/314.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of print_perf_warnings as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of print_perf_warnings:\n```c\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  newline_needed |=  ! 0;\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    newline_needed |=  ! 0;\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  if (newline_needed)\n    printf (\"\\n\");\n}\n```\n</target_code>\nPlease provide the modified print_perf_warnings code.\n",
  "test_code": "static void probe_log(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/314.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nstatic void probe_log_state(const char *name, int value)\n{\n  FILE *f = fopen(\"/tmp/logs/314.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s=%d\\n\", name, value);\n    fclose(f);\n  }\n}\n\nstatic void\nprint_perf_warnings (void)\n{\n  int newline_needed = 0;\n  probe_log(\"enter print_perf_warnings\");\n  probe_log_state(\"newline_needed_init\", newline_needed);\n#if defined (_DEBUG)\n  fprintf (stderr, \"WARNING: Running with debug asserts enabled, \"\n           \"the performance is suboptimal.\\n\");\n  probe_log(\"_DEBUG: printed debug-asserts warning\");\n  newline_needed |=  ! 0;\n  probe_log_state(\"newline_needed_after_DEBUG\", newline_needed);\n#endif /* _DEBUG */\n#if defined(__GNUC__) && ! defined (__OPTIMIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled without enabled compiler \"\n           \"optimisations, the performance is suboptimal.\\n\");\n  probe_log(\"GNUC && !__OPTIMIZE__: printed no-optimisations warning\");\n  newline_needed |=  ! 0;\n  probe_log_state(\"newline_needed_after_NO_OPTIMIZE\", newline_needed);\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if defined(__GNUC__) && defined (__OPTIMIZE_SIZE__)\n  fprintf (stderr, \"WARNING: The tools is compiled with size-optimisations, \"\n           \"the performance is suboptimal.\\n\");\n  probe_log(\"GNUC && __OPTIMIZE_SIZE__: printed size-optimisations warning\");\n#endif /* __GNUC__ && ! __OPTIMIZE__ */\n#if MHD_VERSION >= 0x00097701\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD))\n  {\n    int feature_supported = (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_DEBUG_BUILD));\n    probe_log_state(\"MHD_FEATURE_DEBUG_BUILD_supported\", feature_supported);\n    fprintf (stderr, \"WARNING: The libmicrohttpd is compiled with \"\n             \"debug asserts enabled, the performance is suboptimal.\\n\");\n    probe_log(\"MHD: printed libmicrohttpd debug-asserts warning\");\n    newline_needed |=  ! 0;\n    probe_log_state(\"newline_needed_after_MHD_check\", newline_needed);\n  }\n#endif /* MHD_VERSION >= 0x00097701 */\n  probe_log_state(\"newline_needed_before_final_if\", newline_needed);\n  if (newline_needed)\n  {\n    probe_log(\"final if taken: newline_needed is non-zero (effectively if(1)?)\");\n    printf (\"\\n\");\n    probe_log(\"printed final newline\");\n  }\n  else\n  {\n    probe_log(\"final if not taken: newline_needed is zero\");\n  }\n  probe_log(\"exit print_perf_warnings\");\n}\n"
}