{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the non-POSIX branch of MHD_create_named_thread_ the function ends with the statement `return ! 0;`. The logical negation operator is applied to the constant 0 producing the constant 1. The `!` operation is executed but is redundant: removing the operation (e.g. replacing `return ! 0;` with `return 1;`) does not change program behaviour. This constitutes an executed but unnecessary operation and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_named_thread_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_create_named_thread_ as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_create_named_thread_:\n```c\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n    return 0;\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    return 0;\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n```\n</target_code>\nPlease provide the modified MHD_create_named_thread_ code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Lightweight logging helper that appends messages to /tmp/logs/250.txt.\n * It preserves errno so logging does not change observed error state.\n */\nstatic void\nmhd_log_message (const char *msg)\n{\n  int saved_errno = errno;\n  FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n  if (NULL != f)\n  {\n    (void) fprintf (f, \"%s\\n\", msg);\n    (void) fclose (f);\n  }\n  errno = saved_errno;\n}\n\nstatic void\nmhd_log_fmt (const char *fmt, const void *p1, size_t s1, const void *p2)\n{\n  int saved_errno = errno;\n  FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n  if (NULL != f)\n  {\n    /* produce a compact single-line record */\n    (void) fprintf (f, fmt, p1, s1, p2);\n    (void) fprintf (f, \"\\n\");\n    (void) fclose (f);\n  }\n  errno = saved_errno;\n}\n\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  /* Log entry and key parameters for this path */\n  {\n    char buf[256];\n    (void) snprintf (buf, sizeof (buf),\n                    \"MHD_create_named_thread_: POSIX branch entry: handle_id=%p, thread_name=%p, stack_size=%zu, start_routine=%p, arg=%p\",\n                    (void *) handle_id, (size_t) stack_size, (void *) start_routine, arg);\n    mhd_log_message (buf);\n  }\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n    {\n      char buf[256];\n      (void) snprintf (buf, sizeof (buf),\n                      \"MHD_create_named_thread_: POSIX branch error: res=%d, errno set to %d\",\n                      res, errno);\n      mhd_log_message (buf);\n    }\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  /* Log final return value computation for POSIX branch */\n  {\n    int ret = ! res;\n    char buf[128];\n    (void) snprintf (buf, sizeof (buf),\n                    \"MHD_create_named_thread_: POSIX branch returning !res -> !%d = %d\",\n                    res, ret);\n    mhd_log_message (buf);\n  }\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  /* Log entry into non-POSIX branch with parameters */\n  {\n    char buf[256];\n    (void) snprintf (buf, sizeof (buf),\n                    \"MHD_create_named_thread_: non-POSIX branch entry: handle_id=%p, thread_name=%p, stack_size=%zu, start_routine=%p, arg=%p\",\n                    (void *) handle_id, (void *) thread_name, stack_size, (void *) start_routine, arg);\n    mhd_log_message (buf);\n  }\n\n  if (NULL == thread_name)\n  {\n    errno = EINVAL;\n    mhd_log_message (\"MHD_create_named_thread_: non-POSIX branch - invalid thread_name (NULL), returning 0 and errno=EINVAL\");\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n  {\n    mhd_log_message (\"MHD_create_named_thread_: non-POSIX branch - malloc failed, returning 0\");\n    return 0;\n  }\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Log after param initialization */\n  {\n    char buf[256];\n    (void) snprintf (buf, sizeof (buf),\n                    \"MHD_create_named_thread_: non-POSIX branch - param initialized: param=%p, name=%p, start_routine=%p, arg=%p\",\n                    (void *) param, (void *) param->name, (void *) param->start_routine, param->arg);\n    mhd_log_message (buf);\n  }\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    {\n      char buf[256];\n      (void) snprintf (buf, sizeof (buf),\n                      \"MHD_create_named_thread_: non-POSIX branch - MHD_create_thread_ failed, errno preserved as %d, returning 0\",\n                      errno);\n      mhd_log_message (buf);\n    }\n    return 0;\n  }\n\n  /* This is the statement pointed out in the violation scenario: return ! 0; */\n  {\n    int computed = ! 0; /* yields 1 */\n    char buf[128];\n    (void) snprintf (buf, sizeof (buf),\n                    \"MHD_create_named_thread_: non-POSIX branch - about to execute \"\n                    \"return ! 0; computed value = %d. (Logging preserved errno=%d)\",\n                    computed, errno);\n    mhd_log_message (buf);\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n"
}