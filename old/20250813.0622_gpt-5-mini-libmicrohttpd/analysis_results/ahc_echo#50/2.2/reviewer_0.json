{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) cls;' is an executed no-op whose removal would not change program behaviour (it only suppresses an \"unused parameter\" warning). Such a statement therefore meets the definition of dead code in Rule 2.2. The same applies to the other '(void) ...;' lines (version, upload_data, upload_data_size) in ahc_echo \u2014 they are executed operations with no effect and thus violate MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_raw(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s\\n\", (long)t, msg);\n  fclose(f);\n}\nstatic void probe_log_param_ptr(const char *label, const void *ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s: ptr=%p\\n\", (long)t, label, ptr);\n  fclose(f);\n}\nstatic void probe_log_param_str(const char *label, const char *s)\n{\n  FILE *f = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] %s: %s\\n\", (long)t, label, (s != NULL) ? s : \"(null)\");\n  fclose(f);\n}\nstatic void probe_ahc_echo_entry(void *cls,\n                                 struct MHD_Connection *connection,\n                                 const char *url,\n                                 const char *method,\n                                 const char *version,\n                                 const char *upload_data,\n                                 size_t *upload_data_size,\n                                 void **req_cls)\n{\n  probe_log_raw(\"ENTER ahc_echo\");\n  probe_log_param_ptr(\"cls\", cls);\n  probe_log_param_ptr(\"connection\", (const void *) connection);\n  probe_log_param_str(\"method\", method);\n  probe_log_param_str(\"url\", url);\n  probe_log_param_ptr(\"version (ptr)\", version);\n  probe_log_param_ptr(\"upload_data (ptr)\", upload_data);\n  probe_log_param_ptr(\"upload_data_size (ptr)\", upload_data_size);\n  probe_log_param_ptr(\"req_cls (ptr)\", req_cls);\n}\nstatic void probe_ahc_echo_noop_executed(const char *param_name, const void *ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (NULL == f)\n    return;\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] executed no-op (void) for parameter '%s' (ptr=%p)\\n\",\n          (long)t, param_name, ptr);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n\n  /* Log entry and parameter state before performing the explicit no-op casts. */\n  probe_ahc_echo_entry(cls, connection, url, method, version,\n                       upload_data, upload_data_size, req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  /* Probe immediately after the no-op to demonstrate it executed. */\n  probe_ahc_echo_noop_executed(\"cls\", cls);\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  probe_ahc_echo_noop_executed(\"version\", (const void *) version);\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  probe_ahc_echo_noop_executed(\"upload_data\", (const void *) upload_data);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  probe_ahc_echo_noop_executed(\"upload_data_size\", (const void *) upload_data_size);\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    probe_log_raw(\"first call: set *req_cls = &aptr and returning MHD_YES\");\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  probe_log_raw(\"serving request (not first call)\");\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n\n  probe_log_raw(\"EXIT ahc_echo\");\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Agent A has misapplied Rule 2.2. The (void)param; idiom appears to be a no\u2011op at runtime, but it is the standard, intentional way to document and suppress \"unused parameter\" diagnostics. MISRA\u2019s intent for Rule 2.2 is to forbid truly dead code (redundant computations, unreachable/never\u2011used routines, etc.) that can be removed without changing the program\u2019s observable behaviour; it is not intended to forbid the documented idiom for marking intentionally unused parameters. In practice, (void)parameter; is treated as an explicit indication of intentional non\u2011use and as a compliance technique (or you can use a dedicated macro or compiler attribute). If a static checker reports a 2.2 violation for these casts, that is a false positive (or a too\u2011strict interpretation) \u2014 the correct action is to suppress/annotate the warning or use an accepted method for unused parameters, not to claim the code is a Rule 2.2 violation."
}