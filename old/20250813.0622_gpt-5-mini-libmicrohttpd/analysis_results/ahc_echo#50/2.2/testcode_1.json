{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement '(void) upload_data;' is a no-op that is executed but has no effect; removing it does not change program behaviour. Therefore it constitutes dead code (used only to silence an unused-parameter warning).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n    fd = -1;                       /* Do not allow usage of parent directories. */\n  else\n    fd = open (url + 1, O_RDONLY);\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n    }\n  }\n  if (-1 == fd)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* Probe helper: append a log line describing control/state. */\nstatic void\nprobe_log(const char *event,\n          const char *method,\n          const char *url,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void *cls,\n          void **req_cls)\n{\n  FILE *f;\n  time_t t = time(NULL);\n  char timestr[32] = \"(unknown)\";\n  if (t != (time_t)-1)\n  {\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf))\n      strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n  }\n  /* Ensure log directory exists; ignore errors other than critical ones. */\n  (void) mkdir(\"/tmp/logs\", 0777); /* may fail with EEXIST, ignore */\n  f = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (!f)\n    return;\n  /* Safely capture req_cls pointed value without dereferencing a NULL pointer. */\n  void *req_cls_val = NULL;\n  if (req_cls)\n    req_cls_val = *req_cls;\n\n  fprintf(f, \"%s | %s | method=%s url=%s upload_data_ptr=%p upload_data_size_ptr=%p upload_data_size_val=%zu cls=%p req_cls_ptr=%p req_cls_val=%p\\n\",\n          timestr,\n          event ? event : \"event\",\n          method ? method : \"(null)\",\n          url ? url : \"(null)\",\n          (const void *) upload_data,\n          (const void *) upload_data_size,\n          (size_t)(upload_data_size ? *upload_data_size : 0),\n          cls,\n          (void *) req_cls,\n          req_cls_val);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log that we've reached the point immediately after the (void) casts.\n     This is intended to provide evidence that the '(void) upload_data;' no-op\n     is executed in normal control flow. */\n  probe_log(\"after_unused_casts\", method, url, upload_data, upload_data_size, cls, req_cls);\n\n  if ( (0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n       (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    probe_log(\"unexpected_method\", method, url, upload_data, upload_data_size, cls, req_cls);\n    return MHD_NO;              /* unexpected method */\n  }\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    probe_log(\"first_call_set_req_cls\", method, url, upload_data, upload_data_size, cls, req_cls);\n    return MHD_YES;\n  }\n  *req_cls = NULL;                 /* reset when done */\n  probe_log(\"serving_request\", method, url, upload_data, upload_data_size, cls, req_cls);\n  /* WARNING: direct usage of url as filename is for example only!\n   * NEVER pass received data directly as parameter to file manipulation\n   * functions. Always check validity of data before using.\n   */\n  if (NULL != strstr (url, \"../\")) /* Very simplified check! */\n  {\n    fd = -1;                       /* Do not allow usage of parent directories. */\n    probe_log(\"parent_dir_detected\", method, url, upload_data, upload_data_size, cls, req_cls);\n  }\n  else\n  {\n    fd = open (url + 1, O_RDONLY);\n    probe_log(\"open_attempt\", method, url, upload_data, upload_data_size, cls, req_cls);\n  }\n  if (-1 != fd)\n  {\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      if (0 != close (fd))\n        abort ();\n      fd = -1;\n      probe_log(\"not_regular_file\", method, url, upload_data, upload_data_size, cls, req_cls);\n    }\n  }\n  if (-1 == fd)\n  {\n    probe_log(\"respond_not_found\", method, url, upload_data, upload_data_size, cls, req_cls);\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_fd64 ((uint64_t) buf.st_size, fd);\n    if (NULL == response)\n    {\n      if (0 != close (fd))\n        abort ();\n      probe_log(\"response_alloc_fail\", method, url, upload_data, upload_data_size, cls, req_cls);\n      return MHD_NO;\n    }\n    probe_log(\"respond_ok\", method, url, upload_data, upload_data_size, cls, req_cls);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  probe_log(\"returning\", method, url, upload_data, upload_data_size, cls, req_cls);\n  return ret;\n}\n"
}