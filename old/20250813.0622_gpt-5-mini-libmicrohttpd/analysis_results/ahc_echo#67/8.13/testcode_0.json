{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code stores the address of a non-const object (static int aptr) into a void* via *req_cls = &aptr;. aptr is never modified, so the pointed-to object could/should be const-qualified; therefore the pointer is not const-qualified as required by Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging function: append messages to /tmp/logs/539.txt */\nstatic void\nahc_echo_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/539.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and relevant pointers/state for reproducing Rule 8.13 scenario */\n  {\n    void *req_cls_val = NULL;\n    if (req_cls != NULL)\n      req_cls_val = *req_cls;\n\n    ahc_echo_log (\"ENTER ahc_echo: cls=%p, connection=%p, url=%s, method=%s, req_cls_ptr=%p, req_cls_val=%p, &aptr=%p\",\n                  cls, connection, (url ? url : \"(null)\"), (method ? method : \"(null)\"), (void *) req_cls, req_cls_val,\n                  (void *) &aptr);\n  }\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_log (\"UNEXPECTED METHOD: %s -> returning MHD_NO\", method ? method : \"(null)\");\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Log result of pointer comparison &aptr vs *req_cls before assignment */\n  {\n    void *req_cls_val = NULL;\n    if (req_cls != NULL)\n      req_cls_val = *req_cls;\n\n    ahc_echo_log (\"COMPARE: &aptr=%p, *req_cls=%p, result=%s\",\n                  (void *) &aptr, req_cls_val,\n                  ((req_cls_val != (void *) &aptr) ? \"not equal\" : \"equal\"));\n  }\n\n  if (&aptr != *req_cls)\n  {\n    ahc_echo_log (\"ASSIGN: *req_cls will be set to &aptr (%p)\", (void *) &aptr);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_echo_log (\"POST request: queuing BUSYPAGE response (service unavailable)\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      ahc_echo_log (\"RETURN after POST busy: ret=%d\", (int) ret);\n      return ret;\n    }\n  }\n\n  ahc_echo_log (\"RESET: setting *req_cls = NULL\");\n  *req_cls = NULL;                  /* reset when done */\n\n  ahc_echo_log (\"Preparing OK response: param=%p, response_page=%p\",\n                (void *) param,\n                (param ? (void *) param->response_page : (void *) NULL));\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n\n  ahc_echo_log (\"RETURN OK: ret=%d\", (int) ret);\n  return ret;\n}\n"
}