{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter is declared as void **req_cls but the function never modifies the object pointed to by the void* stored in *req_cls \u2014 it only stores pointer values (*req_cls = &aptr; *req_cls = NULL). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible, so the declaration should be const void **req_cls (or otherwise const-qualify the pointed-to type) if the API allows it. As written (void **req_cls) the code violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry state: pointers and method */\n  if (req_cls == NULL)\n  {\n    ahc_probe_log(\"ahc_echo entry: cls=%p connection=%p url=%s method=%s req_cls=NULL\",\n                  cls, connection, (url != NULL) ? url : \"(null)\", (method != NULL) ? method : \"(null)\");\n  }\n  else\n  {\n    /* *req_cls may be NULL or an address; print it */\n    ahc_probe_log(\"ahc_echo entry: cls=%p connection=%p url=%s method=%s req_cls_ptr=%p req_cls_pointed=%p\",\n                  cls, connection,\n                  (url != NULL) ? url : \"(null)\", (method != NULL) ? method : \"(null)\",\n                  (void *) req_cls, (void *) (*req_cls));\n  }\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_probe_log(\"ahc_echo: unexpected HTTP method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Check whether req_cls points to our static token aptr */\n  if (req_cls == NULL)\n  {\n    ahc_probe_log(\"ahc_echo: req_cls is NULL, cannot compare or assign. Proceeding without modifying req_cls.\");\n  }\n  else if (&aptr != *req_cls)\n  {\n    /* Log the fact we're about to store the address of aptr into *req_cls */\n    ahc_probe_log(\"ahc_echo: &aptr=%p != *req_cls=%p -> assigning *req_cls = &aptr\",\n                  (void *) &aptr, (void *) (*req_cls));\n\n    *req_cls = &aptr;\n\n    ahc_probe_log(\"ahc_echo: after assignment *req_cls=%p (points to &aptr=%p). Note: the object pointed-to by *req_cls is not modified, only the pointer value is stored.\",\n                  (void *) (*req_cls), (void *) &aptr);\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_probe_log(\"ahc_echo: method is POST, sending BUSYPAGE (service unavailable) and returning\");\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_probe_log(\"ahc_echo: queued response MHD_HTTP_SERVICE_UNAVAILABLE, ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n  else\n  {\n    ahc_probe_log(\"ahc_echo: &aptr == *req_cls (both %p) -> no assignment done\", (void *) &aptr);\n  }\n\n  if (req_cls != NULL)\n  {\n    ahc_probe_log(\"ahc_echo: resetting *req_cls from %p to NULL (operation does not modify the pointed-to object)\", (void *) (*req_cls));\n    *req_cls = NULL;                  /* reset when done */\n  }\n  else\n  {\n    ahc_probe_log(\"ahc_echo: req_cls is NULL -> cannot reset *req_cls\");\n  }\n\n  ahc_probe_log(\"ahc_echo: preparing response page at param=%p response_page=%p\", param, (param != NULL) ? (void *) param->response_page : (void *) 0);\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_probe_log(\"ahc_echo: queued response MHD_HTTP_OK, ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  ahc_probe_log(\"ahc_echo: exit ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 R8.13 says a pointer should point to a const-qualified type whenever possible \u2014 i.e. if the function does not need to modify the object that the pointer directly points to, that pointed-to type should be const. In this function the parameter req_cls has type void **, so it points to an object of type void*. The function explicitly assigns to *req_cls (\"*req_cls = &aptr;\" and \"*req_cls = NULL;\"), therefore it modifies the object that req_cls points to. Because the function must write into *req_cls, the pointed-to type cannot be const-qualified; const void* * (or similar) would prevent those assignments. The agent confused the object stored in *req_cls (a pointer value) with the object that that pointer value might later point to; the function does not need the latter to be non-const, but MISRA R8.13 concerns the type pointed-to by req_cls itself. Thus no violation of R8.13 occurs here."
}