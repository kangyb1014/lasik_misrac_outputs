{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression statement `(void) version;` is an executed no-op whose removal would not affect program behaviour (it only suppresses an \"unused parameter\" warning). According to MISRA C 2023 Rule 2.2, that constitutes dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nahc_echo_probe_log (const char *label,\n                    const char *method,\n                    const char *url,\n                    const char *version,\n                    void **req_cls,\n                    const void *aptr,\n                    const struct handler_param *param,\n                    int code_hint)\n{\n  FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf (f, \"[ahc_echo] %s: method=%s, url=%p, version=%p, req_cls=%p, *req_cls=%p, aptr=%p, param=%p, hint=%d\\n\",\n           label,\n           method ? method : \"(null)\",\n           (const void *) url,\n           (const void *) version,\n           (void *) req_cls,\n           (void *) (req_cls ? *req_cls : NULL),\n           aptr,\n           (const void *) param,\n           code_hint);\n\n  if (url)\n    fprintf (f, \"[ahc_echo]   url_str='%.128s'\\n\", url);\n  if (version)\n    fprintf (f, \"[ahc_echo]   version_str='%.64s'\\n\", version);\n  if (param && param->response_page)\n    fprintf (f, \"[ahc_echo]   response_page_prefix='%.128s'\\n\", param->response_page);\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry and initial state */\n  ahc_echo_probe_log (\"entry\", method, url, version, req_cls, &aptr, param, 0);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  /* Probe the executed no-op used to silence \"unused parameter\" warnings */\n  ahc_echo_probe_log (\"suppress_cls_before\", method, url, version, req_cls, &aptr, param, 1);\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_url\", method, url, version, req_cls, &aptr, param, 2);\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  /* This (void) version; is the executed no-op flagged as dead code in the report. */\n  ahc_echo_probe_log (\"suppress_version (executed no-op)\", method, url, version, req_cls, &aptr, param, 3);\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_upload_data\", method, url, version, req_cls, &aptr, param, 4);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_upload_data_size\", method, url, version, req_cls, &aptr, param, 5);\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_probe_log (\"unexpected_method_return\", method, url, version, req_cls, &aptr, param, (int) MHD_NO);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  ahc_echo_probe_log (\"method_ok\", method, url, version, req_cls, &aptr, param, 0);\n\n  if (&aptr != *req_cls)\n  {\n    ahc_echo_probe_log (\"req_cls_mismatch_before_set\", method, url, version, req_cls, &aptr, param, 0);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_echo_probe_log (\"post_busy_response\", method, url, version, req_cls, &aptr, param, (int) MHD_HTTP_SERVICE_UNAVAILABLE);\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_echo_probe_log (\"post_busy_queued\", method, url, version, req_cls, &aptr, param, (int) ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  ahc_echo_probe_log (\"reset_req_cls\", method, url, version, req_cls, &aptr, param, 0);\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_echo_probe_log (\"final_response_queued\", method, url, version, req_cls, &aptr, param, (int) ret);\n  MHD_destroy_response (response);\n  ahc_echo_probe_log (\"exit\", method, url, version, req_cls, &aptr, param, (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The (void)version; line is an idiomatic no-op used solely to indicate an intentionally unused parameter and to suppress compiler warnings. While the literal text of Rule 2.2 defines dead code as an executed operation whose removal would not affect program behaviour, treating every such deliberate unused-parameter suppression as a Rule 2.2 violation would be overly literal and impractical. In practice this cast-to-void does not change functional behaviour, but it documents intent and prevents spurious diagnostics; such constructs are the established technique for unused parameters and are normally handled by coding conventions or documented deviations rather than classed as a defect under Rule 2.2. The probe code showing no log output also indicates the function may not have been executed in the test, so the supplied runtime evidence does not prove the statement is unreachable or otherwise problematic. Therefore the agent A report that this specific (void)version; constitutes a MISRA C 2023 Rule 2.2 violation is not correct \u2014 it is not an actionable Rule 2.2 violation in this context."
}