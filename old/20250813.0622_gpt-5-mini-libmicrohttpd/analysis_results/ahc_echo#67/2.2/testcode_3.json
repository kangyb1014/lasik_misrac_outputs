{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) upload_data;' is an executed no\u2011op whose removal does not affect program behaviour when 'upload_data' is a non-volatile parameter. It only serves to silence unused\u2011parameter warnings, so it constitutes dead code under MISRA C 2023 Rule 2.2. (If 'upload_data' were volatile or its evaluation had side effects, the cast would not be dead \u2014 but in the typical non\u2011volatile parameter case it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/538.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Probe: log entry state before the (void) casts so we can show that\n     casting parameters to void does not change their value (the reported\n     MISRA dead-code scenario). Logs go to /tmp/logs/538.txt. */\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: ENTRY\\n\");\n      fprintf(f, \"  cls=%p, param=%p\\n\", cls, (void *) param);\n      fprintf(f, \"  method=%s, url=%p, version=%p\\n\",\n              (method != NULL) ? method : \"(null)\", (void *) url, (void *) version);\n      fprintf(f, \"  upload_data=%p, upload_data_size=%p\",\n              (const void *) upload_data, (void *) upload_data_size);\n      if (upload_data_size != NULL)\n        fprintf(f, \", *upload_data_size=%zu\\n\", *upload_data_size);\n      else\n        fprintf(f, \"\\n\");\n      fprintf(f, \"  req_cls=%p, *req_cls=%p\\n\",\n              (void *) req_cls,\n              (req_cls != NULL) ? *req_cls : NULL);\n      fclose(f);\n    }\n  }\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  /* We intentionally leave the original '(void) upload_data;' cast in place\n     (this is the reported dead/no-op). Log the state both before and after\n     to make it reproducible and visible in the logs. */\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: BEFORE (void) upload_data cast: upload_data=%p\\n\", (const void *) upload_data);\n      fclose(f);\n    }\n  }\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: AFTER  (void) upload_data cast: upload_data=%p\\n\", (const void *) upload_data);\n      fclose(f);\n    }\n  }\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Additional probes at key control points to show control flow and the\n     values that influence decisions. */\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: unexpected method '%s' -> returning MHD_NO\\n\", method);\n      fclose(f);\n    }\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: initializing per-connection state (set *req_cls = &aptr)\\n\");\n      fclose(f);\n    }\n\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      FILE *f2 = fopen(\"/tmp/logs/538.txt\", \"a\");\n      if (NULL != f2)\n      {\n        fprintf(f2, \"ahc_echo: POST request while busy -> serving BUSYPAGE and returning service unavailable\\n\");\n        fclose(f2);\n      }\n\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n\n      /* Log the return code for this path. */\n      {\n        FILE *f3 = fopen(\"/tmp/logs/538.txt\", \"a\");\n        if (NULL != f3)\n        {\n          fprintf(f3, \"ahc_echo: returned code (BUSY path) = %d\\n\", (int) ret);\n          fclose(f3);\n        }\n      }\n\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: sending normal response (param=%p, response_page=%p)\\n\",\n              (void *) param, (void *) (param != NULL ? param->response_page : NULL));\n      fclose(f);\n    }\n  }\n\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n\n  {\n    FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ahc_echo: returned code (OK path) = %d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}