{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression statement `(void) version;` is an executed no-op whose removal would not affect program behaviour (it only suppresses an \"unused parameter\" warning). According to MISRA C 2023 Rule 2.2, that constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/538.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logger for ahc_echo: appends execution traces to /tmp/logs/538.txt */\nstatic void\nahc_echo_probe_log (const char *label,\n                    const char *method,\n                    const char *url,\n                    const char *version,\n                    void **req_cls,\n                    const void *aptr,\n                    const struct handler_param *param,\n                    int code_hint)\n{\n  FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n  if (f == NULL)\n    return;\n\n  fprintf (f, \"[ahc_echo] %s: method=%s, url=%p, version=%p, req_cls=%p, *req_cls=%p, aptr=%p, param=%p, hint=%d\\n\",\n           label,\n           method ? method : \"(null)\",\n           (const void *) url,\n           (const void *) version,\n           (void *) req_cls,\n           (void *) (req_cls ? *req_cls : NULL),\n           aptr,\n           (const void *) param,\n           code_hint);\n\n  if (url)\n    fprintf (f, \"[ahc_echo]   url_str='%.128s'\\n\", url);\n  if (version)\n    fprintf (f, \"[ahc_echo]   version_str='%.64s'\\n\", version);\n  if (param && param->response_page)\n    fprintf (f, \"[ahc_echo]   response_page_prefix='%.128s'\\n\", param->response_page);\n\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry and initial state */\n  ahc_echo_probe_log (\"entry\", method, url, version, req_cls, &aptr, param, 0);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  /* Probe the executed no-op used to silence \"unused parameter\" warnings */\n  ahc_echo_probe_log (\"suppress_cls_before\", method, url, version, req_cls, &aptr, param, 1);\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_url\", method, url, version, req_cls, &aptr, param, 2);\n\n  (void) version;           /* Unused. Silent compiler warning. */\n  /* This (void) version; is the executed no-op flagged as dead code in the report. */\n  ahc_echo_probe_log (\"suppress_version (executed no-op)\", method, url, version, req_cls, &aptr, param, 3);\n\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_upload_data\", method, url, version, req_cls, &aptr, param, 4);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  ahc_echo_probe_log (\"suppress_upload_data_size\", method, url, version, req_cls, &aptr, param, 5);\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_probe_log (\"unexpected_method_return\", method, url, version, req_cls, &aptr, param, (int) MHD_NO);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  ahc_echo_probe_log (\"method_ok\", method, url, version, req_cls, &aptr, param, 0);\n\n  if (&aptr != *req_cls)\n  {\n    ahc_echo_probe_log (\"req_cls_mismatch_before_set\", method, url, version, req_cls, &aptr, param, 0);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_echo_probe_log (\"post_busy_response\", method, url, version, req_cls, &aptr, param, (int) MHD_HTTP_SERVICE_UNAVAILABLE);\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      ahc_echo_probe_log (\"post_busy_queued\", method, url, version, req_cls, &aptr, param, (int) ret);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  ahc_echo_probe_log (\"reset_req_cls\", method, url, version, req_cls, &aptr, param, 0);\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  ahc_echo_probe_log (\"final_response_queued\", method, url, version, req_cls, &aptr, param, (int) ret);\n  MHD_destroy_response (response);\n  ahc_echo_probe_log (\"exit\", method, url, version, req_cls, &aptr, param, (int) ret);\n  return ret;\n}\n"
}