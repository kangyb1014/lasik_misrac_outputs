{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation can occur if param->response_page is not a NUL-terminated C string. strlen(param->response_page) reads bytes until a NUL is found; if response_page points to a buffer filled without a terminating '\\0' (for example: char buf[100]; memset(buf,'A',100); param->response_page = buf;) strlen will read past the buffer bounds causing out\u2011of\u2011bounds access. Passing that computed length to MHD_create_response_from_buffer_static therefore can result in accesses beyond the object \u2014 a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/543.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *fp = fopen(\"/tmp/logs/543.txt\", \"a\");\n  if (NULL == fp)\n  {\n    return; /* best-effort logging; do not change program control flow */\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(fp, fmt, ap);\n  va_end(ap);\n  fputc('\\n', fp);\n  fflush(fp);\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  /* Log entry and raw parameter pointers/state for repro */\n  probe_log(\"ahc_echo: entered: cls=%p param=%p connection=%p url=%p method=%s version=%p upload_data=%p upload_data_size=%p req_cls=%p\",\n            cls, (void *) param, (void *) connection, (const void *) url,\n            (method != NULL) ? method : \"(null)\", (const void *) version,\n            (const void *) upload_data, (void *) upload_data_size, (void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    probe_log(\"ahc_echo: unexpected method '%s' -> returning MHD_NO\", method);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    probe_log(\"ahc_echo: new request context: aptr_addr=%p *req_cls=%p\", (void *)&aptr, (void *) *req_cls);\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      /* Log BUSYPAGE details (safe: BUSYPAGE is a static string in original code) */\n      probe_log(\"ahc_echo: handling POST -> BUSYPAGE pointer=%p strlen=%zu\",\n                (const void *) BUSYPAGE, strlen(BUSYPAGE));\n\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      probe_log(\"ahc_echo: queued BUSYPAGE response ret=%d\", (int) ret);\n      MHD_destroy_response (response);\n      probe_log(\"ahc_echo: destroyed BUSYPAGE response and returning\");\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n\n  /*\n   * Log information about param and its response_page. The call below uses\n   * strlen(param->response_page) exactly as in the original code. This log\n   * will help reproduce cases where response_page is not NUL-terminated\n   * and strlen reads beyond the object bounds (as reported by the other agent).\n   */\n  probe_log(\"ahc_echo: about to prepare response from param: param=%p response_page=%p\",\n            (void *) param, (param != NULL) ? (void *) param->response_page : (void *) NULL);\n\n  /* Compute length (same as original logic) and log it. */\n  {\n    size_t resp_len = strlen (param->response_page);\n    probe_log(\"ahc_echo: strlen(param->response_page)=%zu\", resp_len);\n\n    response =\n      MHD_create_response_from_buffer_static (resp_len,\n                                              (const void *)\n                                              param->response_page);\n  }\n\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  probe_log(\"ahc_echo: queued response ret=%d\", (int) ret);\n  MHD_destroy_response (response);\n  probe_log(\"ahc_echo: destroyed response and returning ret=%d\", (int) ret);\n  return ret;\n}\n"
}