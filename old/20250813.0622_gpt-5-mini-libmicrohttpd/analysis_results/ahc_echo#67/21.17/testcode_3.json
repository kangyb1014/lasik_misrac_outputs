{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strcmp(method, \"GET\") and strcmp(method, \"POST\") without validating 'method' may dereference a NULL pointer or read past the end of a non-terminated buffer. If 'method' is NULL (or not NUL-terminated), strcmp will access memory beyond the bounds of the object referenced by 'method', violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging function: writes control-flow and state info to /tmp/logs/543.txt.\n   This function avoids dereferencing pointers that may be invalid (e.g., method)\n   and therefore does not change the original control flow or behavior of ahc_echo.\n*/\nstatic void ahc_echo_log(const char *stage, const char *method, void **req_cls, void *cls)\n{\n  FILE *fp = fopen(\"/tmp/logs/543.txt\", \"a\");\n  if (!fp)\n    return; /* If logging isn't possible, don't interfere with original logic. */\n\n  fprintf(fp, \"ahc_echo LOG: %s\\n\", stage);\n  fprintf(fp, \"  method pointer = %p\\n\", (void *) method);\n  fprintf(fp, \"  method is %s\\n\", (method ? \"non-NULL\" : \"NULL\"));\n\n  /* Safely report the current value of *req_cls if req_cls itself is non-NULL. */\n  if (req_cls)\n    fprintf(fp, \"  *req_cls current value = %p\\n\", (void *) *req_cls);\n  else\n    fprintf(fp, \"  req_cls pointer is NULL\\n\");\n\n  fprintf(fp, \"  cls pointer = %p\\n\", cls);\n  fprintf(fp, \"----\\n\");\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log state right before the first use of strcmp. This logs the method pointer\n     but does NOT dereference the method string so it does not mask the original\n     behavior (e.g., crash when method is NULL). */\n  ahc_echo_log(\"before first strcmp\", method, req_cls, cls);\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n  {\n    ahc_echo_log(\"returning MHD_NO (unexpected method)\", method, req_cls, cls);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  if (&aptr != *req_cls)\n  {\n    /* Log that we are entering the branch where we set *req_cls. */\n    ahc_echo_log(\"entering init branch (will set *req_cls = &aptr)\", method, req_cls, cls);\n\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    /* Log right before the strcmp that checks for POST (again, we only log the pointer). */\n    ahc_echo_log(\"before POST strcmp (inside init branch)\", method, req_cls, cls);\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      ahc_echo_log(\"handling POST: returning BUSYPAGE (service unavailable)\", method, req_cls, cls);\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  /* Log when resetting *req_cls to NULL and prior to creating the normal response. */\n  ahc_echo_log(\"about to reset *req_cls and send normal response\", method, req_cls, cls);\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  ahc_echo_log(\"sent normal response and returning\", method, req_cls, cls);\n  return ret;\n}\n"
}