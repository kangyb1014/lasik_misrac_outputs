{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(realm) can read beyond the object if realm is NULL or not a NUL\u2011terminated buffer. In MHD_digest_auth_calc_userdigest there is no check that realm != NULL (nor that it is NUL\u2011terminated), so if a caller passes NULL (or a non NUL\u2011terminated pointer) strlen(realm) will dereference/read out of bounds \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  /* Include needed headers for logging. It's valid to include headers here\n     to ensure the logging functions are declared even if this snippet is\n     pasted into a larger compilation unit. */\n  #include <stdio.h>\n\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Open log early so we can record input pointer values before any\n     potential crash (e.g. strlen(realm)) occurs. Do not change control\n     flow even if logging fails. */\n  FILE *log = fopen(\"/tmp/logs/567.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_digest_auth_calc_userdigest\\n\");\n    fprintf(log, \"  algo3=%d, username=%p, realm=%p, password=%p, userdigest_bin=%p, bin_buf_size=%zu\\n\",\n            (int)algo3,\n            (const void *)username,\n            (const void *)realm,\n            (const void *)password,\n            userdigest_bin,\n            bin_buf_size);\n    /* Log explicit nullness to highlight violation scenarios where realm == NULL. */\n    fprintf(log, \"  username_is_null=%d, realm_is_null=%d, password_is_null=%d\\n\",\n            username == NULL,\n            realm == NULL,\n            password == NULL);\n    fflush(log);\n  }\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    if (log)\n    {\n      fprintf(log, \"  digest_init_one_time: FAILED -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Record digest algorithm size info. */\n  size_t needed = digest_get_size (&da);\n  if (log)\n  {\n    fprintf(log, \"  digest_get_size = %zu\\n\", needed);\n    fprintf(log, \"  bin_buf_size = %zu\\n\", bin_buf_size);\n    fflush(log);\n  }\n\n  if (needed > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    /* Log that the code is about to call calc_userdigest which uses strlen on\n       username and realm. We intentionally do NOT call strlen on realm here to\n       avoid adding additional reads that could hide or change the original\n       behavior; we only record that the call will occur and whether realm is\n       NULL. This preserves the original control flow and potential violation. */\n    if (log)\n    {\n      fprintf(log, \"  About to call calc_userdigest(). Note: calc_userdigest will call strlen(username) and strlen(realm).\\n\");\n      fprintf(log, \"  realm_is_null=%d\\n\", realm == NULL);\n      fflush(log);\n    }\n\n    /* Original logic preserved exactly as much as possible: the strlen calls\n       remain in place (and therefore a real run can demonstrate the out-of-bounds\n       read if realm is NULL or not NUL-terminated). */\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n    if (log)\n    {\n      fprintf(log, \"  calc_userdigest returned, provisional ret=%d\\n\", (int)ret);\n      fflush(log);\n    }\n  }\n  digest_deinit (&da);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: MHD_digest_auth_calc_userdigest -> ret=%d\\n\", (int)ret);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}