{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling MHD_digest_auth_calc_userdigest with username == NULL or realm == NULL (or with a non\u2013NUL-terminated buffer) will cause strlen(username)/strlen(realm) to access memory beyond the referenced object. The function performs no NULL or termination checks before calling strlen, so a caller supplying NULL or a non-terminated char* can trigger out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/567.txt */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/567.txt\", \"a\");\n  if (!f)\n    return;\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry and pointers/state. Do NOT dereference username/realm here. */\n  mhd_probe_log(\"ENTRY: MHD_digest_auth_calc_userdigest(algo3=%d, username=%p, realm=%p, password=%p, userdigest_bin=%p, bin_buf_size=%zu)\",\n                (int)algo3, (const void *)username, (const void *)realm, (const void *)password, userdigest_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_probe_log(\"digest_init_one_time FAILED\");\n    return MHD_NO;\n  }\n\n  /* Record the required digest size before any further action. */\n  {\n    size_t needed = digest_get_size (&da);\n    mhd_probe_log(\"digest_get_size -> %zu; provided bin_buf_size = %zu\", needed, bin_buf_size);\n    if (needed > bin_buf_size)\n    {\n      mhd_probe_log(\"Insufficient buffer: needed %zu > bin_buf_size %zu\", needed, bin_buf_size);\n      ret = MHD_NO;\n    }\n    else\n    {\n      /* Log whether username/realm pointers are NULL (do not dereference). */\n      mhd_probe_log(\"About to call calc_userdigest: username_is_null=%d, realm_is_null=%d\",\n                    (username == NULL) ? 1 : 0,\n                    (realm == NULL) ? 1 : 0);\n\n      /* Preserve original behavior: this call may call strlen(username)/strlen(realm)\n         and thus can trigger out-of-bounds if username/realm are NULL or not NUL-terminated. */\n      calc_userdigest (&da,\n                       username,\n                       strlen (username),\n                       realm,\n                       strlen (realm),\n                       password,\n                       userdigest_bin);\n\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n      {\n        mhd_probe_log(\"digest_ext_error returned true; overriding return to MHD_NO\");\n        ret = MHD_NO;\n      }\n      else\n      {\n        mhd_probe_log(\"digest_ext_error returned false; keeping return %d\", (int)ret);\n      }\n#else\n      mhd_probe_log(\"calc_userdigest completed; setting return %d\", (int)ret);\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n  mhd_probe_log(\"EXIT: MHD_digest_auth_calc_userdigest returning %d\", (int)ret);\n\n  return ret;\n}\n"
}