{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro _MHD_EXTERN expands to the GCC/Clang attribute syntax __attribute__((visibility(\"default\"))) which is a compiler-specific language extension (non\u2011standard attribute syntax). Using this attribute unconditionally constitutes use of a compiler extension and therefore violates MISRA C 2023 Rule 1.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/560.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable trace information to /tmp/logs/560.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/560.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  /* Log entry and parameters. Also explicitly note the presence of the\n     _MHD_EXTERN token in the function declaration (source-level evidence). */\n  probe_log(\"ENTER: MHD_digest_auth_calc_userdigest (declared with _MHD_EXTERN)\");\n  probe_log(\"PARAMS: algo3=%d, username=%p, realm=%p, password=%p, userdigest_bin=%p, bin_buf_size=%zu\",\n            (int)algo3, (void *)username, (void *)realm, (void *)password, userdigest_bin, bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    probe_log(\"digest_init_one_time: FAILED\");\n    return MHD_NO;\n  }\n\n  probe_log(\"digest_init_one_time: SUCCEEDED\");\n\n  /* Capture the size requirement and the provided buffer size. */\n  {\n    size_t needed = digest_get_size(&da);\n    probe_log(\"digest_get_size -> %zu, bin_buf_size -> %zu\", needed, bin_buf_size);\n\n    if (needed > bin_buf_size)\n      ret = MHD_NO;\n    else\n    {\n      /* Log lengths used for the call. Use safe checks for logging only, but\n         preserve the original strlen calls in the actual calc_userdigest call\n         to keep original behavior intact. */\n      probe_log(\"About to call calc_userdigest: username_len=%zu, realm_len=%zu\",\n                username ? strlen(username) : 0,\n                realm ? strlen(realm) : 0);\n\n      calc_userdigest (&da,\n                       username,\n                       strlen (username),\n                       realm,\n                       strlen (realm),\n                       password,\n                       userdigest_bin);\n\n      probe_log(\"calc_userdigest: completed; provisional ret = MHD_YES\");\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n      {\n        probe_log(\"digest_ext_error: detected -> overriding ret to MHD_NO\");\n        ret = MHD_NO;\n      }\n      else\n      {\n        probe_log(\"digest_ext_error: not detected\");\n      }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    }\n  }\n\n  digest_deinit (&da);\n\n  probe_log(\"EXIT: MHD_digest_auth_calc_userdigest returning %d\", (int)ret);\n  return ret;\n}\n"
}