{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_DIGEST_HAS_EXT_ERROR is defined but digest_ext_error(\u2026) is a macro that always expands to (false) (as shown in the provided definitions), the conditional body (ret = MHD_NO;) can never be executed. That operation is effectively redundant: removing the if-body would not change program behaviour, so this constitutes dead code in that build configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/562.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logging helper - appends to /tmp/logs/562.txt. Keeps behaviour unchanged. */\nstatic void mhd_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/562.txt\", \"a\");\n    if (!f)\n        return;\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        fclose(f);\n        return;\n    }\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        fclose(f);\n        return;\n    }\n\n    pid_t pid = getpid();\n\n    fprintf(f, \"%s pid=%d: \", timestr, (int)pid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  mhd_probe_log(\"enter: algo3=%d, username=%s, realm=%s, bin_buf_size=%zu\",\n                (int)algo3, username ? username : \"(null)\", realm ? realm : \"(null)\", bin_buf_size);\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    mhd_probe_log(\"digest_init_one_time failed -> return MHD_NO\");\n    return MHD_NO;\n  }\n\n  if (digest_get_size (&da) > bin_buf_size)\n  {\n    ret = MHD_NO;\n    mhd_probe_log(\"buffer too small: digest_get_size=%zu, bin_buf_size=%zu -> ret=MHD_NO\",\n                  (size_t)digest_get_size(&da), bin_buf_size);\n  }\n  else\n  {\n    mhd_probe_log(\"calling calc_userdigest: username_len=%zu, realm_len=%zu\",\n                  username ? strlen(username) : 0,\n                  realm ? strlen(realm) : 0);\n\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n    mhd_probe_log(\"calc_userdigest done -> provisional ret=MHD_YES\");\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    /* Probe the extension error predicate and log its value. This preserves the\n       original logic but records the runtime-evaluated value so that the\n       presence of a permanently-false macro can be observed. */\n    int ext_err_val = digest_ext_error (&da);\n    mhd_probe_log(\"digest_ext_error(&da) -> %d\", ext_err_val);\n    if (ext_err_val)\n      ret = MHD_NO;\n    mhd_probe_log(\"after ext error check -> ret=%d\", (int)ret);\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  mhd_probe_log(\"exit: returning ret=%d\", (int)ret);\n\n  return ret;\n}\n"
}