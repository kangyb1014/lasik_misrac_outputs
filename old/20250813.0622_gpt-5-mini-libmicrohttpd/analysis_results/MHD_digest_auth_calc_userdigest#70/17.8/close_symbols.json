{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'digest_init_one_time': {'callees': ['MHD_MD5_init', 'MHD_SHA256_init', 'MHD_SHA512_256_init'], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'get_base_digest_algo': {'callees': [], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'digest_get_size': {'callees': [], 'callers': ['calculate_nonce', 'calculate_add_nonce', 'calculate_add_nonce_with_retry', 'MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'add_new_user_entry': {'callees': ['MHD_digest_auth_calc_userhash', 'MHD_digest_auth_calc_userdigest'], 'callers': ['add_new_users']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "get_base_digest_algo",
    "digest_init_one_time",
    "digest_get_size",
    "calc_userdigest",
    "digest_update",
    "digest_update_with_colon",
    "digest_update_str",
    "digest_calc_hash",
    "digest_deinit",
    "digest_ext_error",
    "struct DigestAlgorithm",
    "enum MHD_DigestAuthAlgo3"
  ],
  "explanation": "To prove whether any of the target function's parameters (algo3, username, realm, password, userdigest_bin, bin_buf_size) are being modified you must inspect the signatures and (where necessary) implementations of the functions/types called from the target. For each symbol:\n\n- get_base_digest_algo: confirm its prototype/definition to ensure it takes algo3 by value (or returns a value) and does not accept &algo3 (i.e. it must not be capable of modifying the target function's algo3 parameter).\n- digest_init_one_time: examine its prototype/definition to ensure it does not receive the address of any of the target function's parameters (which would allow modification of the parameter variables). Also verifies that it only operates on the local &da and the value returned by get_base_digest_algo.\n- digest_get_size: check its prototype/definition to ensure it cannot modify any of the target parameters (it should only take a DigestAlgorithm pointer or similar and return a size).\n- calc_userdigest: required because username, realm, password and userdigest_bin are passed to it; inspect its prototype/definition and implementation to ensure it does not accept addresses of the target function's pointer parameters (e.g. const char ** or void ** with the address of the caller's parameter) and thus cannot reassign the caller's pointer variables. Also confirm it only modifies the objects pointed to (which is allowed) and not the pointer parameters themselves.\n- digest_update, digest_update_with_colon, digest_update_str, digest_calc_hash: these are called by calc_userdigest; inspect their prototypes/definitions only to the extent needed to ensure none of them can obtain the address of the target function's parameters (they operate on copies from calc_userdigest). This rules out indirect modification of the outer function's parameter variables.\n- digest_deinit: inspect to confirm it only touches the local DigestAlgorithm and not any of the target function's parameters.\n- digest_ext_error: (guarded by MHD_DIGEST_HAS_EXT_ERROR) inspect to ensure it only queries the local DigestAlgorithm and cannot modify parameter variables.\n- struct DigestAlgorithm: the type definition is needed to understand what the digest functions operate on and to confirm no aliases/pointers to the outer parameters are created internally.\n- enum MHD_DigestAuthAlgo3: the enum/type definition or prototype for functions that use it (get_base_digest_algo) is needed to ensure the enum is passed/returned by value and not via pointer.\n\nIn short: you need the prototypes/definitions of all callees and the relevant type definitions to verify that none of them are passed the address of any target parameter (which would allow modification of the parameter variable). If none accept the address of a target parameter, the MISRA rule (no modification of function parameters themselves) cannot be violated by this code path."
}