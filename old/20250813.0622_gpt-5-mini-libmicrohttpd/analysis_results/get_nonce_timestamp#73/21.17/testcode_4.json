{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcmp(nn->nonce, new_nonce, new_nonce_len) can read new_nonce_len bytes from both pointers. If new_nonce_len exceeds the actual allocated/valid bytes of new_nonce or exceeds the storage available in nn->nonce, memcmp will access beyond the objects\u2019 bounds. Although the function has mhd_assert checks (e.g. new_nonce_len <= NONCE_STD_LEN(MAX_DIGEST)) and later assertions about nn->nonce termination, these are runtime assertions that may be compiled out and do not guarantee at compile/runtime that the buffers are large enough. Example violation: a caller passes a new_nonce pointer to a short buffer but supplies a larger new_nonce_len (or corrupts noncelen), causing memcmp to read past new_nonce\u2019s end and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe/logger helper - writes information to /tmp/logs/591.txt\n * Does not modify program logic. Reads nonce bytes only up to noncelen\n * and up to a safe sample limit to avoid out-of-bounds access. */\nstatic void\nlog_nonce_state (const char *nonce, size_t noncelen, const uint64_t *ptimestamp, const char *stage)\n{\n  FILE *f = fopen(\"/tmp/logs/591.txt\", \"a\");\n  if (!f)\n    return;\n\n  /* Print basic state */\n  fprintf(f, \"[get_nonce_timestamp] stage=%s nonce=%p noncelen=%zu ptimestamp=%p\\n\",\n          stage, (const void *)nonce, noncelen, (const void *)ptimestamp);\n\n  /* Print a sample of the nonce contents safely (only up to noncelen bytes) */\n  if (nonce != NULL && noncelen > 0) {\n    size_t sample = (noncelen < 64) ? noncelen : 64;\n    fprintf(f, \"[get_nonce_timestamp] nonce sample (len=%zu):\", sample);\n    for (size_t i = 0; i < sample; ++i) {\n      /* print as two-hex-digit values for clarity */\n      fprintf(f, \" %02x\", (unsigned char)nonce[i]);\n    }\n    fprintf(f, \"\\n\");\n  } else {\n    fprintf(f, \"[get_nonce_timestamp] nonce empty or NULL\\n\");\n  }\n\n  /* If timestamp area is addressable, log its pointer and a safe sample */\n#ifdef TIMESTAMP_CHARS_LEN\n  if (nonce != NULL && noncelen >= (size_t)TIMESTAMP_CHARS_LEN) {\n    const char *ts_ptr = nonce + noncelen - TIMESTAMP_CHARS_LEN;\n    fprintf(f, \"[get_nonce_timestamp] timestamp region ptr=%p (offset=%zu)\\n\",\n            (const void *)ts_ptr, noncelen - (size_t)TIMESTAMP_CHARS_LEN);\n    fprintf(f, \"[get_nonce_timestamp] timestamp sample:\");\n    for (size_t i = 0; i < (size_t)TIMESTAMP_CHARS_LEN; ++i)\n      fprintf(f, \" %02x\", (unsigned char)ts_ptr[i]);\n    fprintf(f, \"\\n\");\n  } else {\n    fprintf(f, \"[get_nonce_timestamp] timestamp region not readable (noncelen=%zu, TIMESTAMP_CHARS_LEN=%d)\\n\",\n            noncelen, (int)TIMESTAMP_CHARS_LEN);\n  }\n#else\n  (void)stage; /* avoid unused warning if TIMESTAMP_CHARS_LEN not defined here */\n#endif\n\n  if (ptimestamp != NULL)\n    fprintf(f, \"[get_nonce_timestamp] ptimestamp currently %llu\\n\", (unsigned long long)*ptimestamp);\n\n  fclose(f);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry state */\n  log_nonce_state(nonce, noncelen, ptimestamp, \"entry\");\n\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  /* Log after possible strlen adjustment */\n  log_nonce_state(nonce, noncelen, ptimestamp, \"after_strlen_if_zero\");\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      ) {\n    /* Log failing length check */\n    log_nonce_state(nonce, noncelen, ptimestamp, \"length_check_failed\");\n    return false;\n  }\n\n  /* Before calling MHD_strx_to_uint64_n_, log the timestamp region pointer info.\n   * Only read the timestamp bytes if it is safe (noncelen >= TIMESTAMP_CHARS_LEN). */\n  log_nonce_state(nonce, noncelen, ptimestamp, \"before_strx_to_uint64\");\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp)) {\n    /* Log failure to parse timestamp */\n    log_nonce_state(nonce, noncelen, ptimestamp, \"strx_failed\");\n    return false;\n  }\n\n  /* Successful parse - log final state */\n  log_nonce_state(nonce, noncelen, ptimestamp, \"success\");\n  return true;\n}\n"
}