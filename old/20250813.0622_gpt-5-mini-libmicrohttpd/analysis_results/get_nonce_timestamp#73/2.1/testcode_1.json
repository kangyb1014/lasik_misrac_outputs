{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_MD5_SUPPORT nor MHD_SHA256_SUPPORT / MHD_SHA512_256_SUPPORT is defined, the preprocessor removes the two && clauses and the condition becomes: if (true) return false; \u2014 making the remaining code in the function (timestamp parsing and the final return true) unreachable. Thus there is a configuration-dependent unreachable-code violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe logging helper. Appends human-readable control-flow/state logs to /tmp/logs/585.txt.\n   This helper is intentionally non-intrusive: it does not modify any inputs or outputs, and it\n   will not attempt to dereference ptimestamp (which may be uninitialized) to avoid side effects. */\nstatic void\nlog_probe (const char *stage, const char *nonce, size_t noncelen, const uint64_t *ptimestamp)\n{\n  FILE *f = fopen(\"/tmp/logs/585.txt\", \"a\");\n  if (!f)\n    return;\n\n  fprintf (f, \"[get_nonce_timestamp] stage=%s noncelen=%zu nonce_prefix=\\\"\", stage, noncelen);\n  if (nonce != NULL)\n    {\n      size_t i;\n      /* print up to first 80 bytes in printable or hex form */\n      for (i = 0; i < noncelen && i < 80; ++i)\n        {\n          unsigned char c = (unsigned char) nonce[i];\n          if (c >= ' ' && c <= '~')\n            fputc (c, f);\n          else\n            fprintf (f, \"\\\\x%02x\", c);\n        }\n      if (noncelen > 80)\n        fprintf (f, \"...(%zu bytes)\", noncelen);\n    }\n  else\n    fprintf (f, \"(null)\");\n\n  fprintf (f, \"\\\" ptimestamp_ptr=%p\", (void *) ptimestamp);\n\n#ifdef MHD_MD5_SUPPORT\n  fprintf (f, \" MHD_MD5_SUPPORT=1\");\n#else\n  fprintf (f, \" MHD_MD5_SUPPORT=0\");\n#endif\n\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n  fprintf (f, \" MHD_SHA256_or_SHA512_256_SUPPORT=1\");\n#else\n  fprintf (f, \" MHD_SHA256_or_SHA512_256_SUPPORT=0\");\n#endif\n\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  /* Log initial state after potential strlen adjustment */\n  log_probe (\"after_strlen_adjust\", nonce, noncelen, ptimestamp);\n\n  /* Preserve original conditional logic but add logging when the condition is true. */\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      /* Log that the early-return condition was taken and the compile-time configuration. */\n      log_probe (\"early_return_condition_true\", nonce, noncelen, ptimestamp);\n      return false;\n    }\n\n  /* Attempt to parse the timestamp portion; capture parse result for logging. */\n  size_t parsed = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                         TIMESTAMP_CHARS_LEN,\n                                         ptimestamp);\n  /* Log parsing outcome and relevant state */\n  log_probe (\"after_parse\", nonce, noncelen, ptimestamp);\n  {\n    FILE *f = fopen(\"/tmp/logs/585.txt\", \"a\");\n    if (f)\n      {\n        fprintf (f, \"[get_nonce_timestamp] parsed=%zu expected=%d\\n\", parsed, TIMESTAMP_CHARS_LEN);\n        fclose (f);\n      }\n  }\n\n  if (TIMESTAMP_CHARS_LEN != parsed)\n    {\n      log_probe (\"parse_failed_return_false\", nonce, noncelen, ptimestamp);\n      return false;\n    }\n\n  log_probe (\"success_return_true\", nonce, noncelen, ptimestamp);\n  return true;\n}\n"
}