{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'noncelen' (a non-const size_t) is assigned to inside the function: if (0 == noncelen) noncelen = strlen(nonce); \u2014 this modifies the parameter variable, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/589.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\nPlease provide the modified get_nonce_timestamp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n#include <inttypes.h>\n\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Log entry state */\n  {\n    FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ENTRY: get_nonce_timestamp nonce=%p noncelen=%zu ptimestamp=%p\\n\",\n                (void *)nonce, noncelen, (void *)ptimestamp);\n        if (nonce != NULL && noncelen > 0U)\n          {\n            /* print a short prefix of the nonce for context, avoid overruns */\n            size_t show = (noncelen > 64U) ? 64U : noncelen;\n            fprintf(f, \"ENTRY: nonce prefix (len=%zu): \\\"%.*s\\\"\\n\",\n                    show, (int)show, nonce);\n          }\n        fclose(f);\n      }\n  }\n\n  if (0 == noncelen)\n    {\n      /* Log that we will compute strlen and the value computed */\n      size_t computed = strlen (nonce);\n      {\n        FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"ACTION: noncelen was 0, computed strlen(nonce)=%zu\\n\", computed);\n            fclose(f);\n          }\n      }\n\n      /* Preserve original behavior: assign to parameter (existing violation scenario) */\n      noncelen = computed;\n\n      /* Log post-modification state */\n      {\n        FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"STATE: noncelen updated to %zu after strlen(nonce)\\n\", noncelen);\n            fclose(f);\n          }\n      }\n    }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"CHECK: standard-length check failed, noncelen=%zu -> returning false\\n\", noncelen);\n          fclose(f);\n        }\n      return false;\n    }\n\n  /* Log details before parsing timestamp */\n  {\n    FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ACTION: about to parse timestamp from nonce at offset (noncelen - TIMESTAMP_CHARS_LEN) = %zu\\n\",\n                (noncelen >= TIMESTAMP_CHARS_LEN) ? (noncelen - TIMESTAMP_CHARS_LEN) : 0U);\n        fclose(f);\n      }\n  }\n\n  /* Call the existing parser but capture its return to log it */\n  {\n    size_t rv = MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                                       TIMESTAMP_CHARS_LEN,\n                                       ptimestamp);\n\n    /* Log parse result and the parsed timestamp value (if any) */\n    {\n      FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"RESULT: MHD_strx_to_uint64_n_ returned=%zu\\n\", rv);\n          if (ptimestamp != NULL)\n            fprintf(f, \"RESULT: parsed ptimestamp=%\" PRIu64 \"\\n\", *ptimestamp);\n          fclose(f);\n        }\n    }\n\n    if (TIMESTAMP_CHARS_LEN != rv)\n      {\n        FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"CHECK: timestamp length mismatch (expected %d != got %zu) -> returning false\\n\", TIMESTAMP_CHARS_LEN, rv);\n            fclose(f);\n          }\n        return false;\n      }\n  }\n\n  {\n    FILE *f = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"EXIT: returning true\\n\");\n        fclose(f);\n      }\n  }\n\n  return true;\n}\n"
}