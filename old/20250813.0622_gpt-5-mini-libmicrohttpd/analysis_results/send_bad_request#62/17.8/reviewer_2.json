{
  "user_message": "An agent A claimed that the following send_bad_request code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of send_bad_request.\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In MHD_queue_response(unsigned int status_code, ...), the parameter status_code is modified in-place via the statements:\nreply_icy = (0 != (status_code & MHD_ICY_FLAG));\nstatus_code &= ~MHD_ICY_FLAG;\nThis alters the function parameter variable (clearing the MHD_ICY_FLAG) rather than operating on a local copy, which violates MISRA C 2023 Rule 17.8. A local variable should be used if the value needs to be changed.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/501.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fprintf (f, \"\\n\");\n  fclose (f);\n}\nstatic enum MHD_Result\nprobe_MHD_queue_response (struct MHD_Connection *con,\n                          unsigned int status_code,\n                          struct MHD_Response *res)\n{\n  enum MHD_Result ret;\n\n  /* Log the call site and the exact status code value passed. */\n  probe_log (\"probe: entering MHD_queue_response - status_code=0x%08X\", status_code);\n\n  /* Keep a local copy for additional state inspection (do not modify the\n     incoming parameter itself to avoid introducing new violations). */\n  unsigned int status_code_copy = status_code;\n  probe_log (\"probe: local copy before call - status_code_copy=0x%08X, &status_code_copy=%p\",\n             status_code_copy, (void *)&status_code_copy);\n\n  /* Call the real function (preserves original semantics). */\n  ret = MHD_queue_response (con, status_code, res);\n\n  /* Log after the call. Note: if MHD_queue_response internally modifies its\n     parameter variable, that modification is internal to that function and\n     will not be visible here. These logs provide evidence of what was\n     supplied to the function and the control flow around the call. */\n  probe_log (\"probe: returned from MHD_queue_response - ret=%d\", (int) ret);\n  probe_log (\"probe: local copy after call - status_code_copy=0x%08X, &status_code_copy=%p\",\n             status_code_copy, (void *)&status_code_copy);\n\n  return ret;\n}\n\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Log entry into send_bad_request and intent to create response. */\n  probe_log (\"probe: enter send_bad_request\");\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n\n  /* Log the status code that will be passed to the queue function. */\n  probe_log (\"probe: about to queue response - status=MHD_HTTP_BAD_REQUEST (0x%08X)\",\n             (unsigned int) MHD_HTTP_BAD_REQUEST);\n\n  /* Use the probe wrapper to log call/return around MHD_queue_response. */\n  ret = probe_MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n\n  MHD_destroy_response (res);\n\n  probe_log (\"probe: exit send_bad_request - returning ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for send_bad_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct as applied to the submitted send_bad_request code. MISRA C 2023 Rule 17.8 prohibits modifying a function parameter inside the function that defines that parameter. The shown send_bad_request function does not modify its parameter (struct MHD_Connection *con); it merely passes it to MHD_queue_response. If MHD_queue_response indeed contains code that writes to its own parameter variable status_code (for example: status_code &= ~MHD_ICY_FLAG;), then that would be a Rule 17.8 violation inside MHD_queue_response itself, not inside send_bad_request. The agent A has conflated the caller with the callee. The provided probe/wrapper and empty logs do not change that: the caller remains compliant, and any violation would be located in the implementation of MHD_queue_response (which is not part of the target code shown)."
}