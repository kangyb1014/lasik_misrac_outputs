{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment 'if (1) { /* pseudo-branch for local variables scope */' is an always-true conditional whose evaluation and branching have no effect on program behaviour (it merely introduces a nested scope for local variables). The conditional is executed at run-time but could be removed (replacing it with a plain block '{ ... }') without changing behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified send_bad_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/498.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of send_bad_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of send_bad_request:\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified send_bad_request code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a single line to the log file. Keep simple to avoid\n   introducing complex new constructs. */\nstatic void send_bad_request_probe_log(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/498.txt\", \"a\");\n  if (f != NULL)\n  {\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n  }\n}\n\n/* Small formatter to build messages without varargs (keeps MISRA risks low).\n   Buffer size kept modest but sufficient for these messages. */\nstatic void send_bad_request_probe_printf(const char *label, const void *p, unsigned long val)\n{\n  char buf[256];\n  if (p != NULL)\n  {\n    /* pointer + numeric value */\n    (void) snprintf(buf, sizeof(buf), \"%s ptr=%p val=%lu\", label, p, val);\n  }\n  else\n  {\n    /* only numeric value */\n    (void) snprintf(buf, sizeof(buf), \"%s val=%lu\", label, val);\n  }\n  send_bad_request_probe_log(buf);\n}\n\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Log function entry and the connection pointer so the control path is visible */\n  send_bad_request_probe_printf(\"enter send_bad_request con\", (const void *) con, 0UL);\n\n  /* Log length/state of the constant buffer used to build the response */\n  {\n    unsigned long len = (unsigned long) strlen (BAD_REQUEST_PAGE);\n    send_bad_request_probe_printf(\"BAD_REQUEST_PAGE length\", NULL, len);\n\n    res =\n      MHD_create_response_from_buffer_static ((size_t) len,\n                                              (const void *) BAD_REQUEST_PAGE);\n    /* Log the response pointer returned by the creation routine */\n    send_bad_request_probe_printf(\"MHD_create_response_from_buffer_static returned res\", (const void *) res, (unsigned long) len);\n  }\n\n  /* Queue the response and log the result */\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  send_bad_request_probe_printf(\"MHD_queue_response returned ret\", NULL, (unsigned long) ret);\n\n  /* Destroy the response as before and log that we did so */\n  MHD_destroy_response (res);\n  send_bad_request_probe_log(\"MHD_destroy_response called\");\n\n  /* Log exit and return value */\n  send_bad_request_probe_printf(\"exit send_bad_request ret\", NULL, (unsigned long) ret);\n  return ret;\n}\n"
}