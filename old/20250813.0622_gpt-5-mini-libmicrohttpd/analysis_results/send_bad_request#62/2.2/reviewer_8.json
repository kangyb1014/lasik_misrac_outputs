{
  "user_message": "An agent A claimed that the following send_bad_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of send_bad_request.\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement '(void) upload_data_size;' is an expression-statement whose only effect is to silence an \"unused parameter\" warning. It is a no-op whose removal would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/498.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Try to create the directory then reopen. If that fails, silently return. */\n    (void) mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/498.txt\", \"a\");\n    if (f == NULL)\n    {\n      return;\n    }\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Capture entry and connection pointer. */\n  probe_log_append(\"send_bad_request: entry con=%p\", (void *) con);\n\n  /* Capture the length of the response page used when creating the response. */\n  {\n    size_t page_len = strlen (BAD_REQUEST_PAGE);\n    probe_log_append(\"send_bad_request: BAD_REQUEST_PAGE length=%zu\", page_len);\n  }\n\n  /* Preserve original logic: create response, queue it, destroy it. */\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  probe_log_append(\"send_bad_request: MHD_create_response_from_buffer_static returned res=%p\", (void *) res);\n\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  probe_log_append(\"send_bad_request: MHD_queue_response returned ret=%d\", (int) ret);\n\n  MHD_destroy_response (res);\n  probe_log_append(\"send_bad_request: MHD_destroy_response called for res=%p\", (void *) res);\n\n  probe_log_append(\"send_bad_request: exit ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for send_bad_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The supplied send_bad_request function does not contain the statement '(void) upload_data_size;' or any equivalent no-op expression-statement that was asserted to be dead code. Agent A appears to have misidentified the code. The added probe/test shows the function was not invoked during the test run (empty log), but that only means it was not executed (unreachable/not covered), which per MISRA Note 2 is not the same as dead code. (If a meaningless expression-statement such as '(void)upload_data_size;' actually appeared and was executed, it would be a no-op whose removal would not change behaviour and thus would meet the definition of dead code in Rule 2.2 \u2014 but that is hypothetical and does not apply to the provided target_code.) Therefore the specific violation claim is incorrect for the given code."
}