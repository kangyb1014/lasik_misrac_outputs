{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) upload_data_size;' is an expression-statement whose only effect is to silence an \"unused parameter\" warning. It is a no-op whose removal would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified send_bad_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/498.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of send_bad_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of send_bad_request:\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified send_bad_request code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: append textual log lines to /tmp/logs/498.txt. */\nstatic void probe_log_append(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/498.txt\", \"a\");\n  if (f == NULL)\n  {\n    /* Try to create the directory then reopen. If that fails, silently return. */\n    (void) mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/498.txt\", \"a\");\n    if (f == NULL)\n    {\n      return;\n    }\n  }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fputc('\\n', f);\n  fclose(f);\n}\n\n/* Modified send_bad_request with probes that do not change logic. */\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Capture entry and connection pointer. */\n  probe_log_append(\"send_bad_request: entry con=%p\", (void *) con);\n\n  /* Capture the length of the response page used when creating the response. */\n  {\n    size_t page_len = strlen (BAD_REQUEST_PAGE);\n    probe_log_append(\"send_bad_request: BAD_REQUEST_PAGE length=%zu\", page_len);\n  }\n\n  /* Preserve original logic: create response, queue it, destroy it. */\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  probe_log_append(\"send_bad_request: MHD_create_response_from_buffer_static returned res=%p\", (void *) res);\n\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  probe_log_append(\"send_bad_request: MHD_queue_response returned ret=%d\", (int) ret);\n\n  MHD_destroy_response (res);\n  probe_log_append(\"send_bad_request: MHD_destroy_response called for res=%p\", (void *) res);\n\n  probe_log_append(\"send_bad_request: exit ret=%d\", (int) ret);\n  return ret;\n}\n"
}