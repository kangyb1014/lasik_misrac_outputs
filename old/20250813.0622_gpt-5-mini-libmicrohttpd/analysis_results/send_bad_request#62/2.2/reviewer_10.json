{
  "user_message": "An agent A claimed that the following send_bad_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of send_bad_request.\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The fragment 'if (1) { /* pseudo-branch for local variables scope */' is an always-true conditional whose evaluation and branching have no effect on program behaviour (it merely introduces a nested scope for local variables). The conditional is executed at run-time but could be removed (replacing it with a plain block '{ ... }') without changing behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void send_bad_request_probe_log(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/498.txt\", \"a\");\n  if (f != NULL)\n  {\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n  }\n}\nstatic void send_bad_request_probe_printf(const char *label, const void *p, unsigned long val)\n{\n  char buf[256];\n  if (p != NULL)\n  {\n    /* pointer + numeric value */\n    (void) snprintf(buf, sizeof(buf), \"%s ptr=%p val=%lu\", label, p, val);\n  }\n  else\n  {\n    /* only numeric value */\n    (void) snprintf(buf, sizeof(buf), \"%s val=%lu\", label, val);\n  }\n  send_bad_request_probe_log(buf);\n}\n\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  /* Log function entry and the connection pointer so the control path is visible */\n  send_bad_request_probe_printf(\"enter send_bad_request con\", (const void *) con, 0UL);\n\n  /* Log length/state of the constant buffer used to build the response */\n  {\n    unsigned long len = (unsigned long) strlen (BAD_REQUEST_PAGE);\n    send_bad_request_probe_printf(\"BAD_REQUEST_PAGE length\", NULL, len);\n\n    res =\n      MHD_create_response_from_buffer_static ((size_t) len,\n                                              (const void *) BAD_REQUEST_PAGE);\n    /* Log the response pointer returned by the creation routine */\n    send_bad_request_probe_printf(\"MHD_create_response_from_buffer_static returned res\", (const void *) res, (unsigned long) len);\n  }\n\n  /* Queue the response and log the result */\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  send_bad_request_probe_printf(\"MHD_queue_response returned ret\", NULL, (unsigned long) ret);\n\n  /* Destroy the response as before and log that we did so */\n  MHD_destroy_response (res);\n  send_bad_request_probe_log(\"MHD_destroy_response called\");\n\n  /* Log exit and return value */\n  send_bad_request_probe_printf(\"exit send_bad_request ret\", NULL, (unsigned long) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for send_bad_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The supplied send_bad_request function does not contain any \"if (1)\" or other always\u2011true conditional \u2014 it simply creates a response, queues it, destroys it and returns the result. There is no fragment in the original code that is executed but removable without affecting program behaviour, so Rule 2.2 (no dead code) is not violated by the shown function.\n\nMoreover, the scenario described by agent A refers to a coding pattern (using if(1) solely to create a nested scope) that does not appear in the target code. Even if an if(1) were present, determining whether it is \"dead code\" under MISRA 2.2 requires showing that removing the conditional (e.g. replacing it with a plain block) would have no observable effect; for embedded systems timing/ordering can be observable, so the assessment is context dependent. The provided test harness/logging code also does not exercise the function (empty log), so it does not demonstrate a Rule 2.2 violation.\n\nTherefore the agent A report is incorrect."
}