{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_connection_handle_idle the local variable 'daemon' is explicitly cast to void via the statement '(void) daemon; /* Mute compiler warning */'. That cast is an executed no-op (has no side effects) whose removal would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified send_bad_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/498.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of send_bad_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of send_bad_request:\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified send_bad_request code.\n",
  "test_code": "static enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n  /* Probe state: measure length once to avoid calling strlen repeatedly */\n  size_t len = strlen (BAD_REQUEST_PAGE);\n\n  /* Open log file for append. We log control flow and key state so other agents\n     can reproduce/examine the execution path. If fopen fails, we silently\n     continue to preserve original behavior. */\n  FILE *log = fopen(\"/tmp/logs/498.txt\", \"a\");\n  if (log)\n    {\n      fprintf (log, \"send_bad_request: entry con=%p len=%zu BAD_REQUEST_PAGE=%p\\n\",\n               (void *) con, len, (const void *) BAD_REQUEST_PAGE);\n    }\n\n  res =\n    MHD_create_response_from_buffer_static (len,\n                                            (const void *) BAD_REQUEST_PAGE);\n\n  if (log)\n    {\n      fprintf (log, \"send_bad_request: MHD_create_response_from_buffer_static -> res=%p\\n\",\n               (void *) res);\n    }\n\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n\n  if (log)\n    {\n      fprintf (log, \"send_bad_request: MHD_queue_response -> ret=%d\\n\", (int) ret);\n    }\n\n  MHD_destroy_response (res);\n\n  if (log)\n    {\n      fprintf (log, \"send_bad_request: MHD_destroy_response called for res=%p, returning %d\\n\",\n               (void *) res, (int) ret);\n      fclose (log);\n    }\n\n  return ret;\n}\n"
}