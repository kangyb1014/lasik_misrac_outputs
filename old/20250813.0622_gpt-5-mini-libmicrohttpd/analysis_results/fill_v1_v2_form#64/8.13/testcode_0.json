{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct Session *session' is not const-qualified even though fill_v1_v2_form only reads from the session (session->value_1, session->value_2) and only passes it to add_session_cookie which also only reads session->sid. Therefore 'session' could be declared as 'const struct Session *session' (and add_session_cookie adjusted to accept a const pointer), satisfying MISRA C 2023 Rule 8.13. The other pointer parameters (const void *cls and const char *mime) are already const; 'connection' must remain non-const because it is passed to MHD_queue_response which modifies the connection.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "static enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  FILE *log = NULL;\n\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Log entry and incoming state */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf (log,\n             \"ENTER: fill_v1_v2_form: cls=%p mime=%s session=%p connection=%p\\n\",\n             cls,\n             (mime != NULL) ? mime : \"(null)\",\n             (void *) session,\n             (void *) connection);\n    if (NULL != session)\n    {\n      fprintf (log,\n               \" session->sid=%s\\n session->value_1=%s\\n session->value_2=%s\\n\",\n               (session->sid != NULL) ? session->sid : \"(null)\",\n               (session->value_1 != NULL) ? session->value_1 : \"(null)\",\n               (session->value_2 != NULL) ? session->value_2 : \"(null)\");\n    }\n    else\n    {\n      fprintf (log, \" session pointer is NULL\\n\");\n    }\n    fclose (log);\n    log = NULL;\n  }\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n\n  /* Log computed length */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf (log, \" computed slen=%zu\\n\", slen);\n    fclose (log);\n    log = NULL;\n  }\n\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n  {\n    log = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf (log, \" malloc failed for size=%zu\\n\", slen + 1);\n      fclose (log);\n    }\n    return MHD_NO;\n  }\n\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n\n  /* Log reply content (truncate if very long) */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    size_t show = (slen > 1024) ? 1024U : slen;\n    fprintf (log, \" reply_ptr=%p reply_len=%zu show_len=%zu\\n\", (void *) reply, slen, show);\n    if (show > 0U)\n    {\n      /* Print up to 'show' chars safely */\n      char tmp = reply[show];\n      ((char *) reply)[show] = '\\0';\n      fprintf (log, \" reply_preview=%s\\n\", reply);\n      ((char *) reply)[show] = tmp;\n    }\n    fclose (log);\n    log = NULL;\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    /* Log failure to create response */\n    log = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf (log, \" MHD_create_response_from_buffer_with_free_callback returned NULL\\n\");\n      fclose (log);\n    }\n    free (reply);\n    return MHD_NO;\n  }\n\n  /* Log response pointer before adding cookie */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf (log, \" response=%p before add_session_cookie\\n\", (void *) response);\n    fclose (log);\n    log = NULL;\n  }\n\n  add_session_cookie (session, response);\n\n  /* Log session state after add_session_cookie (e.g., sid) */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    if (NULL != session)\n    {\n      fprintf (log, \" after add_session_cookie: session->sid=%s\\n\",\n               (session->sid != NULL) ? session->sid : \"(null)\");\n    }\n    fclose (log);\n    log = NULL;\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n\n    /* Log header failure */\n    log = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf (log, \" MHD_add_response_header failed for mime=%s\\n\",\n               (mime != NULL) ? mime : \"(null)\");\n      fclose (log);\n      log = NULL;\n    }\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  /* Log result of queueing response */\n  log = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf (log, \" MHD_queue_response returned=%d\\n\", (int) ret);\n    fprintf (log, \" response=%p will be destroyed\\n\", (void *) response);\n    fclose (log);\n    log = NULL;\n  }\n\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}