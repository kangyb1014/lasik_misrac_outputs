{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: strlen is called on session->value_1 and session->value_2 which may be NULL or not NUL-terminated. For example, if session->value_1 was filled with strncpy without ensuring a terminating '\\0' (or came from an external input that didn't include a terminator), strlen(session->value_1) will read past the object\u2019s bounds until a 0 byte is found (undefined behavior). strlen(NULL) similarly dereferences an invalid pointer. The literal SECOND_PAGE is safe (NUL-terminated), but the session fields make this fragment susceptible to out\u2011of\u2011bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "static enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Probe logging: record control flow and pointer state to /tmp/logs/519.txt.\n     Keep logs minimal and avoid dereferencing potentially NULL pointers. */\n  {\n    FILE *lf = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (lf)\n    {\n      fprintf(lf, \"[fill_v1_v2_form] ENTER\\n\");\n      fprintf(lf, \"  cls=%p mime=%p session=%p SECOND_PAGE=%p\\n\",\n              (const void *) cls,\n              (const void *) mime,\n              (const void *) session,\n              (const void *) SECOND_PAGE);\n      /* Logging strlen(SECOND_PAGE) is safe (string literal). */\n      fprintf(lf, \"  strlen(SECOND_PAGE)=%zu\\n\", strlen(SECOND_PAGE));\n      if (session)\n      {\n        /* Log addresses of session fields without dereferencing their contents. */\n        fprintf(lf, \"  session->value_1=%p session->value_2=%p\\n\",\n                (const void *) session->value_1,\n                (const void *) session->value_2);\n        fprintf(lf, \"  session->value_1 is %s\\n\",\n                (session->value_1 == NULL) ? \"NULL\" : \"non-NULL\");\n        fprintf(lf, \"  session->value_2 is %s\\n\",\n                (session->value_2 == NULL) ? \"NULL\" : \"non-NULL\");\n      }\n      else\n      {\n        fprintf(lf, \"  session is NULL\\n\");\n      }\n      fflush(lf);\n      fclose(lf);\n    }\n  }\n\n  /* Original logic retained: compute total length using strlen calls. */\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n\n  /* Log computed slen immediately so we have evidence right before allocation. */\n  {\n    FILE *lf = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (lf)\n    {\n      fprintf(lf, \"[fill_v1_v2_form] After length computation: slen=%zu\\n\", slen);\n      fflush(lf);\n      fclose(lf);\n    }\n  }\n\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n\n  /* Capture snprintf result for logging, but preserve snprintf behavior. */\n  {\n    int snprintf_ret = snprintf (reply,\n                                 slen + 1,\n                                 SECOND_PAGE,\n                                 session->value_1,\n                                 session->value_2);\n\n    FILE *lf = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (lf)\n    {\n      fprintf(lf, \"[fill_v1_v2_form] snprintf returned %d; allocated reply=%p\\n\",\n              snprintf_ret,\n              (void *) reply);\n      /* Optionally log the first few bytes of reply safely. */\n      if (reply)\n      {\n        /* Print up to 80 chars or up to slen, whichever is smaller. */\n        size_t to_print = (slen < 80) ? slen : 80;\n        /* Ensure NUL-termination before using %.*s: snprintf set reply and should NUL-terminate. */\n        fprintf(lf, \"[fill_v1_v2_form] reply prefix: %.*s\\n\", (int) to_print, reply);\n      }\n      fflush(lf);\n      fclose(lf);\n    }\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n\n  /* Final log of the return value. */\n  {\n    FILE *lf = fopen(\"/tmp/logs/519.txt\", \"a\");\n    if (lf)\n    {\n      fprintf(lf, \"[fill_v1_v2_form] EXIT ret=%d\\n\", (int) ret);\n      fflush(lf);\n      fclose(lf);\n    }\n  }\n\n  return ret;\n}\n"
}