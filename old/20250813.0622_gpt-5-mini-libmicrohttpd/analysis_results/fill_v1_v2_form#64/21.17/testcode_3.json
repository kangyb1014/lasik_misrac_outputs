{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the computed slen overflows or the session strings are not properly NUL-terminated, the malloc(slen + 1) allocation can be too small and the subsequent snprintf can write past the buffer. Example: if strlen(session->value_1) + strlen(session->value_2) + strlen(SECOND_PAGE) > SIZE_MAX - 1, the sum wraps (slen becomes small), malloc allocates a much smaller buffer, and snprintf(reply, slen + 1, SECOND_PAGE, session->value_1, session->value_2) then writes more bytes than allocated \u2014 causing an out\u2011of\u2011bounds access by the string handling (formatting) operation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_v2_form code.\n",
  "test_code": "static enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  size_t len_page, len_v1, len_v2;\n  size_t alloc_size;\n  int snprintf_ret;\n  FILE *logf = NULL;\n\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Probe: compute individual lengths first so we can log them. */\n  len_page = strlen (SECOND_PAGE);\n  len_v1 = strlen (session->value_1);\n  len_v2 = strlen (session->value_2);\n\n  /* Sum as in original code */\n  slen = len_page + len_v1 + len_v2;\n  alloc_size = slen + 1;\n\n  /* Open log file for append. If that fails, fall back to stderr. */\n  logf = fopen(\"/tmp/logs/519.txt\", \"a\");\n  if (NULL == logf)\n    logf = stderr;\n\n  fprintf (logf,\n           \"[fill_v1_v2_form] computed lengths: SECOND_PAGE=%zu, value_1=%zu, value_2=%zu, slen(sum)=%zu, alloc_size=%zu\\n\",\n           len_page, len_v1, len_v2, slen, alloc_size);\n  fprintf (logf,\n           \"[fill_v1_v2_form] pointers: session=%p, value_1=%p, value_2=%p\\n\",\n           (void *) session, (void *) session->value_1, (void *) session->value_2);\n\n  /* Heuristic detection of wrap-around: if the sum is smaller than any operand, a wrap likely occurred. */\n  if (slen < len_page || slen < len_v1 || slen < len_v2)\n  {\n    fprintf (logf,\n             \"[fill_v1_v2_form] WARNING: possible size_t overflow (wrap-around) detected when summing lengths.\\n\");\n  }\n\n  /* Original allocation (preserve behavior) */\n  reply = malloc (alloc_size);\n  fprintf (logf, \"[fill_v1_v2_form] malloc(%zu) returned %p\\n\", alloc_size, (void *) reply);\n  if (NULL == reply)\n  {\n    fprintf (logf, \"[fill_v1_v2_form] malloc failed, returning MHD_NO\\n\");\n    if (logf != stderr)\n      fclose (logf);\n    return MHD_NO;\n  }\n\n  /* Call snprintf as originally done and capture return for logging. */\n  snprintf_ret = snprintf (reply,\n                           alloc_size,\n                           SECOND_PAGE,\n                           session->value_1,\n                           session->value_2);\n\n  fprintf (logf, \"[fill_v1_v2_form] snprintf returned %d (bytes that would have been written, excluding NUL)\\n\", snprintf_ret);\n  if (snprintf_ret < 0)\n  {\n    fprintf (logf, \"[fill_v1_v2_form] snprintf reported encoding error (negative return)\\n\");\n  }\n  else if ((size_t) snprintf_ret >= alloc_size)\n  {\n    /* snprintf would have required more space than allocated. Log this as evidence. */\n    fprintf (logf, \"[fill_v1_v2_form] WARNING: snprintf would have written %d bytes, which is >= alloc_size (%zu). Potential out-of-bounds write.\\n\",\n             snprintf_ret, alloc_size);\n  }\n  else\n  {\n    fprintf (logf, \"[fill_v1_v2_form] snprintf wrote %d bytes within alloc_size %zu.\\n\",\n             snprintf_ret, alloc_size);\n  }\n\n  /* Log a small extract of the reply buffer (bounded to avoid large dumps). */\n  {\n    size_t dump_len = (alloc_size > 0) ? alloc_size - 1 : 0;\n    if (dump_len > 200)\n      dump_len = 200;\n    fprintf (logf, \"[fill_v1_v2_form] reply buffer (first %zu bytes):\\n\", dump_len);\n    if (dump_len > 0)\n    {\n      /* fwrite may read only allocated bytes; we limit to dump_len which is <= alloc_size-1 */\n      fwrite (reply, 1, dump_len, logf);\n      fprintf (logf, \"\\n\");\n    }\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  fprintf (logf, \"[fill_v1_v2_form] MHD_create_response_from_buffer_with_free_callback returned %p (slen=%zu)\\n\",\n           (void *) response, slen);\n  if (NULL == response)\n  {\n    fprintf (logf, \"[fill_v1_v2_form] MHD_create_response... failed, freeing reply and returning MHD_NO\\n\");\n    free (reply);\n    if (logf != stderr)\n      fclose (logf);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    fprintf (logf, \"[fill_v1_v2_form] Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  fprintf (logf, \"[fill_v1_v2_form] MHD_queue_response returned %d\\n\", ret);\n  MHD_destroy_response (response);\n\n  if (logf != stderr)\n    fclose (logf);\n\n  return ret;\n}\n"
}