{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(username) and strlen(realm) without prior validation that these pointers are non-NULL and point to NUL-terminated arrays. If username or realm is NULL (or points to a non-NUL-terminated buffer), strlen will read past the object bounds and invoke undefined behaviour. The later mhd_assert in calc_userhash does not prevent the strlen calls and may be compiled out, so it does not guarantee safety at the strlen call site. Therefore this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_new_user_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_new_user_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_new_user_entry:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified add_new_user_entry code.\n",
  "test_code": "static int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n  int ret_val = 0; /* default failure */\n  FILE *log = fopen(\"/tmp/logs/335.txt\", \"a\");\n\n  if (log)\n    {\n      /* Log entry to help reproduce the violation scenario. We log pointer\n         values and some state but do not dereference username/realm to avoid\n         introducing additional runtime faults. */\n      fprintf(log, \"add_new_user_entry: enter\\n\");\n      fprintf(log, \"  username=%p, password=%p, realm=%p\\n\",\n              (const void *) username,\n              (const void *) password,\n              (const void *) realm);\n      fprintf(log, \"  allow_area_1=%d, allow_area_2=%d\\n\",\n              allow_area_1, allow_area_2);\n      fprintf(log, \"  user_ids_used=%zu, user_ids_capacity=%zu\\n\",\n              (size_t) user_ids_used,\n              (size_t) (sizeof (user_ids) / sizeof (user_ids[0])));\n      fflush(log);\n    }\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    {\n      if (log)\n        {\n          fprintf(log, \"  exit: no space to add new entry (capacity reached)\\n\");\n          fclose(log);\n        }\n      return 0; /* No more space to add new entry */\n    }\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  if (log)\n    {\n      fprintf(log, \"  assigned entry at %p -> entry->username=%p, entry->realm=%p\\n\",\n              (void *) entry,\n              (const void *) entry->username,\n              (const void *) entry->realm);\n      fflush(log);\n    }\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userhash (MD5) with username=%p realm=%p\\n\",\n                  (const void *) username, (const void *) realm);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           entry->userhash_md5,\n                                           sizeof (entry->userhash_md5));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after MD5 userhash\\n\", (int) res);\n          fflush(log);\n        }\n    }\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userdigest (MD5) with username=%p realm=%p password=%p\\n\",\n                  (const void *) username, (const void *) realm, (const void *) password);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                             username,\n                                             realm,\n                                             password,\n                                             entry->userdigest_md5,\n                                             sizeof (entry->userdigest_md5));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after MD5 userdigest\\n\", (int) res);\n          fflush(log);\n        }\n    }\n\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userhash (SHA256) with username=%p realm=%p\\n\",\n                  (const void *) username, (const void *) realm);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           entry->userhash_sha256,\n                                           sizeof (entry->userhash_sha256));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after SHA256 userhash\\n\", (int) res);\n          fflush(log);\n        }\n    }\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userdigest (SHA256) with username=%p realm=%p password=%p\\n\",\n                  (const void *) username, (const void *) realm, (const void *) password);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                             username,\n                                             realm,\n                                             password,\n                                             entry->userdigest_sha256,\n                                             sizeof (entry->userdigest_sha256));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after SHA256 userdigest\\n\", (int) res);\n          fflush(log);\n        }\n    }\n\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userhash (SHA512_256) with username=%p realm=%p\\n\",\n                  (const void *) username, (const void *) realm);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                           username,\n                                           realm,\n                                           entry->userhash_sha512_256,\n                                           sizeof (entry->userhash_sha512_256));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after SHA512_256 userhash\\n\", (int) res);\n          fflush(log);\n        }\n    }\n  if (MHD_NO != res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  calling MHD_digest_auth_calc_userdigest (SHA512_256) with username=%p realm=%p password=%p\\n\",\n                  (const void *) username, (const void *) realm, (const void *) password);\n          fflush(log);\n        }\n      res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                             username,\n                                             realm,\n                                             password,\n                                             entry->userdigest_sha512_256,\n                                             sizeof (entry->userdigest_sha512_256));\n      if (log)\n        {\n          fprintf(log, \"  returned res=%d after SHA512_256 userdigest\\n\", (int) res);\n          fflush(log);\n        }\n    }\n\n  if (MHD_NO == res)\n    {\n      if (log)\n        {\n          fprintf(log, \"  exit: digest/hash calculation failed (res==MHD_NO)\\n\");\n          fclose(log);\n        }\n      return 0; /* Failure exit point */\n    }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  ret_val = !0;\n\n  if (log)\n    {\n      fprintf(log, \"  success: new entry added at index %zu (entry=%p)\\n\",\n              (size_t) (user_ids_used - 1), (void *) entry);\n      fprintf(log, \"add_new_user_entry: exit returning %d\\n\", ret_val);\n      fclose(log);\n    }\n\n  return ret_val;\n}\n"
}