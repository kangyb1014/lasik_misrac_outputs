{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'res' is assigned MHD_YES immediately prior to testing 'if (MHD_NO != res)'. That condition is therefore always true, so the conditional test (and its evaluation) is executed but redundant \u2014 removing the 'if' (or the test) would not affect program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_new_user_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of add_new_user_entry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of add_new_user_entry:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\nPlease provide the modified add_new_user_entry code.\n",
  "test_code": "static int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n  FILE *logf = fopen(\"/tmp/logs/330.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER add_new_user_entry: username=%p realm=%p password=%p allow_area_1=%d allow_area_2=%d\\n\",\n            (const void *)username, (const void *)realm, (const void *)password,\n            allow_area_1, allow_area_2);\n    fflush(logf);\n  }\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EARLY RETURN: no space (user_ids_used=%lu)\\n\", (unsigned long)user_ids_used);\n      fclose(logf);\n    }\n    return 0; /* No more space to add new entry */\n  }\n\n  entry = user_ids + user_ids_used;\n\n  if (logf)\n  {\n    fprintf(logf, \"allocated entry at index=%lu entry=%p\\n\", (unsigned long)user_ids_used, (void *)entry);\n    fprintf(logf, \"storing username=%p realm=%p\\n\", (const void *)username, (const void *)realm);\n    fflush(logf);\n  }\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (logf)\n  {\n    fprintf(logf, \"initial res set to MHD_YES (res=%d)\\n\", (int)res);\n    fflush(logf);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST1: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userhash MD5\\n\");\n      fflush(logf);\n    }\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST1: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST1: (MHD_NO != res) false -- skipped MD5 userhash\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST2: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userdigest MD5\\n\");\n      fflush(logf);\n    }\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST2: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST2: (MHD_NO != res) false -- skipped MD5 userdigest\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST3: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userhash SHA256\\n\");\n      fflush(logf);\n    }\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST3: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST3: (MHD_NO != res) false -- skipped SHA256 userhash\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST4: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userdigest SHA256\\n\");\n      fflush(logf);\n    }\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST4: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST4: (MHD_NO != res) false -- skipped SHA256 userdigest\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST5: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userhash SHA512_256\\n\");\n      fflush(logf);\n    }\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST5: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST5: (MHD_NO != res) false -- skipped SHA512_256 userhash\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO != res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST6: (MHD_NO != res) true -- calling MHD_digest_auth_calc_userdigest SHA512_256\\n\");\n      fflush(logf);\n    }\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n    if (logf)\n    {\n      fprintf(logf, \"AFTER TEST6: res=%d\\n\", (int)res);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"TEST6: (MHD_NO != res) false -- skipped SHA512_256 userdigest\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (MHD_NO == res)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"FINAL: Failure detected (res==MHD_NO) -- returning 0\\n\");\n      fclose(logf);\n    }\n    return 0; /* Failure exit point */\n  }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  if (logf)\n  {\n    fprintf(logf, \"SUCCESS: entry added at new index=%lu -- returning 1\\n\", (unsigned long)(user_ids_used - 1));\n    fclose(logf);\n  }\n\n  return ! 0;\n}\n"
}