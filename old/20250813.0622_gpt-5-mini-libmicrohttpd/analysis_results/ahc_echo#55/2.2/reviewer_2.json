{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  DIR *dir;\n  struct stat buf;\n  char emsg[1024];\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    dir = opendir (\".\");\n    if (NULL == dir)\n    {\n      /* most likely cause: more concurrent requests than\n         available file descriptors / 2 */\n      snprintf (emsg,\n                sizeof (emsg),\n                \"Failed to open directory `.': %s\\n\",\n                strerror (errno));\n      response = MHD_create_response_from_buffer (strlen (emsg),\n                                                  emsg,\n                                                  MHD_RESPMEM_MUST_COPY);\n      if (NULL == response)\n        return MHD_NO;\n      ret = MHD_queue_response (connection,\n                                MHD_HTTP_SERVICE_UNAVAILABLE,\n                                response);\n      MHD_destroy_response (response);\n    }\n    else\n    {\n      response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                    32 * 1024,\n                                                    &dir_reader,\n                                                    dir,\n                                                    &dir_free_callback);\n      if (NULL == response)\n      {\n        closedir (dir);\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n      MHD_destroy_response (response);\n    }\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &file_free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression statement '(void) upload_data;' is an executed no\u2011op whose removal would not change program behaviour (it only suppresses a compiler warning). Because it performs no observable action and has no side effects, it qualifies as dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ahc_probe_ptr_int(const char *event, const void *p, int v)\n{\n  FILE *f = fopen(\"/tmp/logs/442.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s: ptr=%p int=%d\\n\", event, p, v);\n    fclose(f);\n  }\n}\nstatic void ahc_probe_msg(const char *event)\n{\n  FILE *f = fopen(\"/tmp/logs/442.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"%s\\n\", event);\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  DIR *dir;\n  struct stat buf;\n  char emsg[1024];\n\n  /* Log entry and initial pointers to help reproduce the no-op execution */\n  ahc_probe_msg(\"ENTER ahc_echo\");\n  ahc_probe_ptr_int(\"cls\", cls, 0);\n  ahc_probe_ptr_int(\"connection\", connection, 0);\n  ahc_probe_ptr_int(\"url\", url, 0);\n  ahc_probe_ptr_int(\"method\", method, 0);\n  ahc_probe_ptr_int(\"version\", version, 0);\n  ahc_probe_ptr_int(\"upload_data\", upload_data, 0);\n  ahc_probe_ptr_int(\"upload_data_size\", upload_data_size, 0);\n  ahc_probe_ptr_int(\"req_cls\", req_cls, 0);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  /* Evidence: the no-op expression '(void) upload_data;' above is executed. */\n  ahc_probe_msg(\"Executed no-op: (void) upload_data;\");\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n  {\n    ahc_probe_ptr_int(\"Unexpected method\", method, 0);\n    return MHD_NO;              /* unexpected method */\n  }\n  ahc_probe_msg(\"Method is GET\");\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    ahc_probe_msg(\"First call: setting *req_cls and returning MHD_YES\");\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  ahc_probe_msg(\"Second call: clearing *req_cls and proceeding\");\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  ahc_probe_ptr_int(\"fopen returned file\", file, 0);\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    ahc_probe_ptr_int(\"fileno\", NULL, fd);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      ahc_probe_msg(\"fileno returned -1, internal error\");\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      ahc_probe_ptr_int(\"fstat failed or not regular file, st_size\", NULL, (int) buf.st_size);\n      fclose (file);\n      file = NULL;\n    }\n  }\n  else\n  {\n    ahc_probe_msg(\"file is NULL after fopen, will try directory handling\");\n  }\n\n  if (NULL == file)\n  {\n    dir = opendir (\".\");\n    ahc_probe_ptr_int(\"opendir returned dir\", dir, 0);\n    if (NULL == dir)\n    {\n      /* most likely cause: more concurrent requests than\n         available file descriptors / 2 */\n      snprintf (emsg,\n                sizeof (emsg),\n                \"Failed to open directory `.': %s\\n\",\n                strerror (errno));\n      ahc_probe_msg(\"opendir failed\");\n      ahc_probe_ptr_int(\"emsg\", emsg, 0);\n\n      response = MHD_create_response_from_buffer (strlen (emsg),\n                                                  emsg,\n                                                  MHD_RESPMEM_MUST_COPY);\n      if (NULL == response)\n      {\n        ahc_probe_msg(\"MHD_create_response_from_buffer returned NULL\");\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection,\n                                MHD_HTTP_SERVICE_UNAVAILABLE,\n                                response);\n      ahc_probe_ptr_int(\"Queued response status\", NULL, (int) MHD_HTTP_SERVICE_UNAVAILABLE);\n      MHD_destroy_response (response);\n    }\n    else\n    {\n      response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                    32 * 1024,\n                                                    &dir_reader,\n                                                    dir,\n                                                    &dir_free_callback);\n      if (NULL == response)\n      {\n        closedir (dir);\n        ahc_probe_msg(\"MHD_create_response_from_callback returned NULL for directory\");\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n      ahc_probe_ptr_int(\"Queued response status\", NULL, (int) MHD_HTTP_OK);\n      MHD_destroy_response (response);\n    }\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &file_free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      ahc_probe_msg(\"MHD_create_response_from_callback returned NULL for file\");\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    ahc_probe_ptr_int(\"Queued response status for file\", NULL, (int) MHD_HTTP_OK);\n    MHD_destroy_response (response);\n  }\n\n  ahc_probe_ptr_int(\"EXIT ahc_echo returning ret\", NULL, (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_echo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim is not correct. The (void) upload_data; idiom is a deliberate, documented way to mark a parameter as unused and to suppress compiler warnings; it is not the kind of \u2018\u2018dead code\u2019\u2019 MISRA intends to forbid. Rule 2.2 targets operations that are executed but whose removal would have no effect on the *program\u2019s observable behaviour* (including timing in embedded systems). In this function the cast-to-void does not change runtime behaviour, but its purpose is to affect diagnostics/maintenance, and such uses are universally recognised as the proper way to indicate an unused parameter. The provided runtime probe evidence is also not relevant (the function was apparently not exercised by the test). Therefore the report misapplies Rule 2.2 to a conventional unused-parameter annotation; the code does not constitute a violation of MISRA C 2023 Rule 2.2 as claimed."
}