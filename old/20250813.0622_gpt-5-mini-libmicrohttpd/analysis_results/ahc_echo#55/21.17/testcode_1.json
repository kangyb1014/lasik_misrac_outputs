{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(method, MHD_HTTP_METHOD_GET) without first ensuring 'method' is a valid, non-NULL, NUL-terminated character array. If 'method' were NULL (or not NUL-terminated / not pointing to a properly sized object), strcmp would read beyond the bounds of the referenced object(s), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_echo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/447.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_echo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  DIR *dir;\n  struct stat buf;\n  char emsg[1024];\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    dir = opendir (\".\");\n    if (NULL == dir)\n    {\n      /* most likely cause: more concurrent requests than\n         available file descriptors / 2 */\n      snprintf (emsg,\n                sizeof (emsg),\n                \"Failed to open directory `.': %s\\n\",\n                strerror (errno));\n      response = MHD_create_response_from_buffer (strlen (emsg),\n                                                  emsg,\n                                                  MHD_RESPMEM_MUST_COPY);\n      if (NULL == response)\n        return MHD_NO;\n      ret = MHD_queue_response (connection,\n                                MHD_HTTP_SERVICE_UNAVAILABLE,\n                                response);\n      MHD_destroy_response (response);\n    }\n    else\n    {\n      response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                    32 * 1024,\n                                                    &dir_reader,\n                                                    dir,\n                                                    &dir_free_callback);\n      if (NULL == response)\n      {\n        closedir (dir);\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n      MHD_destroy_response (response);\n    }\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &file_free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_echo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper: append structured logs to /tmp/logs/447.txt.\n   This helper intentionally does not dereference 'method' or other\n   string pointers to avoid introducing additional out-of-bounds reads.\n*/\nstatic void\nahc_probe_log(const char *event, const char *url, const char *method, void **req_cls)\n{\n  FILE *f = fopen(\"/tmp/logs/447.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Log pointer values only (no %s on 'method' or 'url'). Also log the\n     current value stored in *req_cls when req_cls is non-NULL. */\n  fprintf(f, \"event=%s method_ptr=%p url_ptr=%p req_cls_ptr=%p req_cls_val=%p\\n\",\n          event,\n          (const void *) method,\n          (const void *) url,\n          (void *) req_cls,\n          (void *) (req_cls ? *req_cls : NULL));\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  DIR *dir;\n  struct stat buf;\n  char emsg[1024];\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and relevant pointer state. Do not dereference 'method'. */\n  ahc_probe_log(\"entry\", url, method, req_cls);\n\n  /* Log just before the strcmp that is suspected to be problematic. */\n  ahc_probe_log(\"before_strcmp\", url, method, req_cls);\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n  {\n    /* Log that an unexpected method was detected (method pointer only). */\n    ahc_probe_log(\"unexpected_method_return\", url, method, req_cls);\n    return MHD_NO;              /* unexpected method */\n  }\n\n  /* Log after successful method check. */\n  ahc_probe_log(\"after_method_check\", url, method, req_cls);\n\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    ahc_probe_log(\"first_call_mark\", url, method, req_cls);\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n\n  ahc_probe_log(\"reset_req_cls\", url, method, req_cls);\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    ahc_probe_log(\"file_opened\", url, method, req_cls);\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      ahc_probe_log(\"fileno_failed\", url, method, req_cls);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      ahc_probe_log(\"not_regular_file\", url, method, req_cls);\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    ahc_probe_log(\"open_dir\", url, method, req_cls);\n    dir = opendir (\".\");\n    if (NULL == dir)\n    {\n      /* most likely cause: more concurrent requests than\n         available file descriptors / 2 */\n      ahc_probe_log(\"opendir_failed\", url, method, req_cls);\n      snprintf (emsg,\n                sizeof (emsg),\n                \"Failed to open directory `.': %s\\n\",\n                strerror (errno));\n      response = MHD_create_response_from_buffer (strlen (emsg),\n                                                  emsg,\n                                                  MHD_RESPMEM_MUST_COPY);\n      if (NULL == response)\n        return MHD_NO;\n      ret = MHD_queue_response (connection,\n                                MHD_HTTP_SERVICE_UNAVAILABLE,\n                                response);\n      MHD_destroy_response (response);\n    }\n    else\n    {\n      ahc_probe_log(\"dir_opened\", url, method, req_cls);\n      response = MHD_create_response_from_callback (MHD_SIZE_UNKNOWN,\n                                                    32 * 1024,\n                                                    &dir_reader,\n                                                    dir,\n                                                    &dir_free_callback);\n      if (NULL == response)\n      {\n        closedir (dir);\n        ahc_probe_log(\"response_creation_failed_dir\", url, method, req_cls);\n        return MHD_NO;\n      }\n      ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n      MHD_destroy_response (response);\n    }\n  }\n  else\n  {\n    ahc_probe_log(\"serve_file_callback\", url, method, req_cls);\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &file_free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      ahc_probe_log(\"response_creation_failed_file\", url, method, req_cls);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n\n  ahc_probe_log(\"exit\", url, method, req_cls);\n  return ret;\n}\n"
}