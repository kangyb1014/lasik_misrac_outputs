{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function is_websocket_request:\nstruct MHD_Connection\n...\n#define WS_UPGRADE_VALUE \"websocket\"\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define WS_UPGRADE_VALUE \"websocket\"\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. WS_UPGRADE_VALUE is a string literal used where a const char * is expected (strcmp takes const char *). The macro expands to a string literal which is effectively immutable and used only via const-qualified parameters, so Rule 8.13 is not breached. (If stricter explicit const object were desired, one could use: static const char WS_UPGRADE_VALUE[] = \"websocket\".)"
}