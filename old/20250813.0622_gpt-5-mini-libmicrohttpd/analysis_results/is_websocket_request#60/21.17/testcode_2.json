{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(upg_header, WS_UPGRADE_VALUE) may read past the end of the object pointed to by upg_header if upg_header is not NUL-terminated. upg_header is obtained via MHD_lookup_connection_value which hands back pos->value (with an associated pos->value_size). The implementation does not guarantee the returned value is NUL-terminated, so strcmp can scan beyond pos->value_size until it finds a NUL, causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/487.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\nPlease provide the modified is_websocket_request code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/* Probe logger: append diagnostic information to /tmp/logs/487.txt.\n   This function does not dereference the pointers passed in (only prints their addresses\n   and nullness) so it does not introduce additional out-of-bounds string accesses.\n*/\nstatic void\nlog_ws_probe(const char *upg_header, const char *con_header, int strcmp_performed, int strcmp_result, int strstr_performed, int strstr_found)\n{\n  FILE *f = fopen(\"/tmp/logs/487.txt\", \"a\");\n  if (!f) {\n    /* Try to create the directory and reopen. If that fails, give up silently. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n    f = fopen(\"/tmp/logs/487.txt\", \"a\");\n    if (!f) {\n      return;\n    }\n  }\n\n  fprintf(f, \"is_websocket_request called\\n\");\n  fprintf(f, \"  upg_header ptr=%p, is_null=%d\\n\", (const void *)upg_header, (int)(upg_header == NULL));\n  fprintf(f, \"  con_header ptr=%p, is_null=%d\\n\", (const void *)con_header, (int)(con_header == NULL));\n\n  if (strcmp_performed) {\n    fprintf(f, \"  strcmp performed, result=%d\\n\", strcmp_result);\n  } else {\n    fprintf(f, \"  strcmp not performed\\n\");\n  }\n\n  if (strstr_performed) {\n    fprintf(f, \"  strstr performed, found=%d\\n\", strstr_found);\n  } else {\n    fprintf(f, \"  strstr not performed\\n\");\n  }\n\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  int strcmp_performed = 0;\n  int strcmp_result = 1; /* non-zero by default (not equal) */\n  int strstr_performed = 0;\n  int strstr_found = 0;\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  /* Preserve original logic but split it up to allow logging of control flow and\n     the result of strcmp and strstr. Note: we do not attempt to read or print\n     the contents of upg_header or con_header to avoid introducing additional\n     out-of-bounds accesses; only their pointer values and whether they are NULL\n     are logged. The strcmp and strstr calls are performed exactly as in the\n     original code. */\n  if ((upg_header != NULL) && (con_header != NULL)) {\n    strcmp_performed = 1;\n    strcmp_result = strcmp (upg_header, WS_UPGRADE_VALUE);\n\n    strstr_performed = 1;\n    strstr_found = (NULL != strstr (con_header, \"Upgrade\"));\n\n    log_ws_probe(upg_header, con_header, strcmp_performed, strcmp_result, strstr_performed, strstr_found);\n\n    return ((0 == strcmp_result) && strstr_found) ? MHD_YES : MHD_NO;\n  }\n  else {\n    /* Log that strcmp and strstr were not performed because one of the headers is NULL */\n    log_ws_probe(upg_header, con_header, 0, 0, 0, 0);\n    return MHD_NO;\n  }\n}\n"
}