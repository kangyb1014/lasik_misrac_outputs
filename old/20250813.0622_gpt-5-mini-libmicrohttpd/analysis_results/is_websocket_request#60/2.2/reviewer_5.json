{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In ahc_cb the statement '(void) upload_data; /* Unused. Silent compiler warning. */' is an executed no-op whose removal would not affect program behaviour (it only suppresses a compiler warning). This operation therefore constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_ws(const char *stage,\n                         const char *upg_header,\n                         const char *con_header,\n                         int upg_present,\n                         int con_present,\n                         int match_upg,\n                         int match_con)\n{\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[is_websocket_request] stage=%s\\n\", stage);\n        fprintf(f, \"  pointers: upg_header=%p, con_header=%p\\n\",\n                (void *) upg_header, (void *) con_header);\n        fprintf(f, \"  presence: upg_present=%d, con_present=%d\\n\",\n                upg_present, con_present);\n        fprintf(f, \"  checks: match_upg=%d, match_con=%d\\n\",\n                match_upg, match_con);\n        if (upg_header != NULL)\n        {\n            fprintf(f, \"  upg_header value=\\\"%s\\\"\\n\", upg_header);\n        }\n        if (con_header != NULL)\n        {\n            fprintf(f, \"  con_header value=\\\"%s\\\"\\n\", con_header);\n        }\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* The original code intentionally discards the unused parameter to silence\n     compiler warnings. We keep the original behavior but log that this cast\n     was executed so external analysis can observe the no-op. */\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  /* Log initial state before performing the checks. */\n  probe_log_ws(\"before_checks\", upg_header, con_header,\n               (upg_header != NULL), (con_header != NULL), -1, -1);\n\n  /* Preserve original logic while capturing intermediate results for logging. */\n  int upg_present = (upg_header != NULL);\n  int con_present = (con_header != NULL);\n  int match_upg = 0;\n  int match_con = 0;\n\n  if (upg_present)\n  {\n      match_upg = (0 == strcmp (upg_header, WS_UPGRADE_VALUE));\n  }\n  if (con_present)\n  {\n      match_con = (NULL != strstr (con_header, \"Upgrade\"));\n  }\n\n  /* Log the results of the component checks so the control path can be reproduced. */\n  probe_log_ws(\"after_checks\", upg_header, con_header,\n               upg_present, con_present, match_upg, match_con);\n\n  return ( (upg_header != NULL) && (con_header != NULL)\n           && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n           && (NULL != strstr (con_header, \"Upgrade\")) )\n         ? MHD_YES\n         : MHD_NO;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for is_websocket_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. First, the agent\u2019s scenario misidentifies the site: the posted function is is_websocket_request and contains \u201c(void) con;\u201d, whereas the agent described \u201c(void) upload_data;\u201d in ahc_cb. That aside, (void) con; is the common idiom to explicitly mark an unused parameter and to silence compiler warnings. By itself it performs no observable action (the expression merely evaluates the parameter and discards its value), so removing it would not change program behaviour in this context \u2014 which matches the textual definition of \u201cdead code\u201d. However, MISRA Rule 2.2 is intended to detect meaningful dead code that should be removed because it hides faults or wastes resources; the small explicit cast-to-void is an accepted, intentional idiom to document an unused parameter and to satisfy other rules or toolchains that would otherwise flag the parameter as unused. In short, the agent\u2019s claim of a Rule 2.2 violation is misplaced: the statement is an innocuous, intentional suppressor for compiler/tool diagnostics (and in practice would be treated as an acceptable idiom or handled via a documented deviation), not the sort of removable dead code the rule targets. Also the provided test evidence does not exercise or show any behaviour difference. Therefore the report is not correct."
}