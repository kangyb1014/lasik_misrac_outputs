{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement \"(void) url;\" is an expression statement whose only effect is to reference the parameter to silence a compiler warning. It performs no observable action and its removal would not change program behaviour, so it is dead code. Therefore Rule 2.2 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* Probe: record entry and parameter states to help reproduce the reported\n     violation. Logs go to /tmp/logs/482.txt. This preserves original logic\n     while adding only observational side effects (file logging). */\n  {\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (f) {\n      /* Log that function was entered and pointer values / header contents\n         (nullness and short preview) to show that 'con' is not otherwise\n         used in the logic of this function. */\n      fprintf(f, \"is_websocket_request: entered\\n\");\n      fprintf(f, \"  con ptr: %p\\n\", (void *)con);\n      fprintf(f, \"  upg_header ptr: %p\\n\", (const void *)upg_header);\n      fprintf(f, \"  con_header ptr: %p\\n\", (const void *)con_header);\n      if (upg_header) {\n        fprintf(f, \"  upg_header preview: '%.*s'\\n\", 64, upg_header);\n      } else {\n        fprintf(f, \"  upg_header: NULL\\n\");\n      }\n      if (con_header) {\n        fprintf(f, \"  con_header preview: '%.*s'\\n\", 64, con_header);\n      } else {\n        fprintf(f, \"  con_header: NULL\\n\");\n      }\n      /* Note: the following line mirrors the original code's intent to\n         silence compiler warnings about the unused parameter 'con'. The\n         agent reported this cast statement as dead code because it has no\n         observable effect on program behaviour (aside from preventing a\n         compiler warning). We log the presence of that statement so that\n         reviewers can see it in context. */\n      fprintf(f, \"  observed statement: (void) con;  // reported as dead code\\n\");\n      fclose(f);\n    }\n  }\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for is_websocket_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The statement (void) con; is an expression statement that is executed but has no observable effect on program behaviour; removing it does not change the program's behaviour. That matches the given definition of \"dead code\" in MISRA C 2023 Rule 2.2, so the code as written violates Rule 2.2.\n\nNotes and mitigation options:\n- The (void) parameter idiom is a common way to silence unused-parameter warnings, but under a strict reading of Rule 2.2 it is dead code and therefore not permitted.\n- Remedies include: remove the parameter name from the function definition (if your toolchain and style permit unnamed parameters in definitions), actually use the parameter, refactor the API so the parameter is not present, or apply a documented, project-accepted mechanism for marking parameters unused (for example a standardized macro or a compiler attribute sanctioned by the project policy). Any allowed suppression should be justified and recorded in the project deviation procedures required by MISRA.\n"
}