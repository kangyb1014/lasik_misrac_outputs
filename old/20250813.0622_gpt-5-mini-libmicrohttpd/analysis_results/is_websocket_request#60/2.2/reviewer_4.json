{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In ahc_cb the statement \u201c(void) upload_data_size;\u201d is an expression statement with no side\u2011effects whose removal would not affect program behaviour (it only suppresses an unused\u2011parameter warning). According to Rule 2.2 this is dead code and therefore violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void is_websocket_log_probe(const struct MHD_Connection *con,\n                                   const char *upg_header,\n                                   const char *con_header,\n                                   int is_ws)\n{\n    FILE *f = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging; do not affect program flow */\n    }\n\n    fprintf(f, \"is_websocket_request ENTER: con=%p, upg_header=%p, con_header=%p\\n\",\n            (const void *)con, (const void *)upg_header, (const void *)con_header);\n    fprintf(f, \"is_websocket_request STRINGS: upg_header=\\\"%s\\\", con_header=\\\"%s\\\"\\n\",\n            upg_header ? upg_header : \"(NULL)\", con_header ? con_header : \"(NULL)\");\n    fprintf(f, \"is_websocket_request DECISION: is_websocket=%d\\n---\\n\", is_ws);\n    fclose(f);\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* Preserve original behavior while logging inputs and the branch taken.\n   * Note: (void) con; removed because the probe uses the parameter for logging.\n   */\n\n  int is_ws = ((upg_header != NULL) && (con_header != NULL)\n               && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n               && (NULL != strstr (con_header, \"Upgrade\")))\n              ? 1 : 0;\n\n  /* Log parameters and the computed decision so other agents can reproduce\n   * and gather evidence for the reported violation scenario. */\n  is_websocket_log_probe(con, upg_header, con_header, is_ws);\n\n  return is_ws ? MHD_YES : MHD_NO;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for is_websocket_request. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct. The statement \u201c(void) upload_data_size;\u201d (and equivalently the \u201c(void) con;\u201d in is_websocket_request) is an expression statement that performs no observable action and has no side effects; removing it does not change program behaviour. By the plain text of MISRA C 2023 Rule 2.2 (\u201cAny operation that is executed but whose removal would not affect program behaviour constitutes dead code\u201d), that construct is dead code and therefore constitutes a Rule 2.2 violation.\n\nNotes and practical guidance: this idiom is commonly used to suppress unused-parameter compiler warnings, but that does not change the classification under a strict reading of Rule 2.2. To address the issue without introducing dead code, consider one of the following: remove the unused parameter (and update all callers), use a compiler-supported attribute to mark the parameter as unused, or record a formal MISRA deviation/justification for the (void) cast if the project policy allows it."
}