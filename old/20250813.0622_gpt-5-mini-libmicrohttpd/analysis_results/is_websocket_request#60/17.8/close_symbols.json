{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'is_websocket_request': {'callees': [], 'callers': ['ahc_cb']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "enum MHD_Result (definition) and enumerators MHD_YES, MHD_NO",
    "WS_UPGRADE_VALUE (macro/constant definition)",
    "strcmp (declaration/prototype)",
    "strstr (declaration/prototype)",
    "NULL (macro definition)",
    "struct MHD_Connection (type definition)"
  ],
  "explanation": "- enum MHD_Result and MHD_YES/MHD_NO: Needed to confirm the return type and enumerator definitions; ensures there are no hidden side-effects or macros that could alter parameters through the return-path.\n- WS_UPGRADE_VALUE: The code compares upg_header to WS_UPGRADE_VALUE; its definition is required to verify it is a simple string constant/macro (no function-like macro with side effects that could modify parameter pointers).\n- strcmp declaration/prototype: Required to confirm its parameter types are const char * (i.e., it does not modify the pointer targets) and that the call cannot modify the function parameters (no non-obvious macro replacement).\n- strstr declaration/prototype: Same reason as strcmp \u2014 to confirm it takes const char * and does not modify pointer parameters or have hidden side effects.\n- NULL macro: To ensure comparisons against NULL are standard constant checks and there is no non-standard definition that could modify parameters.\n- struct MHD_Connection definition: Although `con` is unused in the function, having the type definition confirms there is no unusual macro/type trickery that could cause modification of the pointer parameter via its type (and helps rule out any implicit modifications)."
}