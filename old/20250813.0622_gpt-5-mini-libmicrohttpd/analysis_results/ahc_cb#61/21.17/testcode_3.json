{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nahc_cb obtains header values via MHD_lookup_connection_value which returns a pointer to the header value (pos->value) but ahc_cb does not obtain or check the corresponding value size. is_websocket_request then calls strcmp(upg_header, WS_UPGRADE_VALUE) and strstr(con_header, \"Upgrade\") on those pointers after only testing for NULL. If the underlying stored header value is not guaranteed to be NUL-terminated (e.g. pos->value is a non-terminated buffer whose length is held in pos->value_size), the calls to strcmp and strstr can read past the bounds of the object and cause out-of-bounds accesses. This scenario violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/495.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "static void ahc_log_header(const char *tag, struct MHD_Connection *con, const char *hdr_name, const char *ptr)\n{\n  FILE *f = fopen(\"/tmp/logs/495.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf(f, \"[ahc_cb] %s: header_name='%s' ptr=%p\\n\", tag, hdr_name, (void *) ptr);\n\n  /* Try to obtain a safe size via the _n variant. If available, dump a\n     bounded number of bytes (hex) so we do not read beyond bounds. If\n     the _n lookup fails, do NOT attempt to dereference the pointer to\n     avoid introducing an out-of-bounds read in the logger. */\n  {\n    const char *val = NULL;\n    size_t val_size = 0;\n    enum MHD_Result r = MHD_lookup_connection_value_n(con, MHD_HEADER_KIND,\n                                                      hdr_name, strlen(hdr_name),\n                                                      &val, &val_size);\n    if (MHD_YES == r)\n    {\n      fprintf(f, \"  lookup_n: YES size=%zu val_ptr=%p\\n\", val_size, (void *) val);\n      /* Dump at most 256 bytes as hex to show content safely. */\n      size_t dump = (val_size > 256U) ? 256U : val_size;\n      fprintf(f, \"  dump_first_%zu_bytes(hex):\", dump);\n      for (size_t i = 0; i < dump; ++i)\n      {\n        fprintf(f, \" %02x\", (unsigned char) val[i]);\n      }\n      fprintf(f, \"\\n\");\n    }\n    else\n    {\n      fprintf(f, \"  lookup_n: NO (size unknown) - not dumping contents to avoid OOB\\n\");\n    }\n  }\n\n  fclose(f);\n}\n\nstatic void ahc_log_simple(const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/495.txt\", \"a\");\n  if (NULL == f)\n    return;\n  fprintf(f, \"%s\\n\", msg);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  /* Log the headers and attempt to obtain sizes via the _n API for safe\n     inspection. This logging intentionally avoids calling strlen or\n     dereferencing pointers when the size is unknown, so the logger does\n     not itself introduce out-of-bounds reads. */\n  ahc_log_header(\"upgrade_header\", con, MHD_HTTP_HEADER_UPGRADE, upg_header);\n  ahc_log_header(\"connection_header\", con, MHD_HTTP_HEADER_CONNECTION, con_header);\n\n  {\n    char msg[256];\n    snprintf(msg, sizeof(msg), \"[ahc_cb] calling is_websocket_request upg_ptr=%p con_ptr=%p\",\n             (void *) upg_header, (void *) con_header);\n    ahc_log_simple(msg);\n  }\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_log_simple(\"[ahc_cb] is_websocket_request returned NO -> send_chat_page\");\n    return send_chat_page (con);\n  }\n  ahc_log_simple(\"[ahc_cb] is_websocket_request returned YES\");\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_log_simple(\"[ahc_cb] method/version mismatch -> send_bad_request\");\n    return send_bad_request (con);\n  }\n  ahc_log_simple(\"[ahc_cb] method/version OK\");\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n\n  /* Log ws_version_header safely. */\n  ahc_log_header(\"ws_version_header\", con, MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION, ws_version_header);\n\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_log_simple(\"[ahc_cb] ws_version_header missing or mismatch -> send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n  ahc_log_simple(\"[ahc_cb] ws_version_header OK\");\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n\n  {\n    char msg[256];\n    snprintf(msg, sizeof(msg), \"[ahc_cb] ws_key lookup_n ret=%d key_size=%zu ws_key_ptr=%p\",\n             (int) ret, key_size, (void *) ws_key_header);\n    ahc_log_simple(msg);\n  }\n\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_log_simple(\"[ahc_cb] ws_key missing or wrong size -> send_bad_request\");\n    return send_bad_request (con);\n  }\n  ahc_log_simple(\"[ahc_cb] ws_key OK; calling ws_get_accept_value\");\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    ahc_log_simple(\"[ahc_cb] ws_get_accept_value returned NO\");\n    return ret;\n  }\n  ahc_log_simple(\"[ahc_cb] ws_get_accept_value returned OK\");\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    ahc_log_simple(\"[ahc_cb] failed to add Sec-WebSocket-Accept header -> MHD_NO\");\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    ahc_log_simple(\"[ahc_cb] failed to add Upgrade header -> MHD_NO\");\n    return MHD_NO;\n  }\n  ahc_log_simple(\"[ahc_cb] headers added, queuing switching protocols response\");\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n\n  {\n    char msg[128];\n    snprintf(msg, sizeof(msg), \"[ahc_cb] returning ret=%d\", (int) ret);\n    ahc_log_simple(msg);\n  }\n\n  return ret;\n}\n"
}