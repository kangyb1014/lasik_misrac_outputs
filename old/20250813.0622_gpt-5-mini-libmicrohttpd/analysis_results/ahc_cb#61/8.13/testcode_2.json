{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'con' is declared as 'struct MHD_Connection *con' but is neither modified nor dereferenced in is_websocket_request (it is only (void) con;). According to Rule 8.13 it could and should be declared 'const struct MHD_Connection *con' (the other pointer parameters are already const), so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper: append a formatted message to /tmp/logs/491.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/491.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Preserve unused-parameter markers from original code. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log entry and initial state. */\n  probe_log(\"ahc_cb ENTRY: con=%p, req_cls_ptr=%p, *req_cls=%p, method='%s', version='%s', url='%s'\",\n            (void *) con, (void *) req_cls, (void *) (req_cls ? *req_cls : NULL),\n            method ? method : \"(null)\", version ? version : \"(null)\", url ? url : \"(null)\");\n\n  if (NULL == *req_cls)\n  {\n    probe_log(\"ahc_cb: initial request class is NULL; setting to (void*)1 and returning MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  probe_log(\"ahc_cb: request class was non-NULL; clearing and continuing\");\n  *req_cls = NULL;\n\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  probe_log(\"ahc_cb: headers: Upgrade='%s', Connection='%s'\",\n            upg_header ? upg_header : \"(null)\", con_header ? con_header : \"(null)\");\n\n  probe_log(\"ahc_cb: calling is_websocket_request with con=%p, upg_header='%s', con_header='%s'\",\n            (void *) con, upg_header ? upg_header : \"(null)\", con_header ? con_header : \"(null)\");\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    probe_log(\"ahc_cb: is_websocket_request returned MHD_NO -> sending chat page (non-websocket request)\");\n    return send_chat_page (con);\n  }\n  probe_log(\"ahc_cb: is_websocket_request indicates websocket request; continuing\");\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    probe_log(\"ahc_cb: method/version mismatch: method='%s', version='%s' -> sending bad request\",\n              method ? method : \"(null)\", version ? version : \"(null)\");\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  probe_log(\"ahc_cb: Sec-WebSocket-Version header='%s'\",\n            ws_version_header ? ws_version_header : \"(null)\");\n\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    probe_log(\"ahc_cb: websocket version invalid or missing -> sending upgrade required\");\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n\n  probe_log(\"ahc_cb: lookup Sec-WebSocket-Key returned %d, key_size=%zu, key_header='%s'\",\n            (int) ret, key_size, ws_key_header ? ws_key_header : \"(null)\");\n\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    probe_log(\"ahc_cb: Sec-WebSocket-Key invalid -> sending bad request\");\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  probe_log(\"ahc_cb: ws_get_accept_value returned %d, accept_val='%s'\",\n            (int) ret, ws_ac_value ? ws_ac_value : \"(null)\");\n\n  if (MHD_NO == ret)\n  {\n    probe_log(\"ahc_cb: ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  probe_log(\"ahc_cb: created response for upgrade: res=%p\", (void *) res);\n\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    probe_log(\"ahc_cb: failed to add Sec-WebSocket-Accept header; cleaning up\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log(\"ahc_cb: added Sec-WebSocket-Accept header: '%s'\", ws_ac_value ? ws_ac_value : \"(null)\");\n\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    probe_log(\"ahc_cb: failed to add Upgrade header; destroying response and returning MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log(\"ahc_cb: added Upgrade header and queuing switching protocols response\");\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  probe_log(\"ahc_cb: MHD_queue_response returned %d\", (int) ret);\n  MHD_destroy_response (res);\n  probe_log(\"ahc_cb: EXIT returning %d\", (int) ret);\n  return ret;\n}\n"
}