{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) req_cls;' (and the similar '(void) cls;', '(void) con;', etc.) in uh_cb is an executed no-op used only to silence compiler warnings about unused parameters. Its removal would not affect program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/490.txt. */\nstatic void\nahc_probe (const char *event, void *cls, struct MHD_Connection *con,\n           const char *url, const char *method, const char *version,\n           const char *upload_data, size_t *upload_data_size, void **req_cls,\n           const char *extra)\n{\n  FILE *f = fopen (\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  fprintf (f, \"ahc_cb: %s\\n\", event);\n  fprintf (f, \"  cls=%p, con=%p\\n\", cls, (void *) con);\n  fprintf (f, \"  url=%s\\n\", (url != NULL) ? url : \"(null)\");\n  fprintf (f, \"  method=%s, version=%s\\n\",\n           (method != NULL) ? method : \"(null)\",\n           (version != NULL) ? version : \"(null)\");\n  fprintf (f, \"  upload_data=%p, upload_data_size=%p\\n\",\n           (void *) upload_data, (void *) upload_data_size);\n  fprintf (f, \"  req_cls_ptr=%p\\n\", (void *) req_cls);\n  if (NULL != req_cls)\n  {\n    fprintf (f, \"  *req_cls=%p\\n\", (void *) *req_cls);\n  }\n  if (extra != NULL)\n  {\n    fprintf (f, \"  extra=%s\\n\", extra);\n  }\n  fprintf (f, \"---\\n\");\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Original no-op casts retained to preserve original source shape. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Probe entry: record that the function was entered and parameter state. */\n  ahc_probe (\"entry\", cls, con, url, method, version, upload_data,\n             upload_data_size, req_cls, NULL);\n\n  if (NULL == *req_cls)\n  {\n    /* Log the control path where req_cls is NULL and the early-return occurs. */\n    ahc_probe (\"req_cls_null_before_set\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"setting *req_cls to (void*)1 and returning MHD_YES\");\n\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  /* Log that we are continuing past the initial request-setup handshake. */\n  ahc_probe (\"continuing_after_req_cls\", cls, con, url, method, version,\n             upload_data, upload_data_size, req_cls, NULL);\n\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_probe (\"not_websocket_request\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"will call send_chat_page\");\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_probe (\"bad_method_or_version\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"will call send_bad_request\");\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_probe (\"bad_ws_version\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"will call send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_probe (\"bad_ws_key\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"will call send_bad_request (key missing or wrong size)\");\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    ahc_probe (\"ws_get_accept_failed\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"ws_get_accept_value returned MHD_NO\");\n    return ret;\n  }\n\n  /* Log that we're creating an upgrade response and the accept value. */\n  ahc_probe (\"creating_upgrade_response\", cls, con, url, method, version,\n             upload_data, upload_data_size, req_cls, ws_ac_value);\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    ahc_probe (\"add_accept_header_failed\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"failed to add accept header\");\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    ahc_probe (\"add_upgrade_header_failed\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls,\n               \"failed to add upgrade header\");\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n\n  /* Log the result of queuing the response and that we're about to cleanup. */\n  {\n    char extra_buf[64];\n    snprintf (extra_buf, sizeof (extra_buf), \"queue_response_ret=%d\", (int) ret);\n    ahc_probe (\"queued_response\", cls, con, url, method, version,\n               upload_data, upload_data_size, req_cls, extra_buf);\n  }\n\n  MHD_destroy_response (res);\n  return ret;\n}\n"
}