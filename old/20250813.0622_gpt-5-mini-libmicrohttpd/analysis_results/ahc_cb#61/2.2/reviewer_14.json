{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement \u2018(void) upload_data_size;\u2019 is an expression statement with no side\u2011effects used only to suppress an \"unused parameter\" compiler warning. This operation is executed but removing it would not change program behaviour (it neither reads nor modifies observable state), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/490.txt\", \"a\");\n  if (NULL == f)\n  {\n    return;\n  }\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fputc ('\\n', f);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Log entry and incoming parameter identities so the trace can be used\n     to demonstrate that upload_data_size is passed in but not used later. */\n  probe_log (\"ahc_cb: entry: cls=%p con=%p url=%p method=%s version=%s\",\n             cls, (void *) con, (void *) url, (method != NULL) ? method : \"(null)\",\n             (version != NULL) ? version : \"(null)\");\n  probe_log (\"ahc_cb: upload_data=%p upload_data_size_ptr=%p req_cls=%p\",\n             (void *) upload_data, (void *) upload_data_size, (void *) req_cls);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n\n  /* Probe immediately before and after the void-cast expression for\n     upload_data_size so logs show the expression is executed although it\n     has no observable effect. This provides evidence for the claim that\n     the statement is dead code (it executes but does not affect behavior). */\n  probe_log (\"ahc_cb: about to execute void-cast for upload_data_size (ptr=%p)\",\n             (void *) upload_data_size);\n\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  probe_log (\"ahc_cb: executed void-cast for upload_data_size (ptr=%p)\",\n             (void *) upload_data_size);\n\n  if (NULL == *req_cls)\n  {\n    probe_log (\"ahc_cb: initial request stage: *req_cls is NULL -> promote and return MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  probe_log (\"ahc_cb: second call for request: clearing *req_cls and continuing\");\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  probe_log (\"ahc_cb: headers: Upgrade=%p Connection=%p\",\n             (void *) upg_header, (void *) con_header);\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    probe_log (\"ahc_cb: not a websocket request -> send_chat_page\");\n    return send_chat_page (con);\n  }\n  probe_log (\"ahc_cb: websocket request detected\");\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    probe_log (\"ahc_cb: method/version mismatch method=%s version=%s -> bad request\",\n               (method != NULL) ? method : \"(null)\",\n               (version != NULL) ? version : \"(null)\");\n    return send_bad_request (con);\n  }\n  probe_log (\"ahc_cb: method/version OK\");\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  probe_log (\"ahc_cb: Sec-WebSocket-Version header ptr=%p val=%s\",\n             (void *) ws_version_header,\n             (ws_version_header != NULL) ? ws_version_header : \"(null)\");\n\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    probe_log (\"ahc_cb: websocket version missing/unsupported -> send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n  probe_log (\"ahc_cb: websocket version OK\");\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  probe_log (\"ahc_cb: lookup key returned ret=%d key_ptr=%p key_size=%zu\",\n             (int) ret, (void *) ws_key_header, key_size);\n\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    probe_log (\"ahc_cb: bad websocket key -> send_bad_request\");\n    return send_bad_request (con);\n  }\n  probe_log (\"ahc_cb: websocket key OK\");\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  probe_log (\"ahc_cb: ws_get_accept_value returned ret=%d ws_ac_value_ptr=%p\",\n             (int) ret, (void *) ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    probe_log (\"ahc_cb: ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n  probe_log (\"ahc_cb: created websocket accept value at %p\", (void *) ws_ac_value);\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    probe_log (\"ahc_cb: failed to add Sec-WebSocket-Accept header -> cleanup and return MHD_NO\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log (\"ahc_cb: added Sec-WebSocket-Accept header, freeing temporary accept value\");\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    probe_log (\"ahc_cb: failed to add Upgrade header -> destroy response and return MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  probe_log (\"ahc_cb: added Upgrade header, queueing response\");\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  probe_log (\"ahc_cb: MHD_queue_response returned %d\", (int) ret);\n  MHD_destroy_response (res);\n  probe_log (\"ahc_cb: exit (ret=%d)\", (int) ret);\n  return ret;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for ahc_cb. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A's report is correct. The statement \u201c(void) upload_data_size;\u201d is an expression statement that is executed at runtime but has no side\u2011effects; removing that statement would not change the observable behaviour of the program. That matches the rule text for MISRA C 2023 Rule 2.2 (an operation is dead code if it is executed but its removal would not affect program behaviour). The same reasoning applies to the other unused-parameter void-casts in the function (e.g. (void) cls; (void) url; (void) upload_data;). Note: although the (void)parameter idiom is commonly used to suppress compiler warnings, under the plain text of Rule 2.2 it constitutes dead code; to comply with MISRA you must instead remove or avoid unused parameters (or justify a formal deviation), or use a permitted mechanism (compiler attributes or configuration) that does not introduce executed no-op code."
}