{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) con;' is an expression statement that performs no observable action (it merely evaluates and discards the value of the parameter). Removing that statement would not change program behaviour, so it constitutes dead code under the Rule 2.2 definition. Thus the presence of '(void) con;' (and similar '(void) url;', etc.) in the function body violates MISRA C 2023 Rule 2.2. Recommended fixes: remove the no-op cast statements and, if the parameters must remain for signature compatibility, omit the parameter names in the function prototype/definition (e.g. 'struct MHD_Connection * /*con*/') or use a standard compiler-supported attribute to mark parameters as intentionally unused.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append structured logs useful to reproduce the reported\n   no-op cast / dead-code scenario. This preserves all original logic and\n   only records control flow and state to /tmp/logs/490.txt. */\nstatic void ahc_probe_log(const char *event,\n                          struct MHD_Connection *con,\n                          const char *url,\n                          const char *method,\n                          const char *version,\n                          const char *upload_data,\n                          size_t *upload_data_size,\n                          void *req_cls)\n{\n  FILE *fp = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n  /* Log a compact, comma-separated record. Protect against NULL strings. */\n  fprintf(fp, \"EVENT=%s, con=%p, url=%s, method=%s, version=%s, upload_data=%p, upload_data_size=%p, req_cls=%p\\n\",\n          event,\n          (void *) con,\n          (url != NULL) ? url : \"(null)\",\n          (method != NULL) ? method : \"(null)\",\n          (version != NULL) ? version : \"(null)\",\n          (void *) upload_data,\n          (void *) upload_data_size,\n          req_cls);\n  fclose(fp);\n}\n\nstatic void ahc_probe_log_msg(const char *event, const char *msg)\n{\n  FILE *fp = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n  fprintf(fp, \"EVENT=%s, MSG=%s\\n\", event, (msg != NULL) ? msg : \"(null)\");\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  /* Log entry and raw parameter state before the no-op casts. */\n  ahc_probe_log(\"ENTRY_BEFORE_UNUSED_CASTS\", con, url, method, version,\n                upload_data, upload_data_size, (req_cls != NULL) ? *req_cls : NULL);\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  ahc_probe_log_msg(\"CAST_EXECUTED\", \"(void) cls executed\");\n  (void) url;               /* Unused. Silent compiler warning. */\n  ahc_probe_log_msg(\"CAST_EXECUTED\", \"(void) url executed\");\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  ahc_probe_log_msg(\"CAST_EXECUTED\", \"(void) upload_data executed\");\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  ahc_probe_log_msg(\"CAST_EXECUTED\", \"(void) upload_data_size executed\");\n\n  /* Log after the no-op casts to show that the casts performed no\n     observable mutation to the parameters (addresses/strings remain). */\n  ahc_probe_log(\"ENTRY_AFTER_UNUSED_CASTS\", con, url, method, version,\n                upload_data, upload_data_size, (req_cls != NULL) ? *req_cls : NULL);\n\n  if (NULL == *req_cls)\n  {\n    ahc_probe_log_msg(\"BRANCH\", \"Initial call for this connection - marking req_cls and returning MHD_YES\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  ahc_probe_log_msg(\"BRANCH\", \"Second call (or subsequent) for this connection - proceeding\");\n  *req_cls = NULL;\n\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  ahc_probe_log(\"LOOKUP_HEADERS\", con, url, method, version,\n                upload_data, upload_data_size, (req_cls != NULL) ? *req_cls : NULL);\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_probe_log_msg(\"DECISION\", \"Not a websocket request - send_chat_page\");\n    return send_chat_page (con);\n  }\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_probe_log_msg(\"DECISION\", \"Method/version mismatch - send_bad_request\");\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_probe_log_msg(\"DECISION\", \"Missing or wrong websocket version header - send_upgrade_required\");\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  ahc_probe_log(\"LOOKUP_WS_KEY\", con, ws_key_header, method, version,\n                upload_data, upload_data_size, (req_cls != NULL) ? *req_cls : NULL);\n\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_probe_log_msg(\"DECISION\", \"Websocket key lookup failed or wrong length - send_bad_request\");\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  ahc_probe_log_msg((MHD_NO == ret) ? \"DECISION_WS\" : \"WS_ACCEPT_CALC\", \"ws_get_accept_value returned\");\n  if (MHD_NO == ret)\n  {\n    ahc_probe_log_msg(\"ERROR\", \"ws_get_accept_value failed - returning ret\");\n    return ret;\n  }\n\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    ahc_probe_log_msg(\"ERROR\", \"Failed to add Sec-WebSocket-Accept header\");\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    ahc_probe_log_msg(\"ERROR\", \"Failed to add Upgrade header\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  ahc_probe_log_msg(\"FINAL\", \"Queued response - cleaning up and returning\");\n  MHD_destroy_response (res);\n  return ret;\n}\n"
}