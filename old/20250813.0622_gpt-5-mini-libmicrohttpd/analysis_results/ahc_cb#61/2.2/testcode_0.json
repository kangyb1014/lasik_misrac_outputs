{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) extra_in;' in uh_cb is an executed no-op used only to silence an \"unused parameter\" warning. Removing that statement would not change program behaviour, so it qualifies as dead code under MISRA C 2023 Rule 2.2. (Location: uh_cb, the cast-to-void expression has no side effects and only documents the parameter as unused.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified ahc_cb code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of ahc_cb as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of ahc_cb:\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified ahc_cb code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper logging functions to capture control flow/state to /tmp/logs/490.txt */\nstatic const char *ahc_safe_str (const char *s)\n{\n  return (s != NULL) ? s : \"(null)\";\n}\n\nstatic void ahc_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  ahc_log (\"ahc_cb ENTRY: cls=%p con=%p url=%s method=%s version=%s upload_data=%p upload_data_size=%p req_cls=%p *req_cls=%p\",\n           cls, (void *) con, ahc_safe_str (url), ahc_safe_str (method), ahc_safe_str (version), (void *) upload_data, (void *) upload_data_size, (void *) req_cls, (void *) (req_cls ? *req_cls : NULL));\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    ahc_log (\"ahc_cb: initial request observation, setting *req_cls and returning MHD_YES (expect more callbacks)\");\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n\n  ahc_log (\"ahc_cb: proceeding to handle request, clearing *req_cls (was %p)\", (void *) *req_cls);\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n\n  ahc_log (\"ahc_cb: headers: Upgrade=%s Connection=%s\",\n           ahc_safe_str (upg_header), ahc_safe_str (con_header));\n\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    ahc_log (\"ahc_cb: not a websocket request -> send_chat_page\");\n    return send_chat_page (con);\n  }\n\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    ahc_log (\"ahc_cb: method/version mismatch: method=%s version=%s -> send_bad_request\",\n             ahc_safe_str (method), ahc_safe_str (version));\n    return send_bad_request (con);\n  }\n\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    ahc_log (\"ahc_cb: websocket version header missing or invalid: received=%s expected=%s -> send_upgrade_required\",\n             ahc_safe_str (ws_version_header), ahc_safe_str (WS_SEC_WEBSOCKET_VERSION));\n    return send_upgrade_required (con);\n  }\n\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  ahc_log (\"ahc_cb: lookup websocket key returned ret=%d ws_key_header=%s key_size=%zu\",\n           (int) ret, ahc_safe_str (ws_key_header), key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    ahc_log (\"ahc_cb: websocket key lookup failed or wrong size -> send_bad_request\");\n    return send_bad_request (con);\n  }\n\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  ahc_log (\"ahc_cb: ws_get_accept_value returned %d ws_ac_value=%p (string=%s)\", (int) ret, (void *) ws_ac_value, ahc_safe_str (ws_ac_value));\n  if (MHD_NO == ret)\n  {\n    ahc_log (\"ahc_cb: ws_get_accept_value failed -> returning %d\", (int) ret);\n    return ret;\n  }\n\n  ahc_log (\"ahc_cb: creating upgrade response (uh_cb will be used for upgrade connection handling)\");\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    ahc_log (\"ahc_cb: failed to add Sec-WebSocket-Accept header -> cleaning up and returning MHD_NO (ws_ac_value=%s)\", ahc_safe_str (ws_ac_value));\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    ahc_log (\"ahc_cb: failed to add Upgrade header -> destroying response and returning MHD_NO\");\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  ahc_log (\"ahc_cb: MHD_queue_response returned %d, destroying response and returning this value\", (int) ret);\n  MHD_destroy_response (res);\n  return ret;\n}\n"
}