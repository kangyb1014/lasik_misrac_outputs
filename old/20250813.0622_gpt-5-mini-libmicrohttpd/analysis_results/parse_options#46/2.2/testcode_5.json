{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code contains an if (1) { ... } around the AF_INET case body. The conditional expression (if (1)) is always true and is evaluated at runtime, but removing the if (1) (replacing it with an ordinary block { ... } or removing the check) would not change program behaviour. Thus the conditional test is an executed operation whose removal would not affect behaviour \u2014 i.e. dead code (redundant constant conditional).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/370.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (f == NULL) {\n        return; /* If logging fails, do not affect program behaviour */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and key state information so callers can trace execution. */\n  probe_log(\"parse_options ENTER: daemon=%p, params=%p\", (void *) daemon, (void *) params);\n\n  va_start (ap, params);\n  probe_log(\"parse_options: va_start called\");\n\n  /* Log that we are about to call parse_options_va and record the va_list address\n     (address logged for debugging only; does not change behaviour). */\n  probe_log(\"parse_options: calling parse_options_va with va_list=%p\", (void *) &ap);\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log(\"parse_options: parse_options_va returned %d\", (int) ret);\n\n  va_end (ap);\n  probe_log(\"parse_options: va_end called, returning %d\", (int) ret);\n\n  return ret;\n}\n"
}