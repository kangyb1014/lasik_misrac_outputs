{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log_open_and_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm)) {\n        char buf[64];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n            fprintf(f, \"%s - \", buf);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic enum MHD_Result\nparse_options_va (struct MHD_Daemon *daemon,\n                  struct MHD_InterimParams_ *params,\n                  va_list ap)\n{\n    (void) ap; /* we do not inspect the varargs in the stub */\n\n    probe_log_open_and_write(\"parse_options_va: entered. daemon=%p params=%p\",\n                             (void *)daemon, (void *)params);\n\n    /* Simulate doing some work and returning a result. */\n    probe_log_open_and_write(\"parse_options_va: returning %d\", (int)MHD_RESULT_OK);\n    return MHD_RESULT_OK;\n}\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and pointer/state information */\n  probe_log_open_and_write(\"parse_options: entered. daemon=%p params=%p\",\n                           (void *)daemon, (void *)params);\n\n  va_start (ap, params);\n  probe_log_open_and_write(\"parse_options: after va_start\");\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log_open_and_write(\"parse_options: parse_options_va returned %d\", (int)ret);\n  va_end (ap);\n  probe_log_open_and_write(\"parse_options: after va_end, returning %d\", (int)ret);\n  return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\ndaemon.c: In function 'parse_options_va':\ndaemon.c:6651:69: error: 'MHD_RESULT_OK' undeclared (first use in this function)\n 6651 |     probe_log_open_and_write(\"parse_options_va: returning %d\", (int)MHD_RESULT_OK);\n      |                                                                     ^~~~~~~~~~~~~\ndaemon.c:6651:69: note: each undeclared identifier is reported only once for each function it appears in\nmake[3]: *** [Makefile:2112: libmicrohttpd_la-daemon.lo] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of parse_options as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal type definitions to allow the functions to compile. These mirror\n   the names used in the original code but keep the definitions simple and\n   non-functional (opaque) as required. */\nstruct MHD_Daemon { int dummy; };\nstruct MHD_InterimParams_ { int dummy; };\n\n/* The enum used by the original code; ensure the symbol MHD_RESULT_OK is\n   available so the code compiles. */\nenum MHD_Result {\n    MHD_RESULT_OK = 0,\n    MHD_RESULT_ERROR = 1\n};\n\nstatic void probe_log_open_and_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n    if (!f)\n        return;\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm)) {\n        char buf[64];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n            fprintf(f, \"%s - \", buf);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic enum MHD_Result\nparse_options_va (struct MHD_Daemon *daemon,\n                  struct MHD_InterimParams_ *params,\n                  va_list ap)\n{\n    (void) ap; /* we do not inspect the varargs in the stub */\n\n    probe_log_open_and_write(\"parse_options_va: entered. daemon=%p params=%p\",\n                             (void *)daemon, (void *)params);\n\n    /* Simulate doing some work and returning a result. */\n    probe_log_open_and_write(\"parse_options_va: returning %d\", (int)MHD_RESULT_OK);\n    return MHD_RESULT_OK;\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and pointer/state information */\n  probe_log_open_and_write(\"parse_options: entered. daemon=%p params=%p\",\n                           (void *)daemon, (void *)params);\n\n  va_start (ap, params);\n  probe_log_open_and_write(\"parse_options: after va_start\");\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log_open_and_write(\"parse_options: parse_options_va returned %d\", (int)ret);\n  va_end (ap);\n  probe_log_open_and_write(\"parse_options: after va_end, returning %d\", (int)ret);\n  return ret;\n}\n",
  "explanation": "The build error was caused by the identifier MHD_RESULT_OK being undefined. I added minimal, non-invasive definitions required for compilation: opaque struct definitions for MHD_Daemon and MHD_InterimParams_, and an enum MHD_Result that defines MHD_RESULT_OK (and a placeholder error value). I also included the necessary standard headers (stdio.h, stdarg.h, time.h). No logic in parse_options or parse_options_va was changed beyond making the missing types available so the code compiles."
}