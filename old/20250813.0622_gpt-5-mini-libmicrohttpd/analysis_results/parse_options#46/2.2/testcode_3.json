{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe unconditional 'if (1)' in the MHD_OPTION_CONNECTION_MEMORY_INCREMENT case: the condition is a constant true, so the conditional test is executed but has no effect on behaviour. Removing the 'if (1)' and its matching braces does not change program semantics, therefore the conditional expression constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Forward declaration to avoid implicit declaration; the real definition\n   is expected to be present elsewhere in the project. */\nextern enum MHD_Result parse_options_va (struct MHD_Daemon *daemon,\n                                        struct MHD_InterimParams_ *params,\n                                        va_list ap);\n\n/* Small probe logger that appends human-readable traces to /tmp/logs/370.txt.\n   It is implemented as a side-effect-only helper and preserves the original\n   semantics of parse_options (it does not inspect or consume the caller's\n   va_list). */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/370.txt\", \"a\");\n  if (f == NULL)\n    {\n      /* If logging cannot be performed, do not alter program behaviour. */\n      return;\n    }\n\n  time_t t = time(NULL);\n  if (t != (time_t)-1)\n    {\n      fprintf(f, \"[%ld] \", (long)t);\n    }\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fputc('\\n', f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and key state (pointer values). This helps trace the control\n     path and parameter values leading to the scenario reported by other agents. */\n  probe_log(\"enter parse_options: daemon=%p params=%p\", (void *)daemon, (void *)params);\n\n  va_start (ap, params);\n  probe_log(\"va_list started for parse_options (not inspected)\");\n\n  /* Call the real varargs parser and capture its return value while\n     logging the result. The call and semantics are preserved exactly. */\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  probe_log(\"parse_options_va returned: %d\", (int)ret);\n  va_end (ap);\n\n  probe_log(\"va_list ended, leaving parse_options\");\n  return ret;\n}\n"
}