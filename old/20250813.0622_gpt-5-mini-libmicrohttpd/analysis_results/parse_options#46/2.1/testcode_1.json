{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn parse_options_va the surrounding while loop condition is while (MHD_OPTION_END != (opt = (enum MHD_OPTION) va_arg(ap, int))). That guarantees that inside the loop opt can never equal MHD_OPTION_END, so the switch label case MHD_OPTION_END: /* Not possible */ is never reachable. Therefore the case label (and any code exclusively associated with it) constitutes unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/369.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helpers: write lightweight logs to /tmp/logs/369.txt. */\nstatic void probe_log_open_and_write(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/369.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    FILE *f = fopen(\"/tmp/logs/369.txt\", \"a\");\n    if (f != NULL)\n    {\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n    va_end(ap);\n}\n\n/* Modified parse_options: adds probes but preserves original behavior. */\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and pointers for reproducing call context. */\n  probe_log_fmt(\"parse_options: ENTER daemon=%p params=%p\", (void *) daemon, (void *) params);\n\n  va_start (ap, params);\n\n  /* Log that a va_list has been started and its address (for diagnostics). */\n  probe_log_fmt(\"parse_options: va_list started at %p\", (void *) &ap);\n\n  /* Call the original varargs-handling function. */\n  probe_log_fmt(\"parse_options: calling parse_options_va\");\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  probe_log_fmt(\"parse_options: parse_options_va returned %d\", (int) ret);\n\n  va_end (ap);\n  probe_log_fmt(\"parse_options: va_list ended\");\n\n  probe_log_fmt(\"parse_options: EXIT returning %d\", (int) ret);\n  return ret;\n}\n"
}