{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts &servaddr4 to a non-const pointer type (struct sockaddr *) when assigning into pservaddr which is declared as const struct sockaddr *. The cast uses a non-const target type even though a const-qualified pointer could and should be used (e.g. (const struct sockaddr *)&servaddr4). This use of a non-const pointer type where a const-qualified pointer is appropriate violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/371.txt. */\nstatic void\nlog_to_file (const char *fmt, ...)\n{\n  va_list args;\n  FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  va_start (args, fmt);\n  vfprintf (f, fmt, args);\n  fputc('\\n', f);\n  va_end (args);\n  fclose (f);\n}\n\n/* Lightweight probe that records entry/exit and key pointer values. */\nstatic void\nlog_parse_options_entry (const void *daemon, const void *params)\n{\n  /* Log the addresses of the incoming pointers so callers can correlate\n     with other logs that show casts/assignments (e.g. sockaddr-related casts).\n     We use const void * here to avoid casting away const qualification. */\n  log_to_file (\"parse_options: entry daemon=%p params=%p\", daemon, params);\n}\n\nstatic void\nlog_parse_options_va_started (void)\n{\n  log_to_file (\"parse_options: va_list started\");\n}\n\nstatic void\nlog_parse_options_exit (int ret)\n{\n  log_to_file (\"parse_options: exit ret=%d\", ret);\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Preserve original behavior: record entry, then start the va_list and\n     forward to parse_options_va. The logging preserves the control flow\n     and state relevant to reproducing pointer/cast-related issues. */\n  log_parse_options_entry ((const void *) daemon, (const void *) params);\n\n  va_start (ap, params);\n  log_parse_options_va_started ();\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  /* Log the returned result as an integer to capture control-flow outcome. */\n  log_parse_options_exit ((int) ret);\n\n  va_end (ap);\n  return ret;\n}"
}