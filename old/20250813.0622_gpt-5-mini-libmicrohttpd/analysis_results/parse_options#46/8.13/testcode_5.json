{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code takes pstr (declared as const char *) and assigns it to dhpar.data (type unsigned char *) by casting away const: dhpar.data = (unsigned char *) _MHD_DROP_CONST (pstr);. This removes the const qualification from a pointer to const data and yields a non-const pointer to the same object, which violates the intent of MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Forward declaration of parse_options_va to preserve original linkage. */\nextern enum MHD_Result\nparse_options_va (struct MHD_Daemon *daemon,\n                  struct MHD_InterimParams_ *params,\n                  va_list ap);\n\n/*\n * Small probe helper that appends a single log line to /tmp/logs/371.txt.\n * Keeps behavior separate from main logic and does not alter program flow.\n */\nstatic void\nprobe_log_line(const char *label,\n               struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               const char *msg)\n{\n  FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n  if (f != NULL)\n  {\n    /* Log the label, pointer values and an informational message. */\n    fprintf(f, \"%s: daemon=%p params=%p msg=%s\\n\",\n            label,\n            (const void *) daemon,\n            (const void *) params,\n            (msg != NULL) ? msg : \"(null)\");\n    fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Entry probe: record call and sizes relevant to varargs handling. */\n  {\n    char buf[64];\n    /* sizeof(va_list) can vary by platform; record it to help reproduce issues. */\n    (void) snprintf(buf, sizeof(buf), \"entering parse_options (sizeof(va_list)=%lu)\", (unsigned long) sizeof(va_list));\n    probe_log_line(\"parse_options ENTRY\", daemon, params, buf);\n  }\n\n  va_start (ap, params);\n\n  /* Probe after va_start: we cannot inspect ap contents portably, but note that va_start completed. */\n  probe_log_line(\"parse_options AFTER_VA_START\", daemon, params, \"va_start completed\");\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  /* Capture the return value to help reproduce the control flow and outcome. */\n  {\n    char buf[64];\n    (void) snprintf(buf, sizeof(buf), \"parse_options_va returned %d\", (int) ret);\n    probe_log_line(\"parse_options RETURN_FROM_VA\", daemon, params, buf);\n  }\n\n  va_end (ap);\n\n  probe_log_line(\"parse_options EXIT\", daemon, params, \"exiting parse_options\");\n  return ret;\n}\n"
}