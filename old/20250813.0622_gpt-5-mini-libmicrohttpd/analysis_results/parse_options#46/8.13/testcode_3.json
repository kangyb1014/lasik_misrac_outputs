{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the address of a non-const struct sockaddr_in6 to a non-const struct sockaddr * and assigns it to a const struct sockaddr * (pservaddr = (struct sockaddr *) &servaddr6;). The explicit cast to a non-const pointer is unnecessary and fails to use a const-qualified pointer type in the cast; this discards qualifier semantics and is contrary to the intent of MISRA C 2023 Rule 8.13. The correct form would be to use a const-qualified target (e.g. (const struct sockaddr *)&servaddr6) or omit the cast entirely.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of parse_options as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified parse_options code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe function that logs control flow and state to /tmp/logs/371.txt.\n   Use const-qualified pointer types where possible to respect qualifier semantics. */\nstatic void probe_log_state(const struct MHD_Daemon *daemon,\n                            const struct MHD_InterimParams_ *params,\n                            const char *phase,\n                            int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/371.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t now = time(NULL);\n        /* Print timestamp, phase, pointer values and result code (if available). */\n        fprintf(f, \"%ld: parse_options %s: daemon=%p params=%p ret=%d\\n\",\n                (long)now,\n                (phase != NULL) ? phase : \"(null)\",\n                (const void *)daemon,\n                (const void *)params,\n                ret);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  /* Log entry and initial state. Cast to const-qualified types when calling\n     the probe to preserve qualifier information. */\n  probe_log_state((const struct MHD_Daemon *)daemon,\n                  (const struct MHD_InterimParams_ *)params,\n                  \"enter\",\n                  -1);\n\n  va_start (ap, params);\n\n  /* Log that varargs have been started. We do not attempt to inspect the\n     variable arguments here (avoids UB for unknown types); just record\n     that execution reached this point. */\n  probe_log_state((const struct MHD_Daemon *)daemon,\n                  (const struct MHD_InterimParams_ *)params,\n                  \"after_va_start\",\n                  -1);\n\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n\n  /* Log after calling the variadic helper and the returned result. */\n  probe_log_state((const struct MHD_Daemon *)daemon,\n                  (const struct MHD_InterimParams_ *)params,\n                  \"after_parse_options_va\",\n                  (int)ret);\n\n  va_end (ap);\n\n  /* Final exit log. */\n  probe_log_state((const struct MHD_Daemon *)daemon,\n                  (const struct MHD_InterimParams_ *)params,\n                  \"exit\",\n                  (int)ret);\n\n  return ret;\n}\n"
}