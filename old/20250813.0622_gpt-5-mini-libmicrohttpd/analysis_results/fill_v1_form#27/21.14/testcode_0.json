{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion uses memcmp(hdr->value, \"close\", 5) to check whether the header value equals the null-terminated string \"close\". hdr->value is stored/used as a null-terminated header string (buf[pos] = 0), so memcmp is being used to compare null-terminated strings rather than the appropriate string routine.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/222.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_form:\n```c\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, session->value_1);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             session->value_1))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_form code.\n",
  "test_code": "static void\nlog_fill_v1_form_probe(const char *stage,\n                         const char *mime,\n                         const void *session_ptr,\n                         const char *value1,\n                         int reply_len,\n                         const void *reply_ptr,\n                         const char *extra)\n{\n  FILE *f = fopen(\"/tmp/logs/222.txt\", \"a\");\n  if (NULL == f)\n    return;\n  /* Basic, robust logging: avoid dereferencing possibly-null pointers in format */\n  fprintf(f,\n          \"[fill_v1_form] stage=%s session=%p mime=%s reply_len=%d reply_ptr=%p value1=%s extra=%s\\n\",\n          stage ? stage : \"(null)\",\n          session_ptr,\n          mime ? mime : \"(null)\",\n          reply_len,\n          reply_ptr,\n          (value1 != NULL) ? value1 : \"(null)\",\n          (extra != NULL) ? extra : \"(null)\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  const char *value1;\n  (void) cls; /* Unused */\n\n  /* Probe: entry state */\n  value1 = (session != NULL) ? session->value_1 : NULL;\n  log_fill_v1_form_probe(\"entry\", mime, (const void *) session, value1, -1, NULL, NULL);\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, value1);\n  log_fill_v1_form_probe(\"after_snprintf_len\", mime, (const void *) session, value1, reply_len, NULL, NULL);\n  if (0 > reply_len)\n  {\n    log_fill_v1_form_probe(\"error_negative_len\", mime, (const void *) session, value1, reply_len, NULL, \"Internal error\");\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  log_fill_v1_form_probe(\"after_malloc\", mime, (const void *) session, value1, reply_len, (const void *) reply, NULL);\n  if (NULL == reply)\n  {\n    log_fill_v1_form_probe(\"error_nomem\", mime, (const void *) session, value1, reply_len, NULL, \"Out-of-memory\");\n    return MHD_NO; /* Out-of-memory error */\n  }\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             value1))\n  {\n    log_fill_v1_form_probe(\"error_snprintf_mismatch\", mime, (const void *) session, value1, reply_len, (const void *) reply, \"printf error\");\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* log the produced reply buffer (safe: reply is null-terminated as from snprintf) */\n  log_fill_v1_form_probe(\"reply_ready\", mime, (const void *) session, value1, reply_len, (const void *) reply, reply);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    log_fill_v1_form_probe(\"response_created\", mime, (const void *) session, value1, reply_len, (const void *) response, NULL);\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      log_fill_v1_form_probe(\"header_set_failed\", mime, (const void *) session, value1, reply_len, (const void *) response, \"content-type failed\");\n      /* return response without content type anyway ... */\n    }\n    else\n    {\n      log_fill_v1_form_probe(\"header_set_ok\", mime, (const void *) session, value1, reply_len, (const void *) response, \"content-type ok\");\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    log_fill_v1_form_probe(\"after_queue_response\", mime, (const void *) session, value1, reply_len, (const void *) response, (ret == MHD_YES) ? \"queued_ok\" : \"queued_fail\");\n    MHD_destroy_response (response);\n    log_fill_v1_form_probe(\"after_destroy_response\", mime, (const void *) session, value1, reply_len, NULL, NULL);\n  }\n  else\n  {\n    free (reply);\n    log_fill_v1_form_probe(\"response_null\", mime, (const void *) session, value1, reply_len, NULL, \"response creation failed\");\n    ret = MHD_NO;\n  }\n  log_fill_v1_form_probe(\"exit\", mime, (const void *) session, value1, reply_len, NULL, (ret == MHD_YES) ? \"return_yes\" : \"return_no\");\n  return ret;\n}\n"
}