{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs when an existing header (hdr != NULL) is present and the new value contains only the token \"close\" (so value_has_close == true, norm_len == 0) and the header did not already contain \"close\" (already_has_close == false). In that case buf_size was allocated as old_value_len + norm_len = hdr->value_size + 2, pos becomes MHD_STATICSTR_LEN_(\"close, \") (7), and the memcpy(buf + pos, hdr->value, hdr->value_size) copies hdr->value_size bytes starting at offset 7 \u2014 which requires buf_size >= hdr->value_size + 7 but only hdr->value_size + 2 was allocated, causing an out-of-bounds write.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified fill_v1_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of fill_v1_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of fill_v1_form:\n```c\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, session->value_1);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             session->value_1))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified fill_v1_form code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/223.txt */\nstatic void\nprobe_log (const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/223.txt\", \"a\");\n  if (NULL == f)\n    return;\n\n  time_t t = time(NULL);\n  fprintf(f, \"[%ld] \", (long)t);\n\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  va_end(ap);\n\n  fprintf(f, \"\\n\");\n  fclose(f);\n}\n\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Log entry state */\n  if (session == NULL)\n    probe_log(\"enter fill_v1_form: session=NULL, mime=%p (%s), connection=%p, cls=%p\",\n              (const void *) mime, (mime ? mime : \"NULL\"), (const void *) connection, cls);\n  else\n    probe_log(\"enter fill_v1_form: session=%p, value_1=%p, value_1_len=%zu, mime=%p (%s), connection=%p, cls=%p\",\n              (const void *) session,\n              (const void *) session->value_1,\n              (size_t) (session->value_1 ? strlen(session->value_1) : 0),\n              (const void *) mime, (mime ? mime : \"NULL\"), (const void *) connection, cls);\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1, session->value_1);\n  probe_log(\"snprintf(NULL,0) returned reply_len=%d\", reply_len);\n  if (0 > reply_len)\n  {\n    probe_log(\"snprintf error: reply_len < 0, returning MHD_NO\");\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n  {\n    probe_log(\"malloc failed for size=%zu, returning MHD_NO\", (size_t) ((size_t) reply_len + 1));\n    return MHD_NO; /* Out-of-memory error */\n  }\n  probe_log(\"malloc succeeded: reply=%p, size=%zu\", (void *) reply, (size_t) ((size_t) reply_len + 1));\n\n  if (reply_len != snprintf (reply,\n                             (size_t) (((size_t) reply_len) + 1),\n                             FORM_V1,\n                             session->value_1))\n  {\n    probe_log(\"snprintf to buffer failed: expected %d characters, cleaning up and returning MHD_NO\", reply_len);\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* Log the produced reply (trim if very large) */\n  if (reply_len <= 1024)\n    probe_log(\"reply content (len=%d): %s\", reply_len, reply ? reply : \"(null)\");\n  else\n    probe_log(\"reply content (len=%d): %.1024s...\", reply_len, reply ? reply : \"(null)\");\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  probe_log(\"MHD_create_response_from_buffer_with_free_callback returned response=%p\", (void *) response);\n  if (NULL != response)\n  {\n    probe_log(\"adding session cookie: session=%p, response=%p\", (void *) session, (void *) response);\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      probe_log(\"MHD_add_response_header failed to set content type header: mime=%s\", (mime ? mime : \"NULL\"));\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    else\n    {\n      probe_log(\"MHD_add_response_header succeeded: content-type=%s\", (mime ? mime : \"NULL\"));\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    probe_log(\"MHD_queue_response returned %d\", (int) ret);\n    MHD_destroy_response (response);\n    probe_log(\"MHD_destroy_response called for response=%p\", (void *) response);\n  }\n  else\n  {\n    probe_log(\"response is NULL, freeing reply=%p and returning MHD_NO\", (void *) reply);\n    free (reply);\n    ret = MHD_NO;\n  }\n\n  probe_log(\"exiting fill_v1_form with ret=%d\", (int) ret);\n  return ret;\n}\n"
}