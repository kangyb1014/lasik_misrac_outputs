{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskRegister_Impl:\n#define OS_DEBUG(__VA_ARGS__) \n</additional code>\nJudge whether the above OS_TaskRegister_Impl code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The function contains a block of code (`pthread_setcancelstate` and `pthread_setcanceltype`) that is always executed but does not influence the program's behavior and is not necessary, thus constitutes dead code.",
  "test_code": "#include <pthread.h>\n#include <string.h>\n#include <errno.h>\n#include <stdio.h>\n\n// Assuming necessary typedefs and constants are included\n// Definitions\n#define OS_SUCCESS 0\n#define OS_ERROR -1\n#define POSIX_GlobalVars {\n    .ThreadKey = 1 // dummy thread key\n}\n\n// Global variables\npthread_key_t ThreadKey;\n\n// logging function to file\nvoid log_to_file(const char *control_path, const char *state_info) {\n    FILE *file = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (file != NULL) {\n        fprintf(file, \"%s: %s\\n\", control_path, state_info);\n        fclose(file);\n    }\n}\n\n// Modified function\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32 return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int old_state;\n    int old_type;\n\n    // Log before setting cancel state\n    log_to_file(\"&\", \"Before pthread_setcancelstate\");\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    // Log after setting cancel state\n    log_to_file(\"&\", \"After pthread_setcancelstate\");\n\n    // Log before setting cancel type\n    log_to_file(\"&\", \"Before pthread_setcanceltype\");\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n    // Log after setting cancel type\n    log_to_file(\"&\", \"After pthread_setcanceltype\");\n\n    memset(&arg, 0, sizeof(arg));\n\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        // Log failure\n        log_to_file(\"&\", \"pthread_setspecific failed\");\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n"
}