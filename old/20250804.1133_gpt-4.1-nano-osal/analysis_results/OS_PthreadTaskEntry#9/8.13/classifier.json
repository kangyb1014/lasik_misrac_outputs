{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_PthreadTaskEntry:\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n</additional code>\nJudge whether the above OS_PthreadTaskEntry code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "In the provided OS_PthreadTaskEntry code, the pointer 'arg' is cast directly to a 'OS_VoidPtrValueWrapper_t' without const qualification, and then the non-const 'local_arg.id' is passed to OS_TaskEntryPoint, which is potentially a function that modifies its argument. If 'arg' points to a const object, this indicates a violation of Rule 8.13.",
  "test_code": "static void *OS_PthreadTaskEntry(void *arg)\n{\n    FILE *log_file = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (log_file == NULL) return NULL;\n\n    fprintf(log_file, \"Entered OS_PthreadTaskEntry with arg address: %p\\n\", arg);\n\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* probe from original code */\n    local_arg.opaque_arg = arg;\n    fprintf(log_file, \"local_arg.opaque_arg set from arg: %p\\n\", local_arg.opaque_arg);\n    fprintf(log_file, \"local_arg.id (before) address: %p\\n\", (void*)&local_arg.id);\n\n    OS_TaskEntryPoint(local_arg.id);\n\n    fprintf(log_file, \"Exiting OS_PthreadTaskEntry\\n\");\n    fclose(log_file);\n    return NULL;\n}"
}