{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/76.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_PthreadTaskEntry:\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n</additional code>\nJudge whether the above OS_PthreadTaskEntry code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "A for loop with an improper second clause that modifies a variable involved in the loop control, violating the rule.",
  "test_code": "static void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n    int i = 0;\n    for (i = 0; i < 10; ++i) {\n        local_arg.opaque_arg = arg;\n        OS_TaskEntryPoint(local_arg.id); /* Never returns */\n        i++; // Violates MISRA C 14.2 by modifying loop counter inside loop body\n        log_control_and_state(i); // Log the current state\n    }\n    return NULL;\n}\n\nvoid log_control_and_state(int state) {\n    FILE *file = fopen(\"/tmp/logs/76.txt\", \"a+\");\n    if (file != NULL) {\n        fprintf(file, \"Current state: %d\", state);\n        fclose(file);\n    }\n}"
}