{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_CondVarLock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/205.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarLock_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock_Impl:\n```c\nint32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarLock_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n</additional code>\nJudge whether the above OS_CondVarLock_Impl code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "The function OS_CondVarLock_Impl takes a pointer to a constant OS_object_token_t, implying the token should not be modified. If within the function, the 'token' pointer or the object it points to were modified, this would violate MISRA C 2023 Rule 17.8.",
  "test_code": "#include <pthread.h>\n#include <stdio.h>\n\n// Assume these definitions are available as per the provided context\n// and the code is part of a larger system where 'OS_ObjectIndexFromToken' is defined.\n\nvoid LogAccess(const char* message) {\n    FILE *logfile = fopen(\"/tmp/logs/205.txt\", \"a\");\n    if (logfile != NULL) {\n        fprintf(logfile, \"%s\\n\", message);\n        fclose(logfile);\n    }\n}\n\nint32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    // Probe start: log the token address\n    LogAccess(\"Entering OS_CondVarLock_Impl with token at address:\");\n    LogAccess((char*)token); // casting pointer to char* for logging\n\n    int status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    // Probe before locking\n    LogAccess(\"Locking mutex for token at:\");\n    LogAccess((char*)token);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        // Log error\n        LogAccess(\"Failed to lock mutex.\");\n        return OS_ERROR;\n    }\n\n    // Probe after locking\n    LogAccess(\"Mutex locked successfully for token at:\");\n    LogAccess((char*)token);\n\n    return OS_SUCCESS;\n}"
}