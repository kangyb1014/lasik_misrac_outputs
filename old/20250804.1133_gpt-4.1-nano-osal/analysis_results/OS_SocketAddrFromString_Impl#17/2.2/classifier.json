{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/138.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketAddrFromString_Impl:\n#define OS_ERR_BAD_ADDRESS (-34)\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nJudge whether the above OS_SocketAddrFromString_Impl code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "Dead code detection in the switch statement, especially in the default case where 'return OS_ERR_BAD_ADDRESS;' is executed unconditionally if 'sa_family' is not AF_INET or AF_INET6.",
  "test_code": "int32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            // Log the default case execution\n            log_dead_code('default case in switch, sa_family value: ', Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    // Attempt to convert string to network address\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        // Log conversion failure\n        log_dead_code('inet_pton failed for family: ', Accessor->sa.sa_family);\n        return OS_ERROR;\n    }\n\n    // Successful conversion\n    return OS_SUCCESS;\n}\n// Logs control path and state information to /tmp/logs/138.txt\nvoid log_dead_code(const char *message, int value)\n{\n    FILE *logfile = fopen(\"/tmp/logs/138.txt\", \"a\");\n    if (logfile != NULL)\n    {\n        fprintf(logfile, \"%s %d\\n\", message, value);\n        fclose(logfile);\n    }\n}"
}