{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/71.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\nJudge whether the above OS_DeleteAllObjects code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The code calls functions like OS_ForEachObjectOfType and OS_ForEachObject with pointers to ObjectCount, which may be modified or accessed within those functions. If these functions do not internally ensure bounds safety when handling buffers or objects, there's a potential risk of accessing beyond object bounds, especially if they improperly manipulate or iterate over pointers.",
  "test_code": "```c\n#include <stdio.h>\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    FILE *log_file = fopen(\"/tmp/logs/71.txt\", \"w\");\n    if (!log_file) return;\n\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        fprintf(log_file, \"Iteration: %d\\n\", TryCount);\n        fprintf(log_file, \"Before OS_ForEachObjectOfType, ObjectCount=%u\\n\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        fprintf(log_file, \"After OS_ForEachObjectOfType for TIMECB, ObjectCount=%u\\n\", ObjectCount);\n\n        fprintf(log_file, \"Before OS_ForEachObjectOfType, ObjectCount=%u\\n\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        fprintf(log_file, \"After OS_ForEachObjectOfType for TIMEBASE, ObjectCount=%u\\n\", ObjectCount);\n\n        fprintf(log_file, \"Before OS_ForEachObjectOfType, ObjectCount=%u\\n\", ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        fprintf(log_file, \"After OS_ForEachObjectOfType for TASK, ObjectCount=%u\\n\", ObjectCount);\n\n        fprintf(log_file, \"Before OS_ForEachObject, ObjectCount=%u\\n\", ObjectCount);\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        fprintf(log_file, \"After OS_ForEachObject, ObjectCount=%u\\n\", ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n    fclose(log_file);\n}\n```"
}