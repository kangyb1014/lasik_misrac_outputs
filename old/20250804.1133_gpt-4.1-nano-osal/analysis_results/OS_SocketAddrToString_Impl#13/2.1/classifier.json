{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/105.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketAddrToString_Impl:\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_BAD_ADDRESS (-34)\n</additional code>\nJudge whether the above OS_SocketAddrToString_Impl code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The function includes a 'default' case in the switch statement that handles unexpected 'sa_family' values with a return statement. If the 'default' case is truly unreachable because all possible 'sa_family' values are handled explicitly, then the code violates MISRA C 2023 Rule 2.1, which prohibits unreachable code.",
  "test_code": "/* The code is intentionally simplified for logging demonstration; ensure all sa_family values are handled to avoid unreachable code. */\n\n#include <stdio.h>\n#include <string.h>\n#include <arpa/inet.h> /* for inet_ntop */\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    FILE *logfile = fopen(\"/tmp/logs/105.txt\", \"a\");\n    if (logfile == NULL)\n        return OS_ERROR;\n\n    const void *addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            fprintf(logfile, \"Control Path: Enter case AF_INET\\n\");\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            fprintf(logfile, \"Control Path: Enter case AF_INET6\\n\");\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            fprintf(logfile, \"Control Path: Enter default case, address family=%d\\n\", Accessor->sa.sa_family);\n            fclose(logfile);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        fprintf(logfile, \"Control Path: inet_ntop failed\\n\");\n        fclose(logfile);\n        return OS_ERROR;\n    }\n\n    fprintf(logfile, \"Control Path: Successfully converted address\\n\");\n    fclose(logfile);\n    return OS_SUCCESS;\n}\n"
}