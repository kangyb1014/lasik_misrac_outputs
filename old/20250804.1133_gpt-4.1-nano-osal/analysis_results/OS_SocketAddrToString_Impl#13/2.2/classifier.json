{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_SocketAddrToString_Impl code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code contains a default case in the switch statement that returns an error, but does not handle or log the case where the switch is skipped or the break statements lead to an unreachable code after the switch, which could be considered dead code if unreachable parts are present.",
  "test_code": "/* Probing function to log control flow and states for dead code detection */\n#include <stdio.h>\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    // Log initial call\n    FILE *logfile = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (logfile == NULL) return -1;\n    fprintf(logfile, \"OS_SocketAddrToString_Impl called with Addr=%p\\n\", (void*)Addr);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    // Log Accessor type\n    fprintf(logfile, \"Accessor type: %p\\n\", (void*)Accessor);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            fprintf(logfile, \"AF_INET branch taken\\n\");\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            fprintf(logfile, \"AF_INET6 branch taken\\n\");\n            break;\n#endif\n        default:\n            fprintf(logfile, \"Unknown address family: %d\\n\", Accessor->sa.sa_family);\n            fclose(logfile);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    fprintf(logfile, \"Calling inet_ntop with family=%d, buffer=%p, buflen=%zu\\n\", Accessor->sa.sa_family, (void*)buffer, buflen);\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        fprintf(logfile, \"inet_ntop failed\\n\");\n        fclose(logfile);\n        return OS_ERROR;\n    }\n\n    fprintf(logfile, \"Success: buffer=%s\\n\", buffer);\n    fclose(logfile);\n    return OS_SUCCESS;\n}"
}