{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/182.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nJudge whether the above OS_CloseFileByName code violates the rule 21.14 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses strcmp to compare the stream_name string with the Filename parameter, which is a null-terminated string.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n// Modified function with logs\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32 return_code;\n    int32 close_code;\n    OS_object_iter_t iter;\n    OS_stream_internal_record_t *stream;\n\n    FILE *log_file = fopen(\"/tmp/logs/182.txt\", \"a\");\n    if (log_file == NULL) {\n        // Unable to open log file\n        return -1; // Or handle error as needed\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n    fprintf(log_file, \"Checking Filename parameter: %s\\n\", Filename != NULL ? Filename : \"NULL\");\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    fprintf(log_file, \"Initialized iterator.\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        fprintf(log_file, \"Processing stream: %s\\n\", stream->stream_name);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            // Log comparison attempt\n            fprintf(log_file, \"Comparing stream name '%s' with Filename '%s'.\\n\", stream->stream_name, Filename);\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n            fprintf(log_file, \"Close code: %d\\n\", close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    fprintf(log_file, \"Finished processing. Returning code: %d\\n\", return_code);\n    fclose(log_file);\n    return return_code;\n}"
}