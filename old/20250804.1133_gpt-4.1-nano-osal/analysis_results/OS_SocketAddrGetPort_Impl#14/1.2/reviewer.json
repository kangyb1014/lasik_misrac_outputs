{
  "user_message": "An agent A claimed that the following OS_SocketAddrGetPort_Impl code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketAddrGetPort_Impl.\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the preprocessor directive '#ifdef OS_NETWORK_SUPPORTS_IPV6', which is a language extension for conditional compilation, making the code dependent on compiler-specific extension features.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    // Log control path\n    FILE *log_file = fopen(\"/tmp/logs/112.txt\", \"a\");\n    if (log_file)\n    {\n        fprintf(log_file, \"Entered OS_SocketAddrGetPort_Impl, sa_family: %d\\n\", Accessor->sa.sa_family);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            if (log_file)\n                fprintf(log_file, \"AF_INET case, port: %u\\n\", ntohs(sa_port));\n            break;\n        // The following section is excluded because it uses a language extension.\n        /*\n        #ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            if (log_file)\n                fprintf(log_file, \"AF_INET6 case, port: %u\\n\", ntohs(sa_port));\n            break;\n        #endif\n        */\n        default:\n            if (log_file)\n                fprintf(log_file, \"Default case, returning error\\n\");\n            if (log_file)\n                fclose(log_file);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    *PortNum = ntohs(sa_port);\n    if (log_file)\n        fclose(log_file);\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketAddrGetPort_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The code uses the preprocessor directive '#ifdef OS_NETWORK_SUPPORTS_IPV6' to conditionally compile parts of the code based on whether 'OS_NETWORK_SUPPORTS_IPV6' is defined. According to MISRA C 2023 Rule 1.2, language extensions should not be used, and preprocessor directives can be considered as a language extension that may impair portability and conformity. Therefore, the agent's claim that the code violates MISRA C 2023 Rule 1.2 is justified."
}