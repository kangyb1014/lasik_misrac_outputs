{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/119.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nJudge whether the above OS_SocketAddrGetPort_Impl code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The code accesses the sa_port field of the Accessor structure without ensuring that the Address data contains enough bytes to include this field, which could lead to buffer overreads.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            fprintf(stderr, \"Received AF_INET family.\\n\");\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            fprintf(stderr, \"Received AF_INET6 family.\\n\");\n            break;\n#endif\n        default:\n            fprintf(stderr, \"Unknown address family: %u\\n\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    // Log the port value\n    fprintf(stderr, \"Port value before ntohs: %u\\n\", Accessor->sa_in.sin_port);\n\n    sa_port = Accessor->sa_in.sin_port;\n\n    // Log the converted port\n    fprintf(stderr, \"Converted port: %u\\n\", ntohs(sa_port));\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n"
}