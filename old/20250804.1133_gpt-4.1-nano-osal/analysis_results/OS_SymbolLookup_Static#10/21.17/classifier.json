{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nJudge whether the above OS_SymbolLookup_Static code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses strcmp without verifying the length of the input strings against the buffer size, which could lead to buffer overflows if the input strings are not properly null-terminated or exceed expected sizes.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n// Mock definitions for compilation\ntypedef int int32;\ntypedef unsigned int cpuaddr;\ntypedef struct {\n    const char *Name;\n    const char *Module;\n    void *Address;\n} OS_static_symbol_record_t;\n\n// Simulated symbol table\nOS_static_symbol_record_t *OS_STATIC_SYMTABLE_SOURCE;\n\n// Function to log events\nvoid log_event(const char *message) {\n    FILE *logfile = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (logfile != NULL) {\n        fprintf(logfile, \"%s\\n\", message);\n        fclose(logfile);\n    }\n}\n\n// Original function with added logging for violation scenario\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName) {\n    int32 return_code = -1; // Default error code\n    OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL) {\n        if (StaticSym->Name == NULL) {\n            log_event(\"End of symbol table reached.\");\n            return_code = -2; // End of list\n            break;\n        }\n        if (StaticSym->Name != NULL && SymbolName != NULL && strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0)) {\n            // found matching symbol\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            log_event(\"Matching symbol found.\");\n            return_code = 0; // Success\n            break;\n        }\n        ++StaticSym;\n    }\n    // Log details about the inputs to help diagnose buffer issues\n    if (SymbolName != NULL) {\n        log_event(\"SymbolName string comparison attempted.\");\n    }\n    if (ModuleName != NULL) {\n        log_event(\"ModuleName string comparison attempted.\");\n    }\n    return return_code;\n}\n"
}