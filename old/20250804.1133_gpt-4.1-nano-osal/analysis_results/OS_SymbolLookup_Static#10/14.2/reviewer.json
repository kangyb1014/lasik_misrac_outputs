{
  "user_message": "An agent A claimed that the following OS_SymbolLookup_Static code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of OS_SymbolLookup_Static.\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop iterates over a linked list using a pointer, which is incremented inside the loop body as ++StaticSym; rather than using a for loop construct which explicitly declares initialization, condition, and increment clauses.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nvoid test_OS_SymbolLookup_Static_log() {\n    // Open log file\n    FILE *log = fopen(\"/tmp/logs/84.txt\", \"w\");\n    if (log == NULL) return;\n\n    // Logging function\n    void log_info(const char *msg) {\n        fprintf(log, \"%s\\n\", msg);\n        fflush(log);\n    }\n\n    // Original function with added logging\n    int32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName) {\n        int32 return_code = OS_ERR_NOT_IMPLEMENTED;\n        OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;\n\n        while (StaticSym != NULL) {\n            if (StaticSym->Name == NULL) {\n                log_info(\"End of list reached without match.\");\n                return_code = OS_ERROR;\n                break;\n            }\n            if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n                (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0)) {\n                log_info(\"Matching symbol found.\");\n                *SymbolAddress = (cpuaddr)StaticSym->Address;\n                return_code = OS_SUCCESS;\n                break;\n            }\n            StaticSym++;\n            log_info(\"Incremented StaticSym to next.\");\n        }\n\n        fclose(log);\n        return return_code;\n    }\n}\n```\nThe test code failed to parse, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The code in question uses a while loop with the pointer 'StaticSym' being incremented via '++StaticSym;' inside the loop body, rather than utilizing the three clauses of a for loop for initialization, condition, and increment. According to MISRA C 2023 Rule 14.2, a for loop should be well-formed, which typically means explicitly using the three clauses to clearly define the loop's structure. Since the code uses a 'while' loop and modifies the loop variable within the body, it does not conform to the standard form of a well-formed for loop. Therefore, the agent A's report that this code violates MISRA C 2023 Rule 14.2 is correct."
}