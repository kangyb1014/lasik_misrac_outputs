{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/199.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nJudge whether the above OS_ModuleLoad_Static code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "The function compares StaticSym->Name and StaticSym->Module using '==' and 'strcmp'. However, the potential violation of Rule 21.17 occurs if the string functions like strcmp are called with pointers that could be outside of their valid object bounds, especially if StaticSym->Module or StaticSym->Name are not properly initialized or null-terminated within their allocated objects.",
  "test_code": "```c\n#include <stdio.h>\n#include <string.h>\n\n// Assuming the OS_static_symbol_record_t structure as follows:\ntypedef struct {\n    const char *Name;\n    const char *Module;\n} OS_static_symbol_record_t;\n\n// Modified function with logging for violation scenario\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32 return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        FILE *logFile = fopen(\"/tmp/logs/199.txt\", \"a\");\n        if (logFile == NULL) {\n            // Can't open log file, fallback\n            break;\n        }\n        fprintf(logFile, \"Control Path: Checking StaticSym at address %p\\n\", (void*)StaticSym);\n        if (StaticSym->Name == NULL || StaticSym->Module == NULL) {\n            fprintf(logFile, \"Null pointer detected in StaticSym at address %p. Moving to next.\\n\", (void*)StaticSym);\n            fclose(logFile);\n            break; // or continue based on scenario\n        }\n        if (strcmp(StaticSym->Module, ModuleName) == 0) {\n            fprintf(logFile, \"Matching module found: %s\\n\", StaticSym->Module);\n            fclose(logFile);\n            return_code = OS_SUCCESS;\n            break;\n        } else {\n            fprintf(logFile, \"Module does not match: %s\\n\", StaticSym->Module);\n        }\n        fclose(logFile);\n        ++StaticSym;\n    }\n    return return_code;\n}\n```"
}