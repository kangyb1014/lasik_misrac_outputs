{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const-qualified pointer to a non-const void* when calling OS_ObjectIdFindNextMatch: (void *)name where name is declared as const char * in OS_ObjectIdAllocateNew. This removes the const qualifier and allows the callee to potentially modify the pointed-to data, which violates the intent of Rule 8.13. The proper fix is to change the callee prototype to accept a const void * (or otherwise preserve const-qualification) or avoid the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3285.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAccept code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAccept with it.\n  - Your function must have the exact same signature as OS_SocketAccept.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAccept to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAccept as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAccept will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n    FILE *                       log_fp = NULL;\n\n    /* Try to open log file as early as possible so entry is recorded even if checks fail */\n    log_fp = fopen(\"/tmp/logs/3285.txt\", \"a\");\n    if (log_fp == NULL)\n    {\n        /* try to create the directory and open again */\n        /* Use system() as a best-effort; if unavailable this is non-fatal for function logic */\n        (void)system(\"/bin/mkdir -p /tmp/logs >/dev/null 2>&1\");\n        log_fp = fopen(\"/tmp/logs/3285.txt\", \"a\");\n    }\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_SocketAccept ENTRY: sock_id=%lu, connsock_id_ptr=%p, Addr_ptr=%p, timeout=%ld\\n\",\n                (unsigned long)sock_id, (void *)connsock_id, (void *)Addr, (long)timeout);\n        fflush(log_fp);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (log_fp)\n    {\n        fprintf(log_fp, \"After OS_ObjectIdGetById: return_code=%ld, sock_token_addr=%p\\n\", (long)return_code, (void *)&sock_token);\n        fflush(log_fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (log_fp)\n        {\n            fprintf(log_fp, \"sock_record=%p, sock=%p\\n\", (void *)sock_record, (void *)sock);\n            if (sock != NULL)\n            {\n                fprintf(log_fp, \"sock->socket_type=%ld, sock->stream_state=0x%lx, sock->socket_domain=%ld\\n\",\n                        (long)sock->socket_type, (unsigned long)sock->stream_state, (long)sock->socket_domain);\n            }\n            fflush(log_fp);\n        }\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"Incorrect obj type: return_code=%ld\\n\", (long)return_code);\n                fflush(log_fp);\n            }\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"Incorrect obj state: stream_state=0x%lx, return_code=%ld\\n\",\n                        (unsigned long)sock->stream_state, (long)return_code);\n                fflush(log_fp);\n            }\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            if (log_fp)\n            {\n                fprintf(log_fp, \"Calling OS_ObjectIdAllocateNew for new conn token (name param = NULL)\\n\");\n                fflush(log_fp);\n            }\n\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n\n            if (log_fp)\n            {\n                fprintf(log_fp, \"After OS_ObjectIdAllocateNew: return_code=%ld, conn_token_addr=%p\\n\",\n                        (long)return_code, (void *)&conn_token);\n                fflush(log_fp);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"Initialized conn record: conn=%p, conn->socket_domain=%ld, conn->socket_type=%ld\\n\",\n                            (void *)conn, (long)conn->socket_domain, (long)conn->socket_type);\n                    fflush(log_fp);\n                }\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"Calling OS_SocketAccept_Impl with sock_token=%p, conn_token=%p, Addr=%p, timeout=%ld\\n\",\n                            (void *)&sock_token, (void *)&conn_token, (void *)Addr, (long)timeout);\n                    fflush(log_fp);\n                }\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"After OS_SocketAccept_Impl: return_code=%ld\\n\", (long)return_code);\n                    fflush(log_fp);\n                }\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n\n                    /* Log the generated name(s) where possible */\n                    if (log_fp)\n                    {\n                        const char *generated_name = NULL;\n                        /* Attempt to log sock_record->name_entry and conn->stream_name if available */\n                        if (sock_record != NULL)\n                        {\n                            generated_name = sock_record->name_entry;\n                        }\n\n                        fprintf(log_fp, \"Generated socket name: sock_record->name_entry_ptr=%p, value=%s\\n\",\n                                (void *)sock_record->name_entry, (generated_name != NULL) ? generated_name : \"(null)\");\n\n                        if (conn != NULL)\n                        {\n                            fprintf(log_fp, \"conn->stream_name_ptr=%p\\n\", (void *)conn->stream_name);\n                        }\n                        fflush(log_fp);\n                    }\n\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"Calling OS_ObjectIdFinalizeNew with return_code=%ld\\n\", (long)return_code);\n                    fflush(log_fp);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"After OS_ObjectIdFinalizeNew: return_code=%ld, connsock_id_val=%p\\n\",\n                            (long)return_code, (void *)connsock_id);\n                    fflush(log_fp);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Released sock_token, about to return with return_code=%ld\\n\", (long)return_code);\n            fflush(log_fp);\n        }\n    }\n    else\n    {\n        if (log_fp)\n        {\n            fprintf(log_fp, \"OS_ObjectIdGetById failed early: return_code=%ld\\n\", (long)return_code);\n            fflush(log_fp);\n        }\n    }\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_SocketAccept EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log_fp);\n    }\n\n    return return_code;\n}\n"
}