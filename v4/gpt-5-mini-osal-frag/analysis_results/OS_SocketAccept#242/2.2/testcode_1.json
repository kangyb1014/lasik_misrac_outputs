{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&sock_token, 0, sizeof(sock_token)); is redundant. On the successful path OS_ObjectIdGetById(...) will initialize/overwrite the token before any use; on the failure path the token is never used (OS_ObjectIdRelease is only called inside the success branch). Therefore removing the memset would not change program behaviour \u2014 it is an executed operation whose removal has no effect, i.e. dead code. (It appears to be present only to placate static analysis.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3288.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAccept code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAccept with it.\n  - Your function must have the exact same signature as OS_SocketAccept.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAccept to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAccept as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAccept will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Local logging helpers */\n    {\n        FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER: OS_SocketAccept(sock_id=%u, connsock_id=%p, Addr=%p, timeout=%d)\\n\",\n                    (unsigned int)sock_id, (void *)connsock_id, (void *)Addr, (int)timeout);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    /* Log token bytes after explicit memset (to demonstrate the memset was executed) */\n    {\n        FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n        if (log)\n        {\n            unsigned char *p = (unsigned char *)&sock_token;\n            size_t n = sizeof(sock_token);\n            size_t i, m = (n > 16 ? 16 : n);\n            fprintf(log, \"AFTER memset(sock_token): first %zu bytes:\", (size_t)m);\n            for (i = 0; i < m; ++i) fprintf(log, \" %02x\", (unsigned int)p[i]);\n            fprintf(log, \" (total_size=%zu)\\n\", n);\n\n            p = (unsigned char *)&conn_token;\n            n = sizeof(conn_token);\n            m = (n > 16 ? 16 : n);\n            fprintf(log, \"AFTER memset(conn_token): first %zu bytes:\", (size_t)m);\n            for (i = 0; i < m; ++i) fprintf(log, \" %02x\", (unsigned int)p[i]);\n            fprintf(log, \" (total_size=%zu)\\n\", n);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdGetById: return_code=%d\\n\", (int)return_code);\n            /* Log a few bytes of the token to show it was written by OS_ObjectIdGetById */\n            unsigned char *p = (unsigned char *)&sock_token;\n            size_t n = sizeof(sock_token);\n            size_t i, m = (n > 16 ? 16 : n);\n            fprintf(log, \"sock_token first %zu bytes:\", (size_t)m);\n            for (i = 0; i < m; ++i) fprintf(log, \" %02x\", (unsigned int)p[i]);\n            fprintf(log, \"\\n\");\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Got sock_record=%p sock=%p socket_type=%d stream_state=0x%08x name_entry=%s\\n\",\n                        (void *)sock_record, (void *)sock,\n                        (int)socket_type_from_sock(sock), /* defensive: original code used sock->socket_type */\n                        (unsigned int)((sock) ? sock->stream_state : 0),\n                        (sock_record && sock_record->name_entry) ? sock_record->name_entry : \"(null)\");\n                fclose(log);\n            }\n        }\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Branch: incorrect socket type (expected STREAM). Setting return_code=%d\\n\", (int)return_code);\n                    fclose(log);\n                }\n            }\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Branch: incorrect socket state (must be BOUND but not CONNECTED). Setting return_code=%d\\n\", (int)return_code);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%d\\n\", (int)return_code);\n                    if (return_code == OS_SUCCESS)\n                    {\n                        unsigned char *p = (unsigned char *)&conn_token;\n                        size_t n = sizeof(conn_token);\n                        size_t i, m = (n > 16 ? 16 : n);\n                        fprintf(log, \"conn_token first %zu bytes:\", (size_t)m);\n                        for (i = 0; i < m; ++i) fprintf(log, \" %02x\", (unsigned int)p[i]);\n                        fprintf(log, \"\\n\");\n                    }\n                    fclose(log);\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                {\n                    FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                    if (log)\n                    {\n                        fprintf(log, \"After OS_SocketAccept_Impl: return_code=%d\\n\", (int)return_code);\n                        fclose(log);\n                    }\n                }\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n\n                    {\n                        FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                        if (log)\n                        {\n                            fprintf(log, \"Accept succeeded: conn_record=%p conn=%p stream_state=0x%08x name_entry=%s\\n\",\n                                    (void *)conn_record, (void *)conn,\n                                    (unsigned int)conn->stream_state,\n                                    (conn_record && conn_record->name_entry) ? conn_record->name_entry : \"(null)\");\n                            fclose(log);\n                        }\n                    }\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n\n                {\n                    FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n                    if (log)\n                    {\n                        fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%d connsock_id=%p *connsock_id=%u\\n\",\n                                (int)return_code, (void *)connsock_id, (unsigned int)(connsock_id ? *connsock_id : 0U));\n                        fclose(log);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdRelease called for sock_token. Final return_code=%d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/3288.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT: OS_SocketAccept returning %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}