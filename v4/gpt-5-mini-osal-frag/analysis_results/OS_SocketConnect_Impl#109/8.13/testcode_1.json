{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used to read members (impl->fd and impl->selectable). It could and should be declared as a pointer to const (const OS_impl_file_internal_record_t *impl) to indicate no modification and satisfy MISRA C 2023 Rule 8.13. Therefore the rule is violated in this code fragment.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2045.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect_Impl:\n```c\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketConnect_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketConnect_Impl with it.\n  - Your function must have the exact same signature as OS_SocketConnect_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketConnect_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketConnect_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketConnect_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketConnect_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Logging probe: open the log file for append. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_SocketConnect_Impl token=%p Addr=%p timeout=%d\\n\", (const void *)token, (const void *)Addr, (int)timeout);\n            fclose(log);\n        }\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the obtained impl pointer and some of its readable state. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n        if (log != NULL)\n        {\n            if (impl != NULL)\n            {\n                /* Log the pointer value and visible members used by this function. */\n                fprintf(log, \"impl=%p impl->fd=%d impl->selectable=%d\\n\", (void *)impl, (int)impl->fd, (int)impl->selectable);\n            }\n            else\n            {\n                fprintf(log, \"impl=NULL\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    /* Log address family and expected length information */\n    {\n        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"sa_family=%d computed_slen=%u Addr->ActualLength=%u\\n\", (int)sa->sa_family, (unsigned)slen, (unsigned)Addr->ActualLength);\n            fclose(log);\n        }\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n\n        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (bad address) return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        /* Log before calling connect */\n        {\n            FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling connect fd=%d sa_family=%d slen=%u\\n\", (int)impl->fd, (int)sa->sa_family, (unsigned)slen);\n                fclose(log);\n            }\n        }\n\n        os_status   = connect(impl->fd, sa, slen);\n\n        /* Log the result of connect */\n        {\n            FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"connect returned os_status=%d errno=%d\\n\", os_status, errno);\n                if (os_status < 0)\n                {\n                    fprintf(log, \"connect error string=%s\\n\", strerror(errno));\n                }\n                fclose(log);\n            }\n        }\n\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n\n                FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RETURN (connect immediate error) return_code=%d errno=%d\\n\", (int)return_code, errno);\n                    fclose(log);\n                }\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n\n                /* Log entering EINPROGRESS handling and the selectable flag */\n                {\n                    FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"EINPROGRESS branch impl->selectable=%d timeout=%d\\n\", (int)impl->selectable, (int)timeout);\n                        fclose(log);\n                    }\n                }\n\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n                    FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"After OS_SelectSingle_Impl return_code=%d operation=0x%08x\\n\", (int)return_code, (unsigned)operation);\n                        fclose(log);\n                    }\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n\n                        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                        if (log != NULL)\n                        {\n                            fprintf(log, \"SELECT timeout: return_code=%d\\n\", (int)return_code);\n                            fclose(log);\n                        }\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n\n                        /* Log getsockopt results */\n                        {\n                            FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                            if (log != NULL)\n                            {\n                                fprintf(log, \"getsockopt os_status=%d sockopt=%d slen=%u\\n\", os_status, sockopt, (unsigned)slen);\n                                fclose(log);\n                            }\n                        }\n\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n\n                            FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n                            if (log != NULL)\n                            {\n                                fprintf(log, \"CONNECT failure after select: os_status=%d sockopt=%d return_code=%d\\n\", os_status, sockopt, (int)return_code);\n                                fclose(log);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* Final return log */\n    {\n        FILE *log = fopen(\"/tmp/logs/2045.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_SocketConnect_Impl return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}