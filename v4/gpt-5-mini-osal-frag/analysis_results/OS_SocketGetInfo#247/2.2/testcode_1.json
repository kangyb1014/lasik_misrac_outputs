{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_SocketGetInfo_Impl(const OS_object_token_t *token, OS_socket_prop_t *sock_prop) is defined to immediately return OS_SUCCESS and performs no operations or side-effects. It is called from OS_SocketGetInfo(), but since the function does not modify sock_prop, the token, or any global state, removing the call and the function would not change the program's behaviour. Therefore the executed operation (the call/return) constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/838.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketGetInfo with it.\n  - Your function must have the exact same signature as OS_SocketGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Minimal entry log to show function was reached */\n    {\n        FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER OS_SocketGetInfo: sock_id=%ld, sock_prop=%p\\n\", (long)sock_id, (void *)sock_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    /* Log pointer was non-NULL (if reached) */\n    {\n        FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_SocketGetInfo: sock_prop is non-NULL, zeroing structure\\n\");\n            fclose(log);\n        }\n    }\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdGetById with sock_id=%ld\\n\", (long)sock_id);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log record contents used to populate sock_prop before calling Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n            if (log)\n            {\n                /* record->name_entry is expected to be a C string */\n                fprintf(log, \"Record found: name_entry=\\\"%s\\\", creator=%lu\\n\",\n                        record->name_entry ? record->name_entry : \"(null)\", (unsigned long)record->creator);\n                fclose(log);\n            }\n        }\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log state of sock_prop immediately before calling Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Before Impl: sock_prop->name=\\\"%s\\\", sock_prop->creator=%lu\\n\",\n                        sock_prop->name, (unsigned long)sock_prop->creator);\n                fprintf(log, \"Calling OS_SocketGetInfo_Impl with token=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log return from Impl and the sock_prop state after the call to capture any changes (or absence of them) */\n        {\n            FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_SocketGetInfo_Impl returned %ld\\n\", (long)return_code);\n                fprintf(log, \"After Impl: sock_prop->name=\\\"%s\\\", sock_prop->creator=%lu\\n\",\n                        sock_prop->name, (unsigned long)sock_prop->creator);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final return log */\n    {\n        FILE *log = fopen(\"/tmp/logs/838.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_SocketGetInfo: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}