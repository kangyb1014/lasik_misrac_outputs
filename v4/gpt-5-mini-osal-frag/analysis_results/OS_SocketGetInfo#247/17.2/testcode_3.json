{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion: OS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG (or OS_ConsoleWrite) is implemented in terms of OS_printf (e.g. OS_DEBUG -> OS_printf or OS_ConsoleWrite -> OS_printf), this yields OS_printf -> OS_DEBUG -> OS_printf (or via OS_ConsoleWrite), causing an indirect self-call and thus violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/830.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketGetInfo with it.\n  - Your function must have the exact same signature as OS_SocketGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    /* Local variables taken from the original implementation */\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Logging: open a persistent append log so external agents can inspect the control flow/state. */\n    /* Include stdio here to ensure FILE and fopen/fprintf are available when this function is substituted. */\n    /* Note: including headers inside a function is valid C and keeps this definition self-contained. */\n    #include <stdio.h>\n\n    FILE *log = fopen(\"/tmp/logs/830.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SocketGetInfo(sock_id=%lld, sock_prop=%p)\\n\", (long long)sock_id, (void *)sock_prop);\n        fflush(log);\n    }\n\n    /* Check parameters (preserve original behaviour) */\n    OS_CHECK_POINTER(sock_prop);\n\n    /* Preserve original zeroing behavior and log a simple post-condition */\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n    if (log)\n    {\n        fprintf(log, \"After memset: sock_prop->name[0]=%d\\n\", (int)sock_prop->name[0]);\n        fflush(log);\n    }\n\n    /* Check Parameters and capture the return and token info for reproducibility */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Fetch the record and log its key fields (name_entry and creator) */\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (log)\n        {\n            if (record != NULL)\n            {\n                /* Be defensive: name_entry may not be NUL-terminated in some implementations; print a safe prefix */\n                fprintf(log, \"Record: addr=%p, name_entry=%s, creator=%lu\\n\", (void *)record,\n                        record->name_entry ? record->name_entry : \"(null)\", (unsigned long)record->creator);\n            }\n            else\n            {\n                fprintf(log, \"Record: NULL returned from OS_OBJECT_TABLE_GET\\n\");\n            }\n            fflush(log);\n        }\n\n        /* Preserve original copying semantics */\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        if (log)\n        {\n            fprintf(log, \"Copied into sock_prop: name=%s, creator=%lu\\n\", sock_prop->name, (unsigned long)sock_prop->creator);\n            fprintf(log, \"About to call OS_SocketGetInfo_Impl(token_addr=%p, sock_prop=%p)\\n\", (void *)&token, (void *)sock_prop);\n            fflush(log);\n        }\n\n        /* Call platform-specific implementation and log its result */\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        if (log)\n        {\n            fprintf(log, \"OS_SocketGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        /* Release the token as in the original implementation */\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Token released\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetById failed; returning %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_SocketGetInfo returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}