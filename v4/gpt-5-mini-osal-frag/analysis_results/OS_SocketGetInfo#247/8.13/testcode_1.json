{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is only used for read-only access (record->name_entry and record->creator) and is assigned from the global table via OS_OBJECT_TABLE_GET. It should be declared with a pointer-to-const, e.g. 'const OS_common_record_t *record;', to prevent modification of the pointed-to record. The current declaration 'OS_common_record_t *record;' therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/835.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketGetInfo with it.\n  - Your function must have the exact same signature as OS_SocketGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Logging probe: record entry and parameter state */\n    {\n        FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_SocketGetInfo: sock_id=%lld, sock_prop=%p\\n\", (long long)sock_id, (void *)sock_prop);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    /* Log after parameter check (if we are still running) */\n    {\n        FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_CHECK_POINTER: sock_prop=%p\\n\", (void *)sock_prop);\n            fclose(logf);\n        }\n    }\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    {\n        FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record pointer and some of its read-only fields to capture the violation scenario */\n        {\n            FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n            if (logf != NULL)\n            {\n                if (record == NULL)\n                {\n                    fprintf(logf, \"Record pointer is NULL after OS_OBJECT_TABLE_GET\\n\");\n                }\n                else\n                {\n                    const char *name_str = (record->name_entry != NULL) ? record->name_entry : \"(null)\";\n                    fprintf(logf, \"Record pointer=%p, name_entry='%s', creator=%lld\\n\", (void *)record, name_str, (long long)record->creator);\n                }\n                fclose(logf);\n            }\n        }\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_SocketGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Released token for sock_id=%lld\\n\", (long long)sock_id);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final return value logging */\n    {\n        FILE *logf = fopen(\"/tmp/logs/835.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT OS_SocketGetInfo: return_code=%d for sock_id=%lld\\n\", (int)return_code, (long long)sock_id);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}