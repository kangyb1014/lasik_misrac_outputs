{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssertEx/UtAssert_DoReport is ever called with File == NULL or with a char buffer that is not NUL-terminated, the call FileLen = strlen(File); will read beyond the bounds of the object. Example: UtAssertEx(..., NULL, ..., \"msg\", ...); leads to strlen(NULL) (undefined behavior) or if File points to a non-terminated char array strlen will scan past the array bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssertEx code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssertEx with it.\n  - Your function must have the exact same signature as UtAssertEx.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssertEx to check logs.\n  - Your function MUST preserve the original logic of UtAssertEx as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssertEx will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssertEx as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Preserve original locking and counter behavior */\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    /* Format the final message exactly as original */\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Logging probe: record entry, key parameters and local state to a file so other agents\n       can reproduce/report the scenario that may trigger a bounds access in UtAssert_DoReport. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1963.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Timestamp not added to avoid depending on time functions; record control flow and state */\n            fprintf(log, \"UtAssertEx ENTER\\n\");\n            fprintf(log, \"  Expression: %s\\n\", Expression ? \"true\" : \"false\");\n            fprintf(log, \"  CaseType (numeric): %u\\n\", (unsigned)CaseType);\n            fprintf(log, \"  Line: %u\\n\", (unsigned)Line);\n            fprintf(log, \"  TestSegmentCount: %u\\n\", (unsigned)TestSegmentCount);\n            fprintf(log, \"  TotalTestCases: %u\\n\", (unsigned)TotalTestCases);\n            /* Log pointer value for File and a small, safe inspection if possible */\n            fprintf(log, \"  File pointer: %p\\n\", (const void *)File);\n            if (File == NULL)\n            {\n                fprintf(log, \"  File is NULL\\n\");\n            }\n            else\n            {\n                /* Attempt a minimal, safe inspection: print the first character and indicate whether\n                   it is printable. Do NOT call strlen here to avoid introducing additional UB. */\n                unsigned char c0 = (unsigned char)File[0];\n                /* Print up to first 8 bytes or until a NUL is observed, but stop if any read would be unsafe.\n                   We only read bytes sequentially; if File points to an invalid address this mimics the original\n                   risk the code already has (UtAssert_DoReport may call strlen). */\n                fprintf(log, \"  File[0] (hex): 0x%02x\\n\", c0);\n                if (c0 >= 32 && c0 < 127)\n                {\n                    /* printable */\n                    char buf0[2] = { (char)c0, '\\0' };\n                    fprintf(log, \"  File[0] (char): '%s'\\n\", buf0);\n                }\n                else if (c0 == '\\0')\n                {\n                    fprintf(log, \"  File seems NUL-terminated at first character\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"  File[0] non-printable\\n\");\n                }\n                /* Try to safely capture up to 31 bytes into a small local buffer for logging.\n                   This reads memory starting at File and may read beyond a short buffer if provided by caller,\n                   but doing so mirrors the original risk; we keep the capture small to reduce probability\n                   of catastrophic fault during normal test runs. */\n                {\n                    size_t max_capture = 31;\n                    size_t i;\n                    char capture[32];\n\n                    for (i = 0; i < max_capture; ++i)\n                    {\n                        /* Read sequentially; if File is valid for at least the bytes accessed this will capture content.\n                           If File points to a shorter, non-NUL-terminated buffer this may read beyond bounds (this is the\n                           scenario under investigation). */\n                        capture[i] = File[i];\n                        if (capture[i] == '\\0')\n                        {\n                            ++i; /* include terminator in length */\n                            break;\n                        }\n                    }\n                    /* Ensure we null-terminate capture for safe printing */\n                    if (i == 0)\n                    {\n                        capture[0] = '\\0';\n                    }\n                    else if (i <= max_capture)\n                    {\n                        capture[i < sizeof(capture) ? i : (sizeof(capture)-1)] = '\\0';\n                    }\n                    else\n                    {\n                        capture[sizeof(capture)-1] = '\\0';\n                    }\n\n                    fprintf(log, \"  File capture (up to %zu bytes or until NUL): '%s'\\n\", (size_t)max_capture, capture);\n                }\n            }\n\n            /* Log the formatted message that will be sent to the reporter */\n            fprintf(log, \"  FinalMessage: '%s'\\n\", FinalMessage);\n\n            fprintf(log, \"UtAssertEx LEAVING (about to call UtAssert_DoReport)\\n\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Call the original report function (may contain the strlen(File) that triggers the violation) */\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}