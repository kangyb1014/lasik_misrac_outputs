{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'SubsysName' of UtAssert_DoReport is never referenced in the function body. The sixth argument passed by UtAssertEx (CurrentSegment) is therefore unused; removing the parameter and the corresponding argument would not affect program behaviour, so this is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1968.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssertEx code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssertEx with it.\n  - Your function must have the exact same signature as UtAssertEx.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssertEx to check logs.\n  - Your function MUST preserve the original logic of UtAssertEx as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssertEx will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssertEx as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n    FILE   *LogFile = NULL;\n\n    /* Attempt to open log file for append. If the directory doesn't exist, fopen will fail silently. */\n    LogFile = fopen(\"/tmp/logs/1968.txt\", \"a\");\n    if (LogFile != NULL)\n    {\n        fprintf(LogFile, \"ENTER UtAssertEx: Expression=%d, CaseType(initial)=%u, File=%s, Line=%u, MessageFormat_ptr=%p\\n\",\n                (int)Expression, (unsigned)CaseType, (File ? File : \"(null)\"), (unsigned)Line, (const void *)MessageFormat);\n        fflush(LogFile);\n    }\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    if (LogFile != NULL)\n    {\n        fprintf(LogFile, \"After counters: TestSegmentCount=%u, TotalTestCases=%u, CaseType(updated)=%u\\n\",\n                (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CaseType);\n        fflush(LogFile);\n    }\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    if (LogFile != NULL)\n    {\n        /* Log the formatted message and the CurrentSegment value that is passed to UtAssert_DoReport. */\n        fprintf(LogFile, \"FinalMessage='%s'\\n\", FinalMessage);\n        /* CurrentSegment is expected to be a project-global variable; log its numeric value. */\n        fprintf(LogFile, \"CurrentSegment (value passed to UtAssert_DoReport)=%u\\n\", (unsigned)CurrentSegment);\n        fprintf(LogFile, \"Calling UtAssert_DoReport(File=%s, Line=%u, TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u, CurrentSegment=%u, FinalMessage)\\n\",\n                (File ? File : \"(null)\"), (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CaseType, (unsigned)CurrentSegment);\n        fflush(LogFile);\n        fclose(LogFile);\n        LogFile = NULL;\n    }\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}