{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In the error path OS_BSP_Unlock_Impl calls BSP_DEBUG, and BSP_DEBUG may call UT_BSP_DoText (or other logging that uses the UT BSP lock/unlock wrappers). UT_BSP_DoText calls UT_BSP_Unlock, which in turn calls OS_BSP_Unlock_Impl (the implementation under analysis). This yields an indirect recursive call chain: OS_BSP_Unlock_Impl -> BSP_DEBUG -> UT_BSP_DoText -> UT_BSP_Unlock -> OS_BSP_Unlock_Impl, violating MISRA C 2023 Rule 17.2. (This conclusion assumes BSP_DEBUG uses the UT BSP text output path shown in the additional code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1960.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssertEx code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssertEx with it.\n  - Your function must have the exact same signature as UtAssertEx.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssertEx to check logs.\n  - Your function MUST preserve the original logic of UtAssertEx as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssertEx will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssertEx as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Reentrancy depth probe to detect indirect recursion (e.g., via UT_BSP_Unlock -> OS_BSP_Unlock_Impl -> BSP_DEBUG -> ... -> UtAssertEx) */\n    static int reentrancy_depth = 0;\n    ++reentrancy_depth;\n\n    /* Try to open the requested log file; fall back to /tmp/1960.txt if the directory doesn't exist */\n    FILE *logf = fopen(\"/tmp/logs/1960.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/1960.txt\", \"a\");\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"ENTER UtAssertEx depth=%d Expression=%d CaseType=%u File=%p Line=%u MessageFormat=%p\\n\",\n                reentrancy_depth, (int)Expression, (unsigned)CaseType, (const void *)File, (unsigned)Line, (const void *)MessageFormat);\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n\n    if (logf)\n    {\n        fprintf(logf, \"After UT_BSP_Lock depth=%d\\n\", reentrancy_depth);\n        fflush(logf);\n    }\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n        if (logf)\n        {\n            fprintf(logf, \"Expression true -> set CaseType to PASS depth=%d\\n\", reentrancy_depth);\n            fflush(logf);\n        }\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        if (logf)\n        {\n            fprintf(logf, \"Incremented CaseCount[%u] (now=%u) depth=%d\\n\",\n                    (unsigned)CaseType, (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType], reentrancy_depth);\n            fflush(logf);\n        }\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    if (logf)\n    {\n        fprintf(logf, \"Computed TestSegmentCount=%u TotalTestCases=%u before UT_BSP_Unlock depth=%d\\n\",\n                (unsigned)TestSegmentCount, (unsigned)TotalTestCases, reentrancy_depth);\n        fflush(logf);\n    }\n\n    UT_BSP_Unlock();\n\n    if (logf)\n    {\n        fprintf(logf, \"Returned from UT_BSP_Unlock depth=%d\\n\", reentrancy_depth);\n        fflush(logf);\n    }\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    if (logf)\n    {\n        /* Log the formatted final message (trim to avoid extremely long outputs) */\n        FinalMessage[sizeof(FinalMessage)-1] = '\\0';\n        fprintf(logf, \"About to call UtAssert_DoReport depth=%d File=%s Line=%u TestSegmentCount=%u TotalTestCases=%u CaseType=%u Message=\\\"%s\\\"\\n\",\n                reentrancy_depth, (File ? File : \"(null)\"), (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (unsigned)CaseType,\n                FinalMessage);\n        fflush(logf);\n    }\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT UtAssertEx depth=%d returning=%d\\n\", reentrancy_depth, (int)Expression);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    --reentrancy_depth;\n\n    return Expression;\n}\n"
}