{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'CaseType' is assigned in the fragment: if (Expression) { CaseType = UTASSERT_CASETYPE_PASS; }. This directly modifies a function parameter, which violates MISRA C 2023 Rule 17.8 (the pointer exception does not apply here).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1962.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssertEx code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssertEx with it.\n  - Your function must have the exact same signature as UtAssertEx.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssertEx to check logs.\n  - Your function MUST preserve the original logic of UtAssertEx as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssertEx will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssertEx as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n    /* Capture original parameter value so the logs can show the modification */\n    UtAssert_CaseType_t OriginalCaseType = CaseType;\n    FILE *log = fopen(\"/tmp/logs/1962.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtAssertEx ENTER: Expression=%d, OriginalCaseType=%u, File=%s, Line=%u\\n\",\n                (int)Expression,\n                (unsigned)OriginalCaseType,\n                (File != NULL) ? File : \"(null)\",\n                (unsigned)Line);\n    }\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        /* This assignment modifies a function parameter (intentional for the reproduced scenario) */\n        CaseType = UTASSERT_CASETYPE_PASS;\n        if (log != NULL)\n        {\n            fprintf(log, \"CaseType modified: Original=%u -> New=%u (UTASSERT_CASETYPE_PASS)\\n\",\n                    (unsigned)OriginalCaseType,\n                    (unsigned)CaseType);\n        }\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        if (log != NULL)\n        {\n            fprintf(log, \"Incremented CaseCount for CaseType=%u. New count=%u\\n\",\n                    (unsigned)CaseType,\n                    (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n        }\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Computed TestSegmentCount=%u, TotalTestCases=%u\\n\",\n                (unsigned)TestSegmentCount,\n                (unsigned)TotalTestCases);\n    }\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"FinalMessage=\\\"%s\\\"\\n\", FinalMessage);\n        fprintf(log, \"About to call UtAssert_DoReport: File=%s, Line=%u, TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u\\n\",\n                (File != NULL) ? File : \"(null)\",\n                (unsigned)Line,\n                (unsigned)TestSegmentCount,\n                (unsigned)TotalTestCases,\n                (unsigned)CaseType);\n        fclose(log);\n    }\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n"
}