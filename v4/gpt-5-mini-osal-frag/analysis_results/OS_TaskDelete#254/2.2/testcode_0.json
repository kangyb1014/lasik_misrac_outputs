{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initialization 'delete_hook = NULL;' at function start is dead code: in the success path it is immediately overwritten by 'delete_hook = task->delete_hook_pointer;', and in the failure path (OS_ObjectIdGetById != OS_SUCCESS) the variable is never used because the later check also requires return_code == OS_SUCCESS. Therefore removing the initialization would not change program behaviour, which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/778.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskDelete with it.\n  - Your function must have the exact same signature as OS_TaskDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskDelete to check logs.\n  - Your function MUST preserve the original logic of OS_TaskDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Open log for tracing control flow/state for MISRA Rule 2.2 investigation */\n    FILE *log = fopen(\"/tmp/logs/778.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_TaskDelete ENTRY: task_id=%u\\n\", (unsigned)task_id);\n        fflush(log);\n    }\n\n    /* Original initialization (subject of the reported dead-code issue) */\n    delete_hook = NULL;\n    if (log)\n    {\n        fprintf(log, \"after init: delete_hook = %p\\n\", (void *)delete_hook);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        if (log)\n        {\n            fprintf(log, \"OS_OBJECT_TABLE_GET -> task=%p (token addr=%p)\\n\", (void *)task, (void *)&token);\n            fflush(log);\n        }\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n        if (log)\n        {\n            fprintf(log, \"saved delete_hook = %p (task->delete_hook_pointer)\\n\", (void *)delete_hook);\n            fflush(log);\n        }\n\n        return_code = OS_TaskDelete_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_TaskDelete_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"before final check: return_code=%d, delete_hook=%p\\n\", (int)return_code, (void *)delete_hook);\n        fflush(log);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling delete_hook at %p\\n\", (void *)delete_hook);\n            fflush(log);\n        }\n\n        delete_hook();\n\n        if (log)\n        {\n            fprintf(log, \"Returned from delete_hook\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_TaskDelete EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}