{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDelete_Impl the local variable 'impl' is declared as a non-const pointer (OS_impl_task_internal_record_t *impl) but is only used for read-only access (impl->id used with pthread_cancel/pthread_join). Therefore the pointer could and should be declared to point to a const-qualified type (const OS_impl_task_internal_record_t *impl). As written this fails to qualify the pointer as const when possible, violating MISRA C 2023 Rule 8.13. A minimal fix is to change the declaration to 'const OS_impl_task_internal_record_t *impl;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/775.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskDelete with it.\n  - Your function must have the exact same signature as OS_TaskDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskDelete to check logs.\n  - Your function MUST preserve the original logic of OS_TaskDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Logging probe: open log file */\n    {\n        FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_TaskDelete: task_id=%u\\n\", (unsigned)task_id);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById returned %d; token_addr=%p\\n\", (int)return_code, (void *)&token);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the retrieved task pointer and delete hook before modification */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Retrieved task pointer=%p; delete_hook_pointer=%p\\n\",\n                        (void *)task, (void *)task->delete_hook_pointer);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log just before calling implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_TaskDelete_Impl with token_addr=%p\\n\", (void *)&token);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Log result from implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskDelete_Impl returned %d for task_id=%u\\n\", (int)return_code, (unsigned)task_id);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log result after finalize */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ObjectIdFinalizeDelete returned %d for task_id=%u\\n\", (int)return_code, (unsigned)task_id);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        /* Log that the delete hook will be invoked */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Invoking delete_hook for task_id=%u; delete_hook_ptr=%p\\n\",\n                        (unsigned)task_id, (void *)delete_hook);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        delete_hook();\n\n        /* Log completion of delete hook */\n        {\n            FILE *logf = fopen(\"/tmp/logs/775.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Completed delete_hook for task_id=%u\\n\", (unsigned)task_id);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}