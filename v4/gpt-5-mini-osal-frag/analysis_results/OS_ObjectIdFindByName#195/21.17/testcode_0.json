{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf LENGTHCHECK(name, OS_MAX_API_NAME, ...) is implemented using an unbounded string.h routine such as strlen (or strcpy/strncpy/strcat/etc.) it can read past the end of the object referenced by name when name is not a NUL-terminated string or the buffer is shorter than expected. For example, if the caller passes a pointer to a char buffer that is not NUL-terminated (or points near the end of accessible memory), strlen(name) inside LENGTHCHECK will scan beyond the buffer bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2073.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFindByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFindByName with it.\n  - Your function must have the exact same signature as OS_ObjectIdFindByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFindByName to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFindByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Logging probe variables */\n    FILE *___log_fp = NULL;\n    size_t ___i;\n    int ___nul_found = 0;\n\n    /* Try to open log file (create parent dir if necessary) */\n    ___log_fp = fopen(\"/tmp/logs/2073.txt\", \"a\");\n    if (___log_fp == NULL)\n    {\n        /* Best-effort: create directory and retry. If this fails, just continue without logging. */\n        (void)system(\"mkdir -p /tmp/logs 2>/dev/null\");\n        ___log_fp = fopen(\"/tmp/logs/2073.txt\", \"a\");\n    }\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"ENTER OS_ObjectIdFindByName: idtype=%d name=%p object_id=%p\\n\",\n                (int)idtype, (const void *)name, (void *)object_id);\n        fflush(___log_fp);\n    }\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"Before ARGCHECK: name=%p\\n\", (const void *)name);\n        fflush(___log_fp);\n    }\n\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"After ARGCHECK: name=%p\\n\", (const void *)name);\n        fflush(___log_fp);\n    }\n\n    /*\n     * Perform a bounded scan for a NUL within OS_MAX_API_NAME bytes and log the\n     * result. This bounded scan mirrors a safe LEN check (it only inspects at\n     * most OS_MAX_API_NAME bytes) and is intended to provide evidence whether\n     * the provided name appears to be NUL-terminated within the expected\n     * limit. Note: this loop still reads memory starting at 'name' and thus\n     * can fault if 'name' does not point to accessible memory; this matches\n     * the kinds of issues Rule 21.17 is intended to highlight when callers\n     * pass unterminated or too-small buffers.\n     */\n    ___nul_found = 0;\n    if (name != NULL)\n    {\n        for (___i = 0; ___i < (size_t)OS_MAX_API_NAME; ++___i)\n        {\n            unsigned char ___c = ((const unsigned char *)name)[___i];\n            if (___c == 0)\n            {\n                ___nul_found = 1;\n                break;\n            }\n        }\n    }\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"NAME_SCAN: name=%p nul_found=%d scanned=%zu (OS_MAX_API_NAME=%d)\\n\",\n                (const void *)name, ___nul_found, (size_t)(___nul_found ? ___i + 1 : (size_t)OS_MAX_API_NAME), (int)OS_MAX_API_NAME);\n\n        /* Print up to the first 32 bytes (or OS_MAX_API_NAME if smaller) as hex for diagnosis */\n        {\n            size_t ___max_print = (OS_MAX_API_NAME < 32) ? (size_t)OS_MAX_API_NAME : 32;\n            fprintf(___log_fp, \"NAME_BYTES_HEX:\");\n            if (name != NULL)\n            {\n                size_t ___j;\n                for (___j = 0; ___j < ___max_print; ++___j)\n                {\n                    unsigned char ___c = ((const unsigned char *)name)[___j];\n                    fprintf(___log_fp, \" %02x\", ___c);\n                }\n            }\n            else\n            {\n                fprintf(___log_fp, \" (null)\");\n            }\n            fprintf(___log_fp, \"\\n\");\n        }\n\n        fflush(___log_fp);\n    }\n\n    /* Keep original LENGTHCHECK behavior; this may itself invoke an unbounded\n     * string routine (e.g. strlen) depending on the implementation. We log\n     * immediately before calling it so the log shows the pre-check state. */\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"Calling LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG)\\n\");\n        fflush(___log_fp);\n    }\n\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"After LENGTHCHECK\\n\");\n        fflush(___log_fp);\n    }\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"After OS_ObjectIdGetByName: return_code=%ld\\n\", (long)return_code);\n        fflush(___log_fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        if (___log_fp != NULL)\n        {\n            fprintf(___log_fp, \"Found object: obj_id=%ld -> stored to *object_id=%p\\n\", (long)token.obj_id, (void *)object_id);\n            fflush(___log_fp);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (___log_fp != NULL)\n        {\n            fprintf(___log_fp, \"Object not found or error: return_code=%ld\\n\", (long)return_code);\n            fflush(___log_fp);\n        }\n    }\n\n    if (___log_fp != NULL)\n    {\n        fprintf(___log_fp, \"EXIT OS_ObjectIdFindByName: return_code=%ld\\n\", (long)return_code);\n        fclose(___log_fp);\n    }\n\n    return return_code;\n}\n"
}