{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if the caller passes UT_ExecuteVaHandler itself (or a handler that calls it) as the DefaultHandler, then UT_ExecuteVaHandler will register that handler via UT_SetVaHandlerFunction and immediately call UT_DefaultStubImplWithArgs. If UT_DefaultStubImplWithArgs invokes the registered VA handler, this causes UT_ExecuteVaHandler to be called again (indirect recursion).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdToArrayIndex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2540.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdToArrayIndex:\n```c\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdToArrayIndex code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdToArrayIndex with it.\n  - Your function must have the exact same signature as OS_ObjectIdToArrayIndex.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdToArrayIndex to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdToArrayIndex will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n    FILE *logf = NULL;\n\n    /* Minimal entry probe so the function invocation is always logged */\n    logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_ObjectIdToArrayIndex(idtype=%llu, object_id=%llu, ArrayIndex=%p)\\n\",\n                (unsigned long long)idtype, (unsigned long long)object_id, (void *)ArrayIndex);\n        fflush(logf);\n    }\n\n    /* Check Parameters (preserve original behavior) */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Computed: obj_index=%llu, actual_type=%llu\\n\",\n                (unsigned long long)obj_index, (unsigned long long)actual_type);\n        fflush(logf);\n    }\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Branch: type_mismatch (idtype=%llu, actual_type=%llu) => return_code=%d\\n\",\n                    (unsigned long long)idtype, (unsigned long long)actual_type, (int)return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Lookup: max_id=%llu for actual_type=%llu\\n\",\n                    (unsigned long long)max_id, (unsigned long long)actual_type);\n            fflush(logf);\n        }\n\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Branch: max_id==0 => return_code=%d\\n\", (int)return_code);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Success: ArrayIndex=%llu (obj_index=%llu %% max_id=%llu), return_code=%d\\n\",\n                        (unsigned long long)*ArrayIndex,\n                        (unsigned long long)obj_index,\n                        (unsigned long long)max_id,\n                        (int)return_code);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}