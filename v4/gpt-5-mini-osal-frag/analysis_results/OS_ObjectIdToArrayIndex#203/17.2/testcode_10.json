{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG and OS_ConsoleWrite. If OS_DEBUG is defined to call OS_printf (e.g. a macro that forwards to OS_printf), or if the console implementation used by OS_ConsoleWrite/OS_ConsoleOutput_Impl ultimately calls OS_printf, then OS_printf would indirectly call itself (OS_printf -> OS_DEBUG/OS_ConsoleWrite -> ... -> OS_printf). That indirect recursion would violate MISRA C 2023 Rule 17.2. The fragment itself does not prove a violation, but the presence of either OS_DEBUG or console output paths that invoke OS_printf creates a violation scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdToArrayIndex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2540.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdToArrayIndex:\n```c\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdToArrayIndex code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdToArrayIndex with it.\n  - Your function must have the exact same signature as OS_ObjectIdToArrayIndex.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdToArrayIndex to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdToArrayIndex will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    /* Minimal probe to record that the function was entered and the input parameters. */\n    {\n        /* Write logs in append mode so repeated calls accumulate evidence. Use a short, local FILE* so we don't alter global state. */\n        FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_ObjectIdToArrayIndex: idtype=%d, object_id=%llu, ArrayIndex_ptr=%p\\n\",\n                    (int)idtype, (unsigned long long)object_id, (void *)ArrayIndex);\n            fclose(logf);\n        }\n    }\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /* Log intermediate results after obtaining serial number and type */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Computed obj_index=%u, actual_type=%d\\n\", (unsigned) obj_index, (int) actual_type);\n            fclose(logf);\n        }\n    }\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n\n        FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Type mismatch: requested=%d, actual=%d -> return %d\\n\",\n                    (int)idtype, (int)actual_type, (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n\n        FILE *logf_mid = fopen(\"/tmp/logs/2540.txt\", \"a\");\n        if (logf_mid != NULL)\n        {\n            fprintf(logf_mid, \"max_id for type %d is %u\\n\", (int)actual_type, (unsigned)max_id);\n            fclose(logf_mid);\n        }\n\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n\n            FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"max_id == 0 -> return %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n\n            FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Success: obj_index=%u, max_id=%u, ArrayIndex=%u, return=%d\\n\",\n                        (unsigned)obj_index, (unsigned)max_id, (unsigned)*ArrayIndex, (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final return path logging */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2540.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT OS_ObjectIdToArrayIndex: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}