{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(string) can read bytes until a NUL byte is found; if 'string' is NULL or points to a buffer that is not NUL-terminated within its allocated bounds (for example: char buf[4] = {'a','b','c','d'}; strlen(buf);), strlen will access beyond the object bounds. Because the fragment does not show any guarantee or check that 'string' is a valid NUL-terminated object, this use may violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertIn_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertIn_Impl:\n```c\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    return status;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FdSet_ConvertIn_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FdSet_ConvertIn_Impl with it.\n  - Your function must have the exact same signature as OS_FdSet_ConvertIn_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FdSet_ConvertIn_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_FdSet_ConvertIn_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FdSet_ConvertIn_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FdSet_ConvertIn_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    FILE *log = fopen(\"/tmp/logs/1823.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_FdSet_ConvertIn_Impl: os_maxfd_ptr=%p, os_set_ptr=%p, OSAL_set_ptr=%p\\n\",\n                (void *)os_maxfd, (void *)os_set, (const void *)OSAL_set);\n    }\n\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        if (log)\n        {\n            fprintf(log, \" offset=%zu objids=0x%02x\\n\", offset, (unsigned int)objids);\n        }\n\n        bit = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if (log)\n            {\n                fprintf(log, \"  bit=%zu id=%u objids_lowbit=%d\\n\",\n                        bit, (unsigned int)id, (int)((objids & 0x01) != 0));\n            }\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (log)\n                {\n                    fprintf(log, \"   selected id=%u osfd=%d selectable=%d\\n\",\n                            (unsigned int)id, osfd,\n                            (int)(OS_impl_filehandle_table[id].selectable ? 1 : 0));\n                }\n\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        if (log)\n                        {\n                            fprintf(log, \"    osfd out-of-range or not selectable: osfd=%d FD_SETSIZE=%d selectable=%d -> status=OS_ERR_OPERATION_NOT_SUPPORTED\\n\",\n                                    osfd, (int)FD_SETSIZE, (int)(OS_impl_filehandle_table[id].selectable ? 1 : 0));\n                        }\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (log)\n                        {\n                            fprintf(log, \"    FD_SET(osfd=%d)\\n\", osfd);\n                        }\n\n                        if (osfd > *os_maxfd)\n                        {\n                            /* Log the update of *os_maxfd at the same point the original code would read it. */\n                            if (log)\n                            {\n                                fprintf(log, \"    updating os_maxfd: old=%d new=%d\\n\", *os_maxfd, osfd);\n                            }\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_FdSet_ConvertIn_Impl: status=%d os_maxfd_ptr=%p\\n\", status, (void *)os_maxfd);\n        fclose(log);\n    }\n\n    return status;\n}"
}