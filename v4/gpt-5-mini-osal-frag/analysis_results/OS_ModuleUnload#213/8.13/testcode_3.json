{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is declared as OS_module_internal_record_t * but is only used for read access (module->module_type) and never modifies the pointed object. Per MISRA C 2023 Rule 8.13 it should be a pointer-to-const, e.g. const OS_module_internal_record_t *module. Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a const-qualified pointer is allowed, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1245.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleUnload code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleUnload with it.\n  - Your function must have the exact same signature as OS_ModuleUnload.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleUnload to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleUnload as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleUnload will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n    FILE *logf = NULL;\n\n    /* Try to open the log file for append. Best-effort logging; do not\n     * change functional behavior if logging fails. */\n    logf = fopen(\"/tmp/logs/1245.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ModuleUnload ENTER: module_id=%llu\\n\", (unsigned long long)module_id);\n        fflush(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %ld; token_addr=%p\\n\", (long)return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_OBJECT_TABLE_GET returned module_ptr=%p\\n\", (void *)module);\n            fflush(logf);\n        }\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (logf != NULL)\n        {\n            /* Log the module_type read (this deliberately dereferences the\n             * module pointer in the same way the original implementation does\n             * so that the log reflects the same control flow/state). */\n            fprintf(logf, \"About to read module->module_type from module_ptr=%p\\n\", (void *)module);\n            fflush(logf);\n        }\n\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"module->module_type == OS_MODULE_TYPE_DYNAMIC -> calling OS_ModuleUnload_Impl\\n\");\n                fflush(logf);\n            }\n\n            return_code = OS_ModuleUnload_Impl(&token);\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ModuleUnload_Impl returned %ld\\n\", (long)return_code);\n                fflush(logf);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdFinalizeDelete returned %ld\\n\", (long)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ModuleUnload EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}