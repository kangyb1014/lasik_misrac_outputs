{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) writes sizeof(OS_object_token_t) bytes starting at the address in token. If token is NULL or points to an object smaller than OS_object_token_t (or otherwise invalid), this will write beyond the bounds of the referenced object. For example, if OS_ObjectIdTransactionInit is invoked with token == NULL (or with a pointer to a smaller/incorrectly typed buffer), the memset will perform an out-of-bounds write (NULL dereference), violating Rule 21.17. Note: the specific call path shown (OS_ModuleUnload -> OS_ObjectIdGetById -> OS_ObjectIdTransactionInit) passes a local OS_object_token_t variable address and is safe, but the function itself lacks a pointer validity check and is therefore vulnerable in other call scenarios.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1243.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleUnload code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleUnload with it.\n  - Your function must have the exact same signature as OS_ModuleUnload.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleUnload to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleUnload as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleUnload will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n    FILE *log = fopen(\"/tmp/logs/1243.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleUnload ENTRY: module_id=%lld\\n\", (long long)module_id);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleUnload: after OS_ObjectIdGetById: return_code=%d, token_addr=%p, token_size=%zu\\n\",\n                (int)return_code, (void *)&token, sizeof(token));\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ModuleUnload: resolved module ptr=%p\\n\", (void *)module);\n            fflush(log);\n        }\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            if (log)\n            {\n                fprintf(log, \"OS_ModuleUnload: module is DYNAMIC, calling OS_ModuleUnload_Impl with token_addr=%p\\n\", (void *)&token);\n                fflush(log);\n            }\n\n            return_code = OS_ModuleUnload_Impl(&token);\n\n            if (log)\n            {\n                fprintf(log, \"OS_ModuleUnload: after OS_ModuleUnload_Impl: return_code=%d\\n\", (int)return_code);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"OS_ModuleUnload: module is NOT DYNAMIC (module_type=%d), skipping OS_ModuleUnload_Impl\\n\",\n                        (int)module->module_type);\n                fflush(log);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        if (log)\n        {\n            fprintf(log, \"OS_ModuleUnload: calling OS_ObjectIdFinalizeDelete with prior_return=%d, token_addr=%p\\n\",\n                    (int)return_code, (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ModuleUnload: final return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ModuleUnload: OS_ObjectIdGetById failed, return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}