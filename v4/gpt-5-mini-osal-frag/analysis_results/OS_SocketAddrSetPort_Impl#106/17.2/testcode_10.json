{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_DEBUG macro/function used here ultimately calls OS_printf (for example, if OS_DEBUG is defined to call OS_printf or calls another routine that calls OS_printf), then OS_printf -> OS_DEBUG -> OS_printf forms an indirect recursion. This would violate MISRA C 2023 Rule 17.2 (functions shall not call themselves, directly or indirectly). The code as shown does not include the definition of OS_DEBUG, so the violation is possible but not proven without that definition.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrSetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/130.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrSetPort_Impl:\n```c\nint32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)\n{\n    in_port_t               sa_port;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    sa_port  = htons(PortNum);\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            Accessor->sa_in.sin_port = sa_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            Accessor->sa_in6.sin6_port = sa_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAddrSetPort_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAddrSetPort_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAddrSetPort_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAddrSetPort_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAddrSetPort_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAddrSetPort_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAddrSetPort_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAddrSetPort_Impl(OS_SockAddr_t *Addr, uint16 PortNum)\n{\n    in_port_t               sa_port;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    /* Convert the port to network byte order (preserve original logic) */\n    sa_port  = htons(PortNum);\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Logging: append a record describing entry and the key state values. */\n    {\n        FILE *log = fopen(\"/tmp/logs/130.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Print addresses and values that describe the control path and state. */\n            fprintf(log, \"ENTER: OS_SocketAddrSetPort_Impl Addr=%p PortNum=%u sa_port=0x%04x family=%d\\n\",\n                    (void *)Addr,\n                    (unsigned int)PortNum,\n                    (unsigned int)((uint16_t)sa_port),\n                    (int)Accessor->sa.sa_family);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n        {\n            Accessor->sa_in.sin_port = sa_port;\n\n            /* Log the taken path and resulting port value for AF_INET */\n            FILE *log = fopen(\"/tmp/logs/130.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"PATH: AF_INET set sin_port=0x%04x (net order) Addr=%p\\n\",\n                        (unsigned int)((uint16_t)Accessor->sa_in.sin_port),\n                        (void *)Addr);\n                fflush(log);\n                fclose(log);\n            }\n            break;\n        }\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n        {\n            Accessor->sa_in6.sin6_port = sa_port;\n\n            /* Log the taken path and resulting port value for AF_INET6 */\n            FILE *log = fopen(\"/tmp/logs/130.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"PATH: AF_INET6 set sin6_port=0x%04x (net order) Addr=%p\\n\",\n                        (unsigned int)((uint16_t)Accessor->sa_in6.sin6_port),\n                        (void *)Addr);\n                fflush(log);\n                fclose(log);\n            }\n            break;\n        }\n#endif\n        default:\n        {\n            /* Log the unexpected family and the fact that a bad address is returned */\n            FILE *log = fopen(\"/tmp/logs/130.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"PATH: DEFAULT family=%d => return OS_ERR_BAD_ADDRESS Addr=%p\\n\",\n                        (int)Accessor->sa.sa_family,\n                        (void *)Addr);\n                fflush(log);\n                fclose(log);\n            }\n            return OS_ERR_BAD_ADDRESS;\n        }\n    }\n\n    /* Log successful completion */\n    {\n        FILE *log = fopen(\"/tmp/logs/130.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_SocketAddrSetPort_Impl return OS_SUCCESS Addr=%p\\n\", (void *)Addr);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}