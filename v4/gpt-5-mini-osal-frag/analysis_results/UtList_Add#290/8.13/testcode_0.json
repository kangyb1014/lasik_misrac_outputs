{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as void * but is only passed to UtList_NewNode and never modified in UtList_Add; if the function (and the called UtList_NewNode) do not modify the pointed-to object, 'Data' should be declared const void * to satisfy MISRA C 2023 Rule 8.13. (ListHead is likely non-const because the list may be modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2815.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_Add code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_Add with it.\n  - Your function must have the exact same signature as UtList_Add.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_Add to check logs.\n  - Your function MUST preserve the original logic of UtList_Add as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_Add will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_Add as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n    FILE *log = NULL;\n\n    /* Open log file for appending; best-effort logging, do not change control flow on failure */\n    log = fopen(\"/tmp/logs/2815.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UtList_Add ENTER: ListHead=%p, Data=%p, DataSize=%u, Tag=%u\\n\",\n                (void *)ListHead, (void *)Data, (unsigned)DataSize, (unsigned)Tag);\n        fflush(log);\n    }\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtList_GetHead returned TagHead=%p\\n\", (void *)TagHead);\n        fflush(log);\n    }\n\n    if (TagHead != NULL)\n    {\n        /* Log Data pointer and a small sample of the data (if safe) before creating the node */\n        if (log != NULL)\n        {\n            fprintf(log, \"Preparing to create new node. Data=%p, DataSize=%u\\n\",\n                    (void *)Data, (unsigned)DataSize);\n            if ((Data != NULL) && (DataSize > 0u))\n            {\n                unsigned int i;\n                unsigned int max_bytes = (DataSize > 8u) ? 8u : (unsigned int)DataSize;\n                unsigned char *bytes = (unsigned char *)Data;\n\n                fprintf(log, \"Data sample (up to %u bytes):\", max_bytes);\n                for (i = 0u; i < max_bytes; ++i)\n                {\n                    fprintf(log, \" %02X\", (unsigned)bytes[i]);\n                }\n                fprintf(log, \"\\n\");\n            }\n            else\n            {\n                fprintf(log, \"No data sample (Data is NULL or DataSize==0)\\n\");\n            }\n            fflush(log);\n        }\n\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UtList_NewNode returned NewNode=%p\\n\", (void *)NewNode);\n            fflush(log);\n        }\n\n        if (NewNode != NULL)\n        {\n            /* Preserve original behavior: set tag and insert before TagHead */\n            NewNode->Tag = Tag;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Assigned NewNode->Tag=%u\\n\", (unsigned)NewNode->Tag);\n                fflush(log);\n            }\n\n            UtList_Insert_Before(TagHead, NewNode);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"UtList_Insert_Before called with TagHead=%p, NewNode=%p\\n\",\n                        (void *)TagHead, (void *)NewNode);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"NewNode allocation failed (NULL)\\n\");\n                fflush(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"TagHead is NULL; no node will be added\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtList_Add EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}