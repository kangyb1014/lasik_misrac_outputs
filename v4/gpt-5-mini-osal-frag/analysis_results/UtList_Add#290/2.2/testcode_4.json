{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UtList_NewNode the call memset(AllocNode, 0, sizeof(union NodeAllocator)) writes zeros into the union storage, but immediately afterwards the code assigns AllocNode->Node.Data, AllocNode->Node.DataSize and sets AllocNode->Node.Next/Prev. In the only shown caller (UtList_Add) the caller then sets NewNode->Tag. Thus all bytes zeroed by the memset are subsequently overwritten (or set by the caller) before any use. Removing the memset would not change program behaviour in the provided code paths, so the memset is an executed operation that is redundant (dead) and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2818.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_Add code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_Add with it.\n  - Your function must have the exact same signature as UtList_Add.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_Add to check logs.\n  - Your function MUST preserve the original logic of UtList_Add as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_Add will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_Add as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Open log file (append) to record control flow and state for debugging */\n    FILE *logf = fopen(\"/tmp/logs/2818.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER UtList_Add: ListHead=%p Data=%p DataSize=%u Tag=%u\\n\",\n                (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n    }\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    if (logf)\n    {\n        fprintf(logf, \"UtList_GetHead returned TagHead=%p\\n\", (void *)TagHead);\n    }\n\n    if (TagHead != NULL)\n    {\n        /* Preserve original behavior: create the new node */\n        NewNode = UtList_NewNode(Data, DataSize);\n\n        if (logf)\n        {\n            fprintf(logf, \"UtList_NewNode returned NewNode=%p\\n\", (void *)NewNode);\n        }\n\n        if (NewNode != NULL)\n        {\n            /* Dump the raw bytes of the newly allocated node to help detect\n               if an internal memset was applied and which bytes are later overwritten. */\n            unsigned char *bytes = (unsigned char *)NewNode;\n            size_t dumpSize = sizeof *NewNode;\n            const size_t MAX_DUMP = 256;\n\n            if (dumpSize > MAX_DUMP)\n            {\n                dumpSize = MAX_DUMP;\n            }\n\n            if (logf)\n            {\n                fprintf(logf, \"NewNode dump (before setting Tag), size=%zu bytes:\\n\", dumpSize);\n                for (size_t i = 0; i < dumpSize; ++i)\n                {\n                    fprintf(logf, \"%02x\", (unsigned)bytes[i]);\n                    if (((i + 1) % 16) == 0)\n                    {\n                        fprintf(logf, \"\\n\");\n                    }\n                    else\n                    {\n                        fprintf(logf, \" \");\n                    }\n                }\n                if ((dumpSize % 16) != 0) fprintf(logf, \"\\n\");\n            }\n\n            /* Set tag as in the original implementation */\n            NewNode->Tag = Tag;\n\n            if (logf)\n            {\n                fprintf(logf, \"Set NewNode->Tag = %u (address %p)\\n\", (unsigned)NewNode->Tag, (void *)&NewNode->Tag);\n\n                fprintf(logf, \"NewNode dump (after setting Tag), size=%zu bytes:\\n\", dumpSize);\n                for (size_t i = 0; i < dumpSize; ++i)\n                {\n                    fprintf(logf, \"%02x\", (unsigned)bytes[i]);\n                    if (((i + 1) % 16) == 0)\n                    {\n                        fprintf(logf, \"\\n\");\n                    }\n                    else\n                    {\n                        fprintf(logf, \" \");\n                    }\n                }\n                if ((dumpSize % 16) != 0) fprintf(logf, \"\\n\");\n            }\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"NewNode is NULL (allocation failed)\\n\");\n            }\n        }\n\n        /* Insert the node (original behavior preserved) */\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT UtList_Add\\n\\n\");\n        fclose(logf);\n    }\n}\n"
}