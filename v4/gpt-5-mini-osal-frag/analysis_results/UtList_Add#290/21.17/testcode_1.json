{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. memcpy(AllocNode->Node.Data, Data, DataSize) can access beyond object bounds if malloc fails (AllocNode == NULL) or if the caller passes a Data pointer that does not point to at least DataSize bytes. The function does not check the return value of malloc nor validate the source buffer length/NULL, so memcpy may read/write out of bounds (NULL dereference or buffer overrun).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2813.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_Add code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_Add with it.\n  - Your function must have the exact same signature as UtList_Add.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_Add to check logs.\n  - Your function MUST preserve the original logic of UtList_Add as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_Add will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_Add as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Open log file for append. Non-fatal if fopen fails. */\n    FILE *log = fopen(\"/tmp/logs/2813.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER UtList_Add: ListHead=%p Data=%p DataSize=%u Tag=%u\\n\",\n                (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n    }\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    if (log)\n    {\n        fprintf(log, \"UtList_GetHead returned TagHead=%p\\n\", (void *)TagHead);\n    }\n\n    if (TagHead != NULL)\n    {\n        /* Create a new node (preserves original behavior: no NULL check after allocation) */\n        NewNode      = UtList_NewNode(Data, DataSize);\n        if (log)\n        {\n            fprintf(log, \"UtList_NewNode returned NewNode=%p\\n\", (void *)NewNode);\n            if (NewNode == NULL)\n            {\n                fprintf(log, \"WARNING: NewNode is NULL (possible malloc failure). Subsequent dereference will follow original behavior and may crash.\\n\");\n            }\n            else\n            {\n                fprintf(log, \"About to set NewNode->Tag=%u and insert before TagHead=%p\\n\", (unsigned)Tag, (void *)TagHead);\n            }\n        }\n\n        /* Preserve original logic exactly: assign Tag and insert (this may crash if NewNode == NULL, matching original behavior) */\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT UtList_Add\\n\");\n        fclose(log);\n    }\n}\n"
}