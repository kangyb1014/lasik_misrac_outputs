{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks that the pointers are non-NULL before calling strcmp, but does not ensure the pointed-to objects are valid null-terminated character arrays or within known bounds. If Rvc->TypeName (or WantTypeName) points to a char buffer that is not NUL-terminated (e.g. char buf[3] = {'a','b','c'} or a pointer into a larger buffer where the terminator lies beyond the object bounds), strcmp will continue reading past the object and access memory beyond its bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_IsValueCompatible code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_IsValueCompatible with it.\n  - Your function must have the exact same signature as UT_Stub_IsValueCompatible.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_IsValueCompatible to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_IsValueCompatible will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n    FILE *f = fopen(\"/tmp/logs/163.txt\", \"a\");\n\n    /* Minimal entry log so that the function reach is always recorded */\n    if (f != NULL)\n    {\n        /* Log pointers and genres. Do not dereference pointer contents here (to avoid adding new reads).\n         * We only log pointer values and the genre enum values. */\n        fprintf(f, \"UT_Stub_IsValueCompatible ENTER: Rvc=%p, Rvc->TypeName=%p, WantTypeName=%p, Rvc->Genre=%d, WantGenre=%d\\n\",\n                (const void *)Rvc,\n                (const void *)(Rvc != NULL ? (const void *)Rvc->TypeName : NULL),\n                (const void *)WantTypeName,\n                (int)(Rvc != NULL ? Rvc->Genre : 0),\n                (int)WantGenre);\n        if (Rvc != NULL && Rvc->TypeName != NULL && WantTypeName != NULL)\n        {\n            fprintf(f, \"Both type-name pointers are non-NULL. About to call strcmp(Rvc->TypeName, WantTypeName)\\n\");\n        }\n        else\n        {\n            fprintf(f, \"At least one type-name pointer is NULL: Rvc->TypeName=%p, WantTypeName=%p\\n\",\n                    (const void *)(Rvc != NULL ? (const void *)Rvc->TypeName : NULL), (const void *)WantTypeName);\n        }\n        fflush(f);\n        fclose(f);\n    }\n\n    /* Preserve original logic exactly as much as possible. */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        /* This strcmp may read past the bounds if the strings are not NUL-terminated\n         * (this is the potential Rule 21.17 violation being investigated). */\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n\n        f = fopen(\"/tmp/logs/163.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"strcmp called: result=%d (0 means equal)\\n\", IsCompatible ? 1 : 0);\n            fclose(f);\n        }\n    }\n    else\n    {\n        IsCompatible = false;\n\n        f = fopen(\"/tmp/logs/163.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"Type-name comparison skipped; set IsCompatible=false\\n\");\n            fclose(f);\n        }\n    }\n\n    /* Fallback: check genre coercion as in the original implementation. */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        f = fopen(\"/tmp/logs/163.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"Genre-based compatibility: Rvc->Genre=%d, WantGenre=%d -> setting IsCompatible=true\\n\",\n                    (int)Rvc->Genre, (int)WantGenre);\n            fclose(f);\n        }\n        IsCompatible = true;\n    }\n    else\n    {\n        f = fopen(\"/tmp/logs/163.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"Genre-based check: IsCompatible=%d, Rvc->Genre=%d, WantGenre=%d\\n\",\n                    IsCompatible ? 1 : 0, (int)Rvc->Genre, (int)WantGenre);\n            fclose(f);\n        }\n    }\n\n    f = fopen(\"/tmp/logs/163.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"UT_Stub_IsValueCompatible EXIT: return=%d\\n\", IsCompatible ? 1 : 0);\n        fclose(f);\n    }\n\n    return IsCompatible;\n}\n"
}