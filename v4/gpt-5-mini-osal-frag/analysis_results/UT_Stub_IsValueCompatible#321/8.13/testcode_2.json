{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member Rvc->TypeName is declared as a non-const pointer (e.g. \"char *TypeName\" in UT_RetvalConfigEntry_t), this is a violation: the pointer should be declared as \"const char *TypeName\" because it is only read and is passed to strcmp(const char*, const char*).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/165.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_IsValueCompatible code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_IsValueCompatible with it.\n  - Your function must have the exact same signature as UT_Stub_IsValueCompatible.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_IsValueCompatible to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_IsValueCompatible will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n    /* Open log file for append; best-effort logging, do not fail if logging is unavailable */\n    FILE *log = fopen(\"/tmp/logs/165.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_Stub_IsValueCompatible entered: Rvc=%p, WantTypeName=%p, WantGenre=%d\\n\",\n                (void *)Rvc, (const void *)WantTypeName, (int)WantGenre);\n    }\n\n    /* Defensive: if Rvc pointer itself is NULL, record and return false (preserve original behavior expectations) */\n    if (Rvc == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Rvc is NULL -> returning false\\n\");\n            fclose(log);\n        }\n        return false;\n    }\n\n    /* Log the TypeName pointers and their string contents when available */\n    if (log != NULL)\n    {\n        if (Rvc->TypeName != NULL)\n        {\n            fprintf(log, \"Rvc->TypeName pointer=%p, string=\\\"%s\\\"\\n\", (const void *)Rvc->TypeName, Rvc->TypeName);\n        }\n        else\n        {\n            fprintf(log, \"Rvc->TypeName pointer=NULL\\n\");\n        }\n\n        if (WantTypeName != NULL)\n        {\n            fprintf(log, \"WantTypeName pointer=%p, string=\\\"%s\\\"\\n\", (const void *)WantTypeName, WantTypeName);\n        }\n        else\n        {\n            fprintf(log, \"WantTypeName pointer=NULL\\n\");\n        }\n\n        fprintf(log, \"Rvc->Genre=%d, WantGenre=%d\\n\", (int)Rvc->Genre, (int)WantGenre);\n    }\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        int cmp = strcmp(Rvc->TypeName, WantTypeName);\n        IsCompatible = (cmp == 0);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"strcmp(Rvc->TypeName, WantTypeName) => %d, IsCompatible=%s\\n\",\n                    cmp, IsCompatible ? \"true\" : \"false\");\n        }\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"One or both type name pointers NULL -> skipping strcmp, IsCompatible=false\\n\");\n        }\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n        if (log != NULL)\n        {\n            fprintf(log, \"Genre-based compatibility applied -> IsCompatible=true (Rvc->Genre=%d)\\n\", (int)Rvc->Genre);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Final IsCompatible=%s\\n\", IsCompatible ? \"true\" : \"false\");\n        }\n    }\n\n    if (log != NULL)\n    {\n        fclose(log);\n    }\n\n    return IsCompatible;\n}\n"
}