{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_QueueGetIdByName only checks that queue_name is non-NULL (via OS_CHECK_POINTER) and then forwards it to OS_ObjectIdFindByName. Inside OS_ObjectIdFindByName the macros ARGCHECK / LENGTHCHECK are used to validate the name; LENGTHCHECK typically relies on string length operations (e.g. strlen) to enforce a maximum length. If queue_name is a non-NULL pointer that is not a properly NUL-terminated C string (or otherwise not contained within a sufficiently large object), any call to strlen/related <string.h> functions inside OS_ObjectIdFindByName may read past the bounds of the underlying object and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetIdByName:\n```c\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueGetIdByName with it.\n  - Your function must have the exact same signature as OS_QueueGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Minimal entry probe: record that the function was entered and the pointer values. */\n    logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetIdByName ENTER: queue_id=%p, queue_name=%p\\n\", (void *)queue_id, (const void *)queue_name);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* Preserve original parameter checks exactly as in the original implementation. */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    /* Log just before forwarding to OS_ObjectIdFindByName so callers can see what name pointer was passed. */\n    logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetIdByName: about to call OS_ObjectIdFindByName(type=%d, name_ptr=%p)\\n\", (int)LOCAL_OBJID_TYPE, (const void *)queue_name);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* Forward the call exactly as before. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* Log the return code and the queue_id pointer after the call (do not dereference queue_id). */\n    logf = fopen(\"/tmp/logs/203.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetIdByName: OS_ObjectIdFindByName returned %d; queue_id_ptr=%p\\n\", (int)return_code, (void *)queue_id);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    return return_code;\n}\n"
}