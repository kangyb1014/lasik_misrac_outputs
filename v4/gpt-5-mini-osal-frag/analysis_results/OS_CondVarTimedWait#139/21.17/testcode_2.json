{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is made without validating either pointer or guaranteeing a NUL terminator. If TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL (e.g. a caller passed NULL) strcmp will dereference a NULL pointer, and if either points to a non-NUL-terminated buffer strcmp can read past the allocated object. Both cases can result in accesses beyond object bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1923.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarTimedWait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarTimedWait with it.\n  - Your function must have the exact same signature as OS_CondVarTimedWait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarTimedWait to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarTimedWait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Initial entry log: make sure there's at least one record even if the function\n     * returns early due to OS_CHECK_POINTER. Do not dereference abs_wakeup_time. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n        if (logf)\n        {\n            /* Print a minimal entry indicating the function was entered and the\n             * pointer value passed in. Casting var_id to unsigned long long to\n             * provide a stable numeric representation for most typedefs. */\n            fprintf(logf, \"OS_CondVarTimedWait ENTRY: var_id=%llu, abs_wakeup_time=%p\\n\",\n                    (unsigned long long) var_id,\n                    (const void *) abs_wakeup_time);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters (original logic preserved) */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* After parameter check, log that we passed the pointer check. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_CondVarTimedWait: abs_wakeup_time passed NULL check, addr=%p\\n\",\n                    (const void *) abs_wakeup_time);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    /* Check Parameters and acquire object token (original logic preserved) */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log the result of ObjectIdGetById and the token address (do not dereference token contents) */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_CondVarTimedWait: OS_ObjectIdGetById returned %d, token_addr=%p\\n\",\n                    (int) return_code,\n                    (void *) &token);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation; do not dereference any pointers inside token */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_CondVarTimedWait: calling OS_CondVarTimedWait_Impl with token=%p abs_wakeup_time=%p\\n\",\n                        (void *) &token,\n                        (const void *) abs_wakeup_time);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Call the platform-specific implementation (original logic preserved) */\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n\n        /* Log the result from the implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_CondVarTimedWait: OS_CondVarTimedWait_Impl returned %d\\n\", (int) return_code);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1923.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_CondVarTimedWait EXIT: returning %d\\n\", (int) return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}