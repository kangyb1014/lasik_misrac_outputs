{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) uses the pointer parameter 'token' without a prior NULL check. If OS_ObjectIdTransactionInit is ever called with token == NULL, the memset will attempt to write through a NULL pointer (access beyond the object bounds). Although sizeof(*token) is computed at compile time, the runtime buffer pointer passed to memset may be invalid. This can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1923.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarTimedWait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarTimedWait with it.\n  - Your function must have the exact same signature as OS_CondVarTimedWait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarTimedWait to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarTimedWait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarTimedWait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *log = NULL;\n\n    /* Try to open log file for appending; ignore failures and continue normal logic */\n    log = fopen(\"/tmp/logs/1923.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CondVarTimedWait ENTER: abs_wakeup_time=%p\\n\", (const void *)abs_wakeup_time);\n        fflush(log);\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    if (log != NULL)\n    {\n        /* Log the result of the lookup and the token storage details. This helps reproduce issues\n           where operations later use the token contents or pointers derived from it. */\n        fprintf(log, \"OS_ObjectIdGetById returned %d; token_addr=%p; sizeof(token)=%zu\\n\",\n                (int)return_code,\n                (void *)&token,\n                (size_t)sizeof(token));\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_CondVarTimedWait_Impl with token_addr=%p abs_wakeup_time=%p\\n\",\n                    (void *)&token, (const void *)abs_wakeup_time);\n            fflush(log);\n        }\n\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarTimedWait_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CondVarTimedWait EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}