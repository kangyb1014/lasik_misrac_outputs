{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"sock_record = NULL;\" is dead code. In all execution paths where sock_record is later used it is overwritten (after a successful OS_ObjectIdGetById the code sets sock_record = OS_OBJECT_TABLE_GET(...)). In the failure path where OS_ObjectIdGetById does not return OS_SUCCESS, sock_record is never used. Therefore removing the assignment would not change program behaviour (it only exists to silence static-analysis warnings), so this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2318.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketBindAddress code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketBindAddress with it.\n  - Your function must have the exact same signature as OS_SocketBindAddress.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketBindAddress to check logs.\n  - Your function MUST preserve the original logic of OS_SocketBindAddress as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketBindAddress will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Minimal logging helper (inline, does not change program logic) */\n    do {\n        FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_SocketBindAddress: ENTER sock_id=%lu Addr=%p\\n\", (unsigned long)sock_id, (void *)Addr);\n            fclose(logf);\n        }\n    } while (0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    do {\n        FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_SocketBindAddress: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    } while (0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        do {\n            FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_SocketBindAddress: token=%p record=%p stream=%p\\n\", (void *)&token, (void *)record, (void *)stream);\n                fprintf(logf, \"OS_SocketBindAddress: stream->socket_domain=%d stream->stream_state=0x%08x\\n\",\n                        (int)stream->socket_domain, (unsigned)stream->stream_state);\n                fclose(logf);\n            }\n        } while (0);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            do {\n                FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_SocketBindAddress: Not a socket (invalid domain)\\n\");\n                    fclose(logf);\n                }\n            } while (0);\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            do {\n                FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_SocketBindAddress: Incorrect state (bound or connected) state=0x%08x\\n\", (unsigned)stream->stream_state);\n                    fclose(logf);\n                }\n            } while (0);\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            do {\n                FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_SocketBindAddress: OS_SocketBindAddress_Impl returned %ld\\n\", (long)return_code);\n                    fclose(logf);\n                }\n            } while (0);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                do {\n                    FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n                    if (logf != NULL)\n                    {\n                        fprintf(logf, \"OS_SocketBindAddress: Bind successful. name_entry=%p stream_name=%p new_state=0x%08x\\n\",\n                                (void *)record->name_entry, (void *)stream->stream_name, (unsigned)stream->stream_state);\n                        fclose(logf);\n                    }\n                } while (0);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log the failure path where token was not obtained. This demonstrates that any pre-initialization\n         * of socket-related local variables that are only set later would not be used in this path. */\n        do {\n            FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_SocketBindAddress: Failure path taken, token not obtained. return_code=%ld\\n\", (long)return_code);\n                fclose(logf);\n            }\n        } while (0);\n    }\n\n    do {\n        FILE *logf = fopen(\"/tmp/logs/2318.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_SocketBindAddress: EXIT return_code=%ld\\n\\n\", (long)return_code);\n            fclose(logf);\n        }\n    } while (0);\n\n    return return_code;\n}\n"
}