{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function UtAssert_DoTestSegmentReport is declared to take non-const pointers (e.g. void UtAssert_DoTestSegmentReport(char *segmentName, UtAssert_TestCounter_t *counters)) but it only reads from the name and the counters, then Rule 8.13 is violated. Both Local_SegmentName and Local_SegmentCounters are used as input-only for reporting and therefore the corresponding parameters should be declared as const (const char * and const UtAssert_TestCounter_t *) so the pointers point to const-qualified types.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_EndTest with it.\n  - Your function must have the exact same signature as UtAssert_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_EndTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Open log for tracing control flow and state for the violation scenario */\n    FILE *log = fopen(\"/tmp/logs/1655.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER UtAssert_EndTest\\n\");\n        fprintf(log, \"Pre-lock: UT_SegmentCounters.TotalTestCases=%u UT_TotalCounters.TotalTestCases=%u\\n\",\n                (unsigned)UT_SegmentCounters.TotalTestCases,\n                (unsigned)UT_TotalCounters.TotalTestCases);\n    }\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"After Lock\\n\");\n        fprintf(log, \"UT_SegmentCounters.TotalTestCases=%u\\n\", (unsigned)UT_SegmentCounters.TotalTestCases);\n    }\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        if (log)\n        {\n            fprintf(log, \"SegmentValid=1; Local_SegmentName=\\\"%s\\\"\\n\", Local_SegmentName);\n            fprintf(log, \"Local_SegmentCounters.TotalTestCases=%u TestSegmentCount=%u counters_addr=%p name_addr=%p\\n\",\n                    (unsigned)Local_SegmentCounters.TotalTestCases,\n                    (unsigned)Local_SegmentCounters.TestSegmentCount,\n                    (void *)&Local_SegmentCounters,\n                    (void *)Local_SegmentName);\n            fprintf(log, \"Local_SegmentCounters.CaseCount:\");\n            for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n            {\n                fprintf(log, \" %u\", (unsigned)Local_SegmentCounters.CaseCount[Ct]);\n            }\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    if (log)\n    {\n        fprintf(log, \"UT_SegmentCounters cleared (zeroed)\\n\");\n    }\n\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"After Unlock\\n\");\n    }\n\n    if (SegmentValid)\n    {\n        if (log)\n        {\n            fprintf(log, \"About to call UtAssert_DoTestSegmentReport with name_ptr=%p counters_ptr=%p\\n\",\n                    (void *)Local_SegmentName, (void *)&Local_SegmentCounters);\n            fflush(log);\n            fclose(log);\n        }\n\n        /* Original behavior preserved: call the report function using the local copies */\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"SegmentValid=0: No test cases path taken\\n\");\n            fclose(log);\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n"
}