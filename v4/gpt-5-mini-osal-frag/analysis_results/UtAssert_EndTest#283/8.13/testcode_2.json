{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal to UT_BSP_DoText. If UT_BSP_DoText is declared as taking a non-const pointer (for example: void UT_BSP_DoText(int type, char *text)), then the function should instead take a pointer to const (const char *text) because the text is not modified. In that case Rule 8.13 is violated. (If UT_BSP_DoText is already declared as taking const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_EndTest with it.\n  - Your function must have the exact same signature as UtAssert_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_EndTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Preserve original locking behavior */\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n\n    /* Open log file to record control flow and relevant state for analysis */\n    FILE *log = fopen(\"/tmp/logs/1655.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Entered UtAssert_EndTest\\n\");\n        fprintf(log, \"SegmentValid=%d\\n\", (int)SegmentValid);\n        fprintf(log, \"Pre-update: UT_SegmentCounters.TotalTestCases=%lu\\n\", (unsigned long)UT_SegmentCounters.TotalTestCases);\n        fprintf(log, \"Pre-update: UT_TotalCounters.TotalTestCases=%lu\\n\", (unsigned long)UT_TotalCounters.TotalTestCases);\n        /* Log per-case counts (if available) */\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            fprintf(log, \"Pre-update: UT_SegmentCounters.CaseCount[%lu]=%lu, UT_TotalCounters.CaseCount[%lu]=%lu\\n\",\n                    (unsigned long)Ct, (unsigned long)UT_SegmentCounters.CaseCount[Ct], (unsigned long)Ct, (unsigned long)UT_TotalCounters.CaseCount[Ct]);\n        }\n        fflush(log);\n    }\n\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        if (log)\n        {\n            fprintf(log, \"After-update: UT_TotalCounters.TotalTestCases=%lu\\n\", (unsigned long)UT_TotalCounters.TotalTestCases);\n            fprintf(log, \"Local_SegmentName=\\\"%s\\\"\\n\", Local_SegmentName);\n            for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n            {\n                fprintf(log, \"Local_SegmentCounters.CaseCount[%lu]=%lu\\n\", (unsigned long)Ct, (unsigned long)Local_SegmentCounters.CaseCount[Ct]);\n            }\n            fflush(log);\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling UtAssert_DoTestSegmentReport with segment=\\\"%s\\\"\\n\", Local_SegmentName);\n            fflush(log);\n        }\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n        if (log)\n        {\n            fprintf(log, \"Returned from UtAssert_DoTestSegmentReport\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        /* Log the exact text passed to UT_BSP_DoText to capture the violation scenario */\n        if (log)\n        {\n            fprintf(log, \"Calling UT_BSP_DoText with literal: \\\"No test cases\\\\n\\\" and type=%d\\n\", (int)UTASSERT_CASETYPE_END);\n            fflush(log);\n        }\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n        if (log)\n        {\n            fprintf(log, \"Returned from UT_BSP_DoText\\n\");\n            fclose(log);\n        }\n    }\n\n    /* If SegmentValid path was taken, we still need to close the log if it was opened */\n    if (log && SegmentValid)\n    {\n        fclose(log);\n    }\n}\n"
}