{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur when OS_BSP_Lock_Impl handles a pthread_mutex_lock error. The code calls BSP_DEBUG(..., strerror(...)) on error; if BSP_DEBUG is implemented via the UT_BSP logging path (e.g. calls UT_BSP_DoText), that path calls UT_BSP_Lock which calls OS_BSP_Lock_Impl again. This yields OS_BSP_Lock_Impl -> BSP_DEBUG -> UT_BSP_DoText -> UT_BSP_Lock -> OS_BSP_Lock_Impl (indirect recursive call).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1650.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_EndTest with it.\n  - Your function must have the exact same signature as UtAssert_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_EndTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Local logging helpers/variables */\n    int    _fd = -1;\n    int    _len = 0;\n    char   _logbuf[512];\n\n    /* Open the log file for appending. Use a best-effort approach; do not\n     * change behavior if logging fails. This uses low-level I/O to reduce the\n     * chance of invoking higher-level logging paths that may call UT_BSP_Lock. */\n    _fd = open(\"/tmp/logs/1650.txt\", O_CREAT | O_WRONLY | O_APPEND, 0644);\n    if (_fd >= 0)\n    {\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UtAssert_EndTest: entered (pid=%lu)\\n\",\n                        (unsigned long)getpid());\n        if (_len > 0)\n        {\n            (void)write(_fd, _logbuf, (size_t)_len);\n        }\n\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UtAssert_EndTest: about to call UT_BSP_Lock()\\n\");\n        if (_len > 0)\n        {\n            (void)write(_fd, _logbuf, (size_t)_len);\n        }\n    }\n\n    /* Acquire BSP lock (original behavior preserved) */\n    UT_BSP_Lock();\n\n    /* Log immediately after acquiring the lock so that any re-entrant/indirect\n     * recursion that touches lock-related code can be correlated with this entry. */\n    if (_fd >= 0)\n    {\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UtAssert_EndTest: returned from UT_BSP_Lock(); reading UT_SegmentCounters\\n\");\n        if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n\n        /* Attempt to record a few key pieces of UT_SegmentCounters state. */\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UT_SegmentCounters.TotalTestCases=%lu, TestSegmentCount=%lu\\n\",\n                        (unsigned long)UT_SegmentCounters.TotalTestCases,\n                        (unsigned long)UT_SegmentCounters.TestSegmentCount);\n        if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n    }\n\n    /* Original logic: determine whether there is a valid segment */\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        if (_fd >= 0)\n        {\n            _len = snprintf(_logbuf, sizeof(_logbuf),\n                            \"UtAssert_EndTest: segment valid; Local_SegmentCounters.TotalTestCases=%lu, Local_SegmentName=\\\"%s\\\"\\n\",\n                            (unsigned long)Local_SegmentCounters.TotalTestCases,\n                            Local_SegmentName);\n            if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n        }\n    }\n    else\n    {\n        if (_fd >= 0)\n        {\n            _len = snprintf(_logbuf, sizeof(_logbuf),\n                            \"UtAssert_EndTest: no segment valid (TotalTestCases=%lu)\\n\",\n                            (unsigned long)UT_SegmentCounters.TotalTestCases);\n            if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n        }\n    }\n\n    /* Clear the segment counters as in original implementation */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    /* Release BSP lock */\n    UT_BSP_Unlock();\n\n    if (_fd >= 0)\n    {\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UtAssert_EndTest: called UT_BSP_Unlock()\\n\");\n        if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n    }\n\n    /* Preserve original branching and behavior; but log which branch is taken. */\n    if (SegmentValid)\n    {\n        if (_fd >= 0)\n        {\n            _len = snprintf(_logbuf, sizeof(_logbuf),\n                            \"UtAssert_EndTest: calling UtAssert_DoTestSegmentReport for segment \\\"%s\\\"\\n\",\n                            Local_SegmentName);\n            if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n        }\n\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        if (_fd >= 0)\n        {\n            _len = snprintf(_logbuf, sizeof(_logbuf),\n                            \"UtAssert_EndTest: calling UT_BSP_DoText(END, \\\"No test cases\\\\n\\\")\\n\");\n            if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n\n    /* Finalize logging and close file descriptor if opened. */\n    if (_fd >= 0)\n    {\n        _len = snprintf(_logbuf, sizeof(_logbuf),\n                        \"UtAssert_EndTest: exiting\\n\\n\");\n        if (_len > 0) (void)write(_fd, _logbuf, (size_t)_len);\n        (void)close(_fd);\n    }\n}\n"
}