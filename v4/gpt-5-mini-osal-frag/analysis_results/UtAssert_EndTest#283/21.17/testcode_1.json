{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to sizeof(CurrentSegment)-1 bytes from SegmentName. If the object referenced by SegmentName is shorter than that and is not null-terminated within that length (e.g. SegmentName points to a 10-byte buffer without a terminating '\\0'), strncpy will read beyond the bounds of the source object, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_EndTest with it.\n  - Your function must have the exact same signature as UtAssert_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_EndTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Open log file for evidence collection */\n    FILE *log = fopen(\"/tmp/logs/1653.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n--- UtAssert_EndTest entered ---\\n\");\n    }\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"Lock acquired\\n\");\n        fprintf(log, \"UT_SegmentCounters.TotalTestCases=%u\\n\", (unsigned)UT_SegmentCounters.TotalTestCases);\n        fprintf(log, \"UT_TotalCounters.TotalTestCases=%u\\n\", (unsigned)UT_TotalCounters.TotalTestCases);\n    }\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n\n        /* Probe: log raw contents of CurrentSegment up to its sizeof to detect missing NUL */\n        if (log)\n        {\n            size_t cs_size = sizeof(CurrentSegment);\n            fprintf(log, \"sizeof(CurrentSegment)=%zu\\n\", cs_size);\n            fprintf(log, \"CurrentSegment raw bytes (hex):\");\n            size_t nul_index = cs_size;\n            for (size_t i = 0; i < cs_size; ++i)\n            {\n                unsigned char c = (unsigned char)CurrentSegment[i];\n                fprintf(log, \" %02X\", c);\n                if (c == '\\0' && nul_index == cs_size)\n                {\n                    nul_index = i;\n                }\n            }\n            fprintf(log, \"\\n\");\n            if (nul_index < cs_size)\n            {\n                fprintf(log, \"NUL found in CurrentSegment at index %zu\\n\", nul_index);\n            }\n            else\n            {\n                fprintf(log, \"No NUL found within sizeof(CurrentSegment) (possible unterminated source)\\n\");\n            }\n            fflush(log);\n        }\n\n        /* Perform original copy operation */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        if (log)\n        {\n            fprintf(log, \"Local_SegmentName after strcpy (as string): '%s'\\n\", Local_SegmentName);\n            fprintf(log, \"Local_SegmentName raw bytes (hex, up to sizeof(CurrentSegment)):\");\n            for (size_t i = 0; i < sizeof(Local_SegmentName); ++i)\n            {\n                unsigned char c = (unsigned char)Local_SegmentName[i];\n                fprintf(log, \" %02X\", c);\n                if (c == '\\0')\n                {\n                    /* stop after the terminating NUL for readability */\n                    break;\n                }\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"UtAssert_EndTest exiting (SegmentValid=%d)\\n\", (int)SegmentValid);\n        fprintf(log, \"--- UtAssert_EndTest end ---\\n\");\n        fclose(log);\n    }\n}\n"
}