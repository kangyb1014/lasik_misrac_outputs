{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream) but is only used to read fields (socket_type, socket_domain). The assignment 'stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);' therefore yields a pointer that could and should be const-qualified (const OS_stream_internal_record_t *stream). Because the pointer is non-const even though it need not allow modification of the pointee, this violates MISRA C 2023 Rule 8.13. (Fix: declare stream as 'const OS_stream_internal_record_t *stream'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1605.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen_Impl:\n```c\nint32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    os_proto = 0;\n\n    switch (stream->socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            break;\n\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream->socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            break;\n#endif\n        default:\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (impl->fd < 0)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketOpen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketOpen_Impl with it.\n  - Your function must have the exact same signature as OS_SocketOpen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketOpen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketOpen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketOpen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketOpen_Impl(const OS_object_token_t *token)\n{\n    int                             os_domain;\n    int                             os_type;\n    int                             os_proto;\n    int                             os_flags;\n    OS_impl_file_internal_record_t *impl;\n    OS_stream_internal_record_t *   stream;\n\n    /* Open log file for tracing control flow and state for rule-8.13 investigation */\n    FILE *log_fp = fopen(\"/tmp/logs/1605.txt\", \"a\");\n    if (log_fp)\n    {\n        fprintf(log_fp, \"ENTER: OS_SocketOpen_Impl token_ptr=%p\\n\", (void *)token);\n    }\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"LOOKUP: impl_ptr=%p stream_ptr=%p\\n\", (void *)impl, (void *)stream);\n    }\n\n    /* Read fields from stream (note: this demonstrates the pointer is only used for reads) */\n    os_proto = 0;\n\n    /* Capture the socket_type and socket_domain into local integers for logging and use. */\n    /* Intentionally dereference stream exactly as the original code does so behavior is preserved. */\n    int stream_socket_type = (int)stream->socket_type;\n    int stream_socket_domain = (int)stream->socket_domain;\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"STREAM_FIELDS: socket_type=%d socket_domain=%d\\n\", stream_socket_type, stream_socket_domain);\n        fflush(log_fp);\n    }\n\n    switch (stream_socket_type)\n    {\n        case OS_SocketType_DATAGRAM:\n            os_type  = SOCK_DGRAM;\n            os_proto = IPPROTO_UDP;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"PATH: DATAGRAM -> os_type=%d os_proto=%d\\n\", os_type, os_proto);\n            }\n            break;\n\n        case OS_SocketType_STREAM:\n            os_type  = SOCK_STREAM;\n            os_proto = IPPROTO_TCP;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"PATH: STREAM -> os_type=%d os_proto=%d\\n\", os_type, os_proto);\n            }\n            break;\n\n        default:\n            if (log_fp)\n            {\n                fprintf(log_fp, \"RETURN: OS_ERR_NOT_IMPLEMENTED (unsupported socket_type=%d)\\n\", stream_socket_type);\n                fclose(log_fp);\n            }\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    switch (stream_socket_domain)\n    {\n        case OS_SocketDomain_INET:\n            os_domain = AF_INET;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"PATH: INET -> os_domain=%d\\n\", os_domain);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            os_domain = AF_INET6;\n            if (log_fp)\n            {\n                fprintf(log_fp, \"PATH: INET6 -> os_domain=%d\\n\", os_domain);\n            }\n            break;\n#endif\n        default:\n            if (log_fp)\n            {\n                fprintf(log_fp, \"RETURN: OS_ERR_NOT_IMPLEMENTED (unsupported socket_domain=%d)\\n\", stream_socket_domain);\n                fclose(log_fp);\n            }\n            return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    impl->fd = socket(os_domain, os_type, os_proto);\n    if (log_fp)\n    {\n        fprintf(log_fp, \"SOCKET_CALL: socket(os_domain=%d, os_type=%d, os_proto=%d) -> fd=%d\\n\", os_domain, os_type, os_proto, impl->fd);\n        fflush(log_fp);\n    }\n\n    if (impl->fd < 0)\n    {\n        if (log_fp)\n        {\n            fprintf(log_fp, \"RETURN: OS_ERROR (socket creation failed, fd=%d)\\n\", impl->fd);\n            fclose(log_fp);\n        }\n        return OS_ERROR;\n    }\n\n    /*\n     * Setting the REUSEADDR flag helps during debugging when there might be frequent\n     * code restarts.  However if setting the option fails then it is not worth bailing out over.\n     */\n    os_flags = 1;\n    setsockopt(impl->fd, SOL_SOCKET, SO_REUSEADDR, &os_flags, sizeof(os_flags));\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"setsockopt(SO_REUSEADDR) called for fd=%d\\n\", impl->fd);\n        fflush(log_fp);\n    }\n\n    /*\n     * Set the standard options on the filehandle by default --\n     * this may set it to non-blocking mode if the implementation supports it.\n     * any blocking would be done explicitly via the select() wrappers\n     *\n     * NOTE: The implementation still generally works without this flag set, but\n     * nonblock mode does improve robustness in the event that multiple tasks\n     * attempt to accept new connections from the same server socket at the same time.\n     */\n    OS_IMPL_SET_SOCKET_FLAGS(token);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"EXIT: OS_SUCCESS for fd=%d\\n\", impl->fd);\n        fclose(log_fp);\n    }\n\n    return OS_SUCCESS;\n}\n"
}