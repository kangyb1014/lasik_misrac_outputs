{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_SelectMultiple takes parameters as non-const (OS_FdSet *ReadSet, OS_FdSet *WriteSet) and forwards them unchanged to OS_SelectMultiple_Impl. If neither OS_SelectMultiple nor OS_SelectMultiple_Impl modify the fd sets (i.e. they only read them), then the pointers should be declared const (const OS_FdSet *). In that case the current code (passing non-const pointers and using non-const parameter types) violates MISRA C 2023 Rule 8.13. (If the implementations do modify the sets, then non-const is required and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectMultiple code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectMultiple with it.\n  - Your function must have the exact same signature as OS_SelectMultiple.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectMultiple to check logs.\n  - Your function MUST preserve the original logic of OS_SelectMultiple as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectMultiple will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/1915.txt\", \"a\");\n\n    /* Minimal entry probe so the function reachability is recorded */\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"OS_SelectMultiple ENTER: ReadSet=%p WriteSet=%p msecs=%ld\\n\",\n                      (void *)ReadSet, (void *)WriteSet, (long)msecs);\n\n        if (ReadSet == NULL)\n        {\n            (void)fprintf(log, \"  ReadSet: NULL\\n\");\n        }\n        else\n        {\n            (void)fprintf(log, \"  ReadSet: non-NULL\\n\");\n        }\n\n        if (WriteSet == NULL)\n        {\n            (void)fprintf(log, \"  WriteSet: NULL\\n\");\n        }\n        else\n        {\n            (void)fprintf(log, \"  WriteSet: non-NULL\\n\");\n        }\n\n        (void)fflush(log);\n    }\n\n    /* Preserve original behavior: forward parameters unchanged to implementation */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log the result and exit */\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"OS_SelectMultiple EXIT: return_code=%ld\\n\", (long)return_code);\n        (void)fclose(log);\n    }\n\n    return return_code;\n}\n"
}