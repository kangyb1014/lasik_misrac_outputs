{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes pointer parameters ReadSet and WriteSet but does not modify the objects they point to (it simply forwards them to OS_SelectMultiple_Impl and returns). Since the pointers are used as input-only, they should be declared pointing-to-const (e.g. const OS_FdSet *ReadSet, const OS_FdSet *WriteSet). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectMultiple code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectMultiple with it.\n  - Your function must have the exact same signature as OS_SelectMultiple.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectMultiple to check logs.\n  - Your function MUST preserve the original logic of OS_SelectMultiple as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectMultiple will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Logging to capture control flow and state for the violation scenario.\n     * Writes an entry at function entry, before and after the delegated impl call.\n     * Logs pointer values (addresses), whether they are NULL, the msecs value,\n     * and the returned code from the implementation function.\n     *\n     * The logs are appended to /tmp/logs/1915.txt. The directory is created if\n     * necessary using system(\"mkdir -p ...\"). This keeps the function self-contained\n     * and ensures the test harness can pick up the evidence file.\n     */\n\n    /* Include necessary headers here so the function is self-contained when replaced in the target file */\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <time.h>\n\n    FILE *logf = NULL;\n\n    /* Try to ensure the log directory exists; ignore failure if system() is unavailable */\n    (void)system(\"mkdir -p /tmp/logs\");\n\n    logf = fopen(\"/tmp/logs/1915.txt\", \"a\");\n    if (logf != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(logf, \"[%ld] Enter OS_SelectMultiple\\n\", (long)t);\n        fprintf(logf, \"[%ld]   ReadSet=%p (%s)\\n\", (long)t, (void *)ReadSet, (ReadSet == NULL) ? \"NULL\" : \"non-NULL\");\n        fprintf(logf, \"[%ld]   WriteSet=%p (%s)\\n\", (long)t, (void *)WriteSet, (WriteSet == NULL) ? \"NULL\" : \"non-NULL\");\n        fprintf(logf, \"[%ld]   msecs=%ld\\n\", (long)t, (long)msecs);\n        fflush(logf);\n    }\n\n    /*\n     * Preserve original behavior: forward to the platform-specific implementation.\n     * This demonstrates that the pointers are only forwarded (input-only) and not\n     * modified by this wrapper.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    if (logf != NULL)\n    {\n        time_t t2 = time(NULL);\n        fprintf(logf, \"[%ld] OS_SelectMultiple_Impl returned %ld\\n\", (long)t2, (long)return_code);\n        fprintf(logf, \"[%ld] Exit OS_SelectMultiple\\n\", (long)t2);\n        fprintf(logf, \"[%ld]   ReadSet after call=%p\\n\", (long)t2, (void *)ReadSet);\n        fprintf(logf, \"[%ld]   WriteSet after call=%p\\n\", (long)t2, (void *)WriteSet);\n        /* Note: we intentionally do not dereference ReadSet/WriteSet (unknown internal layout).\n         * The logs above show that only the pointer addresses were observed and forwarded,\n         * which supports the violation scenario that these parameters could be declared const.\n         */\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}