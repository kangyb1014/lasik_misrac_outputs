{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the field ContentTypeStr is declared as a non-const pointer (e.g. char *ContentTypeStr), then assigning a const char * (TypeName) to it discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. The correct fix is to declare the field as const char *ContentTypeStr so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterReturnType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterReturnType:\n```c\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_RegisterReturnType code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_RegisterReturnType with it.\n  - Your function must have the exact same signature as UT_Stub_RegisterReturnType.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_RegisterReturnType to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_RegisterReturnType as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_RegisterReturnType will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_RegisterReturnType as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    /* Logging to help reproduce/report the const-discard scenario. Appends to /tmp/logs/1665.txt */\n    FILE *log = fopen(\"/tmp/logs/1665.txt\", \"a\");\n    if (log != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(log, \"-----\\n\");\n        fprintf(log, \"UT_Stub_RegisterReturnType ENTRY time=%ld FuncKey=%lu ReturnSize=%zu TypeName_ptr=%p\",\n                (long)t, (unsigned long)FuncKey, ReturnSize, (const void *)TypeName);\n        if (TypeName != NULL)\n        {\n            /* Print the string content if available */\n            fprintf(log, \" TypeName_str=\\\"%s\\\"\", TypeName);\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        if (log) fprintf(log, \"Branch: ReturnSize > 0 (ReturnSize=%zu)\\n\", ReturnSize);\n\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (log) fprintf(log, \"UT_GetStubEntry(RETURN_BUFFER) returned StubPtr=%p\\n\", (void *)StubPtr);\n\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            if (log) fprintf(log, \"Existing buffer size mismatch: TotalSize=%zu New=%zu -> clearing entry\\n\",\n                            StubPtr->Data.Buff.TotalSize, ReturnSize);\n            UT_ClearStubEntry(StubPtr);\n            if (log) fprintf(log, \"Cleared existing StubPtr and set to NULL\\n\");\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (log) fprintf(log, \"Looking up an unused stub entry\\n\");\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (log) fprintf(log, \"UT_GetStubEntry(UNUSED) returned StubPtr=%p\\n\", (void *)StubPtr);\n\n            if (StubPtr == NULL)\n            {\n                if (log) fprintf(log, \"ERROR: No unused stub entry available - aborting\\n\");\n                if (log) { fflush(log); fclose(log); }\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                if (log) fprintf(log, \"Initializing new StubEntry at %p\\n\", (void *)StubPtr);\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (log) fprintf(log, \"malloc(ReturnSize=%zu) returned BasePtr=%p\\n\", ReturnSize, StubPtr->Data.Buff.BasePtr);\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    if (log) fprintf(log, \"ERROR: malloc failed - aborting\\n\");\n                    if (log) { fflush(log); fclose(log); }\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                    if (log) fprintf(log, \"Allocated and zeroed buffer; ModeFlags now=%#x\\n\", (unsigned)StubPtr->ModeFlags);\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n                if (log) fprintf(log, \"Set StubPtr->Data.Buff.TotalSize=%zu\\n\", StubPtr->Data.Buff.TotalSize);\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            if (log) fprintf(log, \"Setting Position and ContentTypeStr for StubPtr=%p\\n\", (void *)StubPtr);\n            StubPtr->Data.Buff.Position = 0;\n\n            if (log)\n            {\n                const char *prev = StubPtr->Data.Buff.ContentTypeStr;\n                fprintf(log, \"Previous ContentTypeStr_ptr=%p\", (const void *)prev);\n                if (prev != NULL) fprintf(log, \" prev_str=\\\"%s\\\"\", prev);\n                fprintf(log, \" -> assigning TypeName_ptr=%p\", (const void *)TypeName);\n                if (TypeName != NULL) fprintf(log, \" TypeName_str=\\\"%s\\\"\", TypeName);\n                fprintf(log, \"\\n\");\n            }\n\n            /* This is the assignment that can discard const if ContentTypeStr is not declared const */\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n\n            if (log)\n            {\n                fprintf(log, \"After assign, ContentTypeStr_ptr=%p\", (const void *)StubPtr->Data.Buff.ContentTypeStr);\n                if (StubPtr->Data.Buff.ContentTypeStr != NULL) fprintf(log, \" ContentTypeStr_str=\\\"%s\\\"\", StubPtr->Data.Buff.ContentTypeStr);\n                fprintf(log, \"\\n\");\n            }\n        }\n    }\n    else\n    {\n        if (log) fprintf(log, \"Branch: ReturnSize == 0; no action taken\\n\");\n    }\n\n    if (log) { fflush(log); fclose(log); }\n}\n"
}