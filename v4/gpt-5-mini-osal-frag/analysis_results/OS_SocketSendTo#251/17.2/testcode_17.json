{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OSAL is not initialized. If the OS_DEBUG implementation (macro or function) ends up calling OS_printf (directly or via another routine that calls OS_printf), this creates an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2410.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketSendTo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketSendTo with it.\n  - Your function must have the exact same signature as OS_SocketSendTo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketSendTo to check logs.\n  - Your function MUST preserve the original logic of OS_SocketSendTo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketSendTo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n    FILE *logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n\n    /* Minimal entry probe so there is always at least one log line when this\n     * function is reached (even if the parameter checks cause an early return). */\n    if (logf)\n    {\n        fprintf(logf, \"ENTRY: OS_SocketSendTo called (sock_id=%lu, buffer=%p, buflen=%zu, RemoteAddr=%p)\\n\",\n                (unsigned long)sock_id, buffer, buflen, (const void *)RemoteAddr);\n        fclose(logf);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    /* Log after parameter checks (may not be reached if a check fails) */\n    logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"AFTER_CHECKS: parameters OK (sock_id=%lu)\\n\", (unsigned long)sock_id);\n        fclose(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"OBJECT_GET: OS_ObjectIdGetById returned %ld for sock_id=%lu\\n\",\n                (long)return_code, (unsigned long)sock_id);\n        fclose(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OBJ_FOUND: stream_ptr=%p\\n\", (const void *)stream);\n            if (stream != NULL)\n            {\n                /* Print socket_type value for reproducibility of control flow */\n                fprintf(logf, \"STREAM_INFO: socket_type=%d\\n\", (int)stream->socket_type);\n            }\n            fclose(logf);\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"ERROR: incorrect socket type (%d) for sock_id=%lu\\n\",\n                        (int)stream->socket_type, (unsigned long)sock_id);\n                fclose(logf);\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"CALL_IMPL: invoking OS_SocketSendTo_Impl for sock_id=%lu buflen=%zu\\n\",\n                        (unsigned long)sock_id, (unsigned long)buflen);\n                fclose(logf);\n            }\n\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n\n            logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"IMPL_RETURN: OS_SocketSendTo_Impl returned %ld for sock_id=%lu\\n\",\n                        (long)return_code, (unsigned long)sock_id);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"RELEASED: token released for sock_id=%lu\\n\", (unsigned long)sock_id);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        /* Log the failure to resolve the object id */\n        logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"FAILURE: could not get object id for sock_id=%lu, return_code=%ld\\n\",\n                    (unsigned long)sock_id, (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    /* Final exit log */\n    logf = fopen(\"/tmp/logs/2410.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"EXIT: OS_SocketSendTo returning %ld for sock_id=%lu\\n\", (long)return_code, (unsigned long)sock_id);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}