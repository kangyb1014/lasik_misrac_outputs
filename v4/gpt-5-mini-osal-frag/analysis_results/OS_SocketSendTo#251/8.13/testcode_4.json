{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream) but in this function it is only used for reading (e.g. checking stream->socket_type). Therefore the pointer could and should be declared to point to a const-qualified type (const OS_stream_internal_record_t *). The assignment via OS_OBJECT_TABLE_GET therefore results in a non-const pointer where a pointer-to-const would suffice, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2415.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketSendTo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketSendTo with it.\n  - Your function must have the exact same signature as OS_SocketSendTo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketSendTo to check logs.\n  - Your function MUST preserve the original logic of OS_SocketSendTo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketSendTo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Logging probe: open log file and record entry and raw parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_SocketSendTo(sock_id=%u, buffer=%p, buflen=%zu, RemoteAddr=%p)\\n\",\n                    (unsigned int)sock_id, buffer, buflen, (const void *)RemoteAddr);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log token location/size and the stream pointer and socket type (if available) */\n        {\n            FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OBJECT_LOOKUP: OS_ObjectIdGetById returned OS_SUCCESS\\n\");\n                fprintf(log, \" token_address=%p size=%zu\\n\", (void *)&token, sizeof(token));\n                fprintf(log, \" stream_ptr=%p\\n\", (void *)stream);\n                if (stream != NULL)\n                {\n                    /* Only read the socket_type for logging (do not modify) */\n                    fprintf(log, \" stream->socket_type=%d\\n\", (int)stream->socket_type);\n                }\n                else\n                {\n                    fprintf(log, \" stream is NULL\\n\");\n                }\n                fclose(log);\n            }\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            /* Log incorrect type branch */\n            {\n                FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: stream->socket_type != OS_SocketType_DATAGRAM -> OS_ERR_INCORRECT_OBJ_TYPE\\n\");\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            /* Log before calling implementation */\n            {\n                FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: stream->socket_type == OS_SocketType_DATAGRAM -> calling OS_SocketSendTo_Impl\\n\");\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n\n            /* Log result of implementation call */\n            {\n                FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"IMPL_RETURN: OS_SocketSendTo_Impl returned %d\\n\", (int)return_code);\n                    fclose(log);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to get object id */\n        FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ERROR: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    /* Final log of return value */\n    {\n        FILE *log = fopen(\"/tmp/logs/2415.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_SocketSendTo returning %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}