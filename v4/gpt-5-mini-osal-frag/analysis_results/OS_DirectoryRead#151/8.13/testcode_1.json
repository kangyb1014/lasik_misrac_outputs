{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable de is declared as a non-const pointer (struct dirent *de) and is assigned the result of readdir(impl->dp). The code only reads from de (uses de->d_name) and does not modify the object pointed to, so de could/should be declared as const struct dirent *de; thus the pointer is not const-qualified when it could be, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRead:\n```c\nint32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryRead code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryRead with it.\n  - Your function must have the exact same signature as OS_DirectoryRead.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryRead to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryRead as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryRead will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryRead as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe log: record entry and basic parameters. Attempt to create an audit trail\n     * for control flow and state to help reproduce the violation scenario. */\n    {\n        FILE *log = fopen(\"/tmp/logs/3055.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Note: cast dir_id to unsigned long for portability if osal_id_t is an integer type.\n             * Print the pointer value of dirent but do not dereference it here to avoid NV side-effects. */\n            fprintf(log, \"OS_DirectoryRead ENTER: dir_id=%lu, dirent=%p\\n\", (unsigned long)dir_id, (void *)dirent);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/3055.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirectoryRead after OS_ObjectIdGetById: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we are about to call the implementation layer. */\n        {\n            FILE *log = fopen(\"/tmp/logs/3055.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DirectoryRead: calling OS_DirRead_Impl with token at %p, dirent=%p\\n\", (void *)&token, (void *)dirent);\n                fclose(log);\n            }\n        }\n\n        /* Call the underlying implementation to perform the read */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        /* After call, log the result and a small snapshot of the dirent memory (first 16 bytes)\n         * to provide evidence about contents read without depending on the structure layout. */\n        {\n            FILE *log = fopen(\"/tmp/logs/3055.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DirectoryRead after OS_DirRead_Impl: return_code=%ld\\n\", (long)return_code);\n\n                if (dirent != NULL)\n                {\n                    unsigned char *bytes = (unsigned char *)dirent;\n                    /* Print up to 16 bytes as hex to avoid dereferencing unknown fields like d_name */\n                    fprintf(log, \"OS_DirectoryRead dirent snapshot:\");\n                    for (size_t i = 0; i < 16; ++i)\n                    {\n                        /* Safe to read since dirent pointer is validated non-NULL by OS_CHECK_POINTER above. */\n                        fprintf(log, \" %02X\", (unsigned)bytes[i]);\n                    }\n                    fprintf(log, \"\\n\");\n                }\n\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release event */\n        {\n            FILE *log = fopen(\"/tmp/logs/3055.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DirectoryRead: token released\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}