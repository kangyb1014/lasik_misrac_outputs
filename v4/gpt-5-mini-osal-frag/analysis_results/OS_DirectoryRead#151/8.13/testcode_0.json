{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'de' is declared as 'struct dirent *de' but is only used for reading the returned directory entry (de->d_name is read and copied); it could be declared as 'const struct dirent *de' and assigned the result of readdir(). Declaring it const would satisfy MISRA C 2023 Rule 8.13. Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRead:\n```c\nint32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryRead code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryRead with it.\n  - Your function must have the exact same signature as OS_DirectoryRead.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryRead to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryRead as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryRead will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryRead as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryRead(osal_id_t dir_id, os_dirent_t *dirent)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: record entry to help reproduce Rule 8.13 scenario */\n    {\n        FILE *log_fp = fopen(\"/tmp/logs/3055.txt\", \"a\");\n        if (log_fp != NULL)\n        {\n            /* Log the function entry and pointer values. Use unsigned long long for generic printing. */\n            fprintf(log_fp, \"ENTER OS_DirectoryRead: dir_id=%llu, dirent_ptr=%p\\n\",\n                    (unsigned long long)dir_id, (void *)dirent);\n            fclose(log_fp);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dirent);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    /* Log result of object id lookup */\n    {\n        FILE *log_fp = fopen(\"/tmp/logs/3055.txt\", \"a\");\n        if (log_fp != NULL)\n        {\n            fprintf(log_fp, \"OS_ObjectIdGetById returned %d for dir_id=%llu\\n\", return_code,\n                    (unsigned long long)dir_id);\n            fclose(log_fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Pre-call snapshot of the dirent buffer (first up to 32 bytes) */\n        {\n            FILE *log_fp = fopen(\"/tmp/logs/3055.txt\", \"a\");\n            if (log_fp != NULL)\n            {\n                unsigned char *bytes = (unsigned char *)dirent;\n                size_t n = 0;\n                fprintf(log_fp, \"About to call OS_DirRead_Impl: dirent_ptr=%p, first_bytes=\", (void *)dirent);\n                /* Print up to 32 bytes as hex to avoid depending on specific struct layout */\n                for (n = 0; n < 32; ++n)\n                {\n                    /* Print bytes only; if memory is readable this gives a snapshot of state */\n                    fprintf(log_fp, \"%02x\", (unsigned int)bytes[n]);\n                    if (n + 1 < 32) fprintf(log_fp, \" \");\n                }\n                fprintf(log_fp, \"\\n\");\n                fclose(log_fp);\n            }\n        }\n\n        /*\n         * Call the underlying implementation to perform the read\n         *\n         * NOTE: This does not map \"virtual mount points\" that\n         * may appear in the dir listing back to the virtualized\n         * name.  For instance, if the (real) /eeprom directory\n         * is virtualized to /cf via the OS_VolumeTable, and one\n         * reads the \"/\" directory, the application will see the\n         * real name (eeprom) and not the virtualized name (cf).\n         */\n        return_code = OS_DirRead_Impl(&token, dirent);\n\n        /* Log return from implementation and a post-call snapshot */\n        {\n            FILE *log_fp = fopen(\"/tmp/logs/3055.txt\", \"a\");\n            if (log_fp != NULL)\n            {\n                fprintf(log_fp, \"OS_DirRead_Impl returned %d for dir_id=%llu, dirent_ptr=%p\\n\",\n                        return_code, (unsigned long long)dir_id, (void *)dirent);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Print first 64 bytes of the dirent result to capture name/data for evidence */\n                    unsigned char *bytes = (unsigned char *)dirent;\n                    size_t n;\n                    fprintf(log_fp, \"Post-call dirent first_bytes=\");\n                    for (n = 0; n < 64; ++n)\n                    {\n                        fprintf(log_fp, \"%02x\", (unsigned int)bytes[n]);\n                        if (n + 1 < 64) fprintf(log_fp, \" \");\n                    }\n                    fprintf(log_fp, \"\\n\");\n                }\n\n                fclose(log_fp);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}"
}