{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference a pointer that is NULL or that does not point to a valid NUL-terminated string (the code never checks for NULL or guarantees the stored ContentTypeStr is a valid C string). For example, if UT_Stub_RegisterReturnType was called with TypeName == NULL (or with a pointer to a temporary/stack buffer that has gone out of scope or to memory that was freed), then ContentTypeStr will be NULL/invalid and the strcmp call will read out of bounds / dereference NULL, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait:\n```c\nint32 OS_CondVarWait(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarWait_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarWait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarWait with it.\n  - Your function must have the exact same signature as OS_CondVarWait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarWait to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarWait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarWait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarWait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarWait(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: open log file and record entry and initial token memory */\n    FILE *log = fopen(\"/tmp/logs/1023.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CondVarWait ENTER: var_id=%u\\n\", (unsigned)var_id);\n        fprintf(log, \"  token address=%p, token_size=%zu\\n\", (void *)&token, (size_t)sizeof(token));\n\n        /* Print first up to 64 bytes of the (currently uninitialized) token buffer to capture pre-call state */\n        {\n            size_t i, n = sizeof(token) < 64 ? sizeof(token) : 64;\n            unsigned char *b = (unsigned char *)&token;\n            fprintf(log, \"  token pre-bytes:\");\n            for (i = 0; i < n; ++i)\n            {\n                fprintf(log, \" %02x\", (unsigned)b[i]);\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n    }\n\n    /* Check Parameters (preserve original behavior) */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* After a successful lookup, log the token contents (first bytes) to capture potential pointer fields */\n        if (log != NULL)\n        {\n            size_t i, n = sizeof(token) < 128 ? sizeof(token) : 128; /* print a bit more after initialization */\n            unsigned char *b = (unsigned char *)&token;\n            fprintf(log, \"  token post-bytes:\");\n            for (i = 0; i < n; ++i)\n            {\n                fprintf(log, \" %02x\", (unsigned)b[i]);\n            }\n            fprintf(log, \"\\n\");\n            fprintf(log, \"  calling OS_CondVarWait_Impl with token addr=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_CondVarWait_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarWait_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Skipping OS_CondVarWait_Impl due to OS_ObjectIdGetById error %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CondVarWait EXIT: return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}