{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. If UT_ExecuteBasicHandler is passed as the DefaultHandler (or a DefaultHandler that eventually calls UT_ExecuteBasicHandler), the function registers that handler via UT_SetHandlerFunction and then calls UT_DefaultStubImpl which will invoke the registered final handler. That causes UT_ExecuteBasicHandler to be called again (indirect recursion). Thus the code can result in indirect self-call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2670.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAddrGetPort_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAddrGetPort_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAddrGetPort_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAddrGetPort_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Open log file for append. Best-effort: if fopen fails, continue normal operation. */\n    FILE *log = fopen(\"/tmp/logs/2670.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SocketAddrGetPort_Impl(PortNum=%p, Addr=%p)\\n\", (void *)PortNum, (const void *)Addr);\n        fflush(log);\n    }\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    if (log)\n    {\n        fprintf(log, \"Accessor->sa.sa_family=%d\\n\", (int)Accessor->sa.sa_family);\n        fflush(log);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            if (log)\n            {\n                /* Log raw network-order port value */\n                fprintf(log, \"Case AF_INET: raw sa_port=%u\\n\", (unsigned)sa_port);\n                fflush(log);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            if (log)\n            {\n                fprintf(log, \"Case AF_INET6: raw sa_port=%u\\n\", (unsigned)sa_port);\n                fflush(log);\n            }\n            break;\n#endif\n        default:\n            if (log)\n            {\n                fprintf(log, \"Default: bad address family=%d -> returning OS_ERR_BAD_ADDRESS\\n\", (int)Accessor->sa.sa_family);\n                fclose(log);\n            }\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    if (log)\n    {\n        fprintf(log, \"Converted: ntohs(raw=%u) -> PortNum=%u; returning OS_SUCCESS\\n\", (unsigned)sa_port, (unsigned)*PortNum);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}