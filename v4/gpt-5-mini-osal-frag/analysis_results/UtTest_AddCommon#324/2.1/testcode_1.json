{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (status < 0)' branch is unreachable. POSIX pthread_mutex_unlock returns 0 on success or a positive error number on failure (never negative), so the condition status < 0 can never be true and the BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status)); path is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_AddCommon code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_AddCommon with it.\n  - Your function must have the exact same signature as UtTest_AddCommon.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_AddCommon to check logs.\n  - Your function MUST preserve the original logic of UtTest_AddCommon as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_AddCommon will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Log entry into this function and parameter state to /tmp/logs/3146.txt for traceability */\n    {\n        FILE *log = fopen(\"/tmp/logs/3146.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtTest_AddCommon ENTER\\n\");\n            fprintf(log, \"  Test ptr: %p\\n\", (void *)Test);\n            fprintf(log, \"  Setup ptr: %p\\n\", (void *)Setup);\n            fprintf(log, \"  Teardown ptr: %p\\n\", (void *)Teardown);\n            fprintf(log, \"  TestName: %s\\n\", (TestName != NULL) ? TestName : \"(null)\");\n            fprintf(log, \"  EntryType: %u\\n\", (unsigned int)EntryType);\n            fclose(log);\n        }\n    }\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log just before taking lock */\n    {\n        FILE *log = fopen(\"/tmp/logs/3146.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtTest_AddCommon: calling UT_BSP_Lock()\\n\");\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    /* Log parameters passed to UtList_Add and size information */\n    {\n        FILE *log = fopen(\"/tmp/logs/3146.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtTest_AddCommon: calling UtList_Add with DataBasePtr=%p, entry=%p, size=%zu, EntryType=%u\\n\",\n                    (void *)UtAssert_Global.DataBasePtr, (void *)&UtTestDataBaseEntry,\n                    (size_t)sizeof(UtTestDataBaseEntry_t), (unsigned int)EntryType);\n            fclose(log);\n        }\n    }\n\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n\n    /* Log after list add and before unlock */\n    {\n        FILE *log = fopen(\"/tmp/logs/3146.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtTest_AddCommon: completed UtList_Add, calling UT_BSP_Unlock()\\n\");\n            fclose(log);\n        }\n    }\n\n    UT_BSP_Unlock();\n\n    /* Final log confirming exit of function */\n    {\n        FILE *log = fopen(\"/tmp/logs/3146.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UtTest_AddCommon EXIT\\n\\n\");\n            fclose(log);\n        }\n    }\n}\n"
}