{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read of the source string: strncpy is called with n = sizeof(UtTestDataBaseEntry.TestName) - 1. If the caller supplies TestName that is not properly null-terminated or whose allocated length is < n, strncpy may read up to n bytes from TestName and therefore read beyond the bounds of the source object. (The destination is safe because the struct was zeroed beforehand, but the source can be over-read.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_AddCommon code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_AddCommon with it.\n  - Your function must have the exact same signature as UtTest_AddCommon.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_AddCommon to check logs.\n  - Your function MUST preserve the original logic of UtTest_AddCommon as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_AddCommon will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Local prototypes for logging functions to avoid requiring includes in the replacement snippet */\n    FILE *fopen(const char *, const char *);\n    int fprintf(FILE *, const char *, ...);\n    int fclose(FILE *);\n\n    FILE *log = fopen(\"/tmp/logs/3143.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: UtTest_AddCommon\\n\");\n        fprintf(log, \"  Test=%p Setup=%p Teardown=%p TestName=%p EntryType=%u\\n\",\n                (void *)Test, (void *)Setup, (void *)Teardown, (const void *)TestName, (unsigned)EntryType);\n    }\n\n    /* Preserve original initialization behavior */\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n\n    if (TestName != NULL)\n    {\n        size_t dest_size = sizeof(UtTestDataBaseEntry.TestName);\n        size_t n = (dest_size > 0) ? (dest_size - 1) : 0;\n\n        if (log)\n        {\n            fprintf(log, \"  About to call strncpy with n=%zu (dest_size=%zu)\\n\", n, dest_size);\n            fprintf(log, \"  NOTE: utf test harness should ensure TestName points to a buffer at least n bytes long\\n\");\n            fprintf(log, \"  Source pointer: %p\\n\", (const void *)TestName);\n            fprintf(log, \"  To avoid performing any additional reads of the source (which could itself cause an out-of-bounds read),\\n\");\n            fprintf(log, \"  this instrumentation will not probe the contents of TestName before calling strncpy.\\n\");\n        }\n\n        /* Perform the original copy (this is the call that can over-read the source if the caller provides a\n         * non-null-terminated buffer smaller than n). We keep the original call to preserve behavior. */\n        strncpy(UtTestDataBaseEntry.TestName, TestName, n);\n\n        if (log)\n        {\n            /* Destination is zeroed initially, so printing the destination is safe and helps evidence what was copied. */\n            fprintf(log, \"  strncpy completed. Destination content (up to dest_size-1): '%s'\\n\",\n                    UtTestDataBaseEntry.TestName);\n            fprintf(log, \"EXIT: UtTest_AddCommon (after strncpy)\\n\\n\");\n            fclose(log);\n            log = NULL;\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"  TestName is NULL, skipping strncpy\\n\");\n            fprintf(log, \"EXIT: UtTest_AddCommon (no TestName)\\n\\n\");\n            fclose(log);\n            log = NULL;\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n"
}