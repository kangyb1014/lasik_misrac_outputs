{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In OS_ObjectIdFindNextFree when max_id == 0 the code sets serial = 0 but execution never uses that value (the subsequent for-loop is skipped because max_id is 0 and no code path reads serial before function returns an error). The assignment serial = 0 therefore is an operation whose removal would not affect program behaviour and is dead code, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetBaseForObjectType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetBaseForObjectType:\n```c\nuint32 OS_GetBaseForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_TASK_BASE;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_QUEUE_BASE;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_BINSEM_BASE;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_COUNTSEM_BASE;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MUTEX_BASE;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_STREAM_BASE;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_DIR_BASE;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_TIMEBASE_BASE;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_TIMECB_BASE;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MODULE_BASE;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_FILESYS_BASE;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_CONSOLE_BASE;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_CONDVAR_BASE;\n        default:\n            return 0;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetBaseForObjectType code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetBaseForObjectType with it.\n  - Your function must have the exact same signature as OS_GetBaseForObjectType.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetBaseForObjectType to check logs.\n  - Your function MUST preserve the original logic of OS_GetBaseForObjectType as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetBaseForObjectType will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetBaseForObjectType as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "uint32 OS_GetBaseForObjectType(osal_objtype_t idtype)\n{\n    uint32 base = 0;\n\n    /* Probe: record entry and the incoming idtype */\n    FILE *logf = fopen(\"/tmp/logs/2658.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_GetBaseForObjectType: entry idtype=%d\\n\", (int)idtype);\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            base = OS_TASK_BASE;\n            if (logf) fprintf(logf, \"branch: OS_TASK -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            base = OS_QUEUE_BASE;\n            if (logf) fprintf(logf, \"branch: OS_QUEUE -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            base = OS_BINSEM_BASE;\n            if (logf) fprintf(logf, \"branch: OS_BINSEM -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            base = OS_COUNTSEM_BASE;\n            if (logf) fprintf(logf, \"branch: OS_COUNTSEM -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            base = OS_MUTEX_BASE;\n            if (logf) fprintf(logf, \"branch: OS_MUTEX -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            base = OS_STREAM_BASE;\n            if (logf) fprintf(logf, \"branch: OS_STREAM -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            base = OS_DIR_BASE;\n            if (logf) fprintf(logf, \"branch: OS_DIR -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            base = OS_TIMEBASE_BASE;\n            if (logf) fprintf(logf, \"branch: OS_TIMEBASE -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            base = OS_TIMECB_BASE;\n            if (logf) fprintf(logf, \"branch: OS_TIMECB -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            base = OS_MODULE_BASE;\n            if (logf) fprintf(logf, \"branch: OS_MODULE -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            base = OS_FILESYS_BASE;\n            if (logf) fprintf(logf, \"branch: OS_FILESYS -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            base = OS_CONSOLE_BASE;\n            if (logf) fprintf(logf, \"branch: OS_CONSOLE -> base=%u\\n\", (unsigned)base);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            base = OS_CONDVAR_BASE;\n            if (logf) fprintf(logf, \"branch: OS_CONDVAR -> base=%u\\n\", (unsigned)base);\n            break;\n        default:\n            base = 0u;\n            if (logf) fprintf(logf, \"branch: DEFAULT -> base=0\\n\");\n            break;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_GetBaseForObjectType: exit return=%u\\n\", (unsigned)base);\n        fclose(logf);\n    }\n\n    return base;\n}"
}