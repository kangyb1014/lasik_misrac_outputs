{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to take the address of a table element and returns a non-const pointer to it (&tbl[...]). In OS_ModuleSymbolLookup this is used as\n    record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\nbut record is only read (record->name_entry is passed to OS_SymbolLookup_Static) and never modified. Therefore the pointer could and should be const-qualified (e.g. const OS_common_record_t *record), but the macro forces a non-const pointer. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleSymbolLookup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleSymbolLookup with it.\n  - Your function must have the exact same signature as OS_ModuleSymbolLookup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleSymbolLookup to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleSymbolLookup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n     * Local prototypes for file I/O so this function can emit logs even if\n     * stdio.h is not included in the translation unit that this function is\n     * placed into. These are declared with an opaque FILE type so they compile\n     * in block scope.\n     */\n    struct FILE;\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fclose(FILE *);\n\n    /* Attempt to open the log file (append). If it fails, continue silently. */\n    FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n    if (logf)\n    {\n        /* Log entry and input parameters. Casts are conservative to avoid\n         * assuming specific types for platform typedefs. */\n        (void)fprintf(logf, \"ENTER: OS_ModuleSymbolLookup(module_id=%ld, symbol_address=%p, symbol_name=%p)\\n\",\n                      (long)module_id, (void *)symbol_address, (const void *)symbol_name);\n        (void)fprintf(logf, \"       symbol_name_str=%s\\n\", (symbol_name != NULL) ? symbol_name : \"(null)\");\n    }\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (logf)\n    {\n        (void)fprintf(logf, \"After OS_ObjectIdGetById: return_code=%ld\\n\", (long)return_code);\n        /* Print the address of the local token variable so callers can correlate\n         * the token on the stack if needed in post-mortem. */\n        (void)fprintf(logf, \" token_stack_addr=%p (opaque)\\n\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture the record pointer obtained from the object table macro. */\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        if (logf)\n        {\n            (void)fprintf(logf, \" OS_OBJECT_TABLE_GET -> record_ptr=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* record->name_entry is read later; log it here to demonstrate the\n                 * value that is used by OS_SymbolLookup_Static. */\n                const char *name_entry = record->name_entry;\n                (void)fprintf(logf, \" record->name_entry_ptr=%p\\n\", (const void *)name_entry);\n                (void)fprintf(logf, \" record->name_entry_str=%s\\n\", (name_entry != NULL) ? name_entry : \"(null)\");\n            }\n        }\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n\n        if (logf)\n        {\n            (void)fprintf(logf, \" After OS_ModuleSymbolLookup_Impl: return_code=%ld\\n\", (long)return_code);\n        }\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            if (logf)\n            {\n                (void)fprintf(logf, \" OS_SymbolLookup_Static returned=%ld\\n\", (long)staticsym_status);\n                if (symbol_address != NULL)\n                {\n                    (void)fprintf(logf, \" symbol_address(out)=%p (value=0x%llx)\\n\",\n                                  (void *)symbol_address, (unsigned long long)(uintptr_t)(*symbol_address));\n                }\n            }\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n                if (logf)\n                {\n                    (void)fprintf(logf, \" Overwriting return_code with static lookup success (%ld)\\n\", (long)return_code);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (logf)\n        {\n            (void)fprintf(logf, \" Released object id token. Final return_code=%ld\\n\", (long)return_code);\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            (void)fprintf(logf, \" OS_ObjectIdGetById failed, skipping table lookup. Final return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (logf)\n    {\n        (void)fclose(logf);\n    }\n\n    return return_code;\n}\n"
}