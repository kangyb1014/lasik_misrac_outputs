{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StaticSym is declared as OS_static_symbol_record_t *StaticSym = OS_STATIC_SYMTABLE_SOURCE; but the code only reads the pointed-at elements (Name, Module, Address) and never modifies them. Therefore the pointed-to type could and should be const-qualified (const OS_static_symbol_record_t *StaticSym). The fragment ++StaticSym increments the pointer but does not modify the object contents \u2014 so using a non-const pointer here violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleSymbolLookup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleSymbolLookup with it.\n  - Your function must have the exact same signature as OS_ModuleSymbolLookup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleSymbolLookup to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleSymbolLookup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /* Minimal entry probe so the function invocation is always logged */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"ENTER OS_ModuleSymbolLookup: module_id=%llu, symbol_address_ptr=%p, symbol_name=%s\\n\",\n                    (unsigned long long)module_id,\n                    (void *)symbol_address,\n                    (symbol_name != NULL) ? symbol_name : \"(null)\");\n            fclose(logf);\n        }\n    }\n\n    /*\n    ** Check parameters (preserve original behavior/order)\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    {\n        FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"record=%p\\n\", (void *)record);\n                if (record != NULL)\n                {\n                    const char *recname = (record->name_entry != NULL) ? record->name_entry : \"(null)\";\n                    fprintf(logf, \"record->name_entry=%s\\n\", recname);\n                }\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n            if (logf)\n            {\n                /* Do not dereference *symbol_address to avoid reading uninitialized memory; log the pointer only */\n                fprintf(logf, \"OS_ModuleSymbolLookup_Impl returned %d, symbol_address_ptr=%p\\n\", (int)return_code, (void *)symbol_address);\n                fclose(logf);\n            }\n        }\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            {\n                FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"OS_SymbolLookup_Static returned %d, symbol_address_ptr=%p\\n\", (int)staticsym_status, (void *)symbol_address);\n                    fclose(logf);\n                }\n            }\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    {\n        FILE *logf = fopen(\"/tmp/logs/1215.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"EXIT OS_ModuleSymbolLookup returning %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}