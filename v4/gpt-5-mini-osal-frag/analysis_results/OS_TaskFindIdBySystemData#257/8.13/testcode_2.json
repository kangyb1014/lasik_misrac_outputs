{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdGetBySearch takes a parameter 'void *arg' but is used with a const pointer: OS_TaskFindIdBySystemData passes (void *)sysdata where sysdata is 'const void *'. The match function OS_TaskIdMatchSystemData_Impl treats the argument as const (casts to 'const pthread_t *' and does not modify it). Casting away const in the caller and declaring the parameter non-const means the pointer does not point to a const-qualified type when it could, violating MISRA C 2023 Rule 8.13. The signature should be changed to accept 'const void *arg' (and the OS_ObjectMatchFunc_t prototype adjusted accordingly) to avoid discarding the const qualifier.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskFindIdBySystemData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1325.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskFindIdBySystemData code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskFindIdBySystemData with it.\n  - Your function must have the exact same signature as OS_TaskFindIdBySystemData.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskFindIdBySystemData to check logs.\n  - Your function MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskFindIdBySystemData will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Minimal entry log to show function reached and parameters seen by caller */\n    {\n        FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_TaskFindIdBySystemData called. task_id=%p sysdata=%p sysdata_size=%zu\\n\",\n                    (void *)task_id, sysdata, sysdata_size);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER Validate: return_code=%d (from OS_TaskValidateSystemData_Impl)\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log early return reason */\n        FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_TaskFindIdBySystemData returning early due to validation failure. return_code=%d\\n\",\n                    (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    /* Log about to call OS_ObjectIdGetBySearch and the fact that sysdata is being cast (the core of the reported violation) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"CALL: OS_ObjectIdGetBySearch with casted sysdata=(void*)%p (original const void*=%p)\\n\",\n                    (void *)sysdata, sysdata);\n            fclose(log);\n        }\n    }\n\n    /* Original call retained (including the cast that discards const qualification) */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n\n    /* Log result of search call */\n    {\n        FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER Search: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        /* Log the token address and the id assigned */\n        {\n            FILE *log = fopen(\"/tmp/logs/1325.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"FOUND: token_addr=%p assigned_task_id=%"
}