{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default branch the code does an unconditional 'return OS_ERR_BAD_ADDRESS;' and then has a 'break;' on the next line. That 'break' is unreachable (control never reaches it because the function has already returned), which violates MISRA C 2023 Rule 2.1. The unreachable 'break' should be removed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/416.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAddrFromString_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAddrFromString_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAddrFromString_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAddrFromString_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAddrFromString_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n    FILE *logf = NULL;\n\n    /* Open log file for append; do not change function logic if logging fails */\n    logf = fopen(\"/tmp/logs/416.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_SocketAddrFromString_Impl Addr=%p string=%s\\n\", (void *)Addr, (string != NULL) ? string : \"(null)\");\n        fflush(logf);\n    }\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"STATE: Accessor=%p sa_family=%d\\n\", (void *)Accessor, (int)Accessor->sa.sa_family);\n        fflush(logf);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: AF_INET\\n\");\n                fflush(logf);\n            }\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"STATE: addrbuffer=%p (sin_addr)\\n\", addrbuffer);\n                fflush(logf);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: AF_INET6\\n\");\n                fflush(logf);\n            }\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"STATE: addrbuffer=%p (sin6_addr)\\n\", addrbuffer);\n                fflush(logf);\n            }\n            break;\n#endif\n        default:\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: DEFAULT - will return OS_ERR_BAD_ADDRESS (unreachable break after return remains)\\n\");\n                fflush(logf);\n                fclose(logf);\n            }\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"CALL: inet_pton(family=%d, string=%s, addrbuffer=%p)\\n\", (int)Accessor->sa.sa_family, (string != NULL) ? string : \"(null)\", addrbuffer);\n        fflush(logf);\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"RESULT: inet_pton FAILED -> returning OS_ERROR\\n\");\n            fflush(logf);\n            fclose(logf);\n        }\n        return OS_ERROR;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"RESULT: inet_pton SUCCESS -> returning OS_SUCCESS\\n\");\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return OS_SUCCESS;\n}\n"
}