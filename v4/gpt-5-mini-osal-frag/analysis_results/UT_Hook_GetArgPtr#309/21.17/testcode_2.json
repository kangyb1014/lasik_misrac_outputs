{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(MetaPtr->Name, Name) without checking that the input parameter Name is non-NULL and points to a valid NUL-terminated string. Although MetaPtr->Name is guarded by MetaPtr->Name != NULL, Name is not validated; if UT_Hook_GetArgPtr is called with Name == NULL (or with a non-NUL-terminated buffer), strcmp will dereference beyond the object bounds (NULL or past the buffer), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Hook_GetArgPtr code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Hook_GetArgPtr with it.\n  - Your function must have the exact same signature as UT_Hook_GetArgPtr.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Hook_GetArgPtr to check logs.\n  - Your function MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Hook_GetArgPtr will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    FILE *log = fopen(\"/tmp/logs/2763.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_Hook_GetArgPtr ENTER: this=%p Name_ptr=%p ExpectedTypeSize=%lu\\n\",\n                (void *)ContextPtr, (void *)Name, (unsigned long)ExpectedTypeSize);\n        fflush(log);\n    }\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        if (log)\n        {\n            fprintf(log, \"ITER %u: MetaPtr=%p MetaPtr->Name_ptr=%p\\n\",\n                    (unsigned)i, (void *)MetaPtr, (void *)MetaPtr->Name);\n            fflush(log);\n        }\n\n        if (MetaPtr->Name != NULL)\n        {\n            /*\n             * Intentionally preserve original behavior: call strcmp without\n             * validating the input parameter 'Name'. This may dereference\n             * Name if it is NULL or not NUL-terminated (the original code\n             * exhibited this behaviour and we do not change it here).\n             */\n            int cmpres = strcmp(MetaPtr->Name, Name);\n\n            if (log)\n            {\n                /* MetaPtr->Name is non-NULL so printing its string should be safe */\n                fprintf(log, \"  MetaPtr->Name_val=\\\"%s\\\" strcmp_result=%d MetaPtr->Size=%lu MetaPtr->Type=%u\\n\",\n                        MetaPtr->Name, cmpres, (unsigned long)MetaPtr->Size, (unsigned)MetaPtr->Type);\n                fflush(log);\n            }\n\n            if (cmpres == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    if (log)\n                    {\n                        fprintf(log, \"  MATCH (DIRECT) at index %u => Result=%p\\n\", (unsigned)i, Result);\n                        fflush(log);\n                    }\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    if (log)\n                    {\n                        fprintf(log, \"  MATCH (INDIRECT) at index %u => Result=%p\\n\", (unsigned)i, Result);\n                        fflush(log);\n                    }\n                }\n                break;\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"  NO MATCH at index %u (cmp=%d, size_check=%s)\\n\",\n                            (unsigned)i, cmpres,\n                            (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize) ? \"ok\" : \"fail\");\n                    fflush(log);\n                }\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"  MetaPtr->Name is NULL (skipping strcmp)\\n\");\n                fflush(log);\n            }\n        }\n    }\n\n    if (Result == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"RESULT NULL: Requested parameter Name_ptr=%p size=%lu not provided by stub\\n\",\n                    (void *)Name, (unsigned long)ExpectedTypeSize);\n            fflush(log);\n        }\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            if (log)\n            {\n                fprintf(log, \"  Returning ARG_DEFAULT_ZERO_VALUE at %p\\n\", Result);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"  Abort: No value for parameter\\n\");\n                fflush(log);\n            }\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"UT_Hook_GetArgPtr EXIT: Result=%p\\n\", Result);\n        fflush(log);\n        fclose(log);\n    }\n\n    return Result;\n}\n"
}