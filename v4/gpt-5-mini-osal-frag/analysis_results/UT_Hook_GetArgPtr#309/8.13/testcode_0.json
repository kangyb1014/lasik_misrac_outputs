{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void * AsPtr' is declared as a pointer to non-const. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types when possible \u2014 here AsPtr should be declared as 'const void * AsPtr' (or an equivalent const-qualified pointer) to match its intended use as a read-only default pointer value.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2765.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Hook_GetArgPtr code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Hook_GetArgPtr with it.\n  - Your function must have the exact same signature as UT_Hook_GetArgPtr.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Hook_GetArgPtr to check logs.\n  - Your function MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Hook_GetArgPtr will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    /* Open log file for append. If this fails, proceed without logging. */\n    FILE *log = fopen(\"/tmp/logs/2765.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_Hook_GetArgPtr ENTER: Name='%s' ExpectedTypeSize=%lu ContextPtr=%p\\n\",\n                Name ? Name : \"(null)\", (unsigned long)ExpectedTypeSize, (const void *)ContextPtr);\n        if (ContextPtr)\n        {\n            fprintf(log, \"  ContextPtr->ArgCount=%u Meta=%p ArgPtr=%p\\n\",\n                    (unsigned)ContextPtr->ArgCount, (const void *)ContextPtr->Meta, (const void *)ContextPtr->ArgPtr);\n        }\n    }\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (log)\n        {\n            fprintf(log, \"  Checking arg[%u]: MetaPtr=%p Name=%s Size=%lu Type=%u\\n\",\n                    (unsigned)i, (const void *)MetaPtr, MetaPtr->Name ? MetaPtr->Name : \"(null)\", (unsigned long)MetaPtr->Size,\n                    (unsigned)MetaPtr->Type);\n        }\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    if (log)\n                    {\n                        fprintf(log, \"    Match DIRECT at index %u -> Result=%p (&ArgPtr[%u])\\n\",\n                                (unsigned)i, (const void *)Result, (unsigned)i);\n                    }\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    if (log)\n                    {\n                        fprintf(log, \"    Match INDIRECT at index %u -> Result=%p (ArgPtr[%u])\\n\",\n                                (unsigned)i, (const void *)Result, (unsigned)i);\n                    }\n                }\n                break;\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"    No match for this entry (strcmp or size mismatch)\\n\");\n                }\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"    MetaPtr->Name is NULL\\n\");\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"  No suitable Result found for Name='%s' size=%lu -> invoking UtAssert_Failed\\n\",\n                    Name ? Name : \"(null)\", (unsigned long)ExpectedTypeSize);\n        }\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            /*\n             * Log that the default zero union will be used. This is relevant to the\n             * reported MISRA violation because the union contains a member 'void * AsPtr'\n             * (non-const). Logging the pointer value and the fact that it is used helps\n             * reproduce and demonstrate the violation scenario.\n             */\n            if (log)\n            {\n                fprintf(log, \"  Using ARG_DEFAULT_ZERO_VALUE as fallback (size ok). Address=%p\\n\",\n                        (const void *)&ARG_DEFAULT_ZERO_VALUE);\n                /* Log the union's AsPtr field value (note: this member is declared as void* in the union)\n                 * Casting to const void* for printing is safe here. */\n                fprintf(log, \"    ARG_DEFAULT_ZERO_VALUE.AsPtr (non-const member) = %p\\n\",\n                        (const void *)ARG_DEFAULT_ZERO_VALUE.AsPtr);\n            }\n\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"  No fallback available (expected size too large) -> invoking UtAssert_Abort\\n\");\n            }\n\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"UT_Hook_GetArgPtr EXIT: returning Result=%p\\n\\n\", (const void *)Result);\n        fclose(log);\n    }\n\n    return Result;\n}\n"
}