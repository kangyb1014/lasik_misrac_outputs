{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe second clause of the for uses sizeof(OSAL_set->object_ids), which references the OSAL_set->object_ids object; that object is modified in the loop body (OSAL_set->object_ids[offset] &= ...). Rule 14.2 requires the second clause to use only the loop counter (and optionally loop control flags) and not any other object modified in the loop body, so this for statement violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2111.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FdSet_ConvertOut_Impl with it.\n  - Your function must have the exact same signature as OS_FdSet_ConvertOut_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FdSet_ConvertOut_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FdSet_ConvertOut_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Open log file for append; best-effort logging, ignore failures to avoid affecting behavior */\n    FILE *logf = fopen(\"/tmp/logs/2111.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_FdSet_ConvertOut_Impl: OS_set=%p, OSAL_set=%p\\n\", (void *)OS_set, (void *)OSAL_set);\n        /* Log the loop bound expression value to demonstrate the second-clause dependency */\n        fprintf(logf, \"loop_bound (sizeof(OSAL_set->object_ids)) = %zu\\n\", sizeof(OSAL_set->object_ids));\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        if (logf != NULL)\n        {\n            fprintf(logf, \"offset=%zu: initial objids=0x%02x\\n\", offset, (unsigned)objids);\n        }\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  bit=%zu, id=%u\\n\", bit, (unsigned)id);\n            }\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                int is_set = FD_ISSET(osfd, OS_set);\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"    obj present, osfd=%d, FD_ISSET=%d\\n\", osfd, is_set);\n                }\n                if (osfd < 0 || !is_set)\n                {\n                    /* Log the mutation of OSAL_set->object_ids which is central to the reported violation */\n                    if (logf != NULL)\n                    {\n                        unsigned old_val = (unsigned)OSAL_set->object_ids[offset];\n                        unsigned new_val = old_val & ~(1u << bit);\n                        fprintf(logf, \"    clearing bit: offset=%zu, bit=%zu, old=0x%02x, new=0x%02x\\n\",\n                                offset, bit, old_val, new_val);\n                    }\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_FdSet_ConvertOut_Impl\\n\");\n        fclose(logf);\n    }\n}\n"
}