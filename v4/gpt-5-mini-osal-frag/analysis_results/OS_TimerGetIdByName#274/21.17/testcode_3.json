{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf LENGTHCHECK is implemented using an unbounded <string.h> function such as strlen(name), then a non-terminated or overly long name buffer can cause reads past the object bounds. For example, a caller passes a char name[OS_MAX_API_NAME] filled with non-zero bytes with no terminating '\\0' (or passes a pointer to a buffer whose terminator lies beyond OS_MAX_API_NAME). strlen(name) would scan past the buffer boundary and thus violate MISRA C 2023 Rule 21.17. (If LENGTHCHECK instead uses a bounded operation such as strnlen(name, OS_MAX_API_NAME) or otherwise guarantees no read past the limit, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerGetIdByName with it.\n  - Your function must have the exact same signature as OS_TimerGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Open log file for probe output. Best-effort; failure to open should not change behavior. */\n    FILE *log = fopen(\"/tmp/logs/3323.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_TimerGetIdByName(timer_id=%p, timer_name=%p)\\n\", (void *)timer_id, (const void *)timer_name);\n    }\n\n    /* Check parameters (preserve original checks) */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Probe the timer_name buffer in a bounded manner to record whether it is\n     * null-terminated within a reasonable limit. This mimics the conditions\n     * that would make an unbounded strlen() unsafe while avoiding unbounded\n     * reads in the logger itself.\n     *\n     * Note: This read is intentionally bounded (probe_max) to avoid an\n     * unbounded scan here. The purpose is to log evidence that a name is\n     * non-terminated within probe_max bytes, which indicates a potential\n     * vulnerability if an unbounded strlen() were used by LENGTHCHECK.\n     */\n    if (log)\n    {\n        const size_t probe_max = 256U;\n        size_t i;\n        int null_found = 0;\n\n        for (i = 0U; i < probe_max; ++i)\n        {\n            /* Access is bounded by probe_max */\n            char c = timer_name[i];\n            if (c == '\\0')\n            {\n                null_found = 1;\n                break;\n            }\n        }\n\n        if (null_found)\n        {\n            fprintf(log, \"PROBE: timer_name is null-terminated within %zu bytes (length=%zu)\\n\", i, i);\n\n            /* Print a short printable sample (up to 64 chars) for context */\n            size_t sample_len = (i < 64U) ? i : 64U;\n            fprintf(log, \"SAMPLE: \\\"\");\n            for (size_t j = 0U; j < sample_len; ++j)\n            {\n                unsigned char uc = (unsigned char)timer_name[j];\n                if (uc >= 32U && uc <= 126U)\n                {\n                    fputc((int)uc, log);\n                }\n                else\n                {\n                    fprintf(log, \"\\\\x%02X\", uc);\n                }\n            }\n            if (i > sample_len)\n            {\n                fprintf(log, \"...[truncated]\");\n            }\n            fprintf(log, \"\\\"\\n\");\n        }\n        else\n        {\n            fprintf(log, \"PROBE: timer_name NOT null-terminated within %zu bytes. Potential non-terminated buffer; an unbounded strlen() would read past buffer bounds.\\n\", probe_max);\n        }\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (log)\n    {\n        fprintf(log, \"CTX: OS_TaskGetId_Impl -> objtype=%d\\n\", (int)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"EXIT: returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"CALL: OS_ObjectIdFindByName(type=%d, name=%p)\\n\", (int)OS_OBJECT_TYPE_OS_TIMECB, (const void *)timer_name);\n    }\n\n    /* Perform the original lookup */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    if (log)\n    {\n        fprintf(log, \"RESULT: OS_ObjectIdFindByName returned %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}