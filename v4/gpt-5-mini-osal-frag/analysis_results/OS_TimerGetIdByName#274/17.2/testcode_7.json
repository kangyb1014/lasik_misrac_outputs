{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when the OS is not initialized. If OS_DEBUG is implemented in terms of OS_printf (e.g. OS_DEBUG -> OS_printf) this produces an indirect recursive call (OS_printf -> OS_DEBUG -> OS_printf). Another possible indirect recursion is via the normal path: OS_printf -> OS_ConsoleWrite -> OS_ConsoleOutput_Impl (or other console backend) -> OS_printf, if the console backend uses OS_printf to emit output. In either of these implementation cases OS_printf would indirectly call itself, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3320.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerGetIdByName with it.\n  - Your function must have the exact same signature as OS_TimerGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n    FILE *logf = fopen(\"/tmp/logs/3320.txt\", \"a\");\n\n    /* Minimal entry probe so the function being reached is recorded. */\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetIdByName: ENTER timer_id_ptr=%p timer_name=%s\\n\",\n                (void *)timer_id, (timer_name != NULL) ? timer_name : \"(null)\");\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetIdByName: timer_id pointer check passed\\n\");\n        fflush(logf);\n    }\n\n    OS_CHECK_POINTER(timer_name);\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetIdByName: timer_name pointer check passed\\n\");\n        fflush(logf);\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (logf)\n    {\n        /* Log the returned object type to help reproduce indirect call paths */\n        fprintf(logf, \"OS_TimerGetIdByName: OS_TaskGetId_Impl()->objtype=%d\\n\", (int)objtype);\n        fflush(logf);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetIdByName: ERROR - called from a timebase callback, returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(logf);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Normal path: look up the timer control block by name */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetIdByName: OS_ObjectIdFindByName returned %d, timer_id_ptr=%p\\n\",\n                (int)return_code, (void *)timer_id);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}