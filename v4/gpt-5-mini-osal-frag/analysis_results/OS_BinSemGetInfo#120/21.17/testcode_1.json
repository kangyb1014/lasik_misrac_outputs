{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: strncpy copies up to sizeof(bin_prop->name) - 1 bytes from record->name_entry. While the destination is protected (bin_prop was memset and the copy length is one less than the destination size, ensuring no write past the destination), there is no guarantee in the shown code that record->name_entry points to a buffer at least that long. If record->name_entry refers to a smaller buffer (or a pointer to a shorter string storage), strncpy may read beyond the source object bounds, which would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemGetInfo with it.\n  - Your function must have the exact same signature as OS_BinSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    /* Open log file for append. If this fails, continue without logging. */\n    FILE *logf = fopen(\"/tmp/logs/3153.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER: OS_BinSemGetInfo(sem_id=%d, bin_prop=%p)\\n\", (int)sem_id, (void *)bin_prop);\n        fflush(logf);\n    }\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    if (logf)\n    {\n        fprintf(logf, \"memset bin_prop at %p, size=%zu\\n\", (void *)bin_prop, (size_t)sizeof(OS_bin_sem_prop_t));\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d for sem_id=%d, token_addr=%p\\n\", (int)return_code, (int)sem_id, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (logf)\n        {\n            /* Log the record pointer and the source/destination pointer values and planned copy length.\n               Do NOT attempt to read from record->name_entry here to avoid introducing additional reads beyond\n               what the original code does. This preserves original behavior while recording pointers and sizes. */\n            fprintf(logf, \"record=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* Log pointer to name entry. If name_entry is an array this will decay to pointer; cast to void* for printing. */\n                fprintf(logf, \"record->name_entry=%p, bin_prop->name=%p\\n\", (const void *)record->name_entry, (void *)bin_prop->name);\n            }\n            else\n            {\n                fprintf(logf, \"record is NULL\\n\");\n            }\n\n            size_t copy_len = sizeof(bin_prop->name) - 1U;\n            fprintf(logf, \"About to strncpy with count=%zu (sizeof(bin_prop->name) - 1)\\n\", copy_len);\n            fflush(logf);\n        }\n\n        /* Perform the original copy operation. This is the same call as in the original implementation. */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n\n        if (logf)\n        {\n            /* After the copy the destination buffer is safe to read. Log the resulting content of bin_prop->name\n               and the creator field value copied below. */\n            fprintf(logf, \"After strncpy: bin_prop->name (as stored)='%s'\\n\", bin_prop->name);\n            fprintf(logf, \"record->creator=%u\\n\", (unsigned)record->creator);\n            fflush(logf);\n        }\n\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"Released token at %p\\n\", (void *)&token);\n            fprintf(logf, \"EXIT: OS_BinSemGetInfo returning %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo: OS_ObjectIdGetById failed with %d, returning without accessing table.\\n\", (int)return_code);\n            fprintf(logf, \"EXIT: OS_BinSemGetInfo returning %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}