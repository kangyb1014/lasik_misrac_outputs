{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe symbol is declared as 'extern OS_common_record_t *const OS_global_bin_sem_table' \u2014 a const pointer to a non-const OS_common_record_t. In functions such as OS_BinSemGetInfo the table is only read (record is used for read-only accesses), so the pointed-to type could and should be const-qualified (e.g. 'extern const OS_common_record_t *const OS_global_bin_sem_table') to prevent accidental modification. Because the pointed-to type is not const-qualified here, this violates MISRA C 2023 Rule 8.13 unless there is a justified need to mutate the table entries.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3155.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemGetInfo with it.\n  - Your function must have the exact same signature as OS_BinSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Logging probe: open log file (append) and record entry */\n    FILE *log = fopen(\"/tmp/logs/3155.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_BinSemGetInfo called: sem_id=%lu, bin_prop=%p\\n\", (unsigned long)sem_id, (void *)bin_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned: %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"token address: %p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_global_bin_sem_table ptr: %p, record ptr: %p\\n\", (void *)OS_global_bin_sem_table, (void *)record);\n            fflush(log);\n        }\n\n        /* Capture some of the record state for evidence that accesses are read-only */\n        if (record != NULL)\n        {\n            char _log_name[64];\n            memset(_log_name, 0, sizeof(_log_name));\n            /* copy a bounded amount of the name for logging */\n            strncpy(_log_name, record->name_entry, sizeof(_log_name) - 1);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"record->name_entry (truncated): '%s'\\n\", _log_name);\n                fprintf(log, \"record->creator: %lu\\n\", (unsigned long)record->creator);\n                fprintf(log, \"Note: OS_BinSemGetInfo will perform read-only accesses on the record fields logged above.\\n\");\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Warning: record is NULL after OS_OBJECT_TABLE_GET(). This mirrors original behavior where a valid token is expected.\\n\");\n                fflush(log);\n            }\n        }\n\n        /* Preserve original behavior: copy name and creator, then call implementation\n         * Keep the same sequence to avoid changing observable behavior. */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_BinSemGetInfo_Impl: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Released token at %p\\n\", (void *)&token);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_BinSemGetInfo returning: %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}