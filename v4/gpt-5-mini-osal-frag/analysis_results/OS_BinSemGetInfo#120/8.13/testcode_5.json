{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. In OS_BinSemGetInfo_Impl the token parameter is declared as const OS_object_token_t *token and the function only reads from the table entry (sem->current_value). However the code does: sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token); which produces a non-const OS_impl_binsem_internal_record_t * (sem). The pointer should be a pointer-to-const (e.g. const OS_impl_binsem_internal_record_t *sem) because the object is only read. In addition, passing *token (a const lvalue) into the macro that takes &(tok) likely causes the const qualifier to be discarded when used by downstream APIs, further breaking const-correctness. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3155.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemGetInfo with it.\n  - Your function must have the exact same signature as OS_BinSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Open a log file to capture control flow and state for debugging the const-qualification issue */\n    FILE *logf = fopen(\"/tmp/logs/3155.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"OS_BinSemGetInfo ENTER: sem_id=%lu bin_prop=%p\\n\", (unsigned long)sem_id, (void *)bin_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n    if (logf)\n    {\n        fprintf(logf, \"memset(bin_prop) done\\n\");\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (logf)\n        {\n            /* Log pointer to the record and some fields that are accessed below. */\n            fprintf(logf, \"record=%p\\n\", (void *)record);\n            if (record)\n            {\n                /* name_entry is used by the original code; log it safely */\n                const char *name_print = (record->name_entry != NULL) ? record->name_entry : \"(null)\";\n                fprintf(logf, \"record->name_entry='%s'\\n\", name_print);\n                fprintf(logf, \"record->creator=%lu\\n\", (unsigned long)record->creator);\n            }\n\n            /* Log the raw bytes of the token so downstream code and reviewers can see whether const was lost */\n            fprintf(logf, \"token address=%p size=%zu bytes:\\n\", (void *)&token, sizeof(token));\n            {\n                unsigned char *p = (unsigned char *)&token;\n                size_t to_print = sizeof(token) > 32 ? 32 : sizeof(token);\n                for (size_t i = 0; i < to_print; ++i)\n                {\n                    fprintf(logf, \" %02x\", p[i]);\n                }\n                if (sizeof(token) > to_print)\n                {\n                    fprintf(logf, \" ...\");\n                }\n                fprintf(logf, \"\\n\");\n            }\n\n            fflush(logf);\n        }\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        if (logf)\n        {\n            fprintf(logf, \"Calling OS_BinSemGetInfo_Impl with &token=%p bin_prop=%p\\n\", (void *)&token, (void *)bin_prop);\n            fflush(logf);\n        }\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_ObjectIdRelease(&token) called\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_BinSemGetInfo EXIT: returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}