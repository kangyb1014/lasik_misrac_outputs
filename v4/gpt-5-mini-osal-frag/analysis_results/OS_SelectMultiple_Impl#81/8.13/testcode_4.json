{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &wr_set as an input-only argument to OS_FdSet_ConvertOut_Impl. If OS_FdSet_ConvertOut_Impl's corresponding parameter is not const-qualified (e.g. prototype uses fd_set * rather than const fd_set *), this is a violation because the function only needs to read the fd_set to populate the OS_FdSet. The fd_set pointer should be const-qualified to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/325.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple_Impl:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectMultiple_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectMultiple_Impl with it.\n  - Your function must have the exact same signature as OS_SelectMultiple_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectMultiple_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectMultiple_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    /* Open log file for appending control-flow and state information. */\n    FILE *log = fopen(\"/tmp/logs/325.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SelectMultiple_Impl ReadSet=%p WriteSet=%p msecs=%d\\n\", (void *)ReadSet, (void *)WriteSet, (int)msecs);\n        fflush(log);\n    }\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n\n    if (ReadSet != NULL)\n    {\n        if (log) fprintf(log, \"Before OS_FdSet_ConvertIn_Impl (ReadSet): maxfd=%d rd_set=%p ReadSet=%p\\n\", maxfd, (void *)&rd_set, (void *)ReadSet);\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (log) fprintf(log, \"After OS_FdSet_ConvertIn_Impl (ReadSet): return_code=%d maxfd=%d\\n\", return_code, maxfd);\n        if (return_code != OS_SUCCESS)\n        {\n            if (log) { fprintf(log, \"EXIT EARLY: ConvertIn(ReadSet) failed with %d\\n\", return_code); fclose(log); }\n            return return_code;\n        }\n    }\n\n    if (WriteSet != NULL)\n    {\n        if (log) fprintf(log, \"Before OS_FdSet_ConvertIn_Impl (WriteSet): maxfd=%d wr_set=%p WriteSet=%p\\n\", maxfd, (void *)&wr_set, (void *)WriteSet);\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (log) fprintf(log, \"After OS_FdSet_ConvertIn_Impl (WriteSet): return_code=%d maxfd=%d\\n\", return_code, maxfd);\n        if (return_code != OS_SUCCESS)\n        {\n            if (log) { fprintf(log, \"EXIT EARLY: ConvertIn(WriteSet) failed with %d\\n\", return_code); fclose(log); }\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        if (log) fprintf(log, \"Calling OS_DoSelect: maxfd=%d rd_set=%p wr_set=%p msecs=%d\\n\", maxfd, (void *)&rd_set, (void *)&wr_set, (int)msecs);\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n        if (log) fprintf(log, \"Returned from OS_DoSelect: return_code=%d\\n\", return_code);\n    }\n    else\n    {\n        /* This return code will be used if the set(s) were both empty/NULL or otherwise did not contain valid filehandles. */\n        return_code = OS_ERR_INVALID_ID;\n        if (log) fprintf(log, \"No descriptors present: setting return_code=OS_ERR_INVALID_ID (%d)\\n\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            if (log) fprintf(log, \"Calling OS_FdSet_ConvertOut_Impl: rd_set=%p -> ReadSet=%p\\n\", (void *)&rd_set, (void *)ReadSet);\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n            if (log) fprintf(log, \"Returned from OS_FdSet_ConvertOut_Impl (ReadSet)\\n\");\n        }\n        if (WriteSet != NULL)\n        {\n            if (log) fprintf(log, \"Calling OS_FdSet_ConvertOut_Impl: wr_set=%p -> WriteSet=%p\\n\", (void *)&wr_set, (void *)WriteSet);\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n            if (log)\n            {\n                fprintf(log, \"Returned from OS_FdSet_ConvertOut_Impl (WriteSet)\\n\");\n                /* Evidence for the MISRA 8.13 scenario: record that a non-const address was passed. */\n                fprintf(log, \"NOTE: OS_FdSet_ConvertOut_Impl was invoked with &wr_set (non-const fd_set *). If the implementation prototype lacks const qualification (const fd_set *), this may indicate a MISRA C 2023 Rule 8.13 violation.\\n\");\n            }\n        }\n    }\n\n    if (log) { fprintf(log, \"EXIT: OS_SelectMultiple_Impl return_code=%d\\n\", return_code); fclose(log); }\n    return return_code;\n}\n"
}