{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)) in the else branch of the initial msecs > 0 test is executed only when msecs <= 0. In those cases ts_end is never used later (the code uses tv/tvptr for msecs == 0 and tvptr = NULL for msecs < 0), so removing the memset would not change program behaviour. Therefore this executed assignment is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/328.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple_Impl:\n```c\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (return_code != OS_SUCCESS)\n        {\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectMultiple_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectMultiple_Impl with it.\n  - Your function must have the exact same signature as OS_SelectMultiple_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectMultiple_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectMultiple_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectMultiple_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    /* Include stdio here so the logging calls are declared regardless of outer includes */\n    #include <stdio.h>\n\n    fd_set wr_set;\n    fd_set rd_set;\n    int    maxfd;\n    int32  return_code;\n\n    FILE *logf = fopen(\"/tmp/logs/328.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_SelectMultiple_Impl ENTRY: ReadSet=%p WriteSet=%p msecs=%d\\n\", (void *)ReadSet, (void *)WriteSet, (int)msecs);\n        fflush(logf);\n    }\n\n    FD_ZERO(&rd_set);\n    FD_ZERO(&wr_set);\n    maxfd = -1;\n    if (ReadSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &rd_set, ReadSet);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After ReadSet ConvertIn: return_code=%d maxfd=%d rd_set_addr=%p\\n\", (int)return_code, maxfd, (void *)&rd_set);\n            fflush(logf);\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Early RETURN (ReadSet ConvertIn failed): %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n            return return_code;\n        }\n    }\n    if (WriteSet != NULL)\n    {\n        return_code = OS_FdSet_ConvertIn_Impl(&maxfd, &wr_set, WriteSet);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After WriteSet ConvertIn: return_code=%d maxfd=%d wr_set_addr=%p\\n\", (int)return_code, maxfd, (void *)&wr_set);\n            fflush(logf);\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Early RETURN (WriteSet ConvertIn failed): %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n            return return_code;\n        }\n    }\n\n    if (maxfd >= 0)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_DoSelect: maxfd=%d msecs=%d rd_set_addr=%p wr_set_addr=%p\\n\", maxfd, (int)msecs, (void *)&rd_set, (void *)&wr_set);\n            fflush(logf);\n        }\n        return_code = OS_DoSelect(maxfd, &rd_set, &wr_set, msecs);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Returned from OS_DoSelect: return_code=%d\\n\", (int)return_code);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        /*\n         * This return code will be used if the set(s) were\n         * both empty/NULL or otherwise did not contain valid filehandles.\n         */\n        return_code = OS_ERR_INVALID_ID;\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No valid fds found: returning OS_ERR_INVALID_ID (%d)\\n\", (int)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (ReadSet != NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Converting out ReadSet from rd_set=%p\\n\", (void *)&rd_set);\n                fflush(logf);\n            }\n            OS_FdSet_ConvertOut_Impl(&rd_set, ReadSet);\n        }\n        if (WriteSet != NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Converting out WriteSet from wr_set=%p\\n\", (void *)&wr_set);\n                fflush(logf);\n            }\n            OS_FdSet_ConvertOut_Impl(&wr_set, WriteSet);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_SelectMultiple_Impl EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}