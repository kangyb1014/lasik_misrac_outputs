{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur if the OS_DEBUG facility ultimately invokes OS_printf. In OS_printf() the first branch (when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER) calls OS_DEBUG(\"BUG: ... %s\", String). If OS_DEBUG is implemented in terms of OS_printf (a common pattern), this yields OS_printf -> OS_DEBUG -> OS_printf, i.e. indirect self-call and thus a violation of MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2480.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketConnect code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketConnect with it.\n  - Your function must have the exact same signature as OS_SocketConnect.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketConnect to check logs.\n  - Your function MUST preserve the original logic of OS_SocketConnect as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketConnect will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Open log file for appending control-flow and state information. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_SocketConnect: sock_id=%ld Addr=%p Timeout=%ld\\n\",\n                    (long)sock_id, (const void *)Addr, (long)Timeout);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %ld for sock_id=%ld\\n\", (long)return_code, (long)sock_id);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and key fields used in branch decisions */\n        {\n            FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n            if (log != NULL)\n            {\n                /* Print the address of the token variable (stack location) and the stream pointer */\n                fprintf(log, \"token_addr=%p stream=%p socket_domain=%ld socket_type=%ld stream_state=0x%lx\\n\",\n                        (void *)&token,\n                        (void *)stream,\n                        (long)stream->socket_domain,\n                        (long)stream->socket_type,\n                        (unsigned long)stream->stream_state);\n                fclose(log);\n            }\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log the incorrect object type branch */\n            {\n                FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: socket_domain == OS_SocketDomain_INVALID -> OS_ERR_INCORRECT_OBJ_TYPE\\n\");\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            {\n                FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"BRANCH: stream socket already connected (stream_state=0x%lx) -> OS_ERR_INCORRECT_OBJ_STATE\\n\",\n                            (unsigned long)stream->stream_state);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log that we are about to call the implementation function which may invoke OS_PRINTF/OS_DEBUG */\n            {\n                FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"CALL: OS_SocketConnect_Impl(&token, Addr=%p, Timeout=%ld)\\n\", (const void *)Addr, (long)Timeout);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            /* Log the return from the implementation */\n            {\n                FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RETURN from OS_SocketConnect_Impl: return_code=%ld\\n\", (long)return_code);\n                    fclose(log);\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                /* Log the stream_state update */\n                {\n                    FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UPDATE: stream_state now 0x%lx after successful connect\\n\", (unsigned long)stream->stream_state);\n                        fclose(log);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released */\n        {\n            FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"INFO: OS_ObjectIdRelease called for sock_id=%ld\\n\", (long)sock_id);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *log = fopen(\"/tmp/logs/2480.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_SocketConnect: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}