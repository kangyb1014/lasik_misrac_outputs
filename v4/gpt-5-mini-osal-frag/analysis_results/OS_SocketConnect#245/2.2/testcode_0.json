{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'sockopt = 0;' is executed immediately before a call to getsockopt() which will write into sockopt on success, and on error the code path already detects failure via os_status < 0. Thus the initialization of sockopt has no effect on program behaviour and can be removed without changing results. The other two operations (setting slen and calling getsockopt) are required. Therefore the redundant initialization constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2488.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketConnect code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketConnect with it.\n  - Your function must have the exact same signature as OS_SocketConnect.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketConnect to check logs.\n  - Your function MUST preserve the original logic of OS_SocketConnect as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketConnect will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n    FILE                        *logf = NULL;\n\n    /* Prototype for mkdir to allow creation of /tmp/logs if it does not exist.\n       Declared here to avoid adding headers to the surrounding file. */\n    int mkdir(const char *path, unsigned int mode);\n\n    /* Attempt to open the requested log file. If the containing directory is\n       missing try to create it and open again. */\n    logf = fopen(\"/tmp/logs/2488.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* best-effort create directory, ignore result */\n        (void)mkdir(\"/tmp/logs\", 0777U);\n        logf = fopen(\"/tmp/logs/2488.txt\", \"a\");\n    }\n\n    if (logf != NULL)\n    {\n        (void)fprintf(logf, \"OS_SocketConnect ENTER: sock_id=%d Addr=%p Timeout=%d\\n\",\n                      (int)sock_id, (const void *)Addr, (int)Timeout);\n        (void)fflush(logf);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    if (logf != NULL)\n    {\n        (void)fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        (void)fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (logf != NULL)\n        {\n            (void)fprintf(logf, \"stream ptr=%p socket_domain=%d socket_type=%d stream_state=0x%08x\\n\",\n                          (void *)stream,\n                          (int)stream->socket_domain,\n                          (int)stream->socket_type,\n                          (unsigned int)stream->stream_state);\n            (void)fflush(logf);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            if (logf != NULL)\n            {\n                (void)fprintf(logf, \"branch: invalid domain -> OS_ERR_INCORRECT_OBJ_TYPE\\n\");\n                (void)fflush(logf);\n            }\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            if (logf != NULL)\n            {\n                (void)fprintf(logf, \"branch: stream already connected -> OS_ERR_INCORRECT_OBJ_STATE\\n\");\n                (void)fflush(logf);\n            }\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            if (logf != NULL)\n            {\n                (void)fprintf(logf, \"calling OS_SocketConnect_Impl...\\n\");\n                (void)fflush(logf);\n            }\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (logf != NULL)\n            {\n                (void)fprintf(logf, \"OS_SocketConnect_Impl returned %d\\n\", (int)return_code);\n                (void)fflush(logf);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                if (logf != NULL)\n                {\n                    (void)fprintf(logf, \"updated stream_state -> 0x%08x\\n\", (unsigned int)stream->stream_state);\n                    (void)fflush(logf);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (logf != NULL)\n    {\n        (void)fprintf(logf, \"OS_SocketConnect EXIT: return_code=%d\\n\", (int)return_code);\n        (void)fclose(logf);\n    }\n\n    return return_code;\n}\n"
}