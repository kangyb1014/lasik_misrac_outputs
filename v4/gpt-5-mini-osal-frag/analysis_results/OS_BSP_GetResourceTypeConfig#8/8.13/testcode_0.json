{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if OS_BSP_Global.ResoureConfig is declared as a pointer to a non-const type (for example: uint32 *ResoureConfig). In this function the array elements are only read, so the pointer should be to a const-qualified type (const uint32 *ResoureConfig or const uint32 ResoureConfig[]). If ResoureConfig is instead an array of non-const uint32 (i.e. a non-pointer member) or already const-qualified, then Rule 8.13 would not be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_GetResourceTypeConfig code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_GetResourceTypeConfig code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_GetResourceTypeConfig with it.\n  - Your function must have the exact same signature as OS_BSP_GetResourceTypeConfig.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_GetResourceTypeConfig to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_GetResourceTypeConfig as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_GetResourceTypeConfig will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_GetResourceTypeConfig as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "uint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    /* Open log file for append. This will show entry, control path and state. */\n    FILE *log = fopen(\"/tmp/logs/1125.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_BSP_GetResourceTypeConfig(ResourceType=%u)\\n\", (unsigned)ResourceType);\n    }\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        /* Preserve original behavior: read the configuration value. */\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n\n        if (log)\n        {\n            /* Log pointer/array address and the retrieved element for evidence. */\n            fprintf(log, \"Branch: ResourceType < OS_OBJECT_TYPE_USER (true)\\n\");\n            fprintf(log, \"ResoureConfig base address (as pointer) = %p\\n\",\n                    (const void *)OS_BSP_Global.ResoureConfig);\n            fprintf(log, \"ResoureConfig[%u] = %u\\n\", (unsigned)ResourceType, (unsigned)ConfigOptionValue);\n\n            /* Dump a few leading elements (bounded by OS_OBJECT_TYPE_USER) to help reproduce scenario. */\n            unsigned i;\n            unsigned limit = (unsigned)OS_OBJECT_TYPE_USER;\n            if (limit > 4u) limit = 4u; /* limit output to first 4 entries to avoid excessive logging */\n            for (i = 0u; i < limit; ++i)\n            {\n                /* Accessing members exactly as original code would\u2014this mirrors runtime state. */\n                fprintf(log, \"ResoureConfig[%u] = %u\\n\", i, (unsigned)OS_BSP_Global.ResoureConfig[i]);\n            }\n        }\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n        if (log)\n        {\n            fprintf(log, \"Branch: ResourceType < OS_OBJECT_TYPE_USER (false). Returning 0.\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_BSP_GetResourceTypeConfig -> %u\\n\", (unsigned)ConfigOptionValue);\n        fclose(log);\n    }\n\n    return ConfigOptionValue;\n}\n"
}