{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default label within OS_SocketAddrToString_Impl and OS_SocketAddrGetPort_Impl the 'break;' statement immediately following 'return OS_ERR_BAD_ADDRESS;' is unreachable (dead code). The 'break;' can never be executed because control returns from the function before it; this constitutes unreachable code and thus violates MISRA C:2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1256.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CreateSocketName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CreateSocketName with it.\n  - Your function must have the exact same signature as OS_CreateSocketName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CreateSocketName to check logs.\n  - Your function MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CreateSocketName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n    FILE *log = fopen(\"/tmp/logs/1256.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_CreateSocketName: token=%p Addr=%p parent_name=%p (%s)\\n\",\n                (void *)token, (void *)Addr, (void *)parent_name, (parent_name) ? parent_name : \"(null)\");\n        fflush(log);\n    }\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"Got sock=%p\\n\", (void *)sock);\n        if (sock)\n        {\n            fprintf(log, \"Initial stream_name=\\\"%s\\\"\\n\", sock->stream_name);\n        }\n        fflush(log);\n    }\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrToString_Impl returned failure, zeroing stream_name\\n\");\n            fflush(log);\n        }\n        sock->stream_name[0] = 0;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"After ToString, stream_name=\\\"%s\\\"\\n\", sock->stream_name);\n        fflush(log);\n    }\n\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrGetPort_Impl returned OS_SUCCESS, port=%u, current_len=%zu\\n\",\n                    (unsigned int)port, len);\n            fflush(log);\n        }\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n        if (log)\n        {\n            fprintf(log, \"After appending port, stream_name=\\\"%s\\\"\\n\", sock->stream_name);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrGetPort_Impl returned failure (no port appended)\\n\");\n            fflush(log);\n        }\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        if (log)\n        {\n            fprintf(log, \"Appending parent_name=\\\"%s\\\" at len=%zu\\n\", parent_name, len);\n            fflush(log);\n        }\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n        if (log)\n        {\n            fprintf(log, \"After appending parent, stream_name=\\\"%s\\\"\\n\", sock->stream_name);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_CreateSocketName: final stream_name=\\\"%s\\\"\\n\", sock->stream_name);\n        fclose(log);\n    }\n}\n"
}