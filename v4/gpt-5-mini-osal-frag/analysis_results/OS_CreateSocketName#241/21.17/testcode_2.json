{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name contains no NUL within sizeof(sock->stream_name) (OS_strnlen returns sizeof(sock->stream_name)), then &sock->stream_name[len] is a pointer one-past-the-end and the remaining size becomes 0. Passing that pointer/size to snprintf can result in accesses beyond the bounds of the stream_name buffer (undefined behavior). Even though OS_SocketAddrToString_Impl normally NUL-terminates or sets [0]=0, the code as written allows the len==sizeof case and thus can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CreateSocketName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CreateSocketName with it.\n  - Your function must have the exact same signature as OS_CreateSocketName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CreateSocketName to check logs.\n  - Your function MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CreateSocketName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    /* Retrieve the socket record as before */\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    /* Open log file for append. If this fails, we still continue normal execution. */\n    FILE *log = fopen(\"/tmp/logs/1253.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_CreateSocketName ENTER token=%p sock=%p Addr=%p parent_name=%p\\n\",\n                (const void *)token, (void *)sock, (const void *)Addr, (const void *)parent_name);\n    }\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrToString_Impl FAILED; setting stream_name[0]=0\\n\");\n        }\n        sock->stream_name[0] = 0;\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrToString_Impl succeeded\\n\");\n        }\n    }\n\n    /* Capture buffer size and safe length (OS_strnlen) for logging. */\n    size_t buf_size = sizeof(sock->stream_name);\n    if (log)\n    {\n        fprintf(log, \"buffer size = %zu\\n\", buf_size);\n    }\n\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        size_t remaining = (len <= buf_size) ? (buf_size - len) : 0; /* defensive, though len should be <= buf_size */\n\n        if (log)\n        {\n            fprintf(log, \"Port branch: len=%zu remaining=%zu stream_name_addr=%p one_past=%p\\n\",\n                    len, remaining, (void *)sock->stream_name, (void *)&sock->stream_name[len]);\n\n            /* Dump up to the first 32 bytes of the buffer in hex to avoid accidentally reading past a non-NUL-terminated string. */\n            size_t dump = (len < 32) ? len : 32;\n            fprintf(log, \"stream_name[0..%zu] hex:\", dump);\n            for (size_t i = 0; i < dump; ++i)\n            {\n                fprintf(log, \" %02x\", (unsigned char)sock->stream_name[i]);\n            }\n            if (len > dump)\n            {\n                fprintf(log, \" ...\");\n            }\n            fprintf(log, \"\\n\");\n        }\n\n        /* Perform the same snprintf call as original code, but capture the return for logging. */\n        int rc = snprintf(&sock->stream_name[len], (size_t)(buf_size - len), \":%u\", (unsigned int)port);\n        if (log)\n        {\n            fprintf(log, \"snprintf returned %d (attempted to append port \":%u\")\\n\", rc, (unsigned int)port);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketAddrGetPort_Impl did not return OS_SUCCESS; skipping port append\\n\");\n        }\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        size_t remaining = (len <= buf_size) ? (buf_size - len) : 0;\n\n        if (log)\n        {\n            fprintf(log, \"Parent branch: len=%zu remaining=%zu stream_name_addr=%p one_past=%p parent_name=%p\\n\",\n                    len, remaining, (void *)sock->stream_name, (void *)&sock->stream_name[len], (const void *)parent_name);\n        }\n\n        int rc = snprintf(&sock->stream_name[len], (size_t)(buf_size - len), \"-%s\", parent_name);\n        if (log)\n        {\n            fprintf(log, \"snprintf returned %d (attempted to append -%s)\\n\", rc, parent_name);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_CreateSocketName EXIT stream_name final len=%zu\\n\", OS_strnlen(sock->stream_name, sizeof(sock->stream_name)));\n        fclose(log);\n    }\n}\n"
}