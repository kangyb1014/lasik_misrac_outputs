{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name does not contain a NUL within sizeof(sock->stream_name) then len == sizeof(sock->stream_name). The code then passes &sock->stream_name[len] (a pointer one-past-the-end of the array) and a size of zero to snprintf. Although C permits creating a one-past-the-end pointer, passing it as the destination to a formatting/string function risks the function accessing memory beyond the object bounds (some implementations could still dereference the pointer or otherwise access it), so this can result in out-of-bounds accesses. Therefore the usage can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CreateSocketName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CreateSocketName:\n```c\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CreateSocketName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CreateSocketName with it.\n  - Your function must have the exact same signature as OS_CreateSocketName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CreateSocketName to check logs.\n  - Your function MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CreateSocketName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CreateSocketName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    /* Local logging: create directory and open file for append. Includes inside\n       function to keep this replacement self-contained and not rely on external\n       modifications. */\n    {\n        /* Include headers inside function to ensure declarations are available */\n        #include <stdio.h>\n        #include <sys/stat.h>\n        #include <errno.h>\n        #include <string.h>\n        #include <stdlib.h>\n\n        FILE *logf = NULL;\n        int mkdir_rc = 0;\n\n        /* Try to ensure the logs directory exists. Ignore errors if it already exists. */\n        mkdir_rc = mkdir(\"/tmp/logs\", 0777);\n        /* Open the log file; fallback path is not used because requirement is /tmp/logs/1253.txt */\n        logf = fopen(\"/tmp/logs/1253.txt\", \"a\");\n\n        /* Record function entry early so we always have evidence the function was reached. */\n        if (logf)\n        {\n            fprintf(logf, \"OS_CreateSocketName: entry (token=%p, Addr=%p, parent_name=%p)\\n\",\n                    (const void *)token, (const void *)Addr, (const void *)parent_name);\n            fflush(logf);\n        }\n\n        /* Acquire the socket record as in original implementation. */\n        sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n        if (logf)\n        {\n            fprintf(logf, \"  sock=%p, stream_name_addr=%p, sizeof(stream_name)=%zu\\n\",\n                    (const void *)sock,\n                    (const void *)&sock->stream_name[0],\n                    (size_t)sizeof(sock->stream_name));\n            /* Print a hexdump-ish prefix of the buffer to show whether it contains a NUL within bounds. */\n            {\n                size_t i, limit = sizeof(sock->stream_name) < 64 ? sizeof(sock->stream_name) : 64;\n                fprintf(logf, \"  stream_name[0..%zu]: \\\"\", limit ? limit - 1 : 0);\n                for (i = 0; i < limit; ++i)\n                {\n                    unsigned char c = (unsigned char)sock->stream_name[i];\n                    if (c >= 32 && c < 127)\n                        fputc(c, logf);\n                    else if (c == '\\0')\n                        fputs(\"\\\\0\", logf);\n                    else\n                        fprintf(logf, \"\\\\x%02x\", c);\n                }\n                fputs(\"\\\"\\n\", logf);\n                fflush(logf);\n            }\n        }\n\n        /* Call the original implementation for address-to-string conversion. */\n        if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n        {\n            if (logf)\n            {\n                fprintf(logf, \"  OS_SocketAddrToString_Impl: failed, setting stream_name[0] = 0\\n\");\n                fflush(logf);\n            }\n            sock->stream_name[0] = 0;\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"  OS_SocketAddrToString_Impl: success\\n\");\n                fflush(logf);\n            }\n        }\n\n        /* If we can get a port, append it. Log the lengths and the exact snprintf parameters\n           used so the one-past-the-end destination scenario can be observed. */\n        if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n        {\n            len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n            if (logf)\n            {\n                size_t buf_sz = sizeof(sock->stream_name);\n                size_t remaining = (len <= buf_sz) ? (buf_sz - len) : 0;\n                fprintf(logf, \"  before append port: len=%zu, buf_sz=%zu, remaining=%zu\\n\",\n                        len, buf_sz, remaining);\n                fprintf(logf, \"  snprintf dest_ptr=%p, size=%zu, format=\\\":%%u\\\", port=%u\\n\",\n                        (void *)&sock->stream_name[len], remaining, (unsigned)port);\n                fflush(logf);\n            }\n\n            /* This is the original snprintf call; keep it exactly as in original code. */\n            snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n\n            if (logf)\n            {\n                /* Log after-call state, including whether len equaled the buffer size (one-past scenario). */\n                size_t new_len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n                fprintf(logf, \"  after append port: new_len=%zu, buf_sz=%zu\\n\",\n                        new_len, (size_t)sizeof(sock->stream_name));\n                /* Print a short preview again. */\n                size_t i, limit = sizeof(sock->stream_name) < 64 ? sizeof(sock->stream_name) : 64;\n                fprintf(logf, \"  stream_name[0..%zu]: \\\"\", limit ? limit - 1 : 0);\n                for (i = 0; i < limit; ++i)\n                {\n                    unsigned char c = (unsigned char)sock->stream_name[i];\n                    if (c >= 32 && c < 127)\n                        fputc(c, logf);\n                    else if (c == '\\0')\n                        fputs(\"\\\\0\", logf);\n                    else\n                        fprintf(logf, \"\\\\x%02x\", c);\n                }\n                fputs(\"\\\"\\n\", logf);\n                fflush(logf);\n            }\n        }\n\n        /* If a parent name is provided, append it. Log parameters similarly to above. */\n        if (parent_name)\n        {\n            len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n            if (logf)\n            {\n                size_t buf_sz = sizeof(sock->stream_name);\n                size_t remaining = (len <= buf_sz) ? (buf_sz - len) : 0;\n                fprintf(logf, \"  before append parent: len=%zu, buf_sz=%zu, remaining=%zu, parent_name=\\\"%s\\\"\\n\",\n                        len, buf_sz, remaining, parent_name);\n                fprintf(logf, \"  snprintf dest_ptr=%p, size=%zu, format=\\\"-%s\\\"\\n\",\n                        (void *)&sock->stream_name[len], remaining, parent_name);\n                fflush(logf);\n            }\n\n            /* Original behavior preserved */\n            snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n\n            if (logf)\n            {\n                size_t new_len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n                fprintf(logf, \"  after append parent: new_len=%zu, buf_sz=%zu\\n\",\n                        new_len, (size_t)sizeof(sock->stream_name));\n                size_t i, limit = sizeof(sock->stream_name) < 64 ? sizeof(sock->stream_name) : 64;\n                fprintf(logf, \"  stream_name[0..%zu]: \\\"\", limit ? limit - 1 : 0);\n                for (i = 0; i < limit; ++i)\n                {\n                    unsigned char c = (unsigned char)sock->stream_name[i];\n                    if (c >= 32 && c < 127)\n                        fputc(c, logf);\n                    else if (c == '\\0')\n                        fputs(\"\\\\0\", logf);\n                    else\n                        fprintf(logf, \"\\\\x%02x\", c);\n                }\n                fputs(\"\\\"\\n\", logf);\n                fflush(logf);\n            }\n        }\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_CreateSocketName: exit\\n\\n\");\n            fclose(logf);\n        }\n    }\n}\n"
}