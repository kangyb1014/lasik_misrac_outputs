{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read beyond the bounds of the stream_name array (and/or beyond Filename) if either string is not NUL-terminated. In particular, if stream->stream_name contains OS_MAX_PATH_LEN non-NUL characters (no terminating '\\0' within the array), strcmp will continue reading past the OS_stream_table entry into adjacent memory, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CloseFileByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CloseFileByName with it.\n  - Your function must have the exact same signature as OS_CloseFileByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CloseFileByName to check logs.\n  - Your function MUST preserve the original logic of OS_CloseFileByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CloseFileByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE                       *log = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log file for appending control-flow and state information. */\n    log = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CloseFileByName: entered. Filename ptr=%p\\n\", (void *)Filename);\n        fflush(log);\n    }\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  Iter token=%u, stream_ptr=%p, socket_domain=%d\\n\",\n                    (unsigned int)iter.token, (void *)stream, (int)stream->socket_domain);\n            fflush(log);\n        }\n\n        /* Preserve the original short-circuit semantics: only call strcmp when socket_domain matches. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            int cmp_result = 0;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"  About to call strcmp(stream->stream_name, Filename) [may read bytes until NUL]\\n\");\n                fflush(log);\n            }\n\n            /* This is the original comparison which can read beyond bounds if strings are not NUL-terminated. */\n            cmp_result = strcmp(stream->stream_name, Filename);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"  strcmp returned %d for stream_ptr=%p\\n\", cmp_result, (void *)stream);\n                fflush(log);\n            }\n\n            if (cmp_result == 0)\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                if (log != NULL)\n                {\n                    fprintf(log, \"  ProcessEntry returned close_code=%ld for token=%u\\n\", (long)close_code, (unsigned int)iter.token);\n                    fflush(log);\n                }\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    return_code = close_code;\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"  Updated return_code=%ld\\n\", (long)return_code);\n                        fflush(log);\n                    }\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_CloseFileByName: exiting with return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}