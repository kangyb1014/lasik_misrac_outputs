{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator field is declared as void *arg, which discards const-qualification when a caller wants to pass a pointer to immutable data (for example a const char * Filename or other const context pointer). Because the code never needs to modify the object pointed to by arg (it is only forwarded to callback functions), the pointer could/should be declared const void *arg (and the callback prototypes adjusted to accept const void *). As written, assigning a const-qualified pointer to iter.arg would implicitly discard const, violating the intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CloseFileByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CloseFileByName with it.\n  - Your function must have the exact same signature as OS_CloseFileByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CloseFileByName to check logs.\n  - Your function MUST preserve the original logic of OS_CloseFileByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CloseFileByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = (FILE *)0;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log for tracing control flow and state relevant to the iterator/arg constness scenario */\n    log = fopen(\"/tmp/logs/625.txt\", \"a\");\n    if (log != (FILE *)0)\n    {\n        /* Log entry and Filename pointer/value */\n        fprintf(log, \"Entered OS_CloseFileByName: Filename ptr=%p\\n\", (void *)Filename);\n        if (Filename != (const char *)0)\n        {\n            /* Print a limited preview of the filename to avoid very long output */\n            fprintf(log, \"  Filename value=\\\"%s\\\"\\n\", Filename);\n        }\n        fflush(log);\n    }\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (log != (FILE *)0)\n        {\n            /* Log iterator token/address and stream details observed at this step */\n            fprintf(log,\n                    \"Iterator step: iter_addr=%p token=%ld stream_ptr=%p stream_name_ptr=%p socket_domain=%d\\n\",\n                    (void *)&iter,\n                    (long)iter.token,\n                    (void *)stream,\n                    (void *)(stream ? stream->stream_name : (char *)0),\n                    (int)(stream ? stream->socket_domain : -1));\n            if (stream != (OS_stream_internal_record_t *)0 && stream->stream_name != (char *)0)\n            {\n                fprintf(log, \"  stream_name=\\\"%s\\\"\\n\", stream->stream_name);\n            }\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log != (FILE *)0)\n            {\n                fprintf(log, \"  Match: stream->stream_name matches Filename. Calling OS_ObjectIdIteratorProcessEntry for token=%ld\\n\", (long)iter.token);\n                fflush(log);\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (log != (FILE *)0)\n            {\n                fprintf(log, \"  OS_ObjectIdIteratorProcessEntry returned close_code=%d\\n\", (int)close_code);\n                fflush(log);\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                if (log != (FILE *)0)\n                {\n                    fprintf(log, \"  Updating return_code: old=%d new=%d\\n\", (int)return_code, (int)close_code);\n                    fflush(log);\n                }\n                return_code = close_code;\n            }\n        }\n    }\n\n    if (log != (FILE *)0)\n    {\n        fprintf(log, \"Iterator finished. About to destroy iterator. Final return_code=%d\\n\", (int)return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}