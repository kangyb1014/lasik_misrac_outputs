{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ForEachFilterCreator the parameter ref is a void * and is assigned to a non-const pointer: OS_creator_filter_t *filter = ref;. The function only reads filter->creator_id (no modification), so per MISRA C:2023 Rule 8.13 the pointer should be to a const-qualified type (e.g. const OS_creator_filter_t *filter or the parameter should be const void *ref). The current non-const declaration therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/685.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ForEachFilterCreator code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ForEachFilterCreator with it.\n  - Your function must have the exact same signature as OS_ForEachFilterCreator.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ForEachFilterCreator to check logs.\n  - Your function MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ForEachFilterCreator will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* Include standard IO headers here so the function is self-contained for logging. */\n    #include <stdio.h>\n    #include <errno.h>\n\n    OS_creator_filter_t *filter = ref;\n\n    /* Open log file in append mode to record control flow and state for reproducing the violation. */\n    FILE *log = fopen(\"/tmp/logs/685.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ForEachFilterCreator entered\\n\");\n        fprintf(log, \"  ref=%p token=%p obj=%p\\n\", ref, (const void *)token, (const void *)obj);\n\n        /* Defensive checks and evaluation of the same predicates used in the original logic. */\n        int active_valid = 0;\n        int equal_any = 0;\n        int equal_creator = 0;\n\n        if (obj == NULL)\n        {\n            fprintf(log, \"  WARNING: obj is NULL\\n\");\n        }\n        else\n        {\n            active_valid = (int)OS_ObjectIdIsValid(obj->active_id);\n            fprintf(log, \"  obj->active_id valid=%d\\n\", active_valid);\n        }\n\n        if (filter == NULL)\n        {\n            fprintf(log, \"  WARNING: filter (cast from ref) is NULL\\n\");\n        }\n        else\n        {\n            /* Record the result of comparisons rather than attempting to print opaque ID internals. */\n            equal_any = (int)OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY);\n            fprintf(log, \"  OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY)=%d\\n\", equal_any);\n\n            if (obj != NULL)\n            {\n                equal_creator = (int)OS_ObjectIdEqual(obj->creator, filter->creator_id);\n                fprintf(log, \"  OS_ObjectIdEqual(obj->creator, filter->creator_id)=%d\\n\", equal_creator);\n            }\n        }\n\n        /* Log the final computed boolean (same predicate as original code). */\n        int computed = active_valid && (equal_any || equal_creator);\n        fprintf(log, \"  computed result = %d\\n\", computed);\n        fflush(log);\n        fclose(log);\n    }\n    else\n    {\n        /* If file open fails, emit a minimal diagnostic to stderr so the test harness can see something. */\n        fprintf(stderr, \"OS_ForEachFilterCreator: failed to open '/tmp/logs/685.txt' errno=%d\\n\", errno);\n    }\n\n    /* Preserve original logic exactly. */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n"
}