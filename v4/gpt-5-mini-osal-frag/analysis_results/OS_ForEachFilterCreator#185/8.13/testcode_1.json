{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as void * but is only used for read access (assigned to OS_creator_filter_t *filter and only read ->creator_id). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Here the function does not modify the object pointed to by ref, so the signature should use a const-qualified pointer (e.g. const void *ref or const OS_creator_filter_t *ref and const OS_creator_filter_t *filter = ref). The other parameters (token, obj) are already const-qualified and are fine.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/685.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ForEachFilterCreator code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ForEachFilterCreator with it.\n  - Your function must have the exact same signature as OS_ForEachFilterCreator.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ForEachFilterCreator to check logs.\n  - Your function MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ForEachFilterCreator will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* Ensure standard I/O prototypes are available for logging. Including inside\n     * the function keeps this replacement self-contained. */\n    #include <stdio.h>\n    #include <stdint.h>\n\n    OS_creator_filter_t *filter = (OS_creator_filter_t *)ref;\n\n    /*\n     * Preserve original short-circuit evaluation:\n     * 1) Check validity\n     * 2) If valid, check if filter->creator_id == ANY\n     * 3) If not ANY, check if obj->creator == filter->creator_id\n     */\n    int valid = 0;\n    int equal_any = -1;     /* -1 indicates not evaluated */\n    int equal_creator = -1; /* -1 indicates not evaluated */\n    bool result = false;\n\n    /* Evaluate validity first (same as original) */\n    valid = OS_ObjectIdIsValid(obj->active_id);\n    if (valid)\n    {\n        equal_any = OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY);\n        if (equal_any)\n        {\n            result = true;\n        }\n        else\n        {\n            equal_creator = OS_ObjectIdEqual(obj->creator, filter->creator_id);\n            result = (equal_creator != 0);\n        }\n    }\n    else\n    {\n        result = false;\n    }\n\n    /* Append a concise, reproducible trace to the log file for debugging. */\n    do\n    {\n        FILE *log = fopen(\"/tmp/logs/685.txt\", \"a\");\n        if (log == NULL)\n        {\n            break; /* Never fail the function due to logging problems */\n        }\n\n        /* Log pointers and evaluation outcomes. Use %p for pointers and %d\n         * for the integer results from the OS_ObjectId* helpers. */\n        fprintf(log, \"OS_ForEachFilterCreator: entry ref=%p filter=%p token=%p obj=%p\\n\",\n                (void *)ref, (void *)filter, (const void *)token, (const void *)obj);\n        fprintf(log, \"  active_valid=%d equal_any=%d equal_creator=%d result=%d\\n\",\n                valid, equal_any, equal_creator, result ? 1 : 0);\n\n        /* For additional context, log whether we exercised short-circuit paths */\n        if (!valid)\n        {\n            fprintf(log, \"  path: active_id invalid -> early-false\\n\");\n        }\n        else if (equal_any == 1)\n        {\n            fprintf(log, \"  path: creator == ANY -> true (short-circuit)\\n\");\n        }\n        else\n        {\n            fprintf(log, \"  path: compared obj->creator with filter->creator_id -> %d\\n\", equal_creator);\n        }\n\n        fclose(log);\n    } while (0);\n\n    return result;\n}\n"
}