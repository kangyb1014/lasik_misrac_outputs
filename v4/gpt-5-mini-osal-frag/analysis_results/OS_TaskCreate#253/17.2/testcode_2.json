{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SharedGlobalVars.EventHandler is (perhaps accidentally) assigned to OS_NotifyEvent or to another function that eventually calls OS_NotifyEvent, then OS_NotifyEvent will invoke the function pointer which will call back into OS_NotifyEvent, producing indirect recursion (infinite recursion/stack overflow). For example: OS_SharedGlobalVars.EventHandler = OS_NotifyEvent; then calling OS_NotifyEvent(...) calls EventHandler(...)->OS_NotifyEvent(...), violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2440.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskCreate with it.\n  - Your function must have the exact same signature as OS_TaskCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Minimal probe: log entry and the parameters that are relevant to the indirect-recursion scenario. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Note: function_pointer is logged to help detect if it points to OS_NotifyEvent (or similar). */\n            fprintf(log, \"OS_TaskCreate ENTER: task_name=\\\"%s\\\" function_pointer=%p stack_pointer=%p stack_size=%zu priority=%u flags=0x%08x\\n\",\n                    task_name ? task_name : \"(null)\", (void *)function_pointer, (void *)stack_pointer, stack_size, (unsigned)priority, (unsigned)flags);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskCreate: OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log token/task state immediately after allocation and table lookup */\n        {\n            FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n            if (log != NULL)\n            {\n                /* Print addresses to help correlate with other logs at runtime */\n                fprintf(log, \"OS_TaskCreate: token_addr=%p task_ptr=%p\\n\", (void *)&token, (void *)task);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state just before calling the OS-specific implementation. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskCreate: prepared task record: entry_fn=%p stack_size=%zu priority=%u flags=0x%08x\\n\",\n                        (void *)task->entry_function_pointer, task->stack_size, (unsigned)task->priority, (unsigned)flags);\n                fclose(log);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskCreate: OS_TaskCreate_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskCreate: OS_ObjectIdFinalizeNew final return %ld task_id_ptr=%p\\n\", (long)return_code, (void *)task_id);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *log = fopen(\"/tmp/logs/2440.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskCreate EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}