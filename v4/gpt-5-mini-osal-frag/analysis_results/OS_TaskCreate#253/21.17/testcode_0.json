{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If that macro uses string.h functions unbounded (for example strlen) to check the length, or if the caller passes task_name pointing to a char buffer that is not NUL-terminated within its allocated size, the string function will read past the end of the object. In addition OS_OBJECT_INIT uses strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1) which will copy up to that many bytes from nameval and also can read beyond the source if it is not NUL-terminated. Example violation: caller provides a 20-byte buffer filled with non-zero bytes (no terminating '\\0'); OS_CHECK_APINAME calling strlen(name) will over-read the buffer (and strncpy later may also read out-of-bounds), thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskCreate with it.\n  - Your function must have the exact same signature as OS_TaskCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *log = NULL;\n\n    /* Minimal entry log so that the function invocation is recorded. Do not read the contents\n     * of task_name here to avoid performing any unbounded reads that could introduce new\n     * out-of-bounds behavior. Only record the pointer value and other scalar parameters. */\n    log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER OS_TaskCreate: task_id=%p, task_name=%p, function_pointer=%p, stack_pointer=%p, stack_size=%zu, priority=%u, flags=0x%08x\\n\",\n                (void *)task_id, (const void *)task_name, (const void *)function_pointer, (void *)stack_pointer, stack_size, (unsigned)priority, (unsigned)flags);\n        fflush(log);\n        fclose(log);\n        log = NULL;\n    }\n\n    /* Preserve original parameter checks and behavior */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt */\n    log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n        fflush(log);\n        fclose(log);\n        log = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log that we obtained a task table entry and its pointer */\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Allocated token (addr of local token variable)=%p, task table entry ptr=%p\\n\",\n                    (void *)&token, (void *)task);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Reset the table entry and save the name */\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_OBJECT_INIT for token (addr)=%p with nameval=%p\\n\", (void *)&token, (const void *)task_name);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        /* Record the internal record state after initialization (only scalar fields) */\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_OBJECT_INIT: task=%p, stack_size=%zu, priority=(stored later)\\n\",\n                    (void *)task, stack_size);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_TaskCreate_Impl with token (addr)=%p, flags=0x%08x\\n\", (void *)&token, (unsigned)flags);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskCreate_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned %ld, final task_id=%p\\n\", (long)return_code, (void *)task_id);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n    }\n\n    /* Final exit log */\n    log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_TaskCreate: return_code=%ld\\n\", (long)return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}