{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If OS_CHECK_STRING internally uses standard string functions such as strlen() to validate the name length, a caller that provides a buffer of exactly OS_MAX_API_NAME characters without a terminating NUL (or a non-NUL-terminated memory region) will cause strlen() to read past the end of the buffer. Example: char name[OS_MAX_API_NAME]; /* filled with OS_MAX_API_NAME bytes, no '\\0' */ OS_TaskCreate(..., name, ...); -> OS_CHECK_APINAME -> strlen(name) will access beyond name[] bounds. Therefore this usage can violate MISRA C 2023 Rule 21.17 unless OS_CHECK_STRING is implemented to avoid unbounded reads (for example by using a bounded-scan routine that stops after OS_MAX_API_NAME characters or by first ensuring the input is NUL-terminated).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskCreate with it.\n  - Your function must have the exact same signature as OS_TaskCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Helper: append log lines about control flow and state to the required log file. */\n    static void os_taskcreate_log(const char *stage,\n                                  const char *task_name_local,\n                                  size_t stack_size_local,\n                                  osal_priority_t priority_local,\n                                  uint32 flags_local,\n                                  int32 retcode_local,\n                                  const OS_object_token_t *token_local)\n    {\n        FILE *f = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* best-effort logging only */\n        }\n\n        fprintf(f, \"OS_TaskCreate: %s\\n\", stage ? stage : \"(null)\");\n        fprintf(f, \"  params: task_name_ptr=%p, stack_size=%zu, priority=%u, flags=0x%08x, return_code=%ld, token_ptr=%p\\n\",\n                (void *)task_name_local,\n                stack_size_local,\n                (unsigned)priority_local,\n                (unsigned)flags_local,\n                (long)retcode_local,\n                (void *)token_local);\n\n        /* Attempt a bounded, best-effort inspection of the task_name contents.\n         * NOTE: This reads at most INSPECT_LIMIT bytes to avoid unbounded reads.\n         * The code must not assume the string is NUL-terminated.\n         */\n        if (task_name_local != NULL)\n        {\n            const size_t INSPECT_LIMIT = 256U;\n            size_t i;\n            fprintf(f, \"  name_bytes: \");\n            for (i = 0U; i < INSPECT_LIMIT; ++i)\n            {\n                unsigned char c = (unsigned char)task_name_local[i];\n                /* Print printable ASCII as char, otherwise as hex. */\n                if (c >= 0x20 && c <= 0x7e)\n                {\n                    fprintf(f, \"%c\", (char)c);\n                }\n                else\n                {\n                    fprintf(f, \"\\\\x%02x\", c);\n                }\n                if (c == 0U)\n                {\n                    fprintf(f, \" [NUL at %zu]\", i);\n                    break;\n                }\n            }\n            if (i == INSPECT_LIMIT)\n            {\n                fprintf(f, \" [truncated after %zu bytes]\", INSPECT_LIMIT);\n            }\n            fprintf(f, \"\\n\");\n        }\n\n        fclose(f);\n    }\n\n    /* Log entry (do not dereference task_name yet) */\n    os_taskcreate_log(\"entry\", task_name, stack_size, priority, flags, -1, &token);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n\n    /* Log just before name/API checks to record pointer and to show control flow. */\n    os_taskcreate_log(\"before_name_check\", task_name, stack_size, priority, flags, -1, &token);\n\n    OS_CHECK_APINAME(task_name);\n\n    /* Log after name check. If the name check performed an unbounded read (e.g. strlen),\n     * this log might not execute in case of a crash; that outcome is exactly what\n     * other agents may use as evidence of the violation scenario. */\n    os_taskcreate_log(\"after_name_check\", task_name, stack_size, priority, flags, -1, &token);\n\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log the result of allocation attempt and token state. */\n    os_taskcreate_log(\"after_ObjectIdAllocateNew\", task_name, stack_size, priority, flags, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        os_taskcreate_log(\"before_Impl\", task_name, stack_size, priority, flags, return_code, &token);\n        return_code = OS_TaskCreate_Impl(&token, flags);\n        os_taskcreate_log(\"after_Impl\", task_name, stack_size, priority, flags, return_code, &token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        os_taskcreate_log(\"after_FinalizeNew\", task_name, stack_size, priority, flags, return_code, &token);\n    }\n    else\n    {\n        /* Allocation failed; log the failure path. */\n        os_taskcreate_log(\"alloc_failed\", task_name, stack_size, priority, flags, return_code, &token);\n    }\n\n    return return_code;\n}\n"
}