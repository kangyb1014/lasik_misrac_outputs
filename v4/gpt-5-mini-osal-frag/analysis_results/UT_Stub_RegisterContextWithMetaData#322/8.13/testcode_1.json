{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nParamPtr is declared as 'const void *' but ArgPtr is (non-const) 'void *' so the assignment StubPtr->Data.Context.ArgPtr[...] = ParamPtr discards the const qualifier. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterContextWithMetaData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1685.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterContextWithMetaData:\n```c\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_RegisterContextWithMetaData code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_RegisterContextWithMetaData with it.\n  - Your function must have the exact same signature as UT_Stub_RegisterContextWithMetaData.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_RegisterContextWithMetaData to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_RegisterContextWithMetaData as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_RegisterContextWithMetaData will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_RegisterContextWithMetaData as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n    FILE *log = NULL;\n\n    /* Try to open the required log file; if that fails, fall back to /tmp/1685.txt */\n    log = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/1685.txt\", \"a\");\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"\\n---- UT_Stub_RegisterContextWithMetaData ENTRY ----\\n\");\n        fprintf(log, \"FuncKey=%u, Name=%p, ParamType=%d, ParamPtr=%p, ParamSize=%zu\\n\",\n                (unsigned)FuncKey, (const void *)Name, (int)ParamType, (const void *)ParamPtr, ParamSize);\n        fflush(log);\n    }\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry(callback_context) returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        if (log != NULL)\n        {\n            fprintf(log, \"No existing callback context entry, searching for unused slot\\n\");\n            fflush(log);\n        }\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetStubEntry(unused) returned StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Cannot set context - UT_MAX_FUNC_STUBS too low? About to call UtAssert_Abort\\n\");\n            fflush(log);\n            fclose(log);\n        }\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (log != NULL)\n        {\n            fprintf(log, \"Assigned FuncKey/EntryType on StubPtr=%p; current ArgCount=%u\\n\",\n                    (void *)StubPtr, (unsigned)StubPtr->Data.Context.ArgCount);\n            fflush(log);\n        }\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            /* Log value before assignment */\n            if (log != NULL)\n            {\n                void *old = NULL;\n                /* attempt to read old value only if within bounds */\n                old = StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount];\n                fprintf(log, \"Before assignment: ArgPtr[%u]=%p (will be overwritten with ParamPtr=%p)\\n\",\n                        (unsigned)StubPtr->Data.Context.ArgCount, old, (const void *)ParamPtr);\n                fflush(log);\n            }\n\n            /* This is the line referenced in the violation scenario: assignment from const void * to void * */\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"After assignment: ArgPtr[%u]=%p\\n\", (unsigned)StubPtr->Data.Context.ArgCount,\n                        (void *)StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount]);\n                fflush(log);\n            }\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Meta before name processing: MetaPtr=%p, Size=%zu, Type=%d, Name(in meta)=%p\\n\",\n                        (void *)MetaPtr, MetaPtr->Size, (int)MetaPtr->Type, (const void *)MetaPtr->Name);\n                fflush(log);\n            }\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n\n                if (log != NULL)\n                {\n                    /* Log the incoming name (print up to 256 chars or until NUL) */\n                    char buf[257];\n                    size_t i = 0;\n                    for (i = 0; i < 256 && Name[i] != '\\0'; ++i)\n                        buf[i] = Name[i];\n                    buf[i] = '\\0';\n                    fprintf(log, \"Name provided='%s' (addr=%p). Will process characters to strip '&' and whitespace.\\n\",\n                            buf, (const void *)Name);\n                    fflush(log);\n                }\n\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                            if (log != NULL)\n                            {\n                                fprintf(log, \"Found '&' at Name pointer; marking MetaPtr->Type as INDIRECT\\n\");\n                                fflush(log);\n                            }\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        if (log != NULL)\n                        {\n                            fprintf(log, \"Stopped trimming at character '%c' (0x%02x) at MetaPtr->Name=%p\\n\",\n                                    *MetaPtr->Name, (unsigned char)*MetaPtr->Name, (const void *)MetaPtr->Name);\n                            fflush(log);\n                        }\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"MetaPtr->Type was unspecified; set to DIRECT\\n\");\n                        fflush(log);\n                    }\n                }\n\n                if (log != NULL)\n                {\n                    /* Log the resulting name pointer and the first few chars */\n                    char buf2[257];\n                    size_t j = 0;\n                    const char *p = MetaPtr->Name ? MetaPtr->Name : \"\";\n                    for (j = 0; j < 256 && p[j] != '\\0'; ++j)\n                        buf2[j] = p[j];\n                    buf2[j] = '\\0';\n                    fprintf(log, \"Name after processing: '%s' (addr=%p). Meta Type=%d, Size=%zu\\n\",\n                            buf2, (const void *)MetaPtr->Name, (int)MetaPtr->Type, MetaPtr->Size);\n                    fflush(log);\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Incremented ArgCount, new value=%u\\n\", (unsigned)StubPtr->Data.Context.ArgCount);\n                fprintf(log, \"---- UT_Stub_RegisterContextWithMetaData EXIT (assigned) ----\\n\");\n                fclose(log);\n            }\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"ArgCount (%u) >= UT_STUBCONTEXT_MAXSIZE (%u) - not recording new context\\n\",\n                        (unsigned)StubPtr->Data.Context.ArgCount, (unsigned)UT_STUBCONTEXT_MAXSIZE);\n                fprintf(log, \"---- UT_Stub_RegisterContextWithMetaData EXIT (no room) ----\\n\");\n                fclose(log);\n            }\n        }\n    }\n}\n"
}