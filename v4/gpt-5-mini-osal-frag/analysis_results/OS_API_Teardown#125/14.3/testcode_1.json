{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe while loop uses the invariant controlling expression \"true\" (while (true)) but is not intended as an unconditional infinite loop \u2014 it relies on internal break conditions (ObjectCount == 0 || TryCount > 4) to exit. This does not fall under the allowed exception for invariants used to create infinite loops, so Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Teardown code that contains useful probe functions that print useful logs to a file \"/tmp/logs/649.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_API_Teardown:\n```c\nvoid OS_API_Teardown(void)\n{\n    /*\n     * This should delete any remaining user-created objects/tasks\n     */\n    OS_DeleteAllObjects();\n\n    /*\n     * This should cause the \"internal\" objects (e.g. console utility task)\n     * to exit, and will prevent any new objects from being created.\n     */\n    OS_ApplicationShutdown(true);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_API_Teardown code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_API_Teardown with it.\n  - Your function must have the exact same signature as OS_API_Teardown.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_API_Teardown to check logs.\n  - Your function MUST preserve the original logic of OS_API_Teardown as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_API_Teardown will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_API_Teardown as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_API_Teardown(void)\n{\n    /*\n     * This should delete any remaining user-created objects/tasks\n     * Preserve original behavior while adding logging probes to aid\n     * reproduction of control-flow/state for analysis.\n     */\n    FILE *log = fopen(\"/tmp/logs/649.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_API_Teardown: entered\\n\");\n        fflush(log);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_API_Teardown: calling OS_DeleteAllObjects()\\n\");\n        fflush(log);\n    }\n\n    /* Original call retained */\n    OS_DeleteAllObjects();\n\n    if (log)\n    {\n        fprintf(log, \"OS_API_Teardown: returned from OS_DeleteAllObjects()\\n\");\n        fflush(log);\n    }\n\n    /*\n     * This should cause the \"internal\" objects (e.g. console utility task)\n     * to exit, and will prevent any new objects from being created.\n     */\n    if (log)\n    {\n        fprintf(log, \"OS_API_Teardown: calling OS_ApplicationShutdown(true)\\n\");\n        fflush(log);\n    }\n\n    /* Original call retained */\n    OS_ApplicationShutdown(true);\n\n    if (log)\n    {\n        fprintf(log, \"OS_API_Teardown: returned from OS_ApplicationShutdown(true)\\n\");\n        fprintf(log, \"OS_API_Teardown: exiting\\n\");\n        fclose(log);\n    }\n}\n"
}