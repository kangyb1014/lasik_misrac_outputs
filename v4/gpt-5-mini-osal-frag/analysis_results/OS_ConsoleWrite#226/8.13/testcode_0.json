{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ConsoleWakeup_Impl is declared to take a non-const pointer (e.g. void OS_ConsoleWakeup_Impl(OS_object_token_t *token)) but does not modify the pointed-to token, then the parameter should be declared as const OS_object_token_t * and this call constitutes (or reveals) a Rule 8.13 violation. In other words, if the implementation does not alter *token, the missing const on the function parameter violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleWrite code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleWrite with it.\n  - Your function must have the exact same signature as OS_ConsoleWrite.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleWrite to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleWrite will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    /* Logging helper: open log file (append). Placed here to avoid introducing\n     * any new global functions or macros. */\n    {\n        /* include headers locally so this function is self-contained for logging */\n        #include <stdio.h>\n        #include <stdint.h>\n        #include <string.h>\n    }\n\n    /* Log: entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ConsoleWrite ENTRY: console_id=%llu, Str=%p\\n\",\n                    (unsigned long long)console_id, (const void *)Str);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        /* Log: initial console state */\n        {\n            FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ConsoleWrite: initial WritePos=%zu, PendingWritePos=%zu, OverflowEvents=%llu, IsAsync=%d, device_name[0]=%c\\n\",\n                        (size_t)console->WritePos,\n                        (size_t)PendingWritePos,\n                        (unsigned long long)console->OverflowEvents,\n                        (int)console->IsAsync,\n                        (console->device_name[0] != 0) ? console->device_name[0] : '-');\n                fclose(log);\n            }\n        }\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n\n            /* Log: after copying device_name (if attempted) */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: after device_name copy return_code=%lld, PendingWritePos=%zu\\n\",\n                            (long long)return_code, (size_t)PendingWritePos);\n                    fclose(log);\n                }\n            }\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            /* Log: after copying Str */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: after Str copy return_code=%lld, PendingWritePos=%zu\\n\",\n                            (long long)return_code, (size_t)PendingWritePos);\n                    fclose(log);\n                }\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n\n            /* Log: successful write */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: message written, new WritePos=%zu\\n\", (size_t)console->WritePos);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n\n            /* Log: overflow */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: message did not fit, OverflowEvents=%llu\\n\",\n                            (unsigned long long)console->OverflowEvents);\n                    fclose(log);\n                }\n            }\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* Before calling the implementation, capture a lightweight checksum\n             * of the token so we can detect whether the implementation mutates\n             * the token object (evidence relevant to the const-qualification rule).\n             */\n            unsigned int pre_sum = 0;\n            unsigned int post_sum = 0;\n            size_t idx;\n            size_t tok_size = sizeof(token);\n\n            /* VLA to snapshot token bytes for checksum; does not modify token */\n            unsigned char tok_bytes_snapshot[tok_size];\n            for (idx = 0; idx < tok_size; ++idx)\n            {\n                unsigned char b = ((unsigned char *)&token)[idx];\n                tok_bytes_snapshot[idx] = b;\n                pre_sum += (unsigned int)b;\n            }\n\n            /* Log: about to call wakeup implementation */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: calling OS_ConsoleWakeup_Impl with token_addr=%p, token_size=%zu, token_checksum_pre=%u\\n\",\n                            (void *)&token, tok_size, pre_sum);\n                    fclose(log);\n                }\n            }\n\n            /* Call the implementation exactly as original code */\n            OS_ConsoleWakeup_Impl(&token);\n\n            /* Compute checksum after the call */\n            for (idx = 0; idx < tok_size; ++idx)\n            {\n                unsigned char b = ((unsigned char *)&token)[idx];\n                post_sum += (unsigned int)b;\n            }\n\n            /* Log: after the call, record whether token changed */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: returned from OS_ConsoleWakeup_Impl token_addr=%p, token_checksum_post=%u, changed=%s\\n\",\n                            (void *)&token, post_sum, (pre_sum != post_sum) ? \"YES\" : \"NO\");\n                    /* If changed, log a hexdump (truncated to first 64 bytes) to aid debugging */\n                    if (pre_sum != post_sum)\n                    {\n                        size_t dump_len = tok_size < 64 ? tok_size : 64;\n                        fprintf(log, \"OS_ConsoleWrite: token dump (first %zu bytes):\", dump_len);\n                        for (idx = 0; idx < dump_len; ++idx)\n                        {\n                            fprintf(log, \" %02x\", ((unsigned char *)&token)[idx]);\n                        }\n                        fprintf(log, \"\\n\");\n                    }\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /* output directly */\n            /* We'll also log around this call for completeness. */\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: calling OS_ConsoleOutput_Impl with token_addr=%p\\n\", (void *)&token);\n                    fclose(log);\n                }\n            }\n\n            OS_ConsoleOutput_Impl(&token);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_ConsoleWrite: returned from OS_ConsoleOutput_Impl token_addr=%p\\n\", (void *)&token);\n                    fclose(log);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Log: exit with return code */\n    {\n        FILE *log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ConsoleWrite EXIT: return_code=%lld\\n\", (long long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}