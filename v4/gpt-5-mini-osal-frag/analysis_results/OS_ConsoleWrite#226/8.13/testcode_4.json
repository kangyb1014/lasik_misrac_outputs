{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the implementation OS_ConsoleOutput_Impl has the prototype OS_ConsoleOutput_Impl(OS_object_token_t *token) but does not modify the token, then the call OS_ConsoleOutput_Impl(&token) violates MISRA C 2023 Rule 8.13. In that case the parameter should be declared as const OS_object_token_t * to indicate it is not modified. Without the function prototype/implementation it cannot be proven safe; if the function legitimately modifies the token then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleWrite code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleWrite with it.\n  - Your function must have the exact same signature as OS_ConsoleWrite.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleWrite to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleWrite will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    /* Log entrance and parameters */\n    FILE *logf = fopen(\"/tmp/logs/1675.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_ConsoleWrite: console_id=%ld, Str=%p\\n\", (long)console_id, (const void *)Str);\n        fflush(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById -> return_code=%ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"console ptr=%p, device_name='%s', WritePos=%zu, IsAsync=%d, OverflowEvents=%u\\n\",\n                    (void *)console,\n                    (console != NULL && console->device_name[0] != '\\0') ? console->device_name : \"(empty)\",\n                    (console != NULL) ? console->WritePos : 0U,\n                    (console != NULL) ? (int)console->IsAsync : -1,\n                    (console != NULL) ? console->OverflowEvents : 0U);\n            fflush(logf);\n        }\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Console_CopyOut for device_name='%s', PendingWritePos=%zu\\n\",\n                        console->device_name, PendingWritePos);\n                fflush(logf);\n            }\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Console_CopyOut(device) -> return_code=%ld, PendingWritePos=%zu\\n\",\n                        (long)return_code, PendingWritePos);\n                fflush(logf);\n            }\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Console_CopyOut for Str=%p\\n\", (const void *)Str);\n                fflush(logf);\n            }\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Console_CopyOut(Str) -> return_code=%ld, PendingWritePos=%zu\\n\",\n                        (long)return_code, PendingWritePos);\n                fflush(logf);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Write successful. New WritePos=%zu\\n\", console->WritePos);\n                fflush(logf);\n            }\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Write failed. OverflowEvents=%u\\n\", console->OverflowEvents);\n                fflush(logf);\n            }\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_ConsoleWakeup_Impl with token_addr=%p\\n\", (void *)&token);\n                fflush(logf);\n            }\n            OS_ConsoleWakeup_Impl(&token);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Returned from OS_ConsoleWakeup_Impl\\n\");\n                fflush(logf);\n            }\n        }\n        else\n        {\n            /* output directly */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_ConsoleOutput_Impl with token_addr=%p -- (This is the call relevant to MISRA 8.13)\\n\", (void *)&token);\n                fflush(logf);\n            }\n            OS_ConsoleOutput_Impl(&token);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Returned from OS_ConsoleOutput_Impl\\n\");\n                fflush(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdRelease called for token_addr=%p\\n\", (void *)&token);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById failed, skipping console operations.\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_ConsoleWrite: return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}