{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is assigned via OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token) which yields an OS_common_record_t *; in this function 'record' is only used for reading (strncpy from record->name_entry and reading record->creator). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (i.e. const OS_common_record_t *record). The underlying declaration OS_global_count_sem_table is OS_common_record_t *const (pointer is const but pointee is not), so the macro and table should instead provide a pointer to const (e.g. const OS_common_record_t * const) to avoid this violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemGetInfo with it.\n  - Your function must have the exact same signature as OS_CountSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n    FILE *logf = NULL;\n\n    /* Try to open log file for appending control-flow and state information. */\n    logf = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_CountSemGetInfo sem_id=%ld count_prop=%p\\n\", (long)sem_id, (void *)count_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    if (logf) fprintf(logf, \"Before OS_CHECK_POINTER\\n\");\n    OS_CHECK_POINTER(count_prop);\n    if (logf) fprintf(logf, \"After OS_CHECK_POINTER\\n\");\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n    if (logf) fprintf(logf, \"After memset(count_prop)\\n\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf) fprintf(logf, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        if (logf)\n        {\n            fprintf(logf, \"record pointer = %p\\n\", (void *)record);\n            /* Attempt to log record fields if the pointer appears valid. Do not suppress the original behavior: keep dereference below as in original code. */\n            if (record != NULL)\n            {\n                /* Be careful when printing strings; ensure a newline even if the string is empty. */\n                fprintf(logf, \"record->name_entry = '%s'\\n\", record->name_entry);\n                fprintf(logf, \"record->creator = %d\\n\", (int)record->creator);\n            }\n            fflush(logf);\n        }\n\n        /* Preserve original behavior: copy name and creator from the record into the property struct. */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        /* Ensure NUL termination as defensive programming while preserving semantics. */\n        count_prop->name[sizeof(count_prop->name) - 1] = '\\0';\n        count_prop->creator = record->creator;\n\n        if (logf) fprintf(logf, \"Copied name and creator into count_prop\\n\");\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n        if (logf) fprintf(logf, \"OS_CountSemGetInfo_Impl returned %ld\\n\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        if (logf) fprintf(logf, \"OS_ObjectIdRelease called\\n\");\n    }\n    else\n    {\n        if (logf) fprintf(logf, \"Skipping record access due to error return_code=%ld\\n\", (long)return_code);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT: OS_CountSemGetInfo return %ld\\n\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}