{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_CountSemGetInfo the local variable 'record' is declared as OS_common_record_t *record; but it is only used to read fields (record->name_entry and record->creator) and is never used to modify the object. Therefore it could be declared as const OS_common_record_t *record; so it should be const-qualified to satisfy MISRA C 2023 Rule 8.13. Assignment from OS_OBJECT_TABLE_GET (which yields OS_common_record_t *) to a const-qualified pointer is allowed; no writes occur through 'record'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemGetInfo with it.\n  - Your function must have the exact same signature as OS_CountSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n    FILE *log = NULL;\n\n    /* Log entry with parameters (safe to print pointer even if NULL) */\n    log = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER OS_CountSemGetInfo: sem_id=%lu, count_prop=%p\\n\", (unsigned long)sem_id, (void *)count_prop);\n        fclose(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    log = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"After memset: count_prop=%p, sizeof(count_prop)=%zu\\n\", (void *)count_prop, sizeof(OS_count_sem_prop_t));\n        fclose(log);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    log = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld; token addr=%p\\n\", (long)return_code, (void *)&token);\n        fclose(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        log = fopen(\"/tmp/logs/675.txt\", \"a\");\n        if (log != NULL)\n        {\n            if (record != NULL)\n            {\n                /* Print a bounded portion of the name to avoid overruns if not NUL-terminated */\n                fprintf(log, \"record pointer=%p; record->name_entry=(%.*s); record->creator=%lu\\n\",\n                        (void *)record,\n                        (int)(sizeof(count_prop->name) - 1),\n                        (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                        (unsigned long)record->creator);\n            }\n            else\n            {\n                fprintf(log, \"record pointer=NULL\\n\");\n            }\n            fclose(log);\n        }\n\n        /* Preserve original behavior: copy name and creator into output struct */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        log = fopen(\"/tmp/logs/675.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After copy: count_prop->name=(%s); count_prop->creator=%lu\\n\",\n                    count_prop->name, (unsigned long)count_prop->creator);\n            fclose(log);\n        }\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        log = fopen(\"/tmp/logs/675.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CountSemGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        log = fopen(\"/tmp/logs/675.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Released token for sem_id=%lu\\n\", (unsigned long)sem_id);\n            fclose(log);\n        }\n    }\n\n    log = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_CountSemGetInfo: sem_id=%lu, return_code=%ld\\n\", (unsigned long)sem_id, (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}