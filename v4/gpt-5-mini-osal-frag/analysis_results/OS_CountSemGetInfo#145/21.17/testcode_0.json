{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1) can read up to (sizeof(count_prop->name)-1) bytes from record->name_entry. If record->name_entry does not have at least that many addressable bytes (for example, record->name_entry is char name_entry[8] but OS_MAX_API_NAME is 16, or record->name_entry is a pointer to a shorter/unterminated buffer), strncpy may read beyond the bounds of record->name_entry and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/673.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemGetInfo with it.\n  - Your function must have the exact same signature as OS_CountSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n    FILE *logf = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Open log file for append; best-effort only. */\n    logf = fopen(\"/tmp/logs/673.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CountSemGetInfo ENTRY: sem_id=%llu, count_prop=%p\\n\", (unsigned long long)sem_id, (void *)count_prop);\n    }\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After memset: count_prop=%p, size=%zu\\n\", (void *)count_prop, sizeof(OS_count_sem_prop_t));\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        if (logf != NULL)\n        {\n            /* Log pointers and intended copy size. Do not attempt to read the source beyond logging its pointer. */\n            size_t intended_copy = sizeof(count_prop->name) - 1U;\n            fprintf(logf, \"About to strncpy: dest=%p, src=%p, intended_copy=%zu\\n\",\n                    (void *)count_prop->name,\n                    (void *)record->name_entry,\n                    intended_copy);\n            fflush(logf);\n        }\n\n        /* Original behavior preserved: copy name (may read up to sizeof(count_prop->name)-1 bytes from record->name_entry) */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        if (logf != NULL)\n        {\n            /* Destination was zeroed before copy, so it will be null-terminated; safe to print. */\n            fprintf(logf, \"After strncpy: dest=%p, dest_string=\\\"%s\\\", creator=%u\\n\",\n                    (void *)count_prop->name,\n                    count_prop->name,\n                    (unsigned)count_prop->creator);\n            fflush(logf);\n        }\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CountSemGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Released object token %p\\n\", (void *)&token);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CountSemGetInfo EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}