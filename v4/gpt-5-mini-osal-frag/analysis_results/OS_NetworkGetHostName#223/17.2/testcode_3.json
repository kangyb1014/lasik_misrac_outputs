{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS is not initialized. If OS_DEBUG (or the BUGCHECK_VOID macro used at the top) uses OS_printf to output messages (a common implementation), this produces indirect (or even direct) recursion: OS_printf -> OS_DEBUG -> OS_printf (or OS_printf -> BUGCHECK_VOID -> OS_printf). That violates MISRA C 2023 Rule 17.2 (functions shall not call themselves, either directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetHostName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1850.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName:\n```c\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_NetworkGetHostName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_NetworkGetHostName with it.\n  - Your function must have the exact same signature as OS_NetworkGetHostName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_NetworkGetHostName to check logs.\n  - Your function MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_NetworkGetHostName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n    FILE *logf = fopen(\"/tmp/logs/1850.txt\", \"a\");\n\n    /* Minimal entry probe */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: ENTRY host_name=%p name_len=%zu\\n\", (void *)host_name, name_len);\n        fflush(logf);\n    }\n\n    /* Check parameters (preserve original behavior) */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: about to call OS_CHECK_POINTER(host_name)\\n\");\n        fflush(logf);\n    }\n    OS_CHECK_POINTER(host_name);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: returned from OS_CHECK_POINTER\\n\");\n        fflush(logf);\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: about to call OS_CHECK_SIZE(name_len)\\n\");\n        fflush(logf);\n    }\n    OS_CHECK_SIZE(name_len);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: returned from OS_CHECK_SIZE\\n\");\n        fflush(logf);\n    }\n\n    /* delegate to low-level API */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: calling OS_NetworkGetHostName_Impl\\n\");\n        fflush(logf);\n    }\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: OS_NetworkGetHostName_Impl returned %ld\\n\", (long)return_code);\n        fflush(logf);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_NetworkGetHostName: return_code != OS_SUCCESS, clearing host_name[0] and returning failure\\n\");\n            fflush(logf);\n        }\n\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_NetworkGetHostName: EXIT return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}