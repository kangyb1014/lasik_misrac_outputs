{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a host_name buffer smaller than name_len (e.g. char buf[8]; name_len==16), OS_CHECK_SIZE(name_len) will succeed because it only verifies name_len>0 and < (UINT32_MAX/2). The implementation OS_NetworkGetHostName_Impl may then call a string function such as strncpy/memcpy/memset using name_len, causing writes/read beyond the actual bounds of host_name (buffer overflow). The size macro does not ensure name_len matches the actual object size, so out-of-bounds accesses are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetHostName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName:\n```c\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_NetworkGetHostName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_NetworkGetHostName with it.\n  - Your function must have the exact same signature as OS_NetworkGetHostName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_NetworkGetHostName to check logs.\n  - Your function MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_NetworkGetHostName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n    /* Try to log entry and parameters to help reproduce out-of-bounds scenarios. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log basic input state */\n            fprintf(log, \"OS_NetworkGetHostName ENTER: host_name=%p name_len=%zu\\n\", (void *)host_name, name_len);\n#if defined(__GNUC__) || defined(__clang__)\n            {\n                size_t obj_size = __builtin_object_size(host_name, 0);\n                if (obj_size == (size_t)-1)\n                {\n                    fprintf(log, \"  builtin object size: UNKNOWN\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"  builtin object size: %zu\\n\", obj_size);\n                    if (name_len > obj_size)\n                    {\n                        fprintf(log, \"  WARNING: requested name_len (%zu) > object size (%zu) -> potential overflow\\n\", name_len, obj_size);\n                    }\n                    else\n                    {\n                        fprintf(log, \"  requested name_len (%zu) within object size (%zu)\\n\", name_len, obj_size);\n                    }\n                }\n            }\n#else\n            fprintf(log, \"  builtin object size: NOT_AVAILABLE_ON_THIS_COMPILER\\n\");\n#endif\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* Log that checks passed (if execution continues) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_NetworkGetHostName: parameter checks passed, calling OS_NetworkGetHostName_Impl(host_name=%p, name_len=%zu)\\n\", (void *)host_name, name_len);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n\n    /* Log result and buffer snapshot when safe to do so */\n    {\n        FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_NetworkGetHostName: returned %ld\\n\", (long)return_code);\n\n#if defined(__GNUC__) || defined(__clang__)\n            {\n                size_t obj_size = __builtin_object_size(host_name, 0);\n                if (obj_size == (size_t)-1)\n                {\n                    fprintf(log, \"  post-call builtin object size: UNKNOWN - not dumping buffer contents to avoid further UB\\n\");\n                }\n                else\n                {\n                    /* Only dump at most the lesser of object size and name_len, and cap to 64 bytes for log readability. */\n                    size_t dump_len = name_len;\n                    if (dump_len > obj_size) dump_len = obj_size;\n                    if (dump_len > 64) dump_len = 64;\n\n                    fprintf(log, \"  post-call: dumping up to %zu bytes of host_name (hex):\\n\", dump_len);\n                    for (size_t i = 0; i < dump_len; ++i)\n                    {\n                        unsigned char c = (unsigned char)host_name[i];\n                        fprintf(log, \"%02x \", c);\n                    }\n                    fprintf(log, \"\\n\");\n\n                    if (name_len > obj_size)\n                    {\n                        fprintf(log, \"  NOTE: name_len (%zu) > object size (%zu) -> if the implementation used name_len for writes, this indicates an overflow may have occurred.\\n\", name_len, obj_size);\n                    }\n                }\n            }\n#else\n            fprintf(log, \"  post-call: object size not available on this compiler - not dumping buffer contents\\n\");\n#endif\n\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n\n        FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_NetworkGetHostName: non-success return -> host_name set to empty string.\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}