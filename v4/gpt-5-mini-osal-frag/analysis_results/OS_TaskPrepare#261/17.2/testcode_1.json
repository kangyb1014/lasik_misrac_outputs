{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent invokes a function pointer OS_SharedGlobalVars.EventHandler without any protection against the handler calling back into OS_NotifyEvent. If the event handler is set to OS_NotifyEvent itself (OS_SharedGlobalVars.EventHandler = OS_NotifyEvent) or to any handler that calls OS_NotifyEvent, this produces indirect recursion (OS_NotifyEvent -> EventHandler -> OS_NotifyEvent ...), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2800.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskPrepare code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskPrepare with it.\n  - Your function must have the exact same signature as OS_TaskPrepare.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskPrepare to check logs.\n  - Your function MUST preserve the original logic of OS_TaskPrepare as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskPrepare will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log: function entry */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskPrepare: entry. task_id=%u, entrypt=%p\\n\", (unsigned)task_id, (void *)entrypt);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n\n    /* Log: result of ObjectIdGetById */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskPrepare: OS_ObjectIdGetById returned %d; token_addr=%p\\n\", (int)return_code, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        /* Log: resolved task and entry function pointer */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskPrepare: matched task at %p, entry_function_pointer=%p\\n\", (void *)task, (void *)task->entry_function_pointer);\n                /* Check for potential recursion pattern: entry function equals OS_NotifyEvent */\n                fprintf(logf, \"OS_TaskPrepare: entry_function_pointer == OS_NotifyEvent? %s\\n\",\n                        (task->entry_function_pointer == OS_NotifyEvent) ? \"YES\" : \"NO\");\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n\n        /* Log: result of TaskRegister */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskPrepare: OS_TaskRegister_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskPrepare: calling OS_NotifyEvent(OS_EVENT_TASK_STARTUP, %u, NULL)\\n\", (unsigned)task_id);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n\n        /* Log: result of NotifyEvent */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TaskPrepare: OS_NotifyEvent returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n\n        /* Log: failure path and final return */\n        FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskPrepare: failure, setting *entrypt=NULL, final return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        /* Log: success path and final return */\n        FILE *logf = fopen(\"/tmp/logs/2800.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskPrepare: success, final return_code=%d, entrypt=%p\\n\", (int)return_code, (void *)*entrypt);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}