{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as OS_task_internal_record_t *task and is assigned from OS_OBJECT_TABLE_GET(OS_task_table, token) (&OS_task_table[index]). In OS_TaskPrepare the code only reads from the pointed record (e.g. task->entry_function_pointer) and does not modify the table entry. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Therefore 'task' should be declared const OS_task_internal_record_t *task (or the macro adjusted to yield a pointer-to-const) to show that the object is not modified. This is a violation of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2805.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskPrepare code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskPrepare with it.\n  - Your function must have the exact same signature as OS_TaskPrepare.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskPrepare to check logs.\n  - Your function MUST preserve the original logic of OS_TaskPrepare as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskPrepare will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *log = fopen(\"/tmp/logs/2805.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TaskPrepare ENTER\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"after OS_ObjectIdGetById: return_code=%d, token_addr=%p\\n\", (int)return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_OBJECT_TABLE_GET returned task_ptr=%p\\n\", (void *)task);\n            fflush(log);\n        }\n\n        return_code = OS_TaskMatch_Impl(&token);\n        if (log != NULL)\n        {\n            fprintf(log, \"after OS_TaskMatch_Impl: return_code=%d\\n\", (int)return_code);\n            if (task != NULL)\n            {\n                /* Log whether the entry function pointer is present (avoid casting function pointers to void*) */\n                if (task->entry_function_pointer != NULL)\n                {\n                    fprintf(log, \"task->entry_function_pointer: NON-NULL\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"task->entry_function_pointer: NULL\\n\");\n                }\n            }\n            else\n            {\n                fprintf(log, \"task is NULL - dereference may follow as in original code\\n\");\n            }\n            fflush(log);\n        }\n\n        /* Preserve original behavior: assign the entry point from the task record */\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n        if (log != NULL)\n        {\n            fprintf(log, \"Released token\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Before OS_TaskRegister_Impl: return_code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        if (log != NULL)\n        {\n            fprintf(log, \"after OS_TaskRegister_Impl: return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        if (log != NULL)\n        {\n            fprintf(log, \"after OS_NotifyEvent: return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"failure path: setting *entrypt = NULL, return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n        *entrypt = NULL;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TaskPrepare EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}