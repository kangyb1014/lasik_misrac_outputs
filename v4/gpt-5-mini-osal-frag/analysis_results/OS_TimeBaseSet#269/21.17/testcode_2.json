{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.ContentTypeStr (or the TypeName parameter) is NULL or not a NUL-terminated string, the call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can read beyond the bounds of the referenced object. A concrete case: after UT_ClearStubEntry (memset to 0) a return-buffer entry might exist with ContentTypeStr == NULL; if StubPtr->Data.Buff.Position equals ReturnSize the first operand of the || is false and strcmp is evaluated with a NULL second argument, causing undefined behavior/out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseSet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet:\n```c\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBaseSet code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBaseSet with it.\n  - Your function must have the exact same signature as OS_TimeBaseSet.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBaseSet to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBaseSet as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBaseSet will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBaseSet as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Minimal entry log */\n    {\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet ENTRY: timer_id=%u start_time=%u interval_time=%u\\n\",\n                    (unsigned)timer_id, (unsigned)start_time, (unsigned)interval_time);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* log objtype */\n    {\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: objtype=%d (OS_OBJECT_TYPE_OS_TIMEBASE=%d)\\n\",\n                    (int)objtype, (int)OS_OBJECT_TYPE_OS_TIMEBASE);\n            fclose(log);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet EARLY RETURN: called from a timebase context, returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n\n    /* log result of ObjectIdGetById and opaque token address */\n    {\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: OS_ObjectIdGetById returned %d, token_ptr=%p\\n\",\n                    (int)return_code, (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the timebase pointer and current nominal values (before change) */\n        {\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: obtained timebase=%p current_nominal_start=%u current_nominal_interval=%u\\n\",\n                        (void *)timebase,\n                        (unsigned)timebase->nominal_start_time,\n                        (unsigned)timebase->nominal_interval_time);\n                fclose(log);\n            }\n        }\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        /* log lock acquisition */\n        {\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: lock acquired for token=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        /* log result of OS_TimeBaseSet_Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: OS_TimeBaseSet_Impl returned %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n\n            /* log updated values */\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: updated timebase=%p nominal_start_time=%u nominal_interval_time=%u\\n\",\n                        (void *)timebase,\n                        (unsigned)timebase->nominal_start_time,\n                        (unsigned)timebase->nominal_interval_time);\n                fclose(log);\n            }\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        /* log unlock */\n        {\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: lock released for token=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* log release */\n        {\n            FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: token released for token=%p final_return=%d\\n\", (void *)&token, (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* log failure to find object id */\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: OS_ObjectIdGetById failed with %d, skipping set\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    /* final return log */\n    {\n        FILE *log = fopen(\"/tmp/logs/1333.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet EXIT: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}