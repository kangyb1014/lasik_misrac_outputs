{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strncmp(target, filesys->virtual_mountpt, mplen) where mplen is derived from the length of filesys->virtual_mountpt. Only filesys->virtual_mountpt is guaranteed to have at least mplen bytes (mplen < sizeof(filesys->virtual_mountpt) is checked). The target (mountpoint) may be shorter than mplen, so calling strncmp with n = mplen can cause reads beyond the bounds of the object referenced by target (for example, filesys->virtual_mountpt has length mplen = 12 but the input mountpoint string has length 5). This can result in out\u2011of\u2011bounds accesses depending on implementation, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_unmount code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_unmount with it.\n  - Your function must have the exact same signature as OS_unmount.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_unmount to check logs.\n  - Your function MUST preserve the original logic of OS_unmount as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_unmount will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_unmount as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Probe: log entry and input mountpoint details */\n    {\n        FILE *logf = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (logf)\n        {\n            if (mountpoint != NULL)\n            {\n                /* Use strlen to report the provided mountpoint length */\n                size_t mlen = strlen(mountpoint);\n                fprintf(logf, \"ENTER OS_unmount: mountpoint_ptr=%p mountpoint_length=%zu mountpoint=\\\"%s\\\"\\n\",\n                        (void *)mountpoint, mlen, mountpoint);\n            }\n            else\n            {\n                fprintf(logf, \"ENTER OS_unmount: mountpoint_ptr=%p (NULL)\\n\", (void *)mountpoint);\n            }\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    /* Log result of search */\n    {\n        FILE *logf = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"After OS_ObjectIdGetBySearch: return_code=%d\\n\", return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesys details that are relevant to the reported strncmp scenario */\n        {\n            FILE *logf = fopen(\"/tmp/logs/263.txt\", \"a\");\n            if (logf)\n            {\n                /* Attempt to obtain the buffer size of virtual_mountpt and its string length. */\n                size_t vbuf_size = 0;\n                size_t vlen = 0;\n                size_t mlen = 0;\n\n                /* sizeof on the member is used in the original code (via macro). Use same here for diagnostics. */\n                vbuf_size = sizeof(filesys->virtual_mountpt);\n\n                if (filesys->virtual_mountpt != NULL)\n                {\n                    /* Measure the apparent string length of the stored virtual mount point */\n                    vlen = strlen(filesys->virtual_mountpt);\n                }\n\n                if (mountpoint != NULL)\n                {\n                    mlen = strlen(mountpoint);\n                }\n\n                fprintf(logf, \"Found filesys: filesys_ptr=%p virtual_mountpt_ptr=%p virtual_mountpt_length=%zu virtual_mountpt_buf_size=%zu input_mountpoint_length=%zu\\n\",\n                        (void *)filesys,\n                        (void *)filesys->virtual_mountpt,\n                        vlen,\n                        vbuf_size,\n                        mlen);\n\n                if (mlen < vlen)\n                {\n                    fprintf(logf, \"POTENTIAL VIOLATION: input mountpoint (len=%zu) is shorter than filesys->virtual_mountpt (len=%zu).\\n\",\n                            mlen, vlen);\n                    fprintf(logf, \"This indicates a scenario where a search function that computes mplen from filesys->virtual_mountpt length and calls strncmp(input, filesys->virtual_mountpt, mplen) could read beyond the bounds of input.\\n\");\n                }\n\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* If not found or other failure, normalize to NAME_NOT_FOUND as in original implementation */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log the non-success outcome before mapping */\n        {\n            FILE *logf = fopen(\"/tmp/logs/263.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_unmount: non-success code before mapping = %d. Mapping to OS_ERR_NAME_NOT_FOUND.\\n\", return_code);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    /* Final exit log */\n    {\n        FILE *logf = fopen(\"/tmp/logs/263.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"EXIT OS_unmount: return_code=%d\\n\", return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}