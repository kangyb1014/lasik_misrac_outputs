{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'ref' is declared as void * (non-const) and is cast to a const-qualified pointer inside the function: const char *target = (const char *)ref; This hides the fact that the referenced data is not intended to be modified. According to MISRA C 2023 Rule 8.13 the parameter should be declared to point to a const-qualified type (e.g. const void *ref) so callers and the API reflect that the data will not be modified. The correct fix is to change the function prototype to take const void *ref and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/265.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_unmount code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_unmount with it.\n  - Your function must have the exact same signature as OS_unmount.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_unmount to check logs.\n  - Your function MUST preserve the original logic of OS_unmount as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_unmount will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_unmount as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Open a log file to capture control flow and state for analysis of const qualifier usage */\n    FILE *log = fopen(\"/tmp/logs/265.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_unmount: ENTER. mountpoint_ptr=%p, mountpoint_str=%s\\n\",\n                (const void *)mountpoint, (mountpoint != NULL) ? mountpoint : \"(null)\");\n        fprintf(log, \"OS_unmount: Note: casting const char * to void * in the upcoming call (drops const qualifier)\\n\");\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_unmount: OS_ObjectIdGetBySearch returned %ld, token_addr=%p\\n\",\n                (long)return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if (log != NULL)\n        {\n            /* Log the filesys pointer and flags to capture object state */\n            fprintf(log, \"OS_unmount: filesys_ptr=%p\\n\", (void *)filesys);\n            /* Attempt to log flags; this mirrors original logic which accesses filesys->flags here */\n            fprintf(log, \"OS_unmount: filesys->flags=0x%08lx\\n\", (unsigned long)filesys->flags);\n            fflush(log);\n        }\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_unmount: incorrect obj state for unmount, flags=0x%08lx\\n\", (unsigned long)filesys->flags);\n                fflush(log);\n            }\n\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_unmount: calling OS_FileSysUnmountVolume_Impl with token_addr=%p\\n\", (void *)&token);\n                fflush(log);\n            }\n\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_unmount: OS_FileSysUnmountVolume_Impl returned %ld\\n\", (long)return_code);\n                fflush(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_unmount: cleared mounted flags, new flags=0x%08lx\\n\", (unsigned long)filesys->flags);\n                fflush(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_unmount: OS_ObjectIdRelease called for token_addr=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_unmount: mapping return_code %ld to OS_ERR_NAME_NOT_FOUND before return\\n\", (long)return_code);\n            fflush(log);\n        }\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_unmount: EXIT returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}