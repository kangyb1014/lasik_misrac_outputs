{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without validating either pointer or ensuring the strings are NUL-terminated. UT_Stub_RegisterReturnType stores the TypeName pointer directly (StubPtr->Data.Buff.ContentTypeStr = TypeName) with no null check, and UT_Stub_GetReturnValuePtr does not verify that its TypeName parameter or the stored ContentTypeStr are non-NULL or properly terminated. If UT_Stub_RegisterReturnType was ever called with TypeName == NULL (or if either pointer does not point to a NUL-terminated buffer), then the strcmp call will dereference an invalid pointer / read beyond the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdGetById code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdGetById with it.\n  - Your function must have the exact same signature as OS_ObjectIdGetById.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdGetById to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdGetById will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Attempt to open the log file for appending; fallback to stderr if not possible */\n    logf = fopen(\"/tmp/logs/3123.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* If opening the file fails, use stderr to ensure something is recorded. */\n        logf = stderr;\n    }\n\n    /* Log entry and input parameters */\n    fprintf(logf, \"OS_ObjectIdGetById ENTRY: lock_mode=%d, idtype=%d, id=%u, token=%p\\n\",\n            (int)lock_mode, (int)idtype, (unsigned)id, (void *)token);\n    fflush(logf);\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    fprintf(logf, \"OS_ObjectIdGetById: OS_ObjectIdTransactionInit returned %d\\n\", return_code);\n    fflush(logf);\n\n    if (return_code != OS_SUCCESS)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById EXIT (early): return_code=%d\\n\", return_code);\n        fflush(logf);\n        if (logf != stderr)\n        {\n            fclose(logf);\n        }\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    fprintf(logf, \"OS_ObjectIdGetById: OS_ObjectIdToArrayIndex returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n        fprintf(logf, \" -- success: token->obj_idx=%d, token->obj_id=%u\\n\",\n                (int)token->obj_idx, (unsigned)token->obj_id);\n    }\n    else\n    {\n        fprintf(logf, \" -- failure\\n\");\n    }\n    fflush(logf);\n\n    /* Convert the token (this maintains the original lock/transaction semantics) */\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n        fprintf(logf, \"OS_ObjectIdGetById: OS_ObjectIdConvertToken returned %d\\n\", return_code);\n        fflush(logf);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById: calling OS_ObjectIdTransactionCancel(token=%p) because return_code=%d\\n\",\n                (void *)token, return_code);\n        fflush(logf);\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    fprintf(logf, \"OS_ObjectIdGetById EXIT: return_code=%d\\n\", return_code);\n    fflush(logf);\n\n    if (logf != stderr)\n    {\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}