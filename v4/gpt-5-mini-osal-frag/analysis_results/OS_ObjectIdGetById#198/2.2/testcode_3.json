{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdConvertToken the local variable 'return_code' is initialized at declaration with \"int32 return_code = OS_ERROR;\". Every control path that can reach the later uses of 'return_code' assigns it a new value before it is read (all break/return points inside the while loop set return_code, and there is an early return on invalid ID). Therefore the initial assignment to OS_ERROR is executed but has no effect on program behaviour and could be removed \u2014 i.e. it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3128.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdGetById code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdGetById with it.\n  - Your function must have the exact same signature as OS_ObjectIdGetById.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdGetById to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdGetById will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Open log file for appending control-flow/state info for debugging. */\n    FILE *log = fopen(\"/tmp/logs/3128.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ObjectIdGetById(lock_mode=%d, idtype=%d, id=%u, token=%p)\\n\",\n                (int)lock_mode, (int)idtype, (unsigned)id, (void *)token);\n    }\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (log)\n    {\n        fprintf(log, \"After OS_ObjectIdTransactionInit: return_code=%d\\n\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early RETURN from OS_ObjectIdGetById due to TransactionInit failure: %d\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (log)\n    {\n        fprintf(log, \"After OS_ObjectIdToArrayIndex: return_code=%d, token->obj_idx=%ld\\n\",\n                (int)return_code, (long)token->obj_idx);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n        if (log)\n        {\n            fprintf(log, \"Set token->obj_id=%u\\n\", (unsigned)token->obj_id);\n        }\n\n        /* Call ConvertToken - this is where downstream code may perform its own assignments. */\n        return_code = OS_ObjectIdConvertToken(token);\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdConvertToken: return_code=%d\\n\", (int)return_code);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdTransactionCancel due to return_code=%d\\n\", (int)return_code);\n        }\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_ObjectIdGetById returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}