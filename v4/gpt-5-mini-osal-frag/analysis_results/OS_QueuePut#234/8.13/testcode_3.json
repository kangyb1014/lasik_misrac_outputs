{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'queue' is declared as a non-const pointer (OS_queue_internal_record_t *queue) and is assigned from OS_OBJECT_TABLE_GET. In the shown code it is only used for read-only access (queue->max_size) and is never modified, so the pointer could and should be declared to point to a const-qualified type (const OS_queue_internal_record_t *). Because a non-const pointer is used where a const-qualified pointer would suffice, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1955.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueuePut code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueuePut with it.\n  - Your function must have the exact same signature as OS_QueuePut.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueuePut to check logs.\n  - Your function MUST preserve the original logic of OS_QueuePut as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueuePut will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueuePut as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Minimal entry log so the test harness can detect invocation */\n    {\n        FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_QueuePut ENTER: queue_id=%u, data=%p, size=%zu, flags=%u\\n\",\n                    (unsigned)queue_id, data, size, (unsigned)flags);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the queue pointer value. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_OBJECT_TABLE_GET -> queue=%p\\n\", (void *)queue);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Create a const-qualified view for read-only access to demonstrate the violation scenario. */\n        const OS_queue_internal_record_t *cqueue = queue;\n\n        /* Log the max_size observed on the queue (read-only access). */\n        {\n            FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n            if (log)\n            {\n                /* Print max_size; cast to size_t to use %%zu format without depending on the exact member type. */\n                fprintf(log, \"cqueue->max_size (read-only) = %zu\\n\", (size_t)cqueue->max_size);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        if (size > cqueue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            {\n                FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"size %zu > max_size %zu: returning OS_QUEUE_INVALID_SIZE\\n\", size, (size_t)cqueue->max_size);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            {\n                FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"size %zu <= max_size %zu: calling OS_QueuePut_Impl\\n\", size, (size_t)cqueue->max_size);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"OS_QueuePut_Impl returned %d\\n\", return_code);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n        }\n    }\n\n    /* Exit log with final return code */\n    {\n        FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_QueuePut EXIT: return_code=%d\\n\", return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}