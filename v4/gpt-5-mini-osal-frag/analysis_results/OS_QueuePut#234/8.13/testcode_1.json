{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_QueuePut_Impl is declared to take a non-const pointer (for example: int32 OS_QueuePut_Impl(OS_object_token_t *token, void *data, size_t size, uint32 flags)), then passing the local parameter data which is declared as const void * discards the const qualifier. That constitutes a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when the data is not modified. To fix, declare OS_QueuePut_Impl to accept a const void * for the data parameter (or otherwise ensure the callee actually needs to modify the data and change the caller accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1955.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueuePut code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueuePut with it.\n  - Your function must have the exact same signature as OS_QueuePut.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueuePut to check logs.\n  - Your function MUST preserve the original logic of OS_QueuePut as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueuePut will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueuePut as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Open log file for evidence of control flow and state (append mode) */\n    FILE *log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and parameters */\n        fprintf(log, \"OS_QueuePut ENTER: queue_id=%u, data=%p, size=%zu, flags=0x%08x\\n\",\n                (unsigned)queue_id, data, size, (unsigned)flags);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"ObjectIdGetById: success, token=%p, queue=%p\\n\", (void *)&token, (void *)queue);\n            if (queue != NULL)\n            {\n                fprintf(log, \"queue->max_size=%zu\\n\", (size_t)queue->max_size);\n            }\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            if (log != NULL)\n            {\n                fprintf(log, \"Size check failed: size=%zu > max_size=%zu; returning OS_QUEUE_INVALID_SIZE\\n\",\n                        size, (size_t)queue->max_size);\n            }\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            /*\n             * Log that we are about to call the implementation function.\n             * This is the call site that can exhibit the const-discard scenario\n             * if OS_QueuePut_Impl is prototyped to take a non-const pointer.\n             */\n            if (log != NULL)\n            {\n                fprintf(log, \"About to call OS_QueuePut_Impl(token=%p, data=%p (const void *), size=%zu, flags=0x%08x)\\n\",\n                        (void *)&token, data, size, (unsigned)flags);\n\n                /* Dump up to the first 32 bytes of the data buffer for evidence (read-only) */\n                if (data != NULL && size > 0)\n                {\n                    size_t dump = (size < 32U) ? size : 32U;\n                    const unsigned char *bytes = (const unsigned char *)data;\n                    fprintf(log, \"Data dump (first %zu bytes):\", dump);\n                    for (size_t i = 0U; i < dump; ++i)\n                    {\n                        fprintf(log, \" %02x\", (unsigned)bytes[i]);\n                    }\n                    fprintf(log, \"\\n\");\n                }\n            }\n\n            /* Preserve the original call. If OS_QueuePut_Impl is declared to take a non-const pointer,\n             * passing 'data' (which is const void *) will discard the const qualifier at the call site\n             * and that is precisely the scenario this logging is intended to capture. */\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_QueuePut_Impl returned %d\\n\", (int)return_code);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById failed: return_code=%d\\n\", (int)return_code);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueuePut EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}