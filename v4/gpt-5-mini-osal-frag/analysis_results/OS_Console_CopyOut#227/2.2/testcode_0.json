{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment return_code = OS_ERROR at the start of OS_Console_CopyOut is redundant. The function enters a while(true) loop and every path that breaks out of the loop assigns return_code to either OS_SUCCESS (when the string terminator is found) or OS_QUEUE_FULL (when the buffer is full). There is no execution path that returns the initial OS_ERROR value, so removing the assignment would not change program behaviour \u2014 it is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Console_CopyOut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Console_CopyOut:\n```c\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    return_code = OS_ERROR;\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Console_CopyOut code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Console_CopyOut with it.\n  - Your function must have the exact same signature as OS_Console_CopyOut.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Console_CopyOut to check logs.\n  - Your function MUST preserve the original logic of OS_Console_CopyOut as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Console_CopyOut will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Console_CopyOut as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n    /* Logging probe: append to /tmp/logs/578.txt to record control flow and state. */\n    FILE *fp = NULL;\n    fp = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER OS_Console_CopyOut: console=%p, Str=%p, NextWritePos=%p\\n\",\n                (void *)console, (void *)Str, (void *)NextWritePos);\n        if (console != NULL)\n        {\n            fprintf(fp, \"  console->BufBase=%p, BufSize=%zu, ReadPos=%zu\\n\",\n                    (void *)console->BufBase, console->BufSize, console->ReadPos);\n        }\n        if (NextWritePos != NULL)\n        {\n            fprintf(fp, \"  initial *NextWritePos=%zu\\n\", *NextWritePos);\n        }\n        fprintf(fp, \"  (about to perform initial assignment return_code = OS_ERROR)\\n\");\n    }\n\n    /* Preserve original initialization */\n    return_code = OS_ERROR;\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"  after init: WriteOffset=%zu, pmsg=%p\\n\", WriteOffset, (void *)pmsg);\n    }\n\n    size_t iter = 0;\n    while (true)\n    {\n        if (fp != NULL)\n        {\n            fprintf(fp, \"  loop iter=%zu: pmsg=%p\", iter, (void *)pmsg);\n            if (pmsg != NULL)\n            {\n                /* Print printable char info or the numeric value */\n                int c = (int)(unsigned char)*pmsg;\n                if (c == 0)\n                {\n                    fprintf(fp, \", *pmsg=\\\\0 (NUL)\\n\");\n                }\n                else\n                {\n                    /* Show character (if printable) and numeric value */\n                    if (c >= 32 && c < 127)\n                    {\n                        fprintf(fp, \", *pmsg='%c' (%d)\\n\", (char)c, c);\n                    }\n                    else\n                    {\n                        fprintf(fp, \", *pmsg=(%d)\\n\", c);\n                    }\n                }\n            }\n            else\n            {\n                fprintf(fp, \", pmsg is NULL\\n\");\n            }\n        }\n\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  detected NUL terminator at iter=%zu, WriteOffset=%zu\\n\", iter, WriteOffset);\n            }\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  set *NextWritePos=%zu, return_code=OS_SUCCESS\\n\", WriteOffset);\n            }\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        if (fp != NULL)\n        {\n            fprintf(fp, \"  wrote char '%c' to BufBase[%zu]\\n\", *pmsg, WriteOffset);\n        }\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  wrapped WriteOffset to 0 (BufSize=%zu)\\n\", console->BufSize);\n            }\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  detected buffer full: WriteOffset==ReadPos==%zu, set return_code=OS_QUEUE_FULL\\n\",\n                        WriteOffset);\n            }\n            break;\n        }\n\n        ++pmsg;\n        ++iter;\n    }\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"EXIT OS_Console_CopyOut: final return_code=%ld\\n\\n\", (long)return_code);\n        fclose(fp);\n    }\n\n    return return_code;\n}\n"
}