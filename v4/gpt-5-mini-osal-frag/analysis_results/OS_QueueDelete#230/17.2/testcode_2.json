{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent which invokes the user-supplied EventHandler (OS_SharedGlobalVars.EventHandler). If that callback calls back into OS APIs that perform deletes (for example OS_QueueDelete for the same object id), the call chain can be: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_QueueDelete -> ... -> OS_ObjectIdFinalizeDelete, producing indirect recursion. Thus OS_ObjectIdFinalizeDelete can be re-entered indirectly via the event callback.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1080.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueDelete with it.\n  - Your function must have the exact same signature as OS_QueueDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueDelete to check logs.\n  - Your function MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe log: record entry and input parameters */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* Print queue id and an indication that the function was entered */\n            fprintf(logf, \"OS_QueueDelete: ENTRY queue_id=%lu\\n\", (unsigned long)queue_id);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of OS_ObjectIdGetById */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueDelete: after OS_ObjectIdGetById return_code=%ld token_addr=%p\\n\",\n                    (long)return_code, (void *)&token);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_QueueDelete: calling OS_QueueDelete_Impl token_addr=%p\\n\", (void *)&token);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Log after calling the implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_QueueDelete: after OS_QueueDelete_Impl return_code=%ld token_addr=%p\\n\",\n                        (long)return_code, (void *)&token);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_QueueDelete: calling OS_ObjectIdFinalizeDelete(return_code=%ld) token_addr=%p\\n\",\n                        (long)return_code, (void *)&token);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalization - this is important because the callback invoked during finalize\n         * can re-enter OS_QueueDelete (indirect recursion). Capturing the return code here and\n         * noting that finalize was reached helps reproduce the call chain. */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_QueueDelete: after OS_ObjectIdFinalizeDelete final_return_code=%ld token_addr=%p\\n\",\n                        (long)return_code, (void *)&token);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1080.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueDelete: EXIT queue_id=%lu return_code=%ld\\n\", (unsigned long)queue_id, (long)return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}