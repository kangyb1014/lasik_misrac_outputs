{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the implementation of OS_QueueDelete_Impl is declared to take a non-const pointer (for example: int32 OS_QueueDelete_Impl(OS_object_token_t *token)) but does not modify the object token, then the parameter should be const-qualified (const OS_object_token_t *token). In that situation passing &token constitutes a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. If, however, OS_QueueDelete_Impl is declared to take a pointer to const or it legitimately modifies the token, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1085.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueDelete with it.\n  - Your function must have the exact same signature as OS_QueueDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueDelete to check logs.\n  - Your function MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry: function entered and basic parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueDelete: ENTER queue_id=%u\\n\", (unsigned)queue_id);\n            fprintf(log, \"OS_QueueDelete: token_address=%p sizeof(token)=%zu\\n\", (void *)&token, sizeof(token));\n            fclose(log);\n        }\n    }\n\n    /* Original logic preserved: get the object token */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and a hexdump of the token (first up to 64 bytes) to aid investigation */\n    {\n        FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueDelete: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                /* Hex-dump up to the first 64 bytes of the token to capture state without assuming token layout */\n                unsigned char *ptr = (unsigned char *)&token;\n                size_t max_bytes = sizeof(token) < 64U ? (size_t)sizeof(token) : 64U;\n                fprintf(log, \"OS_QueueDelete: token_hexdump (first %zu bytes):\", max_bytes);\n                for (size_t i = 0; i < max_bytes; ++i)\n                {\n                    fprintf(log, \" %02X\", (unsigned)ptr[i]);\n                }\n                fprintf(log, \"\\n\");\n            }\n\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call implementation-specific delete and log the call (including the address passed so callers can see if a non-const pointer was used) */\n        {\n            FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_QueueDelete: calling OS_QueueDelete_Impl with token_address=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Log result of OS_QueueDelete_Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_QueueDelete: OS_QueueDelete_Impl returned %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Complete the operation via the common routine and log before/after */\n        {\n            FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_QueueDelete: calling OS_ObjectIdFinalizeDelete(return_code=%d, token_address=%p)\\n\", (int)return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final result log */\n        {\n            FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_QueueDelete: OS_ObjectIdFinalizeDelete returned %d (FINAL)\\n\", (int)return_code);\n                fprintf(log, \"OS_QueueDelete: EXIT queue_id=%u final_return=%d\\n\", (unsigned)queue_id, (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log the early exit when GetById fails */\n        FILE *log = fopen(\"/tmp/logs/1085.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueDelete: OS_ObjectIdGetById failed; no delete performed. EXIT queue_id=%u return=%d\\n\", (unsigned)queue_id, (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}