{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable in OS_ObjectIdConvertToken is initialized to OS_ERROR but every path that uses the variable either returns a literal immediately or assigns a value to return_code before it is read. For example, the function has an early return if !OS_ObjectIdIsValid(expected_id) (so the initial write is never observed), and all loop-exit paths set return_code to OS_SUCCESS, OS_ERR_INVALID_ID or OS_ERR_OBJECT_IN_USE before the final return. Thus the initial assignment int32 return_code = OS_ERROR; is an executed operation whose removal would not affect program behaviour (the variable is overwritten or the function returns prior to use), so it constitutes dead code per MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1088.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueDelete with it.\n  - Your function must have the exact same signature as OS_QueueDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueDelete to check logs.\n  - Your function MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: record entry and the queue_id */\n    FILE *logf = fopen(\"/tmp/logs/1088.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_QueueDelete: queue_id=%lu, token_addr=%p\\n\", (unsigned long)queue_id, (void *)&token);\n        fflush(logf);\n    }\n\n    /* Preserve original logic: attempt to get object token */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After OS_ObjectIdGetById: return_code=%d\\n\", return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call the implementation-specific delete */\n        return_code = OS_QueueDelete_Impl(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_QueueDelete_Impl: return_code=%d\\n\", return_code);\n            fflush(logf);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFinalizeDelete: return_code=%d\\n\", return_code);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        /* Log the early-failure path where GetById did not succeed */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById failed, skipping delete. final return_code=%d\\n\", return_code);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_QueueDelete: final return_code=%d\\n\", return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}"
}