{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StubPtr is declared as UT_StubTableEntry_t * and is only used for read-only access (reading BasePtr, Position, ContentTypeStr) after assigning it from UT_GetStubEntry(FuncKey,...). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. const UT_StubTableEntry_t *StubPtr). Because StubPtr is not const-qualified despite only being read, this fragment violates Rule 8.13. (If the design requires modifying the pointed object via StubPtr, then non-const is justified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_GetReturnValuePtr with it.\n  - Your function must have the exact same signature as UT_Stub_GetReturnValuePtr.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_GetReturnValuePtr to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_GetReturnValuePtr will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n    FILE *logf = NULL;\n\n    /* Try to open log file (best-effort). Do not change control flow on failure. */\n    logf = fopen(\"/tmp/logs/1735.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_GetReturnValuePtr ENTER: FuncKey=%lu ReturnSize=%lu TypeName=%s\\n\",\n                (unsigned long)FuncKey, (unsigned long)ReturnSize, (TypeName != NULL) ? TypeName : \"(null)\");\n        fflush(logf);\n    }\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ERROR: Return buffer invalid for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"StubPtr->Data.Buff.BasePtr=%p Position=%lu ContentTypeStr=%s\\n\",\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    (unsigned long)StubPtr->Data.Buff.Position,\n                    (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\");\n            fflush(logf);\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf,\n                        \"Return value mismatch for FuncKey=%lu: expected %s(%lu) got %s(%lu)\\n\",\n                        (unsigned long)FuncKey,\n                        (TypeName != NULL) ? TypeName : \"(null)\", (unsigned long)ReturnSize,\n                        (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\",\n                        (unsigned long)StubPtr->Data.Buff.Position);\n                fflush(logf);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_GetReturnValuePtr EXIT: ReturnPtr=%p\\n\", (void *)ReturnPtr);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return ReturnPtr;\n}"
}