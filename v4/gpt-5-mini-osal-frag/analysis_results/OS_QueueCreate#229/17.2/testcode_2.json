{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent invokes a function-pointer OS_SharedGlobalVars.EventHandler. If this pointer is set to OS_NotifyEvent itself (or to any handler that calls back into OS_NotifyEvent), an indirect recursive call chain is formed (OS_NotifyEvent -> EventHandler -> OS_NotifyEvent), violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2600.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueCreate with it.\n  - Your function must have the exact same signature as OS_QueueCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueCreate to check logs.\n  - Your function MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Logging probe: entry and parameters */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_QueueCreate ENTRY: queue_id=%p, queue_name=%s, queue_depth=%llu, data_size=%zu, flags=0x%lx\\n\",\n                    (void *)queue_id,\n                    (queue_name != NULL) ? queue_name : \"(null)\",\n                    (unsigned long long)queue_depth,\n                    data_size,\n                    (unsigned long)flags);\n\n            /* Try to capture any relevant global handler pointers if available. These globals may or may not\n             * exist in the build; if they do, this will print their addresses so other agents can correlate\n             * activity and detect indirect recursion (e.g. EventHandler == OS_NotifyEvent). If they are not\n             * present in the build, these references will be resolved at link time elsewhere in the system. */\n            /* Use casts to void* to print pointer values. */\n            /* The below accesses are best-effort diagnostics; if the symbols exist in the project they\n             * will produce useful information for reproducing callback/indirect recursion scenarios. */\n            \n            /* Note: guarded printing to avoid potential crashes if symbols are absent is not possible here\n             * without introducing more infrastructure; rely on existing project linkage for these symbols. */\n            \n            /* Print addresses if available */\n            /* These identifiers are referenced by the broader OSAL codebase; printing them helps trace\n             * whether any event handler points back to notify routines. */\n            \n            /* Attempt to print OS_NotifyEvent address */\n            fprintf(fp, \"OS_NotifyEvent address: %p\\n\", (void *)OS_NotifyEvent);\n\n            /* Attempt to print shared event handler pointer if it exists */\n            /* This will compile/link in typical OSAL configurations where OS_SharedGlobalVars is defined. */\n            fprintf(fp, \"OS_SharedGlobalVars.EventHandler address: %p\\n\",\n                    (void *)(OS_SharedGlobalVars.EventHandler));\n\n            /* Compare equality if both addresses are meaningful */\n            fprintf(fp, \"EventHandler == OS_NotifyEvent ? %d\\n\",\n                    (OS_SharedGlobalVars.EventHandler == OS_NotifyEvent) ? 1 : 0);\n\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    /* Log allocation result */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log prepared queue state prior to OS-specific create implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (fp)\n            {\n                fprintf(fp, \"Prepared queue record at %p: max_depth=%llu, max_size=%zu\\n\",\n                        (void *)queue,\n                        (unsigned long long)queue->max_depth,\n                        queue->max_size);\n                fflush(fp);\n                fclose(fp);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Log result of OS-specific implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (fp)\n            {\n                fprintf(fp, \"OS_QueueCreate_Impl returned %ld\\n\", (long)return_code);\n                fflush(fp);\n                fclose(fp);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        /* Final return code log */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (fp)\n            {\n                fprintf(fp, \"OS_ObjectIdFinalizeNew returned %ld; final return_code=%ld; queue_id=%p\\n\",\n                        (long)return_code, (long)return_code, (void *)queue_id);\n                fflush(fp);\n                fclose(fp);\n            }\n        }\n    }\n\n    /* Exit log */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_QueueCreate EXIT: return_code=%ld\\n\", (long)return_code);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}