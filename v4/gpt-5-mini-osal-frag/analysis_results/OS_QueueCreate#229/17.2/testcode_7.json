{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER, OS_printf calls OS_DEBUG. If OS_DEBUG is implemented using OS_printf (a common pattern), this creates an indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, which violates MISRA C 2023 Rule 17.2 (functions shall not call themselves, directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2600.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueCreate with it.\n  - Your function must have the exact same signature as OS_QueueCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueCreate to check logs.\n  - Your function MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Probe log: entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER: OS_QueueCreate called\\n\");\n            fprintf(log, \"  params: queue_name=%s, queue_depth=%u, data_size=%zu, flags=0x%08X\\n\",\n                    (queue_name != NULL) ? queue_name : \"(null)\", (unsigned)queue_depth, data_size, (unsigned)flags);\n#ifdef OS_INIT_MAGIC_NUMBER\n            /* If available, log the global init magic and current global state to help reproduce OS_printf/OS_DEBUG scenarios */\n            /* Casts to unsigned for printing; if types differ in the build this may produce implementation-defined output but is only for diagnostics. */\n            fprintf(log, \"  OS_INIT_MAGIC_NUMBER=0x%08X\\n\", (unsigned)OS_INIT_MAGIC_NUMBER);\n#endif\n#ifdef OS_SharedGlobalVars\n            /* Log GlobalState if symbol exists in the build */\n            /* Use a safe cast to unsigned long to accommodate different integer widths. */\n            fprintf(log, \"  GlobalState=0x%08lX\\n\", (unsigned long)OS_SharedGlobalVars.GlobalState);\n#endif\n            fclose(log);\n        }\n    }\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"CALL: OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, %s)\\n\", (queue_name != NULL) ? queue_name : \"(null)\");\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"RETURN: OS_ObjectIdAllocateNew -> return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Probe log: about to call OS_QueueCreate_Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"CALL: OS_QueueCreate_Impl - token_addr=%p, queue_ptr=%p, max_depth=%u, max_size=%zu, flags=0x%08X\\n\",\n                        (void *)&token, (void *)queue, (unsigned)queue->max_depth, queue->max_size, (unsigned)flags);\n                fclose(log);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Log result of OS_QueueCreate_Impl */\n        {\n            FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"RETURN: OS_QueueCreate_Impl -> return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"CALL: OS_ObjectIdFinalizeNew(return_code=%ld)\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        /* Final log before leaving success path */\n        {\n            FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"FINALIZE: OS_ObjectIdFinalizeNew -> return_code=%ld, assigned_queue_id=%p\\n\",\n                        (long)return_code, (void *)queue_id);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log that allocation failed */\n        FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ALLOC FAIL: OS_ObjectIdAllocateNew returned %ld - aborting OS_QueueCreate\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    /* Exit probe: return code */\n    {\n        FILE *log = fopen(\"/tmp/logs/2600.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT: OS_QueueCreate -> return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}