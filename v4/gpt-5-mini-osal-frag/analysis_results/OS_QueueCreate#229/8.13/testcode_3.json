{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueueCreate_Impl the variable 'queue' is declared as OS_queue_internal_record_t *queue and assigned via queue = OS_OBJECT_TABLE_GET(OS_queue_table, *token); but within this function it is only used for read-only access (queue->max_depth, queue->max_size, queue->queue_name). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible; here it could and should be declared as const OS_queue_internal_record_t *queue to reflect intended read-only use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2605.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueCreate with it.\n  - Your function must have the exact same signature as OS_QueueCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueCreate to check logs.\n  - Your function MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n    FILE *logf = fopen(\"/tmp/logs/2605.txt\", \"a\");\n\n    /* Minimal entry log so that the function invocation is visible in the log file */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_QueueCreate: queue_id=%p, queue_name=%s, queue_depth=%llu, data_size=%llu, flags=%u\\n\",\n                (void *)queue_id,\n                (queue_name != NULL) ? queue_name : \"(null)\",\n                (unsigned long long)queue_depth,\n                (unsigned long long)data_size,\n                (unsigned)flags);\n        fflush(logf);\n    }\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_OBJECT_TABLE_GET -> queue=%p (token address=%p)\\n\", (void *)queue, (void *)&token);\n            fflush(logf);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        /* Log state after init (queue_name should now be set by OS_OBJECT_INIT) */\n        if (logf != NULL)\n        {\n            const char *qname = \"(null)\";\n            if (queue != NULL && queue->queue_name != NULL)\n            {\n                qname = queue->queue_name;\n            }\n            fprintf(logf, \"After OS_OBJECT_INIT: queue=%p, queue->queue_name=%s\\n\", (void *)queue, qname);\n            fflush(logf);\n        }\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log the values written to the queue record to show read-only usage after this point */\n        if (logf != NULL)\n        {\n            unsigned long long md = 0ULL;\n            unsigned long long ms = 0ULL;\n            const char *qname = \"(null)\";\n\n            if (queue != NULL)\n            {\n                md = (unsigned long long)queue->max_depth;\n                ms = (unsigned long long)queue->max_size;\n                if (queue->queue_name != NULL)\n                {\n                    qname = queue->queue_name;\n                }\n            }\n\n            fprintf(logf, \"Queue record initialized: queue=%p, max_depth=%llu, max_size=%llu, queue_name=%s\\n\",\n                    (void *)queue, md, ms, qname);\n            fflush(logf);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_QueueCreate_Impl (token address=%p, flags=%u)\\n\", (void *)&token, (unsigned)flags);\n            fflush(logf);\n        }\n\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueCreate_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdFinalizeNew final return_code=%d, queue_id=%p\\n\", (int)return_code, (void *)queue_id);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation failed, returning %d\\n\", (int)return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}