{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysAddFixedMap calls OS_ObjectIdAllocateNew; that function calls OS_NotifyEvent which invokes the function-pointer OS_SharedGlobalVars.EventHandler. If that event handler (or any function it calls) invokes OS_FileSysAddFixedMap, an indirect recursion occurs (OS_FileSysAddFixedMap -> OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_FileSysAddFixedMap). Because the callback is externally set and not provably unable to call back, this call chain creates a possible indirect self-call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2690.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSysAddFixedMap code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSysAddFixedMap with it.\n  - Your function must have the exact same signature as OS_FileSysAddFixedMap.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSysAddFixedMap to check logs.\n  - Your function MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSysAddFixedMap will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /* Open a log file to record control flow and state. Use append so multiple runs\n     * accumulate evidence. If opening the log fails, continue operation (do not fail). */\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER: OS_FileSysAddFixedMap(filesys_id=%p, phys_path=%s, virt_path=%s)\\n\",\n                    (void *)filesys_id,\n                    (phys_path ? phys_path : \"(null)\"),\n                    (virt_path ? virt_path : \"(null)\"));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"Computed dev_name=%s (phys_path=%s)\\n\",\n                    (dev_name ? dev_name : \"(null)\"),\n                    (phys_path ? phys_path : \"(null)\"));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ERROR: name too long for volume_name: dev_name=%s\\n\",\n                    (dev_name ? dev_name : \"(null)\"));\n            fflush(log);\n            fclose(log);\n        }\n\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    /* Log before calling OS_ObjectIdAllocateNew so that any re-entry will produce\n     * interleaved logs demonstrating the call chain. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdAllocateNew(type=LOCAL_OBJID_TYPE, name=%s)\\n\",\n                    (dev_name ? dev_name : \"(null)\"));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            /* Log token variable address as a surrogate for token identity. Avoid assuming token type. */\n            fprintf(log, \"token local addr=%p\\n\", (void *)&token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesys pointer and token -> filesys mapping for evidence. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Allocated token -> filesys=%p (token_addr=%p)\\n\",\n                        (void *)filesys, (void *)&token);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /* Log before calling the implementation-specific start so re-entry can be observed. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Calling OS_FileSysStartVolume_Impl(token_addr=%p, filesys=%p)\\n\",\n                        (void *)&token, (void *)filesys);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_FileSysStartVolume_Impl returned %ld\\n\", (long)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n\n            /* Log before attempting mount */\n            {\n                FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Calling OS_FileSysMountVolume_Impl(token_addr=%p)\\n\", (void *)&token);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_FileSysMountVolume_Impl(&token);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"OS_FileSysMountVolume_Impl returned %ld\\n\", (long)return_code);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Filesys marked mounted: filesys=%p flags=0x%08x\\n\",\n                            (void *)filesys, (unsigned int)filesys->flags);\n                    fflush(log);\n                    fclose(log);\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Calling OS_ObjectIdFinalizeNew(return_code=%ld, token_addr=%p)\\n\",\n                        (long)return_code, (void *)&token);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %ld, final filesys_id=%p\\n\",\n                        (long)return_code, (void *)filesys_id);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final exit log for the function. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2690.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT: OS_FileSysAddFixedMap return %ld\\n\", (long)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}