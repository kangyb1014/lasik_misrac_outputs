{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: memchr(dev_name, 0, sizeof(filesys->volume_name)) can read up to sizeof(volume_name) bytes starting at dev_name, which is a pointer into phys_path. Nothing guarantees that the remaining bytes of the phys_path object (from dev_name to the end of that object) are at least sizeof(filesys->volume_name). If the basename (dev_name) is shorter than sizeof(volume_name) the call will read past the end of the phys_path object (past its terminating NUL) and thus access beyond the bounds of the object \u2014 violating MISRA C 2023 Rule 21.17. A safe alternative is to use strnlen(dev_name, sizeof(filesys->volume_name)) or ensure the phys_path object is known to be at least that large before calling memchr.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSysAddFixedMap code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSysAddFixedMap with it.\n  - Your function must have the exact same signature as OS_FileSysAddFixedMap.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSysAddFixedMap to check logs.\n  - Your function MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSysAddFixedMap will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /* Minimal entry log to show function was reached (safe even if pointers are NULL) */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2693.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_FileSysAddFixedMap ENTER: filesys_id=%p, phys_path=%p, virt_path=%p\\n\",\n                    (void *)filesys_id, (const void *)phys_path, (const void *)virt_path);\n            fclose(logf);\n        }\n    }\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Detailed logging around the memchr check to capture the violation scenario state */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2693.txt\", \"a\");\n        if (logf != NULL)\n        {\n            size_t volname_size = sizeof(filesys->volume_name);\n            size_t phys_len = 0;\n            size_t dev_remain = 0;\n            ptrdiff_t dev_offset = 0;\n\n            /* phys_path should be a NUL-terminated string per earlier checks; guard with try-catch behavior by using strlen */\n            phys_len = strlen(phys_path);\n            dev_remain = strlen(dev_name) + 1; /* remaining bytes from dev_name to NUL, inclusive */\n            dev_offset = (ptrdiff_t)(dev_name - phys_path);\n\n            fprintf(logf, \"OS_FileSysAddFixedMap: dev_name=%p (offset=%td), volname_size=%zu, phys_len=%zu, dev_remain=%zu, phys_path=\\\"%s\\\", dev_name_fragment=\\\"%s\\\"\\n\",\n                    (const void *)dev_name, dev_offset, volname_size, phys_len, dev_remain, phys_path, dev_name);\n            fclose(logf);\n        }\n    }\n\n    /* Original memchr check (kept identical semantics but logged) */\n    {\n        void *memchr_res = memchr(dev_name, 0, sizeof(filesys->volume_name));\n\n        /* Log memchr result and whether it indicates a too-long name */\n        FILE *logf = fopen(\"/tmp/logs/2693.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_FileSysAddFixedMap: memchr(dev_name, 0, %zu) returned %p\\n\",\n                    sizeof(filesys->volume_name), memchr_res);\n            fclose(logf);\n        }\n\n        if (memchr_res == NULL)\n        {\n            /* Log the imminent return for easier reproduction */\n            FILE *logf2 = fopen(\"/tmp/logs/2693.txt\", \"a\");\n            if (logf2 != NULL)\n            {\n                fprintf(logf2, \"OS_FileSysAddFixedMap: returning OS_ERR_NAME_TOO_LONG\\n\");\n                fclose(logf2);\n            }\n            return OS_ERR_NAME_TOO_LONG;\n        }\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    /* Final log for exit */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2693.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_FileSysAddFixedMap EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}