{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) without guaranteeing that the source string nameval has a NUL terminator within the accessible bounds. If nameval does not have a NUL within its allocated/accessible region (for example nameval points to an unterminated buffer smaller than sizeof(ref->namefield)-1), strncpy will keep reading until it finds a NUL or until the copy loop logic accesses memory beyond the source object \u2014 this is an out\u2011of\u2011bounds access and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSysAddFixedMap code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSysAddFixedMap with it.\n  - Your function must have the exact same signature as OS_FileSysAddFixedMap.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSysAddFixedMap to check logs.\n  - Your function MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSysAddFixedMap will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /* Minimal entry probe to show the function was reached. Open/close quickly to avoid resource leak on early return. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2693.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FileSysAddFixedMap: enter filesys_id=%p phys_path=%p virt_path=%p\\n\", (void *)filesys_id, (const void *)phys_path, (const void *)virt_path);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /* Open log for the rest of the detailed traces */\n    FILE *log = fopen(\"/tmp/logs/2693.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Compute sizes of the destination buffers in a way that does not dereference filesys. */\n        size_t system_mountpt_size = sizeof(((OS_filesys_internal_record_t *)0)->system_mountpt);\n        size_t volume_name_size    = sizeof(((OS_filesys_internal_record_t *)0)->volume_name);\n        size_t virtual_mountpt_size = sizeof(((OS_filesys_internal_record_t *)0)->virtual_mountpt);\n\n        /* Log validated pointer addresses and safe information about the source strings. */\n        /* phys_path: determine if NUL exists within system_mountpt_size */\n        const void *phys_nul = memchr(phys_path, 0, system_mountpt_size);\n        size_t phys_len = (phys_nul != NULL) ? ((const char *)phys_nul - phys_path) : system_mountpt_size;\n        if (phys_nul != NULL)\n        {\n            fprintf(log, \"phys_path@%p NUL_found within %zu bytes, len=%zu\\n\", (const void *)phys_path, system_mountpt_size, phys_len);\n        }\n        else\n        {\n            fprintf(log, \"phys_path@%p NO_NUL_within %zu bytes (len>=%zu)\\n\", (const void *)phys_path, system_mountpt_size, system_mountpt_size);\n        }\n\n        /* virt_path: be conservative and only scan a reasonable bound (virtual_mountpt_size) */\n        const void *virt_nul = memchr(virt_path, 0, virtual_mountpt_size);\n        size_t virt_len = (virt_nul != NULL) ? ((const char *)virt_nul - virt_path) : virtual_mountpt_size;\n        if (virt_nul != NULL)\n        {\n            fprintf(log, \"virt_path@%p NUL_found within %zu bytes, len=%zu\\n\", (const void *)virt_path, virtual_mountpt_size, virt_len);\n        }\n        else\n        {\n            fprintf(log, \"virt_path@%p NO_NUL_within %zu bytes (len>=%zu)\\n\", (const void *)virt_path, virtual_mountpt_size, virtual_mountpt_size);\n        }\n\n        fflush(log);\n    }\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (log != NULL)\n    {\n        size_t volume_name_size = sizeof(((OS_filesys_internal_record_t *)0)->volume_name);\n        const void *dev_nul = memchr(dev_name, 0, volume_name_size);\n        size_t dev_len = (dev_nul != NULL) ? ((const char *)dev_nul - dev_name) : volume_name_size;\n        if (dev_nul != NULL)\n        {\n            fprintf(log, \"dev_name@%p NUL_found within %zu bytes, len=%zu\\n\", (const void *)dev_name, volume_name_size, dev_len);\n        }\n        else\n        {\n            fprintf(log, \"dev_name@%p NO_NUL_within %zu bytes (len>=%zu) -- will return OS_ERR_NAME_TOO_LONG before allocation\\n\", (const void *)dev_name, volume_name_size, volume_name_size);\n        }\n        fflush(log);\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"dev_name check failed: returning OS_ERR_NAME_TOO_LONG\\n\");\n            fclose(log);\n        }\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew succeeded token@%p filesys@%p\\n\", (void *)&token, (void *)filesys);\n            fflush(log);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"About to strncpy volume_name from dev_name@%p size=%zu\\n\", (const void *)dev_name, (size_t)(sizeof(filesys->volume_name) - 1));\n            fprintf(log, \"About to strncpy system_mountpt from phys_path@%p size=%zu\\n\", (const void *)phys_path, (size_t)(sizeof(filesys->system_mountpt) - 1));\n            fprintf(log, \"About to strncpy virtual_mountpt from virt_path@%p size=%zu\\n\", (const void *)virt_path, (size_t)(sizeof(filesys->virtual_mountpt) - 1));\n            fflush(log);\n        }\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /* After copies, log whether the destinations contain a NUL within their buffer sizes. */\n        if (log != NULL)\n        {\n            /* volume_name */\n            {\n                const void *vn = memchr(filesys->volume_name, 0, sizeof(filesys->volume_name));\n                if (vn != NULL)\n                {\n                    size_t vlen = (const char *)vn - (const char *)filesys->volume_name;\n                    fprintf(log, \"filesys->volume_name@%p NUL found within %zu bytes, len=%zu\\n\", (void *)filesys->volume_name, sizeof(filesys->volume_name), vlen);\n                }\n                else\n                {\n                    fprintf(log, \"filesys->volume_name@%p NO NUL found within %zu bytes after strncpy - potential unterminated destination\\n\", (void *)filesys->volume_name, sizeof(filesys->volume_name));\n                }\n            }\n\n            /* system_mountpt */\n            {\n                const void *sn = memchr(filesys->system_mountpt, 0, sizeof(filesys->system_mountpt));\n                if (sn != NULL)\n                {\n                    size_t slen = (const char *)sn - (const char *)filesys->system_mountpt;\n                    fprintf(log, \"filesys->system_mountpt@%p NUL found within %zu bytes, len=%zu\\n\", (void *)filesys->system_mountpt, sizeof(filesys->system_mountpt), slen);\n                }\n                else\n                {\n                    fprintf(log, \"filesys->system_mountpt@%p NO NUL found within %zu bytes after strncpy - potential unterminated destination\\n\", (void *)filesys->system_mountpt, sizeof(filesys->system_mountpt));\n                }\n            }\n\n            /* virtual_mountpt */\n            {\n                const void *vn = memchr(filesys->virtual_mountpt, 0, sizeof(filesys->virtual_mountpt));\n                if (vn != NULL)\n                {\n                    size_t vlen = (const char *)vn - (const char *)filesys->virtual_mountpt;\n                    fprintf(log, \"filesys->virtual_mountpt@%p NUL found within %zu bytes, len=%zu\\n\", (void *)filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt), vlen);\n                }\n                else\n                {\n                    fprintf(log, \"filesys->virtual_mountpt@%p NO NUL found within %zu bytes after strncpy - potential unterminated destination\\n\", (void *)filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n                }\n            }\n\n            fflush(log);\n        }\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FileSysStartVolume_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Finalize returned %ld, final filesys_id=%p\\n\", (long)return_code, (void *)filesys_id);\n            fflush(log);\n            fclose(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew failed with %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}