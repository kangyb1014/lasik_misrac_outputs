{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ConsoleAPI_Init calls OS_ObjectIdAllocateNew, which calls OS_NotifyEvent. OS_NotifyEvent invokes a user-supplied EventHandler callback. If that EventHandler calls OS_ConsoleAPI_Init (or OS_ObjectIdAllocateNew) again, this creates an indirect recursion: OS_ConsoleAPI_Init -> OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_ConsoleAPI_Init (or OS_ObjectIdAllocateNew). Therefore the fragment can lead to an indirect self-call and violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/780.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleAPI_Init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleAPI_Init with it.\n  - Your function must have the exact same signature as OS_ConsoleAPI_Init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleAPI_Init to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleAPI_Init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n    /* Re-entrancy / tracing counter to help reveal indirect recursion */\n    static int                     s_entry_depth = 0;\n\n    /* Minimal trace: append logs to a known file for other agents to inspect. */\n    {\n        FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n        if (log)\n        {\n            s_entry_depth++;\n            fprintf(log, \"OS_ConsoleAPI_Init: ENTRY depth=%d\\n\", s_entry_depth);\n            fclose(log);\n        }\n    }\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ConsoleAPI_Init: calling OS_ObjectIdAllocateNew(type=%d, name=\\\"%s\\\")\\n\",\n                    (int)OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n        if (log)\n        {\n            /* token is an opaque OS_object_token_t; cast to unsigned long for logging purposes */\n            fprintf(log, \"OS_ConsoleAPI_Init: OS_ObjectIdAllocateNew returned %ld, token=%lu\\n\",\n                    (long)return_code, (unsigned long)token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: OS_OBJECT_TABLE_GET -> console=%p\\n\", (void *)console);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: after init BufBase=%p BufSize=%zu IsAsync=%d\\n\",\n                        (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n                fclose(log);\n            }\n        }\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: calling OS_ConsoleCreate_Impl with token=%lu\\n\", (unsigned long)token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: OS_ConsoleCreate_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: OS_ObjectIdFinalizeNew returned %ld, final PrintfConsoleId=%lu\\n\",\n                        (long)return_code, (unsigned long)OS_SharedGlobalVars.PrintfConsoleId);\n                fclose(log);\n            }\n        }\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n\n        {\n            FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ConsoleAPI_Init: enabled PrintfEnabled=true\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/780.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ConsoleAPI_Init: EXIT return=%ld depth=%d\\n\", (long)return_code, s_entry_depth);\n            fclose(log);\n        }\n    }\n\n    /* Decrement entry depth after logging exit */\n    if (s_entry_depth > 0)\n    {\n        s_entry_depth--;\n    }\n\n    return return_code;\n}\n"
}