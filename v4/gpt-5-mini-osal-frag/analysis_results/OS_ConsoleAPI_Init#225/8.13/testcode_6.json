{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_INIT expands to an assignment of OS_PRINTF_CONSOLE_NAME (a string literal) to the record field device_name. If the field is declared as a non-const pointer/array (e.g. char *device_name or char device_name[] used via pointer assignment) then this makes a non-const-qualified pointer point at a string literal (which should be const). That violates MISRA C 2023 Rule 8.13. A fix is to declare the field as const char * (or otherwise copy the literal into a mutable buffer), so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/785.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleAPI_Init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleAPI_Init with it.\n  - Your function must have the exact same signature as OS_ConsoleAPI_Init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleAPI_Init to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleAPI_Init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Open log file for writing trace information about control flow and state. */\n    FILE *log = fopen(\"/tmp/logs/785.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ConsoleAPI_Init\\n\");\n    }\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n    if (log)\n    {\n        fprintf(log, \"After memset(OS_console_table)\\n\");\n    }\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew returned %d, token=%u\\n\", (int)return_code, (unsigned)token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n        if (log)\n        {\n            fprintf(log, \"Obtained console record at %p for token=%u\\n\", (void *)console, (unsigned)token);\n        }\n\n        /* Probe: record device_name pointer/value before initialization */\n        if (log)\n        {\n            /* Attempt to print the pointer value prior to OS_OBJECT_INIT */\n            void *before_ptr = NULL;\n\n            /* Some implementations use an array for device_name; taking its address yields a pointer to the first char.\n               Use a conservative read via assignment to void* for logging. */\n            /* Note: if console is valid, attempt to capture the current pointer/value. */\n            if (console != NULL)\n            {\n                before_ptr = (void *)console->device_name;\n            }\n            fprintf(log, \"device_name before OS_OBJECT_INIT: %p\\n\", before_ptr);\n            fprintf(log, \"OS_PRINTF_CONSOLE_NAME literal address: %p\\n\", (void *)OS_PRINTF_CONSOLE_NAME);\n            fflush(log);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /* Probe: record device_name pointer/value after initialization */\n        if (log)\n        {\n            void *after_ptr = NULL;\n            const char *content = NULL;\n\n            if (console != NULL)\n            {\n                after_ptr = (void *)console->device_name;\n                /* Attempt to safely reference the string content if non-NULL */\n                if (console->device_name != NULL)\n                {\n                    content = console->device_name;\n                }\n            }\n\n            fprintf(log, \"device_name after OS_OBJECT_INIT: %p\\n\", after_ptr);\n            fprintf(log, \"OS_PRINTF_CONSOLE_NAME literal address (re-log): %p\\n\", (void *)OS_PRINTF_CONSOLE_NAME);\n\n            if (after_ptr != NULL)\n            {\n                /* Guard printing the string content to avoid crashes in abnormal cases. */\n                if (content != NULL)\n                {\n                    fprintf(log, \"device_name content starts: '%s'\\n\", content);\n                }\n                else\n                {\n                    fprintf(log, \"device_name content is NULL\\n\");\n                }\n            }\n\n            if (after_ptr == (void *)OS_PRINTF_CONSOLE_NAME)\n            {\n                fprintf(log, \"NOTICE: device_name pointer equals the OS_PRINTF_CONSOLE_NAME literal address.\\n\");\n            }\n            else\n            {\n                fprintf(log, \"NOTICE: device_name pointer does NOT equal the OS_PRINTF_CONSOLE_NAME literal address.\\n\");\n            }\n\n            fflush(log);\n        }\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        if (log)\n        {\n            fprintf(log, \"Set BufBase=%p BufSize=%u IsAsync=%d\\n\",\n                    (void *)console->BufBase, (unsigned)console->BufSize, (int)console->IsAsync);\n            fflush(log);\n        }\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_ConsoleCreate_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned %d, final PrintfConsoleId=%u\\n\", (int)return_code,\n                    (unsigned)OS_SharedGlobalVars.PrintfConsoleId);\n            fflush(log);\n        }\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        if (log)\n        {\n            fprintf(log, \"PrintfEnabled set to true\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew did not return success; skipping console init.\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_ConsoleAPI_Init returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}