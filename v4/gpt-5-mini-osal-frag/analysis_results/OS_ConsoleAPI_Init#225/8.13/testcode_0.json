{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_ObjectIdAllocateNew declares the name parameter as a non-const pointer (e.g. char *name) while OS_PRINTF_CONSOLE_NAME is a string literal or otherwise not intended to be modified, then passing OS_PRINTF_CONSOLE_NAME to that non-const parameter violates MISRA C 2023 Rule 8.13. Example violating prototype: int32 OS_ObjectIdAllocateNew(uint32 type, char *name, OS_object_token_t *token); \u2014 the parameter should be const char *name (or OS_PRINTF_CONSOLE_NAME should be a writable buffer) to satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/785.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleAPI_Init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleAPI_Init with it.\n  - Your function must have the exact same signature as OS_ConsoleAPI_Init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleAPI_Init to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleAPI_Init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ConsoleAPI_Init(void)\n{\n    /* Forward-declare FILE type and I/O functions to avoid adding includes here. */\n    typedef struct __FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n    FILE                         *log = NULL;\n\n    /* Attempt to open log for append; continue even if logging is unavailable. */\n    log = fopen(\"/tmp/logs/785.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ConsoleAPI_Init\\n\");\n\n        /* Log the console name pointer and contents (if available). */\n        /* OS_PRINTF_CONSOLE_NAME is expected to be a string literal or buffer. */\n        fprintf(log, \"OS_PRINTF_CONSOLE_NAME pointer=%p\\n\", (void *)OS_PRINTF_CONSOLE_NAME);\n        /* Attempt to print the string value; if not a valid C string this may produce undefined output,\n         * but it is useful evidence for the violation scenario where a string literal is passed to\n         * a non-const parameter. */\n        fprintf(log, \"OS_PRINTF_CONSOLE_NAME value=\\\"%s\\\"\\n\", OS_PRINTF_CONSOLE_NAME);\n    }\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    if (log)\n    {\n        fprintf(log, \"After memset: OS_console_table cleared\\n\");\n        fprintf(log, \"Calling OS_ObjectIdAllocateNew(type=%u, name_ptr=%p)\\n\",\n                (unsigned)OS_OBJECT_TYPE_OS_CONSOLE, (void *)OS_PRINTF_CONSOLE_NAME);\n    }\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew returned: %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            /* Log token address as opaque evidence (structure layout unknown here). */\n            fprintf(log, \"Allocation succeeded; token address=%p\\n\", (void *)&token);\n        }\n\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        if (log)\n        {\n            fprintf(log, \"OS_OBJECT_INIT called with name_ptr=%p\\n\", (void *)OS_PRINTF_CONSOLE_NAME);\n        }\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        if (log)\n        {\n            fprintf(log, \"Console buffer initialized: BufBase=%p BufSize=%u IsAsync=%d\\n\",\n                    (void *)console->BufBase, (unsigned)console->BufSize, (int)console->IsAsync);\n        }\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ConsoleCreate_Impl returned: %ld\\n\", (long)return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned: %ld\\n\", (long)return_code);\n        }\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n\n        if (log)\n        {\n            fprintf(log, \"PrintfEnabled set to true\\n\");\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"Allocation failed; return_code=%ld\\n\", (long)return_code);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_ConsoleAPI_Init returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}