{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference pointers that are neither validated nor guaranteed to point to NUL-terminated strings. For example, if UT_Stub_RegisterReturnType was previously called with TypeName == NULL (or with a pointer to a non-NUL-terminated buffer), then StubPtr->Data.Buff.ContentTypeStr may be NULL or not NUL-terminated. Later UT_Stub_GetReturnValuePtr calls strcmp without checking either pointer, causing strcmp to read beyond the bounds of the referenced object (or dereference a NULL), violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarUnlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1803.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarUnlock:\n```c\nint32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarUnlock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarUnlock code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarUnlock with it.\n  - Your function must have the exact same signature as OS_CondVarUnlock.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarUnlock to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarUnlock as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarUnlock will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarUnlock as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarUnlock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log: entry and parameter */\n    {\n        FILE *log = fopen(\"/tmp/logs/1803.txt\", \"a\");\n        if (log)\n        {\n            /* Print the function entry and the raw var_id value if it is an integral type.\n               Cast to unsigned long long to avoid format warnings on most platforms. */\n            fprintf(log, \"OS_CondVarUnlock ENTER: var_id=%llu\\n\", (unsigned long long)(var_id));\n            fprintf(log, \"OS_CondVarUnlock: token stack address=%p\\n\", (void *)&token);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log: result of ObjectIdGetById */\n    {\n        FILE *log = fopen(\"/tmp/logs/1803.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CondVarUnlock: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation */\n        {\n            FILE *log = fopen(\"/tmp/logs/1803.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_CondVarUnlock: calling OS_CondVarUnlock_Impl with token_addr=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CondVarUnlock_Impl(&token);\n\n        /* Log after calling implementation */\n        {\n            FILE *log = fopen(\"/tmp/logs/1803.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_CondVarUnlock: OS_CondVarUnlock_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Log: exit and return code */\n    {\n        FILE *log = fopen(\"/tmp/logs/1803.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CondVarUnlock EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}