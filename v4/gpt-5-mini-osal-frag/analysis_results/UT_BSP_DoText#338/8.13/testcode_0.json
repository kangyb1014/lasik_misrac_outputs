{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment violates MISRA C 2023 Rule 8.13 if OS_BSP_ConsoleOutput_Impl's first parameter is declared as a non-const pointer (e.g. 'char *'). Passing the string literal \"\\n\" to a non-const 'char *' parameter implies the pointer should instead be const-qualified. The fix is to declare the function parameter as 'const char *' (e.g. OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)). If the function already takes 'const char *' there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2365.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_BSP_DoText code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_BSP_DoText with it.\n  - Your function must have the exact same signature as UT_BSP_DoText.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_BSP_DoText to check logs.\n  - Your function MUST preserve the original logic of UT_BSP_DoText as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_BSP_DoText will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Open probe log */\n    FILE *probe_log = fopen(\"/tmp/logs/2365.txt\", \"a\");\n    if (probe_log)\n    {\n        fprintf(probe_log, \"ENTER UT_BSP_DoText: MessageType=%u, OutputMessage=%p, OutputMessage_str='%s', CurrVerbosity=%u, MsgEnabled=%u\\n\",\n                (unsigned)MessageType,\n                (void *)OutputMessage,\n                (OutputMessage != NULL) ? OutputMessage : \"(null)\",\n                (unsigned)BSP_UT_Global.CurrVerbosity,\n                (unsigned)MsgEnabled);\n        fflush(probe_log);\n    }\n\n    /* Canonical pointers to detect literal usage in calls below */\n    const char *literal_newline = \"\\n\";\n    const char *literal_space   = \" \";\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n        if (probe_log)\n        {\n            fprintf(probe_log, \"  Path: message enabled -> entering critical section\\n\");\n            fflush(probe_log);\n        }\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                if (probe_log)\n                {\n                    fprintf(probe_log, \"  Case: BEGIN -> about to call OS_BSP_ConsoleOutput_Impl with literal newline (%p). Matches literal_newline=%d\\n\",\n                            (void *)literal_newline,\n                            (literal_newline == \"\\n\") ? 1 : 0);\n                    fflush(probe_log);\n                }\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n            if (probe_log)\n            {\n                fprintf(probe_log, \"  MsgEnabled <= 1 -> forcing TermModeBits to NORMAL\\n\");\n                fflush(probe_log);\n            }\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n        if (probe_log)\n        {\n            fprintf(probe_log, \"  Formatted Buffer='%s' (addr=%p)\\n\", Buffer, (void *)Buffer);\n            fflush(probe_log);\n        }\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"  Setting console mode to 0x%08X\\n\", (unsigned)TermModeBits);\n                fflush(probe_log);\n            }\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        if (probe_log)\n        {\n            void *buf_ptr = (void *)Buffer;\n            fprintf(probe_log, \"  Calling OS_BSP_ConsoleOutput_Impl with Buffer ptr=%p, content='%s', len=%u\\n\",\n                    buf_ptr, Buffer, (unsigned)strlen(Buffer));\n            fflush(probe_log);\n        }\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"  Restoring console mode to NORMAL\\n\");\n                fflush(probe_log);\n            }\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"  Calling OS_BSP_ConsoleOutput_Impl with space literal ptr=%p. Matches literal_space=%d\\n\",\n                    (void *)literal_space,\n                    (literal_space == \" \") ? 1 : 0);\n            fflush(probe_log);\n        }\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n        if (probe_log)\n        {\n            fprintf(probe_log, \"  OutputMessage ptr=%p, reported MsgLen=%u, preview='%.32s'\\n\",\n                    (void *)OutputMessage, (unsigned)MsgLen, OutputMessage ? OutputMessage : \"(null)\");\n            fflush(probe_log);\n        }\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"  OutputMessage does not end with newline -> calling OS_BSP_ConsoleOutput_Impl with literal newline ptr=%p\\n\",\n                        (void *)literal_newline);\n                fflush(probe_log);\n            }\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"  Exiting message-enabled path and released lock\\n\");\n            fflush(probe_log);\n        }\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        if (probe_log)\n        {\n            fprintf(probe_log, \"EXIT UT_BSP_DoText: MessageType is ABORT -> calling OS_BSP_Shutdown_Impl()\\n\");\n            fflush(probe_log);\n        }\n        OS_BSP_Shutdown_Impl();\n    }\n    else\n    {\n        if (probe_log)\n        {\n            fprintf(probe_log, \"EXIT UT_BSP_DoText: normal exit\\n\");\n            fflush(probe_log);\n        }\n    }\n\n    if (probe_log)\n    {\n        fclose(probe_log);\n    }\n}\n"
}