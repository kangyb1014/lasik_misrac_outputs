{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignments to TermModeBits within the switch (cases UTASSERT_CASETYPE_ABORT, UTASSERT_CASETYPE_FAILURE, UTASSERT_CASETYPE_MIR, UTASSERT_CASETYPE_WARN, UTASSERT_CASETYPE_TSF, UTASSERT_CASETYPE_TTF, UTASSERT_CASETYPE_PASS) can be executed but then always overwritten when MsgEnabled == 1 by the subsequent if (MsgEnabled <= 1) { TermModeBits = OS_BSP_CONSOLEMODE_NORMAL; } before TermModeBits is ever used. In that runtime case those earlier assignments have no effect and could be removed without changing program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2368.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_BSP_DoText code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_BSP_DoText with it.\n  - Your function must have the exact same signature as UT_BSP_DoText.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_BSP_DoText to check logs.\n  - Your function MUST preserve the original logic of UT_BSP_DoText as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_BSP_DoText will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n    uint32 PrevTermModeBits = TermModeBits;\n\n    /* Open a log file to capture control flow and state for debugging the potential dead-code scenario. */\n    FILE *logf = fopen(\"/tmp/logs/2368.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER UT_BSP_DoText: MessageType=%u, OutputMessage=%s, MsgEnabled=%u\\n\",\n                (unsigned)MessageType,\n                (OutputMessage != NULL) ? OutputMessage : \"(null)\",\n                (unsigned)MsgEnabled);\n    }\n\n    if (MsgEnabled & 1)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  Branch: MsgEnabled & 1 is true -> will print\\n\");\n        }\n\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                if (logf != NULL) fprintf(logf, \"  switch: case ABORT/FAILURE -> TermModeBits set=0x%08X\\n\", (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                if (logf != NULL) fprintf(logf, \"  switch: case MIR/WARN -> TermModeBits set=0x%08X\\n\", (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                if (logf != NULL) fprintf(logf, \"  switch: case TSF/TTF -> TermModeBits set=0x%08X\\n\", (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                if (logf != NULL) fprintf(logf, \"  switch: case BEGIN -> emit extra newline\\n\");\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                if (logf != NULL) fprintf(logf, \"  switch: case PASS -> TermModeBits set=0x%08X\\n\", (unsigned)TermModeBits);\n                break;\n            default:\n                if (logf != NULL) fprintf(logf, \"  switch: default -> no TermModeBits change (still 0x%08X)\\n\", (unsigned)TermModeBits);\n                break;\n        }\n\n        /* Capture the TermModeBits prior to potential overwrite */\n        PrevTermModeBits = TermModeBits;\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  MsgEnabled <= 1 -> TermModeBits overwritten to NORMAL (prev=0x%08X, now=0x%08X)\\n\",\n                        (unsigned)PrevTermModeBits, (unsigned)TermModeBits);\n            }\n        }\n        else if (logf != NULL)\n        {\n            fprintf(logf, \"  MsgEnabled > 1 -> TermModeBits remains 0x%08X\\n\", (unsigned)TermModeBits);\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (logf != NULL) fprintf(logf, \"  About to set console mode to 0x%08X\\n\", (unsigned)TermModeBits);\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n        else if (logf != NULL)\n        {\n            fprintf(logf, \"  TermModeBits is NORMAL -> no pre-output mode set\\n\");\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n            if (logf != NULL) fprintf(logf, \"  Restored console mode to NORMAL after output\\n\");\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n\n        if (logf != NULL) fprintf(logf, \"  Finished printing message (MsgLen=%u)\\n\", (unsigned)MsgLen);\n    }\n    else\n    {\n        if (logf != NULL) fprintf(logf, \"  Branch: MsgEnabled & 1 is false -> message suppressed\\n\");\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        if (logf != NULL) fprintf(logf, \"EXIT UT_BSP_DoText: MessageType==ABORT -> calling OS_BSP_Shutdown_Impl()\\n\");\n        if (logf != NULL) fclose(logf);\n        OS_BSP_Shutdown_Impl();\n        return;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT UT_BSP_DoText: normal return\\n\");\n        fclose(logf);\n    }\n}\n"
}