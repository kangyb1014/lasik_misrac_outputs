{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TranslatePath the assignments \"SysMountPointLen = 0;\" and \"VirtPathBegin = VirtPathLen;\" are executed but never used: the only code that reads these variables later is inside the block guarded by \"if (return_code == OS_SUCCESS)\". That block can only be reached when OS_ObjectIdGetBySearch returned OS_SUCCESS and the found filesys has OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM set, and in that case both SysMountPointLen and VirtPathBegin are overwritten from filesys (via OS_strnlen) before any use. In all other paths where the initial values would matter the function returns or skips the final section. Thus those two assignments are operations whose removal would not affect program behaviour (dead code), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2068.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_stat with it.\n  - Your function must have the exact same signature as OS_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_stat to check logs.\n  - Your function MUST preserve the original logic of OS_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Logging setup */\n    FILE *logf = fopen(\"/tmp/logs/2068.txt\", \"a\");\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_stat ENTER path=%p filestats=%p\\n\", (const void *)path, (const void *)filestats);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Log initial contents of filestats (first up to 16 bytes) after memset for evidence */\n    if (logf)\n    {\n        int i;\n        int sz = (int)sizeof(*filestats);\n        int to_print = sz < 16 ? sz : 16;\n        unsigned char *p = (unsigned char *)filestats;\n\n        fprintf(logf, \"filestats after memset (first %d bytes):\", to_print);\n        for (i = 0; i < to_print; ++i)\n        {\n            fprintf(logf, \"%02X\", p[i]);\n        }\n        fprintf(logf, \"\\n\");\n    }\n\n    /* Call TranslatePath and log result and local_path for control-flow evidence */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (logf)\n    {\n        /* local_path is typically null-terminated by OS_TranslatePath; guard printing if empty */\n        fprintf(logf, \"OS_TranslatePath returned %ld local_path=\\\"%s\\\"\\n\", (long)return_code,\n                (local_path[0] != '\\0') ? local_path : \"(empty)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_stat: calling OS_FileStat_Impl with local_path=\\\"%s\\\"\\n\",\n                    (local_path[0] != '\\0') ? local_path : \"(empty)\");\n        }\n\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        if (logf)\n        {\n            int i;\n            int sz = (int)sizeof(*filestats);\n            int to_print = sz < 16 ? sz : 16;\n            unsigned char *p2 = (unsigned char *)filestats;\n\n            fprintf(logf, \"OS_FileStat_Impl returned %ld filestats (first %d bytes):\", (long)return_code, to_print);\n            for (i = 0; i < to_print; ++i)\n            {\n                fprintf(logf, \"%02X\", p2[i]);\n            }\n            fprintf(logf, \"\\n\");\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_stat: skipping OS_FileStat_Impl because OS_TranslatePath returned %ld\\n\", (long)return_code);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_stat EXIT return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}