{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable impl is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access (reading impl->selectable and impl->fd); therefore it should be a pointer to const-qualified type. The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); assigns a non-const pointer where a const-qualified pointer could be used in this function, violating MISRA C 2023 Rule 8.13. (Change to const OS_impl_file_internal_record_t *impl to comply.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1005.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle:\n```c\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectSingle code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectSingle with it.\n  - Your function must have the exact same signature as OS_SelectSingle.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectSingle to check logs.\n  - Your function MUST preserve the original logic of OS_SelectSingle as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectSingle will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectSingle as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Attempt to open log for tracing control flow and state for rule-8.13 repro */\n    FILE *log = fopen(\"/tmp/logs/1005.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SelectSingle ENTER: objid=%lu StateFlags_ptr=%p msecs=%ld\\n\",\n                (unsigned long)objid, (void *)StateFlags, (long)msecs);\n        fflush(log);\n    }\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        /* Print token address so callers can correlate token identity with downstream logs */\n        fprintf(log, \"token address=%p\\n\", (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_SelectSingle_Impl with token=%p StateFlags_ptr=%p msecs=%ld\\n\",\n                    (void *)&token, (void *)StateFlags, (long)msecs);\n            fflush(log);\n        }\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SelectSingle_Impl returned %ld\\n\", (long)return_code);\n            /* If StateFlags is valid, log the flags value observed after the impl call */\n            if (StateFlags != NULL)\n            {\n                fprintf(log, \"StateFlags value after impl: %lu\\n\", (unsigned long)*StateFlags);\n            }\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Released token=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Skipping OS_SelectSingle_Impl because ObjectIdGetById failed (code=%ld)\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SelectSingle EXIT return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}