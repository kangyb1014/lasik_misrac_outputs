{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextFree, when max_id == 0 the code sets 'serial = 0;'. In that case the subsequent for-loop (for (i=0; i<max_id; ++i)) is not entered and the function never takes the success path that uses 'serial' (OS_ObjectIdCompose_Impl is only called on success). Thus the assignment is executed but its value is never read \u2014 removing it would not change program behavior. This is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetMaxForObjectType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2838.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetMaxForObjectType:\n```c\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_MAX_TASKS;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_MAX_QUEUES;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_MAX_BIN_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_MAX_COUNT_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MAX_MUTEXES;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_MAX_NUM_OPEN_FILES;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_MAX_NUM_OPEN_DIRS;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_MAX_TIMEBASES;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_MAX_TIMERS;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MAX_MODULES;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_MAX_FILE_SYSTEMS;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_MAX_CONSOLES;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_MAX_CONDVARS;\n        default:\n            return 0;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetMaxForObjectType code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetMaxForObjectType with it.\n  - Your function must have the exact same signature as OS_GetMaxForObjectType.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetMaxForObjectType to check logs.\n  - Your function MUST preserve the original logic of OS_GetMaxForObjectType as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetMaxForObjectType will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetMaxForObjectType as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "uint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    /* Logging probe: append control-flow and state information to a file for debugging */\n    FILE *log_fp = fopen(\"/tmp/logs/2838.txt\", \"a\");\n    if (log_fp != NULL)\n    {\n        fprintf(log_fp, \"OS_GetMaxForObjectType entered: idtype=%d\\n\", (int)idtype);\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n        {\n            uint32 ret = OS_MAX_TASKS;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_TASK -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_QUEUE:\n        {\n            uint32 ret = OS_MAX_QUEUES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_QUEUE -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_BINSEM:\n        {\n            uint32 ret = OS_MAX_BIN_SEMAPHORES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_BINSEM -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n        {\n            uint32 ret = OS_MAX_COUNT_SEMAPHORES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_COUNTSEM -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_MUTEX:\n        {\n            uint32 ret = OS_MAX_MUTEXES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_MUTEX -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_STREAM:\n        {\n            uint32 ret = OS_MAX_NUM_OPEN_FILES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_STREAM -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_DIR:\n        {\n            uint32 ret = OS_MAX_NUM_OPEN_DIRS;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_DIR -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n        {\n            uint32 ret = OS_MAX_TIMEBASES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_TIMEBASE -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_TIMECB:\n        {\n            uint32 ret = OS_MAX_TIMERS;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_TIMECB -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_MODULE:\n        {\n            uint32 ret = OS_MAX_MODULES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_MODULE -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_FILESYS:\n        {\n            uint32 ret = OS_MAX_FILE_SYSTEMS;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_FILESYS -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n        {\n            uint32 ret = OS_MAX_CONSOLES;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_CONSOLE -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n        {\n            uint32 ret = OS_MAX_CONDVARS;\n            if (log_fp) fprintf(log_fp, \"selected case: OS_OBJECT_TYPE_OS_CONDVAR -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n        default:\n        {\n            uint32 ret = 0u;\n            if (log_fp) fprintf(log_fp, \"selected case: default -> %u\\n\", (unsigned)ret);\n            if (log_fp) fclose(log_fp);\n            return ret;\n        }\n    }\n}\n"
}