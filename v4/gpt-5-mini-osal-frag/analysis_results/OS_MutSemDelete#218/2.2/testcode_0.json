{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(token, 0, sizeof(*token)) is executed at the start of OS_ObjectIdTransactionInit but all token members that are subsequently read are explicitly assigned before use (token->lock_mode, token->obj_type, token->obj_idx and later token->obj_id). No observable behavior depends on the initial zeroing of the remaining bytes of the automatic token object in the current code paths, so removing the memset would not change program behaviour. Therefore this memset constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2188.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemDelete with it.\n  - Your function must have the exact same signature as OS_MutSemDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemDelete to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    /* Local prototypes for logging functions and opaque FILE type.\n       These are declared locally so this replacement function can be\n       compiled without adding new headers to the file. They rely on\n       the existing platform providing the usual C library symbols. */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *path, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fflush(FILE *stream);\n    extern int fclose(FILE *stream);\n\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *logf = fopen(\"/tmp/logs/2188.txt\", \"a\");\n\n    if (logf != NULL)\n    {\n        /* Log entry and input id */\n        fprintf(logf, \"OS_MutSemDelete: entered (sem_id=%ld)\\n\", (long)sem_id);\n        fflush(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Dump the raw bytes of the token so callers can observe whether\n               earlier code (e.g. any memset performed in OS_ObjectIdTransactionInit)\n               left the automatic token zeroed. This produces evidence of the\n               token contents at this call site without modifying program state. */\n            unsigned int i;\n            fprintf(logf, \"Token raw bytes (size=%u):\", (unsigned int)sizeof(token));\n            for (i = 0U; i < (unsigned int)sizeof(token); ++i)\n            {\n                fprintf(logf, \" %02X\", ((unsigned char *)&token)[i]);\n            }\n            fprintf(logf, \"\\n\");\n        }\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_MutSemDelete_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n\n    if (logf != NULL)\n    {\n        /* If we didn't close earlier, close now. */\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}