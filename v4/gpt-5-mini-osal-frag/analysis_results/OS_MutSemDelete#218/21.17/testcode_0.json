{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memset can write out of bounds if the caller passes an invalid pointer. OS_ObjectIdTransactionInit does memset(token, 0, sizeof(*token)) without validating that token is non-NULL and points to an object at least sizeof(OS_object_token_t). If token == NULL (or points to a smaller object / wrong type), this will cause writes beyond the bounds of the referenced object (undefined behavior). Although the provided call path (caller uses a local OS_object_token_t and passes &token) is safe, the function itself does not enforce that precondition, so the fragment can violate MISRA C 2023 Rule 21.17 in general use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemDelete with it.\n  - Your function must have the exact same signature as OS_MutSemDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemDelete to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Probe log: entry and initial state */\n    {\n        FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_MutSemDelete: sem_id=%d, token_addr=%p, token_size=%zu\\n\",\n                    (int)sem_id, (void *)&token, sizeof(token));\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of GetById and token state (address/size only; do not dereference) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d for sem_id=%d; token_addr=%p, token_size=%zu\\n\",\n                    return_code, (int)sem_id, (void *)&token, sizeof(token));\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to call implementation; log that we are invoking it with the token pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_MutSemDelete_Impl with token_addr=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log impl return value */\n        {\n            FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_MutSemDelete_Impl returned %d for token_addr=%p\\n\", return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log finalize result */\n        {\n            FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeDelete returned %d for token_addr=%p\\n\", return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Exit log */\n    {\n        FILE *log = fopen(\"/tmp/logs/2183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_MutSemDelete: sem_id=%d, return_code=%d\\n\", (int)sem_id, return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}"
}