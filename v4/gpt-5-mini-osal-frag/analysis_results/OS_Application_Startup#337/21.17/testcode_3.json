{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIn UtList_Create ActualSize bytes are requested via malloc into NewList, but the code calls memset(NewList, 0, ActualSize) without checking the result of malloc. If malloc() fails and returns NULL, calling memset(NULL, ActualSize) will access memory beyond the bounds of the (nonexistent) object and cause undefined behavior. This situation violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/693.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Application_Startup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Application_Startup with it.\n  - Your function must have the exact same signature as OS_Application_Startup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Application_Startup to check logs.\n  - Your function MUST preserve the original logic of OS_Application_Startup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Application_Startup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_Application_Startup(void)\n{\n#include <stdio.h>\n#include <stdlib.h>\n\n    FILE *log = NULL;\n\n    /* Attempt to open log file for append. If the /tmp/logs directory\n     * does not exist, try to create it and reopen the log file. */\n    log = fopen(\"/tmp/logs/693.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* Use system() to create the directory; ignore the return value. */\n        (void)system(\"mkdir -p /tmp/logs\");\n        log = fopen(\"/tmp/logs/693.txt\", \"a\");\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: entered\\n\");\n        fflush(log);\n    }\n\n    /* Log and call UtTest_EarlyInit (preserve original behavior) */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: calling UtTest_EarlyInit()\\n\");\n        fflush(log);\n    }\n    UtTest_EarlyInit();\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: returned from UtTest_EarlyInit()\\n\");\n        fflush(log);\n    }\n\n    /* Log and call UT_BSP_Setup (preserve original behavior) */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: calling UT_BSP_Setup()\\n\");\n        fflush(log);\n    }\n    UT_BSP_Setup();\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: returned from UT_BSP_Setup()\\n\");\n        fflush(log);\n    }\n\n    /* Preserve original SETUP segment behavior, but log around it so\n     * that the control path and timing of the calls are recorded. */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: beginning SETUP segment\\n\");\n        fflush(log);\n    }\n    UtAssert_BeginTest(\"SETUP\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: calling UtTest_Setup()\\n\");\n        fflush(log);\n    }\n    UtTest_Setup();\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: returned from UtTest_Setup()\\n\");\n        fflush(log);\n    }\n\n    UtAssert_EndTest();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Application_Startup: ended SETUP segment and exiting\\n\");\n        fflush(log);\n        (void)fclose(log);\n    }\n}\n"
}