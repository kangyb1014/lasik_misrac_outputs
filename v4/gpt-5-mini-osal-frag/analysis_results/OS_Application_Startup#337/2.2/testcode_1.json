{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NetworkAPI_Init is invoked from OS_API_Init but its body only returns the constant OS_SUCCESS and produces no side-effects. The executed operation (the call/return) can be removed or replaced by directly assigning OS_SUCCESS at the call site without changing program behaviour, so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/698.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Application_Startup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Application_Startup with it.\n  - Your function must have the exact same signature as OS_Application_Startup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Application_Startup to check logs.\n  - Your function MUST preserve the original logic of OS_Application_Startup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Application_Startup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_Application_Startup(void)\n{\n    /* Open log file for appending control-flow/state traces */\n    FILE *log = fopen(\"/tmp/logs/698.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_Application_Startup\\n\");\n        /* Log addresses of the key setup functions so external tools can\n         * correlate symbols and detect no-op implementations at link-time.\n         * Casting to void* is safe for function pointers in most diagnostic uses. */\n        fprintf(log,\n                \"FUNC_ADDR: UtTest_EarlyInit=%p UT_BSP_Setup=%p UtAssert_BeginTest=%p UtTest_Setup=%p UtAssert_EndTest=%p\\n\",\n                (void *)UtTest_EarlyInit,\n                (void *)UT_BSP_Setup,\n                (void *)UtAssert_BeginTest,\n                (void *)UtTest_Setup,\n                (void *)UtAssert_EndTest);\n        fflush(log);\n    }\n\n    /* Preserve original initialization sequence */\n    UtTest_EarlyInit();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: UtTest_EarlyInit completed\\n\");\n        fflush(log);\n    }\n\n    UT_BSP_Setup();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: UT_BSP_Setup completed\\n\");\n        fflush(log);\n    }\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: UtAssert_BeginTest(\\\"SETUP\\\") invoked\\n\");\n        fflush(log);\n    }\n\n    UtTest_Setup();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: UtTest_Setup completed\\n\");\n        fflush(log);\n    }\n\n    UtAssert_EndTest();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: UtAssert_EndTest completed\\n\");\n        fprintf(log, \"EXIT: OS_Application_Startup\\n\\n\");\n        fclose(log);\n    }\n}"
}