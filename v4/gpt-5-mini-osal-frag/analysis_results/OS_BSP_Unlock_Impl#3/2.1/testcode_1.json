{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe condition if (status < 0) can never be true for pthread_mutex_unlock: POSIX specifies that pthread_mutex_unlock returns 0 on success or a non\u2011zero (positive) error number on failure. Therefore status < 0 is always false and the entire if-branch is unreachable. (The BSP_DEBUG macro being defined empty only hides the body, but the branch remains logically unreachable.) Recommended fix: test for non-zero return (e.g. if (status != 0)) or otherwise handle the documented return values.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/96.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_Unlock_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_Unlock_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_Unlock_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_Unlock_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_Unlock_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_Unlock_Impl(void)\n{\n    int status;\n    FILE *log = fopen(\"/tmp/logs/96.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_Unlock_Impl: entered\\n\");\n        fflush(log);\n    }\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_Unlock_Impl: pthread_mutex_unlock returned %d\\n\", status);\n        fflush(log);\n    }\n\n    if (status < 0)\n    {\n        /* Provide a safe string for logging; avoid calling strerror with a negative value */\n        const char *errstr = (status > 0) ? strerror(status) : (status == 0 ? \"No error\" : \"Negative return code\");\n\n        if (log)\n        {\n            fprintf(log, \"OS_BSP_Unlock_Impl: taking status<0 branch (status=%d, strerror=\\\"%s\\\")\\n\", status, errstr);\n            fflush(log);\n        }\n\n        /* Preserve original behavior: call BSP_DEBUG as before. */\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        if (log)\n        {\n            /* Print the cancel state value for diagnostic purposes. Cast to int for portability in format string. */\n            fprintf(log, \"OS_BSP_Unlock_Impl: taking else branch; restoring cancel state %d\\n\", (int)OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fflush(log);\n        }\n\n        /* Restore previous cancellability state (original logic preserved) */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_Unlock_Impl: exiting\\n\");\n        fclose(log);\n    }\n}\n"
}