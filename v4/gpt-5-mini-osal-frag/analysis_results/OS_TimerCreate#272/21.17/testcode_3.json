{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_CHECK_APINAME(timebase_name) expands to OS_CHECK_STRING(...), which (in typical implementations) uses string.h routines such as strlen/strnlen/strncpy. If that helper uses an unbounded strlen (or otherwise reads until a NUL) then a non-terminated or too-long name will cause reads beyond the bounds. Example violation: the caller supplies a name buffer of exactly OS_MAX_API_NAME bytes filled with non-zero characters (no terminating '\\0'), or passes a NULL pointer and OS_CHECK_STRING does not first test for NULL; OS_CHECK_APINAME would invoke strlen(timebase_name) (or similar) and read past the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerCreate with it.\n  - Your function must have the exact same signature as OS_TimerCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TimerCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Simple logging helper: append trace information to the test log file. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - ENTRY\\n\");\n            fprintf(log, \"  timer_id ptr = %p\\n\", (void *)timer_id);\n            fprintf(log, \"  timer_name ptr = %p\\n\", (const void *)timer_name);\n            if (timer_name == NULL)\n            {\n                fprintf(log, \"  timer_name is NULL\\n\");\n            }\n            else\n            {\n                /* Probe only the first byte (safe single dereference) to avoid reading beyond caller-supplied object bounds. */\n                unsigned char first = (unsigned char)timer_name[0];\n                fprintf(log, \"  timer_name[0] = 0x%02x (%c)\\n\", first, (first >= 32 && first < 127) ? first : '.');\n            }\n            fprintf(log, \"  accuracy ptr = %p\\n\", (void *)accuracy);\n            fprintf(log, \"  callback_ptr is %s\\n\", (callback_ptr ? \"non-NULL\" : \"NULL\"));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /* Log that we've passed parameter checks. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - passed parameter checks\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimeBaseCreate returned %ld\\n\", (long)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  timebase_ref_id = %u\\n\", (unsigned)timebase_ref_id);\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log and return the failure code. */\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - aborting because TimeBaseCreate failed (ret=%ld)\\n\", (long)return_code);\n            fflush(log);\n            fclose(log);\n        }\n\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd returned %ld\\n\", (long)return_code);\n            if (return_code != OS_SUCCESS)\n            {\n                fprintf(log, \"  will delete timebase_ref_id = %u\\n\", (unsigned)timebase_ref_id);\n            }\n            else\n            {\n                if (accuracy != NULL)\n                {\n                    fprintf(log, \"  setting accuracy to %u (MicroSecPerTick = %u)\\n\", (unsigned)*accuracy, (unsigned)OS_SharedGlobalVars.MicroSecPerTick);\n                }\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - deleted timebase %u after failure\\n\", (unsigned)timebase_ref_id);\n            fflush(log);\n            fclose(log);\n        }\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - SUCCESS, accuracy set to %u\\n\", (unsigned)*accuracy);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *log = fopen(\"/tmp/logs/1343.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimerCreate - EXIT with code %ld\\n\", (long)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}