{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member 'void *opaque_arg' is used only as an opaque input (assigned from the callback_arg and later read/reinterpreted in OS_Timer_NoArgCallback) and is never used to modify the pointee. According to MISRA C 2023 Rule 8.13 this pointer should point to a const-qualified type (e.g. 'const void *opaque_arg'). Therefore the declaration 'void *opaque_arg' in OS_Timer_ArgWrapper_t violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1345.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerCreate with it.\n  - Your function must have the exact same signature as OS_TimerCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TimerCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    /* Local forward declarations for logging functions to avoid adding headers */\n    typedef struct __FILE FILE;\n    FILE *fopen(const char *filename, const char *mode);\n    int fprintf(FILE *stream, const char *format, ...);\n    int fclose(FILE *stream);\n\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Minimal entry probe so that the function reachability is recorded */\n    {\n        FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            fprintf(log, \"OS_TimerCreate: ENTER (timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p)\\n\",\n                    (void *)timer_id, (const void *)timer_name, (void *)accuracy, (const void *)callback_ptr);\n            fclose(log);\n        }\n    }\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n\n    /* Log the result of TimeBaseCreate and the timebase id if created */\n    {\n        FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            fprintf(log, \"OS_TimerCreate: OS_TimeBaseCreate returned %ld, timebase_ref_id=%lu\\n\",\n                    (long)return_code, (unsigned long)timebase_ref_id);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    /* Log the constructed Conv state just before calling OS_DoTimerAdd */\n    {\n        FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            fprintf(log, \"OS_TimerCreate: Prepared Conv - opaque_arg=%p, timer_callback_func=%p\\n\",\n                    (void *)Conv.opaque_arg, (const void *)Conv.timer_callback_func);\n            fprintf(log, \"OS_TimerCreate: Calling OS_DoTimerAdd with callback=OS_Timer_NoArgCallback and arg=%p\\n\",\n                    (void *)Conv.opaque_arg);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /* Log the return from OS_DoTimerAdd */\n    {\n        FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            fprintf(log, \"OS_TimerCreate: OS_DoTimerAdd returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log that we will delete the timebase */\n        {\n            FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n            if (log != (FILE *)0)\n            {\n                fprintf(log, \"OS_TimerCreate: OS_DoTimerAdd failed, deleting timebase %lu\\n\", (unsigned long)timebase_ref_id);\n                fclose(log);\n            }\n        }\n\n        OS_TimeBaseDelete(timebase_ref_id);\n\n        /* Log that deletion was requested (cannot assume return code) */\n        {\n            FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n            if (log != (FILE *)0)\n            {\n                fprintf(log, \"OS_TimerCreate: Requested OS_TimeBaseDelete for timebase %lu\\n\", (unsigned long)timebase_ref_id);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n\n        /* Log the success and assigned accuracy */\n        {\n            FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n            if (log != (FILE *)0)\n            {\n                fprintf(log, \"OS_TimerCreate: Success - assigned accuracy=%u\\n\", *accuracy);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final return logging */\n    {\n        FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            fprintf(log, \"OS_TimerCreate: EXIT returning %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}