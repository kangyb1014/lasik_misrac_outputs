{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes VirtualPath pointing to an object smaller than OS_MAX_PATH_LEN (for example a char array of length 10 that does not contain a '\\0' within the first OS_MAX_PATH_LEN bytes), OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may read up to OS_MAX_PATH_LEN bytes and thus access memory beyond the bounds of that object, causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rename code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rename with it.\n  - Your function must have the exact same signature as OS_rename.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rename to check logs.\n  - Your function MUST preserve the original logic of OS_rename as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rename will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rename as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file (create directory if necessary). Keep non-fatal if logging fails.) */\n    FILE *log = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (!log)\n    {\n        /* Try to create the directory and reopen. Use system as a best-effort attempt. */\n        (void)system(\"/bin/mkdir -p /tmp/logs\");\n        log = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rename ENTER: old=%p new=%p\\n\", (void *)old, (void *)new);\n        fflush(log);\n    }\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (log)\n    {\n        fprintf(log, \"After OS_TranslatePath(old): return_code=%ld old_path='%s'\\n\", (long)return_code,\n                (return_code == OS_SUCCESS) ? old_path : \"<invalid>\");\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        if (log)\n        {\n            fprintf(log, \"After OS_TranslatePath(new): return_code=%ld new_path='%s'\\n\", (long)return_code,\n                    (return_code == OS_SUCCESS) ? new_path : \"<invalid>\");\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        if (log)\n        {\n            fprintf(log, \"After OS_FileRename_Impl: return_code=%ld old_path='%s' new_path='%s'\\n\",\n                    (long)return_code, old_path, new_path);\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        if (log)\n        {\n            fprintf(log, \"Iterating active local objects...\\n\");\n            fflush(log);\n        }\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (log)\n            {\n                /* Log stream token and the stored stream name (safe to read). */\n                fprintf(log, \"  iterator token=%u stream_name='%s' socket_domain=%d\\n\",\n                        (unsigned)iter.token,\n                        stream->stream_name,\n                        (int)stream->socket_domain);\n                fflush(log);\n            }\n\n            /* Preserve original behavior: compare stream->stream_name to caller-provided 'old'.\n               This is where callers passing non-null-terminated or undersized buffers for\n               'old' may cause functions like strcmp/strnlen elsewhere to read out of bounds.\n               We compute the comparison result into a temp so we can log it. */\n            if (stream->socket_domain == OS_SocketDomain_INVALID)\n            {\n                int cmp_result = strcmp(stream->stream_name, old);\n                if (log)\n                {\n                    fprintf(log, \"    strcmp(stream->stream_name, old) => %d\\n\", cmp_result);\n                    fflush(log);\n                }\n\n                if (cmp_result == 0)\n                {\n                    if (log)\n                    {\n                        fprintf(log, \"    Match found \u2014 renaming stream '%s' to '%s' (token=%u)\\n\",\n                                stream->stream_name, new, (unsigned)iter.token);\n                        fflush(log);\n                    }\n\n                    /* Perform the same strncpy and null-termination as original code. */\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                    if (log)\n                    {\n                        fprintf(log, \"    After rename stream_name='%s'\\n\", stream->stream_name);\n                        fflush(log);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        if (log)\n        {\n            fprintf(log, \"Finished iterating local objects.\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rename EXIT: return_code=%ld\\n\", (long)return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}