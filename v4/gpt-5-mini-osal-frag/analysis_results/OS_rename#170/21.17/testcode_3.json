{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer over-read of stream->stream_name: strcmp(stream->stream_name, old) reads byte-by-byte until a '\\0' is found. If stream->stream_name is not guaranteed to contain a terminating NUL within its OS_MAX_PATH_LEN bytes (for example, if the record was initialized/updated elsewhere using memcpy or an unterminated strncpy, or the entry is uninitialized/corrupted), strcmp can read past the bounds of stream->stream_name and thus violate Rule 21.17. (Note: the 'old' argument is validated earlier by OS_TranslatePath when OS_rename proceeds, so the risk is the stream->stream_name side.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rename code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rename with it.\n  - Your function must have the exact same signature as OS_rename.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rename to check logs.\n  - Your function MUST preserve the original logic of OS_rename as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rename will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rename as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for appending; if this fails, continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/2383.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n--- OS_rename ENTER ---\\n\");\n        fprintf(log, \"params: old=%p new=%p\\n\", (void *)old, (void *)new);\n        /* Safely print a preview of the 'old' and 'new' strings (bounded) */\n        fprintf(log, \"old preview: \");\n        if (old)\n        {\n            for (int i = 0; i < 64 && old[i] != '\\0'; ++i) fputc(old[i], log);\n            if (old[63] != '\\0') fprintf(log, \"...\");\n        }\n        else\n        {\n            fprintf(log, \"(NULL)\");\n        }\n        fprintf(log, \"\\n\");\n\n        fprintf(log, \"new preview: \");\n        if (new)\n        {\n            for (int i = 0; i < 64 && new[i] != '\\0'; ++i) fputc(new[i], log);\n            if (new[63] != '\\0') fprintf(log, \"...\");\n        }\n        else\n        {\n            fprintf(log, \"(NULL)\");\n        }\n        fprintf(log, \"\\n\");\n    }\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (log) fprintf(log, \"OS_TranslatePath(old) -> %ld\\n\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        if (log) fprintf(log, \"OS_TranslatePath(new) -> %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        if (log) fprintf(log, \"OS_FileRename_Impl -> %ld (old_path=%s new_path=%s)\\n\", (long)return_code, old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log) fprintf(log, \"Starting object table iteration\\n\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n            if (log)\n            {\n                fprintf(log, \"iter token=%u stream=%p socket_domain=%d\\n\", (unsigned)iter.token, (void *)stream, (int)stream->socket_domain);\n\n                /* Log a safe, bounded hex-dump of the stream_name buffer to detect unterminated strings. */\n                size_t bufsize = sizeof(stream->stream_name);\n                fprintf(log, \"stream_name hex dump (size=%zu):\", bufsize);\n                for (size_t i = 0; i < bufsize; ++i)\n                {\n                    fprintf(log, \" %02x\", (unsigned)((unsigned char)stream->stream_name[i]));\n                }\n                fprintf(log, \"\\n\");\n\n                /* Find first NUL within the buffer (if any) */\n                int nul_index = -1;\n                for (size_t i = 0; i < bufsize; ++i)\n                {\n                    if (stream->stream_name[i] == '\\0')\n                    {\n                        nul_index = (int)i;\n                        break;\n                    }\n                }\n                if (nul_index >= 0)\n                {\n                    fprintf(log, \"stream_name first NUL at index %d; printable preview: \", nul_index);\n                    for (int i = 0; i < nul_index && i < 128; ++i) fputc(stream->stream_name[i], log);\n                    if (nul_index > 128) fprintf(log, \"...\");\n                    fprintf(log, \"\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"stream_name contains NO NUL within buffer (potential unterminated string)\\n\");\n                }\n\n                /* Note: 'old' is expected to be validated earlier; we still log a safe preview. */\n                fprintf(log, \"about to compare stream->stream_name with old using strcmp\\n\");\n                fflush(log);\n            }\n\n            /* Preserve original comparison logic. This is the operation that can cause an over-read\n             * if stream->stream_name is not NUL-terminated. We keep it unchanged to allow detection.\n             */\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                if (log) fprintf(log, \"strcmp matched: performing strncpy to update stream_name\\n\");\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                if (log)\n                {\n                    fprintf(log, \"stream_name updated; new hex dump:\");\n                    for (size_t i = 0; i < sizeof(stream->stream_name); ++i) fprintf(log, \" %02x\", (unsigned)((unsigned char)stream->stream_name[i]));\n                    fprintf(log, \"\\n\");\n                }\n            }\n            else\n            {\n                if (log) fprintf(log, \"no match or not a local stream\\n\");\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        if (log) fprintf(log, \"Finished object table iteration\\n\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rename EXIT return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}