{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: (void *)VirtualPath. VirtualPath is a const char * but is converted to void *, discarding const, so a non-const pointer is passed to OS_ObjectIdGetBySearch. This violates Rule 8.13 because the pointer should point to a const-qualified type (e.g. const void *) when the data is not intended to be modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2385.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rename code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rename with it.\n  - Your function must have the exact same signature as OS_rename.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rename to check logs.\n  - Your function MUST preserve the original logic of OS_rename as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rename will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rename as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for append; best-effort logging only. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_rename ENTRY: old=%p old_str=%s new=%p new_str=%s\\n\",\n                    (const void *)old, (old ? old : \"(null)\"), (const void *)new, (new ? new : \"(null)\"));\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_TranslatePath(old, old_path);\n\n    /* Log result of OS_TranslatePath for old */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_TranslatePath(old) -> %ld; old_path=\\\"%s\\\"\\n\", (long)return_code, old_path);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n\n        /* Log result of OS_TranslatePath for new */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_TranslatePath(new) -> %ld; new_path=\\\"%s\\\"\\n\", (long)return_code, new_path);\n                fclose(logf);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n\n        /* Log result of the implementation rename */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_FileRename_Impl(\\\"%s\\\", \\\"%s\\\") -> %ld\\n\", old_path, new_path, (long)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Begin iterating object table: log that iteration started */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE) - start\\n\");\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log the iterator token for each loop */\n            {\n                FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"Iterator next: token=%u\\n\", (unsigned)iter.token);\n                    fclose(logf);\n                }\n            }\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream state before potential rename */\n            {\n                FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"stream ptr=%p token=%u domain=%d name=\\\"%s\\\"\\n\",\n                            (void *)stream, (unsigned)iter.token, (int)stream->socket_domain,\n                            (stream->stream_name ? stream->stream_name : \"(null)\"));\n                    fclose(logf);\n                }\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                /* Log that a match occurred and capture before/after */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n                    if (logf)\n                    {\n                        fprintf(logf, \"MATCH: stream->stream_name == old; token=%u; before=\\\"%s\\\"\\n\",\n                                (unsigned)iter.token, stream->stream_name);\n                        fclose(logf);\n                    }\n                }\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                /* Log the updated name */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n                    if (logf)\n                    {\n                        fprintf(logf, \"UPDATED: token=%u after rename stream_name=\\\"%s\\\"\\n\",\n                                (unsigned)iter.token, stream->stream_name);\n                        fclose(logf);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        /* Log that iteration finished */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_ObjectId iteration finished\\n\");\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final return logging */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2385.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_rename EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}