{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from VirtualPath. If VirtualPath points to an object smaller than OS_MAX_PATH_LEN and there is no NUL byte within the first OS_MAX_PATH_LEN bytes (for example, a 10-byte buffer without a terminator but OS_MAX_PATH_LEN == 64), the underlying strnlen implementation will access memory beyond the bounds of the object. This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileOpen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileOpen_Impl with it.\n  - Your function must have the exact same signature as OS_FileOpen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileOpen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileOpen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Open a persistent log for probes. Append so multiple calls accumulate evidence. */\n    FILE *probe_log = fopen(\"/tmp/logs/1933.txt\", \"a\");\n    if (probe_log)\n    {\n        fprintf(probe_log, \"---- OS_FileOpen_Impl ENTRY ----\\n\");\n        fprintf(probe_log, \"token ptr: %p, token val ptr: %p\\n\", (const void *)token, (const void *)&impl);\n        fprintf(probe_log, \"local_path ptr: %p, flags: 0x%08x, access_mode: %d\\n\", (const void *)local_path, (unsigned)flags, (int)access_mode);\n\n        if (local_path == NULL)\n        {\n            fprintf(probe_log, \"local_path: NULL\\n\");\n        }\n        else\n        {\n            /* Probe local_path contents in a conservative manner. Probe up to PROBE_MAX bytes\n             * to avoid unbounded reads. This records whether a NUL terminator exists within\n             * that probe window. If no NUL is found within the probe window, a warning is\n             * emitted indicating that a larger strnlen call (with a larger max) may read\n             * beyond the object's bounds (the scenario reported). */\n            const size_t PROBE_MAX = 64U;\n            size_t i;\n            int nul_found = 0;\n\n            fprintf(probe_log, \"local_path (first %zu bytes or until NUL): \", (size_t)PROBE_MAX);\n            for (i = 0U; i < PROBE_MAX; ++i)\n            {\n                unsigned char c = (unsigned char)local_path[i];\n                if (c == '\\0')\n                {\n                    fprintf(probe_log, \"[NUL at %zu]\", i);\n                    nul_found = 1;\n                    break;\n                }\n            }\n            fprintf(probe_log, \"\\n\");\n\n            /* Print the bytes we probed in a printable form. If we encountered a NUL,\n             * include it in the printed bytes; otherwise, print the whole probe window. */\n            size_t bytes_to_print = nul_found ? (i + 1U) : PROBE_MAX;\n            for (i = 0U; i < bytes_to_print; ++i)\n            {\n                unsigned char c = (unsigned char)local_path[i];\n                if (c >= 32U && c < 127U)\n                {\n                    fputc((int)c, probe_log);\n                }\n                else if (c == '\\0')\n                {\n                    fputs(\"\\\\0\", probe_log);\n                }\n                else\n                {\n                    fprintf(probe_log, \"\\\\x%02x\", (unsigned)c);\n                }\n            }\n            fputc('\\n', probe_log);\n\n            if (!nul_found)\n            {\n                fprintf(probe_log, \"WARNING: No NUL found within %zu bytes of local_path.\\n\", (size_t)PROBE_MAX);\n                fprintf(probe_log, \"This indicates that calling strnlen(local_path, L) with L > %zu may read beyond\\n\",\n                        (size_t)PROBE_MAX);\n            }\n            else\n            {\n                fprintf(probe_log, \"INFO: NUL found within probe window.\\n\");\n            }\n        }\n\n        fflush(probe_log);\n        /* Keep the file open to append further logs below; do not close yet. */\n    }\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            if (probe_log)\n            {\n                fprintf(probe_log, \"invalid access_mode: %d -> returning OS_ERROR\\n\", (int)access_mode);\n                fclose(probe_log);\n            }\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n        if (probe_log) fprintf(probe_log, \"flag: CREATE set -> O_CREAT added\\n\");\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n        if (probe_log) fprintf(probe_log, \"flag: TRUNCATE set -> O_TRUNC added\\n\");\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    if (probe_log) fprintf(probe_log, \"About to open(local_path) with os_perm=0x%x, os_mode=0%o\\n\", os_perm, os_mode);\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        if (probe_log)\n        {\n            fprintf(probe_log, \"open(%p) failed: %s (errno=%d)\\n\", (const void *)local_path, strerror(errno), errno);\n            fclose(probe_log);\n        }\n\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"open succeeded: fd=%d, selectable=%d -> returning OS_SUCCESS\\n\", impl->fd, (int)impl->selectable);\n        fprintf(probe_log, \"---- OS_FileOpen_Impl EXIT ----\\n\\n\");\n        fclose(probe_log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}