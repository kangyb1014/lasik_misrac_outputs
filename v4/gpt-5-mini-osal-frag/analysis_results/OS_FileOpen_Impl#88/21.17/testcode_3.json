{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nAlthough the pointer increment itself is a simple pointer arithmetic and not a string.h call, it is used as the pointer argument to memchr(name_ptr, 0, OS_MAX_FILE_NAME) immediately afterwards. If the remaining bytes from name_ptr to the end of the VirtualPath object are fewer than OS_MAX_FILE_NAME, memchr will attempt to read beyond the bounds of the VirtualPath buffer. Concretely: if strrchr returned the index p of '/' and name_ptr = &VirtualPath[p+1], and (OS_MAX_FILE_NAME > (VirtPathLen - (p+1) + 1)), then memchr will access bytes past the end of VirtualPath, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileOpen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileOpen_Impl with it.\n  - Your function must have the exact same signature as OS_FileOpen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileOpen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileOpen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n    FILE *log = fopen(\"/tmp/logs/1933.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_FileOpen_Impl] Entry: token=%p local_path=%s flags=0x%08x access_mode=%d\\n\",\n                (const void *)token,\n                (local_path != NULL) ? local_path : \"(null)\",\n                (unsigned)flags,\n                (int)access_mode);\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_FileOpen_Impl] impl=%p\\n\", (void *)impl);\n        fflush(log);\n    }\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            if (log) fprintf(log, \"[OS_FileOpen_Impl] access_mode=OS_WRITE_ONLY -> os_perm=O_WRONLY (0x%08x)\\n\", os_perm);\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            if (log) fprintf(log, \"[OS_FileOpen_Impl] access_mode=OS_READ_ONLY -> os_perm=O_RDONLY (0x%08x)\\n\", os_perm);\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            if (log) fprintf(log, \"[OS_FileOpen_Impl] access_mode=OS_READ_WRITE -> os_perm=O_RDWR (0x%08x)\\n\", os_perm);\n            break;\n        default:\n            if (log)\n            {\n                fprintf(log, \"[OS_FileOpen_Impl] access_mode=%d is invalid, returning OS_ERROR\\n\", access_mode);\n                fclose(log);\n            }\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n        if (log) fprintf(log, \"[OS_FileOpen_Impl] flag OS_FILE_FLAG_CREATE set -> os_perm |= O_CREAT (0x%08x)\\n\", os_perm);\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n        if (log) fprintf(log, \"[OS_FileOpen_Impl] flag OS_FILE_FLAG_TRUNCATE set -> os_perm |= O_TRUNC (0x%08x)\\n\", os_perm);\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n    if (log) fprintf(log, \"[OS_FileOpen_Impl] after ORing OS_IMPL_REGULAR_FILE_FLAGS -> os_perm=0x%08x\\n\", os_perm);\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n    if (log) fprintf(log, \"[OS_FileOpen_Impl] os_mode=0%o\\n\", os_mode);\n\n    if (log) fflush(log);\n\n    impl->fd = open(local_path, os_perm, os_mode);\n    int saved_errno = errno; /* capture errno immediately after open */\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_FileOpen_Impl] open('%s', 0x%08x, 0%o) -> fd=%d errno=%d (%s)\\n\",\n                (local_path != NULL) ? local_path : \"(null)\", os_perm, os_mode, impl->fd, saved_errno,\n                (saved_errno != 0) ? strerror(saved_errno) : \"(no error)\");\n        fflush(log);\n    }\n\n    if (impl->fd < 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"[OS_FileOpen_Impl] open failed, returning OS_ERROR\\n\");\n            fclose(log);\n        }\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_FileOpen_Impl] impl->fd=%d impl->selectable=%d -> returning OS_SUCCESS\\n\",\n                impl->fd, impl->selectable);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}