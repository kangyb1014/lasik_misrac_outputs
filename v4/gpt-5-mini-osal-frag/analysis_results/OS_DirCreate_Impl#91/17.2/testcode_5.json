{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the DefaultHandler installed by UT_SetHandlerFunction is (or ends up invoking) UT_ExecuteBasicHandler, then calling UT_DefaultStubImpl immediately after can cause UT_ExecuteBasicHandler to be invoked again. For example: 1) UT_ExecuteBasicHandler(FuncKey, ..., UT_ExecuteBasicHandler) calls UT_SetHandlerFunction to register UT_ExecuteBasicHandler as the handler for FuncKey; 2) UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL) calls the registered handler; 3) the registered handler is UT_ExecuteBasicHandler, so UT_ExecuteBasicHandler is called indirectly, causing recursion. This indirect self-call would violate MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/700.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirCreate_Impl:\n```c\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                return_code = OS_SUCCESS;\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirCreate_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirCreate_Impl with it.\n  - Your function must have the exact same signature as OS_DirCreate_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirCreate_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_DirCreate_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirCreate_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirCreate_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n    int         mkdir_res;\n\n    /* Open a log file to record control flow and state. Appending so successive\n       runs accumulate evidence. This is intentionally lightweight to avoid\n       changing program behavior. */\n    FILE *log = fopen(\"/tmp/logs/700.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_DirCreate_Impl path=\\\"%s\\\" access=%u\\n\",\n                (local_path != NULL) ? local_path : \"(null)\", (unsigned)access);\n        fflush(log);\n    }\n\n    /* Preserve original behavior as much as possible */\n    mkdir_res = mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO);\n    if (mkdir_res < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"mkdir returned <0, errno=%d\\n\", errno);\n            fflush(log);\n        }\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (log != NULL)\n            {\n                fprintf(log, \"errno==EEXIST, calling stat() on path\\n\");\n                fflush(log);\n            }\n\n            if (stat(local_path, &st) == 0)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"stat() succeeded: st_mode=0x%08lx\\n\", (unsigned long)st.st_mode);\n                    fprintf(log, \"S_ISDIR(st.st_mode)=%d\\n\", (int)S_ISDIR(st.st_mode));\n                    fflush(log);\n                }\n\n                if (S_ISDIR(st.st_mode))\n                {\n                    return_code = OS_SUCCESS;\n\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Existing path is a directory -> returning OS_SUCCESS\\n\");\n                        fflush(log);\n                    }\n                }\n                else\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Existing path is NOT a directory -> returning OS_ERROR\\n\");\n                        fflush(log);\n                    }\n                }\n            }\n            else\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"stat() failed, errno=%d\\n\", errno);\n                    fflush(log);\n                }\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        if (log != NULL)\n        {\n            fprintf(log, \"mkdir succeeded -> returning OS_SUCCESS\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_DirCreate_Impl return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}