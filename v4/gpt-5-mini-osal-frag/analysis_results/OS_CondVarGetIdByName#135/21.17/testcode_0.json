{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the LENGTHCHECK macro uses a <string.h> function that scans for a NUL terminator (for example strlen(name) or similar) then it can read past the supplied object if the string is not NUL\u2011terminated within the object's bounds or the object is smaller than OS_MAX_API_NAME. Concretely, if LENGTHCHECK expands to something like: if (strlen(name) >= OS_MAX_API_NAME) return OS_ERR_NAME_TOO_LONG; and name points to a buffer without a terminating '\\0' within its allocated size (or a buffer smaller than OS_MAX_API_NAME), strlen will access memory beyond the object bounds \u2014 violating MISRA C 2023 Rule 21.17. (If, instead, LENGTHCHECK is implemented using a bounded operation such as strnlen(name, OS_MAX_API_NAME) or an explicit limit-aware loop, then the rule would not be violated.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarGetIdByName with it.\n  - Your function must have the exact same signature as OS_CondVarGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/2773.txt\", \"a\");\n\n    /* Minimal entry log so the function is known to be reached */\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_CondVarGetIdByName var_id=%p var_name=%p\\n\", (void *)var_id, (const void *)var_name);\n        fflush(log);\n    }\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(var_id);\n    if (log != NULL)\n    {\n        fprintf(log, \"CHECK: var_id non-NULL\\n\");\n        fflush(log);\n    }\n\n    OS_CHECK_POINTER(var_name);\n    if (log != NULL)\n    {\n        fprintf(log, \"CHECK: var_name non-NULL\\n\");\n        fflush(log);\n    }\n\n    /* Probe the contents of var_name in a bounded manner to capture evidence for the violation scenario.\n       This loop purposely limits the number of bytes read to avoid unbounded scanning; it still reads memory\n       starting at var_name just like many string APIs would, but the probe length is capped. This preserves\n       original behavior while producing logs that show whether a NUL was seen within the probe window.\n       NOTE: If var_name points to memory that is not safely readable by the process, reading it can still\n       cause undefined behavior; this mirrors the nature of the violation when an unbounded string scan is used.\n    */\n    if (log != NULL && var_name != NULL)\n    {\n        size_t probe_max = 128U; /* conservative maximum probe */\n        size_t i;\n        int saw_nul = 0;\n        char probe_buf[129]; /* one extra for NUL termination of the probe string */\n\n        for (i = 0; i < probe_max; ++i)\n        {\n            char c = var_name[i];\n            /* convert non-printable bytes to '.' for readability */\n            probe_buf[i] = (c >= ' ' && c < 127) ? c : '.';\n            if (c == '\\0')\n            {\n                saw_nul = 1;\n                ++i; /* include the NUL in the probe length count */\n                break;\n            }\n        }\n        if (i > probe_max)\n        {\n            i = probe_max;\n        }\n        probe_buf[i < sizeof(probe_buf) ? i : (sizeof(probe_buf) - 1)] = '\\0';\n\n        fprintf(log, \"PROBE: var_name_first_bytes=\\\"%s\\\" probe_len=%zu nul_within_probe=%d\\n\",\n                probe_buf, i, saw_nul);\n        fflush(log);\n    }\n\n    /* Call the original lookup function and log its result */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_CondVarGetIdByName return_code=%ld var_id=%p\\n\", (long)return_code, (void *)var_id);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}