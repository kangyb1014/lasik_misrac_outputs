{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CondVarGetIdByName only checks that var_name != NULL and then passes it to OS_ObjectIdFindByName. That function uses ARGCHECK/LENGTHCHECK on the name; if LENGTHCHECK is implemented using an unbounded string.h call such as strlen (or other functions that read until a NUL), then providing a var_name that is not NUL-terminated within its actual object bounds (or longer than OS_MAX_API_NAME) will cause the string function to read past the end of the object. Thus the call chain (OS_CondVarGetIdByName -> OS_ObjectIdFindByName -> LENGTHCHECK/ARGCHECK) can result in out-of-bounds access of the object referenced by var_name and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarGetIdByName with it.\n  - Your function must have the exact same signature as OS_CondVarGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/2773.txt\", \"a\");\n\n    /* Minimal entry probe so the function reach is recorded. Do not dereference var_name here. */\n    if (log != NULL)\n    {\n        /* Print pointer values and a marker so callers can correlate execution. */\n        fprintf(log, \"ENTER: OS_CondVarGetIdByName called. var_id=%p, var_name=%p\\n\", (void *)var_id, (void *)var_name);\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    /* Log that we are about to call the lookup helper (do not read var_name contents). */\n    log = fopen(\"/tmp/logs/2773.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: OS_ObjectIdFindByName(type=%d, name=%p)\\n\", (int)OS_OBJECT_TYPE_OS_CONDVAR, (void *)var_name);\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Preserve original behavior: delegate to the object-id lookup routine */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    /* Record the result from the lookup routine */\n    log = fopen(\"/tmp/logs/2773.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"RETURN: OS_CondVarGetIdByName returning %ld for var_name=%p\\n\", (long)return_code, (void *)var_name);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}