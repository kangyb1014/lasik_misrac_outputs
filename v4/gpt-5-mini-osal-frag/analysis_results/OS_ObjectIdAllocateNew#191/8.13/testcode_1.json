{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as a non-const void* but is only read (it is cast to const char* for strcmp). According to MISRA C 2023 Rule 8.13, this pointer should be const-qualified (e.g. const void *ref or const char *ref). The current declaration violates the rule; the correct fix is to make the parameter const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdAllocateNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdAllocateNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdAllocateNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdAllocateNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdAllocateNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Open log file for appending; best-effort logging, do not change program flow on failure */\n    FILE *logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_ObjectIdAllocateNew(idtype=%d, name=%p, token=%p)\\n\", (int)idtype, (void *)name, (void *)token);\n        if (name != NULL)\n        {\n            /* Log up to first 256 bytes of the name to avoid excessive log size */\n            char name_buf[257];\n            size_t i;\n            for (i = 0; i < 256 && name[i] != '\\0'; ++i)\n            {\n                name_buf[i] = name[i];\n            }\n            name_buf[i] = '\\0';\n            fprintf(logf, \"  name (truncated) = '%s'\\n\", name_buf);\n        }\n        fclose(logf);\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT: Shutdown state detected -> OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(logf);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After TransactionInit: return_code=%d, token=%p\\n\", (int)return_code, (void *)token);\n        fclose(logf);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /*\n         * The original code casts the const-qualified name to a plain void * here:\n         * (void *)name\n         * This cast strips const-qualification and is the location related to the\n         * reported MISRA Rule 8.13 violation: a pointer should point to a const-qualified\n         * type whenever possible. Log the cast and the pointer value so the scenario\n         * can be reproduced/audited.\n         */\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_ObjectIdFindNextMatch with name pointer (const char *)%p cast to (void *)%p\\n\",\n                    (void *)name, (void *)name);\n            fclose(logf);\n        }\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name is NULL: skipping name-match check -> OS_ERR_NAME_NOT_FOUND\\n\");\n            fclose(logf);\n        }\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After name check: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name already taken -> return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Finding next free ID -> return_code=%d, token->obj_id=%d\\n\",\n                    (int)return_code, (int)(token ? token->obj_id : -1));\n            fclose(logf);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation failed early -> Transaction canceled, return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n        return return_code;\n    }\n    else\n    {\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation succeeded locally, notifying event for obj_id=%d\\n\", (int)(token ? token->obj_id : -1));\n            fclose(logf);\n        }\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After NotifyEvent: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After ConvertToken: return_code=%d, final obj_id=%d\\n\",\n                    (int)return_code, (int)(token ? token->obj_id : -1));\n            fclose(logf);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"FinalizeNew invoked due to error -> return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_ObjectIdAllocateNew -> return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}