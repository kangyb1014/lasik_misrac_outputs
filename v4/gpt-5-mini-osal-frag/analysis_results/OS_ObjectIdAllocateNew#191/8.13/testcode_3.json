{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the const char *name parameter is cast to (void *) and passed as the 'arg' parameter to OS_ObjectIdFindNextMatch (and thence to MatchFunc). The match function OS_ObjectNameMatch treats this argument as a const char * (uses strcmp), but the prototypes use void * (non-const), so the const qualifier is discarded via the cast. This violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when possible (the MatchFunc/arg should use const void * / const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdAllocateNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdAllocateNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdAllocateNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdAllocateNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdAllocateNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Attempt to open the log file for append. If this fails, continue without logging. */\n    logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_ObjectIdAllocateNew idtype=%d name_ptr=%p token_ptr=%p\\n\", (int)idtype, (void *)name, (void *)token);\n        fflush(logf);\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT-EARLY: GlobalState==SHUTDOWN -> %d\\n\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n            fclose(logf);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After TransactionInit return_code=%d\\n\", (int)return_code);\n        fflush(logf);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT-EARLY: TransactionInit failed -> %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name provided: %s (name_ptr=%p). Casting const char * to void * and calling OS_ObjectIdFindNextMatch.\\n\",\n                    name, (void *)name);\n            fflush(logf);\n        }\n\n        /* Intentional cast similar to original code; log the cast target value */\n        void *cast_arg = (void *)name;\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, cast_arg, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFindNextMatch return_code=%d (cast_arg=%p)\\n\", (int)return_code, cast_arg);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name not provided (NULL). Setting return_code = OS_ERR_NAME_NOT_FOUND\\n\");\n            fflush(logf);\n        }\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name match found -> name taken. Setting return_code = OS_ERR_NAME_TAKEN\\n\");\n            fflush(logf);\n        }\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No matching name found -> searching for next free ID.\\n\");\n            fflush(logf);\n        }\n        return_code = OS_ObjectIdFindNextFree(token);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFindNextFree return_code=%d token->obj_id=%d\\n\", (int)return_code, (int)token->obj_id);\n            fflush(logf);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation failed, canceling transaction. return_code=%d\\n\", (int)return_code);\n            fflush(logf);\n        }\n        OS_ObjectIdTransactionCancel(token);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Transaction canceled. Exiting with %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n        return return_code;\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation succeeded, notifying event OS_EVENT_RESOURCE_ALLOCATED for obj_id=%d\\n\", (int)token->obj_id);\n            fflush(logf);\n        }\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_NotifyEvent return_code=%d\\n\", (int)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Converting token for obj_id=%d\\n\", (int)token->obj_id);\n            fflush(logf);\n        }\n        return_code = OS_ObjectIdConvertToken(token);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdConvertToken return_code=%d\\n\", (int)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Finalizing new object due to failure: return_code=%d obj_id=%d\\n\", (int)return_code, (int)token->obj_id);\n            fflush(logf);\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFinalizeNew return_code=%d\\n\", (int)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_ObjectIdAllocateNew final return_code=%d obj_id=%d\\n\", (int)return_code, (int)token->obj_id);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}