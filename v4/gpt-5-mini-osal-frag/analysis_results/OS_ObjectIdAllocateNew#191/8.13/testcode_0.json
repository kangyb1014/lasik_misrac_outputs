{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'data' is declared as void * but OS_NotifyEvent does not modify it and merely forwards it to the EventHandler. Therefore it could and should be declared as const void * (and the EventHandler prototype changed accordingly). Also elsewhere in the codebase a const char * (name) is explicitly cast to void * when passed to match functions, which shows const is being discarded rather than used. This loses const-correctness and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdAllocateNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdAllocateNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdAllocateNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdAllocateNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdAllocateNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/515.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ObjectIdAllocateNew idtype=%d name_ptr=%p name_str=\\\"%s\\\" token_ptr=%p\\n\",\n                (int)idtype, (void *)name, (name != NULL ? name : \"(null)\"), (void *)token);\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early exit: GlobalState == OS_SHUTDOWN_MAGIC_NUMBER\\n\");\n            fprintf(log, \"EXIT: OS_ObjectIdAllocateNew return_code=%d\\n\\n\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (log)\n    {\n        fprintf(log, \"After OS_ObjectIdTransactionInit -> return_code=%d token_ptr=%p\\n\", (int)return_code, (void *)token);\n    }\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Transaction init failed (return_code=%d) - aborting\\n\", (int)return_code);\n            fprintf(log, \"EXIT: OS_ObjectIdAllocateNew return_code=%d\\n\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        if (log)\n        {\n            /* Log that the non-const name is being cast to void * when passed to the matcher. */\n            fprintf(log, \"Name provided -> calling OS_ObjectIdFindNextMatch with (void *)name; name_ptr=%p name_str=\\\"%s\\\"\\n\",\n                    (void *)name, name);\n        }\n        /* This is the cast that discards const-qualification in the original code. */\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFindNextMatch returned %d\\n\", (int)return_code);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"Name is NULL -> setting return_code = OS_ERR_NAME_NOT_FOUND\\n\");\n        }\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Name match found -> setting return_code = OS_ERR_NAME_TAKEN\\n\");\n        }\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No existing name match -> calling OS_ObjectIdFindNextFree\\n\");\n        }\n        return_code = OS_ObjectIdFindNextFree(token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFindNextFree returned %d\\n\", (int)return_code);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Allocation failed (return_code=%d) -> calling OS_ObjectIdTransactionCancel\\n\", (int)return_code);\n        }\n        OS_ObjectIdTransactionCancel(token);\n\n        if (log)\n        {\n            fprintf(log, \"EXIT: OS_ObjectIdAllocateNew return_code=%d\\n\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n    else\n    {\n        if (log)\n        {\n            /* Note: Original code passes NULL as the data parameter to OS_NotifyEvent. Log that. */\n            fprintf(log, \"Allocation succeeded -> calling OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL)\\n\");\n            fprintf(log, \"(Logging token pointer only) token_ptr=%p\\n\", (void *)token);\n        }\n\n        /* Keep the original call intact; this is where const could be discarded elsewhere. */\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n\n        if (log)\n        {\n            fprintf(log, \"OS_NotifyEvent returned %d\\n\", (int)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdConvertToken\\n\");\n        }\n        return_code = OS_ObjectIdConvertToken(token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdConvertToken returned %d\\n\", (int)return_code);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Error after allocate/convert -> calling OS_ObjectIdFinalizeNew(return_code=%d, token, NULL)\\n\", (int)return_code);\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned %d\\n\", (int)return_code);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_ObjectIdAllocateNew return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}