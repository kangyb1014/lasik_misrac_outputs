{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectNameMatch calls strcmp((const char *)ref, obj->name_entry) without any bounds checks or guarantees that both pointers reference NUL-terminated buffers. If obj->name_entry (or ref, if the function were ever called with a NULL/unterminated ref) is not NUL-terminated within its allocated storage (for example a fixed-size name buffer that happens not to contain a terminating '\\0'), strcmp will scan past the end of that buffer and perform out-of-bounds reads. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdAllocateNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdAllocateNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdAllocateNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdAllocateNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdAllocateNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_ObjectIdAllocateNew: idtype=%d name=%p token=%p\\n\", (int)idtype, (const void *)name, (const void *)token);\n        fflush(log);\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_ObjectIdAllocateNew: shutdown state detected\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (log)\n    {\n        fprintf(log, \"After OS_ObjectIdTransactionInit: return_code=%ld\\n\", (long)return_code);\n        fflush(log);\n    }\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdTransactionInit failed, returning %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        if (log)\n        {\n            /* Log only the pointer value and fact that a name was provided.\n             * Do NOT attempt to dereference or read the buffer contents here,\n             * since it may not be NUL-terminated and reading could be unsafe.\n             */\n            fprintf(log, \"Name provided; pointer=%p. Calling OS_ObjectIdFindNextMatch with OS_ObjectNameMatch.\\n\", (const void *)name);\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdFindNextMatch: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No name provided; setting return_code = OS_ERR_NAME_NOT_FOUND\\n\");\n            fflush(log);\n        }\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFindNextMatch returned OS_SUCCESS: name already exists -> returning OS_ERR_NAME_TAKEN\\n\");\n            fflush(log);\n        }\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"Name not found or other non-success code (%ld); calling OS_ObjectIdFindNextFree\\n\", (long)return_code);\n            fflush(log);\n        }\n        return_code = OS_ObjectIdFindNextFree(token);\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdFindNextFree: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Allocation failed (return_code=%ld). Calling OS_ObjectIdTransactionCancel and returning.\\n\", (long)return_code);\n            fflush(log);\n        }\n        OS_ObjectIdTransactionCancel(token);\n        if (log)\n        {\n            fprintf(log, \"Transaction cancelled for token=%p\\n\", (const void *)token);\n            fclose(log);\n        }\n        return return_code;\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"Allocation succeeded. Calling OS_NotifyEvent for token=%p\\n\", (const void *)token);\n            fflush(log);\n        }\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        if (log)\n        {\n            fprintf(log, \"After OS_NotifyEvent: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdConvertToken for token=%p\\n\", (const void *)token);\n            fflush(log);\n        }\n        return_code = OS_ObjectIdConvertToken(token);\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdConvertToken: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Error after allocation steps (return_code=%ld). Calling OS_ObjectIdFinalizeNew.\\n\", (long)return_code);\n            fflush(log);\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_ObjectIdAllocateNew: returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}