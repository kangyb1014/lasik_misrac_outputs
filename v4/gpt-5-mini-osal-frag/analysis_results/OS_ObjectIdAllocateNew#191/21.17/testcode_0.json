{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the caller-supplied pointer 'name' (only checked for NULL) into OS_ObjectIdFindNextMatch which invokes OS_ObjectNameMatch that calls strcmp((const char *)ref, obj->name_entry). There is no check that 'name' (ref) or obj->name_entry are null-terminated or that their allocated sizes are sufficient, so if a caller supplies a non-terminated char buffer (e.g. char s[4] = {'a','b','c'} without '\\0') or either string is truncated/not terminated, strcmp will read past the object bounds and cause an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdAllocateNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdAllocateNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdAllocateNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdAllocateNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdAllocateNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Local, minimal forward declarations for logging functions/types so this\n     * function can write runtime probes without requiring additional includes\n     * at top-of-file. These are intentionally limited to avoid interfering\n     * with the rest of the build. */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Helper macro-like local block for logging. Not a macro to obey\n     * generation constraints; implemented inline where needed. */\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log function entry and input parameters. Avoid dereferencing\n             * caller-supplied pointers to reduce risk of additional UB; log\n             * addresses and presence only. */\n            fprintf(log, \"ENTER OS_ObjectIdAllocateNew: idtype=%d name=%p token=%p\\n\",\n                    (int)idtype, (void *)name, (void *)token);\n            if (name == NULL)\n            {\n                fprintf(log, \"  NOTE: name == NULL\\n\");\n            }\n            else\n            {\n                fprintf(log, \"  NOTE: name != NULL (pointer logged above).\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_ObjectIdAllocateNew: early shutdown, returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_ObjectIdTransactionInit: return_code=%d idtype=%d token=%p\\n\",\n                    (int)return_code, (int)idtype, (void *)token);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log intent to call find-match routine and the parameters used. */\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_ObjectIdFindNextMatch with match_func=%p ref=%p token=%p\\n\",\n                        (void *)OS_ObjectNameMatch, (void *)name, (void *)token);\n                fprintf(log, \"  NOTE: Not dereferencing 'name' here to avoid introducing additional UB.\\n\");\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_ObjectIdFindNextMatch: return_code=%d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Name was NULL, setting return_code=OS_ERR_NAME_NOT_FOUND\\n\");\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Name match found -> setting return_code = OS_ERR_NAME_TAKEN\\n\");\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"No matching name found, attempting to find next free ID (token=%p)\\n\", (void *)token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFindNextFree(token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_ObjectIdFindNextFree: return_code=%d token=%p\\n\", (int)return_code, (void *)token);\n                fclose(log);\n            }\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Allocation failed (return_code=%d) - cancelling transaction for token=%p\\n\", (int)return_code, (void *)token);\n            fclose(log);\n        }\n\n        OS_ObjectIdTransactionCancel(token);\n\n        FILE *log2 = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log2 != NULL)\n        {\n            fprintf(log2, \"After OS_ObjectIdTransactionCancel - returning %d\\n\", (int)return_code);\n            fclose(log2);\n        }\n\n        return return_code;\n    }\n    else\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Resource allocated, notifying: obj_id (from token) logged as pointer %p\\n\", (void *)token);\n            fclose(log);\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n\n        {\n            FILE *log2 = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log2 != NULL)\n            {\n                fprintf(log2, \"After OS_NotifyEvent: return_code=%d\\n\", (int)return_code);\n                fclose(log2);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_ObjectIdConvertToken: return_code=%d token=%p\\n\", (int)return_code, (void *)token);\n                fclose(log);\n            }\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Finalizing new object due to failure: return_code=%d token=%p\\n\", (int)return_code, (void *)token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n\n        {\n            FILE *log2 = fopen(\"/tmp/logs/513.txt\", \"a\");\n            if (log2 != NULL)\n            {\n                fprintf(log2, \"After OS_ObjectIdFinalizeNew: return_code=%d\\n\", (int)return_code);\n                fclose(log2);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/513.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_ObjectIdAllocateNew: returning %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}