{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_PATHNAME expands to a string-length check (OS_CHECK_STRING) that uses a bounded string operation such as strnlen/strncmp with OS_MAX_PATH_LEN as the bound. If the caller passes a pointer to a character array smaller than OS_MAX_PATH_LEN that does not contain a terminating '\\0' within that allocated size (for example a char buf[8] filled with 8 non-terminator bytes while OS_MAX_PATH_LEN == 64), the strnlen/strncmp would attempt to read up to OS_MAX_PATH_LEN bytes and thus access memory beyond the bounds of the referenced object. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSysStatVolume code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSysStatVolume with it.\n  - Your function must have the exact same signature as OS_FileSysStatVolume.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSysStatVolume to check logs.\n  - Your function MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSysStatVolume will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n    FILE *log = fopen(\"/tmp/logs/1633.txt\", \"a\");\n\n    /* Minimal entry log so the function hit is observable. */\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_FileSysStatVolume name=%p statbuf=%p\\n\", (void *)name, (void *)statbuf);\n        fflush(log);\n    }\n\n    /* Log just before the pathname check so callers can see the pointer passed in.\n       Note: OS_CHECK_PATHNAME may itself perform bounded reads (e.g., strnlen) which\n       is the subject of the violation scenario. If that macro reads beyond the\n       caller's buffer, the crash/behavior will occur during this call; the log\n       up to this point will help reproduce and diagnose the issue. */\n    if (log != NULL)\n    {\n        fprintf(log, \"STACK: about to invoke OS_CHECK_PATHNAME(name=%p)\\n\", (void *)name);\n        fflush(log);\n    }\n\n    OS_CHECK_PATHNAME(name);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"STACK: returned from OS_CHECK_PATHNAME\\n\");\n        fflush(log);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"STACK: about to invoke OS_CHECK_POINTER(statbuf=%p)\\n\", (void *)statbuf);\n        fflush(log);\n    }\n\n    OS_CHECK_POINTER(statbuf);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"STACK: returned from OS_CHECK_POINTER\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"CALL: OS_ObjectIdGetBySearch returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"STATE: token acquired, calling OS_FileSysStatVolume_Impl\\n\");\n            fflush(log);\n        }\n\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"CALL: OS_FileSysStatVolume_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"STATE: token released\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_FileSysStatVolume returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}