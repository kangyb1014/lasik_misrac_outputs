{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdGetBySearch takes a void *arg and the matching callback type uses void *ref, but callers pass a const char * (e.g. OS_FileSysStatVolume casts (void *)name) and the match implementation treats the ref as const (const char *target = (const char *)ref). Since the data is not modified, the parameter should be const-qualified (const void *arg and callback taking const void *ref). Casting away const to call OS_ObjectIdGetBySearch thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSysStatVolume code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSysStatVolume with it.\n  - Your function must have the exact same signature as OS_FileSysStatVolume.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSysStatVolume to check logs.\n  - Your function MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSysStatVolume will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Minimal entry log to demonstrate reachability and state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER: OS_FileSysStatVolume\\n\");\n            fprintf(log, \"  name pointer: %p\\n\", (const void *)name);\n            if (name)\n            {\n                /* Print a safe preview of the name (up to first newline) */\n                const char *nl = strchr(name, '\\n');\n                if (nl)\n                {\n                    size_t len = (size_t)(nl - name);\n                    fprintf(log, \"  name (preview): %.*s\\n\", (int)len, name);\n                }\n                else\n                {\n                    fprintf(log, \"  name (preview): %s\\n\", name);\n                }\n            }\n            fprintf(log, \"  statbuf pointer: %p\\n\", (void *)statbuf);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters (preserve original logic and ordering) */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    /* Log the upcoming cast from const char * to void * and the search call */\n    {\n        FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"CALL: OS_ObjectIdGetBySearch with arg cast from const char * to void *\\n\");\n            fprintf(log, \"  arg (as void *): %p\\n\", (void *)name);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of search */\n    {\n        FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"RETURN from OS_ObjectIdGetBySearch: %ld\\n\", (long)return_code);\n            /* Log token address as a hint (token contents/platform-specific) */\n            fprintf(log, \"  token addr: %p\\n\", (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log about calling the implementation */\n        {\n            FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"CALL: OS_FileSysStatVolume_Impl with token\\n\");\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        /* Log the result of the implementation call */\n        {\n            FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"RETURN from OS_FileSysStatVolume_Impl: %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released */\n        {\n            FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"INFO: Token released\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final return (preserve original behavior and return value) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1635.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT: OS_FileSysStatVolume returning %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}