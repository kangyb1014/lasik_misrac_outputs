{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nWhile the array declaration itself is not a pointer type, in context it leads to pointers to its elements that are not const-qualified. In OS_FileOpenCheck the local variable is declared as OS_stream_internal_record_t *stream and is only used for reading (strcmp on stream->stream_name). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible; here it should be declared as const OS_stream_internal_record_t *stream (and OS_OBJECT_TABLE_GET/OS_stream_table adjusted to return/hold const-qualified elements if the table is read-only).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileOpenCheck code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileOpenCheck with it.\n  - Your function must have the exact same signature as OS_FileOpenCheck.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileOpenCheck to check logs.\n  - Your function MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileOpenCheck will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log file for append to record control flow and state for debugging the pointer-const scenario */\n    log = fopen(\"/tmp/logs/1275.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck ENTER: Filename=%s\\n\", Filename ? Filename : \"(null)\");\n    }\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    if (log)\n    {\n        fprintf(log, \"Iterator initialized\\n\");\n    }\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (log)\n        {\n            fprintf(log, \"Iter token=%u, stream_ptr=%p\\n\", (unsigned)iter.token, (void *)stream);\n            if (stream)\n            {\n                fprintf(log, \"  socket_domain=%d, stream_name=%s\\n\",\n                        (int)stream->socket_domain,\n                        stream->stream_name ? stream->stream_name : \"(null)\");\n            }\n            else\n            {\n                fprintf(log, \"  stream is NULL\\n\");\n            }\n        }\n\n        /* Preserve original logic exactly: read fields and compare names */\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log)\n            {\n                fprintf(log, \"Match found for Filename=%s at token=%u\\n\", Filename, (unsigned)iter.token);\n            }\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            if (log)\n            {\n                /* compute a safe strcmp result for logging without changing behavior; avoid crashing during logging */\n                int cmp = -1;\n                if (stream && stream->stream_name && Filename)\n                {\n                    cmp = strcmp(stream->stream_name, Filename);\n                }\n                fprintf(log, \"  No match (strcmp=%d)\\n\", cmp);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}