{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read bytes until it finds a NUL terminator. OS_CHECK_POINTER(Filename) only ensures Filename is non-NULL, not that it points to a NUL-terminated buffer or that the buffer sizes are sufficient. If stream->stream_name is a fixed-size array that is not NUL-terminated (for example it was filled completely without a terminator) or if Filename points to a non-terminated/malformed buffer (or an object shorter than the expected string), strcmp will read past the bounds of the referenced objects. Therefore this use can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileOpenCheck code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileOpenCheck with it.\n  - Your function must have the exact same signature as OS_FileOpenCheck.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileOpenCheck to check logs.\n  - Your function MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileOpenCheck will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Open log file for probes. Best-effort: if opening fails, proceed silently. */\n    FILE *os_log = fopen(\"/tmp/logs/1273.txt\", \"a\");\n    if (os_log)\n    {\n        /* Log function entry and pointer value for Filename (do not dereference yet). */\n        fprintf(os_log, \"OS_FileOpenCheck ENTER: Filename=%p\\n\", (const void *)Filename);\n        fflush(os_log);\n    }\n\n    /* Check parameters (preserve original behavior). */\n    OS_CHECK_POINTER(Filename);\n\n    if (os_log)\n    {\n        fprintf(os_log, \"OS_FileOpenCheck after OS_CHECK_POINTER: Filename=%p\\n\", (const void *)Filename);\n        fflush(os_log);\n    }\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    if (os_log)\n    {\n        fprintf(os_log, \"OS_ObjectIdIterateActive called\\n\");\n        fflush(os_log);\n    }\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (os_log)\n        {\n            /* Log iterator token, stream pointer, socket domain and stream_name pointer. */\n            fprintf(os_log, \"Iterator token=%u, stream=%p, socket_domain=%d, stream_name=%p\\n\",\n                    (unsigned)iter.token, (void *)stream, (int)stream->socket_domain, (void *)stream->stream_name);\n            fflush(os_log);\n        }\n\n        /* Preserve original strcmp usage so behavior matches original code (this may trigger the violation). */\n        int strcmp_result = strcmp(stream->stream_name, Filename);\n\n        if (os_log)\n        {\n            fprintf(os_log, \"strcmp(stream->stream_name, Filename) -> %d\\n\", strcmp_result);\n            fflush(os_log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp_result == 0))\n        {\n            if (os_log)\n            {\n                fprintf(os_log, \"Match found: token=%u, stream=%p, Filename=%p\\n\",\n                        (unsigned)iter.token, (void *)stream, (const void *)Filename);\n                fflush(os_log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (os_log)\n    {\n        fprintf(os_log, \"OS_FileOpenCheck EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(os_log);\n    }\n\n    return return_code;\n}\n"
}