{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two memset(&sched_fifo_limits, 0, ...) and memset(&sched_rr_limits, 0, ...) calls are executed but their removal would not affect program behaviour. The subsequent OS_Posix_GetSchedulerParams() calls fully initialize these structs (setting PriorityMax and PriorityMin) before those values are used, and the structs are only referenced when the corresponding 'sched_*_valid' flag is true. If the functions fail the flags are false and the structs are not used. Therefore the memset operations are redundant (likely only present to silence a false uninitialized warning) and constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3078.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_API_Impl_Init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_API_Impl_Init with it.\n  - Your function must have the exact same signature as OS_API_Impl_Init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_API_Impl_Init to check logs.\n  - Your function MUST preserve the original logic of OS_API_Impl_Init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_API_Impl_Init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Log entry and idtype */\n    logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_API_Impl_Init: entered, idtype=%d\\n\", (int)idtype);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n\n    /* Log result of table mutex init */\n    logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_Posix_TableMutex_Init returned %d\\n\", (int)return_code);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log early return */\n        logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_API_Impl_Init: early return with code %d\\n\", (int)return_code);\n            fclose(logf);\n            logf = NULL;\n        }\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_TaskAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_TaskAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_QueueAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_QueueAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_BinSemAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_BinSemAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_CountSemAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_CountSemAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_MutexAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_MutexAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_ModuleAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_ModuleAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_TimeBaseAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_TimeBaseAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_StreamAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_StreamAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_DirAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_DirAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_FileSysAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_FileSysAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_Posix_CondVarAPI_Impl_Init()\\n\");\n                fclose(logf);\n                logf = NULL;\n            }\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_Posix_CondVarAPI_Impl_Init returned %d\\n\", (int)return_code);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n        default:\n            logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_API_Impl_Init: default case (no action) for idtype=%d\\n\", (int)idtype);\n                fclose(logf);\n                logf = NULL;\n            }\n            break;\n    }\n\n    /* Log final return code */\n    logf = fopen(\"/tmp/logs/3078.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_API_Impl_Init: exiting with code %d\\n\", (int)return_code);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    return return_code;\n}\n"
}