{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer over-read if OS_CHECK_STRING uses an unbounded string operation (e.g. strlen) on fsvolname. For example, if a caller passes fsvolname pointing to a 5-byte buffer without a terminating NUL (char name[5] = { 'A','B','C','D','E' };) then OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), ...) that invokes strlen(fsvolname) would read beyond the bounds of the 5-byte object, violating Rule 21.17. If the macro instead uses a bounded routine (e.g. strnlen with the supplied size) then the violation would not occur.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_initfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_initfs:\n```c\nint32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, false);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_initfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_initfs with it.\n  - Your function must have the exact same signature as OS_initfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_initfs to check logs.\n  - Your function MUST preserve the original logic of OS_initfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_initfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_initfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/113.txt\", \"a\");\n\n    /* Minimal probe to show function entry and capture parameter state without\n     * dereferencing potential unterminated strings (avoid %s on volname/devname).\n     * This logs pointer values and sizes so an external tester can reproduce\n     * scenarios where an unbounded string operation (e.g. strlen) would over-read. */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_initfs entered\\n\");\n        fprintf(log, \"  address=%p\\n\", (void *)address);\n        fprintf(log, \"  devname_ptr=%p\\n\", (const void *)devname);\n        fprintf(log, \"  volname_ptr=%p\\n\", (const void *)volname);\n        fprintf(log, \"  blocksize=%zu\\n\", blocksize);\n        fprintf(log, \"  numblocks=%llu\\n\", (unsigned long long)numblocks);\n        fprintf(log, \"  devname_is_null=%d volname_is_null=%d address_is_null=%d\\n\",\n                (devname == NULL) ? 1 : 0,\n                (volname == NULL) ? 1 : 0,\n                (address == NULL) ? 1 : 0);\n        fflush(log);\n    }\n\n    /* Call the original initialization routine (preserve original behavior). */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, false);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_FileSys_Initialize returned: %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        if (log != NULL)\n        {\n            fprintf(log, \"Mapping return code %d to OS_FS_ERR_DEVICE_NOT_FREE\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_initfs exiting with: %d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}