{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nUtTest_Run invokes a function pointer (UtTestDataBaseEntry->Setup()). If that pointer were set to point to UtTest_Run itself (or to a function chain that eventually calls UtTest_Run), UtTest_Run would indirectly call itself, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Merge code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1150.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_Merge:\n```c\nvoid UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_Merge code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_Merge with it.\n  - Your function must have the exact same signature as UtList_Merge.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_Merge to check logs.\n  - Your function MUST preserve the original logic of UtList_Merge as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_Merge will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_Merge as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtList_Merge(UtListNode_t *TagHead1, UtListNode_t *TagHead2)\n{\n    /* Local forward-declarations for stdio types/functions to avoid requiring headers\n       This should be compatible if stdio.h already present; if not, these are harmless\n       declarations that allow logging to a file. */\n    struct FILE;\n    struct FILE *fopen(const char *, const char *);\n    int fprintf(struct FILE *, const char *, ...);\n    int fclose(struct FILE *);\n\n    struct FILE *fp = fopen(\"/tmp/logs/1150.txt\", \"a\");\n    if (fp)\n    {\n        /* Log entry and incoming pointers */\n        fprintf(fp, \"ENTER UtList_Merge: TagHead1=%p TagHead2=%p\\n\", (void *)TagHead1, (void *)TagHead2);\n    }\n\n    /* Preserve original logic: compute tails as originally done */\n    UtListNode_t *Tail1 = TagHead1->Prev;\n    UtListNode_t *Tail2 = TagHead2->Prev;\n\n    if (fp)\n    {\n        /* Log computed tail pointers and some pre-link state for diagnosis */\n        fprintf(fp, \"Computed tails: Tail1=%p Tail2=%p\\n\", (void *)Tail1, (void *)Tail2);\n        /* Attempt to log the existing next/prev pointers prior to modification.  This\n           may read values that are about to be overwritten; that's intentional to\n           capture the control/state prior to the merge operation. */\n        fprintf(fp, \"Pre-link state: Tail1->Next=%p Tail2->Next=%p TagHead1->Prev=%p TagHead2->Prev=%p\\n\",\n                (void *)(Tail1 ? Tail1->Next : 0), (void *)(Tail2 ? Tail2->Next : 0),\n                (void *)(TagHead1 ? TagHead1->Prev : 0), (void *)(TagHead2 ? TagHead2->Prev : 0));\n    }\n\n    /* Original merge operations (preserved) */\n    Tail1->Next    = TagHead2;\n    Tail2->Next    = TagHead1;\n    TagHead1->Prev = Tail2;\n    TagHead2->Prev = Tail1;\n\n    if (fp)\n    {\n        /* Log post-link state to confirm what pointers were set */\n        fprintf(fp, \"Post-link state: Tail1->Next=%p Tail2->Next=%p TagHead1->Prev=%p TagHead2->Prev=%p\\n\",\n                (void *)(Tail1 ? Tail1->Next : 0), (void *)(Tail2 ? Tail2->Next : 0),\n                (void *)(TagHead1 ? TagHead1->Prev : 0), (void *)(TagHead2 ? TagHead2->Prev : 0));\n        fprintf(fp, \"EXIT UtList_Merge\\n\");\n        fclose(fp);\n    }\n}\n"
}