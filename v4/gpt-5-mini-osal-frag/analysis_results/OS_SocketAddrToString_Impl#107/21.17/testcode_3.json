{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf sock->stream_name is not NUL-terminated such that OS_strnlen(sock->stream_name, sizeof(sock->stream_name)) returns sizeof(sock->stream_name), then len == sizeof(sock->stream_name). The expression &sock->stream_name[len] yields a pointer one-past-the-end of the array and is passed as the destination argument to snprintf. Even though the size argument becomes 0, passing a pointer that refers beyond the object bounds to a string handling function can lead to accesses beyond the object and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAddrToString_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAddrToString_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAddrToString_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAddrToString_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAddrToString_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Probe/log file - append mode so multiple calls accumulate evidence */\n    FILE *log = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER OS_SocketAddrToString_Impl: this=%p buffer=%p buflen=%zu Addr=%p Addr->AddrData=%p\\n\",\n                (void *)NULL, (void *)buffer, buflen, (const void *)Addr, (const void *)&Addr->AddrData);\n    }\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    if (log != NULL)\n    {\n        /* Log the raw family value and a short hex dump of the sockaddr (to capture non-NUL patterns) */\n        fprintf(log, \"Accessor=%p sa_family=%d\\n\", (const void *)Accessor, (int)Accessor->sa.sa_family);\n        {\n            const unsigned char *p = (const unsigned char *)&Accessor->sa;\n            size_t i;\n            fprintf(log, \"sa (first 16 bytes or sizeof(sa) if smaller):\");\n            for (i = 0; i < sizeof(Accessor->sa) && i < 16; ++i)\n            {\n                fprintf(log, \" %02X\", (unsigned)p[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            if (log != NULL)\n            {\n                const unsigned char *a = (const unsigned char *)&Accessor->sa_in.sin_addr;\n                fprintf(log, \"AF_INET chosen, addrbuffer=%p bytes=%02X %02X %02X %02X\\n\",\n                        (const void *)addrbuffer, (unsigned)a[0], (unsigned)a[1], (unsigned)a[2], (unsigned)a[3]);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            if (log != NULL)\n            {\n                const unsigned char *a6 = (const unsigned char *)&Accessor->sa_in6.sin6_addr;\n                size_t j;\n                fprintf(log, \"AF_INET6 chosen, addrbuffer=%p bytes:\", (const void *)addrbuffer);\n                for (j = 0; j < 16; ++j)\n                {\n                    fprintf(log, \" %02X\", (unsigned)a6[j]);\n                }\n                fprintf(log, \"\\n\");\n            }\n            break;\n#endif\n        default:\n            if (log != NULL)\n            {\n                fprintf(log, \"Unsupported family %d -> returning OS_ERR_BAD_ADDRESS\\n\", (int)Accessor->sa.sa_family);\n                fclose(log);\n            }\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling inet_ntop(family=%d, addrbuffer=%p, buffer=%p, buflen=%zu)\\n\",\n                (int)Accessor->sa.sa_family, (const void *)addrbuffer, (void *)buffer, buflen);\n        fflush(log);\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"inet_ntop returned NULL -> returning OS_ERROR\\n\");\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    if (log != NULL)\n    {\n        /* Log the resulting string (may be empty if buflen was too small) */\n        fprintf(log, \"inet_ntop succeeded -> buffer='%s' (buffer ptr=%p, buflen=%zu)\\n\", buffer, (void *)buffer, buflen);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}