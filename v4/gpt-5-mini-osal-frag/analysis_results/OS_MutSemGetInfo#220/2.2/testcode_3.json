{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_MutSemGetInfo_Impl(&token, mut_prop) is executed but the provided implementation is a no-op (returns OS_SUCCESS with no side effects). Removing this call would not change program behavior (mut_prop is already populated and token is only released later), so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1508.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetInfo with it.\n  - Your function must have the exact same signature as OS_MutSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Probe log: note entry and input state */\n    {\n        FILE *f = fopen(\"/tmp/logs/1508.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_MutSemGetInfo ENTRY: sem_id=%llu, mut_prop=%p\\n\",\n                    (unsigned long long) sem_id, (void *) mut_prop);\n            fclose(f);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Zero the output structure as before */\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ID lookup */\n    {\n        FILE *f = fopen(\"/tmp/logs/1508.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_MutSemGetInfo: OS_ObjectIdGetById returned %d\\n\", (int) return_code);\n            fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Copy basic fields as before */\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Log the populated fields before calling the Impl function */\n        {\n            FILE *f = fopen(\"/tmp/logs/1508.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_MutSemGetInfo: populated mut_prop from record - name=\\\"%s\\\", creator=%llu\\n\",\n                        mut_prop->name, (unsigned long long) mut_prop->creator);\n                fclose(f);\n            }\n        }\n\n        /* Call implementation-specific routine and log its return */\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/1508.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_MutSemGetInfo: OS_MutSemGetInfo_Impl returned %d\\n\", (int) return_code);\n                /* Also log mut_prop after Impl in case it modified anything */\n                fprintf(f, \"OS_MutSemGetInfo: post-Impl mut_prop - name=\\\"%s\\\", creator=%llu\\n\",\n                        mut_prop->name, (unsigned long long) mut_prop->creator);\n                fclose(f);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final log of return value */\n    {\n        FILE *f = fopen(\"/tmp/logs/1508.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_MutSemGetInfo EXIT: return_code=%d\\n\", (int) return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}