{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer over-read of the source. The call strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1) copies up to N = sizeof(mut_prop->name)-1 bytes from record->name_entry. If record->name_entry is not NUL-terminated within its own object bounds (or its underlying array is smaller than N), strncpy may attempt to read past the end of record->name_entry, violating Rule 21.17. (Note: the prior memset protects the destination from overflow or lack of NUL-termination, but it does not prevent a read beyond the source buffer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetInfo with it.\n  - Your function must have the exact same signature as OS_MutSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Lightweight logger helper (append-only). Open/close on each write to avoid\n     * requiring additional global state and to keep behavior predictable. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER OS_MutSemGetInfo: sem_id=%d, mut_prop=%p\\n\", (int)sem_id, (void *)mut_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"After memset: mut_prop=%p, zeroed_size=%zu\\n\",\n                    (void *)mut_prop, sizeof(OS_mut_sem_prop_t));\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log record and name_entry pointer before the copy to capture the potential\n         * preconditions that can lead to a source over-read. Avoid heavy inspection\n         * that could itself read beyond the source; only probe a small bounded\n         * prefix (limited by sizeof(mut_prop->name)-1 and an additional hard cap).\n         */\n        {\n            FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n            if (log)\n            {\n                const size_t dest_limit = sizeof(mut_prop->name) - 1U;\n                size_t probe_max = dest_limit < 32U ? dest_limit : 32U; /* cap to 32 bytes */\n\n                fprintf(log, \"record=%p, record->name_entry=%p, dest_limit=%zu, probe_max=%zu\\n\",\n                        (void *)record, (void *)(record ? record->name_entry : NULL), dest_limit, probe_max);\n\n                if (record && record->name_entry)\n                {\n                    /* Print up to probe_max bytes in hex and detect NUL position if present. */\n                    size_t i;\n                    fprintf(log, \"name_entry[0..%zu]=\", probe_max ? probe_max - 1U : 0U);\n                    for (i = 0U; i < probe_max; ++i)\n                    {\n                        unsigned char uc = (unsigned char)record->name_entry[i];\n                        fprintf(log, \"%02x\", (unsigned int)uc);\n                        if (uc == (unsigned char)'\\0')\n                        {\n                            fprintf(log, \" (NUL at %zu)\", i);\n                            break;\n                        }\n                        if (i + 1U < probe_max)\n                            fprintf(log, \" \");\n                    }\n                    fprintf(log, \"\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"name_entry is NULL\\n\");\n                }\n\n                fclose(log);\n            }\n        }\n\n        /* The original copy that can cause an over-read of record->name_entry if that\n         * source is not NUL-terminated within its own bounds. Keep original behavior. */\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Log the results of the copy (bounded inspection). */\n        {\n            FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n            if (log)\n            {\n                const size_t dest_limit = sizeof(mut_prop->name) - 1U;\n                size_t probe_max = dest_limit < 32U ? dest_limit : 32U;\n                size_t i;\n\n                fprintf(log, \"After strncpy: mut_prop->name ptr=%p, dest_limit=%zu, probe_max=%zu\\n\",\n                        (void *)mut_prop->name, dest_limit, probe_max);\n\n                fprintf(log, \"mut_prop->name[0..%zu]=\", probe_max ? probe_max - 1U : 0U);\n                for (i = 0U; i < probe_max; ++i)\n                {\n                    unsigned char uc = (unsigned char)mut_prop->name[i];\n                    fprintf(log, \"%02x\", (unsigned int)uc);\n                    if (uc == (unsigned char)'\\0')\n                    {\n                        fprintf(log, \" (NUL at %zu)\", i);\n                        break;\n                    }\n                    if (i + 1U < probe_max)\n                        fprintf(log, \" \");\n                }\n                fprintf(log, \"\\n\");\n\n                fprintf(log, \"mut_prop->creator=%u\\n\", (unsigned int)mut_prop->creator);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_MutSemGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1503.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_MutSemGetInfo: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}