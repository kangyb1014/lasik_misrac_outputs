{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as a mutable pointer to a mutable OS_common_record_t: \"OS_common_record_t *record;\". In this function the pointer is assigned from OS_OBJECT_TABLE_GET(OS_global_mutex_table, token) and is only used to read fields (record->name_entry, record->creator) \u2014 it is never used to modify the pointed object. Therefore the pointer should point to a const-qualified type (for example: \"const OS_common_record_t *record;\") to prevent unintentional modification and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1505.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetInfo with it.\n  - Your function must have the exact same signature as OS_MutSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *logf = NULL;\n    const char *log_path_used = \"/tmp/logs/1505.txt\";\n\n    /* Check parameters (preserve existing behavior) */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Try to open the requested log file. If that fails, fall back to /tmp/1505.txt so tests still get some output. */\n    logf = fopen(\"/tmp/logs/1505.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/1505.txt\", \"a\");\n        if (logf != NULL)\n        {\n            log_path_used = \"/tmp/1505.txt\";\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_MutSemGetInfo ENTER: sem_id=%lu, mut_prop=%p, log_file=%s\\n\",\n                (unsigned long)sem_id, (void *)mut_prop, log_path_used);\n        fflush(logf);\n    }\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n    if (logf)\n    {\n        fprintf(logf, \"memset(mut_prop) done\\n\");\n        fflush(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_OBJECT_TABLE_GET returned record=%p\\n\", (void *)record);\n            if (record)\n            {\n                /* Attempt to log the fields that are read in this function */\n                fprintf(logf, \"record->name_entry='%s'\\n\", record->name_entry ? record->name_entry : \"(null)\");\n                fprintf(logf, \"record->creator=%u\\n\", (unsigned)record->creator);\n            }\n            fflush(logf);\n        }\n\n        if (record)\n        {\n            /* Preserve original behavior: copy name and creator */\n            strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n            mut_prop->creator = record->creator;\n\n            if (logf)\n            {\n                fprintf(logf, \"Copied to mut_prop: name='%s', creator=%u\\n\",\n                        mut_prop->name, (unsigned)mut_prop->creator);\n                fflush(logf);\n            }\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"Skipping copy: record is NULL\\n\");\n                fflush(logf);\n            }\n        }\n\n        /* Call implementation-specific function and log its result */\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n        if (logf)\n        {\n            fprintf(logf, \"OS_MutSemGetInfo_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (logf)\n        {\n            fprintf(logf, \"OS_ObjectIdRelease called\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_MutSemGetInfo EXIT: return %d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}