{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_global_mutex_table is declared as a const pointer to a non-const OS_common_record_t: 'extern OS_common_record_t *const OS_global_mutex_table'. In OS_MutSemGetInfo the code only reads fields from the records (via OS_OBJECT_TABLE_GET and record->name_entry / record->creator), so the pointee could be const-qualified. Therefore the pointer does not point to a const-qualified type when it could, violating MISRA C 2023 Rule 8.13. A fix would be to declare it as 'extern const OS_common_record_t *const OS_global_mutex_table' (or equivalent) if modifications through that pointer are not required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1505.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetInfo with it.\n  - Your function must have the exact same signature as OS_MutSemGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    /* Local includes to ensure logging functions are declared in whatever\n       translation unit this replacement is placed into. This keeps the\n       function self-contained for the testing harness. */\n    #include <stdio.h>\n    #include <string.h>\n\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *logf = NULL;\n\n    /* Open log file in append mode. Tests will inspect /tmp/logs/1505.txt */\n    logf = fopen(\"/tmp/logs/1505.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_MutSemGetInfo sem_id=%d mut_prop=%p\\n\", (int)sem_id, (void *)mut_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters (original behavior preserved) */\n    OS_CHECK_POINTER(mut_prop);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Action: zeroing mut_prop at %p (size=%zu)\\n\", (void *)mut_prop, (size_t)sizeof(OS_mut_sem_prop_t));\n        fflush(logf);\n    }\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d; token addr=%p\\n\", return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve the record from the global mutex table (original behavior preserved) */\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_OBJECT_TABLE_GET -> record=%p (OS_global_mutex_table=%p)\\n\",\n                    (void *)record, (void *)OS_global_mutex_table);\n            /* Only inspect fields for logging if record is non-NULL to avoid additional crashes\n               beyond the original code's behavior. The original code will still dereference\n               record below (preserving original behavior). */\n            if (record != NULL)\n            {\n                /* Log the name_entry and creator as observed before the copy. Truncate long names\n                   to avoid overly large logs. */\n                char tmp_name[65] = { '\\0' };\n                if (record->name_entry != NULL)\n                {\n                    /* Copy up to 64 chars for safe logging */\n                    strncpy(tmp_name, record->name_entry, sizeof(tmp_name) - 1);\n                }\n                fprintf(logf, \"record->name_entry(<=64)='%s' creator=%d\\n\",\n                        tmp_name[0] ? tmp_name : \"(null)\", (int)record->creator);\n            }\n            else\n            {\n                fprintf(logf, \"record is NULL\\n\");\n            }\n            fflush(logf);\n        }\n\n        /* Preserve original behavior: copy name and creator into the output structure */\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        if (logf != NULL)\n        {\n            /* Log the state of mut_prop immediately after the copy, before calling Impl */\n            char tmp_name2[65] = { '\\0' };\n            strncpy(tmp_name2, mut_prop->name, sizeof(tmp_name2) - 1);\n            fprintf(logf, \"After copy: mut_prop->name(<=64)='%s' mut_prop->creator=%d\\n\",\n                    tmp_name2[0] ? tmp_name2 : \"(empty)\", (int)mut_prop->creator);\n            fflush(logf);\n        }\n\n        /* Call implementation-specific function (original behavior preserved) */\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_MutSemGetInfo_Impl returned %d\\n\", return_code);\n            fflush(logf);\n        }\n\n        /* Release token as in original code */\n        OS_ObjectIdRelease(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Token released\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_MutSemGetInfo return_code=%d\\n\", return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}