{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. Due to operator precedence the fragment is parsed as *(err_name[sizeof(*err_name) - 1]) rather than (*err_name)[...]. sizeof(*err_name) == OS_ERROR_NAME_LENGTH (35), so the code indexes err_name[34] (the 35th os_err_name_t) and then writes to its first byte. If err_name points to a single os_err_name_t provided by the caller, this is an out\u2011of\u2011bounds write (buffer overflow). The intended operation was to null\u2011terminate the last byte of the char array as (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0'; as written it can write beyond the bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetErrorName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetErrorName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetErrorName with it.\n  - Your function must have the exact same signature as OS_GetErrorName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetErrorName to check logs.\n  - Your function MUST preserve the original logic of OS_GetErrorName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetErrorName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetErrorName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n    FILE *log = fopen(\"/tmp/logs/273.txt\", \"a\");\n\n    /* Check parameters (preserve original check order) */\n    OS_CHECK_POINTER(err_name);\n\n    if (log)\n    {\n        fprintf(log, \"\\n--- OS_GetErrorName ENTRY ---\\n\");\n        fprintf(log, \"error_num=%d, err_name=%p\\n\", (int)error_num, (void *)err_name);\n        fprintf(log, \"sizeof(*err_name)=%zu, OS_ERROR_NAME_LENGTH=%d\\n\", sizeof(*err_name), (int)OS_ERROR_NAME_LENGTH);\n    }\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    if (log) fprintf(log, \"Searching OS_GLOBAL_ERROR_NAME_TABLE at %p\\n\", (void *)Error);\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        if (log) fprintf(log, \"  checked entry %p: Number=%d, Name=%s\\n\", (void *)Error, (int)Error->Number, Error->Name ? Error->Name : \"(NULL)\");\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        if (log) fprintf(log, \"Searching OS_IMPL_ERROR_NAME_TABLE at %p\\n\", (void *)Error);\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            if (log) fprintf(log, \"  checked entry %p: Number=%d, Name=%s\\n\", (void *)Error, (int)Error->Number, Error->Name ? Error->Name : \"(NULL)\");\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        /* Log the match and state before performing the copy and the problematic write */\n        if (log)\n        {\n            fprintf(log, \"Found match: Error=%p, Number=%d, Name=%s\\n\", (void *)Error, (int)Error->Number, Error->Name);\n\n            /* Compute indices/addresses that illustrate the precedence issue */\n            size_t computed_index = sizeof(*err_name) - 1; /* this equals OS_ERROR_NAME_LENGTH - 1 */\n            void *elem_ptr = (void *)(err_name + computed_index); /* address of err_name[computed_index] (os_err_name_t*) */\n            char *buggy_char_ptr = (char *)elem_ptr; /* interpreted as the first char of err_name[computed_index] */\n            char *intended_char_ptr = &((*err_name)[OS_ERROR_NAME_LENGTH - 1]); /* intended target: last byte of first element */\n\n            fprintf(log, \"Computed index (sizeof(*err_name)-1) = %zu\\n\", computed_index);\n            fprintf(log, \"err_name pointer = %p\\n\", (void *)err_name);\n            fprintf(log, \"Address of err_name[computed_index] (as os_err_name_t*) = %p\\n\", (void *)(err_name + computed_index));\n            fprintf(log, \"Address of first char of err_name[computed_index] (buggy target) = %p\\n\", (void *)buggy_char_ptr);\n            fprintf(log, \"Address of intended last char of (*err_name) = %p\\n\", (void *)intended_char_ptr);\n            fprintf(log, \"Note: if err_name points to a single os_err_name_t, the buggy target (%p) is out-of-bounds.\\n\", (void *)buggy_char_ptr);\n        }\n\n        /* Preserve original copy behavior */\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n\n        /* Intentionally keep the original (buggy) statement to reproduce precedence issue and allow logging to capture it */\n        *err_name[sizeof(*err_name) - 1] = 0;\n\n        if (log)\n        {\n            /* Try to log the result and show where the write occurred relative to the intended buffer */\n            char *intended_char_ptr = &((*err_name)[OS_ERROR_NAME_LENGTH - 1]);\n            size_t computed_index = sizeof(*err_name) - 1;\n            void *buggy_char_ptr = (void *)(err_name + computed_index);\n\n            fprintf(log, \"After strncpy, buffer[0]=%02x, intended last char addr=%p holds '%c' (or 0)\\n\",\n                    (unsigned char)(*(*err_name)), (void *)intended_char_ptr, (int)(*intended_char_ptr));\n            fprintf(log, \"After buggy write, buggy target element address (err_name+%zu) = %p\\n\", computed_index, buggy_char_ptr);\n            fprintf(log, \"Final string in (*err_name) = %s\\n\", (char *)(*err_name));\n        }\n\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No match found for error_num=%d; using OS_UNKNOWN format\\n\", (int)error_num);\n        }\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    /* Ensure termination (preserve original behavior) */\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    if (log)\n    {\n        fprintf(log, \"Exit OS_GetErrorName: return_code=%d, final string=(%s)\\n\", (int)return_code, (char *)(*err_name));\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}