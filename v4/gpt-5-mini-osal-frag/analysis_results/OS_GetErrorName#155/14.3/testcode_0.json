{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the while loop controlling expression is invariant (always false). Error is set to OS_IMPL_ERROR_NAME_TABLE which is defined as {{0, NULL}}, so Error->Name is NULL and the condition (Error->Name != NULL && Error->Number != error_num) is always false; this is an invariant controlling expression and not one of the permitted exceptions to MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetErrorName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetErrorName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetErrorName with it.\n  - Your function must have the exact same signature as OS_GetErrorName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetErrorName to check logs.\n  - Your function MUST preserve the original logic of OS_GetErrorName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetErrorName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetErrorName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n    FILE *log = fopen(\"/tmp/logs/279.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_GetErrorName ENTER: error_num=%d, err_name=%p\\n\", (int)error_num, (void *)err_name);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    if (log != NULL)\n    {\n        fprintf(log, \"Start scanning OS_GLOBAL_ERROR_NAME_TABLE at %p\\n\", (void *)Error);\n    }\n\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"GLOBAL loop: Error=%p Name=%s Number=%d need=%d\\n\",\n                    (void *)Error,\n                    (Error->Name != NULL) ? Error->Name : \"(NULL)\",\n                    (int)Error->Number,\n                    (int)error_num);\n        }\n        ++Error;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"After GLOBAL scan: Error=%p Name=%s Number=%d\\n\",\n                (void *)Error,\n                (Error->Name != NULL) ? Error->Name : \"(NULL)\",\n                (int)Error->Number);\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        if (log != NULL)\n        {\n            fprintf(log, \"Switch to OS_IMPL_ERROR_NAME_TABLE at %p\\n\", (void *)Error);\n        }\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"IMPL loop: Error=%p Name=%s Number=%d need=%d\\n\",\n                        (void *)Error,\n                        (Error->Name != NULL) ? Error->Name : \"(NULL)\",\n                        (int)Error->Number,\n                        (int)error_num);\n            }\n            ++Error;\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"After IMPL scan: Error=%p Name=%s Number=%d\\n\",\n                    (void *)Error,\n                    (Error->Name != NULL) ? Error->Name : \"(NULL)\",\n                    (int)Error->Number);\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Match found: Error=%p Name=%s Number=%d\\n\", (void *)Error, Error->Name, (int)Error->Number);\n        }\n\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Copied name to err_name, provisional return_code=%d\\n\", (int)return_code);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"No matching entry found (Error->Number=%d, requested=%d). Using OS_UNKNOWN.\\n\", (int)Error->Number, (int)error_num);\n        }\n\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    /* Ensure termination as original code did */\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Final err_name='%s' return_code=%d\\n\", (char *)*err_name, (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}