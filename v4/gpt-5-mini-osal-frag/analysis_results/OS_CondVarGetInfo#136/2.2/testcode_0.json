{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_CondVarGetInfo_Impl(const OS_object_token_t *token, OS_condvar_prop_t *condvar_prop) is defined to do nothing and simply return OS_SUCCESS. It is invoked from OS_CondVarGetInfo and its return value overwrites a variable that was already OS_SUCCESS. Because the implementation has no side effects (it does not modify *condvar_prop or *token) and always returns a constant, executing the call has no effect on program behaviour; removing the call (or the no-op implementation) would not change program behaviour. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1518.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarGetInfo with it.\n  - Your function must have the exact same signature as OS_CondVarGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and input pointers/IDs */\n        fprintf(log, \"ENTER OS_CondVarGetInfo: var_id=%ld, condvar_prop=%p\\n\", (long) var_id, (void *)condvar_prop);\n        fclose(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Initialize output structure as original implementation does */\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"After memset: condvar_prop=%p (zeroed)\\n\", (void *)condvar_prop);\n        fclose(log);\n    }\n\n    /* Attempt to translate the ID to an internal token */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        /* Log token address to help correlate with later calls; do not assume internal layout */\n        if (return_code == OS_SUCCESS)\n        {\n            fprintf(log, \"Token address: %p\\n\", (void *)&token);\n        }\n        fclose(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve the record and copy basic info as original implementation */\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log the copied state (name was safe because of prior memset) */\n            fprintf(log, \"Copied fields: name=\\\"%s\\\", creator=%lu\\n\",\n                    condvar_prop->name, (unsigned long)condvar_prop->creator);\n            fclose(log);\n        }\n\n        /* Call the implementation hook; the reported violation claims this is a no-op\n           that always returns OS_SUCCESS. We log the call and its return value so\n           downstream analysis can detect that it had no effect. */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo_Impl(&token, condvar_prop) returned %ld\\n\", (long)return_code);\n            /* Also re-log the condvar_prop contents to show whether the Impl changed anything */\n            fprintf(log, \"After Impl: name=\\\"%s\\\", creator=%lu\\n\",\n                    condvar_prop->name, (unsigned long)condvar_prop->creator);\n            fclose(log);\n        }\n\n        /* Release token as original implementation does */\n        OS_ObjectIdRelease(&token);\n\n        log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Token released\\n\");\n            fclose(log);\n        }\n    }\n\n    log = fopen(\"/tmp/logs/1518.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_CondVarGetInfo returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}