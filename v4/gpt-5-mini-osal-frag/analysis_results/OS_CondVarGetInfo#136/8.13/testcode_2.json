{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a mutable pointer (OS_common_record_t *record) and is assigned from OS_OBJECT_TABLE_GET(OS_global_condvar_table, token), which yields an OS_common_record_t *; the code only reads fields from *record (name_entry, creator) and does not modify the object. According to MISRA C 2023 Rule 8.13 the pointer should thus point to a const-qualified type (e.g. const OS_common_record_t *record) or the table elements should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarGetInfo with it.\n  - Your function must have the exact same signature as OS_CondVarGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Open log file for append so multiple runs accumulate evidence */\n    FILE *log = fopen(\"/tmp/logs/1515.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and basic input pointers */\n        fprintf(log, \"ENTER OS_CondVarGetInfo: var_id=%llu, condvar_prop=%p\\n\",\n                (unsigned long long) var_id, (void *) condvar_prop);\n        fflush(log);\n    }\n\n    /* Check parameters (preserve original logic) */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Preserve original behavior: zero the output structure */\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    if (log != NULL)\n    {\n        fprintf(log, \"condvar_prop zeroed (memset)\\n\");\n        fflush(log);\n    }\n\n    /* Try to obtain the object token for the given id */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long) return_code);\n        /* Dump a few bytes of the token so callers can inspect its content in logs */\n        {\n            size_t tsize = sizeof(token);\n            unsigned char *bytes = (unsigned char *)&token;\n            size_t n = (tsize < 16) ? tsize : 16;\n            fprintf(log, \"token size=%zu bytes, first %zu bytes:\", tsize, n);\n            for (size_t i = 0; i < n; ++i)\n            {\n                fprintf(log, \" %02x\", (unsigned)bytes[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Original semantics: retrieve record from table (note: pointer not const here) */\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"record pointer=%p\\n\", (void *) record);\n            if (record != NULL)\n            {\n                /* Log the fields that are observed by the function (name_entry and creator) */\n                /* Be defensive: name_entry is assumed to be a string in the original code */\n                fprintf(log, \"record->name_entry=\\\"%s\\\", record->creator=%lu\\n\",\n                        record->name_entry,\n                        (unsigned long) record->creator);\n            }\n            else\n            {\n                fprintf(log, \"record is NULL\\n\");\n            }\n            fflush(log);\n        }\n\n        /* Preserve original behavior: copy name and creator into output structure */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Call the platform-specific implementation and log its result */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo_Impl returned %ld\\n\", (long) return_code);\n            fflush(log);\n        }\n\n        /* Release the token as in original code */\n        OS_ObjectIdRelease(&token);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdRelease(&token) called\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_CondVarGetInfo: return=%ld\\n\", (long) return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}