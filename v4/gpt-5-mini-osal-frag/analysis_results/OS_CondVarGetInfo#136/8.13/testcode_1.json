{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable is declared as \"OS_common_record_t *record\" but is only used to read data (strncpy from record->name_entry and copy record->creator). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible. In this function the pointer can and should be declared as \"const OS_common_record_t *record\" to reflect read-only usage, so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarGetInfo with it.\n  - Your function must have the exact same signature as OS_CondVarGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Open log for diagnostic probes about control flow and state */\n    FILE *probe_log = fopen(\"/tmp/logs/1515.txt\", \"a\");\n    if (probe_log)\n    {\n        /* Attempt to log function entry and basic parameters */\n        fprintf(probe_log, \"OS_CondVarGetInfo: ENTER var_id=%lld condvar_prop=%p\\n\", (long long) var_id, (void *)condvar_prop);\n        fflush(probe_log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"OS_CondVarGetInfo: condvar_prop zeroed (size=%zu)\\n\", sizeof(OS_condvar_prop_t));\n        fflush(probe_log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"OS_CondVarGetInfo: OS_ObjectIdGetById returned %ld\\n\", (long) return_code);\n        fflush(probe_log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_CondVarGetInfo: record ptr=%p\\n\", (void *)record);\n            fflush(probe_log);\n        }\n\n        if (record != NULL)\n        {\n            /* Safely copy a bounded portion of the record name for logging */\n            char name_buf[64];\n            size_t prop_name_cap = sizeof(condvar_prop->name) ? sizeof(condvar_prop->name) : (sizeof(name_buf) - 1);\n            size_t copy_len = prop_name_cap - 1;\n            if (copy_len > (sizeof(name_buf) - 1))\n            {\n                copy_len = sizeof(name_buf) - 1;\n            }\n\n            /* Copy at most copy_len bytes and ensure termination for safe logging */\n            memcpy(name_buf, record->name_entry, copy_len);\n            name_buf[copy_len] = '\\0';\n\n            if (probe_log)\n            {\n                /* Log the name (safely nul-terminated) and the creator value as an integer */\n                fprintf(probe_log, \"OS_CondVarGetInfo: record->name_entry(%.32s...) creator=%llu\\n\", name_buf, (unsigned long long)record->creator);\n                fflush(probe_log);\n            }\n        }\n        else\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"OS_CondVarGetInfo: WARNING record is NULL\\n\");\n                fflush(probe_log);\n            }\n        }\n\n        /* Preserve original behavior: copy name and creator into property structure */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_CondVarGetInfo: copied name into condvar_prop->name and set creator\\n\");\n            fflush(probe_log);\n        }\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_CondVarGetInfo: OS_CondVarGetInfo_Impl returned %ld\\n\", (long) return_code);\n            fflush(probe_log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_CondVarGetInfo: Released token and about to return %ld\\n\", (long) return_code);\n            fclose(probe_log);\n        }\n    }\n    else\n    {\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_CondVarGetInfo: Not found or error before record access, returning %ld\\n\", (long) return_code);\n            fclose(probe_log);\n        }\n    }\n\n    return return_code;\n}\n"
}