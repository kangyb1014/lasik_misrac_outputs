{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtTestDataBaseEntry is used only for read access (checking and invoking the Setup function pointer) but is declared as a non-const pointer. The pointer could be const-qualified (e.g. const UtTestDataBaseEntry_t *UtTestDataBaseEntry) to reflect that the database entry is not modified here. Therefore this code violates Rule 8.13. (If the invoked Setup function or other code in scope is intended to modify the database entry itself, then const qualification would be inappropriate.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_Run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_Run with it.\n  - Your function must have the exact same signature as UtTest_Run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_Run to check logs.\n  - Your function MUST preserve the original logic of UtTest_Run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_Run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_Run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    /* Open log file for append. If this fails, proceed without logging. */\n    FILE *log = fopen(\"/tmp/logs/1595.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER UtTest_Run: DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    UT_BSP_Lock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Lock called\\n\");\n        fflush(log);\n    }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (log)\n    {\n        fprintf(log, \"Merged lists: UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(log);\n    }\n\n    UT_BSP_Unlock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Unlock called\\n\");\n        fflush(log);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (log)\n        {\n            fprintf(log, \"Iterating node: UtListNode=%p, UtTestDataBaseEntry=%p\\n\", (void *)UtListNode,\n                    (void *)UtTestDataBaseEntry);\n            fflush(log);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log test entry details (avoid printing function-pointer addresses directly)\n             * This captures the control path and the read-only usage of the database entry.\n             */\n            if (log)\n            {\n                fprintf(log, \"TestName=%s, HasSetup=%s, HasTest=%s, HasTeardown=%s\\n\",\n                        (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                        (UtTestDataBaseEntry->Setup != NULL) ? \"yes\" : \"no\",\n                        (UtTestDataBaseEntry->Test != NULL) ? \"yes\" : \"no\",\n                        (UtTestDataBaseEntry->Teardown != NULL) ? \"yes\" : \"no\");\n                fflush(log);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Calling Setup for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n\n                UtTestDataBaseEntry->Setup();\n\n                if (log)\n                {\n                    fprintf(log, \"Returned from Setup for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"No Setup for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Calling Test for '%s' (ExecutedCount before=%u)\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            UtAssert_Global.ExecutedCount);\n                    fflush(log);\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                if (log)\n                {\n                    fprintf(log, \"Returned from Test for '%s' (ExecutedCount after=%u)\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            UtAssert_Global.ExecutedCount);\n                    fflush(log);\n                }\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"No Test for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Calling Teardown for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n\n                UtTestDataBaseEntry->Teardown();\n\n                if (log)\n                {\n                    fprintf(log, \"Returned from Teardown for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"No Teardown for '%s'\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (log)\n            {\n                fprintf(log, \"Finished test entry '%s'\\n\",\n                        (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\");\n                fflush(log);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Lock before destroy: DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n\n    if (log)\n    {\n        fprintf(log, \"UtList_Destroy called on DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (log)\n    {\n        fprintf(log, \"EXIT UtTest_Run\\n\\n\");\n        fclose(log);\n    }\n}\n"
}