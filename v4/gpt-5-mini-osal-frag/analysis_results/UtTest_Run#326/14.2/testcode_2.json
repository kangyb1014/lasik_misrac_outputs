{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call UtTestDataBaseEntry->Setup() is invoked from within the for loop body. That function pointer has external/user-provided code and may modify the list head (UtListMain) or nodes (e.g. insert/remove nodes, call UtList_Merge or UtList_Destroy, or change Next/Prev pointers) or even modify the loop counter (UtListNode) indirectly. Because the second clause uses UtListMain and UtListNode and the third clause advances UtListNode, if the Setup function can modify those objects the for loop no longer meets MISRA C 2023 Rule 14.2 (the loop condition/iteration expressions must not depend on objects that are modified by the loop body or by functions it calls).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_Run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_Run with it.\n  - Your function must have the exact same signature as UtTest_Run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_Run to check logs.\n  - Your function MUST preserve the original logic of UtTest_Run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_Run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_Run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n\n    /* Open log file early so we capture entry and state information */\n    logf = fopen(\"/tmp/logs/1591.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: entry\\n\");\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (logf)\n    {\n        fprintf(logf, \"After GetHead: UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(logf);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (logf)\n    {\n        fprintf(logf, \"After merging groups: UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(logf);\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log current iteration state before executing entry functions */\n            if (logf)\n            {\n                UtListNode_t *next_before = UtList_GetNext(UtListNode);\n                UtListNode_t *head_before = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n\n                fprintf(logf, \"Loop iteration start:\\n\");\n                fprintf(logf, \"  UtListMain(local)=%p\\n\", (void *)UtListMain);\n                fprintf(logf, \"  current UtListNode=%p\\n\", (void *)UtListNode);\n                fprintf(logf, \"  next_before=%p\\n\", (void *)next_before);\n                fprintf(logf, \"  database head before iteration=%p\\n\", (void *)head_before);\n                fprintf(logf, \"  object at node=%p (TestName='%s')\\n\", (void *)UtTestDataBaseEntry,\n                        UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                fprintf(logf, \"  Setup=%p, Test=%p, Teardown=%p\\n\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n                fflush(logf);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                /* Capture some state immediately before and after calling Setup to detect modifications */\n                if (logf)\n                {\n                    UtListNode_t *next_before = UtList_GetNext(UtListNode);\n                    UtListNode_t *head_before = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n\n                    fprintf(logf, \"  About to call Setup(): node=%p, next_before=%p, head_before=%p\\n\",\n                            (void *)UtListNode, (void *)next_before, (void *)head_before);\n                    fflush(logf);\n                }\n\n                /* Call user-provided Setup (may modify list or nodes) */\n                UtTestDataBaseEntry->Setup();\n\n                if (logf)\n                {\n                    /* Attempt to observe changes to the list and node relationships after Setup */\n                    UtListNode_t *head_after = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n                    UtListNode_t *next_after = NULL;\n\n                    /* Be cautious: UtList_GetNext may be unsafe if node was removed/freed; call and log whatever it returns. */\n                    next_after = UtList_GetNext(UtListNode);\n\n                    fprintf(logf, \"  Returned from Setup(): head_after=%p, node=%p, next_after=%p\\n\",\n                            (void *)head_after, (void *)UtListNode, (void *)next_after);\n\n                    /* Check whether the original node is still reachable from the new head by walking once (best-effort) */\n                    {\n                        UtListNode_t *walk = head_after;\n                        int found = 0;\n                        int steps = 0;\n\n                        while (walk != NULL && !UtList_IsEnd(head_after, walk) && steps < 1024)\n                        {\n                            if (walk == UtListNode)\n                            {\n                                found = 1;\n                                break;\n                            }\n                            walk = UtList_GetNext(walk);\n                            steps++;\n                        }\n                        fprintf(logf, \"  reachability: original_node %p %s from head_after (walked %d steps)\\n\",\n                                (void *)UtListNode, found ? \"IS reachable\" : \"IS NOT reachable\", steps);\n                    }\n\n                    fflush(logf);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n\n            /* Log iteration end state */\n            if (logf)\n            {\n                UtListNode_t *cur_next = UtList_GetNext(UtListNode);\n                UtListNode_t *head_now = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n\n                fprintf(logf, \"Loop iteration end:\\n\");\n                fprintf(logf, \"  UtListMain(local)=%p\\n\", (void *)UtListMain);\n                fprintf(logf, \"  current UtListNode (post)=%p\\n\", (void *)UtListNode);\n                fprintf(logf, \"  next (post)=%p\\n\", (void *)cur_next);\n                fprintf(logf, \"  database head now=%p\\n\", (void *)head_now);\n                fflush(logf);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: exit\\n\");\n        fclose(logf);\n    }\n}\n"
}