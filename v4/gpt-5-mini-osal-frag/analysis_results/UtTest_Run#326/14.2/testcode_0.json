{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses UtListMain in the loop condition (!UtList_IsEnd(UtListMain, UtListNode)) and UtListNode as the single loop counter (updated by UtList_GetNext in the third clause). The loop body invokes a user-supplied function pointer (UtTestDataBaseEntry->Test()). Because the behavior of called functions is part of the loop body, that call may modify objects used in the second or third clause (for example the list structure: the current node's Next/Prev links, or even UtListNode/UtListMain). If the Test function modifies UtListNode or the list links, the second clause would be using an object modified in the body and/or the third clause would be operating on an object modified in the body, which violates MISRA C 2023 Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_Run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_Run with it.\n  - Your function must have the exact same signature as UtTest_Run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_Run to check logs.\n  - Your function MUST preserve the original logic of UtTest_Run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_Run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_Run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    /* Logging handle */\n    FILE *logf = fopen(\"/tmp/logs/1591.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: entered\\n\");\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: merged list head UtListMain=%p\\n\", (void *)UtListMain);\n        fflush(logf);\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    {\n        int iteration = 0;\n        for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n             UtListNode = UtList_GetNext(UtListNode))\n        {\n            UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n            if (logf)\n            {\n                fprintf(logf, \"Iteration %d: entering loop, UtListNode=%p\\n\", iteration, (void *)UtListNode);\n                fflush(logf);\n            }\n\n            if (UtTestDataBaseEntry != NULL)\n            {\n                /* Log test entry */\n                if (logf)\n                {\n                    fprintf(logf, \"Iteration %d: Test entry found at %p, TestName=%s, Setup=%p, Test=%p, Teardown=%p\\n\",\n                            iteration,\n                            (void *)UtTestDataBaseEntry,\n                            (UtTestDataBaseEntry->TestName) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            (void *)UtTestDataBaseEntry->Setup,\n                            (void *)UtTestDataBaseEntry->Test,\n                            (void *)UtTestDataBaseEntry->Teardown);\n                    fflush(logf);\n                }\n\n                UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n                UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n                if (UtTestDataBaseEntry->Setup)\n                {\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: calling Setup() on %p\\n\", iteration, (void *)UtTestDataBaseEntry->Setup);\n                        fflush(logf);\n                    }\n                    UtTestDataBaseEntry->Setup();\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: returned from Setup()\\n\", iteration);\n                        fflush(logf);\n                    }\n                }\n                UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n                if (UtTestDataBaseEntry->Test)\n                {\n                    /* Capture pointers/state before calling Test */\n                    UtListNode_t *nextBefore = UtList_GetNext(UtListNode);\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: before Test(): UtListMain=%p, UtListNode=%p, nextBefore=%p\\n\",\n                                iteration, (void *)UtListMain, (void *)UtListNode, (void *)nextBefore);\n                        fflush(logf);\n                    }\n\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: calling Test() at %p\\n\", iteration, (void *)UtTestDataBaseEntry->Test);\n                        fflush(logf);\n                    }\n\n                    UtTestDataBaseEntry->Test();\n                    UtAssert_Global.ExecutedCount++;\n\n                    /* Capture pointers/state after calling Test to detect modifications */\n                    UtListNode_t *nextAfter = UtList_GetNext(UtListNode);\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: after Test(): UtListMain=%p, UtListNode=%p, nextBefore=%p, nextAfter=%p\\n\",\n                                iteration, (void *)UtListMain, (void *)UtListNode, (void *)nextBefore, (void *)nextAfter);\n                        if (nextBefore != nextAfter)\n                        {\n                            fprintf(logf, \"Iteration %d: WARNING: next pointer changed by Test() (nextBefore != nextAfter)\\n\", iteration);\n                        }\n                        /* Also log whether the list thinks the node is end after Test */\n                        fprintf(logf, \"Iteration %d: UtList_IsEnd(UtListMain, UtListNode) after Test() = %d\\n\",\n                                iteration, (int)UtList_IsEnd(UtListMain, UtListNode));\n                        fflush(logf);\n                    }\n                }\n                UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n                if (UtTestDataBaseEntry->Teardown)\n                {\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: calling Teardown() at %p\\n\", iteration, (void *)UtTestDataBaseEntry->Teardown);\n                        fflush(logf);\n                    }\n                    UtTestDataBaseEntry->Teardown();\n                    if (logf)\n                    {\n                        fprintf(logf, \"Iteration %d: returned from Teardown()\\n\", iteration);\n                        fflush(logf);\n                    }\n                }\n\n                UtAssert_EndTest();\n            }\n\n            if (logf)\n            {\n                fprintf(logf, \"Iteration %d: loop end, next UtListNode will be %p\\n\", iteration, (void *)UtList_GetNext(UtListNode));\n                fflush(logf);\n            }\n\n            iteration++;\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: exiting loop, about to destroy database and end test\\n\");\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    if (logf)\n    {\n        fprintf(logf, \"UtTest_Run: calling UT_BSP_EndTest with counters=%p\\n\", (void *)&UtAssert_GetCounters());\n        fflush(logf);\n        fclose(logf);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}