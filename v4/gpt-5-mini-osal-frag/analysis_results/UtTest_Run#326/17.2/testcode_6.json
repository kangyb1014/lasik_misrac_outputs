{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf any UtTestDataBaseEntry->Setup (or Test/Teardown) function pointer is set to UtTest_Run (or to a function that eventually calls UtTest_Run), UtTest_Run will call itself indirectly. For example, registering UtTest_Run as a test's Setup: entry.Setup = UtTest_Run; then when UtTest_Run executes entry.Setup() it will recursively call UtTest_Run, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1590.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtTest_Run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtTest_Run with it.\n  - Your function must have the exact same signature as UtTest_Run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtTest_Run to check logs.\n  - Your function MUST preserve the original logic of UtTest_Run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtTest_Run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtTest_Run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *logf = NULL;\n\n    /* Open log file for appending control-flow and state information. */\n    logf = fopen(\"/tmp/logs/1590.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER UtTest_Run() - function address=%p\\n\", (void *) &UtTest_Run);\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n    if (logf) { fprintf(logf, \"UT_BSP_Lock acquired\\n\"); fflush(logf); }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (logf) { fprintf(logf, \"UtList_GetHead(DEFAULT) -> %p\\n\", (void *)UtListMain); fflush(logf); }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    if (logf) { fprintf(logf, \"Merged SETUP group into main list\\n\"); fflush(logf); }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    if (logf) { fprintf(logf, \"Merged TEST group into main list\\n\"); fflush(logf); }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    if (logf) { fprintf(logf, \"Merged TEARDOWN group into main list\\n\"); fflush(logf); }\n\n    UT_BSP_Unlock();\n    if (logf) { fprintf(logf, \"UT_BSP_Unlock released\\n\"); fflush(logf); }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            if (logf)\n            {\n                fprintf(logf, \"--- START TEST ENTRY ---\\n\");\n                fprintf(logf, \"TestName ptr=%p\", (void *)UtTestDataBaseEntry->TestName);\n                if (UtTestDataBaseEntry->TestName) fprintf(logf, \" name=\\\"%s\\\"\", UtTestDataBaseEntry->TestName);\n                fprintf(logf, \"\\n\");\n                fflush(logf);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (logf)\n                {\n                    /* Log pointer value and whether it equals UtTest_Run (direct recursion detection) */\n                    fprintf(logf, \"About to call Setup() pointer=%p equals_UtTest_Run=%s\\n\",\n                            (void *)UtTestDataBaseEntry->Setup,\n                            (UtTestDataBaseEntry->Setup == UtTest_Run) ? \"TRUE\" : \"FALSE\");\n                    fflush(logf);\n                }\n\n                UtTestDataBaseEntry->Setup();\n\n                if (logf)\n                {\n                    fprintf(logf, \"Returned from Setup() pointer=%p\\n\", (void *)UtTestDataBaseEntry->Setup);\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"About to call Test() pointer=%p\\n\", (void *)UtTestDataBaseEntry->Test);\n                    fflush(logf);\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                if (logf)\n                {\n                    fprintf(logf, \"Returned from Test() pointer=%p executed_count=%d\\n\",\n                            (void *)UtTestDataBaseEntry->Test,\n                            (int)UtAssert_Global.ExecutedCount);\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"About to call Teardown() pointer=%p equals_UtTest_Run=%s\\n\",\n                            (void *)UtTestDataBaseEntry->Teardown,\n                            (UtTestDataBaseEntry->Teardown == UtTest_Run) ? \"TRUE\" : \"FALSE\");\n                    fflush(logf);\n                }\n\n                UtTestDataBaseEntry->Teardown();\n\n                if (logf)\n                {\n                    fprintf(logf, \"Returned from Teardown() pointer=%p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n                    fflush(logf);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (logf)\n            {\n                fprintf(logf, \"--- END TEST ENTRY ---\\n\");\n                fflush(logf);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    if (logf) { fprintf(logf, \"UT_BSP_Lock acquired for cleanup\\n\"); fflush(logf); }\n\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n\n    UT_BSP_Unlock();\n    if (logf) { fprintf(logf, \"UT_BSP_Unlock released after cleanup\\n\"); fflush(logf); }\n\n    if (logf)\n    {\n        fprintf(logf, \"Calling UT_BSP_EndTest with counters: %p\\n\", (void *)UtAssert_GetCounters());\n        fflush(logf);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT UtTest_Run()\\n\");\n        fclose(logf);\n    }\n}\n"
}