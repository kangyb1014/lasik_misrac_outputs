{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if UT_ConfigureGenericStubReturnValue accepts a non-const pointer (e.g. void *value). In that case the call &Retcode yields a pointer to a non-const type being passed where a const-qualified pointer should be used (the function appears to only read the data), so Rule 8.13 is violated. To fix, the function prototype should take a pointer to const (e.g. const void * or const UT_IntReturn_t *) or the call should otherwise ensure the pointed-to type is const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1835.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_SetDeferredRetcode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_SetDeferredRetcode with it.\n  - Your function must have the exact same signature as UT_SetDeferredRetcode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_SetDeferredRetcode to check logs.\n  - Your function MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_SetDeferredRetcode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* Probe logging: record entry, parameters and pointer information to help reproduce Rule 8.13 scenario */\n    {\n        FILE *log = fopen(\"/tmp/logs/1835.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log basic control/state info. We intentionally log the address of Retcode to show a non-const\n             * pointer is being passed to the generic stub configuration routine (possible Rule 8.13 violation).\n             */\n            fprintf(log, \"UT_SetDeferredRetcode: ENTER\\n\");\n            fprintf(log, \"  Count = %ld\\n\", (long)Count);\n            /* Cast Retcode to long for logging purposes; type may vary but this gives a readable value in most builds */\n            fprintf(log, \"  Retcode (value) = %ld\\n\", (long)Retcode);\n            fprintf(log, \"  &Retcode (address) = %p\\n\", (void *)&Retcode);\n            fprintf(log, \"  sizeof(Retcode) = %lu\\n\", (unsigned long)sizeof(Retcode));\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        /* Log the error path as well so the reproduction contains evidence of this branch */\n        FILE *log = fopen(\"/tmp/logs/1835.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDeferredRetcode: INVALID Count (%ld) - invoking UtAssert_Failed\\n\", (long)Count);\n            fflush(log);\n            fclose(log);\n        }\n\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        /* Log just before making the call that is suspected of causing the Rule 8.13 violation. */\n        FILE *log = fopen(\"/tmp/logs/1835.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDeferredRetcode: calling UT_ConfigureGenericStubReturnValue with &Retcode=%p, size=%lu, Count=%ld\\n\",\n                    (void *)&Retcode, (unsigned long)sizeof(Retcode), (long)Count);\n            fflush(log);\n            fclose(log);\n        }\n\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n\n        /* Log after call to provide clear control-flow evidence that the call was reached. */\n        log = fopen(\"/tmp/logs/1835.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDeferredRetcode: returned from UT_ConfigureGenericStubReturnValue\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n}\n"
}