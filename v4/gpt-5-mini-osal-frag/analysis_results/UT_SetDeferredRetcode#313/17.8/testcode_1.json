{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe address of the parameter Retcode is passed to UT_ConfigureGenericStubReturnValue. If that callee has a non-const pointer parameter and writes to the pointed object (e.g. copies into or modifies it), it will modify the function parameter Retcode inside UT_SetDeferredRetcode, which violates MISRA C 2023 Rule 17.8. To avoid the violation the code must ensure the callee does not modify the pointed object (use a const pointer) or pass a separate local copy instead of &Retcode.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1832.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_SetDeferredRetcode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_SetDeferredRetcode with it.\n  - Your function must have the exact same signature as UT_SetDeferredRetcode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_SetDeferredRetcode to check logs.\n  - Your function MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_SetDeferredRetcode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    FILE *log = fopen(\"/tmp/logs/1832.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and parameter info. We log the address of the local Retcode to expose the pointer passed to the callee. */\n        (void)fprintf(log, \"ENTER UT_SetDeferredRetcode: FuncKey=%lu Count=%ld Retcode=%ld addr=%p\\n\",\n                      (unsigned long)FuncKey, (long)Count, (long)Retcode, (void *)&Retcode);\n        (void)fflush(log);\n    }\n\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_SetDeferredRetcode: Invalid Count (%ld) - about to call UtAssert_Failed\\n\", (long)Count);\n            (void)fflush(log);\n            (void)fclose(log);\n        }\n\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_SetDeferredRetcode: Preparing to call UT_ConfigureGenericStubReturnValue with &Retcode=%p size=%zu Count=%ld\\n\",\n                          (void *)&Retcode, sizeof(Retcode), (long)Count);\n            (void)fflush(log);\n        }\n\n        /* Capture pre-call value of the local Retcode so we can detect if the callee modifies the object pointed to by the passed pointer. */\n        UT_IntReturn_t pre_value = Retcode;\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_SetDeferredRetcode: pre-call Retcode=%ld\\n\", (long)pre_value);\n            (void)fflush(log);\n        }\n\n        /* Original behavior preserved: pass address of the local Retcode to the generic stub configuration. */\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n\n        /* Log post-call value to detect modification of the function parameter via the pointer. */\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_SetDeferredRetcode: post-call Retcode=%ld (pre-call=%ld)\\n\", (long)Retcode, (long)pre_value);\n            (void)fflush(log);\n            (void)fclose(log);\n        }\n    }\n}\n"
}