{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code stores the TypeName pointer directly into the stub table (StubPtr->Data.Rvc.TypeName = TypeName) without copying it. If the caller passes a pointer to a temporary/stack buffer or to a non-null-terminated buffer, and later code uses a <string.h> routine (e.g. strlen, strcpy, strcat, strcmp) on StubPtr->Data.Rvc.TypeName, that string function can access beyond the lifetime or bounds of the original object and therefore violate MISRA C 2023 Rule 21.17. For example: a caller creates a local char name[16]; fills it; calls UT_SetDeferredRetcode(..., name); the local name goes out of scope; later code calls strlen(StubPtr->Data.Rvc.TypeName) \u2014 this may read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDeferredRetcode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_SetDeferredRetcode:\n```c\nvoid UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* The count should always be a positive integer, if not there is a bug in the test */\n    if (Count <= 0)\n    {\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_SetDeferredRetcode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_SetDeferredRetcode with it.\n  - Your function must have the exact same signature as UT_SetDeferredRetcode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_SetDeferredRetcode to check logs.\n  - Your function MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_SetDeferredRetcode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_SetDeferredRetcode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_SetDeferredRetcode(UT_EntryKey_t FuncKey, int32 Count, UT_IntReturn_t Retcode)\n{\n    /* Minimal logging to capture control flow and state for the violation scenario. */\n    FILE *log = fopen(\"/tmp/logs/1833.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and key information. Casts to long mirror existing use in the original code. */\n        fprintf(log, \"UT_SetDeferredRetcode ENTER: FuncKey=%ld, Count=%ld, Retcode=%ld, Retcode_addr=%p\\n\",\n                (long)FuncKey, (long)Count, (long)Retcode, (void *)&Retcode);\n        fflush(log);\n    }\n\n    /* Preserve original behavior: Count must be positive. */\n    if (Count <= 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDeferredRetcode: Invalid Count branch taken (Count=%ld)\\n\", (long)Count);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Original assertion call preserved exactly. */\n        UtAssert_Failed(\"BUG: Invalid Count (%ld) passed to UT_SetDeferredRetcode()\", (long)Count);\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            /* Log the call that passes the address of the stack variable Retcode to the stub configurator.\n               This is key evidence for the violation scenario where the callee might store this address\n               instead of copying the value. */\n            fprintf(log, \"UT_SetDeferredRetcode: Calling UT_ConfigureGenericStubReturnValue(FuncKey=%ld, Retcode_addr=%p, size=%zu, Count=%ld)\\n\",\n                    (long)FuncKey, (void *)&Retcode, sizeof(Retcode), (long)Count);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Preserve original behavior exactly. */\n        UT_ConfigureGenericStubReturnValue(FuncKey, &Retcode, sizeof(Retcode), UT_ValueGenre_INTEGER, Count, NULL);\n    }\n\n    /* Final exit log to show function completed normally (when not asserted). */\n    log = fopen(\"/tmp/logs/1833.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_SetDeferredRetcode EXIT: FuncKey=%ld, Count=%ld\\n\", (long)FuncKey, (long)Count);\n        fclose(log);\n    }\n}\n"
}