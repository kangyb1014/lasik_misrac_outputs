{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as OS_impl_file_internal_record_t *impl (pointer to non-const). In OS_GenericSeek_Impl it is only used for read-only access (impl->fd is read to call lseek), so the pointer should be to a const-qualified type (const OS_impl_file_internal_record_t *impl). Therefore this code violates MISRA C 2023 Rule 8.13. (Assigning the address of the global non-const table element to a const pointer is allowed; change the declaration to const OS_impl_file_internal_record_t *impl.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSeek_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3265.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GenericSeek_Impl:\n```c\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GenericSeek_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GenericSeek_Impl with it.\n  - Your function must have the exact same signature as OS_GenericSeek_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GenericSeek_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GenericSeek_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open a persistent append log so that test harness can inspect control flow and state. */\n    FILE *log = fopen(\"/tmp/logs/3265.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_GenericSeek_Impl token=%p offset=%d whence=%u\\n\",\n                (const void *)token, (int)offset, (unsigned)whence);\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        if (impl != NULL)\n        {\n            /* Record pointer and the fd field (read-only access) */\n            fprintf(log, \"impl=%p impl->fd=%d\\n\", (void *)impl, impl->fd);\n        }\n        else\n        {\n            fprintf(log, \"impl=NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            if (log)\n            {\n                fprintf(log, \"INVALID whence value: %u -> returning OS_ERROR\\n\", (unsigned)whence);\n                fflush(log);\n                fclose(log);\n            }\n            return OS_ERROR;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"mapped whence=%u to where=%d; calling lseek(fd=%d, offset=%d)\\n\",\n                (unsigned)whence, where, impl ? impl->fd : -1, (int)offset);\n        fflush(log);\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            if (log)\n            {\n                fprintf(log, \"lseek -> ESPIPE: operation not supported\\n\");\n                fflush(log);\n                fclose(log);\n            }\n\n            /* this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"lseek error: errno=%d (%s) -> returning OS_ERROR\\n\", errno, strerror(errno));\n                fflush(log);\n                fclose(log);\n            }\n\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"lseek success: returned=%lld -> returning as int32\\n\", (long long)os_result);\n            fflush(log);\n            fclose(log);\n        }\n\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}"
}