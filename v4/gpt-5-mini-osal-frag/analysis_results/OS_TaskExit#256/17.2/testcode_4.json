{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible via the event callback: OS_TaskExit -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler (user-supplied) -> OS_TaskExit. If the registered EventHandler calls OS_TaskExit, this causes an indirect call back to OS_TaskExit, violating Rule 17.2. (If no EventHandler is registered, or the handler does not call OS_TaskExit, no recursion occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskExit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2980.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskExit:\n```c\nvoid OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n\n    task_id = OS_TaskGetId_Impl();\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        OS_TaskDetach_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n    }\n\n    /* call the implementation */\n    OS_TaskExit_Impl();\n\n    /* Impl function never returns */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskExit code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskExit with it.\n  - Your function must have the exact same signature as OS_TaskExit.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskExit to check logs.\n  - Your function MUST preserve the original logic of OS_TaskExit as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskExit will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskExit as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n    static int        __os_taskexit_reentrancy = 0;\n    FILE             *logf = NULL;\n\n    /* Increment reentrancy depth early so recursive entries are observable in the log */\n    __os_taskexit_reentrancy++;\n\n    /* Try to open the log file in append mode.  Do not abort if logging fails. */\n    logf = fopen(\"/tmp/logs/2980.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskExit: entered, depth=%d\\n\", __os_taskexit_reentrancy);\n    }\n\n    /* Preserve original behavior: obtain the current task id and try to look it up */\n    task_id = OS_TaskGetId_Impl();\n    if (logf != NULL)\n    {\n        /* Cast to unsigned long for a generic integer display; typical implementations use an integer ID */\n        fprintf(logf, \"OS_TaskExit: task_id=%lu\\n\", (unsigned long)task_id);\n        fflush(logf);\n    }\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskExit: OS_ObjectIdGetById -> OS_SUCCESS\\n\");\n            fflush(logf);\n        }\n\n        /* Detach the task from any parent structures (original behavior) */\n        OS_TaskDetach_Impl(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskExit: returned from OS_TaskDetach_Impl\\n\");\n            fflush(logf);\n        }\n\n        /* Complete the operation via the common routine (this is the point an event callback may occur) */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskExit: calling OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token) -- callbacks may run here\\n\");\n            fflush(logf);\n        }\n\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskExit: returned from OS_ObjectIdFinalizeDelete\\n\");\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskExit: OS_ObjectIdGetById -> not OS_SUCCESS\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskExit: calling OS_TaskExit_Impl() (implementation may not return)\\n\");\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* call the implementation (original code: function never returns) */\n    OS_TaskExit_Impl();\n\n    /* If OS_TaskExit_Impl ever returns unexpectedly, log and decrement the reentrancy count. */\n    __os_taskexit_reentrancy--;\n\n    logf = fopen(\"/tmp/logs/2980.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskExit: returned from OS_TaskExit_Impl unexpectedly, depth=%d\\n\", __os_taskexit_reentrancy);\n        fclose(logf);\n    }\n}\n"
}