{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_BinSemDelete calls OS_ObjectIdFinalizeDelete which calls OS_NotifyEvent (via OS_NotifyEvent -> OS_SharedGlobalVars.EventHandler if non-NULL). If the registered EventHandler (or code it calls, e.g. OS_CleanUpObject) calls OS_BinSemDelete again, this creates an indirect recursive call chain: OS_BinSemDelete -> OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_BinSemDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/550.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemDelete with it.\n  - Your function must have the exact same signature as OS_BinSemDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemDelete to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *log = fopen(\"/tmp/logs/550.txt\", \"a\");\n\n    /* Fallback if directory doesn't exist */\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/550.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        /* Log entry and basic state. Avoid touching token internals; print its address. */\n        fprintf(log, \"ENTER OS_BinSemDelete: sem_id=%lu, token_addr=%p\\n\", (unsigned long)sem_id, (void *)&token);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d for sem_id=%lu\\n\", (int)return_code, (unsigned long)sem_id);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"About to call OS_BinSemDelete_Impl for sem_id=%lu\\n\", (unsigned long)sem_id);\n            fflush(log);\n        }\n\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_BinSemDelete_Impl returned %d for sem_id=%lu\\n\", (int)return_code, (unsigned long)sem_id);\n            fflush(log);\n        }\n\n        if (log)\n        {\n            fprintf(log, \"About to call OS_ObjectIdFinalizeDelete(return_code=%d) for sem_id=%lu\\n\", (int)return_code, (unsigned long)sem_id);\n            fflush(log);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeDelete returned %d for sem_id=%lu\\n\", (int)return_code, (unsigned long)sem_id);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_BinSemDelete: final return_code=%d for sem_id=%lu\\n\", (int)return_code, (unsigned long)sem_id);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}