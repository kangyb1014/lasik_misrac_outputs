{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe loop uses while (1) \u2014 an invariant controlling expression \u2014 and relies on internal break statements (SearchLen >= SearchLimit or match found) to terminate. This is not an intentionally infinite loop, so it does not meet the exception for invariants used to create infinite loops; therefore the controlling expression is invariant and violates Rule 14.3. Recommended remedy: make the loop condition explicit (e.g. while (SearchLen < SearchLimit) or equivalent) so the controlling expression is not invariant.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/879.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_Message code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_Message with it.\n  - Your function must have the exact same signature as UtAssert_Message.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_Message to check logs.\n  - Your function MUST preserve the original logic of UtAssert_Message as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_Message will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_Message as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Preserve original behavior for constructing the final message */\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /*\n     * Logging probe: append a record to /tmp/logs/879.txt containing\n     * the fact that UtAssert_Message was entered and the key state\n     * used to form the final message. This aids in reproducing a\n     * control-flow/state scenario (e.g. evidence around loop exits\n     * that are driven by internal breaks). If the file cannot be\n     * opened we silently skip file logging to preserve original\n     * behavior.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/879.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Timestamp and simple context for easier triage */\n            time_t now = time(NULL);\n            struct tm *lt = localtime(&now);\n\n            if (lt != NULL)\n            {\n                fprintf(log, \"%04d-%02d-%02d %02d:%02d:%02d | \"\n                        \"UtAssert_Message ENTRY | Type=%u | File=%s | Line=%u | Spec=%s | Final=%s\\n\",\n                        lt->tm_year + 1900, lt->tm_mon + 1, lt->tm_mday,\n                        lt->tm_hour, lt->tm_min, lt->tm_sec,\n                        (unsigned)MessageType,\n                        (File != NULL) ? File : \"(null)\",\n                        (unsigned)Line,\n                        (Spec != NULL) ? Spec : \"(null)\",\n                        FinalMessage);\n            }\n            else\n            {\n                fprintf(log, \"TIME-UNKNOWN | UtAssert_Message ENTRY | Type=%u | File=%s | Line=%u | Spec=%s | Final=%s\\n\",\n                        (unsigned)MessageType,\n                        (File != NULL) ? File : \"(null)\",\n                        (unsigned)Line,\n                        (Spec != NULL) ? Spec : \"(null)\",\n                        FinalMessage);\n            }\n\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Preserve original behavior: deliver the text to the BSP */\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}