{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur if UtDebug itself calls the stubbed OS_printf (or another function whose UT stub invokes UT_DefaultHandler_OS_printf). Example call chain: UtDebug -> OS_printf (stub) -> UT_DefaultStubImplWithArgs -> UT_DefaultHandler_OS_printf -> UtDebug. Because UT_DefaultHandler_OS_printf calls UtDebug(\"OS_printf: %s\", str), this creates an indirect recursive cycle if UtDebug uses OS_printf (or another function routed to the same handler).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/870.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_Message code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_Message with it.\n  - Your function must have the exact same signature as UtAssert_Message.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_Message to check logs.\n  - Your function MUST preserve the original logic of UtAssert_Message as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_Message will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_Message as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* --- Probe logging buffer --- */\n    char LogBuf[512];\n    size_t LogLen = 0;\n\n    /* Log entry into function and basic parameters. Use safe checks for NULL strings. */\n    if (Spec == NULL)\n    {\n        /* Ensure Spec is never NULL when used below */\n        Spec = \"(null)\";\n    }\n\n    LogLen += (size_t)snprintf(&LogBuf[LogLen], sizeof(LogBuf) - LogLen,\n                               \"ENTRY: UtAssert_Message called. MessageType=%u, File=%p, Line=%u, Spec=%s\\n\",\n                               (unsigned)MessageType, (const void *)File, (unsigned)Line, Spec);\n\n    if (File != NULL)\n    {\n        /* Preserve original BaseName extraction logic */\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        /* Log the computed base name */\n        LogLen += (size_t)snprintf(&LogBuf[LogLen], sizeof(LogBuf) - LogLen,\n                                   \"Computed BaseName=%s, MsgLen=%zu\\n\",\n                                   BaseName, MsgLen);\n    }\n    else\n    {\n        MsgLen = 0;\n        LogLen += (size_t)snprintf(&LogBuf[LogLen], sizeof(LogBuf) - LogLen,\n                                   \"No File provided. MsgLen=0\\n\");\n    }\n\n    /* Build the remaining part of the message using the variable args (original behavior) */\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the resulting FinalMessage (truncate if necessary) */\n    LogLen += (size_t)snprintf(&LogBuf[LogLen], sizeof(LogBuf) - LogLen,\n                               \"FinalMessage=%s\\n\", FinalMessage);\n\n    /* Attempt to write the log to the probe file. Use stdio so test harness with standard libs can capture it.\n       This is intentionally done before calling UT_BSP_DoText to capture control flow up to that call. */\n    {\n        FILE *f = fopen(\"/tmp/logs/870.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* fwrite the actual length computed (if truncated by snprintf it will still be null-terminated) */\n            size_t write_len = strlen(LogBuf);\n            fwrite(LogBuf, 1, write_len, f);\n            fflush(f);\n            fclose(f);\n        }\n        else\n        {\n            /* If fopen fails, attempt a minimal write to stderr as fallback (do not assume it will route to UT handlers).\n               Use fwrite which is standard and less likely to be routed into the stubbed OS_printf chain.\n               This is a best-effort fallback; failure is non-fatal. */\n            /* Note: We avoid fprintf to reduce chance of invoking formatted-output stubs. */\n            (void)f;\n        }\n    }\n\n    /* Preserve original behavior: deliver text via BSP function */\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Final trace: note that UT_BSP_DoText was invoked. Append this to log file. */\n    {\n        char EndBuf[128];\n        size_t endlen = (size_t)snprintf(EndBuf, sizeof(EndBuf), \"EXIT: UT_BSP_DoText invoked for MessageType=%u\\n\", (unsigned)MessageType);\n        FILE *f2 = fopen(\"/tmp/logs/870.txt\", \"a\");\n        if (f2 != NULL)\n        {\n            fwrite(EndBuf, 1, endlen, f2);\n            fflush(f2);\n            fclose(f2);\n        }\n    }\n}\n"
}