{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(string, \"%s\") (and similarly strcmp(string, \"%s\\n\")) can read past the bounds of the object referenced by 'string' if 'string' is NULL or not NUL-terminated. For example, if UT_Hook_GetArgValueByName returns NULL or a pointer to a non-terminated buffer (e.g. a 2-byte buffer containing {'%','s'} without a trailing '\\0'), strcmp will continue reading memory until it finds a NUL byte and thus access memory beyond the object \u2014 violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_Message code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_Message with it.\n  - Your function must have the exact same signature as UtAssert_Message.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_Message to check logs.\n  - Your function MUST preserve the original logic of UtAssert_Message as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_Message will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_Message as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n    int         ret = -1;\n\n    /* Open log for tracing control flow and state relevant to string handling */\n    {\n        FILE *logf = fopen(\"/tmp/logs/873.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER UtAssert_Message: MessageType=%u File_ptr=%p Line=%u Spec_ptr=%p\\n\",\n                    (unsigned)MessageType, (void *)File, (unsigned)Line, (void *)Spec);\n            if (File != NULL)\n            {\n                /* Log the provided File string safely (assumed NUL-terminated like original code expects) */\n                fprintf(logf, \"  File: %s\\n\", File);\n            }\n            if (Spec != NULL)\n            {\n                /* Log the format string to help reproduce format-driven issues */\n                fprintf(logf, \"  Spec: %s\\n\", Spec);\n                if (strstr(Spec, \"%s\") != NULL)\n                {\n                    fprintf(logf, \"  Spec contains '%%s' token (possible string argument dereference).\\n\");\n                }\n            }\n            fclose(logf);\n        }\n    }\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    /* Perform formatting as original code does and capture return value */\n    ret = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the formatted output so callers can see what vsnprintf produced (this will include\n       any dereferenced string arguments, which helps reproduce issues like non-NUL-terminated\n       buffers causing overreads in other code paths). */\n    {\n        FILE *logf = fopen(\"/tmp/logs/873.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT UtAssert_Message: ret=%d MsgLen=%zu FinalMessage='%s'\\n\",\n                    ret, MsgLen, FinalMessage);\n            fclose(logf);\n        }\n    }\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}