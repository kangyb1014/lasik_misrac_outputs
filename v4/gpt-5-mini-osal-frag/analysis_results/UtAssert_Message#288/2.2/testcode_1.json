{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial computation 'size_t length = strlen(string);' in UT_DefaultHandler_OS_printf is redundant: the variable 'length' is reassigned (length = strlen(string);) before any use inside the status>=0 branch. The first strlen() call therefore performs an operation whose result is never used \u2014 an executed operation that can be removed without affecting program behaviour \u2014 and is dead code. (Note: if strlen() would trigger undefined behaviour for an invalid 'string' pointer, removing it changes that failing behaviour; however in the normal valid-input case the initialization is dead and should be removed or deferred to where it is actually needed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/878.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_Message code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_Message with it.\n  - Your function must have the exact same signature as UtAssert_Message.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_Message to check logs.\n  - Your function MUST preserve the original logic of UtAssert_Message as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_Message will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_Message as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Open a log file to record control-flow/state for debugging the dead-code report */\n    FILE *logf = fopen(\"/tmp/logs/878.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER UtAssert_Message: MessageType=%u, File=%p, Line=%u, Spec=%p\\n\",\n                (unsigned)MessageType, (void *)File, (unsigned)Line, (void *)Spec);\n    }\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n            if (logf) fprintf(logf, \"BaseName: (no path sep) -> '%s'\\n\", BaseName);\n        }\n        else\n        {\n            ++BaseName;\n            if (logf) fprintf(logf, \"BaseName: (after last '/') -> '%s'\\n\", BaseName);\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n        if (logf) fprintf(logf, \"Prefix FinalMessage='%s' (MsgLen=%zu)\\n\", FinalMessage, MsgLen);\n    }\n    else\n    {\n        MsgLen = 0;\n        if (logf) fprintf(logf, \"File==NULL -> MsgLen=0\\n\");\n    }\n\n    va_start(va, Spec);\n    /* capture vsnprintf return for logging but preserve original behavior */\n    int vsn_ret = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    if (logf)\n    {\n        fprintf(logf, \"vsnprintf returned %d\\n\", vsn_ret);\n        if (vsn_ret >= (int)(sizeof(FinalMessage) - MsgLen))\n        {\n            fprintf(logf, \"Note: output was truncated (buffer %zu, used offset %zu)\\n\", sizeof(FinalMessage), MsgLen);\n        }\n        fprintf(logf, \"FinalMessage (after vsnprintf): '%s'\\n\", FinalMessage);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}