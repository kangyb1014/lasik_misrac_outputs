{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const void *ref but only uses it as a read-only const char * (it does: const char *target = (const char *)ref). Callers (e.g. OS_TranslatePath) pass a const char *VirtualPath cast to (void *), discarding the const qualifier. Because the pointer could and should be declared const (e.g. const void *ref or const char *ref) to preserve constness and avoid casts that drop const, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TranslatePath code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TranslatePath with it.\n  - Your function must have the exact same signature as OS_TranslatePath.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TranslatePath to check logs.\n  - Your function MUST preserve the original logic of OS_TranslatePath as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TranslatePath will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Attempt to open the log file for appending. If this fails, continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_TranslatePath: VirtualPath=%p LocalPath=%p\\n\", (const void *)VirtualPath, (void *)LocalPath);\n        fflush(log);\n    }\n\n    /* Check to see if the path pointers are NULL */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    if (log)\n    {\n        fprintf(log, \"After OS_CHECK_POINTER: VirtualPath=%p LocalPath=%p\\n\", (const void *)VirtualPath, (void *)LocalPath);\n        fflush(log);\n    }\n\n    /* Check length */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (log)\n    {\n        fprintf(log, \"VirtPathLen=%zu\\n\", VirtPathLen);\n        fflush(log);\n    }\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: VirtPathLen >= OS_MAX_PATH_LEN -> return %d\\n\", OS_FS_ERR_PATH_TOO_LONG);\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (log)\n    {\n        fprintf(log, \"strrchr(VirtualPath, '/') -> name_ptr=%p\\n\", (const void *)name_ptr);\n        fflush(log);\n    }\n    if (name_ptr == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: no '/' found in VirtualPath -> return %d\\n\", OS_FS_ERR_PATH_INVALID);\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (log)\n    {\n        fprintf(log, \"name_ptr advanced to %p (points to filename start)\\n\", (const void *)name_ptr);\n        fflush(log);\n    }\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: filename too long (no null within OS_MAX_FILE_NAME) -> return %d\\n\", OS_FS_ERR_NAME_TOO_LONG);\n            fclose(log);\n        }\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /* All valid Virtual paths must start with a '/' character */\n    if (VirtualPath[0] != '/')\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: VirtualPath does not start with '/' (VirtualPath[0]=%c) -> return %d\\n\", VirtualPath[0], OS_FS_ERR_PATH_INVALID);\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    if (log)\n    {\n        fprintf(log, \"Calling OS_ObjectIdGetBySearch with search arg (void*)VirtualPath=%p (note: const cast dropped)\\n\", (const void *)VirtualPath);\n        fflush(log);\n    }\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetBySearch returned %d\\n\", return_code);\n        fflush(log);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: OS_ObjectIdGetBySearch failed -> returning OS_FS_ERR_PATH_INVALID (%d)\\n\", OS_FS_ERR_PATH_INVALID);\n            fclose(log);\n        }\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        if (log)\n        {\n            fprintf(log, \"filesys ptr=%p flags=0x%08x\\n\", (void *)filesys, (unsigned)filesys->flags);\n            fflush(log);\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (log)\n            {\n                fprintf(log, \"Mounted system: SysMountPointLen=%zu VirtPathBegin=%zu\\n\", SysMountPointLen, VirtPathBegin);\n                fflush(log);\n            }\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                if (log)\n                {\n                    /* Log first chunk of LocalPath (not guaranteed null-terminated yet) */\n                    fprintf(log, \"Copied system_mountpt to LocalPath (len=%zu)\\n\", SysMountPointLen);\n                    fflush(log);\n                }\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"ERROR: filesystem not mounted as system -> return OS_ERR_INCORRECT_OBJ_STATE (%d)\\n\", OS_ERR_INCORRECT_OBJ_STATE);\n                fflush(log);\n            }\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (log)\n        {\n            fprintf(log, \"Released object token\\n\");\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            if (log)\n            {\n                fprintf(log, \"ERROR: VirtPathLen (%zu) < VirtPathBegin (%zu) -> return %d\\n\", VirtPathLen, VirtPathBegin, OS_FS_ERR_PATH_INVALID);\n                fclose(log);\n            }\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if (log)\n            {\n                fprintf(log, \"Adjusted VirtPathLen=%zu, SysMountPointLen=%zu\\n\", VirtPathLen, SysMountPointLen);\n                fflush(log);\n            }\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                if (log)\n                {\n                    fprintf(log, \"Final LocalPath (len=%zu): '%s'\\n\", (size_t)(SysMountPointLen + VirtPathLen), LocalPath);\n                    fflush(log);\n                }\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"ERROR: combined path too long (SysMountPointLen=%zu + VirtPathLen=%zu >= %d) -> return %d\\n\",\n                            SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN, OS_FS_ERR_PATH_TOO_LONG);\n                    fclose(log);\n                }\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_TranslatePath -> return_code=%d\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}