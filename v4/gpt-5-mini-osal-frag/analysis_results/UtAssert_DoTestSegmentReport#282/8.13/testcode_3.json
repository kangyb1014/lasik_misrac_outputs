{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf UT_BSP_DoText is declared to take a non-const pointer (e.g. void UT_BSP_DoText(int type, char *text)) but the function does not modify the string contents, then passing ReportBuffer (which decays to char *) violates MISRA C 2023 Rule 8.13. The parameter should be declared as const char * to indicate the function does not modify the pointed-to data. If, however, UT_BSP_DoText is already declared to take const char * (or the function legitimately modifies the buffer), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoTestSegmentReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/985.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoTestSegmentReport:\n```c\nvoid UtAssert_DoTestSegmentReport(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)\n{\n    char ReportBuffer[144];\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%-22s ABORT::%-4u  WARN::%-4u  FLOW::%-4u  DEBUG::%-4u  N/A::%-4u\",\n             \"\",\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_INFO, ReportBuffer);\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u  MIR::%-4u  TSF::%-4u  TTF::%-4u\",\n             (unsigned int)TestCounters->TestSegmentCount, SegmentName, (unsigned int)TestCounters->TotalTestCases,\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_END, ReportBuffer);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_DoTestSegmentReport code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_DoTestSegmentReport with it.\n  - Your function must have the exact same signature as UtAssert_DoTestSegmentReport.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_DoTestSegmentReport to check logs.\n  - Your function MUST preserve the original logic of UtAssert_DoTestSegmentReport as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_DoTestSegmentReport will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_DoTestSegmentReport as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_DoTestSegmentReport(const char *SegmentName, const UtAssert_TestCounter_t *TestCounters)\n{\n    char ReportBuffer[144];\n\n    /* Log entry and input pointers/state to a file for later analysis */\n    {\n        FILE *log = fopen(\"/tmp/logs/985.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: UtAssert_DoTestSegmentReport\\n\");\n            fprintf(log, \"  SegmentName ptr=%p\\n\", (const void *)SegmentName);\n            if (SegmentName != NULL)\n            {\n                /* Limit printed SegmentName length to avoid overly long log lines */\n                fprintf(log, \"  SegmentName value='%s'\\n\", SegmentName);\n            }\n            fprintf(log, \"  TestCounters ptr=%p\\n\", (const void *)TestCounters);\n            if (TestCounters == NULL)\n            {\n                fprintf(log, \"  WARNING: TestCounters is NULL (unexpected)\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    /* First summary line (preserve original behavior) */\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%-22s ABORT::%-4u  WARN::%-4u  FLOW::%-4u  DEBUG::%-4u  N/A::%-4u\",\n             \"\",\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n\n    /* Log the buffer contents and relevant state just before the first UT_BSP_DoText call */\n    {\n        FILE *log = fopen(\"/tmp/logs/985.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"PRE-UT_BSP_DoText(INFO): ReportBuffer ptr=%p size=%zu\\n\",\n                    (void *)ReportBuffer, (size_t)sizeof(ReportBuffer));\n            fprintf(log, \"  ReportBuffer content='%s'\\n\", ReportBuffer);\n            fprintf(log, \"  Passing ReportBuffer as (char *) -> %p\\n\", (void *)ReportBuffer);\n            fprintf(log, \"  Counts: ABORT=%u, WARN=%u, FLOW=%u, DEBUG=%u, N/A=%u\\n\",\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_ABORT],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_WARN],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FLOW],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_DEBUG],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_NA]);\n            fprintf(log, \"  Note: If UT_BSP_DoText is declared to take a non-const char*, this call will pass a char* (from ReportBuffer)\\n\");\n            fclose(log);\n        }\n    }\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_INFO, ReportBuffer);\n\n    /* Second summary line (preserve original behavior) */\n    snprintf(ReportBuffer, sizeof(ReportBuffer),\n             \"%02u %-20s TOTAL::%-4u  PASS::%-4u  FAIL::%-4u  MIR::%-4u  TSF::%-4u  TTF::%-4u\",\n             (unsigned int)TestCounters->TestSegmentCount, SegmentName, (unsigned int)TestCounters->TotalTestCases,\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n             (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n\n    /* Log the buffer contents and relevant state just before the second UT_BSP_DoText call */\n    {\n        FILE *log = fopen(\"/tmp/logs/985.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"PRE-UT_BSP_DoText(END): ReportBuffer ptr=%p size=%zu\\n\",\n                    (void *)ReportBuffer, (size_t)sizeof(ReportBuffer));\n            fprintf(log, \"  ReportBuffer content='%s'\\n\", ReportBuffer);\n            fprintf(log, \"  Passing ReportBuffer as (char *) -> %p\\n\", (void *)ReportBuffer);\n            fprintf(log, \"  SegmentName ptr=%p value='%s'\\n\", (const void *)SegmentName,\n                    (SegmentName != NULL) ? SegmentName : \"(null)\");\n            fprintf(log, \"  Counts: TOTAL=%u, PASS=%u, FAIL=%u, MIR=%u, TSF=%u, TTF=%u\\n\",\n                    (unsigned int)TestCounters->TotalTestCases,\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_PASS],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_MIR],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n                    (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n            fprintf(log, \"  Note: This log demonstrates the pointer passed into UT_BSP_DoText and the buffer contents.\\n\");\n            fclose(log);\n        }\n    }\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_END, ReportBuffer);\n\n    /* Final log to indicate exit */\n    {\n        FILE *log = fopen(\"/tmp/logs/985.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: UtAssert_DoTestSegmentReport\\n\\n\");\n            fclose(log);\n        }\n    }\n}\n"
}