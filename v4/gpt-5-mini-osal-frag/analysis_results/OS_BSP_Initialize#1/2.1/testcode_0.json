{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code checks 'if (status < 0)' after calling pthread_mutexattr_init. According to POSIX, pthread_mutexattr_init returns 0 on success or a positive error number on failure (never negative). Therefore the condition 'status < 0' will never be true and the debug branch is effectively unreachable. This constitutes unreachable code and violates MISRA C 2023 Rule 2.1. (Fix: test for 'status != 0' or handle specific positive error codes.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_Initialize code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_Initialize with it.\n  - Your function must have the exact same signature as OS_BSP_Initialize.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_Initialize to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_Initialize as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_Initialize will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n    FILE *              dbg_fp = NULL;\n\n    /* Open debug log for tracing control flow/state. Try to create directory if needed. */\n    dbg_fp = fopen(\"/tmp/logs/2506.txt\", \"a\");\n    if (dbg_fp == NULL)\n    {\n        /* Try to create the directory if it doesn't exist, then retry. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dbg_fp = fopen(\"/tmp/logs/2506.txt\", \"a\");\n    }\n    if (dbg_fp)\n    {\n        fprintf(dbg_fp, \"OS_BSP_Initialize: entry\\n\");\n        fflush(dbg_fp);\n    }\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        if (dbg_fp)\n        {\n            fprintf(dbg_fp, \"OS_BSP_Initialize: geteuid() != 0 -> true (not running as root)\\n\");\n            fflush(dbg_fp);\n        }\n\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                if (dbg_fp)\n                {\n                    fprintf(dbg_fp, \"Read /proc/sys/fs/mqueue/msg_max -> %s, MaxQueueDepth=%u\\n\",\n                            buffer, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                    fflush(dbg_fp);\n                }\n            }\n            fclose(fp);\n        }\n        else\n        {\n            if (dbg_fp)\n            {\n                fprintf(dbg_fp, \"OS_BSP_Initialize: fopen(/proc/sys/fs/mqueue/msg_max) failed\\n\");\n                fflush(dbg_fp);\n            }\n        }\n    }\n    else\n    {\n        if (dbg_fp)\n        {\n            fprintf(dbg_fp, \"OS_BSP_Initialize: geteuid() == 0 -> running as root, skipping msg_max check\\n\");\n            fflush(dbg_fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    if (dbg_fp) { fprintf(dbg_fp, \"Calling pthread_mutexattr_init()...\\n\"); fflush(dbg_fp); }\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (dbg_fp)\n    {\n        fprintf(dbg_fp, \"pthread_mutexattr_init returned status=%d\\n\", status);\n        fprintf(dbg_fp, \"Evaluating condition: (status < 0) -> %s\\n\", (status < 0) ? \"true\" : \"false\");\n        fflush(dbg_fp);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n        if (dbg_fp)\n        {\n            fprintf(dbg_fp, \"Entered debug branch for pthread_mutexattr_init (status < 0). strerror -> %s\\n\",\n                    strerror(status));\n            fflush(dbg_fp);\n        }\n    }\n\n    if (dbg_fp) { fprintf(dbg_fp, \"Calling pthread_mutexattr_setprotocol(..., PTHREAD_PRIO_INHERIT) ...\\n\"); fflush(dbg_fp); }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (dbg_fp)\n    {\n        fprintf(dbg_fp, \"pthread_mutexattr_setprotocol returned status=%d\\n\", status);\n        fprintf(dbg_fp, \"Evaluating condition: (status < 0) -> %s\\n\", (status < 0) ? \"true\" : \"false\");\n        fflush(dbg_fp);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n        if (dbg_fp)\n        {\n            fprintf(dbg_fp, \"Entered debug branch for pthread_mutexattr_setprotocol (status < 0). strerror -> %s\\n\",\n                    strerror(status));\n            fflush(dbg_fp);\n        }\n    }\n\n    if (dbg_fp) { fprintf(dbg_fp, \"Calling pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr) ...\\n\"); fflush(dbg_fp); }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (dbg_fp)\n    {\n        fprintf(dbg_fp, \"pthread_mutex_init returned status=%d\\n\", status);\n        fprintf(dbg_fp, \"Evaluating condition: (status < 0) -> %s\\n\", (status < 0) ? \"true\" : \"false\");\n        fflush(dbg_fp);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n        if (dbg_fp)\n        {\n            fprintf(dbg_fp, \"Entered debug branch for pthread_mutex_init (status < 0). strerror -> %s\\n\",\n                    strerror(status));\n            fflush(dbg_fp);\n        }\n    }\n\n    if (dbg_fp)\n    {\n        fprintf(dbg_fp, \"OS_BSP_Initialize: exit\\n\");\n        fclose(dbg_fp);\n    }\n}\n"
}