{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__)). As a result the statement OS_DEBUG(\"Error creating thread key: %s (%d)\\n\", strerror(ret), ret); expands to an empty/null statement in the compiled code. This null statement is executed but has no effect and its removal would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_GetSchedulerParams code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2148.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Posix_GetSchedulerParams:\n```c\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Posix_GetSchedulerParams code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Posix_GetSchedulerParams with it.\n  - Your function must have the exact same signature as OS_Posix_GetSchedulerParams.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Posix_GetSchedulerParams to check logs.\n  - Your function MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Posix_GetSchedulerParams will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /* Minimal probe: log entry with pointer and policy so the function reachability is recorded */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2148.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ENTER: OS_Posix_GetSchedulerParams(sched_policy=%d, PriLim=%p)\\n\", sched_policy, (void *)PriLim);\n            fflush(fp);\n            fclose(fp);\n        }\n        else\n        {\n            /* Best-effort fallback to stderr if log file cannot be opened */\n            fprintf(stderr, \"ENTER: OS_Posix_GetSchedulerParams(sched_policy=%d, PriLim=%p) - could not open log file\\n\", sched_policy, (void *)PriLim);\n        }\n    }\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        /* Log the error so that removal of OS_DEBUG does not hide the fact this branch was taken */\n        FILE *fp = fopen(\"/tmp/logs/2148.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ERROR: sched_get_priority_max failed for policy %d: errno=%d (%s)\\n\", sched_policy, errno, strerror(errno));\n            fflush(fp);\n            fclose(fp);\n        }\n        else\n        {\n            fprintf(stderr, \"ERROR: sched_get_priority_max failed for policy %d: errno=%d (%s) - could not open log file\\n\", sched_policy, errno, strerror(errno));\n        }\n\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        /* Log the error so that removal of OS_DEBUG does not hide the fact this branch was taken */\n        FILE *fp = fopen(\"/tmp/logs/2148.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ERROR: sched_get_priority_min failed for policy %d: errno=%d (%s)\\n\", sched_policy, errno, strerror(errno));\n            fflush(fp);\n            fclose(fp);\n        }\n        else\n        {\n            fprintf(stderr, \"ERROR: sched_get_priority_min failed for policy %d: errno=%d (%s) - could not open log file\\n\", sched_policy, errno, strerror(errno));\n        }\n\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        FILE *fp = fopen(\"/tmp/logs/2148.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ERROR: Policy %d: Insufficient spread between priority min-max: %d-%d\\n\",\n                    sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n            fflush(fp);\n            fclose(fp);\n        }\n        else\n        {\n            fprintf(stderr, \"ERROR: Policy %d: Insufficient spread between priority min-max: %d-%d - could not open log file\\n\",\n                    sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        }\n\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2148.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OK: Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n            fflush(fp);\n            fclose(fp);\n        }\n        else\n        {\n            fprintf(stderr, \"OK: Policy %d: available, min-max: %d-%d - could not open log file\\n\", sched_policy,\n                    (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        }\n    }\n\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n"
}