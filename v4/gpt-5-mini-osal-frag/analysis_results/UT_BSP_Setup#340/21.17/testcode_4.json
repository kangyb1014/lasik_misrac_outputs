{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read if ArgV[0] is not a valid, NUL-terminated string (or is a NULL pointer). The code only checks ArgC>0 (so the pointer slot ArgV[0] exists) but does not verify ArgV[0] != NULL nor that it points to a NUL-terminated buffer. If OS_BSP_GetArgV() were to supply a NULL entry or a non-terminated char array, strcmp(ArgV[0], \"-q\") could read past the object bounds (or dereference NULL), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2953.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_BSP_Setup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_BSP_Setup with it.\n  - Your function must have the exact same signature as UT_BSP_Setup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_BSP_Setup to check logs.\n  - Your function MUST preserve the original logic of UT_BSP_Setup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_BSP_Setup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n    FILE *fp = fopen(\"/tmp/logs/2953.txt\", \"a\");\n\n    if (fp)\n    {\n        fprintf(fp, \"UT_BSP_Setup: entered\\n\");\n    }\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (fp)\n    {\n        fprintf(fp, \"UT_BSP_Setup: initial ArgC = %u\\n\", (unsigned)ArgC);\n    }\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        if (fp)\n        {\n            fprintf(fp, \"UT_BSP_Setup: ArgV pointer = %p\\n\", (void *)ArgV);\n        }\n\n        unsigned idx = 0;\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log the current ArgV pointer and the pointer stored in ArgV[0].\n             * This mirrors the original code's dereference behavior so that\n             * any NULL or invalid pointers that cause the reported violation\n             * will be visible in the log. */\n            if (fp)\n            {\n                /* Note: accessing ArgV[0] here follows the original code's\n                 * behavior (which also dereferences ArgV). If ArgV is NULL\n                 * (or ArgV[0] is NULL) this may crash the program \u2014 this is\n                 * intentional to reproduce the violation scenario. */\n                fprintf(fp, \"UT_BSP_Setup: loop idx=%u, remaining ArgC=%u, ArgV ptr=%p, ArgV[0] ptr=%p\\n\",\n                        idx, (unsigned)ArgC, (void *)ArgV, (void *)ArgV[0]);\n            }\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                if (fp)\n                {\n                    fprintf(fp, \"UT_BSP_Setup: matched '-d' at idx=%u\\n\", idx);\n                }\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                if (fp)\n                {\n                    fprintf(fp, \"UT_BSP_Setup: matched '-q' at idx=%u\\n\", idx);\n                }\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                if (fp)\n                {\n                    fprintf(fp, \"UT_BSP_Setup: matched '-v' at idx=%u, ArgV[1] ptr=%p\\n\", idx, (void *)ArgV[1]);\n                }\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n                idx++; /* account for the extra increment below */\n            }\n\n            ++ArgV;\n            idx++;\n        }\n    }\n\n    if (fp)\n    {\n        fprintf(fp, \"UT_BSP_Setup: UserShift before normalization = %u\\n\", (unsigned)UserShift);\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    if (fp)\n    {\n        fprintf(fp, \"UT_BSP_Setup: BSP_UT_Global.CurrVerbosity = %u\\n\", (unsigned)BSP_UT_Global.CurrVerbosity);\n        fprintf(fp, \"UT_BSP_Setup: calling UT_BSP_DoText(..., \\\"UNIT TEST\\\")\\n\");\n        fclose(fp);\n    }\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}