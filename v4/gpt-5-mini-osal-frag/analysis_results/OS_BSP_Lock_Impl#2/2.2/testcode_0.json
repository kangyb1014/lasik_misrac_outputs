{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nBSP_DEBUG is defined as an empty macro (#define BSP_DEBUG(__VA_ARGS__)), so the call strerror(status) appears only as an argument to BSP_DEBUG. The preprocessor removes the entire macro invocation (including its arguments), meaning strerror(status) is never compiled or executed. Since removing that call does not affect program behaviour, the call constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1538.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_Lock_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_Lock_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_Lock_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_Lock_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_Lock_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_Lock_Impl(void)\n{\n    int status;\n    FILE *logf = NULL;\n    time_t now = 0;\n    unsigned long tid = (unsigned long)pthread_self();\n\n    /* Try to create log directory (ignore failures) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    /* Open log file; fall back to /tmp/1538.txt if directory missing */\n    logf = fopen(\"/tmp/logs/1538.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/1538.txt\", \"a\");\n    }\n\n    if (logf != NULL)\n    {\n        now = time(NULL);\n        fprintf(logf, \"OS_BSP_Lock_Impl ENTRY: time=%ld, thread=%lu\\n\", (long)now, tid);\n        fflush(logf);\n    }\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"pthread_mutex_lock returned status=%d\\n\", status);\n        fflush(logf);\n    }\n\n    if (status < 0)\n    {\n        /* Record that we hit the error branch; do not move the strerror() call out of the BSP_DEBUG\n         * invocation so that if BSP_DEBUG is defined as an empty macro the strerror call will be\n         * removed by the preprocessor. This lets observers reproduce the situation where the\n         * strerror(status) argument is dead code. */\n\n#ifdef BSP_DEBUG\n        const char *bsp_debug_defined = \"defined\";\n#else\n        const char *bsp_debug_defined = \"not_defined\";\n#endif\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ERROR-branch entered: status=%d, BSP_DEBUG is %s. About to invoke BSP_DEBUG(...)\\n\",\n                    status, bsp_debug_defined);\n            fflush(logf);\n        }\n\n        /* Original debug call kept exactly as in the target source. If BSP_DEBUG is an empty\n         * macro this line (and its argument strerror(status)) will be removed by the preprocessor. */\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n\n        if (logf != NULL)\n        {\n            /* This log line will appear regardless of whether BSP_DEBUG expanded to nothing. If the\n             * expected human-readable strerror string is missing from external debug output, that\n             * is evidence that the call inside BSP_DEBUG was removed. */\n            fprintf(logf, \"After BSP_DEBUG invocation (error branch). Did not call strerror() here except as macro argument.\\n\");\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"SUCCESS-branch: setting cancel state (current stored value addr=%p)\\n\",\n                    (void *)&OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fflush(logf);\n        }\n\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After pthread_setcancelstate; stored AccessCancelState=%d\\n\",\n                    OS_BSP_GenericLinuxGlobal.AccessCancelState);\n            fprintf(logf, \"OS_BSP_Lock_Impl EXIT\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fclose(logf);\n    }\n}\n"
}