{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1) can read beyond the bounds of record->name_entry if record->name_entry is not NUL-terminated within the first (sizeof(fd_prop->Path) - 1) bytes. strncpy reads up to the specified count from the source (stopping early only if it finds a NUL); if the source buffer is smaller than that count or not NUL-terminated within that range, this call may access bytes past the end of record->name_entry, causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CloseAllFiles code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CloseAllFiles with it.\n  - Your function must have the exact same signature as OS_CloseAllFiles.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CloseAllFiles to check logs.\n  - Your function MUST preserve the original logic of OS_CloseAllFiles as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CloseAllFiles will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    /* Open the log file for append. If this fails, continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/3333.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n=== OS_CloseAllFiles entered ===\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (log) fprintf(log, \"Calling OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter)\\n\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Iterate over active objects and close file descriptors. */\n    int iter_count = 0;\n    while (1)\n    {\n        /* Capture the return of GetNext so we can log it without changing behavior. */\n        int has_next = OS_ObjectIdIteratorGetNext(&iter);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdIteratorGetNext(&iter) -> %d; iter_count=%d; iter_addr=%p\\n\",\n                    has_next, iter_count, (void *)&iter);\n            fflush(log);\n        }\n\n        if (!has_next)\n        {\n            break;\n        }\n\n        iter_count++;\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose) -> %d; iter_count=%d\\n\",\n                    close_code, iter_count);\n            fflush(log);\n        }\n\n        if (close_code != OS_SUCCESS)\n        {\n            /* preserve non-success return_code but continue iterating as original logic */\n            return_code = close_code;\n            if (log)\n            {\n                fprintf(log, \"Non-success close_code encountered: %d -> return_code set to %d (will continue)\\n\",\n                        close_code, return_code);\n                fflush(log);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdIteratorDestroy(&iter) called; final return_code=%d; total_iterations=%d\\n\",\n                return_code, iter_count);\n        fprintf(log, \"=== OS_CloseAllFiles exiting ===\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}