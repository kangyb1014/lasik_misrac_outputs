{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf record->name_entry points to a string stored in a smaller fixed-size buffer (for example a table entry with max name length N) and the caller passes a larger buffer_size (M > N), OS_strnlen(record->name_entry, buffer_size) may read up to M bytes from record->name_entry. If the source storage does not contain a NUL within its actual allocated size (N), this will read past the end of the object and thus violate Rule 21.17. In other words, using the destination buffer_size as the strnlen limit instead of the actual size of the object pointed to by record->name_entry can cause out-of-bounds reads.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CloseAllFiles code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CloseAllFiles with it.\n  - Your function must have the exact same signature as OS_CloseAllFiles.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CloseAllFiles to check logs.\n  - Your function MUST preserve the original logic of OS_CloseAllFiles as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CloseAllFiles will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    /* Logging probe: append logs to /tmp/logs/3333.txt when reachable */\n    FILE *logf = fopen(\"/tmp/logs/3333.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CloseAllFiles: entry\\n\");\n        fflush(logf);\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CloseAllFiles: initialized return_code = %ld\\n\", (long)return_code);\n        fflush(logf);\n    }\n\n    /* Initialize the iterator to active objects of type LOCAL_OBJID_TYPE */\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CloseAllFiles: iterator initialized at address %p\\n\", (void *)&iter);\n        fflush(logf);\n    }\n\n    /* Use an explicit has_next variable so we can log the GetNext result each time */\n    int has_next = OS_ObjectIdIteratorGetNext(&iter);\n    int iter_count = 0;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CloseAllFiles: first OS_ObjectIdIteratorGetNext() -> %d\\n\", has_next);\n        fflush(logf);\n    }\n\n    while (has_next)\n    {\n        iter_count++;\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CloseAllFiles: iteration %d - processing entry\\n\", iter_count);\n            fflush(logf);\n        }\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CloseAllFiles: iteration %d - OS_ObjectIdIteratorProcessEntry returned %ld\\n\", iter_count, (long)close_code);\n            fflush(logf);\n        }\n\n        if (close_code != OS_SUCCESS)\n        {\n            /* preserve the first non-success code as in original logic */\n            return_code = close_code;\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CloseAllFiles: iteration %d - updated return_code = %ld\\n\", iter_count, (long)return_code);\n                fflush(logf);\n            }\n        }\n\n        /* advance the iterator and log the outcome before the next loop check */\n        has_next = OS_ObjectIdIteratorGetNext(&iter);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CloseAllFiles: iteration %d - next OS_ObjectIdIteratorGetNext() -> %d\\n\", iter_count, has_next);\n            fflush(logf);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_CloseAllFiles: iterator destroyed, final return_code = %ld, total_iterations = %d\\n\", (long)return_code, iter_count);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}