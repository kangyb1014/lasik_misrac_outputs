{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment `delete_hook = NULL;` is dead code. The only subsequent use of delete_hook is in the condition `if (return_code == OS_SUCCESS && delete_hook != NULL)` and when return_code == OS_SUCCESS the preceding if-block must have executed and assigned `delete_hook = task->delete_hook_pointer;`. If the preceding block did not execute, return_code != OS_SUCCESS and delete_hook is not used. Therefore removing the initial `delete_hook = NULL;` would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskInstallDeleteHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/958.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskInstallDeleteHandler:\n```c\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskInstallDeleteHandler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskInstallDeleteHandler with it.\n  - Your function must have the exact same signature as OS_TaskInstallDeleteHandler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskInstallDeleteHandler to check logs.\n  - Your function MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskInstallDeleteHandler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    /* Log entry and the incoming function pointer */\n    {\n        FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"ENTER: OS_TaskInstallDeleteHandler function_pointer=%p\\n\", (void *)function_pointer);\n            fclose(fp);\n        }\n    }\n\n    task_id     = OS_TaskGetId_Impl();\n\n    /* Log the resolved task id */\n    {\n        FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"INFO: resolved task_id=0x%08x\\n\", (unsigned int)task_id);\n            fclose(fp);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log the result of the object id lookup and token address */\n    {\n        FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"INFO: OS_ObjectIdGetById returned return_code=%ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer and its previous delete_hook_pointer value prior to modification */\n        {\n            FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n            if (fp)\n            {\n                /* Capture prior state so callers can see whether an initial NULL assignment would be observable */\n                fprintf(fp, \"BEFORE_INSTALL: task_ptr=%p previous_delete_hook=%p\\n\", (void *)task,\n                        (void *)(task ? task->delete_hook_pointer : NULL));\n                fclose(fp);\n            }\n        }\n\n        /* Install the pointer (original behavior preserved) */\n        task->delete_hook_pointer = function_pointer;\n\n        /* Log the state after installation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n            if (fp)\n            {\n                fprintf(fp, \"AFTER_INSTALL: task->delete_hook_pointer=%p\\n\", (void *)task->delete_hook_pointer);\n                fclose(fp);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log the case where the object id lookup failed */\n        FILE *fp = fopen(\"/tmp/logs/958.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"NOT_FOUND: OS_TaskInstallDeleteHandler returning return_code=%ld\\n\", (long)return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}