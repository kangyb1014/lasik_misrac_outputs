{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro calls strncpy(ref->namefield, nameval, sizeof(ref->namefield)-1) without guaranteeing that the source (nameval) is at least that long or NUL-terminated within that length. strncpy may read up to the given length from the source pointer; if nameval points to a shorter object or lacks a NUL within (sizeof(ref->namefield)-1) bytes, strncpy will read beyond the source buffer bounds. In addition the macro does not explicitly write a terminating NUL, which can lead to later code treating the field as an unterminated string and causing further out-of-bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBaseCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBaseCreate with it.\n  - Your function must have the exact same signature as OS_TimeBaseCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBaseCreate to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBaseCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Logging probe */\n    {\n        FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimeBaseCreate: ENTER\\n\");\n            fprintf(log, \"  params: timer_id=%p, timebase_name=%p, external_sync=%p\\n\",\n                    (void *)timer_id, (const void *)timebase_name, (const void *)external_sync);\n            if (timebase_name != NULL)\n            {\n                /* Capture a small snippet of the name to help diagnose unterminated-string scenarios. */\n                char snippet[65];\n                size_t i;\n                for (i = 0; i < sizeof(snippet) - 1; ++i)\n                {\n                    /* Avoid dereferencing a potentially invalid pointer beyond a modest bound; stop at 64 chars. */\n                    char c = timebase_name[i];\n                    snippet[i] = (c == '\\0') ? '\\0' : c;\n                    if (c == '\\0')\n                    {\n                        break;\n                    }\n                }\n                snippet[sizeof(snippet) - 1] = '\\0';\n\n                if (snippet[0] == '\\0')\n                {\n                    fprintf(log, \"  timebase_name snippet: (empty string)\\n\");\n                }\n                else\n                {\n                    /* If no NUL found in first 64 bytes, mark that fact. */\n                    if (snippet[sizeof(snippet) - 2] != '\\0' && snippet[0] != '\\0')\n                    {\n                        /* We could have filled all 64 bytes without encountering a NUL. */\n                        fprintf(log, \"  timebase_name snippet (first 64 bytes, maybe unterminated): '%s'\\n\", snippet);\n                    }\n                    else\n                    {\n                        fprintf(log, \"  timebase_name snippet: '%s'\\n\", snippet);\n                    }\n                }\n            }\n            else\n            {\n                fprintf(log, \"  timebase_name is NULL\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n    ** Check Parameters\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log objtype decision */\n    {\n        FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  after context check: objtype=%d\\n\", (int)objtype);\n            fclose(log);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  abort: called from a timebase (not allowed) - returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n\n    /* Log allocation result */\n    {\n        FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the token and the table pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  token=%u, timebase_ptr=%p\\n\", (unsigned)token, (void *)timebase);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        /* Log that OS_OBJECT_INIT completed (it may have copied the name internally) */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  OS_OBJECT_INIT completed for token=%u\\n\", (unsigned)token);\n                fclose(log);\n            }\n        }\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Log accuracy and external_sync state */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  timebase->external_sync=%p, timebase->accuracy_usec=%u\\n\",\n                        (void *)timebase->external_sync, (unsigned)timebase->accuracy_usec);\n                fclose(log);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  calling OS_TimeBaseCreate_Impl with token=%u\\n\", (unsigned)token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Log impl return */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  OS_TimeBaseCreate_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n\n        /* Final log before returning */\n        {\n            FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  OS_ObjectIdFinalizeNew returned %ld, final timer_id=%p\\n\", (long)return_code, (void *)(timer_id != NULL ? (void *)*timer_id : NULL));\n                fprintf(log, \"OS_TimeBaseCreate: EXIT returning %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log the failure path prior to returning */\n        FILE *log = fopen(\"/tmp/logs/2963.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  allocation failed, returning %ld\\n\", (long)return_code);\n            fprintf(log, \"OS_TimeBaseCreate: EXIT returning %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}