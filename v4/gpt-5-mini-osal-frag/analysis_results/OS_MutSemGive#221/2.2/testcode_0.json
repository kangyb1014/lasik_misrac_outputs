{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call/assignment self_task = OS_TaskGetId() is only used in the subsequent if condition that only controls an OS_DEBUG() logging statement. OS_DEBUG is defined as an empty macro and OS_ObjectIdEqual/OS_ObjectIdToInteger have no side effects, so the value fetched into self_task is never used in any observable behaviour. Therefore the assignment (and the call) can be removed without changing program behaviour \u2014 this is dead code. (Note: if OS_TaskGetId_Impl had observable side effects, then the call would not be dead; based on the provided definitions it does not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2948.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive:\n```c\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGive code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGive with it.\n  - Your function must have the exact same signature as OS_MutSemGive.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGive to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGive as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGive will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Fetch the current task id (this value is the subject of the reported dead-code) */\n        self_task = OS_TaskGetId();\n\n        /* Preserve original behaviour: only log the warning when the debug macro is enabled.\n         * In addition, always record detailed probes to a file so other tools/agents can\n         * observe the control flow and the values involved in the reported violation.\n         */\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        /* Call the platform-specific implementation */\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Probing/logging: append structured information about the control path and state\n         * to a file so external analysis can reproduce the scenario described by the\n         * MISRA Rule 2.2 report. Keep this as non-intrusive as possible.\n         */\n        {\n            FILE *f = fopen(\"/tmp/logs/2948.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_MutSemGive: entered; sem_id=%lu\\n\", (unsigned long)OS_ObjectIdToInteger(sem_id));\n                fprintf(f, \"OS_MutSemGive: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n\n                /* Record the mutex pointer for correlation; useful if object table addresses are stable */\n                fprintf(f, \"OS_MutSemGive: mutex_ptr=%p\\n\", (void *)mutex);\n\n                /* Record the fetched self_task and the mutex last_owner. Only valid because we are in the success branch. */\n                fprintf(f, \"OS_MutSemGive: self_task=%lu\\n\", (unsigned long)OS_ObjectIdToInteger(self_task));\n                fprintf(f, \"OS_MutSemGive: last_owner=%lu\\n\", (unsigned long)OS_ObjectIdToInteger(mutex->last_owner));\n\n                /* Record the comparison used by the (originally debug-only) condition. This demonstrates that\n                 * the only use of self_task in the original code is to decide whether to emit a debug message.\n                 */\n                fprintf(f, \"OS_MutSemGive: owner_equal=%d\\n\", (int)OS_ObjectIdEqual(mutex->last_owner, self_task));\n\n                fprintf(f, \"OS_MutSemGive: leaving; return_code=%ld\\n\", (long)return_code);\n                fclose(f);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}