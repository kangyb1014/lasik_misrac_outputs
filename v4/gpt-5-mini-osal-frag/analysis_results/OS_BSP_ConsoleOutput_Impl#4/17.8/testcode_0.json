{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BSP_ConsoleOutput_Impl the parameter 'DataLen' (size_t) is modified by the statement 'DataLen -= WriteLen;'. This directly violates MISRA C 2023 Rule 17.8, which prohibits modifying function parameters. (Note: the code also contains 'Str += WriteLen;', which modifies the pointer parameter and likewise violates Rule 17.8.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1412.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_ConsoleOutput_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_ConsoleOutput_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_ConsoleOutput_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_ConsoleOutput_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Open log file to record control flow and state for reproduction/evidence */\n    FILE *log = fopen(\"/tmp/logs/1412.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_BSP_ConsoleOutput_Impl(Str=%p, DataLen=%zu)\\n\", (const void *)Str, DataLen);\n        fflush(log);\n    }\n\n    /* keep copies of the original inputs for logging at exit */\n    const char *orig_Str = Str;\n    size_t orig_DataLen = DataLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER write(): WriteLen=%zd, Str(before)=%p, DataLen(before)=%zu\\n\",\n                    WriteLen, (const void *)Str, DataLen);\n            fflush(log);\n        }\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            if (log != NULL)\n            {\n                fprintf(log, \"WRITE FAILED OR ZERO -> break (WriteLen=%zd)\\n\", WriteLen);\n                fflush(log);\n                fprintf(log, \"EXIT (early): orig_Str=%p orig_DataLen=%zu remaining_DataLen=%zu\\n\",\n                        (const void *)orig_Str, orig_DataLen, DataLen);\n                fclose(log);\n            }\n            break;\n        }\n\n        /* NOTE: these two statements intentionally modify the function parameters\n           (pointer and DataLen) to match the original behavior being inspected. */\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UPDATED: Str(after)=%p, DataLen(after)=%zu\\n\", (const void *)Str, DataLen);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: orig_Str=%p orig_DataLen=%zu remaining_DataLen=%zu\\n\",\n                (const void *)orig_Str, orig_DataLen, DataLen);\n        fclose(log);\n    }\n}\n"
}