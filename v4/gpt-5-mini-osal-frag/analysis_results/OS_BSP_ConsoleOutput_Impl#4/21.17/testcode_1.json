{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(OutputMessage) without first ensuring that OutputMessage is non-NULL and points to a null-terminated array. If OutputMessage is NULL or refers to a buffer that is not null-terminated (or shorter than expected), strlen will scan past the object's bounds (or dereference NULL), reading beyond the buffer until a 0 byte is found and thus violating MISRA C 2023 Rule 21.17. This also leads to subsequent uses of MsgLen and OutputMessage[MsgLen-1] potentially accessing out-of-bounds memory.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1413.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_ConsoleOutput_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_ConsoleOutput_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_ConsoleOutput_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_ConsoleOutput_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Logging probe: record entry, pointer value, DataLen and a short hex dump\n       of at most the first 64 bytes of the buffer (only if Str != NULL). The\n       log is appended to /tmp/logs/1413.txt so that external agents can inspect\n       the state that may lead to a strlen-related violation elsewhere. */\n    {\n        int log_fd = -1;\n        char logbuf[512];\n        int n = 0;\n\n        /* Try to open the log file; if this fails, do not impede normal behavior. */\n        log_fd = open(\"/tmp/logs/1413.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n        if (log_fd >= 0)\n        {\n            /* Entry record */\n            n = snprintf(logbuf, sizeof(logbuf), \"OS_BSP_ConsoleOutput_Impl ENTER: Str=%p DataLen=%zu\\n\", (const void *)Str, DataLen);\n            if (n > 0) (void)write(log_fd, logbuf, (size_t)n);\n\n            if (Str == NULL)\n            {\n                n = snprintf(logbuf, sizeof(logbuf), \"NOTE: Str is NULL (will cause write to fail/crash if attempted)\\n\");\n                if (n > 0) (void)write(log_fd, logbuf, (size_t)n);\n            }\n            else\n            {\n                /* Probe up to first 64 bytes inside DataLen to see if a NUL exists\n                   (this can help reproduce a scenario where callers use strlen on\n                   a buffer that may not be NUL-terminated). Only read within\n                   DataLen so we do not introduce out-of-bounds accesses ourselves. */\n                size_t probe = DataLen;\n                if (probe > 64U) probe = 64U;\n\n                int has_nul = 0;\n                char hexbuf[192];\n                size_t i;\n                size_t hpos = 0;\n\n                for (i = 0; i < probe; ++i)\n                {\n                    unsigned char c = (unsigned char)Str[i];\n                    if (c == 0U) has_nul = 1;\n                    /* Append two hex digits and a space for readability. */\n                    if (hpos + 4 < sizeof(hexbuf))\n                    {\n                        int wn = snprintf(hexbuf + hpos, sizeof(hexbuf) - hpos, \"%02X \", c);\n                        if (wn > 0) hpos += (size_t)wn;\n                        else break;\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n\n                /* Write the hex probe and the NUL presence info */\n                n = snprintf(logbuf, sizeof(logbuf), \"Probe first %zu bytes%s: %s\\n\", probe,\n                             (DataLen > probe) ? \" (truncated)\" : \"\", hexbuf);\n                if (n > 0) (void)write(log_fd, logbuf, (size_t)n);\n\n                n = snprintf(logbuf, sizeof(logbuf), \"Contains NUL within DataLen: %s\\n\", has_nul ? \"YES\" : \"NO\");\n                if (n > 0) (void)write(log_fd, logbuf, (size_t)n);\n            }\n\n            (void)close(log_fd);\n        }\n    }\n\n    /* Preserve the original behavior: write the raw data directly to STDOUT_FILENO (unbuffered) */\n    while (DataLen > 0)\n    {\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n"
}