{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of UT_BSP_StartTestSegment is declared to take a non-const char * (e.g. void UT_BSP_StartTestSegment(uint32, char *)), then passing SegmentName (a const char *) discards the const qualifier and violates MISRA C 2023 Rule 8.13. If, however, UT_BSP_StartTestSegment is declared to accept a const char * for that parameter (e.g. void UT_BSP_StartTestSegment(uint32, const char *)), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_BeginTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_BeginTest with it.\n  - Your function must have the exact same signature as UtAssert_BeginTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_BeginTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_BeginTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *log = fopen(\"/tmp/logs/635.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: UtAssert_BeginTest\\n\");\n        fprintf(log, \"  SegmentName ptr=%p\\n\", (const void *)SegmentName);\n        fprintf(log, \"  SegmentName content=%s\\n\", (SegmentName != NULL) ? SegmentName : \"(null)\");\n        fflush(log);\n    }\n\n    UT_BSP_Lock();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  After UT_BSP_Lock\\n\");\n        fflush(log);\n    }\n\n    /* Preserve original behavior */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  After memset(UT_SegmentCounters)\\n\");\n        fflush(log);\n    }\n\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  After strncpy -> CurrentSegment ptr=%p\\n\", (void *)CurrentSegment);\n        fprintf(log, \"  CurrentSegment content=%s\\n\", (CurrentSegment[0] != 0) ? CurrentSegment : \"(empty)\");\n        fprintf(log, \"  CurrentSegment buffer_size=%zu\\n\", (size_t)sizeof(CurrentSegment));\n        fflush(log);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  Computed TestSegmentCount=%u\\n\", (unsigned)TestSegmentCount);\n        fflush(log);\n    }\n\n    UT_BSP_Unlock();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  After UT_BSP_Unlock\\n\");\n        fprintf(log, \"  About to call UT_BSP_StartTestSegment(TestSegmentCount=%u, SegmentName ptr=%p, content=%s)\\n\",\n                (unsigned)TestSegmentCount,\n                (const void *)SegmentName,\n                (SegmentName != NULL) ? SegmentName : \"(null)\");\n        fflush(log);\n        fclose(log);\n        log = NULL;\n    }\n\n    /* Original call preserved. Any const-qualification mismatch (prototype taking non-const char *)\n       will be exercised here by passing SegmentName (const char *). */\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n\n    /* If UT_BSP_StartTestSegment returns, append a final log entry to indicate return. Open new handle\n       to avoid relying on previous log handle remaining valid across the call. */\n    log = fopen(\"/tmp/logs/635.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: UtAssert_BeginTest returned from UT_BSP_StartTestSegment\\n\");\n        fflush(log);\n        fclose(log);\n    }\n}\n"
}