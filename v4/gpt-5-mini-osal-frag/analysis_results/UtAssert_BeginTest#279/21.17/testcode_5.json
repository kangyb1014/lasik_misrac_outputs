{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUtAssert_BeginTest calls strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) without any guarantee that SegmentName points to an object containing a NUL within the first 63 bytes. If UtTestDataBaseEntry->TestName refers to a shorter char object that is not NUL-terminated within those 63 bytes (for example a pointer into a smaller buffer or a non-NUL-terminated array of length < 63), strncpy may read up to 63 bytes from SegmentName and therefore access memory beyond the bounds of the source object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_BeginTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_BeginTest with it.\n  - Your function must have the exact same signature as UtAssert_BeginTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_BeginTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_BeginTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *logf = NULL;\n\n    /* Attempt to open log file and record entry into the function and incoming state. */\n    logf = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"--- UtAssert_BeginTest ENTER ---\\n\");\n        fprintf(logf, \"SegmentName pointer: %p\\n\", (const void *)SegmentName);\n        fprintf(logf, \"sizeof(CurrentSegment): %zu, strncpy length: %zu\\n\",\n                (size_t)sizeof(CurrentSegment), (size_t)(sizeof(CurrentSegment) - 1));\n        fprintf(logf, \"About to call UT_BSP_Lock() and strncpy(...).\\n\");\n        fclose(logf);\n        logf = NULL;\n    }\n\n    UT_BSP_Lock();\n\n    /* Preserve original behavior: clear counters then copy the segment name. */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    /* The following call is the original operation that may read up to sizeof(CurrentSegment)-1 bytes\n     * from SegmentName (this is the operation under scrutiny). We keep it as-is to preserve behavior. */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    /* Log the post-copy state: pointer to destination, a hex/printable view of the copied bytes (stopping at NUL).\n     * Note: We only read from CurrentSegment (the destination), which is safe. */\n    logf = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (logf != NULL)\n    {\n        size_t i;\n        fprintf(logf, \"--- UtAssert_BeginTest AFTER strncpy ---\\n\");\n        fprintf(logf, \"CurrentSegment pointer: %p\\n\", (void *)CurrentSegment);\n        fprintf(logf, \"CurrentSegment contents (printable run, stops at NUL): \\\"\");\n        for (i = 0; i < sizeof(CurrentSegment); ++i)\n        {\n            unsigned char c = (unsigned char)CurrentSegment[i];\n            if (c == 0)\n            {\n                fprintf(logf, \"\\\\0\");\n                break;\n            }\n            if (c >= 32 && c < 127)\n            {\n                fputc(c, logf);\n            }\n            else\n            {\n                fprintf(logf, \"\\\\x%02x\", c);\n            }\n        }\n        fprintf(logf, \"\\\"\\n\");\n        fprintf(logf, \"TestSegmentCount computed: %u\\n\", (unsigned)TestSegmentCount);\n        fprintf(logf, \"Calling UT_BSP_StartTestSegment(...).\\n\");\n        fprintf(logf, \"--- UtAssert_BeginTest EXIT ---\\n\\n\");\n        fclose(logf);\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}