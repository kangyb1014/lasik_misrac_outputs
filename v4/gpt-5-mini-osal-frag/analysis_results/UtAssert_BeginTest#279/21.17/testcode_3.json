{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to 63 bytes from SegmentName. If SegmentName is NULL, or points to a shorter/non\u2011NUL\u2011terminated buffer smaller than 63 bytes (or otherwise not guaranteed to have at least 63 accessible bytes), strncpy may read beyond the bounds of the source object. Although the destination buffer (CurrentSegment[64]) is protected by copying at most 63 bytes and then explicitly NUL\u2011terminating, there is no guarantee in the code that the source buffer is large or NUL\u2011terminated, so out\u2011of\u2011bounds access of the source is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_BeginTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_BeginTest with it.\n  - Your function must have the exact same signature as UtAssert_BeginTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_BeginTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_BeginTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *logf = fopen(\"/tmp/logs/633.txt\", \"a\");\n\n    UT_BSP_Lock();\n\n    if (logf)\n    {\n        fprintf(logf, \"ENTER UtAssert_BeginTest\\n\");\n        fprintf(logf, \"  SegmentName pointer: %p\\n\", (void *)SegmentName);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    if (logf)\n    {\n        fprintf(logf, \"  UT_SegmentCounters zeroed (memset called)\\n\");\n        fprintf(logf, \"  About to call strncpy(CurrentSegment, SegmentName, %zu)\\n\", (size_t)(sizeof(CurrentSegment) - 1));\n    }\n\n    /* Original behavior: may read up to sizeof(CurrentSegment) - 1 bytes from SegmentName */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (logf)\n    {\n        fprintf(logf, \"  strncpy returned; CurrentSegment (as string): \\\"\");\n        /* Print safely: CurrentSegment is the destination buffer and is NUL-terminated above */\n        fprintf(logf, \"%s\\\"\\n\", CurrentSegment);\n\n        fprintf(logf, \"  CurrentSegment raw bytes:\");\n        for (size_t i = 0; i < sizeof(CurrentSegment); ++i)\n        {\n            fprintf(logf, \" %02x\", (unsigned char)CurrentSegment[i]);\n        }\n        fprintf(logf, \"\\n\");\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    if (logf)\n    {\n        fprintf(logf, \"  Computed TestSegmentCount = %u\\n\", (unsigned)TestSegmentCount);\n    }\n\n    UT_BSP_Unlock();\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT UtAssert_BeginTest: calling UT_BSP_StartTestSegment(TestSegmentCount=%u, SegmentName=%p)\\n\", (unsigned)TestSegmentCount, (void *)SegmentName);\n        fclose(logf);\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}