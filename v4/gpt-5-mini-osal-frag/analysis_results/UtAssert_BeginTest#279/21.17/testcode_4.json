{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to (sizeof(CurrentSegment)-1) bytes from SegmentName. If SegmentName refers to an object that is shorter than that and not NUL-terminated within its own bounds (e.g. a non-terminated char array or an incorrectly sized buffer), strncpy will read past the bounds of the SegmentName object. This can result in out-of-bounds reads and therefore violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/633.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_BeginTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_BeginTest with it.\n  - Your function must have the exact same signature as UtAssert_BeginTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_BeginTest to check logs.\n  - Your function MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_BeginTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n    FILE *log = NULL;\n    /* Try to open the log file; if this fails, continue without logging to avoid changing behavior */\n    log = fopen(\"/tmp/logs/633.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"---- Enter UtAssert_BeginTest ----\\n\");\n        fprintf(log, \"SegmentName pointer: %p\\n\", (void *)SegmentName);\n    }\n\n    UT_BSP_Lock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Lock() called\\n\");\n    }\n\n    /* Preserve original behavior: zero the segment counters */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    if (log)\n    {\n        fprintf(log, \"UT_SegmentCounters zeroed (size=%lu)\\n\", (unsigned long)sizeof(UT_SegmentCounters));\n    }\n\n    /* Log CurrentSegment metadata before copy */\n    if (log)\n    {\n        fprintf(log, \"CurrentSegment address: %p, sizeof(CurrentSegment)=%lu\\n\",\n                (void *)CurrentSegment, (unsigned long)sizeof(CurrentSegment));\n    }\n\n    /* Probe SegmentName for a NUL within the intended copy length.\n       Note: this bounded scan mirrors the potential read done by strncpy and may itself\n       read the same memory; it is intended to produce evidence of whether a NUL was\n       present within that range. This preserves original behavior (we still call strncpy\n       below) while producing useful diagnostic output. */\n    if (log)\n    {\n        if (SegmentName == NULL)\n        {\n            fprintf(log, \"SegmentName is NULL\\n\");\n        }\n        else\n        {\n            size_t max_scan = (sizeof(CurrentSegment) > 0) ? (sizeof(CurrentSegment) - 1) : 0;\n            size_t scanned = 0;\n\n            /* Bounded scan for NUL (may read up to max_scan bytes) */\n            while ((scanned < max_scan) && (SegmentName[scanned] != '\\0'))\n            {\n                scanned++;\n            }\n\n            if (scanned < max_scan && SegmentName[scanned] == '\\0')\n            {\n                fprintf(log, \"NUL found within first %lu bytes at offset %lu\\n\",\n                        (unsigned long)max_scan, (unsigned long)scanned);\n            }\n            else\n            {\n                fprintf(log, \"No NUL found within first %lu bytes (scanned=%lu)\\n\",\n                        (unsigned long)max_scan, (unsigned long)scanned);\n            }\n\n            /* Print a short hex dump of the scanned region (cap at 64 bytes for log brevity) */\n            {\n                size_t dump = scanned;\n                if (dump > 64) dump = 64;\n                fprintf(log, \"SegmentName dump (up to %lu bytes):\", (unsigned long)dump);\n                for (size_t i = 0; i < dump; ++i)\n                {\n                    unsigned char c = (unsigned char)SegmentName[i];\n                    fprintf(log, \" %02X\", c);\n                }\n                fprintf(log, \"\\n\");\n            }\n        }\n    }\n\n    /* Perform the original copy operation exactly as before */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (log)\n    {\n        /* Log the resulting CurrentSegment content (safely printed as string) */\n        fprintf(log, \"After strncpy, CurrentSegment (as string): '%s'\\n\", CurrentSegment);\n\n        /* Also provide a hex dump of the stored bytes (cap at 64 bytes) */\n        {\n            size_t to_dump = sizeof(CurrentSegment);\n            if (to_dump > 64) to_dump = 64;\n            fprintf(log, \"CurrentSegment hex dump (first %lu bytes):\", (unsigned long)to_dump);\n            for (size_t i = 0; i < to_dump; ++i)\n            {\n                unsigned char c = (unsigned char)CurrentSegment[i];\n                fprintf(log, \" %02X\", c);\n            }\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    if (log)\n    {\n        fprintf(log, \"Computed TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount = %lu\\n\",\n                (unsigned long)TestSegmentCount);\n    }\n\n    UT_BSP_Unlock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Unlock() called\\n\");\n    }\n\n    /* Record the call to start the test segment */\n    if (log)\n    {\n        fprintf(log, \"Calling UT_BSP_StartTestSegment(%lu, %p)\\n\",\n                (unsigned long)TestSegmentCount, (void *)SegmentName);\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n\n    if (log)\n    {\n        fprintf(log, \"---- Exit UtAssert_BeginTest ----\\n\\n\");\n        fclose(log);\n    }\n}\n"
}