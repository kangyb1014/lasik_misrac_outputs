{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent invokes a function pointer OS_SharedGlobalVars.EventHandler. If that pointer (directly) points to OS_NotifyEvent, or the registered handler calls OS_NotifyEvent again, this produces indirect recursion (OS_NotifyEvent -> EventHandler -> OS_NotifyEvent), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1280.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleLoad code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleLoad with it.\n  - Your function must have the exact same signature as OS_ModuleLoad.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleLoad to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleLoad as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleLoad will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Probe: log entry and basic parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_ModuleLoad: module_name=%s, filename=%s, flags=0x%08x\\n\",\n                    (module_name != NULL) ? module_name : \"(null)\",\n                    (filename != NULL) ? filename : \"(null)\",\n                    (unsigned)flags);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log the result of path translation */\n    {\n        FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TranslatePath returned %d; translated_path='%s'\\n\",\n                    (int)filename_status,\n                    (translated_path[0] != '\\0') ? translated_path : \"(empty)\");\n            fclose(log);\n        }\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n\n    /* Log allocation result */\n    {\n        FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /* Probe: log module table entry info after init */\n        {\n            FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Module entry initialized: module_ptr=%p, name=%s, flags=0x%08x\\n\",\n                        (void *)module,\n                        (module_name != NULL) ? module_name : \"(null)\",\n                        (unsigned)module->flags);\n                fclose(log);\n            }\n        }\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n\n        /* Log static loader result */\n        {\n            FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ModuleLoad_Static returned %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n\n            /* Log final module state for static case */\n            {\n                FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Module %s marked as STATIC; module_ptr=%p, module_type=%d\\n\",\n                            module_name, (void *)module, (int)module->module_type);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n\n                /* Log filename error */\n                FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Filename invalid; filename_status=%d -> return_code=%d\\n\",\n                            (int)filename_status, (int)return_code);\n                    fclose(log);\n                }\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->file_name[sizeof(module->file_name) - 1] = '\\0';\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Log prepared dynamic module state */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Prepared DYNAMIC module: file_name=%s, translated_path=%s\\n\",\n                                module->file_name, translated_path);\n                        fclose(log);\n                    }\n                }\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Calling OS_ModuleLoad_Impl with token and translated_path=%s\\n\",\n                                translated_path);\n                        fclose(log);\n                    }\n                }\n\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n\n                /* Log impl result */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"OS_ModuleLoad_Impl returned %d\\n\", (int)return_code);\n                        fclose(log);\n                    }\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_ObjectIdFinalizeNew with return_code=%d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Log finalize result and module_id */\n        {\n            FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %d; module_id=%p\\n\", (int)return_code, (void *)module_id);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *log = fopen(\"/tmp/logs/1280.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_ModuleLoad -> return %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}