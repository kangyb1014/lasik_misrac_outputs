{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &token to OS_CountSemCreate_Impl which, according to the comment, only reads information from the token. If OS_CountSemCreate_Impl is declared to take OS_object_token_t * (non-const) but does not modify the pointee, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be to a const-qualified type (const OS_object_token_t *). If, however, the implementation actually modifies the token, then const is not appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2005.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemCreate with it.\n  - Your function must have the exact same signature as OS_CountSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry immediately so we capture calls that may return from parameter checks */\n    {\n        FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n        if (f)\n        {\n            (void)fprintf(f, \"ENTER: OS_CountSemCreate(sem_id=%p, sem_name=%s, sem_initial_value=%lu, options=%lu)\\n\",\n                          (void *)sem_id, (sem_name != NULL) ? sem_name : \"(null)\", (unsigned long)sem_initial_value, (unsigned long)options);\n            (void)fclose(f);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt and token address */\n    {\n        FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n        if (f)\n        {\n            (void)fprintf(f, \"After OS_ObjectIdAllocateNew: return_code=%ld, token_addr=%p, token_size=%zu\\n\",\n                          (long)return_code, (void *)&token, (size_t)sizeof(token));\n            (void)fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Capture a byte-wise snapshot of the token before calling the implementation */\n        {\n            size_t i;\n            unsigned char before[sizeof(token)];\n            for (i = 0; i < sizeof(token); ++i)\n            {\n                before[i] = ((unsigned char *)&token)[i];\n            }\n\n            /* Now call the OS-specific implementation.  This reads info from the table. */\n            {\n                FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n                if (f)\n                {\n                    (void)fprintf(f, \"Calling OS_CountSemCreate_Impl with token_addr=%p, sem_initial_value=%lu, options=%lu\\n\",\n                                  (void *)&token, (unsigned long)sem_initial_value, (unsigned long)options);\n                    (void)fclose(f);\n                }\n            }\n\n            return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n            /* Capture snapshot after impl and report any bytewise changes to the token */\n            {\n                size_t i;\n                unsigned char after[sizeof(token)];\n                int changed = 0;\n                FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n                for (i = 0; i < sizeof(token); ++i)\n                {\n                    after[i] = ((unsigned char *)&token)[i];\n                    if (after[i] != before[i])\n                    {\n                        changed = 1;\n                    }\n                }\n\n                if (f)\n                {\n                    (void)fprintf(f, \"OS_CountSemCreate_Impl returned %ld\\n\", (long)return_code);\n                    if (changed)\n                    {\n                        (void)fprintf(f, \"Token modified by OS_CountSemCreate_Impl; byte diffs (index: before->after):\\n\");\n                        for (i = 0; i < sizeof(token); ++i)\n                        {\n                            if (after[i] != before[i])\n                            {\n                                (void)fprintf(f, \"  [%03zu]: 0x%02X -> 0x%02X\\n\", i, (unsigned)before[i], (unsigned)after[i]);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        (void)fprintf(f, \"Token not modified by OS_CountSemCreate_Impl (byte-wise identical).\\n\");\n                    }\n\n                    (void)fclose(f);\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log finalization result and the assigned sem_id */\n        {\n            FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n            if (f)\n            {\n                (void)fprintf(f, \"After OS_ObjectIdFinalizeNew: final_return_code=%ld, assigned_sem_id=%p\\n\",\n                              (long)return_code, (void *)sem_id);\n                (void)fclose(f);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *f = fopen(\"/tmp/logs/2005.txt\", \"a\");\n        if (f)\n        {\n            (void)fprintf(f, \"EXIT: OS_CountSemCreate -> %ld\\n\", (long)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}