{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code fragment is inside OS_NotifyEvent which invokes a user-supplied callback via OS_SharedGlobalVars.EventHandler(event, object_id, data). If that callback (or any function it calls) calls OS_NotifyEvent again, this creates an indirect recursive call back into OS_NotifyEvent, violating MISRA C 2023 Rule 17.2. There is no mechanism in the shown code to prevent the EventHandler from calling OS_NotifyEvent (or a chain that leads to it), so indirect self-calls are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2000.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemCreate with it.\n  - Your function must have the exact same signature as OS_CountSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n    FILE *log = fopen(\"/tmp/logs/2000.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER OS_CountSemCreate: sem_id=%p sem_name=%p name=\\\"%s\\\" initial=%u options=%u\\n\",\n                (void *)sem_id,\n                (void *)sem_name,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (unsigned)sem_initial_value,\n                (unsigned)options);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    if (log != NULL)\n    {\n        fprintf(log, \"After OS_CHECK_POINTER\\n\");\n        fflush(log);\n    }\n\n    OS_CHECK_APINAME(sem_name);\n    if (log != NULL)\n    {\n        fprintf(log, \"After OS_CHECK_APINAME\\n\");\n        fflush(log);\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n        if (log != NULL)\n        {\n            fprintf(log, \"countsem=%p (table entry obtained)\\n\", (void *)countsem);\n            fflush(log);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_OBJECT_INIT\\n\");\n            fflush(log);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_CountSemCreate_Impl: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%ld sem_id_ptr=%p\\n\", (long)return_code, (void *)sem_id);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew failed with return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_CountSemCreate: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}