{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code invokes a function pointer (VaHook) from UT_DefaultStubImplWithArgs. If a hook callback calls the default implementation (e.g. uses the UT_DEFAULT_IMPL macro, which calls UT_DefaultStubImpl/UT_DefaultStubImplWithArgs), an indirect recursion occurs: UT_DefaultStubImpl -> UT_DefaultStubImplWithArgs -> VaHook callback -> UT_DefaultStubImpl (or WithArgs) -> ... leading to indirect self-call. For example, a hook installed for a stub that itself invokes UT_DEFAULT_IMPL(same_or_other_stub) will create the call cycle and thus violate Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/430.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_DefaultStubImpl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_DefaultStubImpl with it.\n  - Your function must have the exact same signature as UT_DefaultStubImpl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_DefaultStubImpl to check logs.\n  - Your function MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_DefaultStubImpl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Persistent recursion depth counter to help detect indirect recursion */\n    static int rec_depth = 0;\n\n    /* Log entry with key state information. Append-only to /tmp/logs/430.txt so multiple calls are recorded. */\n    {\n        FILE *f = fopen(\"/tmp/logs/430.txt\", \"a\");\n        if (f)\n        {\n            /* Print function entry, parameters and addresses useful for reconstructing call graph */\n            fprintf(f, \"ENTER UT_DefaultStubImpl depth=%d func=%s FuncKey=%llu DefaultRc=%ld UT_DefaultStubImpl=%p UT_DefaultStubImplWithArgs=%p &va=%p\\n\",\n                    rec_depth + 1,\n                    (FunctionName != NULL) ? FunctionName : \"(null)\",\n                    (unsigned long long)FuncKey,\n                    (long)DefaultRc,\n                    (void *)UT_DefaultStubImpl,\n                    (void *)UT_DefaultStubImplWithArgs,\n                    (void *)&va);\n            fclose(f);\n        }\n    }\n\n    /* Increase depth before making the delegated call so nested invocations are visible in logs */\n    rec_depth++;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    /* Log exit and return code. Decrement depth after logging. */\n    {\n        FILE *f = fopen(\"/tmp/logs/430.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"EXIT  UT_DefaultStubImpl depth=%d func=%s FuncKey=%llu Retcode=%ld UT_DefaultStubImpl=%p UT_DefaultStubImplWithArgs=%p &va=%p\\n\",\n                    rec_depth,\n                    (FunctionName != NULL) ? FunctionName : \"(null)\",\n                    (unsigned long long)FuncKey,\n                    (long)Retcode,\n                    (void *)UT_DefaultStubImpl,\n                    (void *)UT_DefaultStubImplWithArgs,\n                    (void *)&va);\n            fclose(f);\n        }\n    }\n\n    rec_depth--;\n\n    return Retcode;\n}\n"
}