{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf File is non-NULL but does not point to a NUL-terminated character array (for example a pointer into a buffer that was filled with data via memcpy without a terminating '\\0', or an invalid/non-string pointer passed by a caller), then strrchr(File, '/') will read bytes past the object's bounds searching for the terminator. The code only checks File != NULL and does not guarantee the referred object is NUL-terminated, so this use of strrchr can access beyond the bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_DefaultStubImpl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_DefaultStubImpl with it.\n  - Your function must have the exact same signature as UT_DefaultStubImpl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_DefaultStubImpl to check logs.\n  - Your function MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_DefaultStubImpl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Minimal, non-invasive logging to help reproduce string-handling issues\n     * Logs are appended to /tmp/logs/433.txt. We avoid dereferencing FunctionName\n     * to prevent introducing additional undefined behavior. */\n    {\n        FILE *log = fopen(\"/tmp/logs/433.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log entry with pointer values and input parameters. Do not read or\n             * inspect the memory pointed to by FunctionName to avoid causing\n             * out-of-bounds accesses. */\n            fprintf(log, \"UT_DefaultStubImpl ENTER: FunctionName=%p, DefaultRc=%d, FuncKey=%u, va_addr=%p\\n\",\n                    (const void *)FunctionName,\n                    (int)DefaultRc,\n                    (unsigned)FuncKey,\n                    (void *)&va);\n\n            if (FunctionName == NULL)\n            {\n                fprintf(log, \"  Note: FunctionName is NULL\\n\");\n            }\n            else\n            {\n                /* Indicate that the pointer is non-NULL but do not dereference it. */\n                fprintf(log, \"  Note: FunctionName is NON-NULL (not dereferenced)\\n\");\n            }\n\n            fclose(log);\n        }\n    }\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/433.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_DefaultStubImpl EXIT: Retcode=%d\\n\", Retcode);\n            fclose(log);\n        }\n    }\n\n    return Retcode;\n}\n"
}