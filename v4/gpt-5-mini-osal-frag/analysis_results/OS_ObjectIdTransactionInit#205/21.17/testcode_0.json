{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes token == NULL (or a pointer to an object smaller than sizeof(*token)), the call memset(token, 0, sizeof(*token)) will write bytes beyond the bounds of the referenced object (e.g. memset(NULL,0, sizeof *token) or memset(ptr_to_smaller_buffer,0, sizeof *token)). The function does not validate token before use, so this can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdTransactionInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdTransactionInit:\n```c\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    memset(token, 0, sizeof(*token));\n\n    /*\n     * Confirm that OSAL has been fully initialized before allowing any transactions\n     */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    if (OS_GetMaxForObjectType(idtype) == 0)\n    {\n        return OS_ERR_INVALID_ID;\n    }\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        OS_Lock_Global(token);\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdTransactionInit code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdTransactionInit with it.\n  - Your function must have the exact same signature as OS_ObjectIdTransactionInit.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdTransactionInit to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdTransactionInit as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdTransactionInit will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdTransactionInit as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    /* Log function entry and input state */\n    do {\n        FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_ObjectIdTransactionInit\\n\");\n            fprintf(log, \"  lock_mode=%d, idtype=%d, token=%p, sizeof(*token)=%zu\\n\",\n                    (int)lock_mode, (int)idtype, (void *)token, sizeof(*token));\n            fclose(log);\n        }\n    } while (0);\n\n    /* Probe: log just before the potentially unsafe memset */\n    do {\n        FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"BEFORE memset(token, 0, sizeof(*token)) token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n    } while (0);\n\n    /* Original behavior: may crash here if token is NULL or too small */\n    memset(token, 0, sizeof(*token));\n\n    /* If execution continues, log that memset returned (no crash) */\n    do {\n        FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER memset succeeded token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n    } while (0);\n\n    /*\n     * Confirm that OSAL has been fully initialized before allowing any transactions\n     */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        do {\n            FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RETURN: OS_ERROR (GlobalState=%u)\\n\", (unsigned)OS_SharedGlobalVars.GlobalState);\n                fclose(log);\n            }\n        } while (0);\n\n        return OS_ERROR;\n    }\n\n    /*\n     * only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        do {\n            FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RETURN: OS_ERR_INCORRECT_OBJ_STATE (GlobalState=SHUTDOWN, lock_mode=%d)\\n\", (int)lock_mode);\n                fclose(log);\n            }\n        } while (0);\n\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    if (OS_GetMaxForObjectType(idtype) == 0)\n    {\n        do {\n            FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RETURN: OS_ERR_INVALID_ID (idtype=%d)\\n\", (int)idtype);\n                fclose(log);\n            }\n        } while (0);\n\n        return OS_ERR_INVALID_ID;\n    }\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    do {\n        FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Set token fields: lock_mode=%d, obj_type=%d, obj_idx=%d\\n\",\n                    (int)token->lock_mode, (int)token->obj_type, (int)token->obj_idx);\n            fclose(log);\n        }\n    } while (0);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        do {\n            FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_Lock_Global(token=%p)\\n\", (void *)token);\n                fclose(log);\n            }\n        } while (0);\n\n        OS_Lock_Global(token);\n\n        do {\n            FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Returned from OS_Lock_Global(token=%p)\\n\", (void *)token);\n                fclose(log);\n            }\n        } while (0);\n    }\n\n    do {\n        FILE *log = fopen(\"/tmp/logs/3183.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN: OS_SUCCESS\\n\");\n            fclose(log);\n        }\n    } while (0);\n\n    return OS_SUCCESS;\n}\n"
}