{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a destination buffer smaller than OS_FS_PHYS_NAME_LEN (64). The code calls strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) which may write up to 63 bytes into PhysDriveName, and then writes a terminator at PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] (index 63). If PhysDriveName does not point to at least 64 bytes (for example char buf[16]; OS_FS_GetPhysDriveName(buf, ...) ), these writes will exceed the buffer bounds and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FS_GetPhysDriveName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FS_GetPhysDriveName with it.\n  - Your function must have the exact same signature as OS_FS_GetPhysDriveName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FS_GetPhysDriveName to check logs.\n  - Your function MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FS_GetPhysDriveName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n    FILE *log = NULL;\n\n    /* Open log file for append; best-effort. */\n    log = fopen(\"/tmp/logs/853.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_FS_GetPhysDriveName: PhysDriveName=%p MountPoint=%p\\n\", (void *)PhysDriveName, (void *)MountPoint);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    if (log)\n    {\n        fprintf(log, \"Checking parameters...\\n\");\n        fflush(log);\n    }\n\n    OS_CHECK_PATHNAME(MountPoint);\n\n    if (log)\n    {\n        fprintf(log, \"After OS_CHECK_PATHNAME\\n\");\n        fflush(log);\n    }\n\n    OS_CHECK_POINTER(PhysDriveName);\n\n    if (log)\n    {\n        fprintf(log, \"After OS_CHECK_POINTER\\n\");\n        fflush(log);\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetBySearch returned %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"filesys pointer=%p flags=0x%08x system_mountpt=%p\\n\",\n                    (void *)filesys, (unsigned int)filesys->flags, (void *)filesys->system_mountpt);\n            /* Attempt to print a short prefix of the mount point to aid debugging. */\n            if (filesys->system_mountpt != NULL)\n            {\n                fprintf(log, \"system_mountpt (as string)='%s'\\n\", filesys->system_mountpt);\n            }\n            fprintf(log, \"OS_FS_PHYS_NAME_LEN=%d attempting strncpy of %d bytes then NUL at index %d\\n\",\n                    (int)OS_FS_PHYS_NAME_LEN, (int)(OS_FS_PHYS_NAME_LEN - 1), (int)(OS_FS_PHYS_NAME_LEN - 1));\n            fflush(log);\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log intention right before the copy that can overflow a too-small destination buffer. */\n            if (log)\n            {\n                fprintf(log, \"Performing strncpy to destination %p (destination size unknown to this function)\\n\", (void *)PhysDriveName);\n                fflush(log);\n            }\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            if (log)\n            {\n                fprintf(log, \"Copy completed (note: this may have written beyond the caller-provided buffer if it was smaller than %d bytes)\\n\", (int)OS_FS_PHYS_NAME_LEN);\n                fflush(log);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            if (log)\n            {\n                fprintf(log, \"Filesystem not mounted system: flags=0x%08x -> return_code=%ld\\n\", (unsigned int)filesys->flags, (long)return_code);\n                fflush(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Released object id token\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        if (log)\n        {\n            fprintf(log, \"ObjectIdGetBySearch failed -> return_code set to OS_ERR_NAME_NOT_FOUND (%ld)\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_FS_GetPhysDriveName -> return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}