{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_SocketGetIdByName only checks that sock_name is non-NULL and forwards it to OS_ObjectIdFindByName. That function performs LENGTHCHECK(name, OS_MAX_API_NAME, ...), which typically uses a <string.h> routine such as strlen. If sock_name points to a character array that is not null-terminated (or whose terminator lies beyond the valid object bounds), the strlen (or other string.h function) will read past the object bounds, causing an out-of-bounds access. Because only a NULL-pointer check is done before calling the string handling logic, the use can result in accesses beyond the bounds of the object referenced by sock_name.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetIdByName:\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketGetIdByName with it.\n  - Your function must have the exact same signature as OS_SocketGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Log entry and parameter addresses to help reproduce OOB scenarios. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1133.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_SocketGetIdByName called. sock_id=%p, sock_name=%p\\n\",\n                    (void *)sock_id, (const void *)sock_name);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    /* Log that pointer checks passed and we are about to call the lookup routine. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1133.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Do not dereference sock_name here to avoid introducing new OOB reads. */\n            fprintf(log, \"Pointers OK. Calling OS_ObjectIdFindByName with objtype=%d, sock_name=%p\\n\",\n                    (int)LOCAL_OBJID_TYPE, (const void *)sock_name);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Original behavior preserved: forward to OS_ObjectIdFindByName */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    /* Log the result of the lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1133.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFindByName returned %ld for sock_name=%p\\n\", (long)return_code, (const void *)sock_name);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}