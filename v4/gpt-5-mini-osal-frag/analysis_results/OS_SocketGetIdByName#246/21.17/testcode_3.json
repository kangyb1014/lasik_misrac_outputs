{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nLikely violated. The LENGTHCHECK(name, OS_MAX_API_NAME, ...) macro typically checks the string length; if it is implemented using an unbounded function such as strlen(name) then a caller that supplies a non-terminated or only partially-initialized buffer will cause strlen to scan past the bounds of the object. Example scenario: caller has char buf[5]; memcpy(buf, \"abcdE\", 5); // no terminating '\\0' then calls OS_SocketGetIdByName(&id, buf). ARGCHECK only checks for non-NULL, so LENGTHCHECK implemented as if (strlen(name) > OS_MAX_API_NAME) { ... } will invoke strlen and may read beyond buf, violating MISRA C 2023 Rule 21.17. (If LENGTHCHECK were implemented using a bounded operation such as strnlen(name, OS_MAX_API_NAME) or an explicit loop limited by OS_MAX_API_NAME then it would be compliant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetIdByName:\n```c\nint32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketGetIdByName with it.\n  - Your function must have the exact same signature as OS_SocketGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketGetIdByName(osal_id_t *sock_id, const char *sock_name)\n{\n    /* Local include to ensure logging functions are declared even if the\n       surrounding translation unit does not include <stdio.h>. Placing the\n       include inside the function scope is legal C and keeps this replacement\n       self-contained. */\n    #include <stdio.h>\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Minimal entry log to demonstrate the function was reached. Do not\n       attempt to inspect the contents of sock_name (e.g. via %s or strlen)\n       because that can itself read beyond the bounds of the object if the\n       caller provided a non-terminated buffer. Log only pointer values and\n       the control flow so other agents can reproduce the conditions that\n       lead to a potential violation in other code (e.g. an implementation of\n       LENGTHCHECK that uses strlen).\n    */\n    logf = fopen(\"/tmp/logs/1133.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_SocketGetIdByName: entry\\n\");\n        fprintf(logf, \"  sock_id=%p\\n\", (void *)sock_id);\n        fprintf(logf, \"  sock_name_ptr=%p\\n\", (const void *)sock_name);\n        fflush(logf);\n    }\n\n    /* Preserve original parameter checks and semantics. These macros may\n       perform their own logging or error returns; do not alter their\n       behavior. */\n    OS_CHECK_POINTER(sock_id);\n    OS_CHECK_POINTER(sock_name);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"  after pointer checks\\n\");\n        fflush(logf);\n    }\n\n    /* Call the original lookup function and capture its return for logging. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sock_name, sock_id);\n\n    if (logf != NULL)\n    {\n        /* Log the return code; cast to long for portable printing of int32. */\n        fprintf(logf, \"  OS_ObjectIdFindByName returned=%ld\\n\", (long)return_code);\n        fprintf(logf, \"OS_SocketGetIdByName: exit\\n\\n\");\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}