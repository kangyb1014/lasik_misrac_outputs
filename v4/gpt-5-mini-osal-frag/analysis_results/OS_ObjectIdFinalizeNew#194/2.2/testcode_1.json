{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment assigns NULL to local pointer variables (conn_record, sock_record, sock, conn) and zeroes the token structs immediately after declaration. These initializations are redundant because, by control-flow, the tokens and record pointers are always explicitly set by OS_ObjectIdGetById/OS_ObjectIdAllocateNew (or set on successful paths) before any use; there is no execution path that relies on the initial NULL/zero values. Removing these assignments would not change runtime behaviour, so they constitute dead code under MISRA C 2023 Rule 2.2. Note: the comment indicates the assignments exist only to suppress static-analysis warnings, which does not change that they are dead code at runtime.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2828.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeNew:\n```c\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFinalizeNew code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFinalizeNew with it.\n  - Your function must have the exact same signature as OS_ObjectIdFinalizeNew.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFinalizeNew to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFinalizeNew as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFinalizeNew will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFinalizeNew as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n    FILE *log = fopen(\"/tmp/logs/2828.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdFinalizeNew ENTER: operation_status=%d, token=%p, outid=%p\\n\",\n                (int)operation_status, (void *)token, (void *)outid);\n        if (token)\n        {\n            fprintf(log, \" token->obj_id=%lld\\n\", (long long)token->obj_id);\n        }\n        else\n        {\n            fprintf(log, \" token is NULL\\n\");\n        }\n    }\n\n    /* Preserve original logic: determine final_id based on operation_status */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n        if (log)\n        {\n            fprintf(log, \" Path: OS_SUCCESS -> final_id = token->obj_id (%lld)\\n\", (long long)final_id);\n        }\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        if (log)\n        {\n            fprintf(log, \" Path: FAILURE -> final_id = OS_OBJECT_ID_UNDEFINED (%lld)\\n\", (long long)final_id);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \" Calling OS_ObjectIdTransactionFinish(token=%p, &final_id=%lld)\\n\", (void *)token, (long long)final_id);\n        fflush(log);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    if (log)\n    {\n        fprintf(log, \" Returned from OS_ObjectIdTransactionFinish\\n\");\n    }\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n        if (log)\n        {\n            fprintf(log, \" OS_NotifyEvent called for obj_id=%lld\\n\", (long long)token->obj_id);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \" OS_NotifyEvent not called (operation_status=%d)\\n\", (int)operation_status);\n        }\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n        if (log)\n        {\n            fprintf(log, \" Wrote final_id=%lld to outid (%p)\\n\", (long long)final_id, (void *)outid);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \" outid is NULL, not writing final_id\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdFinalizeNew EXIT: operation_status=%d\\n\\n\", (int)operation_status);\n        fclose(log);\n    }\n\n    return operation_status;\n}\n"
}