{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_STRING expands to OS_CHECK_POINTER(str); LENGTHCHECK(str,maxlen,errcode). If LENGTHCHECK is implemented using an unbounded string function such as strlen(fsvolname) (or any other <string.h> call that scans until a NUL) then calling OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), ...) will invoke strlen on the caller-supplied fsvolname. If fsvolname is not NUL-terminated within the bounds of its originating object, strlen will read past that object\u2019s bounds and thus violate MISRA C 2023 Rule 21.17. Note: sizeof(filesys->volume_name) is a compile-time constant (the array size) and is not itself a problem, but the safety depends entirely on the implementation of LENGTHCHECK (it must use a bounded operation such as strnlen or a loop limited by maxlen to be compliant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1063.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSys_Initialize code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSys_Initialize with it.\n  - Your function must have the exact same signature as OS_FileSys_Initialize.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSys_Initialize to check logs.\n  - Your function MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSys_Initialize will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    FILE *log = fopen(\"/tmp/logs/1063.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_FileSys_Initialize: address=%p, fsdevname=%p, fsvolname=%p, blocksize=%zu, numblocks=%llu, should_format=%d\\n\",\n                (void *)address, (const void *)fsdevname, (const void *)fsvolname,\n                (size_t)blocksize, (unsigned long long)numblocks, (int)should_format);\n        fflush(log);\n    }\n\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log the sizeof expressions used in the LENGTHCHECK macro to help reproduce the scenario */\n    if (log)\n    {\n        /* sizeof(filesys->device_name) and sizeof(filesys->volume_name) are compile-time constants\n         * (they do not dereference filesys), but logging them helps correlate what LENGTHCHECK\n         * would have received. */\n        fprintf(log, \"LENGTHCHECK params: device_name_size=%zu, volume_name_size=%zu\\n\",\n                (size_t)sizeof(filesys->device_name), (size_t)sizeof(filesys->volume_name));\n        fflush(log);\n    }\n\n    /* Keep the original checks - these macros may themselves perform pointer and length checks. */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname == NULL || fsvolname == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: NULL name parameter: fsdevname=%p, fsvolname=%p\\n\",\n                    (const void *)fsdevname, (const void *)fsvolname);\n            fflush(log);\n        }\n        return_code = OS_FS_ERR_PATH_INVALID;\n        if (log) fclose(log);\n        return return_code;\n    }\n\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: empty name string: fsdevname[0]=%d, fsvolname[0]=%d\\n\",\n                    (int)fsdevname[0], (int)fsvolname[0]);\n            fflush(log);\n        }\n        return_code = OS_FS_ERR_PATH_INVALID;\n        if (log) fclose(log);\n        return return_code;\n    }\n\n    if (log)\n    {\n        /* Log the first few bytes of the caller-supplied fsvolname pointer (bounded) to help\n         * reproduce the scenario without scanning beyond the presumed buffer size. This is\n         * intentionally conservative (only the first 32 bytes) to avoid accidental over-reads\n         * in the logger. The LENGTHCHECK macro in the invocation site might use an unbounded\n         * strlen; this log helps correlate the pointer and the expected volume buffer size. */\n        size_t i, max_dump = 32; /* conservative small dump */\n        fprintf(log, \"DBG: fsvolname address=%p, dump_first_%zu_bytes=\\n\", (const void *)fsvolname, max_dump);\n        if (fsvolname != NULL)\n        {\n            for (i = 0; i < max_dump; ++i)\n            {\n                unsigned char c = (unsigned char)fsvolname[i];\n                /* Print printable characters or hex for non-printables. Stop if NUL encountered. */\n                if (c == 0)\n                {\n                    fprintf(log, \"[0]\\n\");\n                    break;\n                }\n                if (c >= 32 && c < 127)\n                {\n                    fputc((char)c, log);\n                }\n                else\n                {\n                    fprintf(log, \"\\\\x%02x\", c);\n                }\n            }\n            if (i >= max_dump)\n            {\n                fprintf(log, \"... (truncated)\\n\");\n            }\n            fflush(log);\n        }\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew returned %ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"Allocated filesys record at %p; device_name_buf=%p, volume_name_buf=%p\\n\",\n                    (void *)filesys,\n                    (void *)filesys->device_name, (void *)filesys->volume_name);\n            fflush(log);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n        /* Ensure NUL termination in case strncpy didn't write one (defensive, does not change semantics\n         * beyond making the local buffer safe for our logging; preserves original behavior insofar as\n         * the implementation might expect non-NUL terminated data \u2014 but this step only writes within\n         * the destination buffer). */\n        filesys->volume_name[sizeof(filesys->volume_name) - 1] = '\\0';\n\n        if (log)\n        {\n            /* Safely log the stored volume name up to the buffer size */\n            size_t j, vol_size = sizeof(filesys->volume_name);\n            fprintf(log, \"filesys->volume_name (bounded up to %zu): \", vol_size);\n            for (j = 0; j < vol_size; ++j)\n            {\n                unsigned char c = (unsigned char)filesys->volume_name[j];\n                if (c == 0)\n                {\n                    break;\n                }\n                fputc((char)c, log);\n            }\n            if (j == 0)\n            {\n                fprintf(log, \"<empty>\");\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n            if (log)\n            {\n                fprintf(log, \"Set fstype to VOLATILE_DISK (address=%p, volname_prefix_match=true)\\n\",\n                        (void *)filesys->address);\n                fflush(log);\n            }\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_FileSysStartVolume_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Formatting volume as requested\\n\");\n                    fflush(log);\n                }\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n                if (log)\n                {\n                    fprintf(log, \"OS_FileSysFormatVolume_Impl returned %ld\\n\", (long)return_code);\n                    fflush(log);\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                if (log)\n                {\n                    fprintf(log, \"Filesys marked ready (flags=0x%08x)\\n\", (unsigned int)filesys->flags);\n                    fflush(log);\n                }\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                if (log)\n                {\n                    fprintf(log, \"Formatting failed, stopping volume\\n\");\n                    fflush(log);\n                }\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_FileSys_Initialize: returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}