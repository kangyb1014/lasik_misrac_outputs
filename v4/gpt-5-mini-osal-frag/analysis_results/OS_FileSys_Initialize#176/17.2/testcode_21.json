{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via event callback: OS_ObjectIdFinalizeNew calls OS_NotifyEvent, which invokes the application-provided EventHandler callback (OS_SharedGlobalVars.EventHandler). If that callback calls back into OSAL object-creation or finalization APIs (for example OS_ObjectIdAllocateNew which may eventually call OS_ObjectIdFinalizeNew), this produces an indirect recursive call chain: OS_ObjectIdFinalizeNew -> OS_NotifyEvent -> EventHandler -> ... -> OS_ObjectIdFinalizeNew. Thus the code can lead to an indirect self-call and violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1060.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSys_Initialize code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSys_Initialize with it.\n  - Your function must have the exact same signature as OS_FileSys_Initialize.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSys_Initialize to check logs.\n  - Your function MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSys_Initialize will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and input parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_FileSys_Initialize( address=%p, fsdevname=%s, fsvolname=%s, blocksize=%zu, numblocks=%llu, should_format=%d )\\n\",\n                    (void *)address,\n                    (fsdevname != NULL) ? fsdevname : \"(null)\",\n                    (fsvolname != NULL) ? fsvolname : \"(null)\",\n                    blocksize,\n                    (unsigned long long)numblocks,\n                    (int)should_format);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"EXIT: OS_FileSys_Initialize -> OS_FS_ERR_PATH_INVALID (empty name)\\n\");\n                fclose(log);\n            }\n        }\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%ld, token_addr=%p, token_size=%zu\\n\",\n                    (long)return_code, (void *)&token, (size_t)sizeof(token));\n\n            /* Dump raw token bytes to aid debugging of indirect recursion paths */\n            {\n                unsigned char *p = (unsigned char *)&token;\n                size_t i;\n                fprintf(log, \"token_bytes=\");\n                for (i = 0; i < sizeof(token); ++i)\n                {\n                    fprintf(log, \"%02X\", (unsigned)p[i]);\n                }\n                fprintf(log, \"\\n\");\n            }\n\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_FileSysStartVolume_Impl token_addr=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_FileSysStartVolume_Impl: return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                {\n                    FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Calling OS_FileSysFormatVolume_Impl token_addr=%p\\n\", (void *)&token);\n                        fclose(log);\n                    }\n                }\n\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n\n                {\n                    FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"After OS_FileSysFormatVolume_Impl: return_code=%ld\\n\", (long)return_code);\n                        fclose(log);\n                    }\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n\n                {\n                    FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Volume marked ready for token_addr=%p\\n\", (void *)&token);\n                        fclose(log);\n                    }\n                }\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n\n                {\n                    FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Called OS_FileSysStopVolume_Impl due to format failure for token_addr=%p\\n\", (void *)&token);\n                        fclose(log);\n                    }\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"About to call OS_ObjectIdFinalizeNew(return_code=%ld) for token_addr=%p\\n\", (long)return_code, (void *)&token);\n                fprintf(log, \"NOTE: If an EventHandler invokes object APIs this is the point where indirect recursion can occur.\\n\");\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%ld for token_addr=%p\\n\", (long)return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1060.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_FileSys_Initialize final return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}