{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer timecb is declared as a mutable pointer (OS_timecb_internal_record_t *timecb) but is only used to read fields (timecb->timebase_token, timecb->interval_time). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const OS_timecb_internal_record_t *timecb). The assignment timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token) yields a non-const pointer but may be assigned to a pointer-to-const; changing the local pointer to const would prevent accidental modification. Therefore this is a violation (the pointer should be const). Note: the underlying table need not be const for the pointer to be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerGetInfo with it.\n  - Your function must have the exact same signature as OS_TimerGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n    FILE *log = NULL;\n\n    /* Try to open the primary log file, fallback to /tmp/2595.txt if that fails. */\n    log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/2595.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_TimerGetInfo timer_id=%llu timer_prop=%p\\n\",\n                (unsigned long long)timer_id, (void *)timer_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    if (log)\n    {\n        fprintf(log, \"OBJTYPE: %d (OS_OBJECT_TYPE_OS_TIMEBASE=%d)\\n\",\n                (int)objtype, (int)OS_OBJECT_TYPE_OS_TIMEBASE);\n        fflush(log);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"EARLY RETURN: incorrect obj state (called from timebase)\\n\");\n            fflush(log);\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n\n    if (log)\n    {\n        fprintf(log, \"ObjectIdGetById returned %d; token addr=%p\\n\", return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"record ptr=%p, timecb ptr=%p\\n\", (void *)record, (void *)timecb);\n            fflush(log);\n        }\n\n        /* Log the fields that are read from the mutable timecb pointer to demonstrate the violation scenario */\n        if (timecb != NULL)\n        {\n            /* timebase_token may be an integer or token type; print its address and interval value */\n            if (log)\n            {\n                fprintf(log, \"timecb->timebase_token addr=%p, timecb->interval_time=%llu\\n\",\n                        (void *)&(timecb->timebase_token), (unsigned long long)timecb->interval_time);\n                fflush(log);\n            }\n\n            timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n        }\n        else\n        {\n            timebase = NULL;\n            if (log)\n            {\n                fprintf(log, \"timecb is NULL; cannot read fields\\n\");\n                fflush(log);\n            }\n        }\n\n        if (record != NULL)\n        {\n            /* copy name and other fields as original logic */\n            strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n            timer_prop->creator = record->creator;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"record is NULL; name/creator left as zero\\n\");\n                fflush(log);\n            }\n        }\n\n        if (timecb != NULL)\n        {\n            timer_prop->interval_time = (uint32)timecb->interval_time;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"interval_time not set because timecb is NULL\\n\");\n                fflush(log);\n            }\n        }\n\n        if (timebase != NULL)\n        {\n            timer_prop->accuracy = timebase->accuracy_usec;\n            if (log)\n            {\n                fprintf(log, \"timebase ptr=%p, accuracy_usec=%llu\\n\",\n                        (void *)timebase, (unsigned long long)timebase->accuracy_usec);\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"timebase is NULL; accuracy left as zero\\n\");\n                fflush(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Released token and prepared return code=%d\\n\", return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"ObjectIdGetById failed with code %d; leaving timer_prop zeroed\\n\", return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_TimerGetInfo return_code=%d\\n\", return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}