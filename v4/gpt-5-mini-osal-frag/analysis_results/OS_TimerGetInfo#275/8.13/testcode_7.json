{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration uses OS_ArgCallback_t which (as commonly defined) is a function-pointer taking a non-const data pointer. For example, if OS_ArgCallback_t is typedef void (*OS_ArgCallback_t)(void *); then declaring OS_ArgCallback_t callback_ptr permits the callback to take a non-const void * and therefore is not const-qualified. Under MISRA C 2023 Rule 8.13 this is a violation because the pointer (the callback argument) should point to a const-qualified type when modification is not required \u2014 e.g. typedef void (*OS_ArgCallback_t)(const void *);. If, however, OS_ArgCallback_t is already defined to use const for the pointed-to data (or the callback must legitimately modify the data), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerGetInfo with it.\n  - Your function must have the exact same signature as OS_TimerGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n    FILE *logf = NULL;\n\n    /* Open log early so we can always record entry into this function. */\n    logf = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_TimerGetInfo: timer_id=%ld, timer_prop=%p\\n\", (long)timer_id, (void *)timer_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After OS_CHECK_POINTER\\n\");\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskGetId_Impl -> objtype=%d\\n\", (int)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Detected incorrect object state: called from timebase context, returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(logf);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Cleared timer_prop (zeroed)\\n\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        if (logf != NULL)\n        {\n            /* Log relevant internal state that demonstrates how data flows into timer_prop */\n            fprintf(logf, \"record->name_entry=%s\\n\", record->name_entry ? record->name_entry : \"(null)\");\n            fprintf(logf, \"record->creator=%u\\n\", (unsigned)record->creator);\n            fprintf(logf, \"timecb->interval_time=%u\\n\", (unsigned)timecb->interval_time);\n            fprintf(logf, \"timecb->timebase_token=%u\\n\", (unsigned)timecb->timebase_token);\n            fprintf(logf, \"timebase->accuracy_usec=%u\\n\", (unsigned)timebase->accuracy_usec);\n        }\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After populate: timer_prop->name=%s\\n\", timer_prop->name);\n            fprintf(logf, \"After populate: timer_prop->creator=%u\\n\", (unsigned)timer_prop->creator);\n            fprintf(logf, \"After populate: timer_prop->interval_time=%u\\n\", (unsigned)timer_prop->interval_time);\n            fprintf(logf, \"After populate: timer_prop->accuracy=%u\\n\", (unsigned)timer_prop->accuracy);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Released token\\n\");\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_TimerGetInfo: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}