{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro returns a pointer with the same const-qualification as the table operand. In the code, the tables (OS_timecb_table, OS_timebase_table and OS_global_timecb_table) are non-const, so the macro yields non-const pointers. In OS_TimerGetInfo these pointers (record, timecb, timebase) are only used for read access, so they should be declared as pointers to const-qualified types (e.g. const OS_timecb_internal_record_t *timecb, const OS_timebase_internal_record_t *timebase, const OS_common_record_t *record). As written, the code obtains non-const pointers where const-qualified pointers are possible, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerGetInfo with it.\n  - Your function must have the exact same signature as OS_TimerGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Minimal logging infrastructure: append traces to the specified logfile. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_TimerGetInfo(timer_id=%ld, timer_prop=%p)\\n\", (long)timer_id, (void *)timer_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the object type and potential early-return path */\n    {\n        FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After ObjIdToType: objtype=%d\\n\", (int)objtype);\n            if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n            {\n                fprintf(log, \"EARLY RETURN: caller is a timebase (not allowed)\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    /* Log that we cleared the output structure */\n    {\n        FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Cleared timer_prop at %p (size=%zu)\\n\", (void *)timer_prop, sizeof(OS_timer_prop_t));\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n\n    /* Log the result of the lookup and the token pointer (address) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve table entries (note: these are non-const pointers, per original code) */\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Log addresses before dereferencing timecb */\n        {\n            FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Retrieved pointers: record=%p, timecb=%p\\n\", (void *)record, (void *)timecb);\n                if (record != NULL)\n                {\n                    /* Attempt to print record name_entry if available */\n                    fprintf(log, \"record->name_entry = '%s', creator=%u\\n\",\n                            (record->name_entry != NULL) ? record->name_entry : \"(null)\", (unsigned)record->creator);\n                }\n                if (timecb != NULL)\n                {\n                    fprintf(log, \"timecb->interval_time=%lld, timecb->timebase_token_addr=%p\\n\",\n                            (long long)timecb->interval_time, (void *)&timecb->timebase_token);\n                }\n                fclose(log);\n            }\n        }\n\n        /* This dereference follows the original code's behavior (may crash if timecb is NULL) */\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log timebase pointer and field we will copy */\n        {\n            FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"timebase=%p\\n\", (void *)timebase);\n                if (timebase != NULL)\n                {\n                    fprintf(log, \"timebase->accuracy_usec=%u\\n\", (unsigned)timebase->accuracy_usec);\n                }\n                fclose(log);\n            }\n        }\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        /* Log the values written into timer_prop */\n        {\n            FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Wrote timer_prop: name='%s', creator=%u, interval_time=%u, accuracy=%u\\n\",\n                        timer_prop->name, (unsigned)timer_prop->creator, (unsigned)timer_prop->interval_time, (unsigned)timer_prop->accuracy);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log token release */\n        {\n            FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Released token for timer_id=%ld\\n\", (long)timer_id);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final return value logging */\n    {\n        FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_TimerGetInfo(timer_id=%ld) => return_code=%ld\\n\", (long)timer_id, (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}