{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: record->name_entry is used only as a source string but (presumably) declared as non-const (e.g. char *name_entry) in OS_common_record_t. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; here the source pointer should be declared const char *name_entry since strncpy does not modify the source. The destination fd_prop->Path is an array (modifiable) and is fine. Recommendation: change the declaration of name_entry to const char * to satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1095.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FDGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FDGetInfo with it.\n  - Your function must have the exact same signature as OS_FDGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FDGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_FDGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FDGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n    FILE               *log = NULL;\n\n    /* Minimal entry probe: log that the function was entered and parameters. */\n    log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_FDGetInfo called. filedes=%ld, fd_prop=%p\\n\", (long)filedes, (void *)fd_prop);\n        fclose(log);\n        log = NULL;\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log the result of the lookup */\n    log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld for filedes=%ld\\n\", (long)return_code, (long)filedes);\n        fclose(log);\n        log = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log record pointer and name_entry pointer before use */\n        log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"record=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                fprintf(log, \"record->name_entry pointer=%p\\n\", (void *)record->name_entry);\n                if (record->name_entry != NULL)\n                {\n                    /* Attempt to log the source string content and length safely */\n                    size_t src_len = strlen(record->name_entry);\n                    fprintf(log, \"record->name_entry content (len=%zu): '%s'\\n\", src_len, record->name_entry);\n                }\n                else\n                {\n                    fprintf(log, \"record->name_entry is NULL\\n\");\n                }\n            }\n            fclose(log);\n            log = NULL;\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* Log that a copy will be performed and the destination buffer size */\n            log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"About to strncpy into fd_prop->Path (size=%zu) from record->name_entry=%p\\n\",\n                        sizeof(fd_prop->Path) - 1, (void *)record->name_entry);\n                fclose(log);\n                log = NULL;\n            }\n\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n\n            /* Log the destination buffer content after copy */\n            log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"fd_prop->Path after strncpy: '%s'\\n\", fd_prop->Path);\n                fclose(log);\n                log = NULL;\n            }\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Log final state for this success path */\n        log = fopen(\"/tmp/logs/1095.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"fd_prop->User=%ld, fd_prop->IsValid=%s\\n\", (long)fd_prop->User, fd_prop->IsValid ? \"true\" : \"false\");\n            fclose(log);\n            log = NULL;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}