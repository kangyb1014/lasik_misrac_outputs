{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro BUGCHECK_VOID(String != NULL) expands to an expression with no effect (for example ((void)0) or is compiled out in non-debug builds), then the statement is executed but has no observable effect; removing it would not change program behaviour. In that case it constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If, conversely, BUGCHECK_VOID performs a runtime check that may log, abort or otherwise change behaviour when the condition fails, then this statement is not dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1098.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FDGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FDGetInfo with it.\n  - Your function must have the exact same signature as OS_FDGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FDGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_FDGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FDGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Logging probe: record entry and parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FDGetInfo ENTER: filedes=%ld, fd_prop=%p\\n\", (long)filedes, (void *)fd_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    /* Log state immediately after the parameter check. If OS_CHECK_POINTER is a no-op in\n     * some builds (the suspected violation scenario), this log proves the check was reached\n     * and what fd_prop value was. If OS_CHECK_POINTER aborts/returns, the following log will\n     * not appear which also provides evidence. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_CHECK_POINTER: fd_prop=%p\\n\", (void *)fd_prop);\n            fclose(log);\n        }\n    }\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Log the fact that fd_prop was zeroed */\n    {\n        FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"fd_prop memset done (first byte=0x%02x)\\n\", ((unsigned char *)fd_prop)[0]);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"record=%p\\n\", (void *)record);\n                if (record != NULL)\n                {\n                    fprintf(log, \"record->creator=%ld, record->name_entry=%p\\n\", (long)record->creator, (void *)record->name_entry);\n                    if (record->name_entry != NULL)\n                    {\n                        /* Log up to 200 chars of the name to avoid overly long lines */\n                        char tmpbuf[201] = {0};\n                        size_t templen = strlen(record->name_entry);\n                        if (templen > 200) templen = 200;\n                        memcpy(tmpbuf, record->name_entry, templen);\n                        tmpbuf[templen] = '\\0';\n                        fprintf(log, \"record->name_entry (truncated)='%s'\\n\", tmpbuf);\n                    }\n                }\n                fclose(log);\n            }\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Log the values copied into fd_prop */\n        {\n            FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"fd_prop->Path (after copy)='%s'\\n\", fd_prop->Path);\n                fprintf(log, \"fd_prop->User=%ld, fd_prop->IsValid=%d\\n\", (long)fd_prop->User, (int)fd_prop->IsValid);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdRelease called for token.\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/1098.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FDGetInfo EXIT: return_code=%d\\n\", return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}