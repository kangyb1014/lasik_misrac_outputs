{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe structure member 'callback_arg' is declared as a plain void * in OS_timecb_internal_record_t. Under MISRA C 2023 Rule 8.13 a pointer should be const-qualified whenever possible; if the stored argument is not modified by the OS (i.e. it is only passed to callbacks for read-only use), it should be declared as 'const void *callback_arg'. As written (void *) the code is more permissive than necessary and therefore violates Rule 8.13 unless there is a documented need for the OS to modify the pointed-to object (in which case a justification should be provided).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerSet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2745.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerSet:\n```c\nint32 OS_TimerSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    OS_timecb_internal_record_t *timecb;\n    int32                        return_code;\n    osal_objtype_t               objtype;\n    osal_id_t                    dedicated_timebase_id;\n    OS_object_token_t            token;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n\n    ARGCHECK(start_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(start_time != 0 || interval_time != 0, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        timecb->wait_time     = (int32)start_time;\n        timecb->interval_time = (int32)interval_time;\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /*\n     * If the timer uses a dedicated time base, then also change that to the same interval.\n     *\n     * This is not perfect in the sense that the update is not all done atomically.  If this\n     * is not the first call to TimerSet, then weirdness can happen:\n     *  - a timer tick could occur between setting the callback times above and now\n     *  - the call to OS_TimeBaseSet() could fail leaving us in a mixed state\n     *\n     * However, the notion of multiple TimerSet() calls is a gray area to begin with, since\n     * timer ticks can occur at any moment - there is never a guarantee your new TimerSet values\n     * will get applied before the old timer expires.  Therefore by definition an application\n     * MUST be able to handle a possible \"spurious\" callback in these circumstances.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        return_code = OS_TimeBaseSet(dedicated_timebase_id, start_time, interval_time);\n    }\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerSet code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerSet with it.\n  - Your function must have the exact same signature as OS_TimerSet.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerSet to check logs.\n  - Your function MUST preserve the original logic of OS_TimerSet as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerSet will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerSet as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    OS_timecb_internal_record_t *timecb;\n    int32                        return_code;\n    osal_objtype_t               objtype;\n    osal_id_t                    dedicated_timebase_id;\n    OS_object_token_t            token;\n    FILE *log = NULL;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Minimal entry log so the function call is always recorded. */\n    log = fopen(\"/tmp/logs/2745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_TimerSet ENTRY: timer_id=%lu start_time=%lu interval_time=%lu\\n\",\n                (unsigned long)timer_id, (unsigned long)start_time, (unsigned long)interval_time);\n        fflush(log);\n    }\n\n    ARGCHECK(start_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < (UINT32_MAX / 2), OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(start_time != 0 || interval_time != 0, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_TimerSet EXIT EARLY: caller is a timebase (incorrect object state)\\n\");\n            fclose(log);\n            log = NULL;\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n\n        if (log)\n        {\n            /* Log the token-associated object pointer and some internal fields. */\n            fprintf(log, \"OS_TimerSet: found timecb at %p\\n\", (void *)timecb);\n            /* Log flags and current wait/interval values as seen before update. */\n            fprintf(log, \"  before: flags=0x%08lx wait_time=%ld interval_time=%ld\\n\",\n                    (unsigned long)timecb->flags,\n                    (long)timecb->wait_time,\n                    (long)timecb->interval_time);\n            /* Log the callback argument pointer to capture the violation scenario evidence. */\n            fprintf(log, \"  callback_arg (stored type: void *): %p\\n\", timecb->callback_arg);\n            fflush(log);\n        }\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            if (log)\n            {\n                fprintf(log, \"  has dedicated timebase: id=%lu\\n\", (unsigned long)dedicated_timebase_id);\n                fflush(log);\n            }\n        }\n\n        timecb->wait_time     = (int32)start_time;\n        timecb->interval_time = (int32)interval_time;\n\n        if (log)\n        {\n            fprintf(log, \"  after: wait_time=%ld interval_time=%ld\\n\",\n                    (long)timecb->wait_time,\n                    (long)timecb->interval_time);\n            fflush(log);\n        }\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_TimerSet: OS_ObjectIdGetById failed: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    /*\n     * If the timer uses a dedicated time base, then also change that to the same interval.\n     *\n     * This is not perfect in the sense that the update is not all done atomically.  If this\n     * is not the first call to TimerSet, then weirdness can happen:\n     *  - a timer tick could occur between setting the callback times above and now\n     *  - the call to OS_TimeBaseSet() could fail leaving us in a mixed state\n     *\n     * However, the notion of multiple TimerSet() calls is a gray area to begin with, since\n     * timer ticks can occur at any moment - there is never a guarantee your new TimerSet values\n     * will get applied before the old timer expires.  Therefore by definition an application\n     * MUST be able to handle a possible \"spurious\" callback in these circumstances.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_TimerSet: calling OS_TimeBaseSet for dedicated timebase id=%lu\\n\", (unsigned long)dedicated_timebase_id);\n            fflush(log);\n        }\n        return_code = OS_TimeBaseSet(dedicated_timebase_id, start_time, interval_time);\n        if (log)\n        {\n            fprintf(log, \"OS_TimerSet: OS_TimeBaseSet returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_TimerSet EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n        log = NULL;\n    }\n\n    return return_code;\n}\n"
}