{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_SUCCESS and EXIT_SUCCESS have the same value (commonly both 0), then when OS_BSP_Global.AppStatus == OS_SUCCESS the assignment retcode = EXIT_SUCCESS is redundant: the default branch (retcode = OS_BSP_Global.AppStatus & 0x7F) would produce the same value (0). Removing this assignment (or the entire case) would not change program behaviour, so the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_GetReturnStatus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetReturnStatus:\n```c\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            break;\n    }\n\n    return retcode;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_GetReturnStatus code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_GetReturnStatus with it.\n  - Your function must have the exact same signature as OS_BSP_GetReturnStatus.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_GetReturnStatus to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_GetReturnStatus as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_GetReturnStatus will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_GetReturnStatus as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n    /* Attempt to log control flow and state for debugging of potential dead code */\n    FILE *logf = fopen(\"/tmp/logs/1208.txt\", \"a\");\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_BSP_GetReturnStatus: entered\\n\");\n        /* Log relevant state and symbolic constant values to help reproduce the scenario */\n        fprintf(logf, \"AppStatus=%d, OS_SUCCESS=%d, OS_ERROR=%d, EXIT_SUCCESS=%d, EXIT_FAILURE=%d\\n\",\n                (int)OS_BSP_Global.AppStatus,\n                (int)OS_SUCCESS,\n                (int)OS_ERROR,\n                (int)EXIT_SUCCESS,\n                (int)EXIT_FAILURE);\n    }\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Taken branch: case OS_SUCCESS -> retcode = EXIT_SUCCESS (%d)\\n\", retcode);\n            }\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Taken branch: case OS_ERROR -> retcode = EXIT_FAILURE (%d)\\n\", retcode);\n            }\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Taken branch: default -> retcode = AppStatus & 0x7F (%d)\\n\", retcode);\n            }\n            break;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Returning retcode=%d\\n\\n\", retcode);\n        fclose(logf);\n    }\n\n    return retcode;\n}"
}