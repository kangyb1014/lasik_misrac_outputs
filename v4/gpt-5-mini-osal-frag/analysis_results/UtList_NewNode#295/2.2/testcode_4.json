{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(AllocNode, 0, sizeof(union NodeAllocator)); zeroes the bytes of the node area but those bytes are immediately overwritten by subsequent code (AllocNode->Node.Data, AllocNode->Node.DataSize, memcpy into the data area, and AllocNode->Node.Next/Prev). In the shown call-site UtList_Add, the Tag field is set by the caller right after UtList_NewNode returns. Therefore, with the provided code paths the memset does not affect program behaviour and can be removed \u2014 it is an executed operation whose removal would not change behaviour, i.e. dead code. (Caveat: if other callers rely on the node being zero-initialised before use, the memset would be required; but no such callers are shown.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/228.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_NewNode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_NewNode with it.\n  - Your function must have the exact same signature as UtList_NewNode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_NewNode to check logs.\n  - Your function MUST preserve the original logic of UtList_NewNode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_NewNode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_NewNode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    /* Include required headers locally so this definition is self-contained for logging. */\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <string.h>\n    #include <inttypes.h>\n\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    FILE *logf = fopen(\"/tmp/logs/228.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtList_NewNode entered: AllocNode=%p, Data=%p, DataSize=%\" PRIu32 \"\\n\",\n                (void *)AllocNode, Data, (uint32_t)DataSize);\n    }\n\n    if (AllocNode == NULL)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"malloc returned NULL\\n\");\n            fclose(logf);\n        }\n        return NULL;\n    }\n\n    /* Log: before memset (we do not inspect uninitialized bytes to avoid undefined behaviour) */\n    if (logf)\n    {\n        fprintf(logf, \"Allocated %zu bytes at %p (including payload)\\n\",\n                (size_t)(sizeof(union NodeAllocator) + (size_t)DataSize), (void *)AllocNode);\n    }\n\n    /* The memset that an external agent flagged as potentially dead. */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    if (logf)\n    {\n        unsigned char *bytes = (unsigned char *)AllocNode;\n        fprintf(logf, \"After memset (first %zu bytes): \", sizeof(union NodeAllocator));\n        for (size_t i = 0; i < sizeof(union NodeAllocator); ++i)\n        {\n            fprintf(logf, \"%02x\", (unsigned)bytes[i]);\n        }\n        fprintf(logf, \"\\n\");\n    }\n\n    /* Original logic preserved: set data pointer, size and copy payload. */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (logf)\n    {\n        fprintf(logf, \"After assignments: Node.Data=%p, Node.DataSize=%\" PRIu32 \", Node.Next=%p, Node.Prev=%p\\n\",\n                (void *)AllocNode->Node.Data, (uint32_t)AllocNode->Node.DataSize,\n                (void *)AllocNode->Node.Next, (void *)AllocNode->Node.Prev);\n\n        unsigned char *bytes = (unsigned char *)AllocNode;\n        fprintf(logf, \"After assignments (first %zu bytes): \", sizeof(union NodeAllocator));\n        for (size_t i = 0; i < sizeof(union NodeAllocator); ++i)\n        {\n            fprintf(logf, \"%02x\", (unsigned)bytes[i]);\n        }\n        fprintf(logf, \"\\n\");\n\n        fclose(logf);\n    }\n\n    return &AllocNode->Node;\n}\n"
}