{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code does not guard the size computation sizeof(union NodeAllocator) + DataSize against overflow. If DataSize is large enough that the sum wraps around size_t, malloc will allocate a much smaller block than intended and the subsequent memcpy(AllocNode->Node.Data, Data, DataSize) will write beyond the allocated object. Example: if sizeof(union NodeAllocator) == 32 and DataSize == SIZE_MAX - 16, the sum wraps to 15; malloc(15) returns a 15\u2011byte block but memcpy will copy DataSize bytes, overrunning the allocation and violating Rule 21.17. (Also note: if malloc returns NULL, the later memset/memcpy dereference NULL \u2014 another defect to check, though distinct from a pure buffer\u2011size arithmetic overflow.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_NewNode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_NewNode with it.\n  - Your function must have the exact same signature as UtList_NewNode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_NewNode to check logs.\n  - Your function MUST preserve the original logic of UtList_NewNode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_NewNode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_NewNode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Open a log file to record control flow and state for debugging the size computation and allocations. */\n    FILE *log = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"Enter UtList_NewNode: Data=%p DataSize=%u\\n\", Data, (unsigned)DataSize);\n    }\n\n    /* Compute sizes into temporaries so we can log the arithmetic and detect wrap/overflow. */\n    size_t header_size = sizeof(union NodeAllocator);\n    size_t total_size = header_size + (size_t)DataSize;\n\n    if (log) {\n        fprintf(log, \"sizeof(union NodeAllocator)=%zu, DataSize=%u, total_size=%zu\\n\",\n                header_size, (unsigned)DataSize, total_size);\n        fprintf(log, \"Overflow check: (total_size < DataSize) = %s\\n\",\n                (total_size < (size_t)DataSize) ? \"TRUE\" : \"FALSE\");\n    }\n\n    /* Perform allocation using the computed total_size (preserves original behavior). */\n    AllocNode = malloc(total_size);\n    if (log) {\n        fprintf(log, \"malloc(%zu) -> %p\\n\", total_size, (void *)AllocNode);\n        fflush(log);\n    }\n\n    /* Preserve original sequence of operations (no early-return on NULL to avoid changing behavior). */\n    memset(AllocNode, 0, header_size);\n    if (log) {\n        fprintf(log, \"memset(%p, 0, %zu) -- performed\\n\", (void *)AllocNode, header_size);\n    }\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    if (log) {\n        fprintf(log, \"Assigned Node.Data=%p Node.DataSize=%u\\n\",\n                (void *)AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n    }\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n    if (log) {\n        fprintf(log, \"memcpy(dest=%p, src=%p, n=%u) -- performed\\n\",\n                (void *)AllocNode->Node.Data, Data, (unsigned)DataSize);\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n    if (log) {\n        fprintf(log, \"Node.Next=%p Node.Prev=%p -- node linked to self\\n\",\n                (void *)AllocNode->Node.Next, (void *)AllocNode->Node.Prev);\n        fclose(log);\n    }\n\n    return &AllocNode->Node;\n}"
}