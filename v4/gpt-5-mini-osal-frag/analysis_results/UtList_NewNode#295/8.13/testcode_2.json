{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'Data' is declared as void * but is only read (passed as the source argument to memcpy). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2014 i.e. the parameter should be declared as const void *Data. (The destination AllocNode->Node.Data is writable and may remain non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_NewNode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_NewNode with it.\n  - Your function must have the exact same signature as UtList_NewNode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_NewNode to check logs.\n  - Your function MUST preserve the original logic of UtList_NewNode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_NewNode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_NewNode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Open log file for appending. Best-effort logging; do not alter control flow. */\n    FILE *logf = fopen(\"/tmp/logs/225.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: UtList_NewNode(Data=%p, DataSize=%u)\\n\", Data, (unsigned)DataSize);\n    }\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"malloc -> %p (requested %zu bytes)\\n\", (void *)AllocNode, sizeof(union NodeAllocator) + (size_t)DataSize);\n    }\n\n    /* Preserve original behavior: memset only the union area as in original code. */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"memset(%p, 0, %zu) done\\n\", (void *)AllocNode, sizeof(union NodeAllocator));\n    }\n\n    /* Compute data area pointer as original implementation: address just after the union. */\n    if (AllocNode != NULL)\n    {\n        AllocNode->Node.Data     = &AllocNode[1];\n        AllocNode->Node.DataSize = DataSize;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"AllocNode=%p, AllocNode->Node.Data=%p, AllocNode->Node.DataSize=%u\\n\",\n                    (void *)AllocNode, AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n\n            /* Log source pointer information and a small hex dump (up to 16 bytes) to demonstrate read-only usage. */\n            if (Data == NULL)\n            {\n                fprintf(logf, \"Source Data is NULL\\n\");\n            }\n            else\n            {\n                unsigned int sample = (DataSize > 16U) ? 16U : (unsigned int)DataSize;\n                unsigned int i;\n                unsigned char *src = (unsigned char *)Data;\n\n                fprintf(logf, \"About to memcpy %u bytes from source %p to dest %p. Hex sample (%u bytes):\",\n                        (unsigned)DataSize, Data, AllocNode->Node.Data, sample);\n                for (i = 0U; i < sample; ++i)\n                {\n                    fprintf(logf, \" %02X\", (unsigned)src[i]);\n                }\n                fprintf(logf, \"\\n\");\n            }\n        }\n\n        /* Perform the copy as in original code. */\n        memcpy(AllocNode->Node.Data, Data, DataSize);\n\n        if (logf != NULL)\n        {\n            /* After copy, log the first few bytes of destination to show copy occurred. */\n            unsigned int sample = (DataSize > 16U) ? 16U : (unsigned int)DataSize;\n            unsigned int i;\n            unsigned char *dst = (unsigned char *)AllocNode->Node.Data;\n\n            fprintf(logf, \"memcpy done. Dest first %u bytes:\", sample);\n            for (i = 0U; i < sample; ++i)\n            {\n                fprintf(logf, \" %02X\", (unsigned)dst[i]);\n            }\n            fprintf(logf, \"\\n\");\n        }\n\n        AllocNode->Node.Next = &AllocNode->Node;\n        AllocNode->Node.Prev = &AllocNode->Node;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Node links initialized: Next=%p Prev=%p\\n\", (void *)AllocNode->Node.Next, (void *)AllocNode->Node.Prev);\n        }\n    }\n    else\n    {\n        /* AllocNode is NULL: preserve original behavior (the original code would continue and likely crash).\n           We log the situation and continue to keep behavior consistent. */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"AllocNode is NULL; subsequent operations will likely fail as in original implementation.\\n\");\n        }\n\n        /* Still attempt to follow original flow (this will typically trigger the same failure modes as original). */\n        /* Note: Do not dereference AllocNode here to avoid altering behavior differently than original. */\n        /* Proceed to call memcpy to mirror original UB if tests exercise this path. */\n        memcpy(NULL, Data, DataSize);\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: UtList_NewNode -> %p\\n\\n\", (void *)(AllocNode ? &AllocNode->Node : NULL));\n        fclose(logf);\n    }\n\n    return &AllocNode->Node;\n}\n"
}