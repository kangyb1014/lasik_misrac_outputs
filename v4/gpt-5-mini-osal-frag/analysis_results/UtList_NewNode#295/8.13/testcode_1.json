{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as void * but is only read (used as the source argument to memcpy). It should be declared as 'const void *Data' so the pointer points to a const-qualified type. Change signature to: UtListNode_t *UtList_NewNode(const void *Data, uint32 DataSize).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtList_NewNode code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtList_NewNode with it.\n  - Your function must have the exact same signature as UtList_NewNode.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtList_NewNode to check logs.\n  - Your function MUST preserve the original logic of UtList_NewNode as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtList_NewNode will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtList_NewNode as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Logging: open file and record control flow/state for reproduction */\n    FILE *logf = fopen(\"/tmp/logs/225.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"UtList_NewNode ENTER: Data=%p DataSize=%u\\n\", (void *)Data, (unsigned int)DataSize);\n        fflush(logf);\n    }\n\n    size_t alloc_size = sizeof(union NodeAllocator) + (size_t)DataSize;\n    if (logf)\n    {\n        fprintf(logf, \"malloc requested size=%zu\\n\", alloc_size);\n        fflush(logf);\n    }\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    if (logf)\n    {\n        fprintf(logf, \"malloc returned %p\\n\", (void *)AllocNode);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior: memset only the union portion (not the trailing data) */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    if (logf)\n    {\n        fprintf(logf, \"memset zeroed sizeof(union NodeAllocator)=%zu at %p\\n\", sizeof(union NodeAllocator), (void *)AllocNode);\n        fflush(logf);\n    }\n\n    /* Set Data pointer and size exactly as original implementation */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    if (logf)\n    {\n        fprintf(logf, \"Assigned node.Data=%p node.DataSize=%u\\n\", (void *)AllocNode->Node.Data, (unsigned int)AllocNode->Node.DataSize);\n        fflush(logf);\n    }\n\n    /* Log the memcpy parameters before performing it (source is Data, destination is node.Data) */\n    if (logf)\n    {\n        fprintf(logf, \"About to memcpy(dst=%p, src=%p, n=%u)\\n\", (void *)AllocNode->Node.Data, (void *)Data, (unsigned int)DataSize);\n        fflush(logf);\n    }\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    /* After copying, log first up to 16 bytes of the copied data for inspection (if allocation succeeded) */\n    if (logf)\n    {\n        unsigned int i, limit = (DataSize < 16u) ? (unsigned int)DataSize : 16u;\n        unsigned char *bytes = (unsigned char *)AllocNode->Node.Data;\n        fprintf(logf, \"Post-memcpy: first %u bytes of node.Data:\", limit);\n        for (i = 0; i < limit; ++i)\n        {\n            fprintf(logf, \" %02X\", (unsigned int)bytes[i]);\n        }\n        if (limit == 0u)\n        {\n            fprintf(logf, \" <none>\");\n        }\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (logf)\n    {\n        fprintf(logf, \"Set Next=%p Prev=%p; returning node at %p\\n\", (void *)AllocNode->Node.Next, (void *)AllocNode->Node.Prev, (void *)&AllocNode->Node);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return &AllocNode->Node;\n}\n"
}