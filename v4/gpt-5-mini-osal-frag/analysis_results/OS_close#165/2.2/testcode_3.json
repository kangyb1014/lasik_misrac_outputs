{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe static inline function OS_ObjectIndexFromToken(const OS_object_token_t *token) is defined but not referenced anywhere in the supplied code. Because it has internal linkage (static) it can only be used in the same translation unit; no call sites are present here and the code accesses token->obj_idx directly elsewhere. Therefore removing this function would not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If in the actual translation unit there are call sites, then it would not be dead; but as shown, it is unused and thus violates the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1818.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_close code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_close with it.\n  - Your function must have the exact same signature as OS_close.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_close to check logs.\n  - Your function MUST preserve the original logic of OS_close as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_close will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_close as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Open log file to record control flow and state for debugging the reported dead-code violation */\n    FILE *log = fopen(\"/tmp/logs/1818.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and basic token information (address and size only to avoid depending on token members) */\n        fprintf(log, \"OS_close ENTRY: filedes=%d\\n\", (int)filedes);\n        fprintf(log, \"OS_close: token_addr=%p sizeof(token)=%zu\\n\", (void *)&token, sizeof(token));\n        /* Note about the suspect helper function: we deliberately do NOT call OS_ObjectIndexFromToken here\n           so that logs from a run that exercises this TU will show that this helper is not invoked from\n           OS_close (evidence for the reported dead-code scenario). */\n        fprintf(log, \"OS_close: NOTE - OS_ObjectIndexFromToken not invoked from OS_close in this TU\\n\");\n    }\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_close: calling OS_GenericClose_Impl\\n\");\n        }\n\n        return_code = OS_GenericClose_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_GenericClose_Impl returned %ld\\n\", (long)return_code);\n            fprintf(log, \"OS_close: calling OS_ObjectIdFinalizeDelete with current return_code=%ld\\n\", (long)return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeDelete returned %ld\\n\", (long)return_code);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_close: OS_ObjectIdGetById failed, skipping close/finalize.\\n\");\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_close EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}