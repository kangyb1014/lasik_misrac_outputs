{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function OS_ObjectIdFinalizeDelete does not modify the object referred to by token but its parameter is declared as a pointer to a non-const type (for example: int32 OS_ObjectIdFinalizeDelete(int32 status, OS_object_token_t *token)), then Rule 8.13 is violated. The parameter should be declared as a pointer to const (int32 OS_ObjectIdFinalizeDelete(int32 status, const OS_object_token_t *token)) so that the pointer points to a const-qualified type whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1815.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_close code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_close with it.\n  - Your function must have the exact same signature as OS_close.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_close to check logs.\n  - Your function MUST preserve the original logic of OS_close as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_close will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_close as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: open log file (append) */\n    FILE *log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_close entered: filedes=%d\\n\", (int)filedes);\n        fflush(log);\n    }\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned: %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture a byte-wise snapshot of token before the operations */\n        unsigned char *snapshot_before = (unsigned char *)malloc(sizeof(token));\n        if (snapshot_before != NULL)\n        {\n            memcpy(snapshot_before, &token, sizeof(token));\n        }\n\n        /* Log token bytes (before) */\n        if (log != NULL)\n        {\n            fprintf(log, \"Token address=%p size=%zu bytes BEFORE=\", (void *)&token, (size_t)sizeof(token));\n            if (snapshot_before != NULL)\n            {\n                for (size_t i = 0; i < sizeof(token); ++i) fprintf(log, \"%02X\", snapshot_before[i]);\n            }\n            else\n            {\n                fprintf(log, \"<no snapshot>\");\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n\n        /* Perform the generic close implementation (unchanged behavior) */\n        return_code = OS_GenericClose_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_GenericClose_Impl returned: %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        /* Capture token after GenericClose but before FinalizeDelete */\n        unsigned char *snapshot_mid = (unsigned char *)malloc(sizeof(token));\n        if (snapshot_mid != NULL)\n        {\n            memcpy(snapshot_mid, &token, sizeof(token));\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Token address=%p size=%zu bytes MID=\", (void *)&token, (size_t)sizeof(token));\n            if (snapshot_mid != NULL)\n            {\n                for (size_t i = 0; i < sizeof(token); ++i) fprintf(log, \"%02X\", snapshot_mid[i]);\n            }\n            else\n            {\n                fprintf(log, \"<no snapshot>\");\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n\n        /* Complete the operation via the common routine */\n        /* Probe: log that we are about to call FinalizeDelete and that we are passing a non-const pointer */\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_ObjectIdFinalizeDelete(return_code=%d, token_ptr=%p) -- token passed as non-const pointer\\n\", (int)return_code, (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeDelete returned: %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        /* Capture token after FinalizeDelete */\n        unsigned char *snapshot_after = (unsigned char *)malloc(sizeof(token));\n        if (snapshot_after != NULL)\n        {\n            memcpy(snapshot_after, &token, sizeof(token));\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Token address=%p size=%zu bytes AFTER=\", (void *)&token, (size_t)sizeof(token));\n            if (snapshot_after != NULL)\n            {\n                for (size_t i = 0; i < sizeof(token); ++i) fprintf(log, \"%02X\", snapshot_after[i]);\n            }\n            else\n            {\n                fprintf(log, \"<no snapshot>\");\n            }\n            fprintf(log, \"\\n\");\n\n            /* Compare snapshots if available to capture whether FinalizeDelete modified token */\n            if (snapshot_before != NULL && snapshot_after != NULL)\n            {\n                int modified = (memcmp(snapshot_before, snapshot_after, sizeof(token)) != 0);\n                fprintf(log, \"Token modified by operations: %s\\n\", modified ? \"YES\" : \"NO\");\n            }\n            else\n            {\n                fprintf(log, \"Token modification comparison: <insufficient data>\\n\");\n            }\n\n            fflush(log);\n        }\n\n        /* Free snapshots */\n        if (snapshot_before != NULL) free(snapshot_before);\n        if (snapshot_mid != NULL) free(snapshot_mid);\n        if (snapshot_after != NULL) free(snapshot_after);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_close exiting with return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}