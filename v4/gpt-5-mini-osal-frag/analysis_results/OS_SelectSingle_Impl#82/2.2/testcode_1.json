{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment os_proto = 0; is executed unconditionally but has no effect on program behaviour: in all paths that reach the later use (socket(os_domain, os_type, os_proto)) os_proto is overwritten in the preceding switch (OS_SocketType_DATAGRAM or OS_SocketType_STREAM). The default branch returns before socket() is called, so the initial zero value is never observed. Therefore removing the assignment would not change behaviour \u2014 it is dead code (violates Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/428.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectSingle_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectSingle_Impl with it.\n  - Your function must have the exact same signature as OS_SelectSingle_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectSingle_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectSingle_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open log file for append. Try primary path, fallback to /tmp/428.txt, and also tolerate failure. */\n    FILE *log = fopen(\"/tmp/logs/428.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/428.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_SelectSingle_Impl entered: token=%p, SelectFlags=%p, *SelectFlags=%lu, msecs=%d\\n\",\n                (const void *)token,\n                (void *)SelectFlags,\n                (unsigned long)(SelectFlags ? *SelectFlags : 0UL),\n                (int)msecs);\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        /* Log impl pointer and some of its fields (accessing them as in original code)\n         * Note: this mirrors the original behavior (may dereference impl as original code does). */\n        fprintf(log, \"impl=%p, impl->selectable=%d, impl->fd=%d\\n\",\n                (void *)impl,\n                impl ? (int)impl->selectable : -1,\n                impl ? (int)impl->fd : -1);\n        fflush(log);\n    }\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        if (log)\n        {\n            fprintf(log, \"Not selectable -> return OS_ERR_OPERATION_NOT_SUPPORTED\\n\");\n            fclose(log);\n        }\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        if (log)\n        {\n            fprintf(log, \"FD out of range -> fd=%d >= FD_SETSIZE=%d -> return OS_ERR_OPERATION_NOT_SUPPORTED\\n\",\n                    impl->fd, FD_SETSIZE);\n            fclose(log);\n        }\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"SelectFlags non-zero (initial=%lu)\\n\", (unsigned long)*SelectFlags);\n            fflush(log);\n        }\n\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n            if (log) fprintf(log, \"FD_SET read fd=%d\\n\", impl->fd);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n            if (log) fprintf(log, \"FD_SET write fd=%d\\n\", impl->fd);\n        }\n\n        if (log) fflush(log);\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (log) fprintf(log, \"OS_DoSelect returned %d\\n\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                if (log) fprintf(log, \"FD not set in rd_set: clearing OS_STREAM_STATE_READABLE\\n\");\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            else\n            {\n                if (log) fprintf(log, \"FD set in rd_set: OS_STREAM_STATE_READABLE remains\\n\");\n            }\n\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                if (log) fprintf(log, \"FD not set in wr_set: clearing OS_STREAM_STATE_WRITABLE\\n\");\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n            else\n            {\n                if (log) fprintf(log, \"FD set in wr_set: OS_STREAM_STATE_WRITABLE remains\\n\");\n            }\n\n            if (log) fprintf(log, \"SelectFlags after OS_DoSelect handling: %lu\\n\", (unsigned long)*SelectFlags);\n        }\n        else\n        {\n            if (log) fprintf(log, \"OS_DoSelect failed: setting *SelectFlags = 0\\n\");\n            *SelectFlags = 0;\n        }\n\n        if (log)\n        {\n            fflush(log);\n            fclose(log);\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        if (log)\n        {\n            fprintf(log, \"SelectFlags == 0: Nothing to check; return OS_SUCCESS\\n\");\n            fclose(log);\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n"
}