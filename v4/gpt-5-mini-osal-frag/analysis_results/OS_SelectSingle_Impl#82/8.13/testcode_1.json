{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the macro yields a non-const pointer where a const-qualified pointer could be used. In OS_SelectSingle_Impl the token parameter is const OS_object_token_t * and the call OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token) takes the address of a const object (&(tok)) inside the macro and returns &tbl[index] (type OS_impl_file_internal_record_t *). The code only reads the table entry (impl->selectable, impl->fd), so the pointer should be to a const-qualified record (const OS_impl_file_internal_record_t *). As written a non-const pointer is produced/used, effectively failing to prefer const qualification as required by MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/425.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectSingle_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectSingle_Impl with it.\n  - Your function must have the exact same signature as OS_SelectSingle_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectSingle_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectSingle_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectSingle_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open log file for appending; if it fails just continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SelectSingle_Impl token_ptr=%p SelectFlags_ptr=%p msecs=%d\\n\",\n                (void *)token, (void *)SelectFlags, (int)msecs);\n        /* Attempt to print token and initial flags if reasonably sized */\n        /* Note: token is typically an integer-like handle; cast to unsigned for logging */\n        fprintf(log, \"       token_val=(raw) %u SelectFlags_val=(raw) %u\\n\",\n                (unsigned int)(*token), (unsigned int)(*SelectFlags));\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"AFTER_TABLE_GET: impl_ptr=%p\\n\", (void *)impl);\n        if (impl != NULL)\n        {\n            fprintf(log, \"                impl->selectable=%d impl->fd=%d\\n\",\n                    (int)impl->selectable, (int)impl->fd);\n        }\n        else\n        {\n            fprintf(log, \"                impl is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        if (log)\n        {\n            fprintf(log, \"EXIT: not selectable -> OS_ERR_OPERATION_NOT_SUPPORTED\\n\");\n            fclose(log);\n        }\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        if (log)\n        {\n            fprintf(log, \"EXIT: fd (%d) >= FD_SETSIZE (%d) -> OS_ERR_OPERATION_NOT_SUPPORTED\\n\",\n                    (int)impl->fd, (int)FD_SETSIZE);\n            fclose(log);\n        }\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"DO_SELECT: initial SelectFlags=0x%08x\\n\", (unsigned int)(*SelectFlags));\n            fflush(log);\n        }\n\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n            if (log) fprintf(log, \"  FD_SET read fd=%d\\n\", (int)impl->fd);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n            if (log) fprintf(log, \"  FD_SET write fd=%d\\n\", (int)impl->fd);\n        }\n\n        if (log)\n        {\n            fprintf(log, \"  Calling OS_DoSelect(fd=%d, msecs=%d)\\n\", (int)impl->fd, (int)msecs);\n            fflush(log);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (log)\n        {\n            fprintf(log, \"  OS_DoSelect returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                if (log) fprintf(log, \"  FD_ISSET read -> NOT set, clearing OS_STREAM_STATE_READABLE\\n\");\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                if (log) fprintf(log, \"  FD_ISSET write -> NOT set, clearing OS_STREAM_STATE_WRITABLE\\n\");\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n\n            if (log)\n            {\n                fprintf(log, \"  After select, SelectFlags=0x%08x\\n\", (unsigned int)(*SelectFlags));\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log) fprintf(log, \"  OS_DoSelect failed, clearing SelectFlags\\n\");\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n        if (log) fprintf(log, \"NO_OP: SelectFlags==0 -> returning OS_SUCCESS\\n\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: return_code=%d final_SelectFlags=0x%08x\\n\", (int)return_code, (unsigned int)(*SelectFlags));\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}