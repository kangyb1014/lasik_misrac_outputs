{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can dereference an invalid pointer if token == NULL (or otherwise points to an object smaller than sizeof(OS_object_token_t)). For example, if a caller invokes OS_ObjectIdTransactionInit(NULL, ...) or if OS_ObjectIdGetById is called with a NULL token parameter, the memset will write sizeof(OS_object_token_t) bytes to an invalid address (e.g. address 0), causing an out-of-bounds access. The function does not validate that token is non-NULL before calling memset, so the use of memset can potentially violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait:\n```c\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemTimedWait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemTimedWait with it.\n  - Your function must have the exact same signature as OS_CountSemTimedWait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemTimedWait to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemTimedWait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemTimedWait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemTimedWait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: attempt to open log file and record entry and token address/size */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1303.txt\", \"a\");\n        if (fp != NULL)\n        {\n            /* Note: cast prints to generic pointer/size types to avoid assumptions about typedefs */\n            fprintf(fp, \"ENTER: OS_CountSemTimedWait sem_id=%lu msecs=%lu token_addr=%p token_size=%zu\\n\",\n                    (unsigned long)sem_id, (unsigned long)msecs, (void *)&token, (size_t)sizeof(token));\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log the result of OS_ObjectIdGetById and the token pointer info */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1303.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_ObjectIdGetById returned=%ld token_addr=%p token_size=%zu\\n\",\n                    (long)return_code, (void *)&token, (size_t)sizeof(token));\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1303.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"CALL: OS_CountSemTimedWait_Impl with token=%p msecs=%lu\\n\",\n                        (void *)&token, (unsigned long)msecs);\n                fflush(fp);\n                fclose(fp);\n            }\n        }\n\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n\n        /* Log the return from the implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1303.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"RETURN from OS_CountSemTimedWait_Impl: %ld\\n\", (long)return_code);\n                fflush(fp);\n                fclose(fp);\n            }\n        }\n    }\n    else\n    {\n        /* Log that we did not call the implementation due to error */\n        FILE *fp = fopen(\"/tmp/logs/1303.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"SKIP: OS_CountSemTimedWait_Impl not called because OS_ObjectIdGetById returned=%ld\\n\", (long)return_code);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}