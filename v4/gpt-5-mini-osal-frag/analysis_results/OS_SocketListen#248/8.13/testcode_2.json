{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketListen_Impl the local pointer 'OS_impl_file_internal_record_t *impl;' is only used to read impl->fd (passed to listen) and the pointed object is not modified in this function. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. 'const OS_impl_file_internal_record_t *impl;'). Declaring it non-const therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2755.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen:\n```c\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketListen_Impl(&token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketListen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketListen with it.\n  - Your function must have the exact same signature as OS_SocketListen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketListen to check logs.\n  - Your function MUST preserve the original logic of OS_SocketListen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketListen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketListen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Logging: open log file and record entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n        if (log == NULL)\n        {\n            /* Try to create the directory and retry (best-effort) */\n            (void)system(\"mkdir -p /tmp/logs\");\n            log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n        }\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SocketListen ENTRY: sock_id=%u\\n\", (unsigned)sock_id);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log the result of the id lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n        if (log == NULL)\n        {\n            (void)system(\"mkdir -p /tmp/logs\");\n            log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n        }\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SocketListen: OS_ObjectIdGetById returned %d for sock_id=%u\\n\", (int)return_code, (unsigned)sock_id);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and key state values */\n        {\n            FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            if (log == NULL)\n            {\n                (void)system(\"mkdir -p /tmp/logs\");\n                log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            }\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_SocketListen: stream=%p, socket_domain=%d, socket_type=%d, stream_state=0x%08x\\n\",\n                        (void *)stream,\n                        (int)stream->socket_domain,\n                        (int)stream->socket_type,\n                        (unsigned)stream->stream_state);\n                fclose(log);\n            }\n        }\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            /* Log the reason */\n            FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            if (log == NULL)\n            {\n                (void)system(\"mkdir -p /tmp/logs\");\n                log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            }\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_SocketListen: Not a stream socket - domain=%d type=%d -> return %d\\n\",\n                        (int)stream->socket_domain, (int)stream->socket_type, (int)return_code);\n                fclose(log);\n            }\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            /* Log the reason */\n            FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            if (log == NULL)\n            {\n                (void)system(\"mkdir -p /tmp/logs\");\n                log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            }\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_SocketListen: Not bound (stream_state=0x%08x) -> return %d\\n\",\n                        (unsigned)stream->stream_state, (int)return_code);\n                fclose(log);\n            }\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            /* Log the reason */\n            FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            if (log == NULL)\n            {\n                (void)system(\"mkdir -p /tmp/logs\");\n                log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            }\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_SocketListen: Already listening or connected (stream_state=0x%08x) -> return %d\\n\",\n                        (unsigned)stream->stream_state, (int)return_code);\n                fclose(log);\n            }\n        }\n        else\n        {\n            /* Log the impending call into the implementation function */\n            {\n                FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                if (log == NULL)\n                {\n                    (void)system(\"mkdir -p /tmp/logs\");\n                    log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                }\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_SocketListen: calling OS_SocketListen_Impl with token (about to listen)\\n\");\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_SocketListen_Impl(&token);\n\n            /* Log the result of the impl call */\n            {\n                FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                if (log == NULL)\n                {\n                    (void)system(\"mkdir -p /tmp/logs\");\n                    log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                }\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_SocketListen: OS_SocketListen_Impl returned %d\\n\", (int)return_code);\n                    fclose(log);\n                }\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n\n                /* Log that the stream state was updated */\n                FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                if (log == NULL)\n                {\n                    (void)system(\"mkdir -p /tmp/logs\");\n                    log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n                }\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_SocketListen: stream_state updated to 0x%08x\\n\", (unsigned)stream->stream_state);\n                    fclose(log);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log the release action */\n        {\n            FILE *log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            if (log == NULL)\n            {\n                (void)system(\"mkdir -p /tmp/logs\");\n                log = fopen(\"/tmp/logs/2755.txt\", \"a\");\n            }\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_SocketListen: token released for sock_id=%u, final return=%d\\n\", (unsigned)sock_id, (int)return_code);\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}