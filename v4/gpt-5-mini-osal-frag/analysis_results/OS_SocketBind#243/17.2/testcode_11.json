{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion occurs if OS_DEBUG is implemented in terms of OS_printf. In the path when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER, OS_printf calls OS_DEBUG(\"...\", String). If OS_DEBUG expands to or invokes OS_printf, this yields OS_printf -> OS_DEBUG -> OS_printf (indirect recursion), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3000.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketBind code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketBind with it.\n  - Your function must have the exact same signature as OS_SocketBind.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketBind to check logs.\n  - Your function MUST preserve the original logic of OS_SocketBind as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketBind will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketBind as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n    FILE *logf = fopen(\"/tmp/logs/3000.txt\", \"a\");\n\n    /* Minimal, non-intrusive logging: record entry, parameters and timestamps. */\n    if (logf != NULL)\n    {\n        time_t now = time(NULL);\n        (void)fprintf(logf, \"[%ld] ENTER OS_SocketBind: sock_id=%ld, Addr=%p\\n\", (long)now, (long)sock_id, (const void *)Addr);\n        (void)fflush(logf);\n    }\n\n    /* Preserve original logic: attempt to bind address first. */\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    if (logf != NULL)\n    {\n        time_t now = time(NULL);\n        (void)fprintf(logf, \"[%ld] OS_SocketBindAddress returned %ld\\n\", (long)now, (long)return_code);\n        (void)fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we are about to call OS_SocketListen so the sequence of calls is visible. */\n        if (logf != NULL)\n        {\n            time_t now = time(NULL);\n            (void)fprintf(logf, \"[%ld] Calling OS_SocketListen(sock_id=%ld)\\n\", (long)now, (long)sock_id);\n            (void)fflush(logf);\n        }\n\n        return_code = OS_SocketListen(sock_id);\n\n        if (logf != NULL)\n        {\n            time_t now = time(NULL);\n            (void)fprintf(logf, \"[%ld] OS_SocketListen returned %ld\\n\", (long)now, (long)return_code);\n            (void)fflush(logf);\n        }\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            if (logf != NULL)\n            {\n                time_t now = time(NULL);\n                (void)fprintf(logf, \"[%ld] OS_SocketListen indicated incorrect object type; mapping to OS_SUCCESS\\n\", (long)now);\n                (void)fflush(logf);\n            }\n\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    if (logf != NULL)\n    {\n        time_t now = time(NULL);\n        (void)fprintf(logf, \"[%ld] EXIT OS_SocketBind: returning %ld\\n\", (long)now, (long)return_code);\n        (void)fflush(logf);\n        (void)fclose(logf);\n    }\n\n    return return_code;\n}\n"
}