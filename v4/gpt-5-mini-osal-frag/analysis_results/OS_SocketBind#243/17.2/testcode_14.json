{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if UT_ExecuteBasicHandler is passed as the DefaultHandler (and no handler is already registered), the function registers that handler via UT_SetHandlerFunction and then calls UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL). If UT_DefaultStubImpl invokes the registered final handler, this will call UT_ExecuteBasicHandler again (UT_ExecuteBasicHandler -> UT_DefaultStubImpl -> final handler == UT_ExecuteBasicHandler), producing indirect recursion and thus violating Rule 17.2. If DefaultHandler is a different function, no recursion occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3000.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketBind code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketBind with it.\n  - Your function must have the exact same signature as OS_SocketBind.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketBind to check logs.\n  - Your function MUST preserve the original logic of OS_SocketBind as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketBind will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketBind as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/3000.txt\", \"a\");\n\n    if (log)\n    {\n        /* Log entry and parameter state. Cast sock_id to long long to get a printable value\n         * for typical integer typedefs. Addr is printed as a pointer and whether it's NULL. */\n        fprintf(log, \"OS_SocketBind ENTRY: sock_id=%lld Addr=%p\\n\", (long long)sock_id, (const void *)Addr);\n        fflush(log);\n    }\n\n    /* Preserve original logic: call OS_SocketBindAddress first. */\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    if (log)\n    {\n        fprintf(log, \"OS_SocketBind: OS_SocketBindAddress returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_SocketBind: return_code == OS_SUCCESS -> calling OS_SocketListen(sock_id=%lld)\\n\", (long long)sock_id);\n            fflush(log);\n        }\n\n        /* Call listen as original implementation. */\n        return_code = OS_SocketListen(sock_id);\n\n        if (log)\n        {\n            fprintf(log, \"OS_SocketBind: OS_SocketListen returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* Original behavior: map this specific error to success for backward compatibility. */\n            if (log)\n            {\n                fprintf(log, \"OS_SocketBind: OS_ERR_INCORRECT_OBJ_TYPE encountered -> mapping to OS_SUCCESS (backward compatibility)\\n\");\n                fflush(log);\n            }\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_SocketBind EXIT: final return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}