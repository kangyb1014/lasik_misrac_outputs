{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct OS_object_iter_t contains pointer members that are not const-qualified even though they are used only for read access. For example, iter->base is set to &OS_common_table[...] in OS_ObjectIdIteratorInit and is used by the iterator to read table entries; it should be declared as const OS_common_record_t *base to prevent accidental modification. Similarly, iter->arg is a context pointer passed to handlers that are expected to only read it; if the argument is not modified by the handlers it should be declared const void *arg. Declaring these pointers const whenever they are only used for reading would satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorProcessEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1525.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorProcessEntry:\n```c\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n    OS_Lock_Global(&iter->token);\n\n    return status;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdIteratorProcessEntry code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdIteratorProcessEntry with it.\n  - Your function must have the exact same signature as OS_ObjectIdIteratorProcessEntry.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdIteratorProcessEntry to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdIteratorProcessEntry will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n    osal_id_t objid;\n\n    /* Open log file for append. Best-effort logging; do not abort on failure. */\n    FILE *log = fopen(\"/tmp/logs/1525.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_ObjectIdIteratorProcessEntry: iter=%p, token=%p, arg=%p\\n\",\n                (void *)iter, (void *)&iter->token, (void *)iter->arg);\n        fflush(log);\n    }\n\n    /* This needs to temporarily unlock the global, call the handler function, then re-lock. */\n    OS_Unlock_Global(&iter->token);\n\n    /* Capture the object id derived from the token for logging and for the handler call. */\n    objid = OS_ObjectIdFromToken(&iter->token);\n\n    if (log)\n    {\n        /* Print the object id as an unsigned long for portability across likely integer typedefs. */\n        fprintf(log, \"Calling handler func with objid=%lu, arg=%p\\n\",\n                (unsigned long)(uintptr_t)objid, (void *)iter->arg);\n        fflush(log);\n    }\n\n    /* Call the user-provided handler with the object id and the iterator argument. */\n    status = func(objid, iter->arg);\n\n    /* Re-lock the global after the handler returns. */\n    OS_Lock_Global(&iter->token);\n\n    if (log)\n    {\n        fprintf(log, \"Handler returned status=%ld\\n\", (long)status);\n        fprintf(log, \"EXIT OS_ObjectIdIteratorProcessEntry\\n\");\n        fclose(log);\n    }\n\n    return status;\n}\n"
}