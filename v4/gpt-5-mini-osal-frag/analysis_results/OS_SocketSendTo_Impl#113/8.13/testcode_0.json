{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a modifiable pointer (OS_impl_file_internal_record_t *impl) but within OS_SocketSendTo_Impl it is only used for read access (impl->fd) and is initialized from a global table via OS_OBJECT_TABLE_GET. The pointer could and should be declared as pointing to const (const OS_impl_file_internal_record_t *impl) to reflect that the function does not modify the pointed-to object. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1145.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketSendTo_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketSendTo_Impl with it.\n  - Your function must have the exact same signature as OS_SocketSendTo_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketSendTo_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketSendTo_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open log file for tracing control flow and state to reproduce the rule-8.13 scenario */\n    FILE *log = fopen(\"/tmp/logs/1145.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SocketSendTo_Impl token=%p buffer=%p buflen=%zu RemoteAddr=%p\\n\",\n                (const void *)token, buffer, buflen, (const void *)RemoteAddr);\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        /* Log the pointer returned from the global table. Do not dereference impl here if NULL. */\n        fprintf(log, \"OBJ_TABLE_GET -> impl=%p\\n\", (const void *)impl);\n        fflush(log);\n    }\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    if (log)\n    {\n        fprintf(log, \"ADDR: sa=%p sa_family=%d\\n\", (const void *)sa, (int)sa->sa_family);\n        fflush(log);\n    }\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"ADDRLEN computed=%u RemoteAddr->ActualLength=%u\\n\",\n                (unsigned)addrlen, (unsigned)RemoteAddr->ActualLength);\n        fflush(log);\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        if (log)\n        {\n            fprintf(log, \"MISMATCH: returning OS_ERR_BAD_ADDRESS\\n\");\n            fclose(log);\n        }\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Log the intended send parameters. For fd, only log if impl is non-NULL to avoid early deref. */\n    if (log)\n    {\n        if (impl)\n        {\n            /* We log the fd value for evidence that impl is only read. Do not modify impl. */\n            fprintf(log, \"BEFORE sendto: impl=%p impl->fd=%d buffer=%p buflen=%zu flags=MSG_DONTWAIT sa=%p addrlen=%u\\n\",\n                    (const void *)impl, impl->fd, buffer, buflen, (const void *)sa, (unsigned)addrlen);\n        }\n        else\n        {\n            fprintf(log, \"BEFORE sendto: impl=NULL buffer=%p buflen=%zu flags=MSG_DONTWAIT sa=%p addrlen=%u\\n\",\n                    buffer, buflen, (const void *)sa, (unsigned)addrlen);\n        }\n        fflush(log);\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"sendto FAILED: errno=%d errstr=\\\"%s\\\"\\n\", errno, strerror(errno));\n            fclose(log);\n        }\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"sendto OK: bytes_sent=%d\\n\", os_result);\n        fclose(log);\n    }\n\n    return os_result;\n}\n"
}