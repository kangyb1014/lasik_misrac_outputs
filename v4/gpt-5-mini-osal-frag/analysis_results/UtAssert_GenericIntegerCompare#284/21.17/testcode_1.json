{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) may access beyond the bounds of ActualText. If ActualText is NULL or points to a character array that is not NUL-terminated within the first sizeof(UTASSERT_PREFIX)-1 bytes (9 bytes), strncmp will read past the object\u2019s bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1013.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_GenericIntegerCompare with it.\n  - Your function must have the exact same signature as UtAssert_GenericIntegerCompare.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_GenericIntegerCompare to check logs.\n  - Your function MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_GenericIntegerCompare will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* Log file handle - try to log evidence for potential out-of-bounds access when using strncmp */\n    FILE *log = fopen(\"/tmp/logs/1013.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"Enter UtAssert_GenericIntegerCompare\\n\");\n        fprintf(log, \"Parameters: IsUnsigned=%d ActualValue=%ld RefValue=%ld CompareType=%d File=%p Line=%u\\n\",\n                (int)IsUnsigned, (long)ActualValue, (long)RefValue, (int)CompareType, (const void *)File, (unsigned)Line);\n        fprintf(log, \"Typename ptr=%p ActualText ptr=%p RefText ptr=%p\\n\", (const void *)Typename, (const void *)ActualText, (const void *)RefText);\n        fprintf(log, \"UTASSERT_PREFIX length (excluding NUL)=%zu\\n\", (size_t)(sizeof(UTASSERT_PREFIX) - 1));\n        fflush(log);\n    }\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Computed TagStr=\\\"%s\\\" TagLen=%d\\n\", TagStr, TagLen);\n            fflush(log);\n        }\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n            if (log != NULL)\n            {\n                fprintf(log, \"Typename contains '*', setting RadixType to HEX\\n\");\n                fflush(log);\n            }\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n        if (log != NULL)\n        {\n            fprintf(log, \"No Typename provided or empty\\n\");\n            fflush(log);\n        }\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (log != NULL)\n    {\n        fprintf(log, \"About to check ActualText prefix with strncmp. ActualText ptr=%p\\n\", (const void *)ActualText);\n        fflush(log);\n    }\n\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"ActualText matched prefix. Original ptr=%p\\n\", (const void *)ActualText);\n            fflush(log);\n        }\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n        if (log != NULL)\n        {\n            fprintf(log, \"ActualText advanced to ptr=%p\\n\", (const void *)ActualText);\n            fflush(log);\n        }\n    }\n    if (log != NULL)\n    {\n        fprintf(log, \"About to check RefText prefix with strncmp. RefText ptr=%p\\n\", (const void *)RefText);\n        fflush(log);\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"RefText matched prefix. Original ptr=%p\\n\", (const void *)RefText);\n            fflush(log);\n        }\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n        if (log != NULL)\n        {\n            fprintf(log, \"RefText advanced to ptr=%p\\n\", (const void *)RefText);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"About to call UtAssertEx with TagStr=\\\"%s\\\" ActualText ptr=%p RefText ptr=%p\\n\", TagStr, (const void *)ActualText, (const void *)RefText);\n        fflush(log);\n        fclose(log);\n        log = NULL;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n"
}