{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * to void * via (void *)name, discarding the const qualifier. Passing a const-qualified pointer as a non-const void * violates Rule 8.13 (the callee should accept a const-qualified pointer if it does not modify the data). Recommended fix: change the OS_ObjectIdGetBySearch parameter to const void * (or remove the cast and use a matching const-qualified prototype) or otherwise avoid discarding constness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/845.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_chkfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_chkfs with it.\n  - Your function must have the exact same signature as OS_chkfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_chkfs to check logs.\n  - Your function MUST preserve the original logic of OS_chkfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_chkfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_chkfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Minimal entry probe to prove the function was reached. This is done\n     * before the parameter check so that even if OS_CHECK_PATHNAME returns\n     * early the log will contain an entry. */\n    {\n        FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_chkfs ENTER: name=%p\", (const void *)name);\n            if (name)\n            {\n                /* Log a safe prefix of the string (avoid unbounded prints) */\n                fprintf(log, \", name_str=\\\"%.64s\\\"\", name);\n            }\n            fprintf(log, \", repair=%d\\n\", repair ? 1 : 0);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Log just before the call that casts away const to reproduce the reported violation */\n    {\n        FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_chkfs: About to call OS_ObjectIdGetBySearch(..., (void *)name, ...) - discarding const qualifier\\n\");\n            fprintf(log, \"OS_chkfs: name pointer=%p\\n\", (const void *)name);\n            fclose(log);\n        }\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        {\n            FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_chkfs: calling OS_FileSysCheckVolume_Impl with token at %p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_FileSysCheckVolume_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdRelease called for token\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/845.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_chkfs EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}