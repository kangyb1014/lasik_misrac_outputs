{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the incoming const void * (ValuePtr) to (void *const *) and then stores the dereferenced value into Buf->Ptr (type void *). This discards the const qualification and results in a non-const pointer being stored even though the source was const-qualified. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; the correct approach would be to preserve the const qualification (for example store into Buf->IndirectPtr or change to use const void * / (const void *const *) when dereferencing), instead of casting away const and assigning to void *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_StoreRetval code that contains useful probe functions that print useful logs to a file \"/tmp/logs/655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_StoreRetval code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_StoreRetval with it.\n  - Your function must have the exact same signature as UT_StoreRetval.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_StoreRetval to check logs.\n  - Your function MUST preserve the original logic of UT_StoreRetval as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_StoreRetval will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_StoreRetval as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Logging probe: capture entry and key parameters for reproduction of const-discard scenario */\n    FILE *log = fopen(\"/tmp/logs/655.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_StoreRetval ENTRY: Buf=%p, ValuePtr=%p, ValueSize=%zu, ValueGenre=%d\\n\",\n                (void *)Buf, ValuePtr, ValueSize, (int)ValueGenre);\n    }\n\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n        {\n            int8 tmp = *((int8 const *)ValuePtr);\n            if (log) fprintf(log, \"case: INTEGER sizeof(int8) - tmp=%lld\\n\", (long long)tmp);\n            Buf->Integer = tmp;\n        }\n        break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n        {\n            int16 tmp = *((int16 const *)ValuePtr);\n            if (log) fprintf(log, \"case: INTEGER sizeof(int16) - tmp=%lld\\n\", (long long)tmp);\n            Buf->Integer = tmp;\n        }\n        break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n        {\n            int32 tmp = *((int32 const *)ValuePtr);\n            if (log) fprintf(log, \"case: INTEGER sizeof(int32) - tmp=%ld\\n\", (long)tmp);\n            Buf->Integer = tmp;\n        }\n        break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n        {\n            int64 tmp = *((int64 const *)ValuePtr);\n            if (log) fprintf(log, \"case: INTEGER sizeof(int64) - tmp=%lld\\n\", (long long)tmp);\n            Buf->Integer = tmp;\n        }\n        break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n        {\n            float tmp = *((float const *)ValuePtr);\n            if (log) fprintf(log, \"case: FLOAT sizeof(float) - tmp=%f\\n\", (double)tmp);\n            Buf->FloatingPt = tmp;\n        }\n        break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n        {\n            double tmp = *((double const *)ValuePtr);\n            if (log) fprintf(log, \"case: FLOAT sizeof(double) - tmp=%f\\n\", tmp);\n            Buf->FloatingPt = tmp;\n        }\n        break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n        {\n            /* Log previous pointer value stored in buffer */\n            if (log) fprintf(log, \"case: POINTER - Buf=%p, old Buf->Ptr=%p\\n\", (void *)Buf, Buf ? Buf->Ptr : (void *)0);\n\n            /* Log raw bytes of the incoming pointer value without removing const */\n            if (log)\n            {\n                if (ValuePtr == NULL)\n                {\n                    fprintf(log, \"  ValuePtr is NULL\\n\");\n                }\n                else\n                {\n                    const unsigned char *bytes = (const unsigned char *)ValuePtr;\n                    fprintf(log, \"  Raw pointer bytes:\");\n                    for (size_t i = 0; i < sizeof(void *); ++i)\n                    {\n                        fprintf(log, \" %02x\", (unsigned)bytes[i]);\n                    }\n                    fprintf(log, \"\\n\");\n                }\n            }\n\n            /* Interpret the incoming pointer preserving const qualification for logging evidence */\n            const void *src_const_ptr = NULL;\n            if (ValuePtr != NULL)\n            {\n                /* Safely read as a pointer-to-const-pointer for log purposes */\n                src_const_ptr = *((const void *const *)ValuePtr);\n            }\n            if (log) fprintf(log, \"  Interpreted (const void *) value at source = %p\\n\", src_const_ptr);\n\n            /* Original assignment (this is the line reported by the other agent as discarding const): */\n            Buf->Ptr = *((void *const *)ValuePtr);\n\n            if (log) fprintf(log, \"  After assignment Buf->Ptr=%p\\n\", Buf->Ptr);\n        }\n        break;\n\n        default:\n            if (log) fprintf(log, \"default: ValueSize not valid - ValueSize=%zu\\n\", ValueSize);\n            if (log) fclose(log);\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    if (log) fclose(log);\n\n    return true;\n}\n"
}