{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ConsoleWrite accepts a const char *Str and forwards it to OS_Console_CopyOut/other console-output code which likely uses string.h routines (e.g. strlen/strcpy) to determine or copy the string. If a caller passes a pointer that is not NUL-terminated (or otherwise points near the end of an object), those string functions can read beyond the bounds of the referenced object. Although the shown caller OS_printf ensures msg_buffer is NUL-terminated, other callers could pass non-terminated buffers and trigger out-of-bounds accesses, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_printf code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_printf with it.\n  - Your function must have the exact same signature as OS_printf.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_printf to check logs.\n  - Your function MUST preserve the original logic of OS_printf as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_printf will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_printf as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    /* Minimal entry log so tests show the function was reached.  */\n    {\n        FILE *log = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_printf: entered. String_ptr=%p\\n\", (const void *)String);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Log the unexpected call-before-init case */\n        FILE *log = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_printf: called before OS_API_Init. GlobalState=0x%08lx, String_ptr=%p\\n\",\n                    (unsigned long)OS_SharedGlobalVars.GlobalState, (const void *)String);\n            fprintf(log, \"OS_printf: invoking OS_DEBUG fallback with format pointer %p\\n\", (const void *)String);\n            fflush(log);\n            fclose(log);\n        }\n\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        /* Ensure NUL-termination (this is important: msg_buffer is owned here) */\n        msg_buffer[actualsz] = 0;\n\n        /* Detailed logging: record the formatted message and call site info.\n         * We deliberately avoid inspecting the contents of external pointers\n         * beyond what this function produces (msg_buffer) to prevent\n         * creating additional out-of-bounds reads in the logger itself.\n         */\n        {\n            FILE *log = fopen(\"/tmp/logs/3023.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_printf: about to write to console id=%d. msg_buffer_ptr=%p length=%d\\n\",\n                        (int)OS_SharedGlobalVars.PrintfConsoleId, (void *)msg_buffer, actualsz);\n\n                /* Log whether the formatted buffer is NUL-terminated at the recorded length */\n                fprintf(log, \"OS_printf: msg_buffer[actualsz]==%d (expected 0)\\n\", (int)msg_buffer[actualsz]);\n\n                /* Log the formatted content (this buffer is controlled and NUL-terminated) */\n                fprintf(log, \"OS_printf: msg_buffer contents: '%s'\\n\", msg_buffer);\n\n                fprintf(log, \"OS_printf: invoking OS_ConsoleWrite(%d, msg_buffer)\\n\",\n                        (int)OS_SharedGlobalVars.PrintfConsoleId);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Pre-call log is flushed above; call the console write which may be the place\n         * where other callers (not OS_printf) produce out-of-bounds reads if they pass\n         * non-NUL-terminated pointers. Our log helps correlate the exact buffer and\n         * length that originated from OS_printf. */\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n\n        /* Post-call log: best-effort (if console write didn't crash) */\n        {\n            FILE *log = fopen(\"/tmp/logs/3023.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_printf: returned from OS_ConsoleWrite for console id=%d\\n\",\n                        (int)OS_SharedGlobalVars.PrintfConsoleId);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n}\n"
}