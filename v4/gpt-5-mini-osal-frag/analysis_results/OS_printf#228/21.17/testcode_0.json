{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_Console_CopyOut() uses standard <string.h> routines (for example strlen/strcpy/strncpy/memcpy) to determine or copy the device_name, and console->device_name is not guaranteed to be NUL-terminated (e.g. it was filled with strncpy or another routine that can leave a full buffer without a terminator), then calls such as strlen or strcpy inside OS_Console_CopyOut() can read beyond the bounds of the device_name array. In that situation the fragment \"return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\" would result in out\u2011of\u2011bounds accesses and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_printf code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_printf with it.\n  - Your function must have the exact same signature as OS_printf.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_printf to check logs.\n  - Your function MUST preserve the original logic of OS_printf as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_printf will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_printf as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n    FILE   *fp = NULL;\n\n    /* Probe: log entry and key global state that may be relevant to reproducing\n     * the reported Rule 21.17 scenario. This intentionally logs the String\n     * pointer value but does not dereference it here to avoid creating new\n     * out-of-bounds reads. The formatted output (msg_buffer) is logged after\n     * formatting so that any effects of vsnprintf (including any over-read\n     * triggered by a non-NUL-terminated input) are captured.\n     */\n    fp = fopen(\"/tmp/logs/3023.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"OS_printf ENTER: String=%p\\n\", (const void *)String);\n        /* global state values logged for diagnostic correlation */\n        fprintf(fp, \"OS_printf GLOBAL: GlobalState=%lu, PrintfEnabled=%d, PrintfConsoleId=%d\\n\",\n                (unsigned long)OS_SharedGlobalVars.GlobalState,\n                (int)OS_SharedGlobalVars.PrintfEnabled,\n                (int)OS_SharedGlobalVars.PrintfConsoleId);\n        fclose(fp);\n        fp = NULL;\n    }\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Log the fact that this path was taken */\n        fp = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_printf: Called when OS not initialized. Will call OS_DEBUG with format String=%p\\n\",\n                    (const void *)String);\n            fclose(fp);\n            fp = NULL;\n        }\n\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /* Log the resulting formatted message (limited to actualsz) and size */\n        fp = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_printf FORMATTED: actualsz=%d, msg_buffer=(%.*s)\\n\",\n                    actualsz,\n                    actualsz > 0 ? actualsz : 0,\n                    msg_buffer);\n            fprintf(fp, \"OS_printf: About to call OS_ConsoleWrite on ConsoleId=%d\\n\",\n                    (int)OS_SharedGlobalVars.PrintfConsoleId);\n            fclose(fp);\n            fp = NULL;\n        }\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n\n        /* Final probe indicating exit from enabled-path */\n        fp = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_printf EXIT: Completed write to console %d\\n\",\n                    (int)OS_SharedGlobalVars.PrintfConsoleId);\n            fclose(fp);\n            fp = NULL;\n        }\n    }\n    else\n    {\n        /* Printf disabled path -- log occurrence */\n        fp = fopen(\"/tmp/logs/3023.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"OS_printf: PrintfDisabled, message dropped. String=%p\\n\", (const void *)String);\n            fclose(fp);\n            fp = NULL;\n        }\n    }\n}\n"
}