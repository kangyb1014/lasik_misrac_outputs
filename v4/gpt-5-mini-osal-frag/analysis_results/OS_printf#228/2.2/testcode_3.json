{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation when OS_DEBUG is defined as an empty macro: OS_DEBUG(\"BUG: ...\", String) expands to nothing, leaving the if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER) { /* empty */ } branch effectively empty. The condition is evaluated and the branch executed but contains no effectual operation; removing the entire if-branch (or the evaluated debug call) would not change program behaviour (aside from timing), so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3028.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_printf code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_printf with it.\n  - Your function must have the exact same signature as OS_printf.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_printf to check logs.\n  - Your function MUST preserve the original logic of OS_printf as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_printf will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_printf as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n    FILE   *logf = NULL;\n\n    /* Keep the original parameter check */\n    BUGCHECK_VOID(String != NULL)\n\n    /* Try to append a lightweight trace to a log file so testers can observe\n     * the control flow and state for the MISRA Rule 2.2 scenario. This is\n     * non-intrusive and only used for diagnostics; it does not alter the\n     * original OS_printf behaviour aside from producing a log entry. */\n    logf = fopen(\"/tmp/logs/3028.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* Record entry and key state */\n        fprintf(logf, \"OS_printf ENTER: String=%p\\n\", (void *)String);\n        fprintf(logf, \"  GlobalState=0x%08X, PrintfEnabled=%d, PrintfConsoleId=%d\\n\",\n                (unsigned int)OS_SharedGlobalVars.GlobalState,\n                (int)OS_SharedGlobalVars.PrintfEnabled,\n                (int)OS_SharedGlobalVars.PrintfConsoleId);\n        fflush(logf);\n    }\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Original behaviour: attempt to call OS_DEBUG to report misuse. */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n\n        /* Diagnostic probe: record that the 'not initialized' branch was taken.\n         * This ensures a visible side-effect (a log entry) even if OS_DEBUG is\n         * compiled out to an empty macro. This is necessary to reproduce the\n         * reported dead-code scenario where the branch becomes effect-free. */\n        if (logf != NULL)\n        {\n            /* Limit the direct string output length to avoid huge log lines */\n            size_t max_show = 256;\n            char showbuf[257];\n\n            if (String != NULL)\n            {\n                /* Copy up to max_show characters for logging (ensure NUL-termination) */\n                size_t i;\n                for (i = 0; i < max_show && String[i] != '\\0'; ++i)\n                    showbuf[i] = String[i];\n                showbuf[i] = '\\0';\n\n                fprintf(logf, \"  Branch: OS not initialized taken. Logged message preview=\\\"%s\\\"\\n\", showbuf);\n            }\n            else\n            {\n                fprintf(logf, \"  Branch: OS not initialized taken. Message pointer is NULL\\n\");\n            }\n            fflush(logf);\n        }\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Log entering the formatting/console-write path */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  Branch: PrintfEnabled taken. Formatting message...\\n\");\n            fflush(logf);\n        }\n\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  vsnprintf failed (actualsz=%d).\\n\", actualsz);\n                fflush(logf);\n            }\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  Message truncated (actualsz=%d, buffer=%d).\\n\", actualsz, OS_BUFFER_SIZE);\n                fflush(logf);\n            }\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  Final message (len=%d): \\\"%s\\\"\\n\", actualsz, msg_buffer);\n            fprintf(logf, \"  ConsoleId=%d -> calling OS_ConsoleWrite()\\n\", (int)OS_SharedGlobalVars.PrintfConsoleId);\n            fflush(logf);\n        }\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_printf EXIT\\n\\n\");\n        fclose(logf);\n    }\n}\n"
}