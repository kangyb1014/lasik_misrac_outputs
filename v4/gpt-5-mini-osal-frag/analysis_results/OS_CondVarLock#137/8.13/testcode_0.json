{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a local OS_object_token_t variable (&token) to OS_CondVarLock_Impl which (by its usage here) is declared to take a pointer to a non-const OS_object_token_t. If OS_CondVarLock_Impl does not modify the token (i.e. it only reads/inspects it), then the pointer parameter should be const-qualified and the current non-const pointer usage violates MISRA C 2023 Rule 8.13. (If, however, OS_CondVarLock_Impl legitimately modifies the token, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarLock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1405.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock:\n```c\nint32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarLock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarLock code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarLock with it.\n  - Your function must have the exact same signature as OS_CondVarLock.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarLock to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarLock as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarLock will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarLock as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging: open log file (append) to record control flow and token state */\n    FILE *logf = fopen(\"/tmp/logs/1405.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* Log entry and incoming parameter */\n        fprintf(logf, \"OS_CondVarLock entered: var_id=%lu\\n\", (unsigned long) var_id);\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned: %ld\\n\", (long) return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture a byte-wise snapshot of the local token before calling the implementation.\n         * This allows detection of whether OS_CondVarLock_Impl modifies the token (evidence\n         * for the Rule 8.13 violation scenario).\n         */\n        size_t i;\n        unsigned char before[sizeof(token)];\n        unsigned char after[sizeof(token)];\n        unsigned char *p = (unsigned char *)&token;\n\n        for (i = 0u; i < sizeof(token); ++i)\n        {\n            before[i] = p[i];\n        }\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_CondVarLock_Impl with token address=%p (local stack)\\n\", (void *)&token);\n            fflush(logf);\n        }\n\n        /* Call the platform-specific implementation (original behavior preserved) */\n        return_code = OS_CondVarLock_Impl(&token);\n\n        /* Take snapshot after the call and compare */\n        for (i = 0u; i < sizeof(token); ++i)\n        {\n            after[i] = p[i];\n        }\n\n        if (logf != NULL)\n        {\n            int changed = 0;\n            fprintf(logf, \"OS_CondVarLock_Impl returned: %ld\\n\", (long) return_code);\n\n            for (i = 0u; i < sizeof(token); ++i)\n            {\n                if (before[i] != after[i])\n                {\n                    changed = 1;\n                    break;\n                }\n            }\n\n            if (changed)\n            {\n                fprintf(logf, \"Token WAS modified by OS_CondVarLock_Impl. Differing byte indexes:\");\n                for (i = 0u; i < sizeof(token); ++i)\n                {\n                    if (before[i] != after[i])\n                    {\n                        fprintf(logf, \" %zu\", i);\n                    }\n                }\n                fprintf(logf, \"\\n\");\n            }\n            else\n            {\n                fprintf(logf, \"Token was NOT modified by OS_CondVarLock_Impl.\\n\");\n            }\n\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CondVarLock skipped OS_CondVarLock_Impl due to error return_code=%ld\\n\", (long) return_code);\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n\n    return return_code;\n}\n"
}