{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nInside UtAssert_GenericIntegerCompare the parameter 'ActualText' (declared as const char *ActualText) is incremented via 'ActualText += sizeof(UTASSERT_PREFIX) - 1;'. This modifies the pointer parameter itself (not the object pointed to), which violates MISRA C 2023 Rule 17.8. (Note: the same pattern is also applied to 'RefText' elsewhere.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetOpText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/492.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetOpText:\n```c\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    return OpText;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_GetOpText code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_GetOpText with it.\n  - Your function must have the exact same signature as UtAssert_GetOpText.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_GetOpText to check logs.\n  - Your function MUST preserve the original logic of UtAssert_GetOpText as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_GetOpText will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_GetOpText as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    /* Local forward declarations for standard I/O functions so this function\n       remains self-contained even if the surrounding file does not include\n       <stdio.h>. A forward declaration of struct FILE is used to match\n       the actual FILE* type. */\n    struct FILE;\n    extern struct FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(struct FILE *stream, const char *format, ...);\n    extern int fclose(struct FILE *stream);\n\n    /* Log entry and the incoming CompareType value so callers and test harness\n       can observe control flow leading to the mapping. Logs are appended to\n       /tmp/logs/492.txt. */\n    {\n        struct FILE *logf = fopen(\"/tmp/logs/492.txt\", \"a\");\n        if (logf != (struct FILE *)0)\n        {\n            fprintf(logf, \"UtAssert_GetOpText ENTER: CompareType=%d\\n\", (int)CompareType);\n            fclose(logf);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    /* Log the selected mapping and pointer value to aid reproduction of the\n       broader scenario (e.g., callers that may modify pointer parameters).\n       The log includes the textual operator chosen and the address of the\n       string constant returned. */\n    {\n        struct FILE *logf = fopen(\"/tmp/logs/492.txt\", \"a\");\n        if (logf != (struct FILE *)0)\n        {\n            /* Print both the string and its pointer value so downstream\n               analysis can correlate returned values with observed behavior. */\n            fprintf(logf, \"UtAssert_GetOpText EXIT: OpText=\\\"%s\\\", OpText_ptr=%p\\n\",\n                    (OpText != (const char *)0) ? OpText : \"(null)\", (const void *)OpText);\n            fclose(logf);\n        }\n    }\n\n    return OpText;\n}\n"
}