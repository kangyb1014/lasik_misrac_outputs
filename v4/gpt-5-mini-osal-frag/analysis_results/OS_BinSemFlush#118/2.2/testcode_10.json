{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment token->obj_idx = OSAL_INDEX_C(-1); in OS_ObjectIdTransactionInit is redundant. In the call sequence used by OS_BinSemFlush, OS_ObjectIdGetById always calls OS_ObjectIdToArrayIndex immediately after TransactionInit, which (on success) overwrites token->obj_idx, and on failure the token->obj_idx value is never used (the transaction is canceled). Removing this assignment would not change program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/158.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemFlush code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemFlush with it.\n  - Your function must have the exact same signature as OS_BinSemFlush.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemFlush to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemFlush as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemFlush will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *fp = fopen(\"/tmp/logs/158.txt\", \"a\");\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER OS_BinSemFlush: sem_id=%llu\\n\", (unsigned long long)sem_id);\n        fflush(fp);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"OS_ObjectIdGetById returned: %ld\\n\", (long)return_code);\n        fflush(fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump the token contents to help trace the sequence of initialization/overwrites.\n         * Note: token is considered valid only on success. */\n        if (fp != NULL)\n        {\n            unsigned long nbytes = (unsigned long)sizeof(token);\n            unsigned long i;\n            unsigned char *p = (unsigned char *)&token;\n\n            fprintf(fp, \"Token dump (%lu bytes):\", nbytes);\n            for (i = 0; i < nbytes; ++i)\n            {\n                fprintf(fp, \" %02x\", (unsigned int)p[i]);\n            }\n            fprintf(fp, \"\\n\");\n            fflush(fp);\n        }\n\n        return_code = OS_BinSemFlush_Impl(&token);\n\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_BinSemFlush_Impl returned: %ld\\n\", (long)return_code);\n            fflush(fp);\n        }\n    }\n    else\n    {\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_BinSemFlush: skipping OS_BinSemFlush_Impl due to error\\n\");\n            fflush(fp);\n        }\n    }\n\n    if (fp != NULL)\n    {\n        fclose(fp);\n    }\n\n    return return_code;\n}\n"
}