{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OSAL is not initialized. If OS_DEBUG is implemented to call OS_printf (for example if OS_DEBUG is a macro or wrapper around OS_printf), this creates an indirect recursive call chain: OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2. A similar violation would occur if OS_ConsoleWrite (or any function called by OS_printf) is implemented to call OS_printf.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketRecvFrom code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketRecvFrom with it.\n  - Your function must have the exact same signature as OS_SocketRecvFrom.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketRecvFrom to check logs.\n  - Your function MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketRecvFrom will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n    FILE *logf = NULL;\n\n    /* Probe: log entry and input state to a dedicated file for post-run analysis */\n    logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* sock_id may be an integral type; cast to unsigned long for portability in formatting */\n        fprintf(logf, \"ENTRY: OS_SocketRecvFrom sock_id=%lu buffer=%p buflen=%zu RemoteAddr=%p timeout=%ld\\n\",\n                (unsigned long) sock_id, buffer, buflen, (void *) RemoteAddr, (long) timeout);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object lookup */\n    logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %ld for sock_id=%lu\\n\", (long)return_code, (unsigned long) sock_id);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and some visible state */\n        logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* socket_type and stream_state are used below, log them for tracing */\n            fprintf(logf, \"STREAM: stream=%p socket_type=%lu stream_state=0x%lx\\n\",\n                    (void *) stream,\n                    (unsigned long) stream->socket_type,\n                    (unsigned long) stream->stream_state);\n            fclose(logf);\n            logf = NULL;\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            /* Log incorrect object type branch */\n            logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: incorrect object type (expected DATAGRAM) for sock_id=%lu\\n\", (unsigned long) sock_id);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first - log this condition */\n            logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: socket not bound (stream_state=0x%lx) for sock_id=%lu\\n\",\n                        (unsigned long) stream->stream_state, (unsigned long) sock_id);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log that we are about to call the platform-specific implementation */\n            logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"CALL: OS_SocketRecvFrom_Impl for sock_id=%lu buffer=%p buflen=%zu timeout=%ld\\n\",\n                        (unsigned long) sock_id, buffer, buflen, (long) timeout);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log the result from the implementation */\n            logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"RETURN from Impl: return_code=%ld for sock_id=%lu\\n\", (long) return_code, (unsigned long) sock_id);\n                fclose(logf);\n                logf = NULL;\n            }\n        }\n\n        /* Always release the token and log that action */\n        OS_ObjectIdRelease(&token);\n\n        logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ACTION: OS_ObjectIdRelease called for sock_id=%lu\\n\", (unsigned long) sock_id);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n    else\n    {\n        /* Log that object lookup failed before any further processing */\n        logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ERROR: Object lookup failed with code=%ld for sock_id=%lu\\n\", (long) return_code, (unsigned long) sock_id);\n            fclose(logf);\n            logf = NULL;\n        }\n    }\n\n    /* Final return - also log final return code */\n    logf = fopen(\"/tmp/logs/3250.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_SocketRecvFrom returning %ld for sock_id=%lu\\n\", (long) return_code, (unsigned long) sock_id);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    return return_code;\n}\n"
}