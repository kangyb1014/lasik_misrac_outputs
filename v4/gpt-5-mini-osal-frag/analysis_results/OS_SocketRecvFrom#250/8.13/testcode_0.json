{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access (reading impl->selectable and impl->fd). Per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_impl_file_internal_record_t *impl) to reflect that the object is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketRecvFrom code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketRecvFrom with it.\n  - Your function must have the exact same signature as OS_SocketRecvFrom.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketRecvFrom to check logs.\n  - Your function MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketRecvFrom will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Minimal runtime logging to capture control flow/state for analysis. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER: OS_SocketRecvFrom(sock_id=%llu, buffer=%p, buflen=%zu, RemoteAddr=%p, timeout=%d)\\n\",\n                    (unsigned long long) sock_id, buffer, buflen, (void *) RemoteAddr, (int) timeout);\n            fclose(logf);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the stream state and type so downstream analyses can correlate read-only pointer usage */\n        {\n            FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"GOT_TOKEN: token_addr=%p, stream_ptr=%p\\n\", (void *)&token, (void *) stream);\n                /* stream->socket_type and stream->stream_state are used by original logic; log them. */\n                fprintf(logf, \"STREAM_STATE: socket_type=%u, stream_state=0x%X\\n\",\n                        (unsigned) stream->socket_type, (unsigned) stream->stream_state);\n                fclose(logf);\n            }\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: not datagram -> return_code=%d\\n\", (int) return_code);\n                fclose(logf);\n            }\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BRANCH: not bound -> return_code=%d\\n\", (int) return_code);\n                fclose(logf);\n            }\n        }\n        else\n        {\n            FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"CALL_IMPL: About to call OS_SocketRecvFrom_Impl(token_addr=%p, buffer=%p, buflen=%zu, RemoteAddr=%p, timeout=%d)\\n\",\n                        (void *)&token, buffer, buflen, (void *) RemoteAddr, (int) timeout);\n                fclose(logf);\n            }\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            FILE *logf2 = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf2 != NULL)\n            {\n                fprintf(logf2, \"RETURN_IMPL: return_code=%d\\n\", (int) return_code);\n                fclose(logf2);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"AFTER_RELEASE: final_return_code=%d\\n\", (int) return_code);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        FILE *logf = fopen(\"/tmp/logs/3255.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OBJID_GET_FAILED: sock_id=%llu, return_code=%d\\n\", (unsigned long long) sock_id, (int) return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}