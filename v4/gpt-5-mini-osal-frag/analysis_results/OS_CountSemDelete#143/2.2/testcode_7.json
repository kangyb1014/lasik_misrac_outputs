{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment token->obj_idx = OSAL_INDEX_C(-1); in OS_ObjectIdTransactionInit is redundant: the token is memset to zero on entry and, in the normal path, OS_ObjectIdToArrayIndex(&token->obj_idx) will overwrite obj_idx on success; on failure the token->obj_idx is not used by the subsequent error handling (OS_ObjectIdTransactionCancel) or callers. Therefore this write is executed but removing it would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2928.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemDelete with it.\n  - Your function must have the exact same signature as OS_CountSemDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemDelete to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Open log file for append so multiple runs accumulate evidence */\n    FILE *logf = fopen(\"/tmp/logs/2928.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER: OS_CountSemDelete(sem_id=%llu)\\n\", (unsigned long long)sem_id);\n    }\n\n    /* Call original entry routine (preserves original behaviour) */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"After OS_ObjectIdGetById: return_code=%lld\\n\", (long long)return_code);\n        /* Dump the raw token bytes to capture the state. This helps show whether obj_idx\n           is zero-initialized by the GetById routine (supporting the dead-code claim).\n           The raw binary is written so other tooling can examine exact contents. */\n        fprintf(logf, \"Token size=%zu bytes, raw dump follows:\\n\", sizeof(token));\n        if (sizeof(token) > 0)\n        {\n            fwrite(&token, 1, sizeof(token), logf);\n            fprintf(logf, \"\\n--- end token dump ---\\n\");\n        }\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"Path: OS_SUCCESS branch - calling OS_CountSemDelete_Impl\\n\");\n            fflush(logf);\n        }\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"After OS_CountSemDelete_Impl: return_code=%lld\\n\", (long long)return_code);\n            fprintf(logf, \"Calling OS_ObjectIdFinalizeDelete(return_code=%lld)\\n\", (long long)return_code);\n            fflush(logf);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (logf)\n        {\n            fprintf(logf, \"After OS_ObjectIdFinalizeDelete: return_code=%lld\\n\", (long long)return_code);\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT: OS_CountSemDelete returning %lld\\n\\n\", (long long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}