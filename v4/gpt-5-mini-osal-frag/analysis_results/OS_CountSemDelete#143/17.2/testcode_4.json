{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nUT_ExecuteBasicHandler can register a function pointer as the final handler and then immediately call UT_DefaultStubImpl which invokes that registered handler. If the caller passes UT_ExecuteBasicHandler itself as the DefaultHandler, the sequence UT_ExecuteBasicHandler -> UT_SetHandlerFunction/UT_DoSetHookFunction (register handler) -> UT_DefaultStubImpl (execute stub) -> invocation of the registered handler -> UT_ExecuteBasicHandler results in indirect recursion. Thus the rule is violated in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2920.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemDelete with it.\n  - Your function must have the exact same signature as OS_CountSemDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemDelete to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Open a simple append log to capture control flow/state for analysis. */\n    FILE *log = fopen(\"/tmp/logs/2920.txt\", \"a\");\n    if (log)\n    {\n        /* Log function entry and the provided semaphore id */\n        fprintf(log, \"ENTER OS_CountSemDelete: sem_id=%u\\n\", (unsigned)sem_id);\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log)\n    {\n        /* Log result of lookup and some token information (address and size) */\n        fprintf(log, \"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p, token_size=%zu\\n\",\n                (long)return_code, (void *)&token, sizeof(token));\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_CountSemDelete_Impl with token_addr=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        if (log)\n        {\n            fprintf(log, \"After OS_CountSemDelete_Impl: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        /* Complete the operation via the common routine */\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdFinalizeDelete with return_code=%ld, token_addr=%p\\n\",\n                    (long)return_code, (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdFinalizeDelete: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_CountSemDelete: final_return=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}