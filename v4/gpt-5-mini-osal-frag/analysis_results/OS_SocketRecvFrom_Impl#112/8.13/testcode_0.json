{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'impl' is only used for reading fields (impl->selectable, impl->fd) and is not modified in this function, so it could and should be declared as pointing to a const-qualified type (const OS_impl_file_internal_record_t *impl). Declaring it non-const therefore violates MISRA C 2023 Rule 8.13. Note: if other code (or the macro OS_OBJECT_TABLE_GET) requires a modifiable pointer or the object is intentionally mutated, then const would not be possible; based on the shown usage it can be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom_Impl:\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketRecvFrom_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketRecvFrom_Impl with it.\n  - Your function must have the exact same signature as OS_SocketRecvFrom_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketRecvFrom_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketRecvFrom_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open log file for tracing control flow and state for rule investigation */\n    FILE *log = fopen(\"/tmp/logs/1575.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_SocketRecvFrom_Impl: token_ptr=%p token_val=%llu buffer_ptr=%p buflen=%llu RemoteAddr_ptr=%p timeout=%d\\n\",\n                (void *)token, (unsigned long long)(token ? (unsigned long long)*token : 0ULL), (void *)buffer, (unsigned long long)buflen, (void *)RemoteAddr, (int)timeout);\n        fflush(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_OBJECT_TABLE_GET -> impl_ptr=%p impl->selectable=%d impl->fd=%d\\n\",\n                (void *)impl,\n                (impl != NULL) ? (int)impl->selectable : -1,\n                (impl != NULL) ? (int)impl->fd : -1);\n        fflush(log);\n    }\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n        if (log)\n        {\n            fprintf(log, \"RemoteAddr=NULL -> sa=NULL addrlen=0\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n        if (log)\n        {\n            fprintf(log, \"RemoteAddr present -> sa=%p addrlen(initial)=%lu\\n\", (void *)sa, (unsigned long)addrlen);\n            fflush(log);\n        }\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        if (log)\n        {\n            fprintf(log, \"impl->selectable true: calling OS_SelectSingle_Impl with timeout=%d\\n\", (int)timeout);\n            fflush(log);\n        }\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        if (log)\n        {\n            fprintf(log, \"OS_SelectSingle_Impl returned %d operation=0x%08x\\n\", (int)return_code, (unsigned int)operation);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n            if (log)\n            {\n                fprintf(log, \"impl->selectable false, timeout==0 -> waitflags=MSG_DONTWAIT\\n\");\n                fflush(log);\n            }\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n            if (log)\n            {\n                fprintf(log, \"impl->selectable false, timeout!=0 -> waitflags=0 (timeout not honored)\\n\");\n                fflush(log);\n            }\n        }\n        return_code = OS_SUCCESS;\n        if (log)\n        {\n            fprintf(log, \"set return_code=OS_SUCCESS operation=0x%08x waitflags=%d\\n\", (unsigned int)operation, (int)waitflags);\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"operation not readable (operation=0x%08x) -> return OS_ERROR_TIMEOUT\\n\", (unsigned int)operation);\n                fflush(log);\n            }\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"operation readable -> calling recvfrom(fd=%d, buflen=%llu, waitflags=%d)\\n\",\n                        (impl != NULL) ? (int)impl->fd : -1, (unsigned long long)buflen, (int)waitflags);\n                fflush(log);\n            }\n\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            if (os_result < 0)\n            {\n                int saved_errno = errno;\n                if (saved_errno == EAGAIN || saved_errno == EWOULDBLOCK)\n                {\n                    if (log)\n                    {\n                        fprintf(log, \"recvfrom returned <0 with errno=%d (EAGAIN/EWOULDBLOCK) -> OS_QUEUE_EMPTY\\n\", saved_errno);\n                        fflush(log);\n                    }\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    if (log)\n                    {\n                        fprintf(log, \"recvfrom returned <0 with errno=%d (%s) -> OS_ERROR\\n\", saved_errno, strerror(saved_errno));\n                        fflush(log);\n                    }\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(saved_errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                    if (log)\n                    {\n                        fprintf(log, \"recvfrom success -> os_result=%d addrlen=%lu RemoteAddr->ActualLength=%lu\\n\",\n                                (int)os_result, (unsigned long)addrlen, (unsigned long)RemoteAddr->ActualLength);\n                        fflush(log);\n                    }\n                }\n                else if (log)\n                {\n                    fprintf(log, \"recvfrom success -> os_result=%d addrlen=%lu (RemoteAddr was NULL)\\n\",\n                            (int)os_result, (unsigned long)addrlen);\n                    fflush(log);\n                }\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_SocketRecvFrom_Impl return_code=%d\\n\", (int)return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}