{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as empty (#define OS_DEBUG(__VA_ARGS__)). The source line OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno)); therefore expands to a null statement (no-op) in the compiled code. This executed no-op can be removed without changing program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom_Impl:\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketRecvFrom_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketRecvFrom_Impl with it.\n  - Your function must have the exact same signature as OS_SocketRecvFrom_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketRecvFrom_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketRecvFrom_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open a log file for probes. Use append so multiple calls accumulate. */\n    FILE *logf = fopen(\"/tmp/logs/1578.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER OS_SocketRecvFrom_Impl: token=%p, buffer=%p, buflen=%lu, RemoteAddr=%p, timeout=%d\\n\",\n                (const void *)token, buffer, (unsigned long)buflen, (const void *)RemoteAddr, (int)timeout);\n        fflush(logf);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n        if (logf) fprintf(logf, \"RemoteAddr == NULL -> sa=NULL, addrlen=0\\n\");\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n        if (logf) fprintf(logf, \"RemoteAddr != NULL -> sa=%p, initial addrlen=%lu\\n\", (const void *)sa, (unsigned long)addrlen);\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        if (logf) fprintf(logf, \"impl->selectable: calling OS_SelectSingle_Impl with timeout=%d\\n\", (int)timeout);\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        if (logf) fprintf(logf, \"OS_SelectSingle_Impl returned %d, operation=0x%08x\\n\", (int)return_code, (unsigned)operation);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n            if (logf) fprintf(logf, \"impl->selectable==false and timeout==0 -> MSG_DONTWAIT\\n\");\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n            if (logf) fprintf(logf, \"impl->selectable==false and timeout!=0 -> waitflags=0 (timeout not honored)\\n\");\n        }\n        return_code = OS_SUCCESS;\n        if (logf) fprintf(logf, \"set return_code=OS_SUCCESS, waitflags=%d\\n\", waitflags);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            if (logf) fprintf(logf, \"operation not readable (operation=0x%08x) -> timeout\\n\", (unsigned)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            if (logf) fprintf(logf, \"calling recvfrom(fd=%d, buflen=%lu, waitflags=%d)\\n\", impl->fd, (unsigned long)buflen, waitflags);\n\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            if (os_result < 0)\n            {\n                int saved_errno = errno; /* capture errno immediately */\n                if (saved_errno == EAGAIN || saved_errno == EWOULDBLOCK)\n                {\n                    if (logf) fprintf(logf, \"recvfrom returned <0 with EAGAIN/EWOULDBLOCK (errno=%d) -> OS_QUEUE_EMPTY\\n\", saved_errno);\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    /*\n                     * Original code used OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                     * That macro may be defined as empty in the build under test. To ensure the\n                     * failure path is observable in logs (and to reproduce the reported dead-code\n                     * scenario) emit an explicit log entry here. This preserves original behavior\n                     * (return_code becomes OS_ERROR) while providing evidence that this branch\n                     * was executed.\n                     */\n                    if (logf)\n                    {\n                        fprintf(logf, \"recvfrom error: errno=%d (%s) -> setting return_code=OS_ERROR\\n\",\n                                saved_errno, strerror(saved_errno));\n                    }\n\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                    if (logf) fprintf(logf, \"recvfrom succeeded: bytes=%d, addrlen=%lu -> RemoteAddr->ActualLength=%lu\\n\",\n                                      os_result, (unsigned long)addrlen, (unsigned long)RemoteAddr->ActualLength);\n                }\n                else\n                {\n                    if (logf) fprintf(logf, \"recvfrom succeeded: bytes=%d, addrlen=%lu, RemoteAddr==NULL\\n\",\n                                      os_result, (unsigned long)addrlen);\n                }\n            }\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT OS_SocketRecvFrom_Impl: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}