{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &RvcPtr->Data.Rvc.Buf to UT_LoadRetval. If UT_LoadRetval's prototype declares that parameter as a non-const pointer (e.g. UT_ValueBuf_t *buf), then the code violates MISRA C 2023 Rule 8.13 because the pointer could and should be to a const-qualified type (const UT_ValueBuf_t *), given that the call is providing a source buffer that is not intended to be modified. To fix, change the UT_LoadRetval parameter to accept a const-qualified pointer (e.g. const UT_ValueBuf_t *), or otherwise ensure the pointer is const where appropriate.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/445.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ExecuteVaHandler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ExecuteVaHandler with it.\n  - Your function must have the exact same signature as UT_ExecuteVaHandler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ExecuteVaHandler to check logs.\n  - Your function MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ExecuteVaHandler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Minimal logging to a file for reproduction/evidence. Preserve original behavior. */\n    FILE *logf = fopen(\"/tmp/logs/445.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* Fallback if directory doesn't exist so tests don't fail silently */\n        logf = fopen(\"/tmp/445.txt\", \"a\");\n    }\n\n    if (logf != NULL)\n    {\n        /* Log entry and key parameters */\n        /* Note: cast FuncKey to unsigned long long for a best-effort textual representation */\n        unsigned long long fk_val = (unsigned long long)(unsigned long)FuncKey;\n        fprintf(logf, \"ENTER UT_ExecuteVaHandler\\n\");\n        fprintf(logf, \"  FuncKey=%llu\\n\", fk_val);\n        fprintf(logf, \"  FunctionName=%s\\n\", FunctionName ? FunctionName : \"(null)\");\n        fprintf(logf, \"  DefaultHandler=%p\\n\", (void *)DefaultHandler);\n        fprintf(logf, \"  VaList_address=%p\\n\", (void *)&VaList);\n        fflush(logf);\n    }\n\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  UT_GetStubEntry returned NULL, setting DefaultHandler %p for FuncKey %llu\\n\",\n                    (void *)DefaultHandler, (unsigned long long)(unsigned long)FuncKey);\n            fflush(logf);\n        }\n\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            void *entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n            fprintf(logf, \"  UT_GetStubEntry returned %p, DefaultHandler %s\\n\",\n                    entry,\n                    (DefaultHandler == NULL) ? \"(null)\" : \"present\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"  Calling UT_DefaultStubImplWithArgs(FunctionName=\\\"%s\\\", FuncKey=%llu, argcount=0, VaList=...)\\n\",\n                FunctionName ? FunctionName : \"(null)\", (unsigned long long)(unsigned long)FuncKey);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior exactly for test suite compatibility */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT UT_ExecuteVaHandler\\n\\n\");\n        fclose(logf);\n    }\n}\n"
}