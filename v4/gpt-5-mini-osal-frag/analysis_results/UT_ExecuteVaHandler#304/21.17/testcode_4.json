{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. Calling strrchr(File, '/') assumes File points to a valid NUL-terminated string. The code only checks File != NULL, not that the object is NUL-terminated or that the search will remain inside the object bounds. If a caller passes a non\u2011terminated buffer (e.g. char buf[4] = {'a','b','c','d'}; UtAssert_Message(..., buf, ...)) or a pointer into a buffer that lacks a terminating '\\0' before its end, strrchr may read past the object boundary searching for '\\0', causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ExecuteVaHandler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ExecuteVaHandler with it.\n  - Your function must have the exact same signature as UT_ExecuteVaHandler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ExecuteVaHandler to check logs.\n  - Your function MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ExecuteVaHandler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Logging: attempt to write to the designated log file. If the directory does not exist, fall back to /tmp/443.txt */\n    FILE *log = fopen(\"/tmp/logs/443.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/443.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        /* Log entry with pointers and (when safe) the function name string */\n        fprintf(log, \"UT_ExecuteVaHandler ENTRY: FuncKey=%llu, FunctionName=%p\",\n                (unsigned long long)FuncKey, (void *)FunctionName);\n        if (FunctionName != NULL)\n        {\n            /* FunctionName is expected to be a valid NUL-terminated string in normal operation; log it for diagnostics. */\n            fprintf(log, \", name=\\\"%s\\\"\", FunctionName);\n        }\n        fprintf(log, \", DefaultHandler=%p\\n\", (void *)DefaultHandler);\n        fflush(log);\n    }\n\n    /* Preserve original behavior: check the stub entry once and reuse the result */\n    void *entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    if (log)\n    {\n        fprintf(log, \"UT_GetStubEntry returned %p\\n\", entry);\n        fflush(log);\n    }\n\n    if (entry == NULL && DefaultHandler != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"UT_SetVaHandlerFunction will be called: FuncKey=%llu, DefaultHandler=%p\\n\",\n                    (unsigned long long)FuncKey, (void *)DefaultHandler);\n            fflush(log);\n        }\n\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n\n        if (log)\n        {\n            fprintf(log, \"UT_SetVaHandlerFunction completed\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Calling UT_DefaultStubImplWithArgs(FunctionName=%p, FuncKey=%llu, argc=0)\\n\",\n                (void *)FunctionName, (unsigned long long)FuncKey);\n        fflush(log);\n    }\n\n    /* Call the original default stub implementation with the provided va_list */\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    if (log)\n    {\n        fprintf(log, \"UT_DefaultStubImplWithArgs returned\\n\");\n        fprintf(log, \"UT_ExecuteVaHandler EXIT\\n\");\n        fclose(log);\n    }\n}\n"
}