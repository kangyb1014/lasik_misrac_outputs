{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write sizeof(OS_object_token_t) bytes through the pointer parameter 'token' without first ensuring that 'token' is valid and points to an object at least that large. If a caller mistakenly passes NULL (e.g. OS_ObjectIdTransactionInit(lock_mode, idtype, NULL)) or a pointer to a smaller buffer (or to a sub-object), memset will access memory beyond the bounds of the referenced object causing undefined behavior. Therefore the use of memset here can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3043.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarDelete with it.\n  - Your function must have the exact same signature as OS_CondVarDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarDelete to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and initial state */\n    {\n        FILE *log = fopen(\"/tmp/logs/3043.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_CondVarDelete var_id=%lu, token_addr=%p, token_size=%lu\\n\",\n                    (unsigned long)var_id, (void *)&token, (unsigned long)sizeof(token));\n            fclose(log);\n        }\n    }\n\n    /* Perform the original lookup */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of lookup and token contents (only if lookup succeeded) */\n    {\n        FILE *log = fopen(\"/tmp/logs/3043.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER: OS_ObjectIdGetById returned %ld for var_id=%lu\\n\",\n                    (long)return_code, (unsigned long)var_id);\n\n            if (return_code == OS_SUCCESS)\n            {\n                /* Dump the token bytes to help reproduce/address violation scenarios.\n                   This shows the contents as provided by OS_ObjectIdGetById so other\n                   agents can observe what object/address is being referenced. */\n                unsigned int i;\n                unsigned int sz = (unsigned int)sizeof(token);\n                unsigned char *bytes = (unsigned char *)&token;\n\n                fprintf(log, \"TOKEN: addr=%p size=%u bytes=\", (void *)&token, sz);\n                for (i = 0u; i < sz; ++i)\n                {\n                    fprintf(log, \"%02x\", (unsigned int)bytes[i]);\n                    if (i + 1u < sz)\n                        fprintf(log, \" \");\n                }\n                fprintf(log, \"\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation */\n        {\n            FILE *log = fopen(\"/tmp/logs/3043.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"CALL: OS_CondVarDelete_Impl with token_addr=%p\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log final outcome */\n        {\n            FILE *log = fopen(\"/tmp/logs/3043.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"EXIT: OS_CondVarDelete final return_code=%ld for var_id=%lu\\n\",\n                        (long)return_code, (unsigned long)var_id);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log early exit when lookup failed */\n        FILE *log = fopen(\"/tmp/logs/3043.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_CondVarDelete early return return_code=%ld for var_id=%lu\\n\",\n                    (long)return_code, (unsigned long)var_id);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}