{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function dereferences a function pointer (OS_SharedGlobalVars.EventHandler) and invokes it. If that pointer is registered to point to OS_NotifyEvent (e.g. via OS_RegisterEventHandler(OS_NotifyEvent)), then calling OS_NotifyEvent would indirectly call itself and cause infinite recursion. Thus the code allows indirect self-call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3040.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarDelete with it.\n  - Your function must have the exact same signature as OS_CondVarDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarDelete to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Logging probe: append control-flow and state info to a file so other agents can\n     * reproduce the potential indirect self-call scenario and inspect state. */\n    {\n        FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log entry and the var_id value */\n            fprintf(log, \"OS_CondVarDelete: entered (var_id=%u)\\n\", (unsigned) var_id);\n\n            /* Log address of local token (useful to correlate subsequent entries) */\n            fprintf(log, \"OS_CondVarDelete: &token=%p\\n\", (void *)&token);\n\n            /* If available in the build, log the registered event handler and the\n             * OS_NotifyEvent symbol address to help detect indirect self-calls. */\n            /* These symbols are part of the surrounding OSAL codebase; if they do\n             * not exist in a particular build, these lines will cause a compile\n             * error. In the intended target environment these symbols exist. */\n            /* Print both pointers so a simple comparison of addresses in the log\n             * can show whether the registered handler points at OS_NotifyEvent. */\n            fprintf(log, \"OS_CondVarDelete: OS_SharedGlobalVars.EventHandler=%p\\n\",\n                    (void *)OS_SharedGlobalVars.EventHandler);\n            fprintf(log, \"OS_CondVarDelete: OS_NotifyEvent=%p\\n\",\n                    (void *)OS_NotifyEvent);\n\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log the result of the lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarDelete: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation to capture current handler */\n        {\n            FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarDelete: calling OS_CondVarDelete_Impl with token=%p\\n\", (void *)&token);\n                fprintf(log, \"OS_CondVarDelete: (pre-impl) EventHandler=%p\\n\", (void *)OS_SharedGlobalVars.EventHandler);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Log the result from the implementation */\n        {\n            FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarDelete: OS_CondVarDelete_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Complete the operation via the common routine */\n        /* Log before and after finalization so the full control path is recorded. */\n        {\n            FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarDelete: calling OS_ObjectIdFinalizeDelete with return_code=%ld token=%p\\n\", (long)return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/3040.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarDelete: OS_ObjectIdFinalizeDelete returned %ld\\n\", (long)return_code);\n                /* Capture the handler again after finalization in case it was invoked and changed */\n                fprintf(log, \"OS_CondVarDelete: (post-finalize) EventHandler=%p\\n\", (void *)OS_SharedGlobalVars.EventHandler);\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}