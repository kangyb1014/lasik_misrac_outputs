{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls helper functions/macros (OS_DEBUG and OS_ConsoleWrite). If either of these is implemented to use OS_printf (e.g. OS_DEBUG is a wrapper that formats and calls OS_printf, or OS_ConsoleWrite performs logging via OS_printf), then the call chain becomes OS_printf -> OS_DEBUG (or OS_ConsoleWrite) -> OS_printf, producing indirect recursion. This indirect self-call would violate MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2640.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketOpen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketOpen with it.\n  - Your function must have the exact same signature as OS_SocketOpen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketOpen to check logs.\n  - Your function MUST preserve the original logic of OS_SocketOpen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketOpen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    FILE                       *logf = NULL;\n\n    /* Open append-only log for probes. Best-effort: if this fails, proceed normally. */\n    logf = fopen(\"/tmp/logs/2640.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_SocketOpen ENTER: sock_id=%p, Domain=%d, Type=%d\\n\", (void *)sock_id, (int)Domain, (int)Type);\n        fflush(logf);\n    }\n\n    /* Check for NULL pointers */\n    if (logf != NULL) fprintf(logf, \"OS_SocketOpen: calling OS_CHECK_POINTER\\n\");\n    OS_CHECK_POINTER(sock_id);\n    if (logf != NULL) fprintf(logf, \"OS_SocketOpen: OS_CHECK_POINTER returned\\n\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    if (logf != NULL) fprintf(logf, \"OS_SocketOpen: calling OS_ObjectIdAllocateNew\\n\");\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (logf != NULL) fprintf(logf, \"OS_SocketOpen: OS_ObjectIdAllocateNew returned %d, token=%p\\n\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: obtained stream pointer=%p\\n\", (void *)stream);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: initialized stream (domain=%d,type=%d)\\n\", (int)stream->socket_domain, (int)stream->socket_type);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: calling OS_SocketOpen_Impl with token=%p\\n\", (void *)&token);\n        return_code = OS_SocketOpen_Impl(&token);\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: OS_SocketOpen_Impl returned %d\\n\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: calling OS_ObjectIdFinalizeNew with return_code=%d\\n\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: OS_ObjectIdFinalizeNew returned %d, *sock_id=%p\\n\", (int)return_code, (void *)(uintptr_t)*sock_id);\n    }\n    else\n    {\n        if (logf != NULL) fprintf(logf, \"OS_SocketOpen: allocation failed, returning %d\\n\", (int)return_code);\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_SocketOpen EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}