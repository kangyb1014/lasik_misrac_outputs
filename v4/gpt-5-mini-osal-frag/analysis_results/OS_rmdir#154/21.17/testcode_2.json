{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) can read up to maxlen bytes starting at s. If the object pointed to by s is smaller than maxlen (for example VirtualPath is a pointer to a buffer of size 16 but OS_strnlen is called with maxlen = OS_MAX_PATH_LEN = 255), memchr may access memory beyond the bounds of that object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file (append). Best-effort: if logging fails, continue normal behavior. */\n    FILE *logf = fopen(\"/tmp/logs/3133.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"---- OS_rmdir ENTRY ----\\n\");\n        fprintf(logf, \"path pointer: %p\\n\", (const void *)path);\n        fprintf(logf, \"OS_MAX_LOCAL_PATH_LEN: %d\\n\", (int)OS_MAX_LOCAL_PATH_LEN);\n    }\n\n    /* Preserve original behavior */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TranslatePath returned: %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* local_path is valid only on success; log it to show the resolved path. */\n            fprintf(logf, \"Translated local_path: '%s'\\n\", local_path);\n        }\n        else\n        {\n            fprintf(logf, \"OS_TranslatePath failed; not logging local_path contents\\n\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_DirRemove_Impl returned: %d\\n\", (int)return_code);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_rmdir EXIT with return_code: %d\\n\", (int)return_code);\n        fprintf(logf, \"---- OS_rmdir END ----\\n\\n\");\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}