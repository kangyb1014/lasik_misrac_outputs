{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr without ensuring that that many bytes exist in the object behind VirtualPath. For example, if VirtualPath is an array of size OS_MAX_PATH_LEN and the last '/' is near the end (so name_ptr points to within a few bytes of the array end) and OS_MAX_FILE_NAME is larger than the remaining bytes in the array (e.g. OS_MAX_PATH_LEN = 64, name_ptr at offset 60, OS_MAX_FILE_NAME = 32), memchr will attempt to access bytes beyond the VirtualPath buffer. The code does not constrain the memchr length to the remaining bytes of the VirtualPath object, so this violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for appended evidence collection. If it fails, continue normal\n       operation to preserve original behavior. */\n    FILE *log = fopen(\"/tmp/logs/3133.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_rmdir ENTER: path_ptr=%p\\n\", (void *)path);\n        if (path != NULL)\n        {\n            /* Print the caller-provided path pointer and its string (if any). */\n            fprintf(log, \"  input path (as string): \\\"\");\n            /* Use %s only when path is non-NULL; this mirrors typical use in the\n               original code which expects a NUL-terminated string. */\n            fprintf(log, \"%s\", path);\n            fprintf(log, \"\\\"\\n\");\n        }\n        fprintf(log, \"  local_path buffer address=%p size=%zu\\n\", (void *)local_path, sizeof(local_path));\n        fflush(log);\n    }\n\n    /* Preserve original logic: translate the path first. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_rmdir: OS_TranslatePath returned %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log the translated local path so downstream code (e.g. code that\n               may call memchr/memcpy/etc.) can be inspected for buffer layout\n               and content. */\n            fprintf(log, \"  translated local_path: \\\"\");\n            fprintf(log, \"%s\", local_path);\n            fprintf(log, \"\\\"\\n\");\n\n            /* Additionally log the length of the translated string as reported\n               by strlen, to help detect near-end offsets that could lead to\n               overruns in subsequent string handling. */\n            {\n                size_t len = 0;\n                /* Use a simple safe-length check: if the first NUL is within\n                   the buffer, strlen is safe. We rely on the translation to\n                   have produced a NUL-terminated string when OS_SUCCESS is\n                   returned (same assumption as the original code). */\n                len = strlen(local_path);\n                fprintf(log, \"  translated local_path length=%zu\\n\", len);\n            }\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_rmdir: calling OS_DirRemove_Impl(local_path)\\n\");\n            fflush(log);\n        }\n\n        /* Call the underlying implementation as before and capture its result. */\n        return_code = OS_DirRemove_Impl(local_path);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_rmdir: OS_DirRemove_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_rmdir EXIT: return_code=%ld\\n\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}