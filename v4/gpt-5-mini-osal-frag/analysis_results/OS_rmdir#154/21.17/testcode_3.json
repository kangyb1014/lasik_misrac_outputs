{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(VirtualPath, 0, OS_MAX_PATH_LEN). memchr may read up to OS_MAX_PATH_LEN bytes from VirtualPath regardless of the actual size of the object pointed to. If the caller passes a pointer to a shorter object (for example a small char array or a string literal that does not occupy OS_MAX_PATH_LEN bytes) this memchr invocation can access bytes beyond the bounds of that object. OS_CHECK_POINTER only tests for NULL, not object size, so the call can violate Rule 21.17 (e.g. VirtualPath = \"abc\" stored in 4 bytes while OS_MAX_PATH_LEN is much larger).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3133.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Logging probe: append human-readable trace information to a file that\n     * other agents/tests can inspect to understand control flow and key state\n     * leading up to any downstream string-handling violations. */\n    FILE *log = fopen(\"/tmp/logs/3133.txt\", \"a\");\n    if (log)\n    {\n        /* Log function entry and key invariants without dereferencing the\n         * 'path' pointer (to avoid introducing new undefined behavior). */\n        fprintf(log, \"OS_rmdir ENTER\\n\");\n        fprintf(log, \"  path pointer = %p\\n\", (void *)path);\n        fprintf(log, \"  sizeof(local_path) = %zu\\n\", (size_t)sizeof(local_path));\n        fprintf(log, \"  OS_MAX_LOCAL_PATH_LEN (macro) = %d\\n\", (int)OS_MAX_LOCAL_PATH_LEN);\n\n        if (path == NULL)\n        {\n            fprintf(log, \"  path is NULL\\n\");\n        }\n        else\n        {\n            /* We intentionally do NOT dereference 'path' here to avoid making\n             * a potentially-out-of-bounds read. Downstream functions (such as\n             * OS_strnlen / memchr) are where the suspected violation occurs;\n             * this log will show the pointer value and sizes so an investigator\n             * can reproduce the scenario and decide how to craft an input that\n             * triggers the violation. */\n            fprintf(log, \"  path is non-NULL (content not inspected to avoid UB)\\n\");\n        }\n\n        fprintf(log, \"Calling OS_TranslatePath(path, local_path)\\n\");\n    }\n    else\n    {\n        /* If the log file cannot be opened, at least attempt to note entry to\n         * stderr so test harness logs show the function was reached. */\n        (void)fprintf(stderr, \"OS_rmdir: could not open /tmp/logs/3133.txt for append\\n\");\n    }\n\n    /* Preserve original behavior: translate the path into a local buffer. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* local_path should be a valid, null-terminated C string on success;\n             * log it so investigators can see the resolved path that will be\n             * handed to the implementation-specific remove function. */\n            fprintf(log, \"  local_path (resolved) = '%s'\\n\", local_path);\n            fprintf(log, \"  local_path buffer addr = %p\\n\", (void *)local_path);\n            fprintf(log, \"Calling OS_DirRemove_Impl(local_path)\\n\");\n        }\n        else\n        {\n            fprintf(log, \"  OS_TranslatePath failed; not calling OS_DirRemove_Impl\\n\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n\n        if (log)\n        {\n            fprintf(log, \"OS_DirRemove_Impl returned %d\\n\", (int)return_code);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rmdir EXIT returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}