{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const char * (VirtualPath) to void * when calling OS_ObjectIdGetBySearch: (void *)VirtualPath. This discards the const qualifier and passes a non-const pointer where a const-qualified pointer could be used. If OS_ObjectIdGetBySearch does not need to modify the data, its parameter should be const void * (or the call should not cast away const). Casting away const like this violates the intent of Rule 8.13 and may enable modification of data that should be const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3135.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open a log file for append. This file will contain control-flow and\n     * state information so other agents can trace how OS_rmdir was reached\n     * and what data it received. */\n    FILE *log = fopen(\"/tmp/logs/3135.txt\", \"a\");\n\n    if (log)\n    {\n        /* Log entry, pointer value and a safe string representation */\n        fprintf(log, \"OS_rmdir ENTER: path_ptr=%p path_str=\\\"%s\\\"\\n\",\n                (const void *)path, (path ? path : \"(null)\"));\n        fflush(log);\n    }\n\n    /* Preserve original logic: translate the incoming path to a local path. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_rmdir: OS_TranslatePath returned %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log the translated local path and its address */\n            fprintf(log, \"OS_rmdir: local_path_ptr=%p local_path=\\\"%s\\\"\\n\",\n                    (void *)local_path, local_path);\n        }\n        else\n        {\n            fprintf(log, \"OS_rmdir: translation failed, local_path not valid\\n\");\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_rmdir: calling OS_DirRemove_Impl(local_path)\\n\");\n            fflush(log);\n        }\n\n        /* Call the implementation to remove the directory, preserving behavior. */\n        return_code = OS_DirRemove_Impl(local_path);\n\n        if (log)\n        {\n            fprintf(log, \"OS_rmdir: OS_DirRemove_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rmdir EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}