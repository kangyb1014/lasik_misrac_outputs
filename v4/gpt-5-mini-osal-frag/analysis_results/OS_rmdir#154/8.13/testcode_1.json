{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'filesys' is declared as a mutable pointer (OS_filesys_internal_record_t *filesys;) but it is only used to read fields (flags, system_mountpt, virtual_mountpt) and not to modify the pointed object. Therefore it should be declared as a pointer to const (const OS_filesys_internal_record_t *filesys) to reflect read-only usage and prevent accidental modification. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3135.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input path for diagnostics */\n    {\n        FILE *fp = fopen(\"/tmp/logs/3135.txt\", \"a\");\n        if (fp != NULL)\n        {\n            /* %p for pointer value, guard against NULL for string print */\n            fprintf(fp, \"OS_rmdir: entered. path_ptr=%p\", (void *)path);\n            if (path != NULL)\n            {\n                fprintf(fp, \" path=\\\"%s\\\"\", path);\n            }\n            fprintf(fp, \"\\n\");\n            fclose(fp);\n        }\n    }\n\n    /* Preserve original logic: translate the path, then remove directory if successful */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of OS_TranslatePath and the translated local_path when successful */\n    {\n        FILE *fp = fopen(\"/tmp/logs/3135.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_rmdir: OS_TranslatePath returned %ld\", (long)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                /* local_path is only valid when translation succeeded */\n                fprintf(fp, \" local_path=\\\"%s\\\"\", local_path);\n            }\n            fprintf(fp, \"\\n\");\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we're about to call the implementation-specific remove */\n        {\n            FILE *fp = fopen(\"/tmp/logs/3135.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_rmdir: calling OS_DirRemove_Impl with local_path=\\\"%s\\\"\\n\", local_path);\n                fclose(fp);\n            }\n        }\n\n        return_code = OS_DirRemove_Impl(local_path);\n\n        /* Log the result from the implementation-specific remove */\n        {\n            FILE *fp = fopen(\"/tmp/logs/3135.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_rmdir: OS_DirRemove_Impl returned %ld\\n\", (long)return_code);\n                fclose(fp);\n            }\n        }\n    }\n\n    /* Final return (same behavior as original) */\n    return return_code;\n}\n"
}