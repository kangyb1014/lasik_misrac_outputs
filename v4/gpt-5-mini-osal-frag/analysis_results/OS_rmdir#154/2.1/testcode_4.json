{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe check can become unreachable if OS_MAX_FILE_NAME is greater than or equal to OS_MAX_PATH_LEN. Earlier VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) and the code returns if VirtPathLen >= OS_MAX_PATH_LEN, so when execution reaches the memchr check there is guaranteed to be a NUL within the first OS_MAX_PATH_LEN bytes. If OS_MAX_FILE_NAME >= OS_MAX_PATH_LEN then memchr(name_ptr, 0, OS_MAX_FILE_NAME) will always find the terminator and never return NULL, making the 'return OS_FS_ERR_NAME_TOO_LONG;' path unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3136.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmdir with it.\n  - Your function must have the exact same signature as OS_rmdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmdir to check logs.\n  - Your function MUST preserve the original logic of OS_rmdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Probe: log entry and input path */\n    {\n        FILE *logf = fopen(\"/tmp/logs/3136.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_rmdir ENTER: path_ptr=%p, path_str=%s\\n\",\n                    (void *)path, (path != NULL) ? path : \"<NULL>\");\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Probe: log result of translation and local_path if available */\n    {\n        FILE *logf = fopen(\"/tmp/logs/3136.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TranslatePath -> return_code=%ld\\n\", (long)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                /* local_path is valid only on success */\n                fprintf(logf, \"Translated local_path=%s\\n\", local_path);\n            }\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Probe: about to call the implementation-specific remove */\n        {\n            FILE *logf = fopen(\"/tmp/logs/3136.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_DirRemove_Impl with local_path=%s\\n\", local_path);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_DirRemove_Impl(local_path);\n\n        /* Probe: log the result of the implementation call */\n        {\n            FILE *logf = fopen(\"/tmp/logs/3136.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_DirRemove_Impl -> return_code=%ld\\n\", (long)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final probe: log exit and return value */\n    {\n        FILE *logf = fopen(\"/tmp/logs/3136.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_rmdir EXIT: return_code=%ld\\n\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}