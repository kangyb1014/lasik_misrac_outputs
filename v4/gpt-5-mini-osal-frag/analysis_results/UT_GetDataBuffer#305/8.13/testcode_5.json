{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe output parameter DataBuffer is declared as void ** (pointer to void *). The function only stores and returns a pointer value (it does not modify the buffer contents), so the pointed-to type could and should be const-qualified (e.g. const void ** or better const void * * depending on intended semantics). By using void ** instead of a pointer-to-const type this loses const qualification and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/755.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_GetDataBuffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_GetDataBuffer with it.\n  - Your function must have the exact same signature as UT_GetDataBuffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_GetDataBuffer to check logs.\n  - Your function MUST preserve the original logic of UT_GetDataBuffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_GetDataBuffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Open log file for appending; ignore failures silently to avoid disturbing tests */\n    FILE *log = fopen(\"/tmp/logs/755.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetDataBuffer ENTER: FuncKey=%lu, DataBuffer=%p, MaxSize=%p, Position=%p\\n\",\n                (unsigned long)FuncKey, (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n        fflush(log);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetDataBuffer: UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: No stub entry, using defaults: ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\\n\",\n                    ResultDataBuffer, ResultMaxSize, ResultPosition);\n            fflush(log);\n        }\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: From stub: BasePtr=%p, TotalSize=%zu, Position=%zu\\n\",\n                    ResultDataBuffer, ResultMaxSize, ResultPosition);\n            fflush(log);\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: Writing DataBuffer (addr=%p) <- %p\\n\", (void *)DataBuffer, ResultDataBuffer);\n            fflush(log);\n        }\n\n        *DataBuffer = ResultDataBuffer;\n\n        if (log != NULL)\n        {\n            /* Log the stored value to show the pointer assignment that loses const-qualification in the reported scenario */\n            fprintf(log, \"UT_GetDataBuffer: After write, *DataBuffer (at %p) = %p\\n\", (void *)DataBuffer, (void *)*DataBuffer);\n            fflush(log);\n        }\n    }\n    if (MaxSize != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: Writing MaxSize (addr=%p) <- %zu\\n\", (void *)MaxSize, ResultMaxSize);\n            fflush(log);\n        }\n\n        *MaxSize = ResultMaxSize;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: After write, *MaxSize (at %p) = %zu\\n\", (void *)MaxSize, *MaxSize);\n            fflush(log);\n        }\n    }\n    if (Position != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: Writing Position (addr=%p) <- %zu\\n\", (void *)Position, ResultPosition);\n            fflush(log);\n        }\n\n        *Position = ResultPosition;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: After write, *Position (at %p) = %zu\\n\", (void *)Position, *Position);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetDataBuffer EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}