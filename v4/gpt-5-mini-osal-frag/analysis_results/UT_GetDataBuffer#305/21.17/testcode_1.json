{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize (e.g. due to prior corruption or a logic bug), the expression TotalSize - Position will underflow producing a very large ActualCopy. Even though ActualCopy is later limited by MaxSize, the initial underflow can make memcpy() copy more bytes than the destination buffer can hold, causing an out-of-bounds access. There is no explicit check that Position <= TotalSize before the subtraction, so an out-of-bounds write is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/753.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_GetDataBuffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_GetDataBuffer with it.\n  - Your function must have the exact same signature as UT_GetDataBuffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_GetDataBuffer to check logs.\n  - Your function MUST preserve the original logic of UT_GetDataBuffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_GetDataBuffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Logging probe: attempt to append diagnostic info to /tmp/logs/753.txt.\n       If the file cannot be opened, continue silently to preserve original behavior. */\n    {\n        FILE *log = fopen(\"/tmp/logs/753.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: entry\\n\");\n            fprintf(log, \"  StubPtr = %p\\n\", (void *)StubPtr);\n            fclose(log);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n\n        /* Log the NULL-stub path */\n        {\n            FILE *log = fopen(\"/tmp/logs/753.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  path: StubPtr == NULL -> ResultDataBuffer=NULL, ResultMaxSize=0, ResultPosition=0\\n\");\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        /* Log the values obtained from the stub so downstream code can be inspected.\n           This is especially useful for reproducing underflow scenarios where\n           ResultPosition > ResultMaxSize. */\n        {\n            FILE *log = fopen(\"/tmp/logs/753.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  path: StubPtr != NULL\\n\");\n                fprintf(log, \"    ResultDataBuffer = %p\\n\", ResultDataBuffer);\n                fprintf(log, \"    ResultMaxSize    = %zu\\n\", ResultMaxSize);\n                fprintf(log, \"    ResultPosition   = %zu\\n\", ResultPosition);\n\n                /* Detect and record potential underflow condition without altering program state. */\n                {\n                    long long signed_diff = (long long)ResultMaxSize - (long long)ResultPosition;\n                    fprintf(log, \"    signed_diff (TotalSize - Position) = %lld\\n\", signed_diff);\n\n                    if (signed_diff < 0)\n                    {\n                        /* Compute the unsigned wrap-around value that would result from a size_t subtraction.\n                           This reproduces the exact large value that could be used by callers that do\n                           (TotalSize - Position) with size_t arithmetic. */\n                        size_t unsigned_wrap = ResultMaxSize - ResultPosition; /* intentional wrap if Position > TotalSize */\n                        fprintf(log, \"    WARNING: Position > TotalSize -> unsigned_wrap = %zu (possible underflow)\\n\", unsigned_wrap);\n                    }\n                }\n\n                fclose(log);\n            }\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n"
}