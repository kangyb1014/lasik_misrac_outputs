{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment passes a string literal to a non-const pointer parameter. If OS_BSP_ExecTput is declared as something like void OS_BSP_ExecTput(char *capname, char *param) (i.e. taking non-const char *), then passing the literal \"sgr0\" (which should be treated as const data) causes a pointer to point to a non-const-qualified type and thus violates MISRA C 2023 Rule 8.13. (If the function is declared to take const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/295.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_ConsoleSetMode_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_ConsoleSetMode_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_ConsoleSetMode_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_ConsoleSetMode_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n    FILE *f = fopen(\"/tmp/logs/295.txt\", \"a\");\n\n    if (f)\n    {\n        fprintf(f, \"OS_BSP_ConsoleSetMode_Impl entered: ModeBits=0x%08X\\n\", (unsigned)ModeBits);\n        fprintf(f, \"EnableTermControl=%d\\n\", OS_BSP_GenericLinuxGlobal.EnableTermControl ? 1 : 0);\n    }\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (f) fprintf(f, \"Branch: NORMAL -> calling OS_BSP_ExecTput(\\\"sgr0\\\", NULL). literal addr=%p\\n\", (const void *)\"sgr0\");\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                if (f) fprintf(f, \"Branch: no HIGHLIGHT -> calling OS_BSP_ExecTput(\\\"rmso\\\", NULL). literal addr=%p\\n\", (const void *)\"rmso\");\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                if (f) fprintf(f, \"Branch: HIGHLIGHT -> calling OS_BSP_ExecTput(\\\"smso\\\", NULL). literal addr=%p\\n\", (const void *)\"smso\");\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            if (f) fprintf(f, \"Prepared param \\\"%s\\\" at addr=%p (buffer_size=%zu). Calling OS_BSP_ExecTput(\\\"setaf\\\", param)\\n\",\n                          param, (void *)param, sizeof(param));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n    else\n    {\n        if (f) fprintf(f, \"Term control disabled; no tput calls.\\n\");\n    }\n\n    if (f)\n    {\n        fflush(f);\n        fclose(f);\n    }\n}\n"
}