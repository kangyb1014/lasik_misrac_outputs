{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment violates MISRA C 2023 Rule 8.13 if the first parameter of OS_BSP_ExecTput is a non-const pointer (e.g. declared as void OS_BSP_ExecTput(char *capname, char *param)). Passing the string literal \"smso\" to a non-const char * parameter means the pointer does not point to a const-qualified type even though the data is not intended to be modified. The correct approach is to declare the function parameter as const char * (e.g. void OS_BSP_ExecTput(const char *capname, const char *param)) so the pointer points to a const-qualified type. If the function is already declared with a const-qualified parameter, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleSetMode_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/295.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleSetMode_Impl:\n```c\nvoid OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BSP_ConsoleSetMode_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BSP_ConsoleSetMode_Impl with it.\n  - Your function must have the exact same signature as OS_BSP_ConsoleSetMode_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BSP_ConsoleSetMode_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BSP_ConsoleSetMode_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BSP_ConsoleSetMode_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_BSP_ConsoleSetMode_Impl(uint32 ModeBits)\n{\n    char param[32];\n    FILE *log = fopen(\"/tmp/logs/295.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_BSP_ConsoleSetMode_Impl ModeBits=0x%08X\\n\", (unsigned)ModeBits);\n        fprintf(log, \"EnableTermControl=%d\\n\", (int)OS_BSP_GenericLinuxGlobal.EnableTermControl);\n        fflush(log);\n    }\n\n    if (OS_BSP_GenericLinuxGlobal.EnableTermControl)\n    {\n        if (ModeBits == OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            if (log)\n            {\n                fprintf(log, \"Branch: MODE_NORMAL -> calling OS_BSP_ExecTput(\\\"sgr0\\\", NULL)\\n\");\n                fflush(log);\n            }\n\n            OS_BSP_ExecTput(\"sgr0\", NULL);\n        }\n        else\n        {\n            if ((ModeBits & OS_BSP_CONSOLEMODE_HIGHLIGHT) == 0)\n            {\n                /* no highlight (standout) text */\n                if (log)\n                {\n                    fprintf(log, \"Branch: NO_HIGHLIGHT -> calling OS_BSP_ExecTput(\\\"rmso\\\", NULL)\\n\");\n                    fflush(log);\n                }\n\n                OS_BSP_ExecTput(\"rmso\", NULL);\n            }\n            else\n            {\n                /* set highlight (standout) text */\n                if (log)\n                {\n                    /* Log that a string literal is being passed (potential const-qualification issue when target expects non-const char *) */\n                    fprintf(log, \"Branch: HIGHLIGHT -> calling OS_BSP_ExecTput(\\\"smso\\\", NULL). Literal addr=%p\\n\", (const void *)\"smso\");\n                    fflush(log);\n                }\n\n                OS_BSP_ExecTput(\"smso\", NULL);\n            }\n\n            snprintf(param, sizeof(param), \"%d\", OS_BSP_CONSOLEMODE_TO_ANSICOLOR(ModeBits));\n\n            if (log)\n            {\n                fprintf(log, \"Computed param for setaf: \\\"%s\\\" (addr=%p) -> calling OS_BSP_ExecTput(\\\"setaf\\\", param)\\n\", param, (void *)param);\n                fflush(log);\n            }\n\n            OS_BSP_ExecTput(\"setaf\", param);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"EnableTermControl is false: no terminal control actions taken\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_BSP_ConsoleSetMode_Impl\\n\\n\");\n        fclose(log);\n    }\n}\n"
}