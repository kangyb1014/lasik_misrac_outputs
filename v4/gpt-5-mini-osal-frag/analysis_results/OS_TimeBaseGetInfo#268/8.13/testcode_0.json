{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'timebase' is declared as a non-const pointer (OS_timebase_internal_record_t *timebase) but is assigned from OS_OBJECT_TABLE_GET(OS_timebase_table, token) and only used for read-only accesses (nominal_interval_time, freerun_time, accuracy_usec). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (i.e. declared as const OS_timebase_internal_record_t *timebase).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBaseGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBaseGetInfo with it.\n  - Your function must have the exact same signature as OS_TimeBaseGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBaseGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBaseGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry so tests can detect that the function was reached */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_TimeBaseGetInfo: timebase_prop=%p\\n\", (void *)timebase_prop);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EARLY RETURN: objtype indicates timebase context - returning OS_ERR_INCORRECT_OBJ_STATE (objtype=%d)\\n\", (int)objtype);\n            fclose(logf);\n        }\n\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    /* Log after clearing the output structure */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After memset: cleared timebase_prop at %p\\n\", (void *)timebase_prop);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log the outcome of the id lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById returned %d for timebase_id (token storage at %p)\\n\", (int)return_code, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log pointers and key fields read from the internal structures. This provides\n         * the evidence that the local pointer 'timebase' is only used for read-only\n         * accesses (nominal_interval_time, freerun_time, accuracy_usec).\n         */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Looked up record=%p, timebase=%p\\n\", (void *)record, (void *)timebase);\n\n                if (record != NULL)\n                {\n                    /* record->name_entry expected to be a C string */\n                    fprintf(logf, \"record->name_entry='%s', record->creator=%lld\\n\",\n                            record->name_entry ? record->name_entry : \"(null)\", (long long)record->creator);\n                }\n                else\n                {\n                    fprintf(logf, \"record is NULL\\n\");\n                }\n\n                if (timebase != NULL)\n                {\n                    fprintf(logf, \"timebase->nominal_interval_time=%lld, timebase->freerun_time=%lld, timebase->accuracy_usec=%lld\\n\",\n                            (long long)timebase->nominal_interval_time,\n                            (long long)timebase->freerun_time,\n                            (long long)timebase->accuracy_usec);\n                }\n                else\n                {\n                    fprintf(logf, \"timebase is NULL\\n\");\n                }\n\n                fclose(logf);\n            }\n        }\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        /* Log the values written into the output structure to show they come from the read-only fields */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Populated timebase_prop (addr=%p): name='%s', creator=%lld, nominal_interval_time=%lld, freerun_time=%lld, accuracy=%lld\\n\",\n                        (void *)timebase_prop,\n                        timebase_prop->name[0] ? timebase_prop->name : \"(empty)\",\n                        (long long)timebase_prop->creator,\n                        (long long)timebase_prop->nominal_interval_time,\n                        (long long)timebase_prop->freerun_time,\n                        (long long)timebase_prop->accuracy);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        /* Log the return from the implementation-specific helper */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TimeBaseGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log that the token was released */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Released token for timebase_id; final return_code=%d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final return - log once more so tests can see end state */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT OS_TimeBaseGetInfo: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}