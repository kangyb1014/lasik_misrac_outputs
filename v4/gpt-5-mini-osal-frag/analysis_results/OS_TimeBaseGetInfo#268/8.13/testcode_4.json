{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration declares a const pointer to a mutable OS_common_record_t: 'extern OS_common_record_t *const OS_global_timebase_table'. MISRA R8.13 requires pointers to point to const-qualified types whenever possible. In OS_TimeBaseGetInfo the table is only read (record->name_entry, record->creator, etc.), so the pointee could be const. The declaration should be 'extern const OS_common_record_t *const OS_global_timebase_table' (or at least 'const OS_common_record_t *') if the table contents are not modified elsewhere. As written the pointer does not point to a const-qualified type, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBaseGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBaseGetInfo with it.\n  - Your function must have the exact same signature as OS_TimeBaseGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBaseGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBaseGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n    FILE *fp = NULL;\n\n    /* Open log file for append; best-effort logging. */\n    fp = fopen(\"/tmp/logs/2175.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimeBaseGetInfo: entered (timebase_id=%lld, timebase_prop=%p)\\n\",\n                (long long) timebase_id, (void *) timebase_prop);\n        fflush(fp);\n    }\n\n    /* Check parameters */\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimeBaseGetInfo: calling OS_CHECK_POINTER(timebase_prop)\\n\");\n        fflush(fp);\n    }\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimeBaseGetInfo: context objtype=%ld\\n\", (long) objtype);\n        fflush(fp);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: returning OS_ERR_INCORRECT_OBJ_STATE due to objtype check\\n\");\n            fclose(fp);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimeBaseGetInfo: OS_ObjectIdGetById returned %ld, token_addr=%p\\n\",\n                (long) return_code, (void *) &token);\n        fflush(fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: record=%p, timebase=%p\\n\", (void *) record, (void *) timebase);\n            if (record != NULL)\n            {\n                /* best-effort: print name (limited) and creator */\n                const char *name_str = \"(null)\";\n                if (record->name_entry != NULL)\n                {\n                    name_str = record->name_entry;\n                }\n                fprintf(fp, \"OS_TimeBaseGetInfo: record->name_entry=\\\"%.64s\\\", record->creator=%lu\\n\",\n                        name_str, (unsigned long) record->creator);\n            }\n            if (timebase != NULL)\n            {\n                fprintf(fp, \"OS_TimeBaseGetInfo: timebase->nominal_interval_time=%llu, freerun_time=%llu, accuracy_usec=%lu\\n\",\n                        (unsigned long long) timebase->nominal_interval_time,\n                        (unsigned long long) timebase->freerun_time,\n                        (unsigned long) timebase->accuracy_usec);\n            }\n            fflush(fp);\n        }\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: populated timebase_prop (name=\\\"%.64s\\\")\\n\", timebase_prop->name);\n            fflush(fp);\n        }\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: OS_TimeBaseGetInfo_Impl returned %ld\\n\", (long) return_code);\n            fflush(fp);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: token released, about to return %ld\\n\", (long) return_code);\n            fclose(fp);\n        }\n    }\n    else\n    {\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: OS_ObjectIdGetById failed, returning %ld\\n\", (long) return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}