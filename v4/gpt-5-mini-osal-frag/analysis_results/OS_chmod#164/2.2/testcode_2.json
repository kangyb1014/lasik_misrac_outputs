{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"SysMountPointLen = 0;\" is redundant. In OS_TranslatePath the variable SysMountPointLen is only used later when return_code == OS_SUCCESS; in that case the code path that leads to success always assigns SysMountPointLen from filesys->system_mountpt before any use. In error paths where SysMountPointLen would remain 0 (or uninitialized) the subsequent code that would use it is not executed because return_code != OS_SUCCESS. Therefore removing the statement would not change program behaviour, so the assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/978.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_chmod code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_chmod with it.\n  - Your function must have the exact same signature as OS_chmod.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_chmod to check logs.\n  - Your function MUST preserve the original logic of OS_chmod as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_chmod will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_chmod as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Open log file for appending probe information. This is best-effort and\n     * must not affect function semantics if logging fails. */\n    FILE *logf = fopen(\"/tmp/logs/978.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_chmod ENTER: path_ptr=%p, path=\\\"%s\\\", access_mode=%u\\n\",\n                (void *)path, (path != NULL ? path : \"(null)\"), (unsigned)access_mode);\n        fflush(logf);\n    }\n\n    /* Original logic preserved: translate path then, on success, perform chmod. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log outcome of translation and local_path contents to help reproduce the\n     * scenario described (evidence whether translate succeeded and what it set).\n     */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TranslatePath returned: %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* When successful, local_path should be valid and is used for the\n             * subsequent operation. Capture it for traceability. */\n            fprintf(logf, \"Translated local_path=\\\"%s\\\"\\n\", local_path);\n        }\n        else\n        {\n            /* On failure, local_path contents are not relied upon by the\n             * original logic, but record whatever is present to aid debugging. */\n            fprintf(logf, \"Translate failed; local_path (may be undefined)=\\\"%s\\\"\\n\", local_path);\n        }\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_FileChmod_Impl with local_path=\\\"%s\\\", access_mode=%u\\n\",\n                    local_path, (unsigned)access_mode);\n            fflush(logf);\n        }\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_FileChmod_Impl returned: %ld\\n\", (long)return_code);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Skipping OS_FileChmod_Impl due to translate failure\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_chmod RETURN: %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}