{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_FileChmod_Impl is declared to take a non-const pointer (e.g. int32 OS_FileChmod_Impl(char *path, uint32 access_mode)) but does not actually modify the path buffer, then Rule 8.13 is violated because the pointer parameter should be const-qualified (const char *). In other words, passing the local_path (char array) to a callee that could accept a const char * but is instead declared to take char * is a violation. (If, however, OS_FileChmod_Impl legitimately modifies the path buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/975.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_chmod code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_chmod with it.\n  - Your function must have the exact same signature as OS_chmod.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_chmod to check logs.\n  - Your function MUST preserve the original logic of OS_chmod as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_chmod will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_chmod as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Open log file for appending; best-effort logging. */\n    FILE *log = fopen(\"/tmp/logs/975.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_chmod(path=%p, access_mode=0x%08lx)\\n\", (const void *)path, (unsigned long)access_mode);\n        if (path == NULL)\n        {\n            fprintf(log, \"  path is NULL\\n\");\n        }\n        else\n        {\n            /* Print a short preview of the input path to help reproduce the scenario */\n            fprintf(log, \"  path preview: '\");\n            /* Safely print up to OS_MAX_LOCAL_PATH_LEN-1 chars (best-effort; relies on %s if NUL-terminated) */\n            if (path[0] != '\\0')\n            {\n                /* Use %s but guard if it might not be NUL-terminated is not possible here; this mirrors typical behavior */\n                fprintf(log, \"%s\", path);\n            }\n            fprintf(log, \"'\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Preserve original behavior: translate the external path into a local buffer. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  OS_TranslatePath returned %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log the translated local path and the fact we're about to call the implementation. */\n            fprintf(log, \"  local_path pointer=%p\\n\", (void *)local_path);\n            /* Print translated path if it appears non-empty. */\n            if (local_path[0] != '\\0')\n            {\n                fprintf(log, \"  local_path='%s'\\n\", local_path);\n            }\n            fprintf(log, \"  About to call OS_FileChmod_Impl(local_path, access_mode=0x%08lx)\\n\", (unsigned long)access_mode);\n            fflush(log);\n        }\n        else\n        {\n            fprintf(log, \"  Skipping OS_FileChmod_Impl due to translate failure\\n\");\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call the underlying implementation with the local path buffer. */\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  OS_FileChmod_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_chmod returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}