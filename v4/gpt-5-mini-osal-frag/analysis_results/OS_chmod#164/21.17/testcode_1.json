{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath(local_path) is called with a caller-supplied path buffer but no length is passed; if OS_TranslatePath uses string.h functions (e.g. strcpy(local_path, path), strcat, memcpy(local_path, path, strlen(path)+1), or otherwise copies/appends without bounds checks) and the input path (or the composed translated path) has length >= OS_MAX_LOCAL_PATH_LEN, the function will write beyond local_path and violate Rule 21.17. In other words, unless OS_TranslatePath guarantees it will never write more than OS_MAX_LOCAL_PATH_LEN bytes into local_path, this call is a potential violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_chmod code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_chmod with it.\n  - Your function must have the exact same signature as OS_chmod.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_chmod to check logs.\n  - Your function MUST preserve the original logic of OS_chmod as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_chmod will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_chmod as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Open log file for appending. This deliberately does not affect function logic. */\n    FILE *log = fopen(\"/tmp/logs/973.txt\", \"a\");\n    if (log)\n    {\n        unsigned maxlen = (OS_MAX_LOCAL_PATH_LEN > 0) ? (unsigned)OS_MAX_LOCAL_PATH_LEN : 1u;\n        fprintf(log, \"OS_chmod ENTER: path=%p, access_mode=%u, OS_MAX_LOCAL_PATH_LEN=%u\\n\",\n                (void *)path, (unsigned)access_mode, maxlen);\n\n        if (path == NULL)\n        {\n            fprintf(log, \"path: NULL\\n\");\n        }\n        else\n        {\n            /* Safely capture a bounded prefix of the caller-supplied path to avoid unbounded reads. */\n            char path_prefix_buf[/*CONST*/ OS_MAX_LOCAL_PATH_LEN];\n            unsigned i;\n            unsigned limit = (maxlen > 0u) ? (maxlen - 1u) : 0u; /* leave room for NUL */\n\n            for (i = 0u; i < limit; ++i)\n            {\n                char c = path[i];\n                path_prefix_buf[i] = c;\n                if (c == '\\0')\n                {\n                    break;\n                }\n            }\n            /* Ensure NUL termination */\n            if (limit > 0u)\n            {\n                path_prefix_buf[limit] = '\\0';\n            }\n            else\n            {\n                /* If OS_MAX_LOCAL_PATH_LEN was 0 or 1, make sure the buffer is NUL-terminated. */\n                path_prefix_buf[0] = '\\0';\n            }\n\n            fprintf(log, \"path_prefix=%s\\n\", path_prefix_buf);\n\n            /* Compute a bounded length (up to maxlen). If it reaches maxlen, note that it may be longer. */\n            unsigned bounded_len = 0u;\n            for (i = 0u; i < maxlen; ++i)\n            {\n                if (path[i] == '\\0')\n                {\n                    bounded_len = i;\n                    break;\n                }\n                if (i == (maxlen - 1u))\n                {\n                    /* did not encounter NUL within maxlen */\n                    bounded_len = maxlen;\n                }\n            }\n            fprintf(log, \"bounded_path_len=%u%s\\n\", bounded_len,\n                    (bounded_len >= maxlen) ? \" (>= OS_MAX_LOCAL_PATH_LEN or not NUL-terminated within bound)\" : \"\");\n        }\n\n        fflush(log);\n    }\n\n    /* Preserve original behavior: translate caller path into local_path. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log a bounded prefix of the translated path to capture whether the translation may have overflowed local_path. */\n            unsigned maxlen = (OS_MAX_LOCAL_PATH_LEN > 0) ? (unsigned)OS_MAX_LOCAL_PATH_LEN : 1u;\n            char local_prefix_buf[/*CONST*/ OS_MAX_LOCAL_PATH_LEN];\n            unsigned i;\n            unsigned limit = (maxlen > 0u) ? (maxlen - 1u) : 0u;\n            for (i = 0u; i < limit; ++i)\n            {\n                char c = local_path[i];\n                local_prefix_buf[i] = c;\n                if (c == '\\0')\n                {\n                    break;\n                }\n            }\n            if (limit > 0u)\n            {\n                local_prefix_buf[limit] = '\\0';\n            }\n            else\n            {\n                local_prefix_buf[0] = '\\0';\n            }\n            fprintf(log, \"local_path_prefix=%s\\n\", local_prefix_buf);\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_FileChmod_Impl(local_path, access_mode=%u)\\n\", (unsigned)access_mode);\n            fflush(log);\n        }\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        if (log)\n        {\n            fprintf(log, \"OS_FileChmod_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_chmod EXIT: returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}