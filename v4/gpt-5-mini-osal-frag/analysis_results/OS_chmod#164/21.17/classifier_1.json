{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_chmod:\n#define OS_MAX_LOCAL_PATH_LEN (OS_MAX_PATH_LEN+OS_FS_PHYS_NAME_LEN)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_TranslatePath(path, local_path);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "OS_TranslatePath(local_path) is called with a caller-supplied path buffer but no length is passed; if OS_TranslatePath uses string.h functions (e.g. strcpy(local_path, path), strcat, memcpy(local_path, path, strlen(path)+1), or otherwise copies/appends without bounds checks) and the input path (or the composed translated path) has length >= OS_MAX_LOCAL_PATH_LEN, the function will write beyond local_path and violate Rule 21.17. In other words, unless OS_TranslatePath guarantees it will never write more than OS_MAX_LOCAL_PATH_LEN bytes into local_path, this call is a potential violation."
}