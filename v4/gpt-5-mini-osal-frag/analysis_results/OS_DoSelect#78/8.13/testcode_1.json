{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter OS_set is used only for inspection (passed to FD_ISSET) and is not modified by the function, so it should be declared as pointing to a const-qualified type (i.e. const fd_set *OS_set). As written it is fd_set *OS_set (non-const), which violates MISRA C 2023 Rule 8.13. (OSAL_set is modified so it should remain non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoSelect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/345.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DoSelect:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DoSelect code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DoSelect with it.\n  - Your function must have the exact same signature as OS_DoSelect.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DoSelect to check logs.\n  - Your function MUST preserve the original logic of OS_DoSelect as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DoSelect will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DoSelect as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    /* Logging helpers/state capture */\n    {\n        FILE *logf;\n        int saved_errno = errno;\n        logf = fopen(\"/tmp/logs/345.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_DoSelect: maxfd=%d msecs=%ld rd_set=%p wr_set=%p\\n\",\n                    maxfd, (long)msecs, (void *)rd_set, (void *)wr_set);\n            fclose(logf);\n        }\n        errno = saved_errno;\n    }\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    /* Prepare buffers to capture fd_set snapshots (for rd_set and wr_set) */\n    unsigned char before_rd[64] = {0};\n    unsigned char after_rd[64]  = {0};\n    unsigned char before_wr[64] = {0};\n    unsigned char after_wr[64]  = {0};\n    size_t capture_n = (sizeof(fd_set) < sizeof(before_rd)) ? sizeof(fd_set) : sizeof(before_rd);\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        /* Capture snapshots of fd_sets before calling select (if non-NULL) */\n        if (rd_set != NULL)\n        {\n            memcpy(before_rd, (const void *)rd_set, capture_n);\n        }\n        if (wr_set != NULL)\n        {\n            memcpy(before_wr, (const void *)wr_set, capture_n);\n        }\n\n        /* Log pre-select state and timeout info. Preserve errno across logging. */\n        {\n            FILE *logf;\n            int saved_errno = errno;\n            logf = fopen(\"/tmp/logs/345.txt\", \"a\");\n            if (logf != NULL)\n            {\n                if (tvptr == NULL)\n                {\n                    fprintf(logf, \"Calling select (blocking): maxfd=%d\\n\", maxfd);\n                }\n                else\n                {\n                    fprintf(logf, \"Calling select with timeout: tv_sec=%ld tv_usec=%ld\\n\",\n                            (long)tv.tv_sec, (long)tv.tv_usec);\n                }\n\n                if (rd_set != NULL)\n                {\n                    fprintf(logf, \"rd_set (first %zu bytes):\", capture_n);\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        fprintf(logf, \" %02x\", before_rd[i]);\n                    }\n                    fprintf(logf, \"\\n\");\n                }\n                else\n                {\n                    fprintf(logf, \"rd_set is NULL\\n\");\n                }\n\n                if (wr_set != NULL)\n                {\n                    fprintf(logf, \"wr_set (first %zu bytes):\", capture_n);\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        fprintf(logf, \" %02x\", before_wr[i]);\n                    }\n                    fprintf(logf, \"\\n\");\n                }\n                else\n                {\n                    fprintf(logf, \"wr_set is NULL\\n\");\n                }\n\n                fclose(logf);\n            }\n            errno = saved_errno;\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n\n        /* Save errno immediately --- logging can clobber it, so restore before the retry check. */\n        {\n            int sel_errno = errno;\n\n            /* Capture snapshots after select to detect if fd_set parameters were modified */\n            if (rd_set != NULL)\n            {\n                memcpy(after_rd, (const void *)rd_set, capture_n);\n            }\n            if (wr_set != NULL)\n            {\n                memcpy(after_wr, (const void *)wr_set, capture_n);\n            }\n\n            /* Log post-select state and result. */\n            FILE *logf = fopen(\"/tmp/logs/345.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"select returned os_status=%d errno=%d\\n\", os_status, sel_errno);\n\n                if (rd_set != NULL)\n                {\n                    fprintf(logf, \"rd_set after (first %zu bytes):\", capture_n);\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        fprintf(logf, \" %02x\", after_rd[i]);\n                    }\n                    fprintf(logf, \"\\n\");\n\n                    /* Compare before/after to show whether rd_set was modified */\n                    int changed = 0;\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        if (before_rd[i] != after_rd[i])\n                        {\n                            changed = 1;\n                            break;\n                        }\n                    }\n                    fprintf(logf, \"rd_set_modified=%s\\n\", changed ? \"YES\" : \"NO\");\n                }\n\n                if (wr_set != NULL)\n                {\n                    fprintf(logf, \"wr_set after (first %zu bytes):\", capture_n);\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        fprintf(logf, \" %02x\", after_wr[i]);\n                    }\n                    fprintf(logf, \"\\n\");\n\n                    int changed_wr = 0;\n                    for (size_t i = 0; i < capture_n; ++i)\n                    {\n                        if (before_wr[i] != after_wr[i])\n                        {\n                            changed_wr = 1;\n                            break;\n                        }\n                    }\n                    fprintf(logf, \"wr_set_modified=%s\\n\", changed_wr ? \"YES\" : \"NO\");\n                }\n\n                fclose(logf);\n            }\n\n            /* Restore errno for the while condition check so the loop logic is unchanged. */\n            errno = sel_errno;\n        }\n\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    /* Final log with chosen return code */\n    {\n        FILE *logf;\n        int saved_errno = errno;\n        logf = fopen(\"/tmp/logs/345.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT OS_DoSelect: os_status=%d return_code=%d errno=%d\\n\", os_status, return_code, saved_errno);\n            fclose(logf);\n        }\n        errno = saved_errno;\n    }\n\n    return return_code;\n}\n"
}