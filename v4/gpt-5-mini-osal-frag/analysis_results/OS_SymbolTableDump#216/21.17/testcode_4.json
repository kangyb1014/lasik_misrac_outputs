{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) with maxlen == OS_MAX_PATH_LEN but OS_TranslatePath only checks that VirtualPath != NULL (OS_CHECK_POINTER). There is no guarantee that the object referenced by VirtualPath has at least OS_MAX_PATH_LEN bytes or contains a '\\0' within that many bytes. If a caller passes a smaller buffer (e.g. char buf[8] that is not NUL-terminated within its bounds or a pointer into a smaller object), memchr may read beyond the buffer while searching up to OS_MAX_PATH_LEN bytes, causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SymbolTableDump code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SymbolTableDump with it.\n  - Your function must have the exact same signature as OS_SymbolTableDump.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SymbolTableDump to check logs.\n  - Your function MUST preserve the original logic of OS_SymbolTableDump as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SymbolTableDump will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n    FILE *log = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Open log AFTER pointer check to avoid leaving the file open if the macro returns early */\n    log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SymbolTableDump\\n\");\n        fprintf(log, \"  filename ptr=%p\\n\", (void *)filename);\n        fprintf(log, \"  SizeLimit=%zu\\n\", SizeLimit);\n    }\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    if (log) fprintf(log, \"CALL: OS_TranslatePath(filename=%p, translated_path=%p)\\n\", (void *)filename, (void *)translated_path);\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (log) fprintf(log, \"RETURN: OS_TranslatePath -> %d\\n\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"EXIT: TranslatePath failed, return %d\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    if (log)\n    {\n        /* translated_path is a local buffer; safe to print after successful translation */\n        fprintf(log, \"  translated_path=\");\n        /* limit output length to avoid overly long lines */\n        {\n            size_t i;\n            size_t max_print = 256;\n            size_t len = strlen(translated_path);\n            if (len > max_print)\n            {\n                fwrite(translated_path, 1, max_print, log);\n                fprintf(log, \"...(truncated, total_len=%zu)\\n\", len);\n            }\n            else\n            {\n                fprintf(log, \"%s\\n\", translated_path);\n            }\n        }\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    if (log) fprintf(log, \"CALL: OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token)\\n\");\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (log) fprintf(log, \"RETURN: OS_ObjectIdTransactionInit -> %d\\n\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"EXIT: ObjectIdTransactionInit failed, return %d\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    if (log) fprintf(log, \"CALL: OS_SymbolTableDump_Impl(translated_path=%p, SizeLimit=%zu)\\n\", (void *)translated_path, SizeLimit);\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    if (log) fprintf(log, \"RETURN: OS_SymbolTableDump_Impl -> %d\\n\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n    if (log) fprintf(log, \"CALL: OS_ObjectIdTransactionCancel(&token=%p)\\n\", (void *)&token);\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_SymbolTableDump returning %d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}