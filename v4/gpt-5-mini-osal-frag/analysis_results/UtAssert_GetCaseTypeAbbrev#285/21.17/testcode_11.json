{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(Local_SegmentName, CurrentSegment) can violate MISRA C 2023 Rule 21.17 if the bounds/termination of CurrentSegment and Local_SegmentName are not guaranteed. Two realistic failure scenarios: (1) If CurrentSegment is not a fixed-size array containing a NUL terminator within its own bounds (i.e. it may lack a terminating '\\0'), strcpy will read past the end of CurrentSegment causing an out\u2011of\u2011bounds access of the source. (2) If CurrentSegment is actually a char * (pointer) rather than an array, sizeof(CurrentSegment) yields the pointer size, making Local_SegmentName too small; copying a longer string then causes writes beyond Local_SegmentName (and possibly reads beyond the source if not NUL-terminated). The comment asserts safety, but the code does not itself enforce or prove the required NUL termination/size guarantees, so the call can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetCaseTypeAbbrev code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetCaseTypeAbbrev:\n```c\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    return AbbrevStr;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_GetCaseTypeAbbrev code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_GetCaseTypeAbbrev with it.\n  - Your function must have the exact same signature as UtAssert_GetCaseTypeAbbrev.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_GetCaseTypeAbbrev to check logs.\n  - Your function MUST preserve the original logic of UtAssert_GetCaseTypeAbbrev as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_GetCaseTypeAbbrev will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_GetCaseTypeAbbrev as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    /* Attempt to open the log file. If the directory does not exist, try to create it, then reopen. */\n    FILE *log = fopen(\"/tmp/logs/2933.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* Try to create the directory /tmp/logs if possible and reopen. Declare mkdir to avoid requiring headers here. */\n        extern int mkdir(const char *, unsigned int);\n        (void)mkdir(\"/tmp/logs\", 0777U);\n        log = fopen(\"/tmp/logs/2933.txt\", \"a\");\n    }\n\n    if (log != NULL)\n    {\n        /* Log entry and the raw numeric value of CaseType so callers can correlate events */\n        (void)fprintf(log, \"ENTER: UtAssert_GetCaseTypeAbbrev CaseType=%d\\n\", (int)CaseType);\n    }\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    if (log != NULL)\n    {\n        /* Compute the returned string length in a safe bounded loop for logging purposes */\n        size_t len = 0U;\n        const char *p = AbbrevStr;\n        while ((p != NULL) && (*p != '\\0') && (len < 1024U))\n        {\n            ++len;\n            ++p;\n        }\n\n        (void)fprintf(log, \"SELECTED: AbbrevStr=%p \\\"%s\\\" len=%zu\\n\", (const void *)AbbrevStr, AbbrevStr, len);\n        (void)fprintf(log, \"EXIT: UtAssert_GetCaseTypeAbbrev returning %p\\n\", (const void *)AbbrevStr);\n        (void)fclose(log);\n    }\n    else\n    {\n        /* Fallback: if logging to file failed, emit a minimal diagnostic to stderr so test harnesses can still see activity. */\n        (void)fprintf(stderr, \"UtAssert_GetCaseTypeAbbrev invoked CaseType=%d returning \\\"%s\\\"\\n\", (int)CaseType, AbbrevStr);\n    }\n\n    return AbbrevStr;\n}"
}