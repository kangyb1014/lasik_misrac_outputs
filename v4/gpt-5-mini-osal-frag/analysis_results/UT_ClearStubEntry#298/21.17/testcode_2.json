{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy source length is computed as ActualCopy = TotalSize - Position without validating that Position <= TotalSize and without checking BasePtr != NULL. If Position > TotalSize (e.g. TotalSize = 10, Position = 20) the subtraction underflows to a huge size_t value; if MaxSize does not constrain this to a safe value, memcpy(LocalBuffer, &BasePtr[Position], ActualCopy) will read beyond the allocated BasePtr (out-of-bounds). Also if BasePtr is NULL there is no null check before indexing. This can result in accesses beyond the bounds of the objects passed to memcpy, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ClearStubEntry code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ClearStubEntry with it.\n  - Your function must have the exact same signature as UT_ClearStubEntry.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ClearStubEntry to check logs.\n  - Your function MUST preserve the original logic of UT_ClearStubEntry as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ClearStubEntry will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <errno.h>\n\n    /* Logging helper: append control-flow and important state info to the log file. */\n    FILE *log = fopen(\"/tmp/logs/2523.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ClearStubEntry entered: StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  Conditions for free() are met.\\n\");\n            fprintf(log, \"    EntryType=%u\\n\", (unsigned)StubPtr->EntryType);\n            fprintf(log, \"    ModeFlags=0x%llx\\n\", (unsigned long long)StubPtr->ModeFlags);\n            fprintf(log, \"    Data.Buff.BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n\n        /* Perform the free as in the original implementation */\n        free(StubPtr->Data.Buff.BasePtr);\n\n        if (log != NULL)\n        {\n            /* Note: pointer value may remain printable after free; this documents that free was called. */\n            fprintf(log, \"  free() called on BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  Conditions for free() NOT met.\\n\");\n            /* Try to log the fields that determine the decision. This mirrors the checks above. */\n            fprintf(log, \"    EntryType=%u\\n\", (unsigned)StubPtr->EntryType);\n            fprintf(log, \"    ModeFlags=0x%llx\\n\", (unsigned long long)StubPtr->ModeFlags);\n            fprintf(log, \"    Data.Buff.BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  About to clear StubPtr=%p with memset(size=%zu)\\n\", (void *)StubPtr, sizeof(*StubPtr));\n        fclose(log);\n    }\n\n    /* Clear the structure as in the original implementation */\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n"
}