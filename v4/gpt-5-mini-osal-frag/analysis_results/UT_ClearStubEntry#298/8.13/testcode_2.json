{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe source pointer Data.Rvc.Buf.IndirectPtr is used only for reading (passed as the source to memcpy) but is likely declared as a non-const pointer (e.g. void * or uint8_t *). Under MISRA C 2023 Rule 8.13 this is a violation: the pointer should be declared to point to a const-qualified type (e.g. const void * or const uint8_t *) when the pointed-to data is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2525.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ClearStubEntry code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ClearStubEntry with it.\n  - Your function must have the exact same signature as UT_ClearStubEntry.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ClearStubEntry to check logs.\n  - Your function MUST preserve the original logic of UT_ClearStubEntry as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ClearStubEntry will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    FILE *log = fopen(\"/tmp/logs/2525.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_ClearStubEntry entered: StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"StubPtr is NULL, aborting\\n\");\n            fclose(log);\n        }\n        return;\n    }\n\n    /* Log current state before any modification */\n    if (log)\n    {\n        fprintf(log, \"Pre-check state: EntryType=%d, ModeFlags=0x%08x, BasePtr=%p\\n\",\n                (int)StubPtr->EntryType,\n                (unsigned)StubPtr->ModeFlags,\n                (void *)StubPtr->Data.Buff.BasePtr);\n    }\n\n    /* Evaluate conditions exactly as original logic */\n    int is_data_or_return = (StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER);\n    int has_baseptr = (StubPtr->Data.Buff.BasePtr != NULL);\n    int alloc_flag_set = ((StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0);\n\n    if (is_data_or_return && has_baseptr && alloc_flag_set)\n    {\n        if (log)\n        {\n            fprintf(log, \"Conditions met for free(): is_data_or_return=%d, has_baseptr=%d, alloc_flag_set=%d. Freeing %p\\n\",\n                    is_data_or_return, has_baseptr, alloc_flag_set, (void *)StubPtr->Data.Buff.BasePtr);\n        }\n\n        /* Call free as in original code */\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"Not freeing. Condition details: is_data_or_return=%d, has_baseptr=%d, alloc_flag_set=%d\\n\",\n                    is_data_or_return, has_baseptr, alloc_flag_set);\n        }\n    }\n\n    /* Save a few values for post-clear logging (avoid dereferencing freed memory) */\n    void *saved_BasePtr = StubPtr->Data.Buff.BasePtr;\n    unsigned saved_ModeFlags = (unsigned)StubPtr->ModeFlags;\n    int saved_EntryType = (int)StubPtr->EntryType;\n\n    /* Preserve original behavior: clear the whole structure */\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    if (log)\n    {\n        fprintf(log, \"memset done. Previous values: EntryType=%d, ModeFlags=0x%08x, BasePtr=%p\\n\",\n                saved_EntryType, saved_ModeFlags, saved_BasePtr);\n        fclose(log);\n    }\n}"
}