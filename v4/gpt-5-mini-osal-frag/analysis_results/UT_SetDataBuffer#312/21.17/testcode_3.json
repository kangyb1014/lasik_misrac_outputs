{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provides a DataBuffer that is smaller than BufferSize (for example: char src[10]; UT_SetDataBuffer(key, src, 20, true);), the function allocates a destination of BufferSize but copies BufferSize bytes from DataBuffer without verifying that DataBuffer actually references at least BufferSize bytes. This can cause an out-of-bounds read of the source buffer (and thus an access beyond the bounds of the object referenced by the source pointer), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_SetDataBuffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_SetDataBuffer with it.\n  - Your function must have the exact same signature as UT_SetDataBuffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_SetDataBuffer to check logs.\n  - Your function MUST preserve the original logic of UT_SetDataBuffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_SetDataBuffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/2573.txt\", \"a\");\n\n    /* Entry log - always attempt to record that function was entered and parameters */\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_SetDataBuffer ENTER: FuncKey=%p, DataBuffer=%p, BufferSize=%zu, AllocateCopy=%d\\n\",\n                (void *) (uintptr_t) FuncKey, DataBuffer, BufferSize, (int)AllocateCopy);\n        fflush(log);\n    }\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Conditions met: DataBuffer != NULL and BufferSize > 0\\n\");\n            fflush(log);\n        }\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"ERROR: StubPtr is NULL - aborting\\n\");\n                fclose(log);\n            }\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n\n            if (AllocateCopy)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"AllocateCopy is true: attempting malloc(BufferSize=%zu)\\n\", BufferSize);\n                    fflush(log);\n                }\n\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n\n                if (log != NULL)\n                {\n                    fprintf(log, \"malloc returned %p\\n\", StubPtr->Data.Buff.BasePtr);\n                    fflush(log);\n                }\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"ERROR: malloc failed for size %zu - aborting\\n\", BufferSize);\n                        fclose(log);\n                    }\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    /* Log the planned memcpy operation: source pointer and length. */\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"About to memcpy dest=%p <- src=%p, size=%zu\\n\",\n                                StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                        fflush(log);\n                    }\n\n                    /* Perform the copy exactly as original implementation does. */\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n\n                    if (log != NULL)\n                    {\n                        /* After memcpy, log that the copy completed. Note: if source was too small this\n                         * may have caused an out-of-bounds read which could crash before this log.\n                         */\n                        fprintf(log, \"memcpy completed: dest=%p, src=%p, size=%zu\\n\",\n                                StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                        fflush(log);\n                    }\n\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                if (log != NULL)\n                {\n                    fprintf(log, \"AllocateCopy is false: using provided buffer directly: BasePtr=%p\\n\", DataBuffer);\n                    fflush(log);\n                }\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Stub updated: BasePtr=%p, TotalSize=%zu, Position=%zu, ModeFlags=0x%08x\\n\",\n                        StubPtr->Data.Buff.BasePtr, StubPtr->Data.Buff.TotalSize,\n                        StubPtr->Data.Buff.Position, StubPtr->ModeFlags);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Minimal probe to show function was entered but conditions not met */\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDataBuffer SKIP: DataBuffer=%p, BufferSize=%zu (no action taken)\\n\",\n                    DataBuffer, BufferSize);\n            fclose(log);\n        }\n    }\n}\n"
}