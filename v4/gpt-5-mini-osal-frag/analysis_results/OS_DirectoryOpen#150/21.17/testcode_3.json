{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe inline OS_strnlen uses memchr(s, 0, maxlen). memchr will scan up to maxlen bytes starting from s, which can read beyond the actual allocated object if the object that s points to is smaller than maxlen. In OS_TranslatePath this is called as OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) where VirtualPath is an arbitrary const char * supplied by the caller. If the caller passes a pointer to a smaller buffer or a short string whose allocated storage is less than OS_MAX_PATH_LEN, memchr may access bytes beyond the object's bounds (undefined behavior). For example, passing a pointer to a 16-byte buffer containing \"abc\\0\" while OS_MAX_PATH_LEN is 256 causes memchr to probe up to 256 bytes and potentially read out-of-bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryOpen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryOpen with it.\n  - Your function must have the exact same signature as OS_DirectoryOpen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryOpen to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryOpen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Minimal entry probe so the function being reached is recorded. */\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirectoryOpen ENTRY: this=%p dir_id=%p path=%p\\n\",\n                    (void *)NULL, (void *)dir_id, (void *)path);\n            fprintf(log, \"  OS_MAX_PATH_LEN=%d OS_MAX_LOCAL_PATH_LEN=%d\\n\",\n                    (int)OS_MAX_PATH_LEN, (int)OS_MAX_LOCAL_PATH_LEN);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and pointers/values relevant to the reported violation scenario. */\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirectoryOpen: After OS_TranslatePath(path=%p, local_path) => return_code=%ld\\n\",\n                    (void *)path, (long)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                /* local_path is only valid when translation succeeded */\n                fprintf(log, \"  local_path (first %d bytes):\\n\", (int)OS_MAX_LOCAL_PATH_LEN);\n                /* Print as a sequence of bytes (hex) up to a reasonable limit to avoid undefined reads. */\n                for (size_t i = 0; i < (size_t)OS_MAX_LOCAL_PATH_LEN; ++i)\n                {\n                    unsigned char c = (unsigned char)local_path[i];\n                    fprintf(log, \"%02X \", c);\n                    if ((i & 0x0F) == 0x0F) fprintf(log, \"\\n\");\n                }\n                fprintf(log, \"\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DirectoryOpen: After OS_ObjectIdAllocateNew => return_code=%ld token=%p\\n\",\n                        (long)return_code, (void *)&token);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_DirectoryOpen: After OS_DirOpen_Impl => return_code=%ld token=%p dir=%p\\n\",\n                            (long)return_code, (void *)&token, (void *)dir);\n                    fclose(log);\n                }\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"OS_DirectoryOpen: After OS_ObjectIdFinalizeNew => final_return_code=%ld dir_id=%p\\n\",\n                            (long)return_code, (void *)dir_id);\n                    fclose(log);\n                }\n            }\n        }\n    }\n\n    /* Final probe before returning */\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirectoryOpen EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}