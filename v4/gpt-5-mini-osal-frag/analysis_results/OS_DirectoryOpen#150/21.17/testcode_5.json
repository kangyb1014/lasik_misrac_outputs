{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen is implemented as memchr(s, 0, maxlen) which reads up to maxlen bytes from the pointer. The call VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN); therefore allows memchr to read OS_MAX_PATH_LEN bytes from VirtualPath. OS_CHECK_POINTER only verifies the pointer is non-NULL, not that the underlying object is at least OS_MAX_PATH_LEN bytes long. If a caller supplies a shorter buffer (for example: char small[8] = \"foo\"; and passes small as VirtualPath while OS_MAX_PATH_LEN is 64), memchr will read past the end of small, causing an out-of-bounds access. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryOpen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryOpen with it.\n  - Your function must have the exact same signature as OS_DirectoryOpen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryOpen to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryOpen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Preserve original parameter check */\n    OS_CHECK_POINTER(dir_id);\n\n    /* Logging: record entry and pointer state */\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_DirectoryOpen\\n\");\n            fprintf(log, \"  dir_id=%p, path=%p\\n\", (void *)dir_id, (void *)path);\n            fprintf(log, \"  sizeof(local_path)=%zu (OS_MAX_LOCAL_PATH_LEN=%d)\\n\", sizeof(local_path), OS_MAX_LOCAL_PATH_LEN);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and local_path contents when available */\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After OS_TranslatePath: return_code=%d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                /* local_path is filled by OS_TranslatePath on success; safe to log */\n                fprintf(log, \"  local_path=\\\"%s\\\"\\n\", local_path);\n            }\n            else\n            {\n                fprintf(log, \"  local_path not available (translation failed)\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log allocation result */\n        {\n            FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%d, token=%llu\\n\", (int)return_code, (unsigned long long)token);\n                fclose(log);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Log object init and name pointer */\n            {\n                FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"After OS_OBJECT_INIT: token=%llu, dir=%p, dir_name_ptr=%p\\n\", (unsigned long long)token, (void *)dir, (void *)path);\n                    fclose(log);\n                }\n            }\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Log OS-specific result */\n            {\n                FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"After OS_DirOpen_Impl: return_code=%d\\n\", (int)return_code);\n                    fclose(log);\n                }\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            /* Final logging of outcome */\n            {\n                FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"After OS_ObjectIdFinalizeNew: final_return_code=%d, dir_id=%p, assigned_id=%u\\n\", (int)return_code, (void *)dir_id, (dir_id != NULL ? (unsigned) *dir_id : 0u));\n                    fprintf(log, \"EXIT: OS_DirectoryOpen (normal path)\\n\\n\");\n                    fclose(log);\n                }\n            }\n        }\n    }\n\n    /* If we did not take the success path above, still log the exit and return code */\n    if (return_code != OS_SUCCESS)\n    {\n        FILE *log = fopen(\"/tmp/logs/563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_DirectoryOpen (error) return_code=%d\\n\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}