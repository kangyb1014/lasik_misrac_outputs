{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: VirtualPath is declared as const char * but is passed as (void *)VirtualPath to OS_ObjectIdGetBySearch, discarding const qualification. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible). If the search routine does not modify the data, its parameter should be const void * (or the cast removed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/565.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryOpen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryOpen with it.\n  - Your function must have the exact same signature as OS_DirectoryOpen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryOpen to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryOpen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    /* Logging helpers (declare minimal prototypes to avoid requiring headers here) */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *path, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    FILE *logf = NULL;\n\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Open log file for append. This will capture control flow and state for debugging. */\n    logf = fopen(\"/tmp/logs/565.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* Log function entry and input parameters */\n        fprintf(logf, \"OS_DirectoryOpen ENTRY: dir_id=%p path=%p\\n\", (void *)dir_id, (void *)path);\n        fprintf(logf, \"OS_DirectoryOpen ENTRY: path_str=%s\\n\", (path != NULL) ? path : \"(null)\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TranslatePath returned %ld; local_path=%s\\n\", (long)return_code, (return_code == OS_SUCCESS) ? local_path : \"(not set)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdAllocateNew returned %ld; token_addr=%p\\n\", (long)return_code, (void *)&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_OBJECT_TABLE_GET -> dir=%p\\n\", (void *)dir);\n            }\n\n            /* Reset the table entry and save the name */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_OBJECT_INIT with path=%s\\n\", (path != NULL) ? path : \"(null)\");\n            }\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_DirOpen_Impl with token=%p local_path=%s\\n\", (void *)&token, local_path);\n            }\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_DirOpen_Impl returned %ld\\n\", (long)return_code);\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ObjectIdFinalizeNew returned %ld\\n\", (long)return_code);\n                if (return_code == OS_SUCCESS && dir_id != NULL)\n                {\n                    /* osal_id_t may be an integer type; print its raw value for debugging */\n                    fprintf(logf, \"Final dir_id (address)=%p value=%lu\\n\", (void *)dir_id, (unsigned long)(*dir_id));\n                }\n            }\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_DirectoryOpen EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}