{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (name) to a non-const void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier and produces a pointer that can be treated as mutable by the callee (OS_ObjectIdFindNextMatch/OS_ObjectNameMatch). Under MISRA C 2023 Rule 8.13 this is a violation because the pointer should point to a const-qualified type whenever possible (the function parameter should accept a const void * or the code should avoid casting away const). This also risks undefined behavior if the callee attempts to modify the pointed-to data (e.g. string literal).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemCreate with it.\n  - Your function must have the exact same signature as OS_MutSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Minimal entry probe: log entry and input parameter state */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n        if (!logf)\n        {\n            /* Fallback if directory doesn't exist */\n            logf = fopen(\"/tmp/2875.txt\", \"a\");\n        }\n        if (logf)\n        {\n            fprintf(logf, \"ENTER: OS_MutSemCreate sem_id=%p sem_name=%p name=\\\"%s\\\" options=%u\\n\",\n                    (void *)sem_id,\n                    (void *)sem_name,\n                    (sem_name != NULL) ? sem_name : \"(null)\",\n                    (unsigned)options);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log allocation result and a byte-dump of the token value for later analysis. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n        if (!logf)\n        {\n            logf = fopen(\"/tmp/2875.txt\", \"a\");\n        }\n        if (logf)\n        {\n            fprintf(logf, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n\n            /* Dump token bytes (up to 16 bytes) so agents can inspect the token representation regardless of type). */\n            {\n                unsigned char *p = (unsigned char *)&token;\n                size_t tsize = sizeof(token);\n                fprintf(logf, \"token size=%zu bytes: \", tsize);\n                for (size_t i = 0; i < (tsize < 16 ? tsize : 16); ++i)\n                {\n                    fprintf(logf, \"%02X\", (unsigned)p[i]);\n                }\n                fprintf(logf, \"\\n\");\n            }\n\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log the mutex pointer we obtained */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n            if (!logf)\n            {\n                logf = fopen(\"/tmp/2875.txt\", \"a\");\n            }\n            if (logf)\n            {\n                fprintf(logf, \"OS_OBJECT_TABLE_GET returned mutex ptr=%p\\n\", (void *)mutex);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Log that we saved the name into the object table */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n            if (!logf)\n            {\n                logf = fopen(\"/tmp/2875.txt\", \"a\");\n            }\n            if (logf)\n            {\n                fprintf(logf, \"OS_OBJECT_INIT saved name=\\\"%s\\\" into token\\n\", (sem_name != NULL) ? sem_name : \"(null)\");\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Log result from the OS-specific implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n            if (!logf)\n            {\n                logf = fopen(\"/tmp/2875.txt\", \"a\");\n            }\n            if (logf)\n            {\n                fprintf(logf, \"OS_MutSemCreate_Impl returned %ld\\n\", (long)return_code);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log finalization result and final sem_id pointer */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n            if (!logf)\n            {\n                logf = fopen(\"/tmp/2875.txt\", \"a\");\n            }\n            if (logf)\n            {\n                fprintf(logf, \"OS_ObjectIdFinalizeNew returned %ld final sem_id_ptr=%p\\n\", (long)return_code, (void *)sem_id);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final exit log */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2875.txt\", \"a\");\n        if (!logf)\n        {\n            logf = fopen(\"/tmp/2875.txt\", \"a\");\n        }\n        if (logf)\n        {\n            fprintf(logf, \"EXIT: OS_MutSemCreate return_code=%ld\\n\", (long)return_code);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}