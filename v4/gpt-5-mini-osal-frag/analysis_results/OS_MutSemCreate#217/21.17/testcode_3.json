{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING, which (based on typical implementations) must examine the contents/length of the sem_name string using string.h routines. If sem_name is a non-NULL pointer to a char buffer that is not NUL-terminated or that has fewer accessible bytes than the code assumes, functions such as strlen (or other string.h functions) used inside OS_CHECK_STRING could read beyond the bounds of the object. For example, if the caller passes a pointer to a buffer of length N that lacks a terminating '\\0', a strlen(sem_name) inside OS_CHECK_STRING would walk past the buffer boundary and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2873.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemCreate with it.\n  - Your function must have the exact same signature as OS_MutSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Open log file for tracing flow/state for violation repro */\n    {\n        FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER OS_MutSemCreate: sem_id=%p, sem_name=%p, options=0x%08x\\n\",\n                    (void *)sem_id, (void *)sem_name, (unsigned)options);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n\n    /* Log before APINAME check. Do not dereference sem_name to avoid introducing new overreads. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n        if (log)\n        {\n            if (sem_name == NULL)\n            {\n                fprintf(log, \"OS_CHECK_APINAME about to run: sem_name is NULL\\n\");\n            }\n            else\n            {\n                fprintf(log, \"OS_CHECK_APINAME about to run: sem_name is non-NULL (pointer=%p). Not dereferencing to avoid additional reads.\\n\",\n                        (void *)sem_name);\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    OS_CHECK_APINAME(sem_name);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"Returned from OS_CHECK_APINAME (control reached here).\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%ld, token=%u\\n\",\n                    (long)return_code, (unsigned)token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_OBJECT_TABLE_GET returned mutex=%p for token=%u\\n\", (void *)mutex, (unsigned)token);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"After OS_OBJECT_INIT (name saved).\\n\");\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"After OS_MutSemCreate_Impl: return_code=%ld\\n\", (long)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n            if (log)\n            {\n                if (sem_id != NULL)\n                {\n                    fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%ld, sem_id_ptr=%p, sem_id_value=%u\\n\",\n                            (long)return_code, (void *)sem_id, (unsigned)(*sem_id));\n                }\n                else\n                {\n                    fprintf(log, \"After OS_ObjectIdFinalizeNew: return_code=%ld, sem_id_ptr=NULL\\n\", (long)return_code);\n                }\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2873.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_MutSemCreate: return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}