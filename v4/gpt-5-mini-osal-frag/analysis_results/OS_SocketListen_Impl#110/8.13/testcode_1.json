{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET yields a pointer to a mutable table element (&tbl[index]) and in OS_SocketListen_Impl that pointer is assigned to a non-const OS_impl_file_internal_record_t * (impl) even though the function only reads the record (accesses impl->fd). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 here impl should be declared as const OS_impl_file_internal_record_t * (or the macro/table provide a const-qualified access) to reflect read-only use.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3105.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketListen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketListen_Impl with it.\n  - Your function must have the exact same signature as OS_SocketListen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketListen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketListen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open a log file to capture control flow and state for debugging the\n       potential MISRA Rule 8.13 violation. Use append mode so multiple runs\n       accumulate logs. */\n    FILE *log = fopen(\"/tmp/logs/3105.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and token information. We print the token pointer address\n           and attempt to print the token value as an unsigned long. The\n           original code dereferences the token when calling\n           OS_OBJECT_TABLE_GET, so this cast should reflect that use. */\n        fprintf(log, \"ENTER OS_SocketListen_Impl\\n\");\n        fprintf(log, \"  token_ptr=%p\\n\", (const void *)token);\n        /* Attempt to log the token value; this mirrors the original usage\n           of *token in the macro. */\n        fprintf(log, \"  token_value=(raw) %lu\\n\", (unsigned long)(*token));\n    }\n\n    /* Original behavior: retrieve the implementation record (mutable pointer).\n       This is the location the MISRA violation report references. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  impl_ptr=%p\\n\", (void *)impl);\n        if (impl != NULL)\n        {\n            /* Log the file descriptor inside the impl record (read-only access\n               performed by this function). */\n            fprintf(log, \"  impl->fd=%d\\n\", impl->fd);\n        }\n        else\n        {\n            fprintf(log, \"  impl is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Preserve original behavior: call listen on the file descriptor. */\n    os_result = listen(impl->fd, 10);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  listen returned=%d, errno=%d (%s)\\n\", os_result, errno, strerror(errno));\n        fflush(log);\n        fclose(log);\n    }\n\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}