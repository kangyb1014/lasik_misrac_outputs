{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nPotential indirect recursion: OS_printf calls OS_DEBUG when OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER. If OS_DEBUG is implemented using OS_printf (e.g. as a macro or wrapper that calls OS_printf), this creates an indirect recursive call chain OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2. (Similarly, if BUGCHECK_VOID or OS_ConsoleWrite ultimately invoke OS_printf, recursion can also occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/80.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkfs with it.\n  - Your function must have the exact same signature as OS_mkfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkfs to check logs.\n  - Your function MUST preserve the original logic of OS_mkfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    /* Include stdio here so logging declarations are available in this replacement function only. */\n    #include <stdio.h>\n\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Try to open the log file in append mode. If this fails, continue gracefully. */\n    logf = fopen(\"/tmp/logs/80.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_mkfs(address=%p, devname=%p, volname=%p, blocksize=%zu, numblocks=%llu)\\n\",\n                (void *)address,\n                (const void *)devname,\n                (const void *)volname,\n                blocksize,\n                (unsigned long long)numblocks);\n        fflush(logf);\n    }\n\n    /* Preserve original logic: call the filesystem initializer. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the raw result returned by OS_FileSys_Initialize. */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"INFO: OS_FileSys_Initialize returned %d\\n\", (int)return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /* Log that we are mapping historic filesystem-specific error codes to the\n         * preserved application-facing error code, then perform the mapping. */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"BRANCH: return_code matches historic FS-specific error (INCORRECT_OBJ_STATE=%d or NO_FREE_IDS=%d). Mapping to OS_FS_ERR_DEVICE_NOT_FREE=%d.\\n\",\n                    (int)OS_ERR_INCORRECT_OBJ_STATE,\n                    (int)OS_ERR_NO_FREE_IDS,\n                    (int)OS_FS_ERR_DEVICE_NOT_FREE);\n            fflush(logf);\n        }\n\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    /* Final return value log. Useful for downstream tracing and verifying the control path. */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_mkfs final return %d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}