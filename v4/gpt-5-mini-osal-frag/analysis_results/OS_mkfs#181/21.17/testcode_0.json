{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX, sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) can read past the end of filesys->volume_name. For example, if OS_FILESYS_RAMDISK_VOLNAME_PREFIX is longer than the storage for filesys->volume_name (so sizeof(prefix)-1 > sizeof(filesys->volume_name)), strncmp will attempt to read more bytes from filesys->volume_name than are present. Also, if filesys->volume_name is not NUL-terminated (possible because strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name)-1) may leave no terminator when the source length equals sizeof(filesys->volume_name)-1), then strncmp will read up to the specified length and may access beyond the object bounds. Both situations violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkfs with it.\n  - Your function must have the exact same signature as OS_mkfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkfs to check logs.\n  - Your function MUST preserve the original logic of OS_mkfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Open a log file for probes. Keep this best-effort: if fopen fails, continue normally. */\n    FILE *log = NULL;\n    do {\n        /* Attempt to create parent directory is outside scope; append mode so multiple runs accumulate evidence. */\n        log = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (log == NULL)\n        {\n            /* If logging cannot be opened, do not abort; proceed as original. */\n            break;\n        }\n\n        /* Log entry and input parameter state. */\n        fprintf(log, \"ENTER OS_mkfs\\n\");\n        fprintf(log, \"  address=%p\\n\", (void *)address);\n        fprintf(log, \"  devname=%p\\n\", (const void *)devname);\n        fprintf(log, \"  volname=%p\\n\", (const void *)volname);\n        fprintf(log, \"  blocksize=%zu\\n\", blocksize);\n        fprintf(log, \"  numblocks=%llu\\n\", (unsigned long long)numblocks);\n\n        /* Heuristic measurement of volname length (bounded) to help reproduce over-read scenarios. */\n        if (volname == NULL)\n        {\n            fprintf(log, \"  volname == NULL\\n\");\n        }\n        else\n        {\n            size_t vol_len = 0U;\n            /* Bound the scan to avoid unbounded scanning; this still gives useful evidence about short buffers. */\n            const size_t VOL_SCAN_LIMIT = 1024U;\n            while (vol_len < VOL_SCAN_LIMIT && volname[vol_len] != '\\0')\n            {\n                vol_len++;\n            }\n            if (vol_len == VOL_SCAN_LIMIT && volname[vol_len - 1] != '\\0')\n            {\n                fprintf(log, \"  volname_len>= %zu (scan limit reached)\\n\", VOL_SCAN_LIMIT);\n            }\n            else\n            {\n                fprintf(log, \"  volname_len=%zu\\n\", vol_len);\n            }\n\n            /* Dump the first up to 64 bytes of volname as hex and ASCII (printable) to aid in reproducing mismatch lengths. */\n            {\n                size_t dump = vol_len < 64U ? vol_len : 64U;\n                fprintf(log, \"  volname_dump_hex=\");\n                for (size_t i = 0U; i < dump; ++i)\n                {\n                    fprintf(log, \"%02x\", (unsigned char)volname[i]);\n                }\n                fprintf(log, \"\\n\");\n\n                fprintf(log, \"  volname_dump_ascii=\");\n                for (size_t i = 0U; i < dump; ++i)\n                {\n                    unsigned char c = (unsigned char)volname[i];\n                    if (c >= 32U && c <= 126U)\n                    {\n                        fputc((int)c, log);\n                    }\n                    else\n                    {\n                        fputc('.', log);\n                    }\n                }\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        fflush(log);\n    } while (0);\n\n    /* Preserve original behavior: call initializer and then map historic error codes. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_FileSys_Initialize returned %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /* This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        if (log != NULL)\n        {\n            fprintf(log, \"Mapping return_code %ld to OS_FS_ERR_DEVICE_NOT_FREE\\n\", (long)return_code);\n            fflush(log);\n        }\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_mkfs returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}