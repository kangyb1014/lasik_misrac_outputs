{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_STRING is not defined in the snippet, so its implementation cannot be proven safe. If OS_CHECK_STRING uses string.h functions such as strlen/strcpy/strncpy/memcpy without proper bounds-limited checks, a violation can occur. Example violation: if OS_CHECK_STRING calls strlen(fsdevname) (or otherwise reads fsdevname past its allocated size) when fsdevname is not NUL-terminated within the provided limit (sizeof(filesys->device_name)), strlen will read beyond the bounds of the object referenced by fsdevname \u2014 violating MISRA C 2023 Rule 21.17. Another possible violation scenario is if the macro attempts to copy into filesys->device_name before filesys is initialized, causing an out-of-bounds/invalid access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkfs with it.\n  - Your function must have the exact same signature as OS_mkfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkfs to check logs.\n  - Your function MUST preserve the original logic of OS_mkfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n    /* Log entry and input parameter state to help reproduce potential string-reading issues. */\n    {\n        FILE *log = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log pointer values rather than dereferencing strings to avoid accidental reads\n             * of unterminated or invalid memory. This captures the control flow and the\n             * addresses that may be used by downstream macros like OS_CHECK_STRING. */\n            fprintf(log, \"OS_mkfs ENTER: address=%p devname=%p volname=%p blocksize=%zu numblocks=%llu\\n\",\n                    (void *)address,\n                    (void *)devname,\n                    (void *)volname,\n                    blocksize,\n                    (unsigned long long)numblocks);\n            fclose(log);\n        }\n    }\n\n    /* Preserve original behavior: call the underlying initializer and capture its return. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the raw return code from the initializer for diagnostics. */\n    {\n        FILE *log = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_FileSys_Initialize returned: %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /* Log the mapping decision so the event and control path are evident in logs. */\n        {\n            FILE *log = fopen(\"/tmp/logs/83.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Mapping legacy error to OS_FS_ERR_DEVICE_NOT_FREE (was %d)\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        /* This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was already\n         * initialized, or if there were no free slots in the table.\n         *\n         * This code is preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    /* Final return value log to aid reproduction and verification. */\n    {\n        FILE *log = fopen(\"/tmp/logs/83.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_mkfs EXIT: returning %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}