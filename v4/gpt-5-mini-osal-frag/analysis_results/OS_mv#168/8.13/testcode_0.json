{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call violates Rule 8.13 if the prototype of OS_cp does not use const for its parameters. Example violating declaration: int32 OS_cp(char *src, char *dest); Passing the const char *src and const char *dest into a function that expects char * discards the const qualification and therefore breaches the requirement that pointer parameters should be const-qualified whenever possible. (If OS_cp is declared as int32 OS_cp(const char *src, const char *dest); then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mv code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1765.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mv code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mv with it.\n  - Your function must have the exact same signature as OS_mv.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mv to check logs.\n  - Your function MUST preserve the original logic of OS_mv as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mv will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mv as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n    FILE *log = NULL;\n\n    /* Open log file for appending; don't fail the operation if logging isn't available */\n    log = fopen(\"/tmp/logs/1765.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mv ENTER: src=%p dest=%p\\n\", (void *)src, (void *)dest);\n        /* Attempt to log the actual strings for easier reproduction; fall back if NULL */\n        fprintf(log, \"OS_mv PARAMS: src_str=\\\"%s\\\" dest_str=\\\"%s\\\"\\n\",\n                (src != NULL) ? src : \"(null)\", (dest != NULL) ? dest : \"(null)\");\n        fflush(log);\n    }\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mv: OS_rename returned %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            /* Record that we are about to call the fallback copy routine. */\n            fprintf(log, \"OS_mv: OS_rename failed, calling OS_cp(src, dest).\\n\");\n            /* Note for reviewers: the parameters here are const-qualified in this function. */\n            fprintf(log, \"OS_mv: NOTE: src and dest are const-qualified (const char *).\\n\");\n            fflush(log);\n        }\n\n        /* Call OS_cp exactly as in the original implementation to preserve behaviour */\n        return_code = OS_cp(src, dest);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_mv: OS_cp returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_mv: OS_cp succeeded, calling OS_remove(src).\\n\");\n                fflush(log);\n            }\n\n            OS_remove(src);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_mv: OS_remove called for src=%p\\n\", (void *)src);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mv EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}