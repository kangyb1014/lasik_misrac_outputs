{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds access when memchr is allowed to scan more bytes than remain in the VirtualPath string. For example, if VirtPathLen was computed as OS_MAX_PATH_LEN-1 (i.e. the string is long, but still accepted) and the last '/' is at index 0 so name_ptr points to VirtualPath+1, then the number of bytes remaining in the object beginning at name_ptr is (OS_MAX_PATH_LEN-1). If OS_MAX_FILE_NAME is greater than that remaining size, memchr(name_ptr, 0, OS_MAX_FILE_NAME) will read beyond the bounds of the VirtualPath object. The code as shown does not explicitly ensure OS_MAX_FILE_NAME cannot exceed the remaining bytes after name_ptr, so this use of memchr can violate MISRA C 2023 Rule 21.17 unless a project-wide guarantee exists that OS_MAX_FILE_NAME <= OS_MAX_PATH_LEN (or equivalent bounds are enforced).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mv code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mv code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mv with it.\n  - Your function must have the exact same signature as OS_mv.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mv to check logs.\n  - Your function MUST preserve the original logic of OS_mv as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mv will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mv as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* Local helper to compute string length up to a cap without scanning arbitrarily far */\n    size_t safe_len(const char *s, size_t cap)\n    {\n        size_t i = 0;\n        if (s == NULL) return 0;\n        while (i < cap && s[i] != '\\0')\n        {\n            ++i;\n        }\n        return i;\n    }\n\n    /* Attempt to open the primary log file; fall back to a simpler path if directory doesn't exist */\n    FILE *log = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/1763_fallback_1763.txt\", \"a\");\n    }\n\n    if (log != NULL)\n    {\n        /* Record entry and pointer values */\n        fprintf(log, \"OS_mv ENTER: src=%p dest=%p\\n\", (const void *)src, (const void *)dest);\n\n        /* Record limited-length views of the strings to avoid unbounded reads in the logger */\n        {\n            size_t src_cap = 1024;\n            size_t dest_cap = 1024;\n            size_t src_len = safe_len(src, src_cap);\n            size_t dest_len = safe_len(dest, dest_cap);\n\n            /* Print up to 256 characters of each string for context */\n            size_t show = 256;\n            if (src != NULL)\n            {\n                fprintf(log, \" src_len=%zu src_preview=\\\"\", src_len);\n                if (src_len > 0)\n                {\n                    fprintf(log, \"%.*s\", (int)(src_len < show ? src_len : show), src);\n                    if (src_len > show) fprintf(log, \"... (truncated)\");\n                }\n                fprintf(log, \"\\\"\\n\");\n            }\n            else\n            {\n                fprintf(log, \" src=NULL\\n\");\n            }\n\n            if (dest != NULL)\n            {\n                fprintf(log, \" dest_len=%zu dest_preview=\\\"\", dest_len);\n                if (dest_len > 0)\n                {\n                    fprintf(log, \"%.*s\", (int)(dest_len < show ? dest_len : show), dest);\n                    if (dest_len > show) fprintf(log, \"... (truncated)\");\n                }\n                fprintf(log, \"\\\"\\n\");\n            }\n            else\n            {\n                fprintf(log, \" dest=NULL\\n\");\n            }\n        }\n\n        fflush(log);\n    }\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mv: after OS_rename -> return_code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* If rename failed, try copy */\n        return_code = OS_cp(src, dest);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_mv: after OS_cp -> return_code=%d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            int32 rem_ret = OS_remove(src);\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_mv: after OS_remove(src) -> remove_return=%d\\n\", (int)rem_ret);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mv EXIT: final_return=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}