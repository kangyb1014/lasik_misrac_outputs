{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_GetStubEntry the loop uses while (1) whose controlling expression is the invariant constant 1. This loop is not intended to be an infinite loop (it relies on internal break conditions to terminate when SearchLen >= SearchLimit or when a matching entry is found), so the invariant controlling expression violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_DoSetHookFunction code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_DoSetHookFunction with it.\n  - Your function must have the exact same signature as UT_DoSetHookFunction.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_DoSetHookFunction to check logs.\n  - Your function MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_DoSetHookFunction will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/39.txt\", \"a\");\n\n    if (log)\n    {\n        /* Minimal entry log to demonstrate function was reached */\n        fprintf(log, \"ENTER: UT_DoSetHookFunction called. EntryType=%d ValueAddr=%s UserObj=%p IsVarg=%d\\n\",\n                (int)EntryType,\n                (Value.Addr != NULL) ? \"NON-NULL\" : \"NULL\",\n                UserObj,\n                (int)IsVarg);\n        fflush(log);\n    }\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    if (log)\n    {\n        fprintf(log, \"AFTER first UT_GetStubEntry: StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"StubPtr==NULL and Value.Addr!=NULL -> trying UT_ENTRYTYPE_UNUSED search\\n\");\n            fflush(log);\n        }\n\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log)\n        {\n            fprintf(log, \"AFTER second UT_GetStubEntry(UT_ENTRYTYPE_UNUSED): StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (log)\n            {\n                fprintf(log, \"No unused slot found - about to call UtAssert_Abort\\n\");\n                fflush(log);\n                fclose(log);\n            }\n\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n\n            /* In case UtAssert_Abort returns (defensive), ensure no use-after-free of log */\n            return;\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Deleting existing stub entry at %p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Setting stub entry at %p: FuncKey and EntryType set, UserObj=%p IsVarg=%d ValueAddr=%s\\n\",\n                    (void *)StubPtr,\n                    UserObj,\n                    (int)IsVarg,\n                    (Value.Addr != NULL) ? \"NON-NULL\" : \"NULL\");\n            fflush(log);\n        }\n\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: UT_DoSetHookFunction completed.\\n\");\n        fclose(log);\n    }\n}\n"
}