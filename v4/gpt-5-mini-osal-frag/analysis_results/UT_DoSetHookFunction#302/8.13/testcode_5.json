{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *UserObj' is not const-qualified even though UT_DoSetHookFunction does not modify the pointed-to object (it only stores the pointer into StubPtr->Data.Cb.CallbackArg). Per MISRA C 2023 Rule 8.13 this should be 'const void *UserObj' (and the stored CallbackArg adjusted accordingly) unless the function or later users actually modify the pointee. Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/35.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_DoSetHookFunction code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_DoSetHookFunction with it.\n  - Your function must have the exact same signature as UT_DoSetHookFunction.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_DoSetHookFunction to check logs.\n  - Your function MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_DoSetHookFunction will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    /* Logging probe: append control flow and key state to /tmp/logs/35.txt */\n    FILE *logf = fopen(\"/tmp/logs/35.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER UT_DoSetHookFunction: FuncKey=%lu EntryType=%lu Value.Addr=%p UserObj=%p IsVarg=%d\\n\",\n                (unsigned long)FuncKey, (unsigned long)EntryType, (void *)Value.Addr, UserObj, (int)IsVarg);\n        fflush(logf);\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_GetStubEntry(FuncKey, EntryType) -> %p\\n\", (void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No existing stub found and Value.Addr != NULL -> searching for UNUSED slot\\n\");\n            fflush(logf);\n        }\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED) -> %p\\n\", (void *)StubPtr);\n            fflush(logf);\n        }\n        if (StubPtr == NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"ERROR: Cannot set hook function - UT_MAX_FUNC_STUBS too low? About to UtAssert_Abort\\n\");\n                fflush(logf);\n                fclose(logf);\n            }\n            /* Preserve original abort behavior */\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n            /* UtAssert_Abort is expected to not return, but in case it does: */\n            return;\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Deleting existing stub at %p (Value.Addr == NULL)\\n\", (void *)StubPtr);\n            /* log previous stored callback arg if available */\n            fprintf(logf, \"Previous CallbackArg (pre-clear) = %p\\n\", (void *)StubPtr->Data.Cb.CallbackArg);\n            fflush(logf);\n        }\n        UT_ClearStubEntry(StubPtr);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Stub cleared at %p\\n\", (void *)StubPtr);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Setting stub at %p\\n\", (void *)StubPtr);\n            fprintf(logf, \"Previous FuncKey=%lu EntryType=%lu Previous CallbackArg=%p Previous Ptr=%p Previous IsVarg=%d\\n\",\n                    (unsigned long)StubPtr->FuncKey, (unsigned long)StubPtr->EntryType,\n                    (void *)StubPtr->Data.Cb.CallbackArg, (void *)StubPtr->Data.Cb.Ptr, (int)StubPtr->Data.Cb.IsVarg);\n            fflush(logf);\n        }\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        /* Log the pointer being stored into CallbackArg to capture the potential const-qualification issue */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Storing CallbackArg = %p (UserObj passed in)\\n\", UserObj);\n            fflush(logf);\n        }\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After set: FuncKey=%lu EntryType=%lu Stored CallbackArg=%p Stored Ptr=%p Stored IsVarg=%d\\n\",\n                    (unsigned long)StubPtr->FuncKey, (unsigned long)StubPtr->EntryType,\n                    (void *)StubPtr->Data.Cb.CallbackArg, (void *)StubPtr->Data.Cb.Ptr, (int)StubPtr->Data.Cb.IsVarg);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        /* No action required: either no slot found and Value.Addr == NULL, or other non-actionable combination */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No action taken: StubPtr=%p Value.Addr=%p\\n\", (void *)StubPtr, (void *)Value.Addr);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n}\n"
}