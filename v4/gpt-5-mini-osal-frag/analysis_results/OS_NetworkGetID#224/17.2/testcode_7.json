{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion is possible: if UT_ExecuteBasicHandler is passed as the DefaultHandler (and no final handler is already registered for FuncKey), the function will call UT_SetHandlerFunction to register itself as the final handler and then call UT_DefaultStubImpl, which will invoke the registered final handler. This yields the call chain UT_ExecuteBasicHandler -> UT_DefaultStubImpl -> (invoke final handler) -> UT_ExecuteBasicHandler, i.e. indirect self-call/recursion, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetID code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1840.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetID:\n```c\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    return IdBuf;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_NetworkGetID code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_NetworkGetID with it.\n  - Your function must have the exact same signature as OS_NetworkGetID.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_NetworkGetID to check logs.\n  - Your function MUST preserve the original logic of OS_NetworkGetID as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_NetworkGetID will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_NetworkGetID as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n    FILE *logf = NULL;\n\n    /* Probe: record entry and the address of local buffer so callers can\n     * correlate control flow and stack state when this function is invoked. */\n    logf = fopen(\"/tmp/logs/1840.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: %s:%d - OS_NetworkGetID called, &IdBuf=%p\\n\", __FILE__, __LINE__, (void *)&IdBuf);\n        fflush(logf);\n    }\n\n    /* always delegate to low-level API (original behavior preserved) */\n    int32 impl_res = OS_NetworkGetID_Impl(&IdBuf);\n\n    /* Log the result and decision taken by this wrapper */\n    if (logf != NULL)\n    {\n        if (impl_res != OS_SUCCESS)\n        {\n            fprintf(logf, \"OS_NetworkGetID_Impl returned %ld -> returning -1\\n\", (long)impl_res);\n        }\n        else\n        {\n            fprintf(logf, \"OS_NetworkGetID_Impl returned %ld, IdBuf=%ld -> returning IdBuf\\n\", (long)impl_res, (long)IdBuf);\n        }\n        fflush(logf);\n        fclose(logf);\n    }\n\n    if (impl_res != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure (preserve original behavior) */\n        return -1;\n    }\n\n    return IdBuf;\n}\n"
}