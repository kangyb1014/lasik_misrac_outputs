{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG. If OS_DEBUG is implemented using OS_printf (or otherwise invokes OS_printf, e.g. OS_DEBUG -> OS_printf or a chain that leads back to OS_printf), this produces an indirect recursive call sequence: OS_printf -> OS_DEBUG -> ... -> OS_printf, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectFdClear code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2290.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SelectFdClear code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SelectFdClear with it.\n  - Your function must have the exact same signature as OS_SelectFdClear.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SelectFdClear to check logs.\n  - Your function MUST preserve the original logic of OS_SelectFdClear as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SelectFdClear will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SelectFdClear as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* Minimal entry probe: log that the function was entered and the input parameters */\n    {\n        FILE *log = fopen(\"/tmp/logs/2290.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Use casts to avoid implicit-prototype warnings for unknown typedef sizes */\n            fprintf(log, \"ENTER: OS_SelectFdClear Set=%p objid=%llu\\n\", (void *)Set, (unsigned long long) objid);\n            fclose(log);\n        }\n    }\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n\n    /* Log the result of the ID-to-index translation */\n    {\n        FILE *log = fopen(\"/tmp/logs/2290.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdToArrayIndex -> return_code=%ld local_id=%llu\\n\", (long)return_code, (unsigned long long)local_id);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         *\n         * Capture before/after state for logging so an external agent can\n         * reproduce the sequence of operations that led to a potential\n         * indirect recursion via logging functions (written to a file\n         * to avoid any printf/OS_DEBUG-based recursion).\n         */\n        size_t index = (size_t)(local_id >> 3);\n        unsigned bit = (unsigned)(local_id & 0x7u);\n\n        /* Read the current byte, compute mask and new value */\n        unsigned char before = Set->object_ids[index];\n        unsigned char mask = (unsigned char)~(1u << bit);\n        unsigned char after  = (unsigned char)(before & mask);\n\n        /* Perform the original modification */\n        Set->object_ids[index] = after;\n\n        /* Log details of the bit clear operation */\n        FILE *log = fopen(\"/tmp/logs/2290.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log,\n                    \"Cleared bit: local_id=%llu index=%zu bit=%u before=0x%02x mask=0x%02x after=0x%02x\\n\",\n                    (unsigned long long)local_id, index, bit, (unsigned)before, (unsigned)mask, (unsigned)after);\n            fclose(log);\n        }\n    }\n\n    /* Final return probe */\n    {\n        FILE *log = fopen(\"/tmp/logs/2290.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_SelectFdClear return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}