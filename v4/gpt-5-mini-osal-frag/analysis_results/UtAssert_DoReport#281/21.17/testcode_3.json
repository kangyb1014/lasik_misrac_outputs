{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUtAssert_DoReport calls strlen(File) without validating that File points to a valid, null-terminated buffer. UtAssertEx forwards its File parameter to UtAssert_DoReport unchanged and does not check for NULL. If a caller passes File == NULL (or a non\u2013null-terminated buffer), strlen(File) will access memory beyond the bounds of the referenced object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_DoReport code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_DoReport with it.\n  - Your function must have the exact same signature as UtAssert_DoReport.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_DoReport to check logs.\n  - Your function MUST preserve the original logic of UtAssert_DoReport as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_DoReport will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                           const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Logging probe: record entry and parameter values to /tmp/logs/1263.txt */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"UtAssert_DoReport ENTERED\\n\");\n            fprintf(logf, \"  File ptr: %p\\n\", (const void *)File);\n            fprintf(logf, \"  LineNum: %u\\n\", (unsigned int)LineNum);\n            fprintf(logf, \"  SegmentNum: %u\\n\", (unsigned int)SegmentNum);\n            fprintf(logf, \"  TestSeq: %u\\n\", (unsigned int)TestSeq);\n            fprintf(logf, \"  MessageType: %u\\n\", (unsigned int)MessageType);\n            fprintf(logf, \"  SubsysName ptr: %p\\n\", (const void *)SubsysName);\n            fprintf(logf, \"  ShortDesc ptr: %p\\n\", (const void *)ShortDesc);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    /* Preserve original behavior: compute length using strlen (may crash if File is NULL)\n       Logging before this call records the pointer so a post-mortem can show the cause. */\n    FileLen = strlen(File);\n\n    /* Log the computed length */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  strlen(File) => %u\\n\", (unsigned int)FileLen);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    BasePtr = File + FileLen;\n\n    /* Trace the logic that finds the base filename; count iterations for additional evidence */\n    {\n        uint32 iter_count = 0;\n        while (FileLen > 0)\n        {\n            ++iter_count;\n            --BasePtr;\n            --FileLen;\n            if (*BasePtr == '/' || *BasePtr == '\\\\')\n            {\n                ++BasePtr;\n\n                /* Log where the separator was found and iteration count */\n                FILE *logf = fopen(\"/tmp/logs/1263.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Separator found at ptr: %p (iter=%u)\\n\", (const void *)BasePtr, (unsigned int)iter_count);\n                    fflush(logf);\n                    fclose(logf);\n                }\n\n                break;\n            }\n        }\n\n        /* If loop completed without finding separator, log final BasePtr and remaining FileLen(should be 0) */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1263.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  after loop: BasePtr=%p, remaining FileLen=%u, iterations=%u\\n\",\n                        (const void *)BasePtr, (unsigned int)FileLen, (unsigned int)iter_count);\n                fflush(logf);\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Build the original report string (preserve exact formatting and behavior) */\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    /* Log the final report buffer prior to sending it to UT_BSP_DoText */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  ReportBuffer: %s\\n\", ReportBuffer);\n            fprintf(logf, \"UtAssert_DoReport EXIT\\n\\n\");\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n"
}