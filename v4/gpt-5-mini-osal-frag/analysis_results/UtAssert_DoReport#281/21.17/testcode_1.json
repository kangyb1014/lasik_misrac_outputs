{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(File) can access memory beyond the bounds of the object referenced by File if File is NULL or not NUL-terminated. The subsequent loop uses BasePtr derived from that strlen result, but the actual string.h call (strlen) already risks out-of-bounds/undefined behavior. For example, if the caller passes File == NULL or a non-terminated buffer, strlen(File) will dereference invalid memory and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_DoReport code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_DoReport with it.\n  - Your function must have the exact same signature as UtAssert_DoReport.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_DoReport to check logs.\n  - Your function MUST preserve the original logic of UtAssert_DoReport as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_DoReport will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Logging probe: append state and control flow info to a logfile for reproduction/evidence */\n    {\n        FILE *log = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER UtAssert_DoReport\\n\");\n            fprintf(log, \"  File pointer: %p\\n\", (const void *)File);\n            fprintf(log, \"  LineNum: %u, SegmentNum: %u, TestSeq: %u, MessageType: %u\\n\",\n                    (unsigned int)LineNum, (unsigned int)SegmentNum, (unsigned int)TestSeq, (unsigned int)MessageType);\n            fprintf(log, \"  SubsysName: %s\\n\", SubsysName ? SubsysName : \"(null)\");\n            fprintf(log, \"  ShortDesc: %s\\n\", ShortDesc ? ShortDesc : \"(null)\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Preserve original behavior as much as possible while emitting evidence when File is NULL. */\n    if (File == NULL)\n    {\n        /* Record that calling strlen(NULL) in the original code would be UB/crash. */\n        FILE *log = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"  WARNING: File == NULL. Original code would call strlen(File) and dereference NULL.\\n\");\n            fflush(log);\n            fclose(log);\n        }\n\n        /* Avoid crashing the test harness: set FileLen to 0 and use a sentinel string for BasePtr. */\n        FileLen = 0U;\n        BasePtr = \"(null)\";\n    }\n    else\n    {\n        /* Call strlen as in the original implementation. This may trigger the reported violation\n           if File is not NUL-terminated; logging above captured the pointer so testers can\n           reproduce and inspect the input that leads to UB. */\n        FileLen = strlen(File);\n\n        /* Log the result of strlen and a small snapshot of the tail of the buffer. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1263.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"  strlen(File) -> %u\\n\", (unsigned int)FileLen);\n\n                /* Print up to 32 bytes from the end of the buffer (if accessible). */\n                unsigned int snap = (FileLen > 32U) ? 32U : FileLen;\n                if (snap > 0U)\n                {\n                    const char *start = File + (FileLen - snap);\n                    fprintf(log, \"  tail snapshot (len %u): \\\"\", (unsigned int)snap);\n                    /* Print safely as bytes to avoid relying on further NULs beyond the end. */\n                    for (unsigned int i = 0U; i < snap; ++i)\n                    {\n                        unsigned char c = (unsigned char)start[i];\n                        /* Print visible characters and escape others as hex. */\n                        if (c >= 0x20 && c <= 0x7e)\n                            fputc(c, log);\n                        else\n                            fprintf(log, \"\\\\x%02X\", c);\n                    }\n                    fprintf(log, \"\\\"\\n\");\n                }\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        BasePtr = File + FileLen;\n    }\n\n    /* Original logic: walk backwards to find the last path separator */\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    /* Format the report (same as original) */\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    /* Log the final formatted report for evidence */\n    {\n        FILE *log = fopen(\"/tmp/logs/1263.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"  Final ReportBuffer: %s\\n\", ReportBuffer);\n            fprintf(log, \"EXIT UtAssert_DoReport\\n\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n"
}