{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration extern OS_common_record_t *const OS_global_task_table provides a const pointer to a mutable OS_common_record_t. In OS_TaskGetInfo the code uses record = OS_OBJECT_TABLE_GET(OS_global_task_table, token) and only reads fields (name_entry, creator), so the pointer could/should be to a const-qualified type (e.g. extern const OS_common_record_t *const OS_global_task_table). Therefore this declaration violates MISRA C 2023 Rule 8.13 unless there is a justified need elsewhere in the code to modify the records via this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1485.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskGetInfo with it.\n  - Your function must have the exact same signature as OS_TaskGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TaskGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *log = NULL;\n\n    /* Open log file for append so multiple calls accumulate evidence */\n    log = fopen(\"/tmp/logs/1485.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_TaskGetInfo\\n\");\n        fprintf(log, \"  task_prop=%p\\n\", (void *)task_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    if (log)\n    {\n        fprintf(log, \"  After OS_CHECK_POINTER\\n\");\n    }\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (log)\n    {\n        fprintf(log, \"  OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fprintf(log, \"  token_addr=%p\\n\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"  record=%p\\n\", (void *)record);\n            fprintf(log, \"  task=%p\\n\", (void *)task);\n        }\n\n        if (record != NULL)\n        {\n            /* Log name_entry pointer and content (if present) safely */\n            if (log)\n            {\n                fprintf(log, \"  record->name_entry=%p\\n\", (void *)record->name_entry);\n            }\n\n            if (record->name_entry != NULL)\n            {\n                char namebuf[128];\n                /* Copy a bounded amount for logging to avoid overruns */\n                strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n                namebuf[sizeof(namebuf) - 1] = '\\0';\n                if (log)\n                {\n                    fprintf(log, \"  record->name_entry (truncated)='%s'\\n\", namebuf);\n                }\n            }\n\n            /* Log creator if possible */\n            if (log)\n            {\n                /* Cast to long for a generic integer print; this should be safe for most integral types */\n                fprintf(log, \"  record->creator=%ld\\n\", (long)record->creator);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"  record is NULL\\n\");\n            }\n        }\n\n        if (task != NULL)\n        {\n            if (log)\n            {\n                fprintf(log, \"  task->stack_size=%ld\\n\", (long)task->stack_size);\n                fprintf(log, \"  task->priority=%ld\\n\", (long)task->priority);\n            }\n\n            task_prop->stack_size = task->stack_size;\n            task_prop->priority   = task->priority;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"  task is NULL\\n\");\n            }\n\n            /* Preserve original behavior: still attempt to use other info if available */\n        }\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n\n        if (record != NULL)\n        {\n            task_prop->creator = record->creator;\n        }\n\n        if (log)\n        {\n            fprintf(log, \"  Populated task_prop: name='%s' creator=%ld stack_size=%ld priority=%ld\\n\",\n                    task_prop->name,\n                    (long)task_prop->creator,\n                    (long)task_prop->stack_size,\n                    (long)task_prop->priority);\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        if (log)\n        {\n            fprintf(log, \"  OS_TaskGetInfo_Impl returned %ld\\n\", (long)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"  OS_ObjectIdRelease called\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_TaskGetInfo returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}