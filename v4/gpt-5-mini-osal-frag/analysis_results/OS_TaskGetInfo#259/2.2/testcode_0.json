{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_TaskGetInfo_Impl(&token, task_prop) is dead code in the provided project: the implementation of OS_TaskGetInfo_Impl() simply returns OS_SUCCESS and has no side-effects, so removing the call would not change the behavior (the task_prop fields are already populated and the returned value remains OS_SUCCESS). Therefore the operation is executed but unnecessary and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1488.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskGetInfo with it.\n  - Your function must have the exact same signature as OS_TaskGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_TaskGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *logf = NULL;\n\n    /* Attempt to open the log file for appending control-flow and state info. */\n    logf = fopen(\"/tmp/logs/1488.txt\", \"a\");\n    if (logf == NULL)\n    {\n        /* Try a fallback location if the primary path is not writable. This is only\n           a best-effort attempt to ensure some logging occurs; failure to open the\n           log must not change the behavior of the function. */\n        logf = fopen(\"/tmp/1488_fallback.txt\", \"a\");\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TaskGetInfo: ENTER task_id=%llu, task_prop=%p\\n\",\n                (unsigned long long)task_id, (void *)task_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TaskGetInfo: pointer check passed\\n\");\n        fflush(logf);\n    }\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TaskGetInfo: cleared task_prop (first bytes)\\n\");\n        fflush(logf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TaskGetInfo: OS_ObjectIdGetById returned %d; token=%p\\n\",\n                (int)return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: populated fields before Impl call:\\n\");\n            fprintf(logf, \"  name='%s'\\n\", task_prop->name);\n            fprintf(logf, \"  creator=%llu\\n\", (unsigned long long)task_prop->creator);\n            fprintf(logf, \"  stack_size=%llu\\n\", (unsigned long long)task_prop->stack_size);\n            fprintf(logf, \"  priority=%llu\\n\", (unsigned long long)task_prop->priority);\n            fflush(logf);\n        }\n\n        /* Probe: log state immediately before calling the platform-specific implementation. */\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: about to call OS_TaskGetInfo_Impl with token=%p and task_prop=%p\\n\",\n                    (void *)&token, (void *)task_prop);\n            fflush(logf);\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %d\\n\", (int)return_code);\n            fprintf(logf, \"OS_TaskGetInfo: task_prop after Impl call:\\n\");\n            fprintf(logf, \"  name='%s'\\n\", task_prop->name);\n            fprintf(logf, \"  creator=%llu\\n\", (unsigned long long)task_prop->creator);\n            fprintf(logf, \"  stack_size=%llu\\n\", (unsigned long long)task_prop->stack_size);\n            fprintf(logf, \"  priority=%llu\\n\", (unsigned long long)task_prop->priority);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskGetInfo: token released\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TaskGetInfo: EXIT returning %d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}