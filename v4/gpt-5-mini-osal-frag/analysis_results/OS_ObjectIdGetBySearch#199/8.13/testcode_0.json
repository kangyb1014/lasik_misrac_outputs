{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointers 'base' and 'record' are declared as OS_common_record_t * but in this function they are only used for read-only access (reading record->active_id and passing record to MatchFunc which expects a const OS_common_record_t *). Therefore they could and should be declared as const OS_common_record_t *base and const OS_common_record_t *record to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2455.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdGetBySearch code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdGetBySearch with it.\n  - Your function must have the exact same signature as OS_ObjectIdGetBySearch.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdGetBySearch to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdGetBySearch will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and key parameter/state information */\n        fprintf(log, \"OS_ObjectIdGetBySearch: ENTRY\\n\");\n        fprintf(log, \"  lock_mode=%d\\n\", (int)lock_mode);\n        fprintf(log, \"  idtype=%d\\n\", (int)idtype);\n        fprintf(log, \"  MatchFunc=%p\\n\", (void *)MatchFunc);\n        fprintf(log, \"  arg=%p\\n\", arg);\n        fprintf(log, \"  token=%p\\n\", (void *)token);\n        fclose(log);\n    }\n\n    /* Preserve original behavior: start transaction */\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log state after transaction init (token pointer/address may have been updated) */\n    log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetBySearch: After TransactionInit\\n\");\n        fprintf(log, \"  token=%p\\n\", (void *)token);\n        fclose(log);\n    }\n\n    /* Perform the search for the next matching object */\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    /* Log result of the find operation */\n    log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetBySearch: After FindNextMatch\\n\");\n        fprintf(log, \"  return_code=%d\\n\", (int)return_code);\n        fprintf(log, \"  token=%p\\n\", (void *)token);\n        fclose(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we are converting the token */\n        log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch: Converting token (OS_ObjectIdConvertToken)\\n\");\n            fprintf(log, \"  token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n\n        return_code = OS_ObjectIdConvertToken(token);\n\n        log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch: After ConvertToken\\n\");\n            fprintf(log, \"  return_code=%d\\n\", (int)return_code);\n            fprintf(log, \"  token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n    }\n    else\n    {\n        /* Log cancellation path */\n        log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch: Cancelling transaction (OS_ObjectIdTransactionCancel)\\n\");\n            fprintf(log, \"  token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n\n        OS_ObjectIdTransactionCancel(token);\n\n        log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch: After TransactionCancel\\n\");\n            fprintf(log, \"  return_code=%d\\n\", (int)return_code);\n            fprintf(log, \"  token=%p\\n\", (void *)token);\n            fclose(log);\n        }\n    }\n\n    /* Final log before returning */\n    log = fopen(\"/tmp/logs/2455.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetBySearch: RETURN return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}