{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextMatch the code sets token->obj_id = OS_OBJECT_ID_UNDEFINED immediately after OS_ObjectIdTransactionInit has been called. OS_ObjectIdTransactionInit performs memset(token, 0, sizeof(*token)), which already initializes token->obj_id to zero. OS_ObjectIdDefined/related code treat the undefined ID as zero, so the explicit assignment is redundant \u2014 removing it would not change program behaviour. Therefore this executed assignment is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2458.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdGetBySearch code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdGetBySearch with it.\n  - Your function must have the exact same signature as OS_ObjectIdGetBySearch.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdGetBySearch to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdGetBySearch will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Attempt to open primary log file. If it fails, try a fallback. */\n    logf = fopen(\"/tmp/logs/2458.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/2458_fallback_2458.txt\", \"a\");\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_ObjectIdGetBySearch: lock_mode=%d, idtype=%d, MatchFunc=%p, arg=%p, token=%p\\n\",\n                (int)lock_mode, (int)idtype, (void *)MatchFunc, arg, (void *)token);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior: initialize transaction token */\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    if (logf != NULL)\n    {\n        /* Log the token state immediately after initialization. In the reported scenario,\n         * this initialization will zero the token, making an immediate assignment to\n         * token->obj_id redundant. Capture the obj_id value to provide evidence. */\n        if (token != NULL)\n        {\n            /* Print token->obj_id if available. Cast to unsigned long long for portability. */\n            fprintf(logf, \"After TransactionInit: token=%p, token->obj_id=%llu\\n\",\n                    (void *)token, (unsigned long long)token->obj_id);\n        }\n        else\n        {\n            fprintf(logf, \"After TransactionInit: token=NULL\\n\");\n        }\n        fflush(logf);\n    }\n\n    /* Call the search routine as before */\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After FindNextMatch: return_code=%d, token=%p\",\n                (int)return_code, (void *)token);\n        if (token != NULL)\n        {\n            fprintf(logf, \", token->obj_id=%llu\\n\", (unsigned long long)token->obj_id);\n        }\n        else\n        {\n            fprintf(logf, \"\\n\");\n        }\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ConvertToken: preparing to convert token=%p\\n\", (void *)token);\n            fflush(logf);\n        }\n\n        /* The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter. */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After ConvertToken: return_code=%d, token=%p, token->obj_id=%llu\\n\",\n                    (int)return_code, (void *)token, (unsigned long long)(token ? token->obj_id : 0ULL));\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"CancelTransaction: return_code=%d, token=%p\\n\", (int)return_code, (void *)token);\n            fflush(logf);\n        }\n\n        OS_ObjectIdTransactionCancel(token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After CancelTransaction: token=%p\\n\", (void *)token);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_ObjectIdGetBySearch: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}