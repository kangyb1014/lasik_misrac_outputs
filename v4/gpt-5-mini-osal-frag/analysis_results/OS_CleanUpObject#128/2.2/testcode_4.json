{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe default branch in the switch (default: break;) is reachable when OS_IdentifyObject(object_id) yields a value not covered by any case (e.g. an object type constant not listed). The only operation executed in that branch is a no-op break; whose removal would not change program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1368.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CleanUpObject code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CleanUpObject with it.\n  - Your function must have the exact same signature as OS_CleanUpObject.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CleanUpObject to check logs.\n  - Your function MUST preserve the original logic of OS_CleanUpObject as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CleanUpObject will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    int identified_type;\n    FILE *fp = fopen(\"/tmp/logs/1368.txt\", \"a\");\n\n    /* Preserve original behavior: count the object */\n    ObjectCount = (uint32 *)arg;\n\n    if (fp)\n    {\n        fprintf(fp, \"OS_CleanUpObject ENTER: object_id=%llu, ObjectCount_ptr=%p, before_count=%u\\n\",\n                (unsigned long long)object_id, (void *)ObjectCount, (unsigned) (ObjectCount ? *ObjectCount : 0));\n    }\n\n    ++(*ObjectCount);\n\n    if (fp)\n    {\n        fprintf(fp, \"OS_CleanUpObject: after increment count=%u\\n\", (unsigned)*ObjectCount);\n    }\n\n    /* Capture the identified type so we can log which branch is taken (including default) */\n    identified_type = OS_IdentifyObject(object_id);\n\n    if (fp)\n    {\n        fprintf(fp, \"OS_CleanUpObject: identified_type=%d\\n\", identified_type);\n    }\n\n    switch (identified_type)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_TASK -> OS_TaskDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_QUEUE -> OS_QueueDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_BINSEM -> OS_BinSemDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_COUNTSEM -> OS_CountSemDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_MUTEX -> OS_MutSemDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_MODULE -> OS_ModuleUnload(%llu)\\n\", (unsigned long long)object_id);\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_TIMEBASE -> OS_TimeBaseDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_TIMECB -> OS_TimerDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_STREAM -> OS_close(%llu)\\n\", (unsigned long long)object_id);\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_DIR -> OS_DirectoryClose(%llu)\\n\", (unsigned long long)object_id);\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            if (fp) fprintf(fp, \"OS_CleanUpObject: branch=OS_CONDVAR -> OS_CondVarDelete(%llu)\\n\", (unsigned long long)object_id);\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            /* Log explicitly when the default/no-op branch is taken to provide evidence of the dead-code scenario */\n            if (fp)\n            {\n                fprintf(fp, \"OS_CleanUpObject: branch=DEFAULT reached for identified_type=%d (no-op break)\\n\", identified_type);\n                fflush(fp);\n            }\n            break;\n    }\n\n    if (fp)\n    {\n        fprintf(fp, \"OS_CleanUpObject EXIT: object_id=%llu\\n\", (unsigned long long)object_id);\n        fclose(fp);\n    }\n}\n"
}