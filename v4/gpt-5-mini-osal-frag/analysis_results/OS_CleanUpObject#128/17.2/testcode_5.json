{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf UT_ExecuteBasicHandler is passed as the DefaultHandler (or if DefaultHandler ultimately resolves to call UT_ExecuteBasicHandler), the function registers that handler via UT_SetHandlerFunction and then calls UT_DefaultStubImpl which (as the stub dispatcher) will invoke the registered handler. This causes UT_ExecuteBasicHandler to be called again indirectly (UT_ExecuteBasicHandler -> UT_SetHandlerFunction -> UT_DefaultStubImpl -> handler -> UT_ExecuteBasicHandler), producing indirect recursion and thus violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1360.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CleanUpObject code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CleanUpObject with it.\n  - Your function must have the exact same signature as OS_CleanUpObject.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CleanUpObject to check logs.\n  - Your function MUST preserve the original logic of OS_CleanUpObject as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CleanUpObject will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    uint32 preCount;\n    uint32 postCount;\n    int objType;\n    FILE *log = NULL;\n\n    /* Try to open primary log file, fallback to /tmp if necessary */\n    log = fopen(\"/tmp/logs/1360.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/1360.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_CleanUpObject object_id=%lu arg=%p\\n\", (unsigned long)object_id, arg);\n        fflush(log);\n    }\n\n    ObjectCount = (uint32 *)arg;\n\n    /* Capture count before increment for diagnostics, then perform original increment */\n    preCount = *ObjectCount;\n    ++(*ObjectCount);\n    postCount = *ObjectCount;\n\n    if (log)\n    {\n        fprintf(log, \"ObjectCount before=%u after=%u\\n\", (unsigned)preCount, (unsigned)postCount);\n        fflush(log);\n    }\n\n    /* Preserve original behavior: identify object and perform appropriate cleanup */\n    objType = OS_IdentifyObject(object_id);\n\n    if (log)\n    {\n        fprintf(log, \"Identified object type=%d\\n\", objType);\n        fflush(log);\n    }\n\n    switch (objType)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_TASK -> calling OS_TaskDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_TaskDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_TaskDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_QUEUE -> calling OS_QueueDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_QueueDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_QueueDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_BINSEM -> calling OS_BinSemDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_BinSemDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_BinSemDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_COUNTSEM -> calling OS_CountSemDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_CountSemDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_CountSemDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_MUTEX -> calling OS_MutSemDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_MutSemDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_MutSemDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_MODULE -> calling OS_ModuleUnload(%lu)\\n\", (unsigned long)object_id);\n            OS_ModuleUnload(object_id);\n            if (log) fprintf(log, \"Returned: OS_ModuleUnload(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_TIMEBASE -> calling OS_TimeBaseDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_TimeBaseDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_TimeBaseDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_TIMECB -> calling OS_TimerDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_TimerDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_TimerDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_STREAM -> calling OS_close(%lu)\\n\", (unsigned long)object_id);\n            OS_close(object_id);\n            if (log) fprintf(log, \"Returned: OS_close(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_DIR -> calling OS_DirectoryClose(%lu)\\n\", (unsigned long)object_id);\n            OS_DirectoryClose(object_id);\n            if (log) fprintf(log, \"Returned: OS_DirectoryClose(%lu)\\n\", (unsigned long)object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            if (log) fprintf(log, \"Branch: OS_OBJECT_TYPE_OS_CONDVAR -> calling OS_CondVarDelete(%lu)\\n\", (unsigned long)object_id);\n            OS_CondVarDelete(object_id);\n            if (log) fprintf(log, \"Returned: OS_CondVarDelete(%lu)\\n\", (unsigned long)object_id);\n            break;\n        default:\n            if (log) fprintf(log, \"Branch: default -> no action for object_id=%lu\\n\", (unsigned long)object_id);\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_CleanUpObject object_id=%lu final_count=%u\\n\\n\", (unsigned long)object_id, (unsigned)postCount);\n        fclose(log);\n    }\n}\n"
}