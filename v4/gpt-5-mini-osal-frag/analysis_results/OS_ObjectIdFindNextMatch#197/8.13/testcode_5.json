{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'record' is declared as OS_common_record_t * but is only used for read-only access (used to read record->active_id and passed to MatchFunc which expects a const OS_common_record_t *). Therefore the pointer could and should be declared as const OS_common_record_t *; additionally the OS_OBJECT_TABLE_GET macro returns a non-const pointer. This violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1565.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFindNextMatch with it.\n  - Your function must have the exact same signature as OS_ObjectIdFindNextMatch.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFindNextMatch to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFindNextMatch will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n    FILE               *log = NULL;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Open log file for append. This records entry and state for debugging the\n       pointer const-qualification scenario reported by the other agent. */\n    log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Enter OS_ObjectIdFindNextMatch: obj_type=%u, start_idx=%u, start_obj_id=%u, obj_count=%u\\n\",\n                (unsigned)token->obj_type, (unsigned)token->obj_idx, (unsigned)token->obj_id, (unsigned)obj_count);\n    }\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (log)\n        {\n            fprintf(log, \"Loop: incremented obj_idx=%u\\n\", (unsigned)token->obj_idx);\n        }\n\n        if (token->obj_idx >= obj_count)\n        {\n            if (log)\n            {\n                fprintf(log, \"Loop: obj_idx >= obj_count (%u >= %u), breaking\\n\", (unsigned)token->obj_idx, (unsigned)obj_count);\n            }\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (log)\n        {\n            /* Log the record pointer value and the active_id observed. The pointer\n               returned by OS_OBJECT_TABLE_GET is intentionally non-const in the\n               current codebase; this is part of the scenario being investigated. */\n            fprintf(log, \"Record obtained: ptr=%p, active_id=%u\\n\", (void *)record, (unsigned)record->active_id);\n        }\n\n        /* Preserve original behavior: only call MatchFunc when the record's id\n           is defined. Evaluate OS_ObjectIdDefined exactly once and then call\n           MatchFunc once to avoid changing control flow or side effects. */\n        if (OS_ObjectIdDefined(record->active_id))\n        {\n            int match_result = MatchFunc(arg, token, record);\n\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdDefined=true, MatchFunc returned=%d\\n\", match_result);\n            }\n\n            if (match_result)\n            {\n                return_code   = OS_SUCCESS;\n                token->obj_id = record->active_id;\n\n                if (log)\n                {\n                    fprintf(log, \"Match found: obj_id=%u, obj_idx=%u, returning OS_SUCCESS\\n\",\n                            (unsigned)token->obj_id, (unsigned)token->obj_idx);\n                }\n\n                break;\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdDefined=false for record->active_id=%u\\n\", (unsigned)record->active_id);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Exit OS_ObjectIdFindNextMatch: return_code=%d, final_obj_idx=%u, final_obj_id=%u\\n\",\n                (int)return_code, (unsigned)token->obj_idx, (unsigned)token->obj_id);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}