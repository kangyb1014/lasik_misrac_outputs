{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'base' is declared as a mutable pointer (OS_common_record_t *base) but is only used for read-only access in this function (it is assigned from the global OS_common_table and only indexed/read via OS_OBJECT_TABLE_GET). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const OS_common_record_t *base). Thus the assignment 'base = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];' violates the rule (the pointer could and should be declared const). Note: similarly, 'record' could be declared const OS_common_record_t *record and passed unchanged to MatchFunc which accepts a const pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1565.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFindNextMatch with it.\n  - Your function must have the exact same signature as OS_ObjectIdFindNextMatch.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFindNextMatch to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFindNextMatch will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    /* Open log file for append. This records control flow and key state\n     * so other agents can reproduce the violation scenario evidence. */\n    FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ObjectIdFindNextMatch token=%p obj_type=%u obj_idx=%u\\n\",\n                (void *)token,\n                (unsigned)token->obj_type,\n                (unsigned)token->obj_idx);\n        fflush(log);\n    }\n\n    return_code = OS_ERR_NAME_NOT_FOUND;\n\n    /* Compute base index once so logging does not call helper multiple times. */\n    int base_index = OS_GetBaseForObjectType(token->obj_type);\n    base = &OS_common_table[base_index];\n    obj_count = OS_GetMaxForObjectType(token->obj_type);\n\n    if (log)\n    {\n        fprintf(log, \"Computed base_index=%d base_ptr=%p obj_count=%u\\n\",\n                base_index,\n                (void *)base,\n                (unsigned)obj_count);\n        fflush(log);\n    }\n\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (log)\n        {\n            fprintf(log, \"LOOP: incremented obj_idx=%u\\n\", (unsigned)token->obj_idx);\n            fflush(log);\n        }\n\n        if (token->obj_idx >= obj_count)\n        {\n            if (log)\n            {\n                fprintf(log, \"LOOP: obj_idx (%u) >= obj_count (%u), breaking\\n\",\n                        (unsigned)token->obj_idx,\n                        (unsigned)obj_count);\n                fflush(log);\n            }\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (log)\n        {\n            /* Log record pointer and active id if accessible. */\n            fprintf(log, \"LOOKUP: record_ptr=%p\\n\", (void *)record);\n            /* Protect dereference in case record is NULL (defensive logging). */\n            if (record != NULL)\n            {\n                fprintf(log, \"LOOKUP: record->active_id=%lu\\n\", (unsigned long)record->active_id);\n            }\n            else\n            {\n                fprintf(log, \"LOOKUP: record is NULL\\n\");\n            }\n            fflush(log);\n        }\n\n        if (record != NULL && OS_ObjectIdDefined(record->active_id))\n        {\n            if (log)\n            {\n                fprintf(log, \"CHECK: active_id defined, calling MatchFunc\\n\");\n                fflush(log);\n            }\n\n            /* Call MatchFunc once (preserve original short-circuit behavior). */\n            int match = MatchFunc(arg, token, record) ? 1 : 0;\n\n            if (log)\n            {\n                fprintf(log, \"MATCH: MatchFunc returned %d\\n\", match);\n                fflush(log);\n            }\n\n            if (match)\n            {\n                return_code   = OS_SUCCESS;\n                token->obj_id = record->active_id;\n\n                if (log)\n                {\n                    fprintf(log, \"FOUND: returning OS_SUCCESS obj_id=%lu obj_idx=%u\\n\",\n                            (unsigned long)token->obj_id,\n                            (unsigned)token->obj_idx);\n                    fflush(log);\n                }\n\n                break;\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"CHECK: active_id not defined or record NULL\\n\");\n                fflush(log);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: return_code=%d token->obj_id=%lu token->obj_idx=%u\\n\",\n                (int)return_code,\n                (unsigned long)token->obj_id,\n                (unsigned)token->obj_idx);\n        fclose(log);\n    }\n\n    return return_code;\n}"
}