{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'base' is initialized from the global OS_common_table and only used to read records (used to compute 'record' and read record->active_id). It is never used to modify the pointed objects, so it could and should be declared as pointing to a const-qualified type (const OS_common_record_t *base). Declaring it without const therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1565.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFindNextMatch with it.\n  - Your function must have the exact same signature as OS_ObjectIdFindNextMatch.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFindNextMatch to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFindNextMatch will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    /* Initial state logging: function entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_ObjectIdFindNextMatch: token=%p, obj_type=%u, obj_idx=%lu, obj_id=%lu\\n\",\n                    (void *)token,\n                    (unsigned)token->obj_type,\n                    (unsigned long)token->obj_idx,\n                    (unsigned long)token->obj_id);\n            fclose(log);\n        }\n    }\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log resolved base pointer and object count */\n    {\n        FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Resolved base=%p, obj_count=%lu\\n\", (void *)base, (unsigned long)obj_count);\n            fclose(log);\n        }\n    }\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        /* Log iteration progress */\n        {\n            FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Loop iteration: obj_idx=%lu, obj_count=%lu\\n\",\n                        (unsigned long)token->obj_idx, (unsigned long)obj_count);\n                fclose(log);\n            }\n        }\n\n        if (token->obj_idx >= obj_count)\n        {\n            /* Log early exit due to end of table */\n            FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Reached end: obj_idx=%lu >= obj_count=%lu\\n\",\n                        (unsigned long)token->obj_idx, (unsigned long)obj_count);\n                fclose(log);\n            }\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        /* Log record pointer and its active_id before evaluation */\n        {\n            FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n            if (log != NULL)\n            {\n                unsigned long active_id_val = 0u;\n                /* attempt to read active_id only if record is non-NULL to avoid crashes */\n                if (record != NULL)\n                {\n                    /* Note: reading record->active_id as in original function */\n                    active_id_val = (unsigned long)record->active_id;\n                }\n                fprintf(log, \"Record probe: record=%p, record->active_id=%lu\\n\",\n                        (void *)record, active_id_val);\n                fclose(log);\n            }\n        }\n\n        /* Preserve original short-circuit behavior: only call MatchFunc if active id is defined */\n        if (OS_ObjectIdDefined(record->active_id))\n        {\n            int match_result = 0;\n\n            /* Call MatchFunc and log its result */\n            match_result = MatchFunc(arg, token, record);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Active id defined: record->active_id=%lu, MatchFunc returned=%d\\n\",\n                            (unsigned long)record->active_id, match_result);\n                    fclose(log);\n                }\n            }\n\n            if (match_result)\n            {\n                return_code   = OS_SUCCESS;\n                token->obj_id = record->active_id;\n\n                FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Match found: token->obj_idx=%lu, token->obj_id=%lu, returning OS_SUCCESS\\n\",\n                            (unsigned long)token->obj_idx, (unsigned long)token->obj_id);\n                    fclose(log);\n                }\n\n                break;\n            }\n        }\n        else\n        {\n            /* Log when the record is not active */\n            FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Record not active: record=%p, active_id=%lu\\n\",\n                        (void *)record, (unsigned long)record->active_id);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final state logging: function exit */\n    {\n        FILE *log = fopen(\"/tmp/logs/1565.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_ObjectIdFindNextMatch: return_code=%ld, final obj_idx=%lu, final obj_id=%lu\\n\",\n                    (long)return_code, (unsigned long)token->obj_idx, (unsigned long)token->obj_id);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}"
}