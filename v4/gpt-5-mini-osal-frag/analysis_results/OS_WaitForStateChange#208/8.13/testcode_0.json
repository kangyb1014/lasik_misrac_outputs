{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_WaitForStateChange accepts a non-const pointer (OS_object_token_t *token) but only reads from the pointed object (uses token->obj_type). Because the function does not modify *token, the parameter should be declared as pointing to a const-qualified type (const OS_object_token_t *token) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_WaitForStateChange code that contains useful probe functions that print useful logs to a file \"/tmp/logs/315.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange:\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_WaitForStateChange code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_WaitForStateChange with it.\n  - Your function must have the exact same signature as OS_WaitForStateChange.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_WaitForStateChange to check logs.\n  - Your function MUST preserve the original logic of OS_WaitForStateChange as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_WaitForStateChange will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_WaitForStateChange as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    /* Logging probe file */\n    FILE *logf = fopen(\"/tmp/logs/315.txt\", \"a\");\n\n    if (logf != NULL)\n    {\n        /* Log entry with pointer and attempts */\n        fprintf(logf, \"OS_WaitForStateChange ENTER: token=%p attempts=%lu\\n\",\n                (void *)token,\n                (unsigned long)attempts);\n    }\n\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /* Resolve the object type state as in the original implementation */\n    objtype = &OS_objtype_state[token->obj_type];\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Resolved objtype: index=%lu objtype_ptr=%p owner_key(before)=%llu\\n\",\n                (unsigned long)token->obj_type,\n                (void *)objtype,\n                (unsigned long long)objtype->owner_key);\n    }\n\n    /* Save current owner key */\n    saved_unlock_key = objtype->owner_key;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Saved owner_key=%llu\\n\", (unsigned long long)saved_unlock_key);\n    }\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"owner_key set to OS_LOCK_KEY_INVALID\\n\");\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Calling OS_WaitForStateChange_Impl(obj_type=%lu, attempts=%lu)\\n\",\n                (unsigned long)token->obj_type,\n                (unsigned long)attempts);\n        fflush(logf);\n    }\n\n    /* The implementation layer takes care of the actual unlock + wait. */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Returned from OS_WaitForStateChange_Impl\\n\");\n    }\n\n    /* After return, this task owns the table again */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"owner_key restored to saved_unlock_key=%llu\\n\",\n                (unsigned long long)saved_unlock_key);\n        fprintf(logf, \"OS_WaitForStateChange EXIT: token=%p\\n\", (void *)token);\n        fclose(logf);\n    }\n}\n"
}