{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation can occur when the computed destination start or the source pointer do not reference at least ActualCopy bytes. Example: if StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize (e.g. TotalSize = 10, Position = 15) then the subtraction underflows producing a very large ActualCopy; even if ActualCopy is subsequently clamped by MaxSize (e.g. MaxSize = 2) the code still writes starting at BasePtr + 15 which is beyond the allocated buffer (TotalSize == 10). Another scenario is BasePtr == NULL (or LocalBuffer == NULL) \u2014 there is no null check before the memcpy, so the call can dereference/access invalid memory. In these cases the memcpy call can access beyond the bounds of the objects referenced by its pointer parameters, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_CopyFromLocal code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_CopyFromLocal with it.\n  - Your function must have the exact same signature as UT_Stub_CopyFromLocal.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_CopyFromLocal to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_CopyFromLocal will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n    FILE *logf = NULL;\n\n    /* Minimal entry probe */\n    logf = fopen(\"/tmp/logs/1233.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_CopyFromLocal ENTER: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu\\n\",\n                (unsigned long long)FuncKey, LocalBuffer, MaxSize);\n        fflush(logf);\n    }\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"  UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Compute how many bytes remain in the buffer (may underflow if Position > TotalSize) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        if (logf != NULL)\n        {\n            fprintf(logf,\n                    \"  Buffer state before clamp: BasePtr=%p, Position=%zu, TotalSize=%zu, computedActualCopy(before clamp)=%zu\\n\",\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position,\n                    StubPtr->Data.Buff.TotalSize,\n                    ActualCopy);\n            fflush(logf);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  Clamping ActualCopy from %zu to MaxSize=%zu\\n\", ActualCopy, MaxSize);\n                fflush(logf);\n            }\n\n            ActualCopy = MaxSize;\n        }\n\n        if (logf != NULL)\n        {\n            void *destptr = (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position];\n            fprintf(logf, \"  About to memcpy: dest=%p, src=%p, bytes=%zu\\n\", destptr, LocalBuffer, ActualCopy);\n            fflush(logf);\n        }\n\n        /* Original behavior: perform the copy (may violate bounds if pointers/sizes are invalid) */\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  After memcpy: new Position=%zu\\n\", StubPtr->Data.Buff.Position);\n            fflush(logf);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  Position >= TotalSize (%zu >= %zu): calling UT_ClearStubEntry(%p)\\n\",\n                        StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize, (void *)StubPtr);\n                fflush(logf);\n            }\n\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  StubPtr is NULL, nothing to copy\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_CopyFromLocal EXIT: ActualCopy=%zu\\n\\n\", ActualCopy);\n        fclose(logf);\n    }\n\n    return ActualCopy;\n}\n"
}