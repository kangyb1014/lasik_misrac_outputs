{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If the search target (ref) is a shorter buffer or not null-terminated and shorter than mplen then the code can access beyond the target buffer. Example: filesys->virtual_mountpt == \"/mnt/abc\" so mplen == 8, but target points to a buffer containing \"/mnt\" (length 4) or a non-terminated buffer smaller than 8. The prior strncmp(target, filesys->virtual_mountpt, mplen) would already read beyond the bounds of target (violating Rule 21.17) and the subsequent access target[mplen] would also be out-of-bounds. There is no check that target is at least mplen+1 bytes long, so the code can violate the rule in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSys_FindVirtMountPoint with it.\n  - Your function must have the exact same signature as OS_FileSys_FindVirtMountPoint.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSys_FindVirtMountPoint to check logs.\n  - Your function MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSys_FindVirtMountPoint will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n    FILE *                        log = NULL;\n\n    /* Try to open the preferred log path; fall back if the directory does not exist */\n    log = fopen(\"/tmp/logs/3223.txt\", \"a\");\n    if (log == NULL)\n    {\n        log = fopen(\"/tmp/3223_fallback_3223.txt\", \"a\");\n    }\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileSys_FindVirtMountPoint entered: ref=%p token=%p obj=%p filesys=%p\\n\",\n                ref, (const void *)token, (const void *)obj, (const void *)filesys);\n    }\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early exit: not a virtual mount (flags=0x%08x)\\n\", filesys->flags);\n            fclose(log);\n        }\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    if (log)\n    {\n        /* Log the virtual_mountpt contents up to the measured length (safe) */\n        fprintf(log, \"virtual_mountpt addr=%p mplen=%zu bufsize=%zu\\n\",\n                (const void *)filesys->virtual_mountpt, mplen, sizeof(filesys->virtual_mountpt));\n        fprintf(log, \"virtual_mountpt (len %zu)='%.*s'\\n\",\n                mplen, (int)mplen, filesys->virtual_mountpt);\n        fprintf(log, \"target ptr=%p\\n\", (const void *)target);\n    }\n\n    /* Preserve original short-circuit evaluation semantics exactly */\n    if (mplen == 0)\n    {\n        if (log)\n        {\n            fprintf(log, \"Not a match: mplen == 0\\n\");\n            fclose(log);\n        }\n        return false;\n    }\n\n    if (mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        if (log)\n        {\n            fprintf(log, \"Not a match: mplen >= sizeof(virtual_mountpt) (mplen=%zu, sizeof=%zu)\\n\",\n                    mplen, sizeof(filesys->virtual_mountpt));\n            fclose(log);\n        }\n        return false;\n    }\n\n    /* Perform the same string comparison as the original code (this may read from target) */\n    {\n        int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n        if (log)\n        {\n            fprintf(log, \"strncmp(target, virtual_mountpt, %zu) returned %d\\n\", mplen, cmp);\n        }\n        if (cmp != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Not a match: prefix comparison failed\\n\");\n                fclose(log);\n            }\n            return false;\n        }\n    }\n\n    /* Now evaluate the terminating character at target[mplen] as the original code does */\n    {\n        char ch = target[mplen]; /* original code reads this; keep behavior identical */\n        bool result = (ch == '/' || ch == 0);\n        if (log)\n        {\n            /* Print the character and its numeric value for better diagnostics */\n            fprintf(log, \"Character at target[mplen] (index %zu): value=%d char=%c match=%s\\n\",\n                    mplen, (int)(unsigned char)ch, (ch >= 32 && ch < 127) ? ch : '?', result ? \"true\" : \"false\");\n            fclose(log);\n        }\n        return result;\n    }\n}\n"
}