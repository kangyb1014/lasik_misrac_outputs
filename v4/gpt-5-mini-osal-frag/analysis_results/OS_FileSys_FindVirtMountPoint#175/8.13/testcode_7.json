{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'char *address;' is not const-qualified. If this pointer only references immutable data (e.g. a device address or string constant) and is never used to modify the pointee, it should be declared 'const char *address;'. As written this is a violation of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_FileSys_FindVirtMountPoint with it.\n  - Your function must have the exact same signature as OS_FileSys_FindVirtMountPoint.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_FileSys_FindVirtMountPoint to check logs.\n  - Your function MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_FileSys_FindVirtMountPoint will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n    FILE *log = fopen(\"/tmp/logs/3225.txt\", \"a\");\n\n    /* Retrieve filesys record as original implementation */\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (log != NULL)\n    {\n        /* Log entry and key pointers/state for reproducing the scenario */\n        fprintf(log, \"OS_FileSys_FindVirtMountPoint ENTER\\n\");\n        fprintf(log, \"  ref (target ptr) = %p\\n\", (void *)ref);\n        fprintf(log, \"  token ptr = %p\\n\", (const void *)token);\n        fprintf(log, \"  filesys ptr = %p\\n\", (void *)filesys);\n    }\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  flags = 0x%08x (not a virtual mount)\\n\", (unsigned)filesys->flags);\n            fprintf(log, \"OS_FileSys_FindVirtMountPoint LEAVE: false (not mounted virtual)\\n\\n\");\n            fclose(log);\n        }\n\n        return false;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  flags = 0x%08x (mounted virtual)\\n\", (unsigned)filesys->flags);\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    if (log != NULL)\n    {\n        /* Log the mount point and computed length */\n        fprintf(log, \"  virtual_mountpt = '%s'\\n\", filesys->virtual_mountpt);\n        fprintf(log, \"  computed mplen = %zu\\n\", mplen);\n        fprintf(log, \"  sizeof(virtual_mountpt) = %zu\\n\", sizeof(filesys->virtual_mountpt));\n        fprintf(log, \"  target (as string) = '%s'\\n\", (target != NULL) ? target : \"(null)\");\n    }\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        if (log != NULL)\n        {\n            int cmp = 0;\n            if (target != NULL)\n            {\n                cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n            }\n            fprintf(log, \"  substring check: mplen==0? %d, mplen>=sizeof? %d, strncmp result = %d\\n\",\n                    (int)(mplen == 0), (int)(mplen >= sizeof(filesys->virtual_mountpt)), cmp);\n            fprintf(log, \"OS_FileSys_FindVirtMountPoint LEAVE: false (not a substring)\\n\\n\");\n            fclose(log);\n        }\n\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     */\n    /* For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    int result = (target[mplen] == '/' || target[mplen] == 0);\n\n    if (log != NULL)\n    {\n        /* Log the character at the match boundary and the final result */\n        char boundary = target[mplen];\n        /* Print printable representation or numeric value if not printable */\n        if (boundary == '\\0')\n        {\n            fprintf(log, \"  boundary char = '\\\\0' (end of string)\\n\");\n        }\n        else\n        {\n            fprintf(log, \"  boundary char = '%c' (0x%02x)\\n\", (boundary >= 32 && boundary < 127) ? boundary : '?', (unsigned char)boundary);\n        }\n        fprintf(log, \"OS_FileSys_FindVirtMountPoint LEAVE: %s\\n\\n\", result ? \"true\" : \"false\");\n        fclose(log);\n    }\n\n    return (result != 0);\n}\n"
}