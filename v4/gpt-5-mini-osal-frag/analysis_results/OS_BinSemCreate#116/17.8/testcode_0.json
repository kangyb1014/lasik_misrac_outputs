{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_BinSemCreate_Impl directly assigns to the non-pointer parameter 'initial_value' (initial_value = 1 when initial_value > 1). This is a direct modification of a function parameter and violates MISRA C 2023 Rule 17.8. Suggested fix: copy the parameter into a local variable (e.g. uint32 local_initial = initial_value;) and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1462.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemCreate with it.\n  - Your function must have the exact same signature as OS_BinSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Open log file for probing control flow and state. Keep append mode so repeated tests accumulate evidence. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_BinSemCreate: sem_name=\\\"%s\\\", sem_initial_value=%u, options=%u\\n\",\n                    (sem_name != NULL) ? sem_name : \"(null)\", (unsigned)sem_initial_value, (unsigned)options);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log allocation result */\n    {\n        FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Log state just before calling the OS-specific implementation. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n            if (log != NULL)\n            {\n                /* token may be an opaque type; log its address and the binsem pointer for correlation */\n                fprintf(log, \"About to call OS_BinSemCreate_Impl: token_addr=%p, binsem=%p, sem_initial_value=%u, options=%u\\n\",\n                        (void *)&token, (void *)binsem, (unsigned)sem_initial_value, (unsigned)options);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log the result of the OS-specific implementation. Also log the original sem_initial_value again so callers can see whether it changed (it should not change for a non-pointer parameter). */\n        {\n            FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_BinSemCreate_Impl returned %d; observed sem_initial_value after call=%u\\n\",\n                        (int)return_code, (unsigned)sem_initial_value);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Finalize logging for this path. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %d; final sem_id=%p\\n\", (int)return_code, (void *)sem_id);\n                fprintf(log, \"EXIT OS_BinSemCreate: return_code=%d\\n\\n\", (int)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log the early-exit path when allocation failed. */\n        FILE *log = fopen(\"/tmp/logs/1462.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BinSemCreate early exit: allocation failed with %d\\n\\n\", (int)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}