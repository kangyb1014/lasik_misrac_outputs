{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away const: OS_ObjectIdFindNextMatch has a parameter of type void * (non-const), but the variable name is const char *name. The code does (void *)name which removes the const qualifier from the pointer. This discards const and therefore violates MISRA C 2023 Rule 8.13. A compliant fix is to change the callee to take a const void * (or otherwise preserve const) and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1465.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemCreate with it.\n  - Your function must have the exact same signature as OS_BinSemCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemCreate to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Log entry and input state to help reproduce const-cast scenario */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ENTER: OS_BinSemCreate\\n\");\n            fprintf(fp, \"  sem_id_ptr=%p\\n\", (void *)sem_id);\n            fprintf(fp, \"  sem_name_ptr=%p\\n\", (const void *)sem_name);\n            fprintf(fp, \"  sem_name=\\\"%s\\\"\\n\", (sem_name != NULL) ? sem_name : \"(null)\");\n            fprintf(fp, \"  sem_initial_value=%u\\n\", (unsigned)sem_initial_value);\n            fprintf(fp, \"  options=%u\\n\", (unsigned)options);\n            fclose(fp);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log allocate result and token info */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"After OS_ObjectIdAllocateNew: return_code=%d\\n\", (int)return_code);\n            /* token may be an integer or struct; print its stack address for correlation */\n            fprintf(fp, \"  token_addr=%p\\n\", (void *)&token);\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"Calling OS_BinSemCreate_Impl: token_addr=%p sem_name_ptr=%p name=\\\"%s\\\"\\n\",\n                        (void *)&token, (const void *)sem_name, (sem_name != NULL) ? sem_name : \"(null)\");\n                fclose(fp);\n            }\n        }\n\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result of OS_BinSemCreate_Impl */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"After OS_BinSemCreate_Impl: return_code=%d\\n\", (int)return_code);\n                fclose(fp);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log finalization and output id pointer */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"After OS_ObjectIdFinalizeNew: return_code=%d\\n\", (int)return_code);\n                fprintf(fp, \"  out_sem_id_ptr=%p\\n\", (void *)sem_id);\n                if (sem_id != NULL)\n                {\n                    /* Print the pointer value; actual type of *sem_id is opaque here, so avoid dereferencing */\n                    fprintf(fp, \"  note: sem_id value not printed (opaque type)\\n\");\n                }\n                fprintf(fp, \"EXIT: OS_BinSemCreate\\n\\n\");\n                fclose(fp);\n            }\n        }\n    }\n    else\n    {\n        /* Log that allocation failed and we are exiting early */\n        FILE *fp = fopen(\"/tmp/logs/1465.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_ObjectIdAllocateNew failed, returning %d\\n\", (int)return_code);\n            fprintf(fp, \"EXIT: OS_BinSemCreate (early)\\n\\n\");\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}