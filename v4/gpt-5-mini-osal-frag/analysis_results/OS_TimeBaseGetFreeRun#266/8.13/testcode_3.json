{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timebase' is only used to read fields (timebase->freerun_time) and is never modified; it therefore could and should be declared as a pointer to a const-qualified type (const OS_timebase_internal_record_t *timebase). Declaring it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3365.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBaseGetFreeRun with it.\n  - Your function must have the exact same signature as OS_TimeBaseGetFreeRun.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBaseGetFreeRun to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBaseGetFreeRun will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Open log file for appending; best-effort (do not change function behavior on failure) */\n    FILE *logf = fopen(\"/tmp/logs/3365.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_TimeBaseGetFreeRun: timebase_id=%lu, freerun_val_ptr=%p\\n\",\n                (unsigned long)timebase_id, (void *)freerun_val);\n        fflush(logf);\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    if (logf != NULL)\n    {\n        /* Log result of object lookup and some info about the token object (address and size)\n         * Note: token's internal fields are implementation-defined; avoid accessing them here. */\n        fprintf(logf, \"After OS_ObjectIdGetById: return_code=%d, token_addr=%p, token_size=%zu\\n\",\n                (int)return_code, (void *)&token, sizeof(token));\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        if (logf != NULL)\n        {\n            /* Log the timebase pointer and the value read from its freerun_time field\n             * This shows that timebase is only read (evidence for const-qualification possibility). */\n            fprintf(logf, \"timebase_ptr=%p, timebase->freerun_time=%lu\\n\",\n                    (void *)timebase, (unsigned long)timebase->freerun_time);\n            fflush(logf);\n        }\n\n        *freerun_val = timebase->freerun_time;\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBaseGetFreeRun: object lookup failed, not dereferencing timebase\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_TimeBaseGetFreeRun: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}