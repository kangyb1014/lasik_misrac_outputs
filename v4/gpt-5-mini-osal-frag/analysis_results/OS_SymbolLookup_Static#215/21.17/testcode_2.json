{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code may call strcmp(StaticSym->Module, ModuleName) when ModuleName != NULL but StaticSym->Module == NULL. The function checks only StaticSym->Name for NULL; there is no guarantee StaticSym->Module is non-NULL, so strcmp can be invoked with a NULL pointer, causing out-of-bounds access/UB and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SymbolLookup_Static code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SymbolLookup_Static with it.\n  - Your function must have the exact same signature as OS_SymbolLookup_Static.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SymbolLookup_Static to check logs.\n  - Your function MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SymbolLookup_Static will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    FILE *log = NULL;\n\n    /* Attempt to open log file for appending. If this fails, proceed without logging. */\n    log = fopen(\"/tmp/logs/3343.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SymbolLookup_Static ENTRY: StaticSym=%p, SymbolName=%p (%s), ModuleName=%p (%s)\\n\",\n                (void *)StaticSym,\n                (void *)SymbolName,\n                (SymbolName != NULL) ? SymbolName : \"(null)\",\n                (void *)ModuleName,\n                (ModuleName != NULL) ? ModuleName : \"(null)\");\n        fflush(log);\n    }\n\n    while (StaticSym != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Inspect StaticSym=%p Name=%p Module=%p Address=%p\\n\",\n                    (void *)StaticSym,\n                    (void *)StaticSym->Name,\n                    (void *)StaticSym->Module,\n                    (void *)StaticSym->Address);\n            fflush(log);\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            if (log != NULL)\n            {\n                fprintf(log, \"Reached end of symbol list (Name==NULL). Setting return_code = OS_ERROR\\n\");\n                fflush(log);\n            }\n\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* Compare symbol names (preserve exact original call semantics). */\n        if (log != NULL)\n        {\n            fprintf(log, \"Comparing Name (at %p) to SymbolName (at %p): Name_str=%s\\n\",\n                    (void *)StaticSym->Name,\n                    (void *)SymbolName,\n                    (StaticSym->Name != NULL) ? StaticSym->Name : \"(null)\");\n            fflush(log);\n        }\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0)\n        {\n            /* Name matches - now evaluate Module condition exactly as original code did. */\n            if (ModuleName == NULL)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"ModuleName is NULL -> treat as match (no module filter).\\n\");\n                    fflush(log);\n                }\n\n                /* found matching symbol */\n                *SymbolAddress = (cpuaddr)StaticSym->Address;\n                return_code    = OS_SUCCESS;\n                if (log != NULL)\n                {\n                    fprintf(log, \"Found symbol (no module filter). Address=%p Returning OS_SUCCESS\\n\", (void *)StaticSym->Address);\n                    fflush(log);\n                }\n                break;\n            }\n            else\n            {\n                /* Log that the code is about to call strcmp on the Module pointers. This preserves the original behavior\n                 * where strcmp may be invoked with a NULL pointer (and thus can demonstrate the violation). */\n                if (log != NULL)\n                {\n                    fprintf(log, \"About to call strcmp(StaticSym->Module=%p, ModuleName=%p)\\n\",\n                            (void *)StaticSym->Module,\n                            (void *)ModuleName);\n                    fflush(log);\n                }\n\n                if (strcmp(StaticSym->Module, ModuleName) == 0)\n                {\n                    /* found matching symbol */\n                    *SymbolAddress = (cpuaddr)StaticSym->Address;\n                    return_code    = OS_SUCCESS;\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Found symbol (module matched). Address=%p Returning OS_SUCCESS\\n\", (void *)StaticSym->Address);\n                        fflush(log);\n                    }\n                    break;\n                }\n                else\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Module strcmp did not match. Continuing search.\\n\");\n                        fflush(log);\n                    }\n                }\n            }\n        }\n\n        ++StaticSym;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SymbolLookup_Static EXIT: return_code=%d\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}