{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without first verifying that both pointers are non-NULL and that they point to valid, null-terminated strings. If either pointer is NULL (e.g. caller passes NULL for TypeName or ContentTypeStr was never initialized) or points to a non-terminated buffer, strcmp will read beyond the object bounds and cause undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority code that contains useful probe functions that print useful logs to a file \"/tmp/logs/303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskSetPriority code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskSetPriority with it.\n  - Your function must have the exact same signature as OS_TaskSetPriority.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskSetPriority to check logs.\n  - Your function MUST preserve the original logic of OS_TaskSetPriority as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskSetPriority will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskSetPriority as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Logging probe: append control-flow/state information to the log file so other agents\n     * can reproduce and gather evidence for potential violations. The logging is intentionally\n     * non-intrusive and preserves the original function logic and return values. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n        if (logf)\n        {\n            /* Print entry and parameter values. Cast to integer types to avoid format warnings\n             * if the typedefs are not plain integers. */\n            fprintf(logf, \"OS_TaskSetPriority ENTRY: task_id=%llu new_priority=%lld\\n\",\n                    (unsigned long long)task_id, (long long)new_priority);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log the result of object id lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskSetPriority: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log token and task pointer state before calling implementation. */\n        {\n            FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_TaskSetPriority: token_addr=%p task_ptr=%p\\n\", (void *)&token, (void *)task);\n                if (task != NULL)\n                {\n                    /* Attempt to log the current priority value in a safe manner. */\n                    fprintf(logf, \"OS_TaskSetPriority: current_task_priority=%lld\\n\", (long long)task->priority);\n                }\n                else\n                {\n                    fprintf(logf, \"OS_TaskSetPriority: task is NULL\\n\");\n                }\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        /* Log the result of the implementation call */\n        {\n            FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_TaskSetPriority: OS_TaskSetPriority_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            {\n                FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n                if (logf)\n                {\n                    if (task != NULL)\n                    {\n                        fprintf(logf, \"OS_TaskSetPriority: updating task->priority from %lld to %lld\\n\",\n                                (long long)task->priority, (long long)new_priority);\n                    }\n                    else\n                    {\n                        fprintf(logf, \"OS_TaskSetPriority: task is NULL, cannot update priority\\n\");\n                    }\n                    fclose(logf);\n                }\n            }\n\n            if (task != NULL)\n            {\n                task->priority = new_priority;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release action */\n        {\n            FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_TaskSetPriority: OS_ObjectIdRelease called\\n\");\n                fclose(logf);\n            }\n        }\n    }\n\n    /* Final return logging */\n    {\n        FILE *logf = fopen(\"/tmp/logs/303.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_TaskSetPriority EXIT: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}