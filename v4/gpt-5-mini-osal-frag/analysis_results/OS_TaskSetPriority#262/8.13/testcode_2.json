{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_TaskSetPriority_Impl is declared to take a non-const pointer (e.g. int32 OS_TaskSetPriority_Impl(OS_object_token_t *token, osal_priority_t new_priority)) but does not modify the object pointed to, this call violates MISRA C 2023 Rule 8.13. The pointer parameter should be const-qualified (const OS_object_token_t *) whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority code that contains useful probe functions that print useful logs to a file \"/tmp/logs/305.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskSetPriority code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskSetPriority with it.\n  - Your function must have the exact same signature as OS_TaskSetPriority.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskSetPriority to check logs.\n  - Your function MUST preserve the original logic of OS_TaskSetPriority as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskSetPriority will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskSetPriority as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Open a log file to record control flow and state. Try the requested path first,\n     * fall back to /tmp/305.txt if that fails. If both fail, continue without logging. */\n    FILE *logf = fopen(\"/tmp/logs/305.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/305.txt\", \"a\");\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"ENTER: OS_TaskSetPriority(task_id=%lu, new_priority=%ld)\\n\",\n                (unsigned long)task_id, (long)new_priority);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"After OS_ObjectIdGetById: return_code=%ld\\n\", (long)return_code);\n\n        /* Dump a hex blob of the token to help reproduce cases where the token contents matter. */\n        {\n            size_t token_sz = sizeof(token);\n            unsigned char *b = (unsigned char *)&token;\n            fprintf(logf, \"Token dump (first up to 32 bytes, total %zu):\", token_sz);\n            for (size_t idx = 0; idx < token_sz && idx < 32; ++idx)\n            {\n                fprintf(logf, \" %02x\", (unsigned)b[idx]);\n            }\n            fprintf(logf, \"\\n\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (logf)\n        {\n            fprintf(logf, \"Resolved task pointer=%p\\n\", (void *)task);\n            if (task != NULL)\n            {\n                fprintf(logf, \"Current table priority=%ld\\n\", (long)task->priority);\n            }\n            else\n            {\n                fprintf(logf, \"Warning: task pointer is NULL after OS_OBJECT_TABLE_GET\\n\");\n            }\n        }\n\n        /* Call the implementation. This is the call reported in the violation scenario. */\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (logf)\n        {\n            fprintf(logf, \"After OS_TaskSetPriority_Impl: return_code=%ld\\n\", (long)return_code);\n\n            /* Re-dump token to check for unexpected modifications (should not be modified). */\n            {\n                size_t token_sz = sizeof(token);\n                unsigned char *b = (unsigned char *)&token;\n                fprintf(logf, \"Token re-dump (first up to 32 bytes):\");\n                for (size_t idx = 0; idx < token_sz && idx < 32; ++idx)\n                {\n                    fprintf(logf, \" %02x\", (unsigned)b[idx]);\n                }\n                fprintf(logf, \"\\n\");\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            if (task != NULL)\n            {\n                if (logf)\n                {\n                    fprintf(logf, \"Updating task->priority from %ld to %ld\\n\",\n                            (long)task->priority, (long)new_priority);\n                }\n                task->priority = new_priority;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"Called OS_ObjectIdRelease(&token)\\n\");\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT: OS_TaskSetPriority returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}