{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation is possible: OS_ObjectIdAllocateNew calls OS_NotifyEvent, which invokes the function pointer OS_SharedGlobalVars.EventHandler. If that EventHandler implementation calls back into OS_ObjectIdAllocateNew (or any function that eventually calls OS_NotifyEvent again), an indirect recursive cycle occurs (e.g. OS_ObjectIdAllocateNew -> OS_NotifyEvent -> EventHandler -> OS_ObjectIdAllocateNew). Other callers of OS_NotifyEvent (e.g. OS_ObjectIdFinalizeNew, OS_ObjectIdFinalizeDelete, OS_TaskPrepare) create the same potential for indirect recursion if the callback invokes the original caller.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NotifyEvent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2720.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_NotifyEvent code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_NotifyEvent with it.\n  - Your function must have the exact same signature as OS_NotifyEvent.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_NotifyEvent to check logs.\n  - Your function MUST preserve the original logic of OS_NotifyEvent as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_NotifyEvent will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    /* Local include to ensure FILE and I/O functions are available when this\n     * replacement function is injected into arbitrary translation units.  */\n    #include <stdio.h>\n\n    int32 status;\n    FILE *logf = fopen(\"/tmp/logs/2720.txt\", \"a\");\n\n    /* Log entry and key state information. Use casts to long long for\n     * integral-like values to minimize format mismatches across typedefs. */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_NotifyEvent: event=%lld, object_id=%lld, data=%p, handler=%p\\n\",\n                (long long)event, (long long)object_id, data, (void *)OS_SharedGlobalVars.EventHandler);\n        fflush(logf);\n    }\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_NotifyEvent: calling EventHandler...\\n\");\n            fflush(logf);\n        }\n\n        /* Preserve original behavior: call the installed handler and\n         * return its status. */\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_NotifyEvent: EventHandler returned status=%lld\\n\", (long long)status);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        /* No handler installed: preserve original default success return. */\n        status = OS_SUCCESS;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_NotifyEvent: no EventHandler installed, default status=%lld\\n\", (long long)status);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_NotifyEvent: status=%lld\\n\\n\", (long long)status);\n        fclose(logf);\n    }\n\n    return status;\n}\n"
}