{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_STATIC_SYMBOL_TABLE is a fixed-length array without a guaranteed sentinel element (an element whose Name == NULL) within the array bounds, the ++StaticSym increment can advance the pointer past the array end. A subsequent evaluation of StaticSym->Module followed by strcmp(StaticSym->Module, ModuleName) would then dereference memory beyond the bounds of the array or of the Module string pointer, causing an out-of-bounds access by the string function. Also, the loop condition while (StaticSym != NULL) does not prevent overrunning a non-sentinel array because incrementing an array pointer does not produce a NULL pointer, so the code relies on a sentinel. Thus, the fragment can lead to a Rule 21.17 violation when the sentinel is absent or not within bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleLoad_Static code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleLoad_Static with it.\n  - Your function must have the exact same signature as OS_ModuleLoad_Static.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleLoad_Static to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleLoad_Static will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Open a log file for capturing control flow and state. Use append so multiple runs accumulate evidence. */\n    FILE *log = fopen(\"/tmp/logs/1113.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n===== OS_ModuleLoad_Static ENTRY =====\\n\");\n        fprintf(log, \"ModuleName ptr=%p\", (const void *)ModuleName);\n        if (ModuleName != NULL)\n        {\n            /* Print the module name as provided (likely safe in normal runs). */\n            fprintf(log, \" name=\\\"%s\\\"\\n\", ModuleName);\n        }\n        else\n        {\n            fprintf(log, \" name=NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    /* iteration counter to help locate how far we advance the pointer */\n    unsigned int iter = 0;\n\n    while (StaticSym != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"iter=%u StaticSym ptr=%p Name ptr=%p Module ptr=%p\\n\",\n                    iter, (const void *)StaticSym,\n                    (const void *)((void *)StaticSym->Name),\n                    (const void *)((void *)StaticSym->Module));\n            fflush(log);\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            if (log)\n            {\n                fprintf(log, \"iter=%u: encountered Name==NULL -> end of list, breaking\\n\", iter);\n                fflush(log);\n            }\n            break;\n        }\n\n        /* Log whether Module pointer is NULL before using it */\n        if (log)\n        {\n            fprintf(log, \"iter=%u: Name != NULL (Name ptr=%p). Module ptr=%p\\n\",\n                    iter, (const void *)((void *)StaticSym->Name), (const void *)((void *)StaticSym->Module));\n            fflush(log);\n        }\n\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* log the strcmp invocation and its operands - this is where an out-of-bounds access\n               by strcmp can manifest if StaticSym points past the valid array or Module points\n               to invalid memory. */\n            if (log)\n            {\n                fprintf(log, \"iter=%u: invoking strcmp with Module ptr=%p and ModuleName ptr=%p\\n\",\n                        iter, (const void *)((void *)StaticSym->Module), (const void *)ModuleName);\n                /* Avoid printing the Module string itself here because it might be an invalid pointer\n                   in the violation scenario; printing pointer values is sufficient evidence. */\n                fflush(log);\n            }\n\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n\n            if (log)\n            {\n                fprintf(log, \"iter=%u: strcmp returned 0 -> module found, returning OS_SUCCESS\\n\", iter);\n                fflush(log);\n            }\n\n            break;\n        }\n\n        /* advance to next static symbol record (this increment is at the heart of the reported issue) */\n        ++StaticSym;\n\n        if (log)\n        {\n            fprintf(log, \"iter=%u: ++StaticSym -> now ptr=%p\\n\", iter, (const void *)StaticSym);\n            fflush(log);\n        }\n\n        ++iter;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleLoad_Static exit: return_code=%ld\\n\", (long)return_code);\n        fprintf(log, \"===== OS_ModuleLoad_Static EXIT =====\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}