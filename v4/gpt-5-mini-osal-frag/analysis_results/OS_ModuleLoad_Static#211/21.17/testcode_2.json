{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ModuleName is NULL (or otherwise not a valid NUL-terminated string) while StaticSym->Module != NULL, the call strcmp(StaticSym->Module, ModuleName) will attempt to read through ModuleName and can access memory beyond the bounds (or dereference NULL). Thus the use of strcmp can result in out-of-bounds access. Another possible violation is if StaticSym->Module is non-NULL but does not point to a valid NUL-terminated string; strcmp may read beyond its buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleLoad_Static code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleLoad_Static with it.\n  - Your function must have the exact same signature as OS_ModuleLoad_Static.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleLoad_Static to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleLoad_Static will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Open a log file for appending. The surrounding build is expected to\n     * provide stdio.h; using fprintf/fopen/fclose so logs are human-readable.\n     * The logging intentionally avoids dereferencing string pointers (no %s)\n     * to prevent introducing new out-of-bounds accesses beyond the original\n     * behavior of the function. Only pointer values and simple integers are\n     * logged. */\n    FILE *log = fopen(\"/tmp/logs/1113.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleLoad_Static ENTER: ModuleName=%p\\n\", (void *)ModuleName);\n    }\n\n    int idx = 0;\n    while (StaticSym != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"iter=%d: StaticSym=%p, Name=%p, Module=%p\\n\",\n                    idx, (void *)StaticSym, (void *)StaticSym->Name, (void *)StaticSym->Module);\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            if (log)\n            {\n                fprintf(log, \"iter=%d: Name == NULL -> end of list\\n\", idx);\n            }\n            break;\n        }\n\n        if (StaticSym->Module != NULL)\n        {\n            if (log)\n            {\n                /* WARNING: do not print StaticSym->Module or ModuleName as strings\n                 * (no %s) because that would dereference the pointers and could\n                 * itself cause out-of-bounds accesses. Print only pointer values\n                 * so other agents can see the control flow and pointer state. */\n                fprintf(log, \"iter=%d: About to call strcmp(StaticSym->Module=%p, ModuleName=%p)\\n\",\n                        idx, (void *)StaticSym->Module, (void *)ModuleName);\n            }\n\n            /* Original logic retained: this strcmp can read both strings and may\n             * cause out-of-bounds access if either pointer is invalid or not\n             * NUL-terminated. We intentionally keep the call here so tests can\n             * reproduce the reported violation scenario. */\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                if (log)\n                {\n                    fprintf(log, \"iter=%d: strcmp matched -> setting return_code = OS_SUCCESS\\n\", idx);\n                }\n\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                if (log)\n                {\n                    fprintf(log, \"iter=%d: strcmp did not match\\n\", idx);\n                }\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"iter=%d: StaticSym->Module == NULL\\n\", idx);\n            }\n        }\n\n        ++StaticSym;\n        ++idx;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_ModuleLoad_Static EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}