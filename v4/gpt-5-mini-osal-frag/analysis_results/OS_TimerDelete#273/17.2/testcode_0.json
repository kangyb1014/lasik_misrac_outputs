{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdFinalizeDelete calls OS_NotifyEvent, which invokes the application EventHandler via OS_SharedGlobalVars.EventHandler. If that handler calls back into the OS API (for example OS_TimeBaseDelete or OS_TimerDelete), the call chain can be: OS_ObjectIdFinalizeDelete -> OS_NotifyEvent -> EventHandler -> OS_TimeBaseDelete -> OS_ObjectIdGetById -> ... -> OS_ObjectIdFinalizeDelete. This causes OS_ObjectIdFinalizeDelete to be invoked indirectly by itself, violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2220.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimerDelete:\n```c\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimerDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimerDelete with it.\n  - Your function must have the exact same signature as OS_TimerDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimerDelete to check logs.\n  - Your function MUST preserve the original logic of OS_TimerDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimerDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimerDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    /* Open log file for appending control-flow/state information. */\n    FILE *log = fopen(\"/tmp/logs/2220.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_TimerDelete: timer_id=%lu\\n\", (unsigned long)timer_id);\n        fflush(log);\n    }\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (log)\n    {\n        fprintf(log, \"OS_TaskGetId_Impl returned objtype=%d\\n\", (int)objtype);\n        fflush(log);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early return: called from timebase callback context - OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld (expected OS_SUCCESS==0)\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            fprintf(log, \" timecb_token -> id=%lu\\n\", (unsigned long)OS_ObjectIdFromToken(&timecb_token));\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        if (log)\n        {\n            fprintf(log, \"Loaded timecb at token idx (internal) and its timebase token -> id=%lu\\n\",\n                    (unsigned long)OS_ObjectIdFromToken(&timecb->timebase_token));\n            fprintf(log, \" timecb->flags=0x%08x\\n\", (unsigned int)timecb->flags);\n            fprintf(log, \" timecb->prev_cb=%lu next_cb=%lu first_cb=%lu\\n\",\n                    (unsigned long)timecb->prev_cb, (unsigned long)timecb->next_cb,\n                    (unsigned long)timebase->first_cb);\n            fflush(log);\n        }\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        if (log)\n        {\n            fprintf(log, \"After TransferToken, timebase_token -> id=%lu\\n\", (unsigned long)OS_ObjectIdFromToken(&timebase_token));\n            fflush(log);\n        }\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            if (log)\n            {\n                fprintf(log, \"Timer uses DEDICATED_TIMEBASE id=%lu\\n\", (unsigned long)dedicated_timebase_id);\n                fflush(log);\n            }\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n                if (log)\n                {\n                    fprintf(log, \"Removed only callback from timebase, first_cb now UNDEFINED\\n\");\n                    fflush(log);\n                }\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n                if (log)\n                {\n                    fprintf(log, \"Removed callback was first -> new first_cb=%lu\\n\", (unsigned long)timebase->first_cb);\n                    fflush(log);\n                }\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n            if (log)\n            {\n                fprintf(log, \"Patched prev_cb (%lu) next_cb to %lu\\n\", (unsigned long)timecb->prev_cb, (unsigned long)timecb->next_cb);\n                fflush(log);\n            }\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n            if (log)\n            {\n                fprintf(log, \"Patched next_cb (%lu) prev_cb to %lu\\n\", (unsigned long)timecb->next_cb, (unsigned long)timecb->prev_cb);\n                fflush(log);\n            }\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        if (log)\n        {\n            fprintf(log, \"Isolated timecb: prev_cb=%lu next_cb=%lu (self)\",\n                    (unsigned long)timecb->prev_cb, (unsigned long)timecb->next_cb);\n            fprintf(log, \"\\nAbout to unlock timebase and finalize delete (will call OS_ObjectIdFinalizeDelete)\\n\");\n            fflush(log);\n        }\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        if (log)\n        {\n            fprintf(log, \"Calling OS_ObjectIdFinalizeDelete with timecb id=%lu return_code_in=%ld\\n\",\n                    (unsigned long)OS_ObjectIdFromToken(&timecb_token), (long)return_code);\n            fflush(log);\n        }\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        if (log)\n        {\n            fprintf(log, \"Returned from OS_ObjectIdFinalizeDelete return_code=%ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    if (log)\n    {\n        fprintf(log, \"Releasing timebase_token -> id=%lu\\n\", (unsigned long)OS_ObjectIdFromToken(&timebase_token));\n        fflush(log);\n    }\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        if (log)\n        {\n            fprintf(log, \"About to call OS_TimeBaseDelete for dedicated_timebase_id=%lu\\n\", (unsigned long)dedicated_timebase_id);\n            fflush(log);\n        }\n        OS_TimeBaseDelete(dedicated_timebase_id);\n        if (log)\n        {\n            fprintf(log, \"Returned from OS_TimeBaseDelete for id=%lu\\n\", (unsigned long)dedicated_timebase_id);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_TimerDelete: timer_id=%lu return_code=%ld\\n\", (unsigned long)timer_id, (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}