{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysStopVolume_Impl is a reachable, no-op function that always returns OS_SUCCESS and is called from OS_rmfs. Removing the call (or the function body) would not change the observable behaviour of OS_rmfs because return_code is already OS_SUCCESS and the subsequent call to OS_ObjectIdFinalizeDelete would see the same operation_status. Therefore this executed, effectless operation constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2308.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_rmfs code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_rmfs with it.\n  - Your function must have the exact same signature as OS_rmfs.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_rmfs to check logs.\n  - Your function MUST preserve the original logic of OS_rmfs as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_rmfs will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_rmfs as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Open log file for tracing control flow/state related to Rule 2.2 investigation */\n    FILE *logf = fopen(\"/tmp/logs/2308.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"----- OS_rmfs ENTER -----\\n\");\n        fprintf(logf, \"devname=%s\\n\", (devname != NULL) ? devname : \"(null)\");\n        /* Log address of token so callers can correlate token identity in subsequent logs */\n        fprintf(logf, \"token_addr=%p\\n\", (void *)&token);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (logf) fprintf(logf, \"OS_ObjectIdGetByName -> return_code=%ld\\n\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        if (logf) fprintf(logf, \"Calling OS_FileSysStopVolume_Impl(token_addr=%p)\\n\", (void *)&token);\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        if (logf) fprintf(logf, \"OS_FileSysStopVolume_Impl -> return_code=%ld\\n\", (long)return_code);\n\n        /* Free the entry in the master table  */\n        if (logf) fprintf(logf, \"Calling OS_ObjectIdFinalizeDelete(return_code=%ld, token_addr=%p)\\n\", (long)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        if (logf) fprintf(logf, \"OS_ObjectIdFinalizeDelete -> return_code=%ld\\n\", (long)return_code);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        if (logf) fprintf(logf, \"ObjectIdGetByName failed; set return_code=OS_ERR_NAME_NOT_FOUND (%ld)\\n\", (long)return_code);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_rmfs EXIT return_code=%ld\\n\", (long)return_code);\n        fprintf(logf, \"----- OS_rmfs END -----\\n\\n\");\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}