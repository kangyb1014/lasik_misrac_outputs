{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls OS_strnlen(record->name_entry, buffer_size) and later memcpy(buffer, record->name_entry, name_len) where name_len can be up to buffer_size-1. Nothing in this function bounds the maximum number of bytes read from record->name_entry to the storage size of that object. If the caller supplies buffer_size larger than the actual storage of record->name_entry (or if name_entry is not NUL-terminated within that storage), OS_strnlen may read beyond record->name_entry bounds and memcpy may copy beyond the source object. This can produce out-of-bounds accesses of the source object and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1973.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DeleteAllObjects code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DeleteAllObjects with it.\n  - Your function must have the exact same signature as OS_DeleteAllObjects.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DeleteAllObjects to check logs.\n  - Your function MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DeleteAllObjects will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n    FILE *log = fopen(\"/tmp/logs/1973.txt\", \"a\");\n\n    /* Minimal entry probe so the invocation is always recorded */\n    if (log)\n    {\n        fprintf(log, \"OS_DeleteAllObjects: entered\\n\");\n        fflush(log);\n    }\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        if (log)\n        {\n            fprintf(log, \"OS_DeleteAllObjects: TryCount=%u start\\n\", (unsigned)TryCount);\n            fflush(log);\n        }\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        if (log) fprintf(log, \"OS_DeleteAllObjects: calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB)\\n\");\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (log) fprintf(log, \"OS_DeleteAllObjects: after TIMECB ObjectCount=%u\\n\", (unsigned)ObjectCount);\n\n        if (log) fprintf(log, \"OS_DeleteAllObjects: calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE)\\n\");\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (log) fprintf(log, \"OS_DeleteAllObjects: after TIMEBASE ObjectCount=%u\\n\", (unsigned)ObjectCount);\n\n        if (log) fprintf(log, \"OS_DeleteAllObjects: calling OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK)\\n\");\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (log) fprintf(log, \"OS_DeleteAllObjects: after TASK ObjectCount=%u\\n\", (unsigned)ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        if (log) fprintf(log, \"OS_DeleteAllObjects: calling OS_ForEachObject (all types)\\n\");\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (log) fprintf(log, \"OS_DeleteAllObjects: after ForEachObject ObjectCount=%u\\n\", (unsigned)ObjectCount);\n\n        if (log)\n        {\n            fprintf(log, \"OS_DeleteAllObjects: end of iteration TryCount=%u ObjectCount=%u\\n\", (unsigned)TryCount, (unsigned)ObjectCount);\n            fflush(log);\n        }\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            if (log) fprintf(log, \"OS_DeleteAllObjects: breaking out (ObjectCount=%u, TryCount=%u)\\n\", (unsigned)ObjectCount, (unsigned)TryCount);\n            break;\n        }\n\n        if (log) fprintf(log, \"OS_DeleteAllObjects: delaying 5 ticks before retry\\n\");\n        OS_TaskDelay(5);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_DeleteAllObjects: exit\\n\");\n        fclose(log);\n    }\n}\n"
}