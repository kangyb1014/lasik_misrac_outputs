{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion if OS_DEBUG invokes any routine that eventually calls OS_printf. Specifically: OS_printf -> OS_DEBUG (as shown) -> (implementation of OS_DEBUG uses OS_printf or a call path that leads back to OS_printf) -> OS_printf. This creates an indirect self-call and therefore violates Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3390.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mount:\n```c\nint32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mount code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mount with it.\n  - Your function must have the exact same signature as OS_mount.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mount to check logs.\n  - Your function MUST preserve the original logic of OS_mount as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mount will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mount as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Minimal entry log to prove the function was entered and parameters received */\n    {\n        FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_mount ENTER: devname=%s, mountpoint=%s\\n\",\n                    devname ? devname : \"(null)\", mountpoint ? mountpoint : \"(null)\");\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdGetByName returned %ld; token addr=%p\\n\", (long)return_code, (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Filesys record at %p; flags=0x%lx; system_mountpt='%s'\\n\",\n                        (void *)filesys,\n                        (unsigned long)filesys->flags,\n                        filesys->system_mountpt[0] != 0 ? filesys->system_mountpt : \"(empty)\");\n                fclose(log);\n            }\n        }\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Early exit: incorrect object state; flags=0x%lx; return_code=%ld\\n\",\n                            (unsigned long)filesys->flags, (long)return_code);\n                    fclose(log);\n                }\n            }\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            return_code = OS_FS_ERR_PATH_INVALID;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Early exit: system_mountpt empty; return_code=%ld\\n\", (long)return_code);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /* Log just before invoking the implementation that may call back into OS_printf/OS_DEBUG */\n            {\n                FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Invoking OS_FileSysMountVolume_Impl with token addr=%p\\n\", (void *)&token);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_FileSysMountVolume_Impl(&token);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"OS_FileSysMountVolume_Impl returned %ld\\n\", (long)return_code);\n                    fclose(log);\n                }\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"Marked mounted: flags=0x%lx; virtual_mountpt='%s'\\n\",\n                            (unsigned long)filesys->flags,\n                            filesys->virtual_mountpt[0] != 0 ? filesys->virtual_mountpt : \"(empty)\");\n                    fclose(log);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"After release token; final intermediate return_code=%ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Preserve original behavior: map any failure to name not found (as in original code) */\n        {\n            FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"Mapping error to OS_ERR_NAME_NOT_FOUND (was %ld)\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/3390.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_mount EXIT: return %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}