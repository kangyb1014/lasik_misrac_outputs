{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_DoSelect, when msecs <= 0 the code takes the else branch and executes memset(&ts_end, 0, sizeof(ts_end)); however ts_end is never subsequently read in that execution path (the do/while chooses other branches for msecs < 0 or msecs == 0). Removing the memset would not change program behaviour, so this assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericWrite_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/738.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GenericWrite_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GenericWrite_Impl with it.\n  - Your function must have the exact same signature as OS_GenericWrite_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GenericWrite_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GenericWrite_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Minimal probe: record entry and key state to log file for analysis. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_GenericWrite_Impl ENTRY: token=%d buffer=%p nbytes=%zu timeout=%d\\n\",\n                    (int)*token, buffer, nbytes, (int)timeout);\n            fclose(logf);\n        }\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log impl-derived state (selectable, fd) right after resolving the object. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_GenericWrite_Impl: resolved impl=%p fd=%d selectable=%d\\n\",\n                    (void *)impl,\n                    (impl ? impl->fd : -1),\n                    (impl ? (int)impl->selectable : -1));\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /* Log before potentially calling select */\n        {\n            FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n            if (logf)\n            {\n                fprintf(logf, \"OS_GenericWrite_Impl: about to check selectable; selectable=%d timeout=%d operation=0x%08x\\n\",\n                        (int)impl->selectable, (int)timeout, (unsigned)operation);\n                fclose(logf);\n            }\n        }\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            /* Log the parameters passed to OS_SelectSingle_Impl so downstream select behavior can be correlated. */\n            {\n                FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"OS_GenericWrite_Impl: calling OS_SelectSingle_Impl(token=%d, operation=0x%08x, timeout=%d)\\n\",\n                            (int)*token, (unsigned)operation, (int)timeout);\n                    fclose(logf);\n                }\n            }\n\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n            /* Log the result of select to capture control flow and state for analysis. */\n            {\n                FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n                if (logf)\n                {\n                    fprintf(logf, \"OS_GenericWrite_Impl: returned from OS_SelectSingle_Impl return_code=%d operation=0x%08x\\n\",\n                            (int)return_code, (unsigned)operation);\n                    fclose(logf);\n                }\n            }\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                /* Log the write error for diagnosis */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n                    if (logf)\n                    {\n                        fprintf(logf, \"OS_GenericWrite_Impl: write failed fd=%d errno=%d (%s)\\n\",\n                                impl->fd, errno, strerror(errno));\n                        fclose(logf);\n                    }\n                }\n\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n\n                /* Log successful write result */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n                    if (logf)\n                    {\n                        fprintf(logf, \"OS_GenericWrite_Impl: write succeeded fd=%d bytes_written=%zd return_code=%d\\n\",\n                                impl->fd, os_result, (int)return_code);\n                        fclose(logf);\n                    }\n                }\n            }\n        }\n    }\n\n    /* Final log before returning to capture final return_code */\n    {\n        FILE *logf = fopen(\"/tmp/logs/738.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_GenericWrite_Impl EXIT: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}