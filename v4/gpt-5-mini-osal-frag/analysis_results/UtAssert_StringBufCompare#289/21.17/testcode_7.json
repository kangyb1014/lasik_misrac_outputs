{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. For example, if String1 is non-NULL and String1Max is larger than the destination buffer (ScrubbedString1 is 256 bytes) and no NUL is found within String1Max bytes (so FormatLen1 == String1Max, e.g. 300), memcpy(ScrubbedString1, String1, FormatLen1) will write past the 256-byte destination (out-of-bounds). Another violation: if String1 == NULL and String1Max > 0, the code enters the copy path and memcpy will be passed a NULL source pointer (or memchr is passed NULL), causing an out-of-bounds/invalid access. These scenarios violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_StringBufCompare code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_StringBufCompare with it.\n  - Your function must have the exact same signature as UtAssert_StringBufCompare.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_StringBufCompare to check logs.\n  - Your function MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_StringBufCompare will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Open log file for probes; if unable to open, continue silently */\n    FILE *log = fopen(\"/tmp/logs/3353.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Entered UtAssert_StringBufCompare\\n\");\n        fprintf(log, \"  String1=%p, String1Max=%zu, String2=%p, String2Max=%zu, File=%p, Line=%u\\n\",\n                (const void *)String1, String1Max, (const void *)String2, String2Max, (const void *)File, (unsigned)Line);\n    }\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        if (log) fprintf(log, \"String1 is NULL -> EndPtr1=NULL\\n\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        if (log) fprintf(log, \"String1Max indicates NULL_TERM: using strlen on String1=%p\\n\", (const void *)String1);\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        if (log) fprintf(log, \"  EndPtr1 calculated via strlen -> %p, len=%zu\\n\", (const void *)EndPtr1,\n                         (size_t)(EndPtr1 - String1));\n    }\n    else\n    {\n        if (log) fprintf(log, \"Calling memchr on String1=%p for NUL with max=%zu\\n\", (const void *)String1, String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n        if (log) fprintf(log, \"  memchr(String1) returned %p\\n\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n        if (log) fprintf(log, \"FormatLen1 set from EndPtr1: %zu\\n\", FormatLen1);\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n        if (log) fprintf(log, \"No NUL found within limit -> FormatLen1 = String1Max = %zu\\n\", FormatLen1);\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        if (log) fprintf(log, \"String2 is NULL -> EndPtr2=NULL\\n\");\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        if (log) fprintf(log, \"String2Max indicates NULL_TERM: using strlen on String2=%p\\n\", (const void *)String2);\n        EndPtr2 = String2 + strlen(String2);\n        if (log) fprintf(log, \"  EndPtr2 calculated via strlen -> %p, len=%zu\\n\", (const void *)EndPtr2,\n                         (size_t)(EndPtr2 - String2));\n    }\n    else\n    {\n        if (log) fprintf(log, \"Calling memchr on String2=%p for NUL with max=%zu\\n\", (const void *)String2, String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n        if (log) fprintf(log, \"  memchr(String2) returned %p\\n\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n        if (log) fprintf(log, \"FormatLen2 set from EndPtr2: %zu\\n\", FormatLen2);\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n        if (log) fprintf(log, \"No NUL found within limit -> FormatLen2 = String2Max = %zu\\n\", FormatLen2);\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        if (log) fprintf(log, \"Both format lengths zero -> Compare=0\\n\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            if (log) fprintf(log, \"Comparing initial %zu bytes (FormatLen1 < FormatLen2)\\n\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n            if (log) fprintf(log, \"  memcmp result=%d\\n\", Compare);\n        }\n        else\n        {\n            if (log) fprintf(log, \"Comparing initial %zu bytes (FormatLen2 <= FormatLen1)\\n\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n            if (log) fprintf(log, \"  memcmp result=%d\\n\", Compare);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            if (log) fprintf(log, \"Initial content equal; Compare adjusted by lengths -> %d (FormatLen1=%zu, FormatLen2=%zu)\\n\",\n                             Compare, FormatLen1, FormatLen2);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (log) fprintf(log, \"Preparing scrubbed copies: initial FormatLen1=%zu, FormatLen2=%zu\\n\", FormatLen1, FormatLen2);\n\n    if (FormatLen1 > 0)\n    {\n        if (log) fprintf(log, \"Checking for newline in String1 at %p up to %zu bytes\\n\", (const void *)String1, FormatLen1);\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (log) fprintf(log, \"  memchr for newline returned %p\\n\", (const void *)EndPtr1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            if (log) fprintf(log, \"  New FormatLen1 after newline clamp = %zu\\n\", FormatLen1);\n        }\n\n        /* Log potential problematic scenarios before performing the original memcpy */\n        if (log)\n        {\n            fprintf(log, \"About to memcpy to ScrubbedString1 (buf@%p size=%zu) from String1=%p len=%zu\\n\",\n                    (void *)ScrubbedString1, sizeof(ScrubbedString1), (const void *)String1, FormatLen1);\n            if (String1 == NULL && FormatLen1 > 0)\n            {\n                fprintf(log, \"WARNING: memcpy will be passed NULL source (String1==NULL) with positive length %zu\\n\", FormatLen1);\n            }\n            if (FormatLen1 >= sizeof(ScrubbedString1))\n            {\n                fprintf(log, \"WARNING: FormatLen1 (%zu) >= ScrubbedString1 size (%zu) -> potential overflow\\n\",\n                        FormatLen1, sizeof(ScrubbedString1));\n            }\n        }\n\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        if (log) fprintf(log, \"Checking for newline in String2 at %p up to %zu bytes\\n\", (const void *)String2, FormatLen2);\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (log) fprintf(log, \"  memchr for newline returned %p\\n\", (const void *)EndPtr2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            if (log) fprintf(log, \"  New FormatLen2 after newline clamp = %zu\\n\", FormatLen2);\n        }\n\n        if (log)\n        {\n            fprintf(log, \"About to memcpy to ScrubbedString2 (buf@%p size=%zu) from String2=%p len=%zu\\n\",\n                    (void *)ScrubbedString2, sizeof(ScrubbedString2), (const void *)String2, FormatLen2);\n            if (String2 == NULL && FormatLen2 > 0)\n            {\n                fprintf(log, \"WARNING: memcpy will be passed NULL source (String2==NULL) with positive length %zu\\n\", FormatLen2);\n            }\n            if (FormatLen2 >= sizeof(ScrubbedString2))\n            {\n                fprintf(log, \"WARNING: FormatLen2 (%zu) >= ScrubbedString2 size (%zu) -> potential overflow\\n\",\n                        FormatLen2, sizeof(ScrubbedString2));\n            }\n        }\n\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    if (log)\n    {\n        fprintf(log, \"Final ScrubbedString1(len=%zu)='%s'\\n\", FormatLen1, ScrubbedString1);\n        fprintf(log, \"Final ScrubbedString2(len=%zu)='%s'\\n\", FormatLen2, ScrubbedString2);\n        fprintf(log, \"Resulting Compare=%d, Result(bool)=%d\\n\", Compare, (int)Result);\n        fclose(log);\n    }\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '\\%s' == '\\%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}