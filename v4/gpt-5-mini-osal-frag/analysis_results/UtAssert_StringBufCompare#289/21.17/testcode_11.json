{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nFormatLen2 can exceed the size of the destination buffer (ScrubbedString2[256]) or the actual source buffer. FormatLen2 is set to String2Max when no NUL is found; if String2Max > 255 (or larger than the actual allocation of String2) the memcpy(ScrubbedString2, String2, FormatLen2) will read/write past the end of the source/destination buffers (also the subsequent ScrubbedString2[FormatLen2] = 0 write will overflow). This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_StringBufCompare code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_StringBufCompare with it.\n  - Your function must have the exact same signature as UtAssert_StringBufCompare.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_StringBufCompare to check logs.\n  - Your function MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_StringBufCompare will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Open log file for tracing control flow and state */\n    FILE *log = fopen(\"/tmp/logs/3353.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UtAssert_StringBufCompare ENTRY: String1=%p String1Max=%zu String2=%p String2Max=%zu File=%s Line=%u\\n\",\n                (const void *)String1, String1Max, (const void *)String2, String2Max, File ? File : \"(null)\", (unsigned)Line);\n        fflush(log);\n    }\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        if (log) fprintf(log, \"String1 is NULL -> EndPtr1=NULL\\n\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        if (log) fprintf(log, \"String1: used strlen -> EndPtr1=%p (len=%zu)\\n\", (const void *)EndPtr1, strlen(String1));\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        if (log) fprintf(log, \"String1: used memchr with max=%zu -> EndPtr1=%p\\n\", String1Max, (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    if (log) fprintf(log, \"Computed FormatLen1=%zu\\n\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        if (log) fprintf(log, \"String2 is NULL -> EndPtr2=NULL\\n\");\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        if (log) fprintf(log, \"String2: used strlen -> EndPtr2=%p (len=%zu)\\n\", (const void *)EndPtr2, strlen(String2));\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        if (log) fprintf(log, \"String2: used memchr with max=%zu -> EndPtr2=%p\\n\", String2Max, (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    if (log) fprintf(log, \"Computed FormatLen2=%zu\\n\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        if (log) fprintf(log, \"Both formats len are zero -> Compare=0\\n\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            if (log) fprintf(log, \"Comparing first %zu bytes (FormatLen1 < FormatLen2)\\n\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            if (log) fprintf(log, \"Comparing first %zu bytes (FormatLen2 <= FormatLen1)\\n\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        if (log) fprintf(log, \"memcmp result=%d\\n\", Compare);\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n            if (log) fprintf(log, \"Lengths equal for compared part -> Compare set to FormatLen1 - FormatLen2 = %d\\n\", Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    if (log) fprintf(log, \"CompareType=%d -> Result=%d\\n\", (int)CompareType, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            size_t old = FormatLen1;\n            FormatLen1 = EndPtr1 - String1;\n            if (log) fprintf(log, \"Found newline in String1: adjusting FormatLen1 from %zu to %zu\\n\", old, FormatLen1);\n        }\n        if (log)\n        {\n            fprintf(log, \"About to memcpy ScrubbedString1 from String1: dest_size=%zu copy_len=%zu String1=%p\\n\",\n                    sizeof(ScrubbedString1), FormatLen1, (const void *)String1);\n            if (FormatLen1 > (sizeof(ScrubbedString1) - 1))\n            {\n                fprintf(log, \"WARNING: FormatLen1 (%zu) > ScrubbedString1 capacity (%zu) - potential overflow\\n\",\n                        FormatLen1, (size_t)(sizeof(ScrubbedString1) - 1));\n            }\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    if (log) fprintf(log, \"ScrubbedString1 terminated at index %zu\\n\", FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            size_t old = FormatLen2;\n            FormatLen2 = EndPtr2 - String2;\n            if (log) fprintf(log, \"Found newline in String2: adjusting FormatLen2 from %zu to %zu\\n\", old, FormatLen2);\n        }\n        if (log)\n        {\n            fprintf(log, \"About to memcpy ScrubbedString2 from String2: dest_size=%zu copy_len=%zu String2=%p\\n\",\n                    sizeof(ScrubbedString2), FormatLen2, (const void *)String2);\n            if (FormatLen2 > (sizeof(ScrubbedString2) - 1))\n            {\n                fprintf(log, \"WARNING: FormatLen2 (%zu) > ScrubbedString2 capacity (%zu) - potential overflow\\n\",\n                        FormatLen2, (size_t)(sizeof(ScrubbedString2) - 1));\n            }\n            if (String2Max != UTASSERT_STRINGBUF_NULL_TERM && FormatLen2 == String2Max)\n            {\n                fprintf(log, \"Note: FormatLen2 equals provided String2Max (%zu). If String2Max > %zu this can read past source/dest.\\n\",\n                        String2Max, (size_t)(sizeof(ScrubbedString2) - 1));\n            }\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    if (log) fprintf(log, \"ScrubbedString2 terminated at index %zu\\n\", FormatLen2);\n\n    if (log)\n    {\n        fprintf(log, \"Final Compare=%d Result=%d Returning to caller\\n\", Compare, (int)Result);\n        fclose(log);\n    }\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}