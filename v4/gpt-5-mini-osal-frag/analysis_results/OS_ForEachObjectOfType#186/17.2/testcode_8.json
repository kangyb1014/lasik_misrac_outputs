{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion can occur when the iterator invokes the user callback while unlocked. Execution chain: OS_ObjectIdIteratorProcessEntry -> func (OS_ForEachDoCallback) -> filter->user_callback (e.g. OS_CleanUpObject) -> OS_ForEachObjectOfType -> OS_ObjectIdIteratorInit / OS_ObjectIdIteratorProcessEntry. This causes OS_ObjectIdIteratorProcessEntry to be entered again via the user callback, i.e. an indirect recursive call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3310.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ForEachObjectOfType code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ForEachObjectOfType with it.\n  - Your function must have the exact same signature as OS_ForEachObjectOfType.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ForEachObjectOfType to check logs.\n  - Your function MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ForEachObjectOfType will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Logging helper: track recursion depth so nested entries are visible in the log */\n    static int __for_each_depth = 0;\n    FILE *___log = fopen(\"/tmp/logs/3310.txt\", \"a\");\n\n    __for_each_depth++;\n    if (___log)\n    {\n        fprintf(___log, \"ENTER OS_ForEachObjectOfType depth=%d idtype=%d creator_id=%lu callback_ptr=%p callback_arg=%p\\n\",\n                __for_each_depth, (int)idtype, (unsigned long)creator_id, (void *)callback_ptr, callback_arg);\n        fflush(___log);\n    }\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (___log)\n    {\n        fprintf(___log, \"  filter set: creator_id=%lu user_callback=%p user_arg=%p\\n\",\n                (unsigned long)filter.creator_id, (void *)filter.user_callback, filter.user_arg);\n        fflush(___log);\n    }\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        if (___log)\n        {\n            fprintf(___log, \"  iterator init SUCCESS depth=%d\\n\", __for_each_depth);\n            fflush(___log);\n        }\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            if (___log)\n            {\n                fprintf(___log, \"  iterator GETNEXT returned true depth=%d; about to call ProcessEntry (callback wrapper)\\n\", __for_each_depth);\n                fflush(___log);\n            }\n\n            /* Call the original processing function. This may cause indirect recursion if the user callback\n             * invoked from inside the iterator re-enters OS_ForEachObjectOfType. The depth counter and log\n             * entries above/below will capture that nested flow. */\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            if (___log)\n            {\n                fprintf(___log, \"  returned from ProcessEntry depth=%d\\n\", __for_each_depth);\n                fflush(___log);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        if (___log)\n        {\n            fprintf(___log, \"  iterator destroyed depth=%d\\n\", __for_each_depth);\n            fflush(___log);\n        }\n    }\n    else\n    {\n        if (___log)\n        {\n            fprintf(___log, \"  iterator init FAILED depth=%d\\n\", __for_each_depth);\n            fflush(___log);\n        }\n    }\n\n    if (___log)\n    {\n        fprintf(___log, \"EXIT  OS_ForEachObjectOfType depth=%d\\n\", __for_each_depth);\n        fflush(___log);\n        fclose(___log);\n    }\n\n    __for_each_depth--;\n}\n"
}