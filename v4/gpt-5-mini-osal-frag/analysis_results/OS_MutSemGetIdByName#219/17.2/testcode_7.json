{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via the debug path: OS_printf calls OS_DEBUG(\"BUG: ... %s\", String). If OS_DEBUG is implemented by calling OS_printf (for example as a macro or wrapper that forwards to OS_printf), then the call chain OS_printf -> OS_DEBUG -> OS_printf occurs, which is an indirect self-call and therefore violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2880.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetIdByName with it.\n  - Your function must have the exact same signature as OS_MutSemGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Forward-declare FILE and stdio functions to avoid adding includes in this replacement. */\n    struct FILE; /* opaque FILE type */\n    extern struct FILE *fopen(const char *path, const char *mode);\n    extern int fprintf(struct FILE *stream, const char *format, ...);\n    extern int fclose(struct FILE *stream);\n\n    /* Attempt to open a log file to record control flow and state. Append so multiple runs accumulate. */\n    struct FILE *log = fopen(\"/tmp/logs/2880.txt\", \"a\");\n    if (log)\n    {\n        /* Log function entry and parameter values. */\n        fprintf(log, \"ENTER: OS_MutSemGetIdByName(sem_id=%p, sem_name=%s)\\n\", (void *)sem_id, (sem_name != NULL) ? sem_name : \"(null)\");\n    }\n\n    /* Preserve original parameter checks. */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    if (log)\n    {\n        fprintf(log, \"After checks: sem_id=%p, sem_name=%s\\n\", (void *)sem_id, (sem_name != NULL) ? sem_name : \"(null)\");\n    }\n\n    /* Call the original lookup function and capture its return value. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdFindByName returned %ld, sem_id now=%p\\n\", (long)return_code, (void *)sem_id);\n        /* Flush/close the log file. */\n        fclose(log);\n    }\n\n    /* Log exit (if no log file available earlier, try to write a minimal failure notice). */\n    if (log == NULL)\n    {\n        /* If fopen failed, best effort: try to open again just to note that logging failed. */\n        struct FILE *log2 = fopen(\"/tmp/logs/2880.txt\", \"a\");\n        if (log2)\n        {\n            fprintf(log2, \"FALLBACK LOG: OS_MutSemGetIdByName called but initial log open failed. sem_id=%p sem_name=%s return=%ld\\n\",\n                    (void *)sem_id, (sem_name != NULL) ? sem_name : \"(null)\", (long)return_code);\n            fclose(log2);\n        }\n    }\n\n    return return_code;\n}"
}