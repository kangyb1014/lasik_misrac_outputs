{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the LENGTHCHECK macro uses an unbounded string function such as strlen(name) to validate the name length (for example: if (strlen(name) >= OS_MAX_API_NAME) ...), and the supplied name pointer does not point to a NUL-terminated array within its accessible bounds, the strlen call can read past the end of the object. That would constitute an out-of-bounds access and thus violate MISRA C 2023 Rule 21.17. A compliant implementation must use a bounded operation (e.g. strnlen with the provided limit) or otherwise ensure the string is NUL-terminated within the known maximum length before calling unbounded string functions.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemGetIdByName with it.\n  - Your function must have the exact same signature as OS_MutSemGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Local declarations of stdio functions to avoid relying on headers in this translation unit. */\n    /* These prototypes match the standard library signatures. */\n    FILE *fopen(const char *filename, const char *mode);\n    int fprintf(FILE *stream, const char *format, ...);\n    int fclose(FILE *stream);\n    int fflush(FILE *stream);\n\n    FILE *log = NULL;\n\n    /* Check parameters (preserve original behaviour) */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* Open log file for append. This captures the control flow and key state without\n       attempting to read the contents of sem_name (which could itself be unsafe). */\n    log = fopen(\"/tmp/logs/2883.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and pointer values so other agents can correlate a potential\n           unsafe use of unbounded string functions (such as strlen) that may occur\n           inside OS_ObjectIdFindByName or macros it calls. Do not dereference sem_name. */\n        fprintf(log, \"OS_MutSemGetIdByName: ENTRY sem_id=%p sem_name=%p\\n\", (void *)sem_id, (const void *)sem_name);\n        fflush(log);\n    }\n\n    /* Preserve original logic: forward the call to the underlying lookup. */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    if (log != NULL)\n    {\n        /* Log the result so the test harness can see whether the call completed\n           normally or returned an error code (which may indicate internal checks\n           such as length checks failed). */\n        fprintf(log, \"OS_MutSemGetIdByName: EXIT return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}