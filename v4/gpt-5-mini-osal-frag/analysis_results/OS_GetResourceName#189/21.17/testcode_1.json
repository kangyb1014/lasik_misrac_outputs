{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen passes buffer_size (the caller-supplied size of the output buffer) as the maxlen argument to memchr when called with record->name_entry. If buffer_size is larger than the actual allocated size of record->name_entry (for example, name_entry is a fixed-size array of N bytes and the caller supplies buffer_size > N), memchr(s,0,buffer_size) may read past the end of record->name_entry, causing an out-of-bounds access. The checks (OS_CHECK_POINTER/OS_CHECK_SIZE) validate the caller buffer but do not ensure buffer_size is <= the size of record->name_entry, so this call can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetResourceName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetResourceName with it.\n  - Your function must have the exact same signature as OS_GetResourceName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetResourceName to check logs.\n  - Your function MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetResourceName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Open a log file to record control flow and state for debugging the potential 21.17 violation */\n    FILE *log = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_GetResourceName: object_id=%lu, buffer=%p, buffer_size=%zu\\n\",\n                (unsigned long)object_id, (void *)buffer, buffer_size);\n        fflush(log);\n    }\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    if (log)\n    {\n        fprintf(log, \"After checks: buffer[0] set to 0\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (log)\n        {\n            fprintf(log, \"record=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                fprintf(log, \"record->name_entry=%p\\n\", (void *)record->name_entry);\n            }\n            fflush(log);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* Log that we are about to call OS_strnlen with the caller-supplied buffer_size. */\n            if (log)\n            {\n                fprintf(log, \"About to call OS_strnlen(name_entry=%p, maxlen=%zu)\\n\",\n                        (void *)record->name_entry, buffer_size);\n                fflush(log);\n            }\n\n            /* This is the original call that can potentially read beyond the bounds of name_entry */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            if (log)\n            {\n                fprintf(log, \"OS_strnlen returned name_len=%zu\\n\", name_len);\n                fflush(log);\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                if (log)\n                {\n                    fprintf(log, \"Name too long for supplied buffer: adjusted name_len=%zu, return_code=%ld\\n\",\n                            name_len, (long)return_code);\n                    fflush(log);\n                }\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            if (log)\n            {\n                size_t dump_len = name_len;\n                if (dump_len > 64) dump_len = 64; /* limit how much we log of the name */\n                fprintf(log, \"Copied name (up to 64 bytes): \");\n                /* Print as string up to dump_len - buffer is null-terminated at name_len */\n                fprintf(log, \"%.*s\\n\", (int)dump_len, buffer);\n                fprintf(log, \"Final buffer pointer=%p, final buffer_size=%zu, final name_len=%zu\\n\",\n                        (void *)buffer, buffer_size, name_len);\n                fflush(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_GetResourceName: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}