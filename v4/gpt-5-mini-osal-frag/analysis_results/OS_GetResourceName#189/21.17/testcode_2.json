{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf buffer_size is larger than the storage allocated for record->name_entry (or the name is not NUL-terminated within that storage), OS_strnlen(record->name_entry, buffer_size) will call memchr(record->name_entry, 0, buffer_size) which can read past the bounds of record->name_entry. Then memcpy(buffer, record->name_entry, name_len) may copy bytes beyond the source object\u2019s bounds. In this situation the memcpy line can read out-of-bounds from record->name_entry and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetResourceName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetResourceName with it.\n  - Your function must have the exact same signature as OS_GetResourceName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetResourceName to check logs.\n  - Your function MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetResourceName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Minimal entry probe: record that the function was entered and the arguments. */\n    {\n        FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n        if (f == NULL)\n        {\n            /* fallback if directory missing */\n            f = fopen(\"/tmp/2513.txt\", \"a\");\n        }\n        if (f != NULL)\n        {\n            fprintf(f, \"ENTER OS_GetResourceName: object_id=%llu, buffer=%p, buffer_size=%zu\\n\",\n                    (unsigned long long) object_id, (void *) buffer, buffer_size);\n            fclose(f);\n        }\n    }\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    /* log after attempting to get the object id */\n    {\n        FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n        if (f == NULL)\n        {\n            f = fopen(\"/tmp/2513.txt\", \"a\");\n        }\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdGetById returned %d\\n\", (int) return_code);\n            fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        /* log the record pointer */\n        {\n            FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n            if (f == NULL)\n            {\n                f = fopen(\"/tmp/2513.txt\", \"a\");\n            }\n            if (f != NULL)\n            {\n                fprintf(f, \"record=%p\\n\", (void *) record);\n                fclose(f);\n            }\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* log the name entry pointer before any access */\n            {\n                FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                if (f == NULL)\n                {\n                    f = fopen(\"/tmp/2513.txt\", \"a\");\n                }\n                if (f != NULL)\n                {\n                    fprintf(f, \"record->name_entry=%p, requested_buffer_size=%zu\\n\", (void *) record->name_entry, buffer_size);\n                    fclose(f);\n                }\n            }\n\n            /* Compute the length using the same function as original code. This is the critical call that\n             * can cause out-of-bounds reads if buffer_size is larger than the storage for name_entry. */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* log the computed name length */\n            {\n                FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                if (f == NULL)\n                {\n                    f = fopen(\"/tmp/2513.txt\", \"a\");\n                }\n                if (f != NULL)\n                {\n                    fprintf(f, \"OS_strnlen returned name_len=%zu\\n\", name_len);\n                    fclose(f);\n                }\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                {\n                    FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                    if (f == NULL)\n                    {\n                        f = fopen(\"/tmp/2513.txt\", \"a\");\n                    }\n                    if (f != NULL)\n                    {\n                        fprintf(f, \"Name too long: adjusted name_len=%zu, return_code=%d\\n\", name_len, (int) return_code);\n                        fclose(f);\n                    }\n                }\n            }\n\n            /* log that a memcpy is about to occur (this can read from the source pointer) */\n            {\n                FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                if (f == NULL)\n                {\n                    f = fopen(\"/tmp/2513.txt\", \"a\");\n                }\n                if (f != NULL)\n                {\n                    fprintf(f, \"About to memcpy %zu bytes from %p to %p\\n\", name_len, (void *) record->name_entry, (void *) buffer);\n                    fclose(f);\n                }\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* log the resulting buffer (it is NUL-terminated at buffer[name_len]) */\n            {\n                FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                if (f == NULL)\n                {\n                    f = fopen(\"/tmp/2513.txt\", \"a\");\n                }\n                if (f != NULL)\n                {\n                    /* limit printed content to avoid huge logs */\n                    size_t print_len = (name_len < 256U) ? name_len : 255U;\n                    fprintf(f, \"Final buffer (first %zu bytes): '%.*s' (name_len=%zu)\\n\", print_len, (int) print_len, buffer, name_len);\n                    fclose(f);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* log release */\n        {\n            FILE *f = fopen(\"/tmp/logs/2513.txt\", \"a\");\n            if (f == NULL)\n            {\n                f = fopen(\"/tmp/2513.txt\", \"a\");\n            }\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_ObjectIdRelease called for object_id=%llu, returning %d\\n\", (unsigned long long) object_id, (int) return_code);\n                fclose(f);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}