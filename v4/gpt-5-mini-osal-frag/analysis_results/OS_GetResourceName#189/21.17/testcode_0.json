{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) will examine up to maxlen bytes starting at s. If the object pointed to by s has an allocated size smaller than maxlen (for example, name_entry is a 16-byte array but buffer_size passed is 64), memchr may read past the end of that object (or past the object if it is not NUL-terminated within its bounds). In OS_GetResourceName the function calls OS_strnlen(record->name_entry, buffer_size) but there is no guarantee in the shown code that record->name_entry has at least buffer_size bytes accessible, so memchr can lead to out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetResourceName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetResourceName with it.\n  - Your function must have the exact same signature as OS_GetResourceName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetResourceName to check logs.\n  - Your function MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetResourceName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n    FILE *logf = NULL;\n\n    /* Minimal entry log so callers can see the function was reached */\n    logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_GetResourceName: buffer=%p buffer_size=%zu\\n\", (void *)buffer, buffer_size);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    /* Log the result of the lookup */\n    logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        /* Log the record pointer */\n        logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"record=%p\\n\", (void *)record);\n            fclose(logf);\n            logf = NULL;\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* Log intent to call OS_strnlen with the provided buffer_size */\n            logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"About to call OS_strnlen on name_entry=%p with maxlen=%zu\\n\", (void *)record->name_entry, buffer_size);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* Log the length returned by OS_strnlen */\n            logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_strnlen returned name_len=%zu\\n\", name_len);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"Name too long: truncating to %zu, returning OS_ERR_NAME_TOO_LONG\\n\", name_len);\n                    fclose(logf);\n                    logf = NULL;\n                }\n            }\n\n            /* Perform the copy exactly as original code */\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log resulting buffer contents (limited to a reasonable amount) */\n            logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n            if (logf != NULL)\n            {\n                /* Print up to the first 128 bytes of the resulting buffer for diagnostics */\n                size_t to_log = (name_len < 128) ? name_len : 128;\n                fprintf(logf, \"Copied name (len=%zu) to buffer=%p: \", name_len, (void *)buffer);\n                if (to_log > 0)\n                {\n                    /* write as a quoted string if printable; otherwise hex */\n                    size_t i;\n                    int printable = 1;\n                    for (i = 0; i < to_log; ++i)\n                    {\n                        unsigned char c = (unsigned char)buffer[i];\n                        if (c < 0x20 || c > 0x7E)\n                        {\n                            printable = 0;\n                            break;\n                        }\n                    }\n                    if (printable)\n                    {\n                        fprintf(logf, \"\\\"%.*s\\\"\\n\", (int)to_log, buffer);\n                    }\n                    else\n                    {\n                        fprintf(logf, \"0x\");\n                        for (i = 0; i < to_log; ++i)\n                        {\n                            fprintf(logf, \"%02X\", (unsigned char)buffer[i]);\n                        }\n                        fprintf(logf, \"\\n\");\n                    }\n                }\n                else\n                {\n                    fprintf(logf, \"(empty)\\n\");\n                }\n                fclose(logf);\n                logf = NULL;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final exit log */\n    logf = fopen(\"/tmp/logs/2513.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_GetResourceName: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    return return_code;\n}\n"
}