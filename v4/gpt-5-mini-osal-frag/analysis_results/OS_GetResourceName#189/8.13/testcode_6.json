{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment uses record->name_entry only as a read-only source (passed to OS_strnlen and memcpy). If OS_common_record_t::name_entry is declared as a non-const pointer (e.g. char *name_entry), this violates MISRA C 2023 Rule 8.13 because the pointer should be const-qualified (const char *) when possible. If, however, name_entry is already declared as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetResourceName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetResourceName with it.\n  - Your function must have the exact same signature as OS_GetResourceName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetResourceName to check logs.\n  - Your function MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetResourceName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n    FILE *log_fp = fopen(\"/tmp/logs/2515.txt\", \"a\");\n\n    /* Minimal entry log so tests always show the function was reached */\n    if (log_fp)\n    {\n        fprintf(log_fp, \"ENTER OS_GetResourceName: object_id=%lu buffer=%p buffer_size=%zu\\n\",\n                (unsigned long)object_id, (void *)buffer, buffer_size);\n    }\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    if (log_fp)\n    {\n        fprintf(log_fp, \"Buffer cleared (buffer[0]=0)\\n\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        if (log_fp)\n        {\n            fprintf(log_fp, \"record=%p\\n\", (void *)record);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            if (log_fp)\n            {\n                fprintf(log_fp, \"record->name_entry pointer=%p\\n\", (void *)record->name_entry);\n            }\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (log_fp)\n            {\n                fprintf(log_fp, \"OS_strnlen -> name_len=%zu\\n\", name_len);\n            }\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"Name too long: buffer_size=%zu <= name_len=%zu\\n\", buffer_size, name_len);\n                }\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"Adjusted name_len=%zu return_code=%ld\\n\", name_len, (long)return_code);\n                }\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            if (log_fp)\n            {\n                /* Log the copied name safely up to name_len characters */\n                fprintf(log_fp, \"Copied name to buffer (len=%zu): '%.*s'\\n\", name_len, (int)name_len, buffer);\n            }\n        }\n        else\n        {\n            if (log_fp)\n            {\n                fprintf(log_fp, \"record->name_entry is NULL\\n\");\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (log_fp)\n        {\n            fprintf(log_fp, \"OS_ObjectIdRelease called\\n\");\n        }\n    }\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"EXIT OS_GetResourceName return=%ld\\n\", (long)return_code);\n        fclose(log_fp);\n    }\n\n    return return_code;\n}\n"
}