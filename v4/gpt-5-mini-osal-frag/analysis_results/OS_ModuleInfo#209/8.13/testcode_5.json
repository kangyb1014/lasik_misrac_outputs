{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses record (declared as OS_common_record_t *record) to access record->name_entry, which is a non-const character array/pointer in the global module table. The field is only read (copied with strncpy) and neither the record nor its name_entry are modified here, so the pointer should be to a const-qualified type (e.g. const OS_common_record_t *record or make name_entry const). Thus Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleInfo with it.\n  - Your function must have the exact same signature as OS_ModuleInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleInfo to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Minimal logging probe to capture control flow and state for Rule 8.13 analysis */\n    {\n        FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: entry; module_id=%ld, module_prop=%p\\n\", (long)module_id, (void *)module_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log the result of ObjectIdGetById and whether we will proceed to read the tables */\n    {\n        FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers retrieved from object tables and snapshot of name/filename data used in this function */\n        {\n            FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n            if (log != NULL)\n            {\n                /* Log the addresses of record and module */\n                fprintf(log, \"OS_ModuleInfo: record=%p, module=%p\\n\", (void *)record, (void *)module);\n\n                /* Safely capture and log the source name and filename (bounded) */\n                if (record != NULL && record->name_entry != NULL)\n                {\n                    char name_preview[64];\n                    strncpy(name_preview, record->name_entry, sizeof(name_preview) - 1);\n                    name_preview[sizeof(name_preview) - 1] = '\\0';\n                    fprintf(log, \"OS_ModuleInfo: record->name_entry (preview)='%s'\\n\", name_preview);\n                }\n                else\n                {\n                    fprintf(log, \"OS_ModuleInfo: record->name_entry is NULL or record is NULL\\n\");\n                }\n\n                if (module != NULL && module->file_name != NULL)\n                {\n                    char file_preview[128];\n                    strncpy(file_preview, module->file_name, sizeof(file_preview) - 1);\n                    file_preview[sizeof(file_preview) - 1] = '\\0';\n                    fprintf(log, \"OS_ModuleInfo: module->file_name (preview)='%s'\\n\", file_preview);\n                }\n                else\n                {\n                    fprintf(log, \"OS_ModuleInfo: module->file_name is NULL or module is NULL\\n\");\n                }\n\n                fclose(log);\n            }\n        }\n\n        /* Perform the same copies as original code; these are the operations that exercise the non-const pointer usage */\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        /* Ensure null termination (in case source not null-terminated within bound) */\n        module_prop->name[sizeof(module_prop->name) - 1] = '\\0';\n\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n        module_prop->filename[sizeof(module_prop->filename) - 1] = '\\0';\n\n        /* Log what was copied into module_prop */\n        {\n            FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ModuleInfo: copied module_prop->name='%s'\\n\", module_prop->name);\n                fprintf(log, \"OS_ModuleInfo: copied module_prop->filename='%s'\\n\", module_prop->filename);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log the implementation call result */\n        {\n            FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ModuleInfo: OS_ModuleGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final log of return value */\n    {\n        FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: exit; return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}