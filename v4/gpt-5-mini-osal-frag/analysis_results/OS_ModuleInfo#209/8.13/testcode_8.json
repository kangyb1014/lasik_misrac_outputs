{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is only used to read fields (e.g. strncpy(module_prop->filename, module->file_name, ...)) and is assigned from a non-const array element via OS_OBJECT_TABLE_GET. Because the pointer is not modified through and only read, it could and should be declared as const OS_module_internal_record_t *module to indicate read-only access. Assigning the non-const table element to a pointer-to-const is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ModuleInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ModuleInfo with it.\n  - Your function must have the exact same signature as OS_ModuleInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ModuleInfo to check logs.\n  - Your function MUST preserve the original logic of OS_ModuleInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ModuleInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n    FILE *log = fopen(\"/tmp/logs/1625.txt\", \"a\");\n\n    /* Minimal entry probe so the function reach is always recorded */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ModuleInfo ENTER: module_prop=%p\\n\", (void *)module_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ModuleInfo: zeroed module_prop (size=%zu)\\n\", sizeof(OS_module_prop_t));\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ModuleInfo: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: record=%p module=%p token=%p\\n\", (void *)record, (void *)module, (void *)&token);\n            if (record != NULL && record->name_entry != NULL)\n            {\n                fprintf(log, \"OS_ModuleInfo: record->name_entry=\\\"%s\\\"\\n\", record->name_entry);\n            }\n            else\n            {\n                fprintf(log, \"OS_ModuleInfo: record->name_entry is NULL or record is NULL\\n\");\n            }\n\n            if (module != NULL && module->file_name != NULL)\n            {\n                fprintf(log, \"OS_ModuleInfo: module->file_name=\\\"%s\\\"\\n\", module->file_name);\n            }\n            else\n            {\n                fprintf(log, \"OS_ModuleInfo: module->file_name is NULL or module is NULL\\n\");\n            }\n\n            fflush(log);\n        }\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: OS_ModuleGetInfo_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ModuleInfo: released token\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ModuleInfo EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}