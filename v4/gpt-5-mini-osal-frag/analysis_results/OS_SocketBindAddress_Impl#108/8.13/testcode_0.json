{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read access (impl->fd is read to call bind). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Declaring it as 'const OS_impl_file_internal_record_t *impl' would satisfy the rule. Therefore this code fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/745.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress_Impl:\n```c\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketBindAddress_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketBindAddress_Impl with it.\n  - Your function must have the exact same signature as OS_SocketBindAddress_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketBindAddress_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketBindAddress_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketBindAddress_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketBindAddress_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open probe log for recording control flow and state. */\n    FILE *log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_SocketBindAddress_Impl token_ptr=%p\\n\", (void *)token);\n        /* Attempt to print the token value if reasonable. */\n        fprintf(log, \"ENTER: token_value=*token (as unsigned long long)=%llu\\n\", (unsigned long long)(*token));\n        fclose(log);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the impl pointer and (read-only) fd before any use */\n    log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"STATE: impl_ptr=%p\\n\", (void *)impl);\n        /* Safe to read impl->fd for logging since original code uses it for bind. */\n        fprintf(log, \"STATE: impl->fd=%d\\n\", impl->fd);\n        fprintf(log, \"NOTE: impl pointer is non-const in this function; used for read-only access.\\n\");\n        fclose(log);\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    /* Log the sa_family for debugging */\n    log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"STATE: sa_ptr=%p sa_family=%d\\n\", (void *)sa, (int)sa->sa_family);\n        fclose(log);\n    }\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"INFO: computed addrlen=%u\\n\", (unsigned)addrlen);\n        fclose(log);\n    }\n\n    if (addrlen == 0)\n    {\n        log = fopen(\"/tmp/logs/745.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT: bad address, returning OS_ERR_BAD_ADDRESS\\n\");\n            fclose(log);\n        }\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Perform the bind and log the result. */\n    os_result = bind(impl->fd, sa, addrlen);\n\n    log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        if (os_result < 0)\n        {\n            int saved_errno = errno;\n            fprintf(log, \"BIND_FAIL: impl_fd=%d sa_family=%d addrlen=%u bind_result=%d errno=%d (%s)\\n\",\n                    impl->fd, (int)sa->sa_family, (unsigned)addrlen, os_result, saved_errno, strerror(saved_errno));\n        }\n        else\n        {\n            fprintf(log, \"BIND_OK: impl_fd=%d sa_family=%d addrlen=%u bind_result=%d\\n\",\n                    impl->fd, (int)sa->sa_family, (unsigned)addrlen, os_result);\n        }\n        fclose(log);\n    }\n\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    log = fopen(\"/tmp/logs/745.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"EXIT: returning OS_SUCCESS\\n\");\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}