{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If StubPtr->Data.Buff.Position is greater than StubPtr->Data.Buff.TotalSize (or TotalSize==0 and Position>0), the computation ActualCopy = TotalSize - Position underflows (size_t wraparound) and &StubPtr->Data.Buff.BasePtr[Position] will point beyond the source buffer. Even when ActualCopy is subsequently limited by MaxSize, memcpy will start from an out-of-bounds source pointer and can read memory beyond the buffer. Therefore this code can result in accesses beyond the bounds of the objects referenced by the pointer parameters to memcpy.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2013.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_CopyToLocal code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_CopyToLocal with it.\n  - Your function must have the exact same signature as UT_Stub_CopyToLocal.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_CopyToLocal to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_CopyToLocal will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Logging probe variables */\n    FILE *logf = NULL;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Open log file early to ensure we capture entry */\n    logf = fopen(\"/tmp/logs/2013.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_CopyToLocal ENTRY: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu\\n\",\n                (unsigned long long)(uintptr_t)FuncKey, LocalBuffer, MaxSize);\n        fflush(logf);\n    }\n\n    if (StubPtr != NULL)\n    {\n        size_t total = StubPtr->Data.Buff.TotalSize;\n        size_t pos   = StubPtr->Data.Buff.Position;\n\n        /* Detect potential underflow condition for logging (do not change behavior) */\n        int pos_gt_total = (pos > total) ? 1 : 0;\n        int total_zero_and_pos_gt_zero = (total == 0 && pos > 0) ? 1 : 0;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  Stub found: BasePtr=%p, TotalSize=%zu, Position=%zu\\n\",\n                    (void *)StubPtr->Data.Buff.BasePtr, total, pos);\n            fprintf(logf, \"  Pre-compute flags: pos_gt_total=%d, total_zero_and_pos_gt_zero=%d\\n\",\n                    pos_gt_total, total_zero_and_pos_gt_zero);\n            fflush(logf);\n        }\n\n        /* Original behavior retained: perform subtraction which may underflow for unsigned types */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  After subtraction: ActualCopy (pre-clamp)=%zu\\n\", ActualCopy);\n            fflush(logf);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  Clamped ActualCopy to MaxSize=%zu\\n\", ActualCopy);\n                fflush(logf);\n            }\n        }\n\n        /* Log source/destination pointers and sizes just before memcpy */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  About to memcpy: dest=%p, src_base=%p, src_position=%zu, copy_len=%zu\\n\",\n                    LocalBuffer, (void *)StubPtr->Data.Buff.BasePtr, StubPtr->Data.Buff.Position, ActualCopy);\n            /* Ensure logs are written out before the potentially unsafe memcpy */\n            fflush(logf);\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  After memcpy: new Position=%zu, TotalSize=%zu\\n\",\n                    StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n            fflush(logf);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  Position >= TotalSize -> clearing stub entry\\n\");\n                fflush(logf);\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  No stub entry found for FuncKey=%llu\\n\", (unsigned long long)(uintptr_t)FuncKey);\n            fflush(logf);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_Stub_CopyToLocal EXIT: ActualCopy=%zu\\n\\n\", ActualCopy);\n        fclose(logf);\n    }\n\n    return ActualCopy;\n}\n"
}