{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the LENGTHCHECK macro uses an unbounded string function such as strlen(name) (or strcpy/strcat/etc.) to determine the name length, then passing a char array of size OS_MAX_API_NAME that is not NUL-terminated will cause the string routine to read past the bounds of the object. For example, a buffer exactly OS_MAX_API_NAME bytes long with no terminating '\\0' will make strlen scan beyond the buffer until it finds a NUL, violating MISRA C 2023 Rule 21.17. Using a bounded function (e.g. strnlen with the limit OS_MAX_API_NAME) avoids the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetIdByName:\n```c\nint32 OS_TaskGetIdByName(osal_id_t *task_id, const char *task_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(task_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, task_name, task_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskGetIdByName with it.\n  - Your function must have the exact same signature as OS_TaskGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_TaskGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TaskGetIdByName(osal_id_t *task_id, const char *task_name)\n{\n    int32 return_code;\n    FILE *logf = fopen(\"/tmp/logs/3113.txt\", \"a\");\n\n    /* Log entry and pointer state (do not dereference task_name to avoid introducing new out-of-bounds reads) */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_TaskGetIdByName called\\n\");\n        fprintf(logf, \"  task_id pointer = %p\\n\", (void *)task_id);\n        fprintf(logf, \"  task_name pointer = %p\\n\", (const void *)task_name);\n        fprintf(logf, \"  NOTE: Not dereferencing task_name to avoid introducing additional read operations that could cause out-of-bounds access.\\n\");\n        fflush(logf);\n    }\n\n    /* Check parameters (preserve original behavior) */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(task_name);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"  Parameters checked by OS_CHECK_POINTER macros. About to call OS_ObjectIdFindByName.\\n\");\n        fflush(logf);\n    }\n\n    /* Preserve original logic: forward to the object lookup routine */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, task_name, task_id);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_ObjectIdFindByName returned %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}"
}