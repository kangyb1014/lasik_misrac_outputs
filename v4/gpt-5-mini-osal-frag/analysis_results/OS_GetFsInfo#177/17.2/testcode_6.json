{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via OS_DEBUG: OS_printf calls OS_DEBUG(\"BUG: ...\", String). If OS_DEBUG is implemented as a wrapper that calls OS_printf (a common implementation), this yields an indirect recursive call path OS_printf -> OS_DEBUG -> OS_printf, violating Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetFsInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/20.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetFsInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetFsInfo with it.\n  - Your function must have the exact same signature as OS_GetFsInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetFsInfo to check logs.\n  - Your function MUST preserve the original logic of OS_GetFsInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetFsInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n    FILE *logf = NULL;\n    const char *env_repro = NULL;\n\n    /* Try to open log file for append. Best-effort; do not change behavior if it fails. */\n    logf = fopen(\"/tmp/logs/20.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"ENTER OS_GetFsInfo: filesys_info=%p\\n\", (void *)filesys_info);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n    if (logf)\n    {\n        fprintf(logf, \"OS_CHECK_POINTER passed\\n\");\n        fflush(logf);\n    }\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n    if (logf)\n    {\n        fprintf(logf, \"memset done: zeroed filesys_info (size=%zu)\\n\", sizeof(*filesys_info));\n        fflush(logf);\n    }\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    if (logf)\n    {\n        fprintf(logf, \"Initial values: MaxFds=%u, MaxVolumes=%u\\n\",\n                (unsigned)filesys_info->MaxFds, (unsigned)filesys_info->MaxVolumes);\n        fflush(logf);\n    }\n\n    /* Iterate free file descriptors */\n    if (logf)\n    {\n        fprintf(logf, \"Initializing iterator for OS_OBJECT_TYPE_OS_STREAM\\n\");\n        fflush(logf);\n    }\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        if (logf)\n        {\n            fprintf(logf, \"Found free stream: FreeFds=%u\\n\", (unsigned)filesys_info->FreeFds);\n            fflush(logf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    if (logf)\n    {\n        fprintf(logf, \"Destroyed stream iterator\\n\");\n        fflush(logf);\n    }\n\n    /* Iterate free volumes */\n    if (logf)\n    {\n        fprintf(logf, \"Initializing iterator for OS_OBJECT_TYPE_OS_FILESYS\\n\");\n        fflush(logf);\n    }\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        if (logf)\n        {\n            fprintf(logf, \"Found free volume: FreeVolumes=%u\\n\", (unsigned)filesys_info->FreeVolumes);\n            fflush(logf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    if (logf)\n    {\n        fprintf(logf, \"Destroyed volume iterator\\n\");\n        fflush(logf);\n    }\n\n    /*\n     * Optional reproduction trigger:\n     * If the environment variable OS_DEBUG_REPRO is set to \"1\" then call OS_printf.\n     * This allows test harnesses/agents to intentionally invoke the potentially\n     * recursive path (OS_printf -> OS_DEBUG -> OS_printf) if the environment under test\n     * has a buggy wrapper implementation. By default this is skipped so normal tests\n     * maintain original behavior.\n     */\n    env_repro = getenv(\"OS_DEBUG_REPRO\");\n    if (env_repro && env_repro[0] == '1')\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_DEBUG_REPRO=1: invoking OS_printf to attempt reproduction of indirect recursion\\n\");\n            fflush(logf);\n        }\n\n        /* Intentionally call OS_printf only when explicitly requested via environment. */\n        OS_printf(\"OS_GetFsInfo: reproduction trigger - calling OS_printf to test for indirect recursion (OS_printf -> OS_DEBUG -> OS_printf)\\n\");\n\n        if (logf)\n        {\n            fprintf(logf, \"Returned from OS_printf (if execution continued)\\n\");\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_DEBUG_REPRO not set or not '1': skipping OS_printf invocation.\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT OS_GetFsInfo: FreeFds=%u, FreeVolumes=%u, returning OS_SUCCESS\\n\",\n                (unsigned)filesys_info->FreeFds, (unsigned)filesys_info->FreeVolumes);\n        fclose(logf);\n    }\n\n    return OS_SUCCESS;\n}"
}