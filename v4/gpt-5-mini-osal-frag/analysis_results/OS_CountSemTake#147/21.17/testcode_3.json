{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without any checks that both pointers are non-NULL and that both point to valid null-terminated character arrays. If either TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL or not NUL-terminated (for example, if a caller supplies a non-terminated buffer or the stub entry was not properly initialized/was cleared), strcmp may read past the end of the object(s), causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake:\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CountSemTake code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CountSemTake with it.\n  - Your function must have the exact same signature as OS_CountSemTake.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CountSemTake to check logs.\n  - Your function MUST preserve the original logic of OS_CountSemTake as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CountSemTake will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Minimal logging to capture control flow and state for debugging. */\n    {\n        /* Use stdio functions to append traces to the log file. Many builds already\n         * include <stdio.h>, so these calls should link in. If stdio is unavailable\n         * in the build environment, these calls will be no-ops (NULL check prevents\n         * dereferencing) and the original behavior is preserved. */\n        FILE *log = fopen(\"/tmp/logs/913.txt\", \"a\");\n        if (log)\n        {\n            /* Record function entry and the sem_id value and token address. */\n            fprintf(log, \"OS_CountSemTake: entry\\n\");\n            fprintf(log, \"  sem_id (raw) = %ld\\n\", (long)sem_id);\n            fprintf(log, \"  token address = %p\\n\", (void *)&token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log the result of OS_ObjectIdGetById and whether we will call the Impl function. */\n    {\n        FILE *log = fopen(\"/tmp/logs/913.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CountSemTake: after OS_ObjectIdGetById\\n\");\n            fprintf(log, \"  return_code = %ld\\n\", (long)return_code);\n            fprintf(log, \"  will_call_impl = %s\\n\", (return_code == OS_SUCCESS) ? \"YES\" : \"NO\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation to capture a precise control point. */\n        {\n            FILE *log = fopen(\"/tmp/logs/913.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_CountSemTake: calling OS_CountSemTake_Impl\\n\");\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CountSemTake_Impl(&token);\n\n        /* And log the result returned by the implementation. */\n        {\n            FILE *log = fopen(\"/tmp/logs/913.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_CountSemTake: returned from OS_CountSemTake_Impl\\n\");\n                fprintf(log, \"  return_code = %ld\\n\", (long)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}