{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'queue' is declared as OS_queue_internal_record_t * but is only used for read-only access (e.g. reading queue->max_size). According to MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_queue_internal_record_t *queue). The macro OS_OBJECT_TABLE_GET yields a non-const pointer to an element of OS_queue_table, but assigning that to a pointer-to-const is permitted and would satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1355.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueGet code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueGet with it.\n  - Your function must have the exact same signature as OS_QueueGet.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueGet to check logs.\n  - Your function MUST preserve the original logic of OS_QueueGet as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueGet will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueGet as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Local helper prototypes for logging (avoid relying on project includes) */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *path, const char *mode);\n    extern int fprintf(FILE *stream, const char *format, ...);\n    extern int fclose(FILE *stream);\n\n    /* Minimal entry log so test harness can detect function was entered */\n    {\n        FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            /* Log basic call parameters */\n            (void)fprintf(log, \"Entered OS_QueueGet: queue_id=%lu, data=%p, size=%zu, size_copied=%p, timeout=%ld\\n\",\n                          (unsigned long)queue_id, (void *)data, size, (void *)size_copied, (long)timeout);\n            (void)fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log the result of object id lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            (void)fprintf(log, \"OS_ObjectIdGetById returned %ld, token=%lu\\n\", (long)return_code, (unsigned long)token);\n            (void)fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the pointer retrieved from the object table */\n        {\n            FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n            if (log != (FILE *)0)\n            {\n                if (queue != (OS_queue_internal_record_t *)0)\n                {\n                    (void)fprintf(log, \"OS_OBJECT_TABLE_GET -> queue=%p, queue->max_size=%zu\\n\", (void *)queue, queue->max_size);\n                }\n                else\n                {\n                    (void)fprintf(log, \"OS_OBJECT_TABLE_GET -> queue=NULL\\n\");\n                }\n                (void)fclose(log);\n            }\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            /* Log the branch taken and sizes */\n            {\n                FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n                if (log != (FILE *)0)\n                {\n                    (void)fprintf(log, \"Branch: size too small (provided=%zu, needed=%zu) -> return_code=%ld\\n\",\n                                  size, queue->max_size, (long)return_code);\n                    (void)fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /* Log that we will call the implementation function */\n            {\n                FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n                if (log != (FILE *)0)\n                {\n                    (void)fprintf(log, \"Branch: calling OS_QueueGet_Impl with token=%lu, data=%p, size=%zu, timeout=%ld\\n\",\n                                  (unsigned long)token, data, size, (long)timeout);\n                    (void)fclose(log);\n                }\n            }\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            /* Log the result from the implementation call */\n            {\n                FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n                if (log != (FILE *)0)\n                {\n                    (void)fprintf(log, \"OS_QueueGet_Impl returned %ld, size_copied=%zu\\n\", (long)return_code, *size_copied);\n                    (void)fclose(log);\n                }\n            }\n        }\n    }\n\n    /* Final return log */\n    {\n        FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n        if (log != (FILE *)0)\n        {\n            (void)fprintf(log, \"Exiting OS_QueueGet -> return_code=%ld\\n\", (long)return_code);\n            (void)fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}