{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to &OS_queue_table[OS_ObjectIndexFromToken(&token)] and yields a pointer to a non-const table element. In the shown use (OS_QueueGet) the returned pointer is assigned to 'OS_queue_internal_record_t *queue' and only read (queue->max_size). Therefore the pointer could and should be a pointer to const (const OS_queue_internal_record_t *), so the current code violates MISRA C 2023 Rule 8.13 in that usage (the macro enables a non-const pointer where a const-qualified pointer is possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1355.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueGet code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueGet with it.\n  - Your function must have the exact same signature as OS_QueueGet.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueGet to check logs.\n  - Your function MUST preserve the original logic of OS_QueueGet as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueGet will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueGet as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Open log file for appending; if it fails, continue silently */\n    FILE *log = fopen(\"/tmp/logs/1355.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_QueueGet queue_id=%ld data=%p size=%zu size_copied=%p timeout=%d\\n\",\n                (long)queue_id, (void *)data, size, (void *)size_copied, (int)timeout);\n        fflush(log);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld, token_addr=%p\\n\", (long)return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture the table lookup once (preserve original behavior) */\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_OBJECT_TABLE_GET -> queue_ptr=%p\\n\", (void *)queue);\n            if (queue)\n            {\n                fprintf(log, \"queue->max_size=%zu\\n\", queue->max_size);\n            }\n            else\n            {\n                fprintf(log, \"queue is NULL (unexpected)\\n\");\n            }\n            fflush(log);\n        }\n\n        if (size < queue->max_size)\n        {\n            if (log)\n            {\n                fprintf(log, \"CHECK: requested size %zu < queue->max_size %zu -> INVALID_SIZE\\n\", size, queue->max_size);\n                fflush(log);\n            }\n\n            /* The buffer that the user is passing in is potentially too small */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"CALL: OS_QueueGet_Impl token_addr=%p data=%p size=%zu timeout=%d\\n\", (void *)&token, data, size, (int)timeout);\n                fflush(log);\n            }\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            if (log)\n            {\n                fprintf(log, \"RETURN from OS_QueueGet_Impl -> return_code=%ld size_copied=%zu\\n\", (long)return_code, (size_t)*size_copied);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_QueueGet returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}