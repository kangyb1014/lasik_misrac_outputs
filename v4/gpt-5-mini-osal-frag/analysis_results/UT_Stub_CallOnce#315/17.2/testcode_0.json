{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the Func pointer refers to UT_Stub_CallOnce itself (e.g. UT_Stub_CallOnce(UT_Stub_CallOnce)) or to any function that calls UT_Stub_CallOnce, then UT_Stub_CallOnce will invoke Func() and thereby call itself directly or indirectly, producing recursion.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CallOnce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1190.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CallOnce:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_CallOnce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_CallOnce with it.\n  - Your function must have the exact same signature as UT_Stub_CallOnce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_CallOnce to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_CallOnce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_Stub_CallOnce(void (*Func)(void))\n{\n    /* Logging probe to capture control flow/state for Rule 17.2 reproduction */\n    FILE *log = fopen(\"/tmp/logs/1190.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_Stub_CallOnce entered: Func=%p\\n\", (void *)Func);\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"UT_Stub_CallOnce: Func is NULL, returning\\n\");\n            fclose(log);\n        }\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    if (log)\n    {\n        fprintf(log, \"Computed FuncKey=%p\\n\", (void *)FuncKey);\n    }\n\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (log)\n        {\n            /* Print entry summary for each slot inspected */\n            fprintf(log, \"Inspecting slot %d: ptr=%p EntryType=%d FuncKey=%p\\n\",\n                    i, (void *)StubPtr, (int)StubPtr->EntryType, (void *)StubPtr->FuncKey);\n        }\n\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n            if (log)\n            {\n                fprintf(log, \"Recorded first unused entry at index %d ptr=%p\\n\", i, (void *)OnceEnt);\n            }\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            if (log)\n            {\n                fprintf(log, \"Found existing CALL_ONCE entry at index %d ptr=%p matching FuncKey\\n\", i, (void *)OnceEnt);\n            }\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"OnceEnt is NULL - UT_MAX_FUNC_STUBS too low? About to call UtAssert_Abort.\\n\");\n            fclose(log);\n        }\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        if (log)\n        {\n            fprintf(log, \"Using OnceEnt ptr=%p: setting EntryType=CALL_ONCE FuncKey=%p\\n\", (void *)OnceEnt, (void *)FuncKey);\n        }\n\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        if (log)\n        {\n            fprintf(log, \"About to call Func() at %p -- NOTE: if this points to UT_Stub_CallOnce or a caller of it, this will cause recursion.\\n\", (void *)Func);\n            /* Close log before invoking Func to ensure log data is flushed and to avoid holding file during the call */\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Preserve original semantics: call the function pointer provided by the caller */\n        Func();\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OnceEnt already set (EntryType=%d) - not calling Func; leaving.\\n\", (int)OnceEnt->EntryType);\n            fclose(log);\n        }\n    }\n}\n"
}