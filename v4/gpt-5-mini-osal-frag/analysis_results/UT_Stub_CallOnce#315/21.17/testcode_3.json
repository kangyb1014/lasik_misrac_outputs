{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strlen(OutputMessage) has no precondition checks for OutputMessage being non-NULL and NUL-terminated. If UT_BSP_DoText is ever called with OutputMessage == NULL or with a pointer to a character array that is not terminated by '\\0' within its allocated bounds (for example a fixed-length buffer filled without a terminator), strlen will read past the object bounds (undefined behavior). Note: the specific call chain from UT_Stub_CallOnce -> UtAssert_Abort passes a string literal (\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\"), which is NUL-terminated and safe, but the UT_BSP_DoText implementation itself does not guarantee safety for all callers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CallOnce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CallOnce:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_CallOnce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_CallOnce with it.\n  - Your function must have the exact same signature as UT_Stub_CallOnce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_CallOnce to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_CallOnce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n    FILE *log = NULL;\n\n    /* Attempt to open log file for append. If this fails, proceed without logging. */\n    log = fopen(\"/tmp/logs/1193.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER UT_Stub_CallOnce: Func=%p\\n\", (void *)Func);\n        fflush(log);\n    }\n\n    if (Func == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"Func is NULL -> returning early\\n\");\n            fclose(log);\n        }\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    if (log)\n    {\n        fprintf(log, \"Computed FuncKey (cast from Func)\\n\");\n        fflush(log);\n    }\n\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (log)\n        {\n            fprintf(log, \"Loop index=%d, StubPtr=%p, EntryType=%d\\n\", i, (void *)StubPtr, StubPtr->EntryType);\n            fflush(log);\n        }\n\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n            if (log)\n            {\n                fprintf(log, \"Recorded candidate OnceEnt at index=%d (ptr=%p)\\n\", i, (void *)OnceEnt);\n                fflush(log);\n            }\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            if (log)\n            {\n                fprintf(log, \"Found existing CALL_ONCE entry at index=%d (ptr=%p) matching FuncKey\\n\", i, (void *)OnceEnt);\n                fflush(log);\n            }\n            break;\n        }\n\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        if (log)\n        {\n            /* Log the exact abort message that will be passed to UtAssert_Abort so external agents\n               can reproduce and inspect any string-handling behavior triggered by the abort path. */\n            const char *msg = \"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\";\n            fprintf(log, \"OnceEnt == NULL -> about to call UtAssert_Abort with message: \\\"%s\\\"\\n\", msg);\n            fflush(log);\n            fclose(log);\n        }\n\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        if (log)\n        {\n            fprintf(log, \"Initializing OnceEnt (ptr=%p): setting EntryType=UT_ENTRYTYPE_CALL_ONCE and FuncKey from Func\\n\", (void *)OnceEnt);\n            fflush(log);\n            fclose(log);\n        }\n\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        /* Call the provided function pointer as in the original implementation. */\n        Func();\n    }\n    else\n    {\n        /* If an entry already exists and is not UNUSED, do nothing (preserve original behavior). */\n        if (log)\n        {\n            fprintf(log, \"OnceEnt exists (ptr=%p) with EntryType=%d -> not invoking Func\\n\", (void *)OnceEnt, OnceEnt->EntryType);\n            fflush(log);\n            fclose(log);\n        }\n    }\n}\n"
}