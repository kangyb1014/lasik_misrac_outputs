{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_MutSemTake_Impl is declared to take a non-const pointer (e.g. OS_object_token_t *token) but does not modify the pointed-to token, this is a violation: the parameter should be declared as const OS_object_token_t * and the call return_code = OS_MutSemTake_Impl(&token); should pass a pointer-to-const. If, however, OS_MutSemTake_Impl actually modifies the token, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake:\n```c\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            mutex->last_owner = OS_TaskGetId();\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_MutSemTake code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_MutSemTake with it.\n  - Your function must have the exact same signature as OS_MutSemTake.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_MutSemTake to check logs.\n  - Your function MUST preserve the original logic of OS_MutSemTake as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_MutSemTake will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Logging setup: attempt to write to the requested file. Fall back to /tmp/175.txt if needed. */\n    FILE *logf = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = fopen(\"/tmp/175.txt\", \"a\");\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"ENTER OS_MutSemTake: sem_id=%ld\\n\", (long)sem_id);\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        if (logf)\n        {\n            fprintf(logf, \"Resolved mutex pointer=%p, token_addr=%p\\n\", (void *)mutex, (void *)&token);\n            fflush(logf);\n        }\n\n        /* Call the platform-specific implementation and log its return value. */\n        return_code = OS_MutSemTake_Impl(&token);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_MutSemTake_Impl(&token) returned %ld\\n\", (long)return_code);\n            fflush(logf);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            osal_id_t owner = OS_TaskGetId();\n\n            if (logf)\n            {\n                fprintf(logf, \"OS_TaskGetId() returned %ld; setting mutex->last_owner\\n\", (long)owner);\n                fflush(logf);\n            }\n\n            mutex->last_owner = owner;\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"EXIT OS_MutSemTake: return_code=%ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}