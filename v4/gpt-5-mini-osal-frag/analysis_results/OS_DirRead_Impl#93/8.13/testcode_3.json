{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'de' is declared as 'struct dirent *de' but is only used for read-only access (de->d_name is read). According to MISRA C 2023 Rule 8.13, it should be declared as a pointer to a const-qualified type (e.g. 'const struct dirent *de'). Assigning the non-const return of readdir() to a 'const struct dirent *' is allowed, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirRead_Impl:\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirRead_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirRead_Impl with it.\n  - Your function must have the exact same signature as OS_DirRead_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirRead_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_DirRead_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirRead_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirRead_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* Logging probe: record entry and key state (safe if log fopen fails) */\n    FILE *log = fopen(\"/tmp/logs/715.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_DirRead_Impl ENTER: token=%p impl=%p\\n\", (const void *)token, (void *)impl);\n        /* print impl->dp only if impl is non-NULL to avoid deref of NULL pointer */\n        fprintf(log, \"impl->dp=%p\\n\", (void *)(impl ? impl->dp : NULL));\n        fflush(log);\n    }\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"readdir returned de=%p\\n\", (void *)de);\n        if (de != NULL)\n        {\n            /* log the name read from the dirent structure (read-only usage) */\n            fprintf(log, \"de->d_name=\\\"%s\\\"\\n\", de->d_name);\n        }\n        fflush(log);\n    }\n\n    if (de == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirRead_Impl EXIT: OS_ERROR (no more entries)\\n\");\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    /* Preserve original behavior: copy file name into provided buffer */\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"copied FileName=\\\"%s\\\" (buffer_size=%lu)\\n\",\n                (char *)dirent->FileName, (unsigned long)sizeof(dirent->FileName));\n        fprintf(log, \"OS_DirRead_Impl EXIT: OS_SUCCESS\\n\");\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}"
}