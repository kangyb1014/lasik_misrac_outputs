{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the prototype of OS_ObjectIdFindByName declares the name parameter as a non-const pointer (e.g. int32 OS_ObjectIdFindByName(uint32 type, char *name, osal_id_t *id)); passing sem_name (const char *) to such a parameter discards the const qualifier and violates MISRA C 2023 Rule 8.13. If, however, OS_ObjectIdFindByName is declared to take a const char * for its name parameter, then no rule violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetIdByName:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemGetIdByName code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemGetIdByName with it.\n  - Your function must have the exact same signature as OS_BinSemGetIdByName.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemGetIdByName to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemGetIdByName as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemGetIdByName will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemGetIdByName as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    /* Local includes are placed here so this replacement function remains self-contained\n     * and does not require editing other parts of the file. This is valid C and\n     * allows use of stdio functions for logging. */\n    #include <stdio.h>\n\n    FILE *logf = fopen(\"/tmp/logs/595.txt\", \"a\");\n    if (logf != NULL)\n    {\n        /* Log function entry and incoming pointer/state information */\n        (void)fprintf(logf, \"OS_BinSemGetIdByName ENTRY: sem_id=%p, sem_name_ptr=%p\\n\",\n                      (void *)sem_id, (void *)sem_name);\n        if (sem_name != NULL)\n        {\n            /* Print the string payload if available to show const-discard scenario */\n            (void)fprintf(logf, \"OS_BinSemGetIdByName ENTRY: sem_name=\\\"%s\\\"\\n\", sem_name);\n        }\n        (void)fclose(logf);\n        logf = NULL;\n    }\n\n    int32 return_code;\n\n    /* Preserve original parameter checks */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* Call the underlying lookup function (the potential location of const-discard) */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log the result/code and pointers after the call so callers can reproduce/control the scenario */\n    logf = fopen(\"/tmp/logs/595.txt\", \"a\");\n    if (logf != NULL)\n    {\n        (void)fprintf(logf, \"OS_BinSemGetIdByName EXIT: return_code=%d, sem_id=%p, sem_name_ptr=%p\\n\",\n                      (int)return_code, (void *)sem_id, (void *)sem_name);\n        if (sem_name != NULL)\n        {\n            (void)fprintf(logf, \"OS_BinSemGetIdByName EXIT: sem_name=\\\"%s\\\"\\n\", sem_name);\n        }\n        (void)fclose(logf);\n    }\n\n    return return_code;\n}\n"
}