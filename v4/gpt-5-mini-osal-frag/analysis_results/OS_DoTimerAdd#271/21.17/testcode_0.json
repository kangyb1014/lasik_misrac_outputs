{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_CHECK_STRING (used by OS_CHECK_APINAME) uses a string.h function such as strlen to measure the length of timer_name, then a caller-supplied timer_name that is not NUL-terminated (or points to a shorter buffer) will cause the strlen call to read past the bounds of the object referenced by timer_name. For example, passing a pointer to a non-terminated char array or a buffer shorter than the actual sequence of characters will allow strlen to scan beyond the buffer and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoTimerAdd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DoTimerAdd:\n```c\nstatic int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           OS_ArgCallback_t callback_ptr, void *callback_arg, uint32 flags)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              listcb_token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Check parameters\n     *\n     * Note \"callback_arg\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Check that the timebase reference is valid\n     * If successful, then after this statement, we MUST decrement the refcount\n     * if we leave this routine with an error.\n     */\n    return_code =\n        OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_ref_id, &timebase_token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMECB, timer_name, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timebase_token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(timecb_token, timecb, timer_name, timer_name);\n\n        /*\n         * transfer ownership so the refcount obtained earlier is now\n         * associated with the timecb object, and will be retained until\n         * the object is deleted.\n         */\n        OS_ObjectIdTransferToken(&timebase_token, &timecb->timebase_token);\n\n        timecb->callback_ptr = callback_ptr;\n        timecb->callback_arg = callback_arg;\n        timecb->flags        = flags;\n        timecb->prev_cb      = OS_ObjectIdFromToken(&timecb_token);\n        timecb->next_cb      = OS_ObjectIdFromToken(&timecb_token);\n\n        /*\n         * Now we need to add it to the time base callback ring, so take the\n         * timebase-specific lock to prevent a tick from being processed at this moment.\n         */\n        OS_TimeBaseLock_Impl(&timebase_token);\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n\n            timecb->next_cb = OS_ObjectIdFromToken(&listcb_token);\n            timecb->prev_cb = list_timecb->prev_cb;\n\n            if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n                OS_SUCCESS)\n            {\n                list_timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n                list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n                list_timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n            }\n        }\n\n        timebase->first_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timebase_token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &timecb_token, timer_id);\n    }\n    else\n    {\n        OS_ObjectIdRelease(&timebase_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DoTimerAdd code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DoTimerAdd with it.\n  - Your function must have the exact same signature as OS_DoTimerAdd.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DoTimerAdd to check logs.\n  - Your function MUST preserve the original logic of OS_DoTimerAdd as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DoTimerAdd will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DoTimerAdd as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           OS_ArgCallback_t callback_ptr, void *callback_arg, uint32 flags)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              listcb_token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and initial state (do not dereference timer_name to avoid reading past bounds) */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_DoTimerAdd: timer_id=%p timer_name=%p timebase_ref_id=%lu callback_ptr=%p callback_arg=%p flags=%lu\\n\",\n                    (void *)timer_id, (const void *)timer_name, (unsigned long)timebase_ref_id,\n                    (void *)callback_ptr, (void *)callback_arg, (unsigned long)flags);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters\n     *\n     * Note \"callback_arg\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Log just before the API name check to capture the pointer passed to the macro.\n     * We purposely avoid any string.h calls here (e.g., strlen) so we do not cause additional\n     * out-of-bounds accesses when reproducing the scenario. The intention is to record that\n     * the macro was invoked and what pointer it received.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"BEFORE OS_CHECK_APINAME: timer_name=%p\\n\", (const void *)timer_name);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* Log after the API name check (if execution reaches here, the macro did not cause an early exit) */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER OS_CHECK_APINAME (returned normally): timer_name=%p\\n\", (const void *)timer_name);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    OS_CHECK_POINTER(callback_ptr);\n\n    /* Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the object type discovered for context check */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Context check: current objtype=%d\\n\", (int)objtype);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the early return reason */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"EARLY RETURN: OS_ERR_INCORRECT_OBJ_STATE due to objtype==OS_OBJECT_TYPE_OS_TIMEBASE\\n\");\n                fflush(log);\n                fclose(log);\n            }\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Check that the timebase reference is valid\n     * If successful, then after this statement, we MUST decrement the refcount\n     * if we leave this routine with an error.\n     */\n    return_code =\n        OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_ref_id, &timebase_token);\n\n    /* Log the result of the timebase lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById(timebase) returned %d; timebase_token=%p\\n\", (int)return_code, (void *)&timebase_token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log the early failure and return code */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"EARLY RETURN: timebase lookup failed with code=%d\\n\", (int)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n        return return_code;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMECB, timer_name, &timecb_token);\n\n    /* Log result of allocation attempt */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %d; timecb_token=%p\\n\", (int)return_code, (void *)&timecb_token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timebase_token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(timecb_token, timecb, timer_name, timer_name);\n\n        /*\n         * transfer ownership so the refcount obtained earlier is now\n         * associated with the timecb object, and will be retained until\n         * the object is deleted.\n         */\n        OS_ObjectIdTransferToken(&timebase_token, &timecb->timebase_token);\n\n        timecb->callback_ptr = callback_ptr;\n        timecb->callback_arg = callback_arg;\n        timecb->flags        = flags;\n        timecb->prev_cb      = OS_ObjectIdFromToken(&timecb_token);\n        timecb->next_cb      = OS_ObjectIdFromToken(&timecb_token);\n\n        /* Log that we've initialized the timecb record */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"timecb initialized: timecb=%p timecb->prev_cb=%lu timecb->next_cb=%lu flags=%lu callback_ptr=%p\\n\",\n                        (void *)timecb, (unsigned long)timecb->prev_cb, (unsigned long)timecb->next_cb,\n                        (unsigned long)timecb->flags, (void *)timecb->callback_ptr);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /*\n         * Now we need to add it to the time base callback ring, so take the\n         * timebase-specific lock to prevent a tick from being processed at this moment.\n         */\n        OS_TimeBaseLock_Impl(&timebase_token);\n\n        /* Log acquisition of timebase lock */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Acquired timebase lock: timebase=%p\\n\", (void *)timebase);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n\n            timecb->next_cb = OS_ObjectIdFromToken(&listcb_token);\n            timecb->prev_cb = list_timecb->prev_cb;\n\n            if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n                OS_SUCCESS)\n            {\n                list_timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n                list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n                list_timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n            }\n        }\n\n        timebase->first_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timebase_token);\n\n        /* Log after modifying the timebase ring and unlocking */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Updated timebase ring: timebase->first_cb=%lu; unlocked timebase\\n\", (unsigned long)timebase->first_cb);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &timecb_token, timer_id);\n\n        /* Log the finalize result and the assigned timer_id (if any) */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Finalize result: return_code=%d timer_id=%p (value=%p)\\n\", (int)return_code, (void *)timer_id,\n                        (void *)(timer_id ? (void *)(uintptr_t)*timer_id : NULL));\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Original path: release the timebase refcount when allocation failed */\n        OS_ObjectIdRelease(&timebase_token);\n\n        /* Log the release and failure return */\n        {\n            FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Allocation failed; released timebase token and returning %d\\n\", (int)return_code);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Final return (mirrors original function behavior) */\n    {\n        FILE *log = fopen(\"/tmp/logs/373.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_DoTimerAdd: return_code=%d\\n\", (int)return_code);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}