{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes record->name_entry as the source to strncpy. If record->name_entry is declared without const (for example: char name_entry[...] or char *name_entry), then the pointer is not const-qualified even though it is not modified and should be. That situation violates MISRA C 2023 Rule 8.13. Fix: declare the source as const (e.g. const char name_entry[] or const char *name_entry) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueGetInfo with it.\n  - Your function must have the exact same signature as OS_QueueGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_QueueGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *logf = NULL;\n\n    /* Minimal entry log so test harness shows this function was reached */\n    logf = fopen(\"/tmp/logs/395.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetInfo: entry queue_id=%ld, queue_prop=%p\\n\", (long)queue_id, (void *)queue_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetInfo: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueGetInfo: record=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* Log the pointer value of name_entry and a short preview of its contents. */\n                fprintf(logf, \"OS_QueueGetInfo: record->name_entry=%p\\n\", (void *)record->name_entry);\n\n                if (record->name_entry != NULL)\n                {\n                    char name_preview[64];\n                    size_t i;\n\n                    /* Copy up to 63 bytes for preview, ensuring no overflow and null termination. */\n                    for (i = 0U; i < (sizeof(name_preview) - 1U) && record->name_entry[i] != '\\0'; ++i)\n                    {\n                        name_preview[i] = record->name_entry[i];\n                    }\n                    name_preview[i] = '\\0';\n\n                    fprintf(logf, \"OS_QueueGetInfo: name_entry preview=\\\"%s\\\", preview_len=%zu\\n\", name_preview, i);\n                }\n                else\n                {\n                    fprintf(logf, \"OS_QueueGetInfo: record->name_entry is NULL\\n\");\n                }\n\n                /* If additional metadata is available on record, log it in a conservative manner. */\n#ifdef RECORD_HAS_CREATOR\n                fprintf(logf, \"OS_QueueGetInfo: record->creator=%u\\n\", (unsigned)record->creator);\n#endif\n            }\n        }\n\n        /* Preserve original behavior: copy the name into the out parameter and set creator. */\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->name[sizeof(queue_prop->name) - 1] = '\\0';\n        queue_prop->creator = record->creator;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueGetInfo: copied name=\\\"%s\\\" creator=%u\\n\",\n                    queue_prop->name, (unsigned)queue_prop->creator);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueGetInfo: released token\\n\");\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_QueueGetInfo: failed to get object id for queue_id=%ld\\n\", (long)queue_id);\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_QueueGetInfo: exit return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}