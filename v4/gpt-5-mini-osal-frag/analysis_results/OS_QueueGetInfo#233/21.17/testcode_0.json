{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1) may read up to sizeof(queue_prop->name)-1 bytes from record->name_entry. If record->name_entry is not guaranteed to be at least that long or to contain a NUL within its own bounds (for example, record->name_entry is a smaller buffer or not NUL-terminated), strncpy can read beyond the source buffer and thus access out-of-bounds memory. Although the destination is pre-zeroed and the chosen length prevents writing past the destination, the source-read case is not guaranteed safe from the shown code, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_QueueGetInfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_QueueGetInfo with it.\n  - Your function must have the exact same signature as OS_QueueGetInfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_QueueGetInfo to check logs.\n  - Your function MUST preserve the original logic of OS_QueueGetInfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_QueueGetInfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *log = NULL;\n\n    /* Try to open the log file. If the directory does not exist, attempt to create it. */\n    log = fopen(\"/tmp/logs/393.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* best-effort directory creation; ignore errors */\n        (void)system(\"mkdir -p /tmp/logs\");\n        log = fopen(\"/tmp/logs/393.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_QueueGetInfo: queue_id=%u, queue_prop=%p\\n\", (unsigned)queue_id, (void *)queue_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    if (log)\n    {\n        fprintf(log, \"Zeroed queue_prop at %p (size=%zu)\\n\", (void *)queue_prop, (size_t)sizeof(OS_queue_prop_t));\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        if (log)\n        {\n            /* Log pointers and planned copy length. Do not dereference the source string beyond pointer value to avoid additional reads. */\n            size_t copy_len = sizeof(queue_prop->name) - 1U;\n            fprintf(log, \"record=%p, record->name_entry=%p, dest.name=%p, planned_copy_len=%zu\\n\",\n                    (void *)record,\n                    (void *)(record ? record->name_entry : NULL),\n                    (void *)queue_prop->name,\n                    copy_len);\n            fprintf(log, \"About to call strncpy(dest=%p, src=%p, n=%zu)\\n\",\n                    (void *)queue_prop->name,\n                    (void *)(record ? record->name_entry : NULL),\n                    copy_len);\n            fflush(log);\n        }\n\n        /* Original behavior retained: may read up to sizeof(queue_prop->name)-1 bytes from record->name_entry. */\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        if (log)\n        {\n            /* Log the resulting destination buffer (safe to read) and creator info. */\n            fprintf(log, \"After strncpy, dest.name='%s'\\n\", queue_prop->name);\n            fprintf(log, \"record->creator=%u, queue_prop->creator=%u\\n\",\n                    (unsigned)record->creator,\n                    (unsigned)queue_prop->creator);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Released object token\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_QueueGetInfo: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}