{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is only used to read members (e.g. task->entry_function_pointer) and is never used to modify the object. Therefore it should be declared as a pointer to const: 'const OS_task_internal_record_t *task;'. As written ('OS_task_internal_record_t *task;') it fails MISRA C 2023 Rule 8.13. (If elsewhere in the function/task the object is modified via this pointer, const would not be appropriate.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskEntryPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/105.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TaskEntryPoint:\n```c\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TaskEntryPoint code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TaskEntryPoint with it.\n  - Your function must have the exact same signature as OS_TaskEntryPoint.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TaskEntryPoint to check logs.\n  - Your function MUST preserve the original logic of OS_TaskEntryPoint as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TaskEntryPoint will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TaskEntryPoint as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n    FILE *log = NULL;\n\n    /* Attempt to open the log file. If this fails, proceed without logging. */\n    log = fopen(\"/tmp/logs/105.txt\", \"a\");\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"OS_TaskEntryPoint: entered with task_id=%llu\\n\", (unsigned long long)task_id);\n        (void)fflush(log);\n    }\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"OS_TaskEntryPoint: OS_TaskPrepare returned OS_SUCCESS, task_entry is %s\\n\",\n                          (task_entry != NULL) ? \"non-NULL\" : \"NULL\");\n            (void)fflush(log);\n        }\n\n        if (task_entry != NULL)\n        {\n            if (log != NULL)\n            {\n                (void)fprintf(log, \"OS_TaskEntryPoint: about to invoke task_entry()\\n\");\n                (void)fflush(log);\n            }\n\n            /* Preserve original behavior: call the task entry function. */\n            (*task_entry)();\n\n            if (log != NULL)\n            {\n                (void)fprintf(log, \"OS_TaskEntryPoint: task_entry() returned\\n\");\n                (void)fflush(log);\n            }\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                (void)fprintf(log, \"OS_TaskEntryPoint: task_entry is NULL, nothing to call\\n\");\n                (void)fflush(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"OS_TaskEntryPoint: OS_TaskPrepare did not return OS_SUCCESS\\n\");\n            (void)fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"OS_TaskEntryPoint: about to call OS_TaskExit()\\n\");\n        (void)fclose(log);\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n"
}