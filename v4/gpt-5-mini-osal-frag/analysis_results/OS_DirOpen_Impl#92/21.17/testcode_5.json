{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may scan up to OS_MAX_PATH_LEN bytes. The code only checks that VirtualPath != NULL (OS_CHECK_POINTER) and does not verify that the underlying object is at least OS_MAX_PATH_LEN bytes or contains a NUL within that bound. If a caller passes a pointer to a smaller buffer (or a non-terminated string) the call can read past the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirOpen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirOpen_Impl with it.\n  - Your function must have the exact same signature as OS_DirOpen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirOpen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirOpen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    /* Probe logs to help reproduce potential out-of-bounds string scanning issues.\n     * This preserves the original behavior (calls opendir and returns the same codes)\n     * while emitting useful state and control-flow information into /tmp/logs/2473.txt.\n     *\n     * The logs include the token pointer, the local_path pointer, a short probe\n     * of the first up-to-64 bytes of local_path (or until NUL), the result of\n     * opendir, and errno on failure.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/2473.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirOpen_Impl ENTER token=%p local_path=%p\\n\", (const void *)token, (const void *)local_path);\n            if (local_path == NULL)\n            {\n                fprintf(log, \"local_path == NULL\\n\");\n            }\n            else\n            {\n                /* Probe first bytes up to a small bound to reduce risk while capturing\n                 * evidence of missing NUL termination. This may still read memory\n                 * at local_path, but the bound is deliberately small (64).\n                 */\n                const char *p = local_path;\n                size_t i;\n\n                fprintf(log, \"local_path probe (up to 64 bytes): \");\n                for (i = 0; i < 64; ++i)\n                {\n                    unsigned char c = (unsigned char)p[i];\n                    if (c == '\\0')\n                    {\n                        fprintf(log, \"\\\\0 (len=%zu)\\n\", i);\n                        break;\n                    }\n                    if (c >= 32 && c < 127)\n                    {\n                        /* printable ASCII */\n                        fputc((int)c, log);\n                    }\n                    else\n                    {\n                        fprintf(log, \"\\\\x%02x\", c);\n                    }\n                    if (i == 63)\n                    {\n                        fprintf(log, \"... (max probe reached)\\n\");\n                    }\n                }\n                if (i == 0 && p[0] == '\\0')\n                {\n                    /* already handled above, but keep for clarity */\n                }\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/2473.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* errno may be available in the translation unit where this function is used. */\n            fprintf(log, \"opendir(local_path=%p) returned NULL, errno=%d\\n\", (const void *)local_path, errno);\n            fflush(log);\n            fclose(log);\n        }\n\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    {\n        FILE *log = fopen(\"/tmp/logs/2473.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"opendir succeeded: dp=%p impl=%p token=%p\\n\", (void *)dp, (void *)impl, (const void *)token);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}