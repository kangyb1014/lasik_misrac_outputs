{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr without regard to the actual remaining size of the VirtualPath buffer. Although VirtPathLen was computed earlier, it is not used to bound this memchr call. If the caller supplied a VirtualPath whose total allocated size is exactly VirtPathLen+1 (the string plus NUL) and the filename portion (name_ptr) is close to the end, then the remaining bytes from name_ptr to the end of the object may be less than OS_MAX_FILE_NAME. For example, with OS_MAX_FILE_NAME = 255 and a VirtualPath of length 10 (allocated 11 bytes including NUL) where name_ptr points at offset 5, memchr will attempt to read up to 255 bytes starting at offset 5, which overruns the 6-byte object remainder and thus accesses beyond the bounds of the VirtualPath object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirOpen_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirOpen_Impl with it.\n  - Your function must have the exact same signature as OS_DirOpen_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirOpen_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirOpen_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = NULL;\n    OS_impl_dir_internal_record_t *impl;\n\n    /* Open log file for appending diagnostic traces. It's ok if this fails; proceed normally. */\n    FILE *logf = fopen(\"/tmp/logs/2473.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"--- OS_DirOpen_Impl entered ---\\n\");\n        fprintf(logf, \"token ptr = %p\\n\", (const void *)token);\n        fprintf(logf, \"local_path ptr = %p\\n\", (const void *)local_path);\n\n        if (local_path != NULL)\n        {\n            /* Safely measure local_path length up to a reasonable cap to avoid unbounded reads. */\n            size_t len = 0;\n            const size_t LEN_CAP = 256; /* cap to avoid overly long reads in logs */\n            while (len < LEN_CAP && local_path[len] != '\\0')\n            {\n                ++len;\n            }\n            fprintf(logf, \"measured local_path length (capped at %zu) = %zu\\n\", LEN_CAP, len);\n\n            /* Log the first bytes both as hex and as a truncated string for context. */\n            const size_t HEX_CAP = 64;\n            size_t hex_print = (len < HEX_CAP) ? len : HEX_CAP;\n            fprintf(logf, \"local_path first %zu bytes (hex):\", hex_print);\n            for (size_t i = 0; i < hex_print; ++i)\n            {\n                fprintf(logf, \" %02X\", (unsigned char)local_path[i]);\n            }\n            fprintf(logf, \"\\n\");\n\n            /* Print as a safe truncated string (may omit content beyond HEX_CAP). */\n            fprintf(logf, \"local_path (truncated) = '%.*s'\\n\", (int)hex_print, local_path);\n        }\n        else\n        {\n            fprintf(logf, \"local_path is NULL\\n\");\n        }\n\n        fprintf(logf, \"--------------------------------\\n\");\n        fclose(logf);\n    }\n\n    /* Preserve original behavior: attempt to open directory. */\n    dp = opendir(local_path);\n\n    /* Log the result of opendir for later analysis. */\n    logf = fopen(\"/tmp/logs/2473.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"opendir('%p') returned dp = %p\\n\", (const void *)local_path, (void *)dp);\n        fclose(logf);\n    }\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    /* Final state log: implementation record and stored handle. */\n    logf = fopen(\"/tmp/logs/2473.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"impl record ptr = %p, impl->dp = %p\\n\", (void *)impl, (void *)impl->dp);\n        fprintf(logf, \"OS_DirOpen_Impl exiting with OS_SUCCESS\\n\\n\");\n        fclose(logf);\n    }\n\n    return OS_SUCCESS;\n}"
}