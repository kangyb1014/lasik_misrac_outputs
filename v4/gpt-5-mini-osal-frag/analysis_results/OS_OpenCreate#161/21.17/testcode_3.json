{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a fixed-size local buffer (local_path) to OS_TranslatePath without providing its size. If OS_TranslatePath internally uses string.h functions that do not check bounds (e.g. strcpy, strcat, memcpy/memmove with an incorrect length), a long input path can cause writes beyond local_path (>= OS_MAX_LOCAL_PATH_LEN) and thus violate MISRA C 2023 Rule 21.17. For example, if OS_TranslatePath uses strcpy(local_path, path) and path length >= OS_MAX_LOCAL_PATH_LEN, this will overflow the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2793.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_OpenCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_OpenCreate with it.\n  - Your function must have the exact same signature as OS_OpenCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_OpenCreate to check logs.\n  - Your function MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_OpenCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Logging probe */\n    FILE *log = fopen(\"/tmp/logs/2793.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"--- OS_OpenCreate entry ---\\n\");\n        fprintf(log, \"filedes ptr=%p, path ptr=%p, flags=%d, access_mode=%d\\n\",\n                (void *)filedes, (void *)path, (int)flags, (int)access_mode);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n    if (log != NULL)\n    {\n        fprintf(log, \"Initialized *filedes = OS_OBJECT_ID_UNDEFINED\\n\");\n    }\n\n    /* compute and log path length info (guard NULL) */\n    size_t path_len = 0;\n    if (path != NULL)\n    {\n        /* strlen is safe here because we checked for NULL */\n        path_len = strlen(path);\n    }\n    if (log != NULL)\n    {\n        fprintf(log, \"path_len=%zu, OS_MAX_LOCAL_PATH_LEN=%d\\n\", path_len, (int)OS_MAX_LOCAL_PATH_LEN);\n        if (path == NULL)\n        {\n            fprintf(log, \"Warning: path is NULL\\n\");\n        }\n    }\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Invalid access_mode (%d) -> returning OS_ERROR\\n\", (int)access_mode);\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling OS_TranslatePath(path, local_path) addr local_path=%p\\n\", (void *)local_path);\n        /* warn if input length is already at/above buffer size */\n        if (path_len >= (size_t)OS_MAX_LOCAL_PATH_LEN)\n        {\n            fprintf(log, \"Warning: input path length (%zu) >= OS_MAX_LOCAL_PATH_LEN (%d) - potential overflow risk\\n\",\n                    path_len, (int)OS_MAX_LOCAL_PATH_LEN);\n        }\n        fflush(log);\n    }\n\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Print the translated path safely (limit output to buffer size) */\n            /* Use precision to avoid reading past buffer in case OS_TranslatePath didn't NUL-terminate. */\n            fprintf(log, \"Translated local_path (first %d chars): '%.*s'\\n\",\n                    (int)OS_MAX_LOCAL_PATH_LEN - 1,\n                    (int)(OS_MAX_LOCAL_PATH_LEN - 1), local_path);\n            /* also log the reported strlen of local_path if possible */\n            {\n                size_t local_len = 0;\n                /* guard against NULL though local_path is local array */\n                local_len = strnlen(local_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n                fprintf(log, \"Translated local_path length (bounded) = %zu\\n\", local_len);\n                if (local_len >= (size_t)OS_MAX_LOCAL_PATH_LEN)\n                {\n                    fprintf(log, \"Warning: translated path length >= OS_MAX_LOCAL_PATH_LEN -> possible truncation/overflow\\n\");\n                }\n            }\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_FileOpen_Impl with local_path (addr=%p)\\n\", (void *)local_path);\n                fflush(log);\n            }\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_FileOpen_Impl returned %d\\n\", (int)return_code);\n                fflush(log);\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %d, final *filedes=%d\\n\", (int)return_code, (int)(*filedes));\n                fflush(log);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_OpenCreate exiting with return_code=%d\\n\", (int)return_code);\n        fprintf(log, \"--- OS_OpenCreate exit ---\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}