{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_OBJECT_INIT(token, stream, stream_name, path) likely copies the caller-supplied 'path' into a fixed-size stream->stream_name buffer. If the macro expands to a string copy (e.g. strcpy/memcpy/strncpy) without guaranteeing the destination size or performing bounds checking, a long path provided by the caller can overflow stream_name and produce an out-of-bounds access. Note that the code uses the translated local_path for the actual open but passes the original path into the macro, so there is no guaranteed truncation/length check here. Therefore Rule 21.17 is violated unless OS_OBJECT_INIT internally enforces a safe, bounded copy (which is not shown).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2793.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_OpenCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_OpenCreate with it.\n  - Your function must have the exact same signature as OS_OpenCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_OpenCreate to check logs.\n  - Your function MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_OpenCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/2793.txt\", \"a\");\n\n    /* Minimal entry log so the function reachability is recorded */\n    if (log)\n    {\n        fprintf(log, \"OS_OpenCreate ENTER: path=%p, flags=%d, access_mode=%d\\n\", (const void *)path, (int)flags, (int)access_mode);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_OpenCreate: invalid access_mode=%d -> returning OS_ERROR\\n\", (int)access_mode);\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Log the translated path and source path lengths/content (capped) */\n            size_t local_len = 0;\n            size_t orig_len = 0;\n            if (local_path[0] != '\\0')\n            {\n                local_len = strlen(local_path);\n            }\n            if (path != NULL && path[0] != '\\0')\n            {\n                orig_len = strlen(path);\n            }\n            fprintf(log, \"local_path (sizeof=%zu, len=%zu) = '%.200s'\\n\", sizeof(local_path), local_len, local_path);\n            fprintf(log, \"original path (len=%zu) = '%.200s'\\n\", orig_len, path ? path : \"(null)\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n            if (log)\n            {\n                fprintf(log, \"OS_object token allocated; stream pointer=%p\\n\", (void *)stream);\n\n                /*\n                 * We log that we are about to call the macro that is suspected to perform a copy from\n                 * the caller-supplied 'path' into a fixed-size member of the stream record. This will\n                 * allow tests to inspect the log around the macro expansion and determine whether an\n                 * overflow might occur (for example by comparing path length to the known destination\n                 * size available in the compiled code / structure definition).\n                 */\n                fprintf(log, \"About to call OS_OBJECT_INIT(token, stream, stream_name, path)\\n\");\n            }\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            if (log)\n            {\n                fprintf(log, \"Returned from OS_OBJECT_INIT(token, stream, stream_name, path)\\n\");\n                /* Log the stream pointer again (macro may have modified record contents) */\n                fprintf(log, \"stream pointer after init=%p\\n\", (void *)stream);\n            }\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            if (log)\n            {\n                fprintf(log, \"OS_FileOpen_Impl returned %d\\n\", (int)return_code);\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %d, filedes=%d\\n\", (int)return_code, (int)(*filedes));\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_OpenCreate EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}