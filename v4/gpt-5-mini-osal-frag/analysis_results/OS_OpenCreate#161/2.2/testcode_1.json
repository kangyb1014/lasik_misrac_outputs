{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignments SysMountPointLen = 0; and VirtPathBegin = VirtPathLen; are redundant. In the successful path (return_code == OS_SUCCESS) both variables are overwritten from the filesys record before any use. In error paths the later code that would use them is not executed. Therefore these two assignments are executed but never affect program behaviour (removing them would not change any outcome).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2798.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_OpenCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_OpenCreate with it.\n  - Your function must have the exact same signature as OS_OpenCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_OpenCreate to check logs.\n  - Your function MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_OpenCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Open log for probing control flow/state for MISRA Rule 2.2 investigation */\n    FILE *log = fopen(\"/tmp/logs/2798.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- OS_OpenCreate ENTER ---\\n\");\n        fprintf(log, \"params: filedes=%p path=\\\"%s\\\" flags=%ld access_mode=%ld\\n\",\n                (void *)filedes, (path ? path : \"(null)\"), (long)flags, (long)access_mode);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n    if (log)\n    {\n        fprintf(log, \"after init: *filedes set to OS_OBJECT_ID_UNDEFINED\\n\");\n        fflush(log);\n    }\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        if (log)\n        {\n            fprintf(log, \"invalid access_mode (%ld) -> returning OS_ERROR\\n\", (long)access_mode);\n            fprintf(log, \"--- OS_OpenCreate EXIT (early invalid access_mode) ---\\n\\n\");\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            fprintf(log, \"translated local_path=\\\"%s\\\"\\n\", local_path);\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n            if (log)\n            {\n                fprintf(log, \"OS_OBJECT_TABLE_GET returned stream pointer=%p\\n\", (void *)stream);\n                fflush(log);\n            }\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n            if (log)\n            {\n                /* We cannot rely on specific struct members being present here, so only log that init was called */\n                fprintf(log, \"OS_OBJECT_INIT called for token (table entry initialized)\\n\");\n                fflush(log);\n            }\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            if (log)\n            {\n                fprintf(log, \"OS_FileOpen_Impl returned %ld\\n\", (long)return_code);\n                fflush(log);\n            }\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            if (log)\n            {\n                fprintf(log, \"OS_ObjectIdFinalizeNew returned %ld, final *filedes=%ld\\n\", (long)return_code, (long)(*filedes));\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"token allocation failed; skipping stream init/open/finalize\\n\");\n                fflush(log);\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"TranslatePath failed; skipping allocation/open/finalize\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_OpenCreate EXIT: return_code=%ld\\n\", (long)return_code);\n        fprintf(log, \"--- OS_OpenCreate END ---\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}