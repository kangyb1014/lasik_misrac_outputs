{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) dereferences the pointer parameter 'token' without any validation. If a caller passes token == NULL (for example: OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, NULL)) the memset will attempt to write via a NULL pointer, causing an access beyond the bounds of the referenced object. Likewise, if a caller passes a pointer to a smaller object or an incompatible type, the memset could overwrite memory past that object. Therefore this use of memset can result in out-of-bounds accesses and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryClose code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1393.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryClose:\n```c\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryClose code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryClose with it.\n  - Your function must have the exact same signature as OS_DirectoryClose.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryClose to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryClose as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryClose will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryClose as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *log = fopen(\"/tmp/logs/1393.txt\", \"a\");\n\n    /* Minimal entry log so the call is observable in all runs */\n    if (log != NULL)\n    {\n        /* Log the fact we entered and some safe state: addresses and sizes only. */\n        fprintf(log, \"OS_DirectoryClose entered\\n\");\n        fprintf(log, \"  dir_id (addr)=%p\\n\", (void *)&dir_id);\n        fprintf(log, \"  token (addr)=%p, token_size=%zu\\n\", (void *)&token, sizeof(token));\n        fflush(log);\n    }\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_DirClose_Impl with token addr=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_DirClose_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirClose_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        /* Complete the operation via the common routine */\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_ObjectIdFinalizeDelete with current return_code=%d and token addr=%p\\n\", (int)return_code, (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById did not return OS_SUCCESS; skipping close/finalize\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_DirectoryClose exiting with return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}