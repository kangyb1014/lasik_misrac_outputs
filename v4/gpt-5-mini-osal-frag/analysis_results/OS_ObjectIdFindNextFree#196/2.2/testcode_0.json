{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen max_id == 0 the code takes the if branch: return_code = OS_ERR_NOT_IMPLEMENTED; serial = 0; The subsequent for-loop for (i = 0; i < max_id; ++i) will not execute because max_id is zero, and the only later use of serial is inside the success-path (OS_ObjectIdCompose_Impl called only if return_code == OS_SUCCESS). Since return_code != OS_SUCCESS in this branch, the assigned value of serial is never used. Therefore the assignment serial = 0 is an executed operation whose removal would not affect program behaviour, i.e. dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextFree code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1078.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextFree:\n```c\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFindNextFree code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFindNextFree with it.\n  - Your function must have the exact same signature as OS_ObjectIdFindNextFree.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFindNextFree to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFindNextFree as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFindNextFree will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFindNextFree as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n    FILE *log = fopen(\"/tmp/logs/1078.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_ObjectIdFindNextFree token=%p\\n\", (void *)token);\n    }\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    if (log)\n    {\n        fprintf(log, \"Computed base_id=%u max_id=%u objtype_state=%p\\n\",\n                (unsigned)base_id, (unsigned)max_id, (void *)objtype_state);\n    }\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n\n        if (log)\n        {\n            fprintf(log, \"BRANCH: max_id == 0 -> return_code=%d serial_assigned=%u\\n\",\n                    (int)return_code, (unsigned)serial);\n            fprintf(log, \"NOTE: loop for (i=0; i<max_id; ++i) will not execute because max_id==0\\n\");\n            fprintf(log, \"NOTE: serial value assigned here is not used later because return_code != OS_SUCCESS\\n\");\n        }\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n\n        if (log)\n        {\n            fprintf(log, \"ELSE: start search -> return_code=%d starting_serial=%u\\n\",\n                    (int)return_code, (unsigned)serial);\n        }\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n\n        /* Log only the first few iterations to avoid massive logs */\n        if (log && i < 10)\n        {\n            fprintf(log, \"ITER[%u]: serial=%u local_id=%u table_index=%u active_id=0x%08x\\n\",\n                    (unsigned)i, (unsigned)serial, (unsigned)local_id,\n                    (unsigned)(local_id + base_id), (unsigned)obj->active_id);\n        }\n\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            if (log)\n            {\n                fprintf(log, \"FOUND: free slot at iter=%u local_id=%u serial=%u\\n\",\n                        (unsigned)i, (unsigned)local_id, (unsigned)serial);\n            }\n            break;\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"AFTER_LOOP: return_code=%d local_id=%u serial=%u\\n\",\n                (int)return_code, (unsigned)local_id, (unsigned)serial);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        if (log)\n        {\n            fprintf(log, \"SUCCESS: token->obj_idx=%d token->obj_id=0x%08x\\n\",\n                    (int)token->obj_idx, (unsigned)token->obj_id);\n        }\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n\n        if (log)\n        {\n            fprintf(log, \"UPDATED_RECORD: obj->active_id=0x%08x obj->creator=%d refcount=%u last_id_issued=0x%08x\\n\",\n                    (unsigned)obj->active_id, (int)obj->creator, (unsigned)obj->refcount,\n                    (unsigned)objtype_state->last_id_issued);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n\n        if (log)\n        {\n            fprintf(log, \"FAIL: token set to idx=%d id=0x%08x return_code=%d\\n\",\n                    (int)token->obj_idx, (unsigned)token->obj_id, (int)return_code);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT: OS_ObjectIdFindNextFree return=%d\\n\", (int)return_code);\n        fflush(log);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}