{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when the OS is not initialized. If OS_DEBUG is implemented to use OS_printf (e.g. OS_DEBUG forwards to OS_printf), this creates an indirect recursive call chain: OS_printf -> OS_DEBUG -> OS_printf, violating MISRA C 2023 Rule 17.2. (The same problem would arise if OS_ConsoleWrite or another called routine invoked OS_printf internally.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrInit_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/450.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrInit_Impl:\n```c\nint32 OS_SocketAddrInit_Impl(OS_SockAddr_t *Addr, OS_SocketDomain_t Domain)\n{\n    sa_family_t             sa_family;\n    socklen_t               addrlen;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    memset(Addr, 0, sizeof(OS_SockAddr_t));\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Domain)\n    {\n        case OS_SocketDomain_INET:\n            sa_family = AF_INET;\n            addrlen   = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            sa_family = AF_INET6;\n            addrlen   = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            sa_family = 0;\n            addrlen   = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    Addr->ActualLength     = OSAL_SIZE_C(addrlen);\n    Accessor->sa.sa_family = sa_family;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAddrInit_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAddrInit_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAddrInit_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAddrInit_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAddrInit_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAddrInit_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAddrInit_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAddrInit_Impl(OS_SockAddr_t *Addr, OS_SocketDomain_t Domain)\n{\n    sa_family_t             sa_family;\n    socklen_t               addrlen;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    /* Preserve original behavior: clear the Addr structure */\n    memset(Addr, 0, sizeof(OS_SockAddr_t));\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry and the Domain being initialized */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_SocketAddrInit_Impl: Addr=%p Domain=%d\\n\", (void *)Addr, (int)Domain);\n            fclose(log);\n        }\n    }\n\n    switch (Domain)\n    {\n        case OS_SocketDomain_INET:\n            sa_family = AF_INET;\n            addrlen   = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            sa_family = AF_INET6;\n            addrlen   = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            sa_family = 0;\n            addrlen   = 0;\n            break;\n    }\n\n    /* If not implemented for this domain, log and return the same error as original */\n    if (addrlen == 0)\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SocketAddrInit_Impl: Domain=%d -> NOT_IMPLEMENTED (addrlen=0, sa_family=%d)\\n\", (int)Domain, (int)sa_family);\n            fclose(log);\n        }\n\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Set the resulting values (original logic preserved) */\n    Addr->ActualLength     = OSAL_SIZE_C(addrlen);\n    Accessor->sa.sa_family = sa_family;\n\n    /* Log the state after initialization for traceability */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SocketAddrInit_Impl: Domain=%d -> SUCCESS (Addr=%p ActualLength=%u sa_family=%d)\\n\",\n                    (int)Domain, (void *)Addr, (unsigned int)Addr->ActualLength, (int)Accessor->sa.sa_family);\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}