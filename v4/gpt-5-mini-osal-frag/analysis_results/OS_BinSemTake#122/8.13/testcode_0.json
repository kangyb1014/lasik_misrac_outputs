{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_BinSemTake_Impl is declared to take a non-const pointer (e.g. int32 OS_BinSemTake_Impl(OS_object_token_t *token)) but does not modify the object referred to, then the pointer parameter should be to a const-qualified type. In that case passing &token here represents a violation of MISRA C 2023 Rule 8.13 because the function parameter could and should be declared as const OS_object_token_t * to convey immutability.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1755.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTake:\n```c\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_BinSemTake code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_BinSemTake with it.\n  - Your function must have the exact same signature as OS_BinSemTake.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_BinSemTake to check logs.\n  - Your function MUST preserve the original logic of OS_BinSemTake as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_BinSemTake will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Open log file for tracing/control-flow/state information */\n    FILE *log = fopen(\"/tmp/logs/1755.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry and input id */\n        fprintf(log, \"OS_BinSemTake entered: sem_id=%ld\\n\", (long)sem_id);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned: %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Dump the token bytes before the impl call to capture state */\n            fprintf(log, \"Token address=%p size=%zu bytes\\n\", (void *)&token, sizeof(token));\n            const unsigned char *bytes_before = (const unsigned char *)&token;\n            fprintf(log, \"Token bytes before:\");\n            for (size_t i = 0; i < sizeof(token); ++i)\n            {\n                fprintf(log, \" %02X\", (unsigned int)bytes_before[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Preserve a copy to detect whether the impl modified the token */\n        OS_object_token_t token_before = token;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_BinSemTake_Impl with &token=%p\\n\", (void *)&token);\n        }\n\n        /* Original behavior: call implementation with pointer to token */\n        return_code = OS_BinSemTake_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BinSemTake_Impl returned: %d\\n\", (int)return_code);\n\n            /* Dump token bytes after the impl call to see if it was modified */\n            const unsigned char *bytes_after = (const unsigned char *)&token;\n            fprintf(log, \"Token bytes after:\");\n            for (size_t i = 0; i < sizeof(token); ++i)\n            {\n                fprintf(log, \" %02X\", (unsigned int)bytes_after[i]);\n            }\n            fprintf(log, \"\\n\");\n\n            /* Compare before/after to provide evidence of modification or immutability */\n            int modified = (memcmp(&token_before, &token, sizeof(token)) != 0);\n            fprintf(log, \"Token modified by OS_BinSemTake_Impl: %s\\n\", modified ? \"YES\" : \"NO\");\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BinSemTake exiting with return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}