{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the void *arg passed into OS_Timer_NoArgCallback contains (or points to data that was originally) a function pointer to OS_Timer_NoArgCallback itself, then Conv.timer_callback_func will be OS_Timer_NoArgCallback and the statement (*Conv.timer_callback_func)(objid) will invoke OS_Timer_NoArgCallback recursively (indirect recursion). This is an indirect self-call and thus violates MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Timer_NoArgCallback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/660.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Timer_NoArgCallback:\n```c\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Timer_NoArgCallback code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Timer_NoArgCallback with it.\n  - Your function must have the exact same signature as OS_Timer_NoArgCallback.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Timer_NoArgCallback to check logs.\n  - Your function MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Timer_NoArgCallback will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n    /* Local copy of the resolved callback for logging and invocation */\n    void (*resolved_cb)(osal_id_t) = NULL;\n    FILE *log = fopen(\"/tmp/logs/660.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and raw argument value */\n        fprintf(log, \"ENTER: OS_Timer_NoArgCallback entered. objid=%p, arg=%p\\n\", (void *) (uintptr_t) objid, arg);\n    }\n\n    /* Preserve original behavior: store opaque arg into wrapper */\n    Conv.opaque_arg = arg;\n\n    /* Capture the callback pointer for inspection and safe single-point invocation */\n    resolved_cb = Conv.timer_callback_func;\n\n    if (log != NULL)\n    {\n        /* Log the resolved function pointer value */\n        fprintf(log, \"RESOLVE: Conv.opaque_arg=%p, Conv.timer_callback_func=%p\\n\", Conv.opaque_arg, (void *) resolved_cb);\n\n        /* Detect if the resolved callback is this function (indirect recursion) */\n        if (resolved_cb == (void (*)(osal_id_t)) OS_Timer_NoArgCallback)\n        {\n            fprintf(log, \"DETECT: timer_callback_func == OS_Timer_NoArgCallback (possible indirect self-call)\\n\");\n        }\n\n        fflush(log);\n    }\n\n    /* Invoke the callback (preserve original logic) */\n    (*resolved_cb)(objid);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"RETURN: OS_Timer_NoArgCallback completed for objid=%p\\n\", (void *) (uintptr_t) objid);\n        fclose(log);\n    }\n}\n"
}