{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG in the uninitialized branch. If OS_DEBUG is implemented as (or calls) OS_printf (e.g. OS_DEBUG is a macro that maps to OS_printf or a debug helper that calls OS_printf), this produces indirect recursion: OS_printf -> OS_DEBUG -> OS_printf, violating the prohibition on functions calling themselves (Rule 17.2). The same risk exists if OS_ConsoleWrite (used later) or any other called function ultimately calls OS_printf.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetLocalTime_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/360.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GetLocalTime_Impl:\n```c\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GetLocalTime_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GetLocalTime_Impl with it.\n  - Your function must have the exact same signature as OS_GetLocalTime_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GetLocalTime_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_GetLocalTime_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GetLocalTime_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GetLocalTime_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    /* Minimal entry probe so that the function reachability is recorded. */\n    FILE *log = fopen(\"/tmp/logs/360.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_GetLocalTime_Impl: entered\\n\");\n        fflush(log);\n    }\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        /* Log the successful path and time values. */\n        if (log)\n        {\n            fprintf(log, \"clock_gettime: success sec=%ld nsec=%ld\\n\",\n                    (long)TimeSp.tv_sec, (long)TimeSp.tv_nsec);\n            fflush(log);\n        }\n\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n\n        if (log)\n        {\n            fprintf(log, \"OS_GetLocalTime_Impl: returning OS_SUCCESS\\n\");\n            fclose(log);\n        }\n    }\n    else\n    {\n        /* Capture errno immediately for logging so subsequent calls don't change it. */\n        int save_errno = errno;\n\n        if (log)\n        {\n            fprintf(log, \"clock_gettime: FAILED errno=%d (%s)\\n\", save_errno, strerror(save_errno));\n            fflush(log);\n        }\n\n        /* Preserve original behavior (keep the original OS_DEBUG call). */\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n\n        ReturnCode = OS_ERROR;\n\n        if (log)\n        {\n            fprintf(log, \"OS_GetLocalTime_Impl: called OS_DEBUG and returning OS_ERROR\\n\");\n            fclose(log);\n        }\n    }\n\n    return ReturnCode;\n}"
}