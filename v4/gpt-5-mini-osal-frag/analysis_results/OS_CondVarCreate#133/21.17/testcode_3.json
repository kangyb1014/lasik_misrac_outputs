{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...). If OS_CHECK_STRING is implemented using a string.h function such as strlen(str) to check length, this can read past the end of the caller's object when the provided var_name is not NUL-terminated within its allocated bounds. For example, if a caller passes a char name[OS_MAX_API_NAME] that is entirely filled with non-NUL bytes (no terminating '\\0'), a strlen(name) in OS_CHECK_STRING will scan past the array and thus access memory beyond the bounds of the object referenced by the pointer parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_CondVarCreate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_CondVarCreate with it.\n  - Your function must have the exact same signature as OS_CondVarCreate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_CondVarCreate to check logs.\n  - Your function MUST preserve the original logic of OS_CondVarCreate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_CondVarCreate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Open log for diagnostic probes about control flow and the var_name contents (limited/controlled) */\n    FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER: OS_CondVarCreate(var_id=%p, var_name=%p, options=%u)\\n\", (void *)var_id, (void *)var_name, (unsigned)options);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    if (log != NULL) { fprintf(log, \"CHECK: About to OS_CHECK_POINTER(var_id)\\n\"); fflush(log); }\n    OS_CHECK_POINTER(var_id);\n    if (log != NULL) { fprintf(log, \"CHECK: After OS_CHECK_POINTER(var_id)\\n\"); fflush(log); }\n\n    if (log != NULL) { fprintf(log, \"CHECK: About to OS_CHECK_APINAME(var_name)\\n\"); fflush(log); }\n    OS_CHECK_APINAME(var_name);\n    if (log != NULL) { fprintf(log, \"CHECK: After OS_CHECK_APINAME(var_name)\\n\"); fflush(log); }\n\n    /* Probe the contents of var_name in a bounded way to avoid calling strlen (which can overrun).\n     * We read at most OS_MAX_API_NAME bytes and report whether a NUL was found within that bound.\n     * This mirrors the kind of check that can reveal the violation scenario without invoking\n     * potentially unbounded string.h calls here. */\n    if (log != NULL)\n    {\n        if (var_name == NULL)\n        {\n            fprintf(log, \"PROBE: var_name is NULL\\n\");\n        }\n        else\n        {\n#ifdef OS_MAX_API_NAME\n            size_t i;\n            int nul_found = 0;\n            size_t limit = (size_t)OS_MAX_API_NAME;\n            fprintf(log, \"PROBE: Dumping up to %u bytes of var_name (hex, NUL detection)\\n\", (unsigned)limit);\n            for (i = 0; i < limit; ++i)\n            {\n                unsigned char ch = (unsigned char)var_name[i];\n                fprintf(log, \"%02x\", ch);\n                if (i + 1 < limit) fprintf(log, \" \");\n                if (ch == '\\0')\n                {\n                    nul_found = 1;\n                    /* Report where the NUL occurred and stop further probing to avoid excess output */\n                    fprintf(log, \"\\nPROBE: NUL found at index %u\\n\", (unsigned)i);\n                    break;\n                }\n            }\n            if (!nul_found)\n            {\n                fprintf(log, \"\\nPROBE: No NUL found within first %u bytes\\n\", (unsigned)limit);\n            }\n#else\n            /* If OS_MAX_API_NAME isn't defined for some reason, do a minimal safe probe of 16 bytes. */\n            size_t i;\n            const size_t limit = 16;\n            int nul_found = 0;\n            fprintf(log, \"PROBE: OS_MAX_API_NAME undefined; dumping up to %u bytes of var_name\\n\", (unsigned)limit);\n            for (i = 0; i < limit; ++i)\n            {\n                unsigned char ch = (unsigned char)var_name[i];\n                fprintf(log, \"%02x\", ch);\n                if (i + 1 < limit) fprintf(log, \" \");\n                if (ch == '\\0') { nul_found = 1; fprintf(log, \"\\nPROBE: NUL found at index %u\\n\", (unsigned)i); break; }\n            }\n            if (!nul_found) fprintf(log, \"\\nPROBE: No NUL found within first %u bytes\\n\", (unsigned)limit);\n#endif\n        }\n        fflush(log);\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    if (log != NULL) { fprintf(log, \"ACTION: Calling OS_ObjectIdAllocateNew(\");\n    if (log != NULL) { fprintf(log, \"%s\", var_name ? var_name : \"(null)\"); }\n    if (log != NULL) { fprintf(log, \")\\n\"); fflush(log); }\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (log != NULL) { fprintf(log, \"RESULT: OS_ObjectIdAllocateNew returned %ld, token=%u\\n\", (long)return_code, (unsigned)token); fflush(log); }\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n        if (log != NULL) { fprintf(log, \"INFO: Obtained condvar record pointer=%p\\n\", (void *)condvar); fflush(log); }\n\n        /* Reset the table entry and save the name */\n        if (log != NULL) { fprintf(log, \"ACTION: OS_OBJECT_INIT(token=%u, condvar=%p, obj_name, var_name)\\n\", (unsigned)token, (void *)condvar); fflush(log); }\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        if (log != NULL) { fprintf(log, \"ACTION: Calling OS_CondVarCreate_Impl(&token, options=%u)\\n\", (unsigned)options); fflush(log); }\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        if (log != NULL) { fprintf(log, \"RESULT: OS_CondVarCreate_Impl returned %ld\\n\", (long)return_code); fflush(log); }\n\n        /* Check result, finalize record, and unlock global table. */\n        if (log != NULL) { fprintf(log, \"ACTION: Calling OS_ObjectIdFinalizeNew(return_code=%ld)\\n\", (long)return_code); fflush(log); }\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        if (log != NULL) { fprintf(log, \"RESULT: OS_ObjectIdFinalizeNew returned %ld, var_id=%p\\n\", (long)return_code, (void *)var_id); fflush(log); }\n    }\n    else\n    {\n        if (log != NULL) { fprintf(log, \"INFO: Skipping creation because OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code); fflush(log); }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT: OS_CondVarCreate returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}