{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if-block only exists to call OS_DEBUG, but OS_DEBUG is defined as an empty macro. That means the branch body has no effect at runtime (the logging call is preprocessed away), so the conditional+branch are effectively dead code: the executed condition and empty branch can be removed without changing program behavior (aside from timing). This therefore violates MISRA C 2023 Rule 2.2 (dead code present).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3038.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_Unlock_Global_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_Unlock_Global_Impl with it.\n  - Your function must have the exact same signature as OS_Unlock_Global_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_Unlock_Global_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_Unlock_Global_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n    FILE *log = NULL;\n\n    /* Attempt to open the log file (append). If the directory doesn't exist,\n     * try to create it via a best-effort system call, then try again. This is\n     * only for diagnostic probing and does not affect the original logic.\n     */\n    log = fopen(\"/tmp/logs/3038.txt\", \"a\");\n    if (log == NULL)\n    {\n        /* best-effort: try to create directory and reopen. If system() is not\n         * available, fopen will remain NULL and we silently continue.\n         */\n        (void)system(\"/bin/mkdir -p /tmp/logs >/dev/null 2>&1\");\n        log = fopen(\"/tmp/logs/3038.txt\", \"a\");\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_Unlock_Global_Impl ENTER: idtype=%d\\n\", (int)idtype);\n    }\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (log)\n    {\n        fprintf(log, \"resolved impl=%p\\n\", (void *)impl);\n    }\n\n    if (impl != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"about to pthread_cond_broadcast(&impl->cond)\\n\");\n        }\n\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"pthread_cond_broadcast returned %d: %s\\n\", ret, strerror(ret));\n            }\n            /* Preserve original behavior: leave the OS_DEBUG call intact. */\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"pthread_cond_broadcast succeeded\\n\");\n            }\n        }\n\n        if (log)\n        {\n            fprintf(log, \"about to pthread_mutex_unlock(&impl->mutex)\\n\");\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"pthread_mutex_unlock returned %d: %s\\n\", ret, strerror(ret));\n            }\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"pthread_mutex_unlock succeeded\\n\");\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"impl is NULL, skipping broadcast/unlock\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_Unlock_Global_Impl EXIT: idtype=%d\\n\\n\", (int)idtype);\n        fflush(log);\n        fclose(log);\n    }\n}\n"
}