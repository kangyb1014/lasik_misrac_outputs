{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as OS_impl_file_internal_record_t *impl but is only used for reading (impl->selectable and impl->fd) and never used to modify the object. Per MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (e.g. const OS_impl_file_internal_record_t *impl). Note: the buffer parameter (void *buffer) is intentionally non-const because read() writes into it, and the SelectFlags pointer in OS_SelectSingle_Impl is non-const because it is modified \u2014 both of those are acceptable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/805.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_GenericRead_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_GenericRead_Impl with it.\n  - Your function must have the exact same signature as OS_GenericRead_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_GenericRead_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_GenericRead_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log entry and initial state to assist in reproducing Rule 8.13 scenario */\n    {\n        FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_GenericRead_Impl token=%p impl=%p nbytes=%zu timeout=%d\\n\",\n                    (const void *)token, (void *)impl, nbytes, (int)timeout);\n            if (impl != NULL)\n            {\n                /* capture the fields that are relevant to the reported violation: selectable and fd */\n                fprintf(log, \"STATE: impl->selectable=%d impl->fd=%d\\n\",\n                        (int)impl->selectable, impl->fd);\n            }\n            else\n            {\n                fprintf(log, \"STATE: impl is NULL\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            /* log that select is about to be called and the operation mask */\n            {\n                FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"ACTION: calling OS_SelectSingle_Impl token=%p operation=0x%08x timeout=%d\\n\",\n                            (const void *)token, (unsigned)operation, (int)timeout);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n            /* log the result of select and the updated operation mask */\n            {\n                FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RESULT: OS_SelectSingle_Impl returned %d operation=0x%08x\\n\",\n                            (int)return_code, (unsigned)operation);\n                    fclose(log);\n                }\n            }\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            /* log before performing read */\n            {\n                FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"ACTION: about to read fd=%d nbytes=%zu\\n\", impl->fd, nbytes);\n                    fclose(log);\n                }\n            }\n\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n\n                /* log the read failure and errno */\n                {\n                    FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"ERROR: read failed fd=%d errno=%d (%s)\\n\", impl->fd, errno, strerror(errno));\n                        fclose(log);\n                    }\n                }\n\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n\n                /* log successful read */\n                {\n                    FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"SUCCESS: read fd=%d bytes_read=%zd return_code=%d\\n\", impl->fd, os_result, (int)return_code);\n                        fclose(log);\n                    }\n                }\n            }\n        }\n    }\n\n    /* Final probe: log exit and returned value */\n    {\n        FILE *log = fopen(\"/tmp/logs/805.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_GenericRead_Impl return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}