{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) can read up to 9 bytes from RefText. If RefText is NULL or refers to a buffer that is not NUL-terminated within the first 9 bytes (for example a short/non-terminated string or an object smaller than 9 bytes), strncmp may access memory beyond the bounds of the object referenced by RefText, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_GetValueText code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_GetValueText with it.\n  - Your function must have the exact same signature as UtAssert_GetValueText.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_GetValueText to check logs.\n  - Your function MUST preserve the original logic of UtAssert_GetValueText as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_GetValueText will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    int ret = -1;\n    const char *branch = \"UNKNOWN\";\n\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        branch = \"BOOLEAN\";\n        if (InValue != 0)\n        {\n            ret = snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            ret = snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        branch = \"OCTAL\";\n        ret = snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        branch = \"HEX\";\n        ret = snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        branch = \"UNSIGNED\";\n        ret = snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        branch = \"SIGNED\";\n        ret = snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    /* Logging probe: append detailed state and control-path info to the trace file. */\n    do {\n        FILE *logf = fopen(\"/tmp/logs/2463.txt\", \"a\");\n        if (logf == NULL)\n        {\n            break; /* If logging cannot be performed, do not affect original behavior. */\n        }\n\n        /* Write basic invocation/state info. Casts used to avoid format warnings for unknown typedefs. */\n        fprintf(logf, \"UtAssert_GetValueText: TempBuf=%p TempSz=%zu InValue=%lld IsUnsigned=%d RadixType=%d Branch=%s snprintf_ret=%d\\n\",\n                (void *)TempBuf, TempSz, (long long)InValue, (int)IsUnsigned, (int)RadixType, branch, ret);\n\n        /* Safely log the buffer content up to TempSz-1 bytes (the maximum written by snprintf). */\n        if (TempBuf != NULL)\n        {\n            size_t max_print = 0;\n            if (TempSz > 0)\n            {\n                /* limit to TempSz-1 because snprintf writes at most TempSz-1 characters plus NUL */\n                max_print = (TempSz - 1);\n            }\n            /* also cap the logged length to a reasonable amount to avoid huge logs */\n            if (max_print > 512) max_print = 512;\n\n            fprintf(logf, \"  Result (up to %zu bytes): '\", max_print);\n            if (max_print > 0)\n            {\n                /* Use precision to bound printed characters and avoid reading past TempSz-1. */\n                fprintf(logf, \"%.*s\", (int)max_print, TempBuf);\n            }\n            fprintf(logf, \"'\\n\");\n        }\n        else\n        {\n            fprintf(logf, \"  TempBuf is NULL\\n\");\n        }\n\n        fclose(logf);\n    } while (0);\n\n    return TempBuf;\n}"
}