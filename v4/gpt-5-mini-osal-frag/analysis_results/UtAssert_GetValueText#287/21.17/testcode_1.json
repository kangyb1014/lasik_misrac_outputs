{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) can read beyond the bounds of ActualText if ActualText is NULL or points to a buffer that does not contain at least (sizeof(UTASSERT_PREFIX)-1) accessible characters (for example a shorter/non\u2011NUL\u2011terminated string). In those cases strncmp will access memory past the object and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtAssert_GetValueText code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtAssert_GetValueText with it.\n  - Your function must have the exact same signature as UtAssert_GetValueText.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtAssert_GetValueText to check logs.\n  - Your function MUST preserve the original logic of UtAssert_GetValueText as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtAssert_GetValueText will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    /* Probe/log file - append to preserve history across calls */\n    FILE *logf = fopen(\"/tmp/logs/2463.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER UtAssert_GetValueText: TempBuf=%p TempSz=%zu InValue=%lld IsUnsigned=%d RadixType=%d\\n\",\n                (void *)TempBuf, TempSz, (long long)InValue, (int)IsUnsigned, (int)RadixType);\n\n        if (TempBuf == NULL)\n        {\n            fprintf(logf, \"  Note: TempBuf is NULL\\n\");\n        }\n        else\n        {\n            if (TempSz == 0)\n            {\n                fprintf(logf, \"  Note: TempSz is 0 (no bytes available)\\n\");\n            }\n            else\n            {\n                /* Log initial contents of TempBuf as hex (up to TempSz bytes, limited to 64 bytes for brevity) */\n                size_t maxlog = TempSz;\n                if (maxlog > 64)\n                    maxlog = 64;\n\n                fprintf(logf, \"  TempBuf initial (hex, up to %zu bytes):\", maxlog);\n                for (size_t i = 0; i < maxlog; ++i)\n                {\n                    unsigned char uc = (unsigned char)TempBuf[i];\n                    fprintf(logf, \" %02X\", uc);\n                }\n                fprintf(logf, \"\\n\");\n            }\n        }\n    }\n\n    /* Original logic preserved exactly (formatting via snprintf as before) */\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    /* Log the result written into TempBuf */\n    if (logf != NULL)\n    {\n        if (TempBuf == NULL)\n        {\n            fprintf(logf, \"  After snprintf: TempBuf is still NULL (no data written)\\n\");\n        }\n        else\n        {\n            /* Print up to TempSz or 256 bytes (whichever is smaller) as printable characters; non-printables as hex escapes */\n            size_t show = TempSz;\n            if (show > 256)\n                show = 256;\n\n            fprintf(logf, \"  After snprintf: TempBuf (up to %zu bytes): \", show);\n            for (size_t i = 0; i < show; ++i)\n            {\n                unsigned char c = (unsigned char)TempBuf[i];\n                if (c == '\\0')\n                {\n                    /* stop at NUL as the string end */\n                    break;\n                }\n                if (c >= 32 && c <= 126)\n                {\n                    fputc(c, logf);\n                }\n                else\n                {\n                    fprintf(logf, \"\\\\x%02X\", c);\n                }\n            }\n            fprintf(logf, \"\\n\");\n        }\n\n        fprintf(logf, \"EXIT UtAssert_GetValueText returning %p\\n\\n\", (void *)TempBuf);\n        fclose(logf);\n    }\n\n    return TempBuf;\n}"
}