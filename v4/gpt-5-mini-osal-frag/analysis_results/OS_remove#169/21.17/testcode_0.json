{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath(local_path) could copy/concatenate the translated path into local_path using unbounded string.h functions (e.g. strcpy/memcpy/strcat) without checking the destination size. If the translated path length >= OS_MAX_LOCAL_PATH_LEN this will write beyond local_path, violating the rule. The call also lacks an explicit destination-size parameter, so unless OS_TranslatePath internally enforces bounds (e.g. uses strncpy/strncpy_s/strlcpy/snprintf with OS_MAX_LOCAL_PATH_LEN and checks truncation) the use is potentially unsafe.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_remove code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_remove with it.\n  - Your function must have the exact same signature as OS_remove.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_remove to check logs.\n  - Your function MUST preserve the original logic of OS_remove as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_remove will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_remove as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for append. If this fails, continue silently to preserve behavior. */\n    FILE *log = fopen(\"/tmp/logs/1643.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_remove ENTER: path=%s\\n\", (path ? path : \"(null)\"));\n        fprintf(log, \"OS_MAX_LOCAL_PATH_LEN=%d\\n\", (int)OS_MAX_LOCAL_PATH_LEN);\n    }\n\n    /* Compute input path length safely (manual, to avoid relying on external headers). */\n    size_t input_len = 0;\n    if (path)\n    {\n        const char *p = path;\n        while (*p != '\\0')\n        {\n            ++input_len;\n            ++p;\n        }\n    }\n    if (log)\n    {\n        fprintf(log, \"input path length=%zu\\n\", input_len);\n    }\n\n    /* Call the original translation function (preserve original logic). */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %ld\\n\", (long)return_code);\n    }\n\n    /* If translation succeeded, log the translated path length and a trimmed snapshot.\n       Use a manual bounded scan to avoid reading beyond local_path even if not NUL-terminated. */\n    if (return_code == OS_SUCCESS)\n    {\n        size_t local_len = 0;\n        while (local_len < (size_t)OS_MAX_LOCAL_PATH_LEN && local_path[local_len] != '\\0')\n        {\n            ++local_len;\n        }\n        if (log)\n        {\n            fprintf(log, \"translated local_path length (bounded)=%zu\\n\", local_len);\n            /* Print only up to the discovered length to avoid reading beyond buffer. */\n            if (local_len > 0)\n            {\n                fprintf(log, \"translated local_path (trimmed)=%.*s\\n\", (int)local_len, local_path);\n            }\n            else\n            {\n                /* local_len == 0 may mean empty string or non-terminated buffer; print notice. */\n                fprintf(log, \"translated local_path appears empty or not NUL-terminated within buffer\\n\");\n            }\n        }\n\n        if (log)\n        {\n            fprintf(log, \"Calling OS_FileRemove_Impl(local_path)\\n\");\n        }\n\n        /* Preserve original behavior: call implementation to remove file. */\n        return_code = OS_FileRemove_Impl(local_path);\n\n        if (log)\n        {\n            fprintf(log, \"OS_FileRemove_Impl returned %ld\\n\", (long)return_code);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_TranslatePath failed; skipping OS_FileRemove_Impl\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_remove EXIT: return_code=%ld\\n\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}