{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_FileRemove_Impl is declared to take a non-const pointer (e.g. int32 OS_FileRemove_Impl(char *path)) and the function does not modify the string, this call violates MISRA C 2023 Rule 8.13. The local_path buffer is only used as input here, so the parameter should be const-qualified (int32 OS_FileRemove_Impl(const char *path)) and the call would then be OS_FileRemove_Impl(local_path).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1645.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_remove code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_remove with it.\n  - Your function must have the exact same signature as OS_remove.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_remove to check logs.\n  - Your function MUST preserve the original logic of OS_remove as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_remove will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_remove as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Minimal entry log so the function reachability is recorded. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1645.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_remove entered: path=%p\\n\", (void *)path);\n            if (path != NULL)\n            {\n                fprintf(log, \"  path.content=\\\"%s\\\"\\n\", path);\n            }\n            fclose(log);\n        }\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and the content of local_path when available. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1645.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  local_path.ptr=%p\\n\", (void *)local_path);\n                fprintf(log, \"  local_path.content=\\\"%s\\\"\\n\", local_path);\n            }\n            else\n            {\n                fprintf(log, \"  local_path uninitialized (translation failed)\\n\");\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log immediately before calling the implementation to capture the exact\n         * buffer being passed. This is useful evidence for the scenario where\n         * a non-const pointer parameter is used even though the buffer is only\n         * intended as input. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1645.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"About to call OS_FileRemove_Impl with local_path.ptr=%p\\n\", (void *)local_path);\n                fprintf(log, \"  local_path.before=\\\"%s\\\"\\n\", local_path);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_FileRemove_Impl(local_path);\n\n        /* Log after the call to detect if the implementation modified the buffer\n         * (evidence that the function might not have been const-correct). */\n        {\n            FILE *log = fopen(\"/tmp/logs/1645.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_FileRemove_Impl returned %d\\n\", (int)return_code);\n                fprintf(log, \"  local_path.after=\\\"%s\\\"\\n\", local_path);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log the fact that the remove implementation was not called. */\n        FILE *log = fopen(\"/tmp/logs/1645.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_FileRemove_Impl not called because OS_TranslatePath failed (code=%d)\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}