{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtSprintf returns a pointer of type char * to the static buffer Buf[TextIndex].Text (a mutable char array). Under MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. If callers are not intended to modify the returned contents (and given the buffer is shared and transient), the return type should be const char *; as written returning char * therefore violates Rule 8.13. (If the API deliberately allows callers to modify the buffer, then no violation -- but the safer MISRA-compliant change is to return const char *.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtSprintf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3095.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UtSprintf code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UtSprintf with it.\n  - Your function must have the exact same signature as UtSprintf.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UtSprintf to check logs.\n  - Your function MUST preserve the original logic of UtSprintf as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UtSprintf will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UtSprintf as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "char *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n    FILE *log = fopen(\"/tmp/logs/3095.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtSprintf ENTER Spec=\\\"%s\\\" TextIndex(before)=%u\\n\", (Spec != NULL) ? Spec : \"(null)\", TextIndex);\n        fflush(log);\n    }\n\n    ++TextIndex;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtSprintf TextIndex(after increment)=%u\\n\", TextIndex);\n        fflush(log);\n    }\n\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UtSprintf TextIndex >= UT_SNPRINTF_MAX_BUFS (%u) -> wrap to 0\\n\", (unsigned)UT_SNPRINTF_MAX_BUFS);\n            fflush(log);\n        }\n        TextIndex = 0;\n    }\n\n    if (log != NULL)\n    {\n        /* Log buffer address and size about to be used */\n        fprintf(log, \"UtSprintf using buffer index=%u addr=%p size=%zu\\n\",\n                TextIndex,\n                (void *)Buf[TextIndex].Text,\n                sizeof(Buf[TextIndex].Text));\n        fflush(log);\n    }\n\n    va_start(Args, Spec);\n    int ret = vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    if (log != NULL)\n    {\n        /* Log the result of formatting and the buffer contents. */\n        fprintf(log, \"UtSprintf vsnprintf return=%d\\n\", ret);\n        /* Print a sanitized preview of the buffer (null-terminated). */\n        fprintf(log, \"UtSprintf buffer(escaped)=%s\\n\", Buf[TextIndex].Text);\n        fprintf(log, \"UtSprintf RETURN ptr=%p (shared static buffer)\\n\", (void *)Buf[TextIndex].Text);\n        fclose(log);\n    }\n\n    return Buf[TextIndex].Text;\n}\n"
}