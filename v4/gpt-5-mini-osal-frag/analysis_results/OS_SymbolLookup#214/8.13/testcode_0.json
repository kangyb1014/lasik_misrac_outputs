{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'StaticSym' is declared as a non-const OS_static_symbol_record_t * but is only used for read-only access (reading Name, Module, Address and advancing the pointer). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. 'const OS_static_symbol_record_t *StaticSym' or have the members Name/Module be 'const char *'), so the current non-const declaration is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SymbolLookup code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SymbolLookup with it.\n  - Your function must have the exact same signature as OS_SymbolLookup.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SymbolLookup to check logs.\n  - Your function MUST preserve the original logic of OS_SymbolLookup as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SymbolLookup will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n    FILE *log = NULL;\n\n    /* Try to open log for appending; if it fails, continue without logging */\n    log = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SymbolLookup ENTER: SymbolAddress=%p SymbolName=\\\"%s\\\"\\n\", (void *)SymbolAddress, SymbolName ? SymbolName : \"(null)\");\n        fflush(log);\n    }\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"After OS_SymbolLookup_Impl: return_code=%ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* When primary lookup succeeded, log the resolved address value. */\n            fprintf(log, \"Primary lookup succeeded. Resolved SymbolAddress pointer=%p value=0x%llx\\n\",\n                    (void *)SymbolAddress,\n                    (unsigned long long)(*SymbolAddress));\n        }\n        fflush(log);\n    }\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Primary lookup failed (code=%ld). Attempting static lookup...\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_SymbolLookup_Static returned %ld\\n\", (long)staticsym_status);\n            fflush(log);\n        }\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            if (log != NULL)\n            {\n                /* Log pointer and resolved address after static lookup success */\n                fprintf(log, \"Static lookup succeeded. SymbolAddress pointer=%p value=0x%llx\\n\",\n                        (void *)SymbolAddress,\n                        (unsigned long long)(*SymbolAddress));\n                fflush(log);\n            }\n\n            return_code = staticsym_status;\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_SymbolLookup EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}