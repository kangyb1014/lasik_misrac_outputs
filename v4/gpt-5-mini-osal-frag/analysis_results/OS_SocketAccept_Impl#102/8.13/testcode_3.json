{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SelectSingle_Impl the pointer 'impl' is declared as 'OS_impl_file_internal_record_t *impl;' but it is only used to read members (impl->selectable, impl->fd) and not used to modify the pointee. According to MISRA C 2023 Rule 8.13 the pointer should therefore be const-qualified (const OS_impl_file_internal_record_t *impl). Because the pointer is not const-qualified even though the pointee is not modified, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketAccept_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketAccept_Impl with it.\n  - Your function must have the exact same signature as OS_SocketAccept_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketAccept_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketAccept_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    /* --- Logging probe: open log file (append) --- */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTER OS_SocketAccept_Impl: sock_token=%p, conn_token=%p, Addr=%p, timeout=%d\\n\",\n                    (const void *)sock_token, (const void *)conn_token, (const void *)Addr, (int)timeout);\n            fclose(logf);\n        }\n    }\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log retrieved implementation records and relevant fields */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Retrieved impls: sock_impl=%p, conn_impl=%p\\n\",\n                    (const void *)sock_impl, (const void *)conn_impl);\n            if (sock_impl != NULL)\n            {\n                fprintf(logf, \"sock_impl->selectable=%d, sock_impl->fd=%d\\n\",\n                        (int)(sock_impl->selectable), (int)(sock_impl->fd));\n            }\n            if (conn_impl != NULL)\n            {\n                fprintf(logf, \"conn_impl->fd(before)=%d\\n\", (int)(conn_impl->fd));\n            }\n            fclose(logf);\n        }\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        /* Log before calling OS_SelectSingle_Impl */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_SelectSingle_Impl: operation=0x%08x, timeout=%d\\n\",\n                        (unsigned int)operation, (int)timeout);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        /* Log after calling OS_SelectSingle_Impl */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Returned from OS_SelectSingle_Impl: return_code=%d, operation=0x%08x\\n\",\n                        (int)return_code, (unsigned int)operation);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n\n        {\n            FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Socket not selectable (socket->selectable==0). Skipping select, return_code=OS_SUCCESS\\n\");\n                fclose(logf);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            /* Log timeout branch */\n            {\n                FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"Operation not readable after select: operation=0x%08x -> TIMEOUT\\n\",\n                            (unsigned int)operation);\n                    fclose(logf);\n                }\n            }\n\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n\n            /* Log before accept call */\n            {\n                FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"About to call accept: sock_impl->fd=%d, addrlen(before)=%lu\\n\",\n                            (int)(sock_impl->fd), (unsigned long)addrlen);\n                    fclose(logf);\n                }\n            }\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log result of accept */\n            {\n                FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"accept returned: conn_impl->fd=%d, addrlen(after)=%lu\\n\",\n                            (int)(conn_impl->fd), (unsigned long)addrlen);\n                    fclose(logf);\n                }\n            }\n\n            if (conn_impl->fd < 0)\n            {\n                /* Log error branch for accept failure */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                    if (logf != NULL)\n                    {\n                        fprintf(logf, \"accept failed, conn_impl->fd=%d -> OS_ERROR\\n\", (int)(conn_impl->fd));\n                        fclose(logf);\n                    }\n                }\n\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                /* Log success and final state */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                    if (logf != NULL)\n                    {\n                        fprintf(logf, \"accept succeeded, final conn_impl->fd=%d, Addr->ActualLength=%lu\\n\",\n                                (int)(conn_impl->fd), (unsigned long)Addr->ActualLength);\n                        fclose(logf);\n                    }\n                }\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                /* Log after setting flags */\n                {\n                    FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n                    if (logf != NULL)\n                    {\n                        fprintf(logf, \"OS_IMPL_SET_SOCKET_FLAGS called for conn_token=%p\\n\", (const void *)conn_token);\n                        fclose(logf);\n                    }\n                }\n            }\n        }\n    }\n\n    /* Final log and exit */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2585.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT OS_SocketAccept_Impl: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}