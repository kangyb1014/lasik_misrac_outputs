{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes &token (type OS_object_token_t *) to OS_DirRewind_Impl. If the prototype of OS_DirRewind_Impl is non-const, e.g. int32 OS_DirRewind_Impl(OS_object_token_t *token), and the function does not modify the pointed-to object, then a pointer to a non-const type is used when a const-qualified pointer could be used \u2014 this violates MISRA C 2023 Rule 8.13. To fix, declare the parameter as const OS_object_token_t *token (and update the implementation accordingly). If, however, OS_DirRewind_Impl legitimately modifies *token (i.e. its API requires a mutable pointer), then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRewind:\n```c\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_DirectoryRewind code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_DirectoryRewind with it.\n  - Your function must have the exact same signature as OS_DirectoryRewind.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_DirectoryRewind to check logs.\n  - Your function MUST preserve the original logic of OS_DirectoryRewind as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_DirectoryRewind will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_DirectoryRewind as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Open log file for tracing control flow and token state */\n    FILE *log = fopen(\"/tmp/logs/3175.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTER OS_DirectoryRewind: dir_id=%ld\\n\", (long)dir_id);\n    }\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld, token_addr=%p, token_size=%zu\\n\",\n                (long)return_code, (void *)&token, sizeof(token));\n\n        /* Dump token bytes before possible modification by OS_DirRewind_Impl */\n        {\n            unsigned char *p = (unsigned char *)&token;\n            fprintf(log, \"token_before=\");\n            for (size_t i = 0; i < sizeof(token); ++i)\n            {\n                fprintf(log, \"%02X\", p[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Keep a copy of the original token bytes to detect any modification */\n        unsigned char token_before[sizeof token];\n        memcpy(token_before, &token, sizeof token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Calling OS_DirRewind_Impl(&token)\\n\");\n        }\n\n        return_code = OS_DirRewind_Impl(&token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirRewind_Impl returned %ld\\n\", (long)return_code);\n\n            unsigned char *p2 = (unsigned char *)&token;\n            fprintf(log, \"token_after=\");\n            for (size_t i = 0; i < sizeof token; ++i)\n            {\n                fprintf(log, \"%02X\", p2[i]);\n            }\n            fprintf(log, \"\\n\");\n\n            /* Compare before/after to see if the implementation modified the pointed-to object */\n            int modified = 0;\n            for (size_t i = 0; i < sizeof token; ++i)\n            {\n                if (token_before[i] != p2[i])\n                {\n                    modified = 1;\n                    break;\n                }\n            }\n            fprintf(log, \"token_modified=%d\\n\", modified);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT OS_DirectoryRewind: return_code=%ld\\n\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}