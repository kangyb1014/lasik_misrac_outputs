{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the function-pointer type iter->match is declared to accept non-const pointers (for example: bool (*match)(void *arg, OS_object_token_t *token, OS_common_record_t *record)). In that case the call iter->match(iter->arg, &iter->token, record) passes pointers to objects that are not intended to be modified, so the parameters should be const-qualified (const OS_object_token_t * and const OS_common_record_t *) and Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdIteratorGetNext with it.\n  - Your function must have the exact same signature as OS_ObjectIdIteratorGetNext.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdIteratorGetNext to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdIteratorGetNext will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    /* Logging probe: try to append to the log file. If logging fails, continue\n     * without affecting original behavior. */\n    FILE *logf = fopen(\"/tmp/logs/585.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_ObjectIdIteratorGetNext(iter=%p)\\n\", (void *)iter);\n        if (iter != NULL)\n        {\n            fprintf(logf, \"  initial token.obj_idx=%d, token.obj_id=%d, limit=%d, arg=%p, match=%p\\n\",\n                    iter->token.obj_idx, iter->token.obj_id, iter->limit,\n                    (void *)iter->arg, (void *)iter->match);\n        }\n        fflush(logf);\n    }\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  loop: incremented token.obj_idx -> %d (limit=%d)\\n\",\n                    iter->token.obj_idx, iter->limit);\n            fflush(logf);\n        }\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  loop: token.obj_idx >= limit, breaking out\\n\");\n                fflush(logf);\n            }\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (logf != NULL)\n        {\n            fprintf(logf, \"  record obtained: record=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                fprintf(logf, \"    record->active_id=%d\\n\", record->active_id);\n            }\n            fflush(logf);\n        }\n\n        if (iter->match == NULL)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  match predicate is NULL -> accept record\\n\");\n                fflush(logf);\n            }\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            bool match_result = iter->match(iter->arg, &iter->token, record);\n            if (logf != NULL)\n            {\n                fprintf(logf, \"  match called: arg=%p, token=(obj_idx=%d,obj_id=%d), record=%p -> result=%d\\n\",\n                        (void *)iter->arg, iter->token.obj_idx, iter->token.obj_id, (void *)record, (int)match_result);\n                fflush(logf);\n            }\n\n            if (match_result)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  match accepted -> set token.obj_id=%d, got_next=true\\n\", record->active_id);\n                    fflush(logf);\n                }\n            }\n            else if (logf != NULL)\n            {\n                fprintf(logf, \"  match rejected -> continue loop\\n\");\n                fflush(logf);\n            }\n        }\n    } while (!got_next);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT: OS_ObjectIdIteratorGetNext -> %d, final token=(obj_idx=%d,obj_id=%d)\\n\",\n                (int)got_next, iter->token.obj_idx, iter->token.obj_id);\n        fclose(logf);\n    }\n\n    return got_next;\n}\n"
}