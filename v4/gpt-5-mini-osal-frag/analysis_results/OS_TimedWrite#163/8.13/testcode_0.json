{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'buffer' is declared as 'const void *' and is passed to OS_GenericWrite_Impl. If OS_GenericWrite_Impl is declared to take a non-const pointer (e.g. 'void *buf'), this call discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. (If OS_GenericWrite_Impl is declared to take 'const void *', then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/885.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimedWrite:\n```c\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimedWrite code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimedWrite with it.\n  - Your function must have the exact same signature as OS_TimedWrite.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimedWrite to check logs.\n  - Your function MUST preserve the original logic of OS_TimedWrite as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimedWrite will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimedWrite as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Minimal entry log so callers/tests always produce evidence */\n    {\n        FILE *log = fopen(\"/tmp/logs/885.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log entry state: file descriptor, pointer value, sizes and timeout */\n            fprintf(log, \"OS_TimedWrite ENTER: filedes=%d, buffer=%p, nbytes=%zu, timeout=%d\\n\",\n                    (int)filedes, buffer, nbytes, timeout);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of object lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/885.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d for filedes=%d\\n\", return_code, (int)filedes);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation to capture the potential const-discard scenario */\n        {\n            FILE *log = fopen(\"/tmp/logs/885.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"About to call OS_GenericWrite_Impl: token_addr=%p, buffer=%p (declared const void*), nbytes=%zu, timeout=%d\\n\",\n                        (void *)&token, buffer, nbytes, timeout);\n                fprintf(log, \"NOTE: buffer is const-qualified here. If OS_GenericWrite_Impl accepts a non-const pointer (e.g. void*), this call discards the const qualifier.\\n\");\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Preserve original behavior: perform the write using the implementation function */\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log result of the write and release event */\n        {\n            FILE *log = fopen(\"/tmp/logs/885.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_GenericWrite_Impl returned %d for filedes=%d\\n\", return_code, (int)filedes);\n                fprintf(log, \"Calling OS_ObjectIdRelease for token at %p\\n\", (void *)&token);\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}