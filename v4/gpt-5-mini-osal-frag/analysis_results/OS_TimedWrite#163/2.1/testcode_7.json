{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro uses a hard-coded UINT32_MAX/2 upper bound. On targets where the type of 'val' (e.g. size_t) cannot reach that value (for example a 16-bit size_t where SIZE_MAX < UINT32_MAX/2), the expression ((val)>0 && (val)<(UINT32_MAX/2)) is always true. That makes the ARGCHECK failure branch (the error-handling path) unreachable, which violates MISRA C 2023 Rule 2.1. (Use of SIZE_MAX or a compile-time-sized bound would avoid this.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/886.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimedWrite:\n```c\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimedWrite code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimedWrite with it.\n  - Your function must have the exact same signature as OS_TimedWrite.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimedWrite to check logs.\n  - Your function MUST preserve the original logic of OS_TimedWrite as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimedWrite will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimedWrite as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* --- Probing / logging: entry and type-size analysis --- */\n    {\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* Log the function entry and parameter values */\n            fprintf(logf, \"OS_TimedWrite ENTRY: filedes=%ld, buffer=%p, nbytes=%zu, timeout=%ld\\n\",\n                    (long)filedes, buffer, nbytes, (long)timeout);\n\n            /* Compute SIZE_MAX at runtime without relying on SIZE_MAX macro */\n            size_t size_max = (size_t)~(size_t)0;\n            unsigned long u32_half = 2147483647u; /* UINT32_MAX / 2 */\n\n            fprintf(logf, \"size_t width (bytes)=%zu, SIZE_MAX=%zu, UINT32_MAX/2=%lu\\n\",\n                    sizeof(size_t), size_max, u32_half);\n\n            if (size_max < (size_t)u32_half)\n            {\n                fprintf(logf, \"NOTE: SIZE_MAX < UINT32_MAX/2 -> the ARGCHECK upper bound (UINT32_MAX/2) is unreachable for size_t on this target.\\n\");\n            }\n            else\n            {\n                fprintf(logf, \"NOTE: SIZE_MAX >= UINT32_MAX/2 -> ARGCHECK upper bound may be reachable.\\n\");\n            }\n\n            fclose(logf);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n\n    /* Log that we've reached after pointer check (if the macro didn't return early) */\n    {\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Reached after OS_CHECK_POINTER: buffer=%p\\n\", buffer);\n            fclose(logf);\n        }\n    }\n\n    OS_CHECK_SIZE(nbytes);\n\n    /* Log that we've reached after size check (if the macro didn't return early) */\n    {\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Reached after OS_CHECK_SIZE: nbytes=%zu\\n\", nbytes);\n            fclose(logf);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log the result of ObjectIdGetById */\n    {\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Calling OS_GenericWrite_Impl: buffer=%p, nbytes=%zu, timeout=%ld\\n\",\n                        buffer, nbytes, (long)timeout);\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log after write and before release */\n        {\n            FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_GenericWrite_Impl returned %ld\\n\", (long)return_code);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release */\n        {\n            FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Released token after write, final return_code=%ld\\n\", (long)return_code);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        /* Log the early failure to obtain object id */\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ObjectIdGetById failed, skipping write. return_code=%ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    /* Final log of function exit and return value */\n    {\n        FILE *logf = fopen(\"/tmp/logs/886.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimedWrite EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}