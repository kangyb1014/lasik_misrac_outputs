{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'record' is declared as OS_common_record_t * and is assigned the address of an element of OS_global_timebase_table via OS_OBJECT_TABLE_GET. The code only reads fields from *record (e.g. record->active_id) and does not modify it, so the pointer should be to a const-qualified type (const OS_common_record_t *) to express and enforce read-only access. The macro and the table are defined to yield a non-const pointer, allowing accidental modification \u2014 this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBase_CallbackThread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2355.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_CallbackThread:\n```c\nvoid OS_TimeBase_CallbackThread(osal_id_t timebase_id)\n{\n    OS_TimerSync_t                 syncfunc;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_common_record_t *           record;\n    OS_object_token_t              token;\n    OS_object_token_t              cb_token;\n    uint32                         tick_time;\n    uint32                         spin_cycles;\n    int32                          saved_wait_time;\n\n    /*\n     * Register this task as a time base handler.\n     * Application code MUST NOT attempt to configure timers from the context of a\n     * timer callback, otherwise deadlock is possible.  Additional checks prevent this.\n     *\n     */\n    OS_TaskRegister_Impl(timebase_id);\n\n    /* Grab the relevant info from the global structure */\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n    {\n        /* Something went wrong - abort this thread */\n        return;\n    }\n\n    record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n    syncfunc    = timebase->external_sync;\n    spin_cycles = 0;\n\n    OS_ObjectIdRelease(&token);\n\n    while (1)\n    {\n        /*\n         * Call the sync function - this will pend for some period of time\n         * and return the amount of elapsed time in units of \"timebase ticks\"\n         */\n        tick_time = (*syncfunc)(timebase_id);\n\n        /*\n         * The returned tick_time should be nonzero.  If the sync function\n         * returns zero, then it means something went wrong and it is not\n         * known how many ticks have elapsed.\n         *\n         * This can validly occur, for instance, if the underlying wait\n         * operation was interrupted for some reason, e.g. EINTR or EAGAIN\n         * on a POSIX-like OS.\n         *\n         * In some instances it is appropriate to simply call the\n         * function again.  However, since this task typically runs as a\n         * high-priority thread, it is prudent to limit such spinning.\n         */\n        if (tick_time != 0)\n        {\n            /* nominal case - reset counter */\n            spin_cycles = 0;\n        }\n        else if (spin_cycles < OS_TIMEBASE_SPIN_LIMIT)\n        {\n            /* off-nominal but OK for now */\n            ++spin_cycles;\n        }\n        else\n        {\n            /*\n             * Spin-loop detected.\n             * Just call OS_TaskDelay_Impl() to yield the CPU.\n             * generate a debug warning only on the first time\n             * so the operator knows this is happening.\n             */\n            OS_TaskDelay_Impl(10);\n\n            if (spin_cycles == OS_TIMEBASE_SPIN_LIMIT)\n            {\n                ++spin_cycles;\n                OS_DEBUG(\"WARNING: Timebase Sync Spin Loop detected\\n\");\n            }\n        }\n\n        OS_TimeBaseLock_Impl(&token);\n\n        /*\n         * After waiting, check that our ID still matches\n         * If not then it means this time base got deleted....\n         */\n        if (!OS_ObjectIdEqual(timebase_id, record->active_id))\n        {\n            OS_TimeBaseUnlock_Impl(&token);\n            break;\n        }\n\n        timebase->freerun_time += tick_time;\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &cb_token) == 0)\n        {\n            do\n            {\n                timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, cb_token);\n                saved_wait_time = timecb->wait_time;\n                timecb->wait_time -= tick_time;\n                while (timecb->wait_time <= 0)\n                {\n                    timecb->wait_time += timecb->interval_time;\n\n                    /*\n                     * Only allow the \"wait_time\" underflow to go as far negative as one interval time\n                     * This prevents a cb \"interval_time\" of less than the timebase interval_time from\n                     * accumulating infinitely\n                     */\n                    if (timecb->wait_time < -timecb->interval_time)\n                    {\n                        ++timecb->backlog_resets;\n                        timecb->wait_time = -timecb->interval_time;\n                    }\n\n                    /*\n                     * Only give the callback if the wait_time actually transitioned from positive to negative.\n                     * This allows one-shot operation where the API sets the \"wait_time\" positive but keeps\n                     * the \"interval_time\" at zero.  With the interval_time at zero the wait time will never\n                     * go positive again unless the API sets it again.\n                     */\n                    if (saved_wait_time > 0 && timecb->callback_ptr != NULL)\n                    {\n                        (*timecb->callback_ptr)(OS_ObjectIdFromToken(&cb_token), timecb->callback_arg);\n                    }\n\n                    /*\n                     * Do not repeat the loop unless interval_time is configured.\n                     */\n                    if (timecb->interval_time <= 0)\n                    {\n                        break;\n                    }\n                }\n\n            } while (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &cb_token) ==\n                         OS_SUCCESS &&\n                     !OS_ObjectIdEqual(OS_ObjectIdFromToken(&cb_token), timebase->first_cb));\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimeBase_CallbackThread code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimeBase_CallbackThread with it.\n  - Your function must have the exact same signature as OS_TimeBase_CallbackThread.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimeBase_CallbackThread to check logs.\n  - Your function MUST preserve the original logic of OS_TimeBase_CallbackThread as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimeBase_CallbackThread will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimeBase_CallbackThread as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_TimeBase_CallbackThread(osal_id_t timebase_id)\n{\n    OS_TimerSync_t                 syncfunc;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_common_record_t *           record;\n    OS_object_token_t              token;\n    OS_object_token_t              cb_token;\n    uint32                         tick_time;\n    uint32                         spin_cycles;\n    int32                          saved_wait_time;\n    FILE *                         logf = NULL;\n\n    /* Open log file for appending control-flow and state information */\n    logf = fopen(\"/tmp/logs/2355.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TimeBase_CallbackThread: entered (timebase_id=%lu)\\n\", (unsigned long)timebase_id);\n        fflush(logf);\n    }\n\n    /*\n     * Register this task as a time base handler.\n     * Application code MUST NOT attempt to configure timers from the context of a\n     * timer callback, otherwise deadlock is possible.  Additional checks prevent this.\n     *\n     */\n    OS_TaskRegister_Impl(timebase_id);\n\n    /* Grab the relevant info from the global structure */\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n    {\n        /* Something went wrong - abort this thread */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: OS_ObjectIdGetById failed for id=%lu\\n\", (unsigned long)timebase_id);\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n        }\n        return;\n    }\n\n    record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n    /* Log pointers and initial state observed from the tables */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TimeBase_CallbackThread: record ptr=%p, timebase ptr=%p, syncfunc ptr=%p\\n\",\n                (void *)record, (void *)timebase, (void *)timebase->external_sync);\n        /* Guarded read of fields that are expected to be valid for logging only */\n        if (record != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: record->active_id=%lu\\n\", (unsigned long)record->active_id);\n        }\n        if (timebase != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: timebase->freerun_time=%lu, timebase->first_cb=%lu\\n\",\n                    (unsigned long)timebase->freerun_time, (unsigned long)timebase->first_cb);\n        }\n        fflush(logf);\n    }\n\n    syncfunc    = timebase->external_sync;\n    spin_cycles = 0;\n\n    OS_ObjectIdRelease(&token);\n\n    while (1)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: loop begin (spin_cycles=%lu)\\n\", (unsigned long)spin_cycles);\n            fflush(logf);\n        }\n\n        /*\n         * Call the sync function - this will pend for some period of time\n         * and return the amount of elapsed time in units of \"timebase ticks\"\n         */\n        tick_time = (*syncfunc)(timebase_id);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: sync returned tick_time=%lu\\n\", (unsigned long)tick_time);\n            fflush(logf);\n        }\n\n        /*\n         * The returned tick_time should be nonzero.  If the sync function\n         * returns zero, then it means something went wrong and it is not\n         * known how many ticks have elapsed.\n         *\n         * This can validly occur, for instance, if the underlying wait\n         * operation was interrupted for some reason, e.g. EINTR or EAGAIN\n         * on a POSIX-like OS.\n         *\n         * In some instances it is appropriate to simply call the\n         * function again.  However, since this task typically runs as a\n         * high-priority thread, it is prudent to limit such spinning.\n         */\n        if (tick_time != 0)\n        {\n            /* nominal case - reset counter */\n            spin_cycles = 0;\n        }\n        else if (spin_cycles < OS_TIMEBASE_SPIN_LIMIT)\n        {\n            /* off-nominal but OK for now */\n            ++spin_cycles;\n        }\n        else\n        {\n            /*\n             * Spin-loop detected.\n             * Just call OS_TaskDelay_Impl() to yield the CPU.\n             * generate a debug warning only on the first time\n             * so the operator knows this is happening.\n             */\n            OS_TaskDelay_Impl(10);\n\n            if (spin_cycles == OS_TIMEBASE_SPIN_LIMIT)\n            {\n                ++spin_cycles;\n                OS_DEBUG(\"WARNING: Timebase Sync Spin Loop detected\\n\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_TimeBase_CallbackThread: WARNING: Timebase Sync Spin Loop detected (spin_cycles=%lu)\\n\",\n                            (unsigned long)spin_cycles);\n                    fflush(logf);\n                }\n            }\n        }\n\n        OS_TimeBaseLock_Impl(&token);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: After TimeBaseLock_Impl\\n\");\n            if (record != NULL)\n            {\n                fprintf(logf, \"OS_TimeBase_CallbackThread: comparing timebase_id=%lu to record->active_id=%lu\\n\",\n                        (unsigned long)timebase_id, (unsigned long)record->active_id);\n            }\n            fflush(logf);\n        }\n\n        /*\n         * After waiting, check that our ID still matches\n         * If not then it means this time base got deleted....\n         */\n        if (!OS_ObjectIdEqual(timebase_id, record->active_id))\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_TimeBase_CallbackThread: ID mismatch, exiting thread (timebase_id=%lu, record->active_id=%lu)\\n\",\n                        (unsigned long)timebase_id, (unsigned long)record->active_id);\n                fflush(logf);\n            }\n\n            OS_TimeBaseUnlock_Impl(&token);\n            break;\n        }\n\n        timebase->freerun_time += tick_time;\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: updated freerun_time=%lu\\n\", (unsigned long)timebase->freerun_time);\n            fflush(logf);\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &cb_token) == 0)\n        {\n            do\n            {\n                timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, cb_token);\n                saved_wait_time = timecb->wait_time;\n\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_TimeBase_CallbackThread: timecb ptr=%p, saved_wait_time=%ld, interval_time=%ld, callback_ptr=%p\\n\",\n                            (void *)timecb, (long)saved_wait_time, (long)timecb->interval_time, (void *)timecb->callback_ptr);\n                    fflush(logf);\n                }\n\n                timecb->wait_time -= tick_time;\n\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"OS_TimeBase_CallbackThread: timecb->wait_time after decrement=%ld\\n\", (long)timecb->wait_time);\n                    fflush(logf);\n                }\n\n                while (timecb->wait_time <= 0)\n                {\n                    timecb->wait_time += timecb->interval_time;\n\n                    /*\n                     * Only allow the \"wait_time\" underflow to go as far negative as one interval time\n                     * This prevents a cb \"interval_time\" of less than the timebase interval_time from\n                     * accumulating infinitely\n                     */\n                    if (timecb->wait_time < -timecb->interval_time)\n                    {\n                        ++timecb->backlog_resets;\n                        timecb->wait_time = -timecb->interval_time;\n                    }\n\n                    /*\n                     * Only give the callback if the wait_time actually transitioned from positive to negative.\n                     * This allows one-shot operation where the API sets the \"wait_time\" positive but keeps\n                     * the \"interval_time\" at zero.  With the interval_time at zero the wait time will never\n                     * go positive again unless the API sets it again.\n                     */\n                    if (saved_wait_time > 0 && timecb->callback_ptr != NULL)\n                    {\n                        if (logf != NULL)\n                        {\n                            fprintf(logf, \"OS_TimeBase_CallbackThread: invoking callback for cb_id=%lu, arg=%p\\n\",\n                                    (unsigned long)OS_ObjectIdFromToken(&cb_token), (void *)timecb->callback_arg);\n                            fflush(logf);\n                        }\n\n                        (*timecb->callback_ptr)(OS_ObjectIdFromToken(&cb_token), timecb->callback_arg);\n                    }\n\n                    /*\n                     * Do not repeat the loop unless interval_time is configured.\n                     */\n                    if (timecb->interval_time <= 0)\n                    {\n                        break;\n                    }\n                }\n\n            } while (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &cb_token) ==\n                         OS_SUCCESS &&\n                     !OS_ObjectIdEqual(OS_ObjectIdFromToken(&cb_token), timebase->first_cb));\n        }\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TimeBase_CallbackThread: unlocking timebase and continuing loop\\n\");\n            fflush(logf);\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n    }\n\n    /* Close log file if still open */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TimeBase_CallbackThread: exiting\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n}\n"
}