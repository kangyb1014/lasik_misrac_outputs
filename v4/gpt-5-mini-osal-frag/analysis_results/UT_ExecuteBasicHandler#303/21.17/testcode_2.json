{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memset may write beyond the object bounds if the return-buffer entry is misconfigured. For example, if StubPtr is non-NULL but StubPtr->Data.Buff.BasePtr is NULL (or points to a buffer smaller than StubPtr->Data.Buff.TotalSize) and Data.Buff.TotalSize > 0, the call memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) will access memory out of bounds. There is no check in this code that BasePtr is non-NULL or that TotalSize does not exceed the actual allocated buffer, so this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ExecuteBasicHandler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ExecuteBasicHandler with it.\n  - Your function must have the exact same signature as UT_ExecuteBasicHandler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ExecuteBasicHandler to check logs.\n  - Your function MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ExecuteBasicHandler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Log entry and parameter state to help reproduce/control flow for violation scenarios */\n    FILE *log = fopen(\"/tmp/logs/503.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ExecuteBasicHandler: ENTER\\n\");\n        fprintf(log, \"  FuncKey=%llu\\n\", (unsigned long long)FuncKey);\n        fprintf(log, \"  FunctionName_ptr=%p\\n\", (const void *)FunctionName);\n        fprintf(log, \"  FunctionName_str=%s\\n\", FunctionName ? FunctionName : \"(null)\");\n        fprintf(log, \"  DefaultHandler_ptr=%p\\n\", (const void *)DefaultHandler);\n    }\n\n    /* Check if the test case registered a hook, and use the default if not */\n    void *stub_entry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    if (log != NULL)\n    {\n        fprintf(log, \"  UT_GetStubEntry returned %p\\n\", stub_entry);\n    }\n\n    if (stub_entry == NULL && DefaultHandler != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  Condition met: stub_entry==NULL && DefaultHandler!=NULL -> calling UT_SetHandlerFunction\\n\");\n        }\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n        if (log != NULL)\n        {\n            fprintf(log, \"  UT_SetHandlerFunction completed\\n\");\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  Not setting handler (either stub_entry!=NULL or DefaultHandler==NULL)\\n\");\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  Calling UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL)\\n\");\n        fflush(log);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ExecuteBasicHandler: EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}