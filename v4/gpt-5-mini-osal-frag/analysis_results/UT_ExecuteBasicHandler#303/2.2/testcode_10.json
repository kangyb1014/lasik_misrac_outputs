{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial assignment 'Counter = 0;' is dead. In all execution paths that continue past the NULL-check, Counter is overwritten with 'StubPtr->Data.Rc.Count' in the else branch. The only path where the initial value would remain is when both UT_GetStubEntry calls return NULL, but that path calls UtAssert_Abort() (does not return). Therefore the assignment has no effect on program behaviour and can be removed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/508.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_ExecuteBasicHandler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_ExecuteBasicHandler with it.\n  - Your function must have the exact same signature as UT_ExecuteBasicHandler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_ExecuteBasicHandler to check logs.\n  - Your function MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_ExecuteBasicHandler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Open log file for append so multiple test runs aggregate evidence */\n    FILE *log = fopen(\"/tmp/logs/508.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ExecuteBasicHandler ENTER: FunctionName=%s DefaultHandler=%p\\n\",\n                FunctionName ? FunctionName : \"(null)\", (const void *)DefaultHandler);\n        fflush(log);\n    }\n\n    /* Call UT_GetStubEntry exactly once and record the returned pointer for both logging and decision */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry -> %p\\n\", stubEntry);\n        fflush(log);\n    }\n\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Condition met: stubEntry == NULL && DefaultHandler != NULL -> calling UT_SetHandlerFunction\\n\");\n            fflush(log);\n        }\n\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Returned from UT_SetHandlerFunction\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            if (stubEntry != NULL)\n            {\n                fprintf(log, \"Skipping UT_SetHandlerFunction because stubEntry != NULL\\n\");\n            }\n            else\n            {\n                fprintf(log, \"Skipping UT_SetHandlerFunction because DefaultHandler == NULL\\n\");\n            }\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling UT_DefaultStubImpl(FunctionName=%s, FuncKey=(opaque), Arg=0, Ptr=NULL)\\n\",\n                FunctionName ? FunctionName : \"(null)\");\n        fflush(log);\n    }\n\n    /* Preserve original behaviour */\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_DefaultStubImpl returned; UT_ExecuteBasicHandler EXIT\\n\");\n        fclose(log);\n    }\n}\n"
}