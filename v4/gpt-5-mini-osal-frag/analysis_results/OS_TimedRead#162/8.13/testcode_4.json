{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &token (type OS_object_token_t *) to OS_GenericRead_Impl. If the implementation/prototype of OS_GenericRead_Impl does not modify the token object, then its parameter should be declared as pointer-to-const (const OS_object_token_t *). In that case the current usage (and likely the non-const parameter in the callee) violates MISRA C 2023 Rule 8.13. To be sure, inspect the prototype/implementation of OS_GenericRead_Impl: if it already declares the parameter as const (or if the function actually modifies the token), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1905.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimedRead:\n```c\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimedRead code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimedRead with it.\n  - Your function must have the exact same signature as OS_TimedRead.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimedRead to check logs.\n  - Your function MUST preserve the original logic of OS_TimedRead as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimedRead will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimedRead as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Minimal entry probe so tests always record that the function was entered */\n    FILE *fp = fopen(\"/tmp/logs/1905.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimedRead ENTRY: filedes=%lld buffer=%p nbytes=%llu timeout=%lld\\n\",\n                (long long)filedes, buffer, (unsigned long long)nbytes, (long long)timeout);\n        fflush(fp);\n    }\n\n    /* Check Parameters (preserve original logic) */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (fp)\n    {\n        fprintf(fp, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        fflush(fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture token bytes before the call so we can detect if the callee modified it. */\n        size_t tok_size = sizeof(token);\n        /* Use VLA to avoid introducing new functions or globals. */\n        unsigned char before[tok_size];\n        unsigned char after[tok_size];\n\n        /* Copy the token raw bytes prior to the call */\n        (void)memcpy(before, &token, tok_size);\n\n        /* Call the original implementation (preserve behavior) */\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        /* Copy the token raw bytes after the call */\n        (void)memcpy(after, &token, tok_size);\n\n        /* Log the return value from the generic read implementation */\n        if (fp)\n        {\n            fprintf(fp, \"OS_GenericRead_Impl returned %d\\n\", (int)return_code);\n            fflush(fp);\n        }\n\n        /* Compare token before/after to provide evidence whether the callee modified it */\n        int token_changed = (memcmp(before, after, tok_size) != 0) ? 1 : 0;\n        if (fp)\n        {\n            fprintf(fp, \"Token size=%zu changed=%d\\n\", tok_size, token_changed);\n            if (token_changed)\n            {\n                /* Dump a hex diff: before -> after */\n                fprintf(fp, \"Token before:\\n\");\n                for (size_t i = 0; i < tok_size; ++i)\n                {\n                    fprintf(fp, \"%02X\", before[i]);\n                    if ((i + 1) % 32 == 0) fprintf(fp, \"\\n\");\n                }\n                fprintf(fp, \"\\nToken after:\\n\");\n                for (size_t i = 0; i < tok_size; ++i)\n                {\n                    fprintf(fp, \"%02X\", after[i]);\n                    if ((i + 1) % 32 == 0) fprintf(fp, \"\\n\");\n                }\n                fprintf(fp, \"\\n\");\n            }\n            else\n            {\n                fprintf(fp, \"Token bytes unchanged (raw dump):\\n\");\n                for (size_t i = 0; i < tok_size; ++i)\n                {\n                    fprintf(fp, \"%02X\", before[i]);\n                    if ((i + 1) % 32 == 0) fprintf(fp, \"\\n\");\n                }\n                fprintf(fp, \"\\n\");\n            }\n            fflush(fp);\n        }\n\n        /* Release the token as original code did */\n        OS_ObjectIdRelease(&token);\n        if (fp)\n        {\n            fprintf(fp, \"OS_ObjectIdRelease called for filedes=%lld\\n\", (long long)filedes);\n            fflush(fp);\n        }\n    }\n    else\n    {\n        if (fp)\n        {\n            fprintf(fp, \"OS_TimedRead: OS_ObjectIdGetById failed, skipping GenericRead and Release\\n\");\n            fflush(fp);\n        }\n    }\n\n    if (fp)\n    {\n        fprintf(fp, \"OS_TimedRead EXIT: return_code=%d\\n\\n\", (int)return_code);\n        fclose(fp);\n    }\n\n    return return_code;\n}\n"
}