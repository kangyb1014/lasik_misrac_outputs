{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_printf calls OS_DEBUG when OS not initialized. If OS_DEBUG is (even indirectly) implemented using OS_printf (a common pattern), this yields indirect recursion: OS_printf -> OS_DEBUG -> OS_printf ... leading to a Rule 17.2 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1900.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimedRead:\n```c\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimedRead code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimedRead with it.\n  - Your function must have the exact same signature as OS_TimedRead.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimedRead to check logs.\n  - Your function MUST preserve the original logic of OS_TimedRead as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimedRead will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimedRead as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Minimal entry probe: log that the function was entered and parameters. Close immediately\n       so that if parameter checks cause an early return we do not leak the file handle. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1900.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_TimedRead: filedes=%d, buffer=%p, nbytes=%zu, timeout=%d\\n\",\n                    (int)filedes, buffer, nbytes, (int)timeout);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters (preserve original checks exactly as before) */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    /* Continue logging after parameter checks to capture control flow/state without leaking\n       handles if the parameter checks return early. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1900.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"After param checks: buffer=%p, nbytes=%zu\\n\", buffer, nbytes);\n            fflush(log);\n\n            /* Attempt to resolve the object id, logging the outcome. */\n            fflush(log);\n        }\n        /* Close here to avoid relying on subsequent code paths to close the file. */\n        if (log != NULL)\n        {\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log the result of OS_ObjectIdGetById and proceed to call the implementation if successful. */\n    {\n        FILE *log = fopen(\"/tmp/logs/1900.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetById returned %d for filedes=%d\\n\", return_code, (int)filedes);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Calling OS_GenericRead_Impl with token=%p, buffer=%p, nbytes=%zu, timeout=%d\\n\",\n                        (void *)&token, buffer, nbytes, (int)timeout);\n                fflush(log);\n            }\n\n            /* Preserve original behavior: call the generic implementation and capture its return. */\n            return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_GenericRead_Impl returned %d\\n\", return_code);\n                fflush(log);\n            }\n\n            OS_ObjectIdRelease(&token);\n\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ObjectIdRelease called for token=%p\\n\", (void *)&token);\n                fflush(log);\n            }\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_TimedRead: return_code=%d\\n\", return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}