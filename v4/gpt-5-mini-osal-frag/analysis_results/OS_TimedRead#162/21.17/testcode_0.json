{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ObjectIdTransactionInit is ever called with token == NULL (i.e. a caller passes a NULL pointer), the call memset(token, 0, sizeof(*token)) will dereference the NULL pointer and perform writes beyond the bounds of the referenced object (undefined behavior). Although many call sites pass the address of a local token variable, the function itself does not validate token before calling memset, so this usage can lead to an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedRead code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1903.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_TimedRead:\n```c\nint32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_TimedRead code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_TimedRead with it.\n  - Your function must have the exact same signature as OS_TimedRead.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_TimedRead to check logs.\n  - Your function MUST preserve the original logic of OS_TimedRead as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_TimedRead will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_TimedRead as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_TimedRead(osal_id_t filedes, void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *log = NULL;\n\n    /* Minimal entry log so the call is always visible in the logs. */\n    log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Print parameters and the address of the stack token object so callers can\n         * see whether a NULL token address is being passed to underlying helpers\n         * (helps reproduce cases where token pointers might end up NULL).\n         */\n        fprintf(log, \"OS_TimedRead ENTER: filedes=%llu, buffer=%p, nbytes=%zu, timeout=%lld\\n\",\n                (unsigned long long)filedes, buffer, nbytes, (long long)timeout);\n        fprintf(log, \"OS_TimedRead stack token address = %p\\n\", (void *)&token);\n        fclose(log);\n        log = NULL;\n    }\n\n    /* Check Parameters (preserve original behavior) */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    /* Try to get the object id (preserve original behavior) */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log the result of the ObjectIdGetById call and token address/state to help reproducing\n     * scenarios where downstream functions may be called with unexpected token values.\n     */\n    log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TimedRead after OS_ObjectIdGetById: return_code=%d, token_addr=%p\\n\",\n                (int)return_code, (void *)&token);\n        fclose(log);\n        log = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before invoking the generic read implementation so the exact control\n         * flow and parameters (including token address) are captured.\n         */\n        log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimedRead calling OS_GenericRead_Impl: token_addr=%p, buffer=%p, nbytes=%zu, timeout=%lld\\n\",\n                    (void *)&token, buffer, nbytes, (long long)timeout);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Preserve original behavior: perform the read using the token obtained above. */\n        return_code = OS_GenericRead_Impl(&token, buffer, nbytes, timeout);\n\n        /* Log the result of the read operation. */\n        log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimedRead after OS_GenericRead_Impl: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n            log = NULL;\n        }\n\n        /* Release the token (preserve original behavior) */\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release to show the full lifecycle in the logs. */\n        log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimedRead after OS_ObjectIdRelease: final_return_code=%d\\n\", (int)return_code);\n            fclose(log);\n            log = NULL;\n        }\n    }\n    else\n    {\n        /* If we failed to obtain the token, log that path as well. */\n        log = fopen(\"/tmp/logs/1903.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TimedRead: OS_ObjectIdGetById failed with %d, skipping read\\n\", (int)return_code);\n            fclose(log);\n            log = NULL;\n        }\n    }\n\n    return return_code;\n}\n"
}