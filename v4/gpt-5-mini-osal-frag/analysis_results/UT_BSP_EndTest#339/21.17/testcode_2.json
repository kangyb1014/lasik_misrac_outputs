{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 strlen(OutputMessage) can read beyond the bounds if OutputMessage does not point to a NUL-terminated C string. For example: char buf[10]; memcpy(buf, src, 10); /* no terminating '\\0' */ UT_BSP_DoText(UTASSERT_CASETYPE_INFO, buf); strlen(buf) will scan past buf and may access out-of-bounds memory. The same happens if OutputMessage is NULL \u2014 strlen(NULL) is undefined. Unless every caller is guaranteed to pass a valid NUL-terminated string, this use can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_BSP_EndTest:\n```c\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_BSP_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_BSP_EndTest with it.\n  - Your function must have the exact same signature as UT_BSP_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_BSP_EndTest to check logs.\n  - Your function MUST preserve the original logic of UT_BSP_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_BSP_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_BSP_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n    FILE *log = fopen(\"/tmp/logs/1383.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_BSP_EndTest: entered; TestCounters=%p\\n\", (void *)TestCounters);\n    }\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_BSP_EndTest: TestSegmentCount=%u > 1 -> calling UtAssert_DoTestSegmentReport('SUMMARY')\\n\",\n                    (unsigned int)TestCounters->TestSegmentCount);\n        }\n\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    int snprintf_ret = snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n                                (unsigned int)TestCounters->TestSegmentCount);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_BSP_EndTest: snprintf returned %d, buffer_size=%zu\\n\", snprintf_ret, sizeof(Message));\n\n        /* Check whether the buffer contains a terminating NUL within its bounds */\n        void *nulpos = memchr(Message, '\\0', sizeof(Message));\n        fprintf(log, \"UT_BSP_EndTest: Message buffer pointer=%p, NUL_within_buffer=%s\\n\",\n                (void *)Message, (nulpos != NULL) ? \"YES\" : \"NO\");\n\n        if (nulpos != NULL)\n        {\n            /* Only call strlen if a NUL was found within the buffer to avoid scanning out-of-bounds */\n            size_t len = strlen(Message);\n            fprintf(log, \"UT_BSP_EndTest: strlen(Message)=%zu\\n\", len);\n        }\n        else\n        {\n            fprintf(log, \"UT_BSP_EndTest: WARNING - No NUL found within Message buffer; calling strlen would be unsafe\\n\");\n        }\n\n        /* Hex dump the entire buffer to aid in reproducing potential non-terminated strings */\n        fprintf(log, \"UT_BSP_EndTest: Message hex dump (up to %zu bytes):\\n\", sizeof(Message));\n        for (size_t i = 0; i < sizeof(Message); ++i)\n        {\n            fprintf(log, \"%02X \", (unsigned char)Message[i]);\n            if ((i & 0xF) == 0xF) fprintf(log, \"\\n\");\n        }\n        fprintf(log, \"\\n\");\n    }\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_BSP_EndTest: after console output\\n\");\n        fprintf(log, \"UT_BSP_EndTest: CaseCount[FAIL]=%u, [TSF]=%u, [TTF]=%u\\n\",\n                (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n                (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n                (unsigned int)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n    }\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        if (log != NULL) fprintf(log, \"UT_BSP_EndTest: setting exit code OS_ERROR\\n\");\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        if (log != NULL) fprintf(log, \"UT_BSP_EndTest: setting exit code OS_SUCCESS\\n\");\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_BSP_EndTest: exiting\\n\\n\");\n        fclose(log);\n    }\n}\n"
}