{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function OS_BSP_ConsoleOutput_Impl is declared to accept a non-const pointer (e.g. void OS_BSP_ConsoleOutput_Impl(char *buf, size_t len)), then this call passes Message (a buffer provided for read-only output) to a non-const pointer parameter. Since the buffer is not modified by the caller and the function likely only reads it, the parameter should be const-qualified (const char *buf). In that case the code violates MISRA C 2023 Rule 8.13. If, however, OS_BSP_ConsoleOutput_Impl is already declared to take a const-qualified pointer (e.g. void OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1385.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_BSP_EndTest:\n```c\nvoid UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    UT_BSP_Lock();\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n    UT_BSP_Unlock();\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_BSP_EndTest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_BSP_EndTest with it.\n  - Your function must have the exact same signature as UT_BSP_EndTest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_BSP_EndTest to check logs.\n  - Your function MUST preserve the original logic of UT_BSP_EndTest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_BSP_EndTest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_BSP_EndTest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_BSP_EndTest(const UtAssert_TestCounter_t *TestCounters)\n{\n    char Message[128];\n    FILE *logf = fopen(\"/tmp/logs/1385.txt\", \"a\");\n\n    if (logf)\n    {\n        fprintf(logf, \"UT_BSP_EndTest: entered. TestCounters=%p\\n\", (void *)TestCounters);\n        if (TestCounters != NULL)\n        {\n            fprintf(logf, \"TestSegmentCount=%u\\n\", (unsigned)TestCounters->TestSegmentCount);\n            fprintf(logf, \"CaseCount[FATAL]=%u, CaseCount[TSF]=%u, CaseCount[TTF]=%u\\n\",\n                    (unsigned)TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE],\n                    (unsigned)TestCounters->CaseCount[UTASSERT_CASETYPE_TSF],\n                    (unsigned)TestCounters->CaseCount[UTASSERT_CASETYPE_TTF]);\n        }\n        else\n        {\n            fprintf(logf, \"Warning: TestCounters is NULL\\n\");\n        }\n        fflush(logf);\n    }\n\n    /*\n     * Only output a \"summary\" if there is more than one test Segment.\n     * Otherwise it is a duplicate of the report already given.\n     */\n    if (TestCounters->TestSegmentCount > 1)\n    {\n        if (logf) fprintf(logf, \"Calling UtAssert_DoTestSegmentReport(\\\"SUMMARY\\\")\\n\");\n        UtAssert_DoTestSegmentReport(\"SUMMARY\", TestCounters);\n    }\n\n    snprintf(Message, sizeof(Message), \"COMPLETE: %u tests Segment(s) executed\\n\\n\",\n             (unsigned int)TestCounters->TestSegmentCount);\n\n    if (logf)\n    {\n        /* Log buffer address, length and content to help reproduce pointer usage */\n        fprintf(logf, \"Prepared Message buffer at %p, strlen(Message)=%zu\\n\", (void *)Message, strlen(Message));\n        fprintf(logf, \"Message content: \\\"%s\\\"\\n\", Message);\n        fflush(logf);\n    }\n\n    UT_BSP_Lock();\n\n    if (logf)\n    {\n        fprintf(logf, \"Acquired lock. About to call OS_BSP_ConsoleOutput_Impl with buffer=%p, len=%zu\\n\",\n                (void *)Message, strlen(Message));\n        /* Note: this records that a non-const pointer (Message) is passed to the implementation call-site. */\n        fflush(logf);\n    }\n\n    OS_BSP_ConsoleOutput_Impl(Message, strlen(Message));\n\n    UT_BSP_Unlock();\n\n    if (logf)\n    {\n        fprintf(logf, \"Released lock after OS_BSP_ConsoleOutput_Impl call\\n\");\n        fflush(logf);\n    }\n\n    if ((TestCounters->CaseCount[UTASSERT_CASETYPE_FAILURE] > 0) ||\n        (TestCounters->CaseCount[UTASSERT_CASETYPE_TSF] > 0) || (TestCounters->CaseCount[UTASSERT_CASETYPE_TTF] > 0))\n    {\n        if (logf) fprintf(logf, \"Detected failing case(s). Setting exit code OS_ERROR\\n\");\n        OS_BSP_SetExitCode(OS_ERROR);\n    }\n    else\n    {\n        if (logf) fprintf(logf, \"No failing cases. Setting exit code OS_SUCCESS\\n\");\n        OS_BSP_SetExitCode(OS_SUCCESS);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"UT_BSP_EndTest: exiting.\\n\\n\");\n        fclose(logf);\n    }\n}\n"
}