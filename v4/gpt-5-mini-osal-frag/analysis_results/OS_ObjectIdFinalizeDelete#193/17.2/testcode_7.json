{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIndirect recursion via the application event handler: OS_TimeBaseDelete calls OS_ObjectIdFinalizeDelete, which calls OS_NotifyEvent. OS_NotifyEvent invokes the application EventHandler callback (OS_SharedGlobalVars.EventHandler). If that EventHandler calls OS_TimeBaseDelete (or any function that eventually calls OS_TimeBaseDelete), this creates an indirect recursive call chain back into OS_TimeBaseDelete.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1220.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdFinalizeDelete with it.\n  - Your function must have the exact same signature as OS_ObjectIdFinalizeDelete.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdFinalizeDelete to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdFinalizeDelete will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n    osal_id_t orig_obj = OS_OBJECT_ID_UNDEFINED;\n    FILE *log_fp = NULL;\n\n    /* Try to open the log file; if this fails, logging is skipped but behavior is unchanged */\n    log_fp = fopen(\"/tmp/logs/1220.txt\", \"a\");\n\n    /* Capture the original object id safely (token may be NULL in some callers) */\n    if (token != NULL)\n    {\n        orig_obj = token->obj_id;\n    }\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"ENTER OS_ObjectIdFinalizeDelete: operation_status=%ld, token=%p, token->obj_id=%ld\\n\",\n                (long)operation_status, (void *)token, (long)orig_obj);\n        fflush(log_fp);\n    }\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Decision: operation_status == OS_SUCCESS -> set final_id = OS_OBJECT_ID_UNDEFINED\\n\");\n            fflush(log_fp);\n        }\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = (token != NULL) ? token->obj_id : OS_OBJECT_ID_UNDEFINED;\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Decision: operation_status != OS_SUCCESS -> restore final_id = token->obj_id (%ld)\\n\",\n                    (long)final_id);\n            fflush(log_fp);\n        }\n    }\n\n    /* Either way we must unlock the object type */\n    if (log_fp)\n    {\n        fprintf(log_fp, \"Calling OS_ObjectIdTransactionFinish(token=%p, &final_id=%ld)\\n\", (void *)token, (long)final_id);\n        fflush(log_fp);\n    }\n\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    if (log_fp)\n    {\n        osal_id_t after_obj = (token != NULL) ? token->obj_id : OS_OBJECT_ID_UNDEFINED;\n        fprintf(log_fp, \"After OS_ObjectIdTransactionFinish: final_id=%ld, token->obj_id=%ld\\n\",\n                (long)final_id, (long)after_obj);\n        fflush(log_fp);\n    }\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        if (log_fp)\n        {\n            osal_id_t notify_id = (token != NULL) ? token->obj_id : OS_OBJECT_ID_UNDEFINED;\n            fprintf(log_fp, \"About to call OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, obj_id=%ld)\\n\", (long)notify_id);\n            fflush(log_fp);\n        }\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Returned from OS_NotifyEvent\\n\");\n            fflush(log_fp);\n        }\n    }\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"EXIT OS_ObjectIdFinalizeDelete: returning %ld\\n\", (long)operation_status);\n        fclose(log_fp);\n    }\n\n    return operation_status;\n}\n"
}