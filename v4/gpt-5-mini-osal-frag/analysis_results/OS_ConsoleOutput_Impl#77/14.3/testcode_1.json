{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe while loop tests OS_SharedGlobalVars.GlobalState against OS_SHUTDOWN_MAGIC_NUMBER, but GlobalState is not shown as volatile/atomic and is not modified within the loop body. Because the expression can be treated as invariant by the compiler (leading to an unintended infinite loop), this violates MISRA C 2023 Rule 14.3. The construct is not one of the permitted exceptions (it is not an intentionally infinite loop and not the allowed do-while case).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/389.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleOutput_Impl:\n```c\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ConsoleOutput_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ConsoleOutput_Impl with it.\n  - Your function must have the exact same signature as OS_ConsoleOutput_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ConsoleOutput_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ConsoleOutput_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    /* Retrieve console record and initial positions as in original implementation */\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    /* Open a log file for probes. If opening fails, fall back to stderr so logs are still visible. */\n    FILE *logf = fopen(\"/tmp/logs/389.txt\", \"a\");\n    if (logf == NULL)\n    {\n        logf = stderr;\n    }\n\n    /* Entry probe: record function entry and initial buffer state */\n    fprintf(logf, \"OS_ConsoleOutput_Impl ENTER: console=%p ReadPos=%zu WritePos=%zu BufSize=%zu\\n\",\n            (void *)console, StartPos, EndPos, console->BufSize);\n    fflush(logf);\n\n    OS_BSP_Lock_Impl();\n\n    /* Track number of loop iterations to provide evidence in case of an invariant condition/infinite loop */\n    unsigned long iter_count = 0UL;\n\n    while (StartPos != EndPos)\n    {\n        iter_count++;\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            fprintf(logf, \"iter=%lu wrap case: StartPos=%zu BufSize=%zu WriteSize=%zu\\n\",\n                    iter_count, StartPos, console->BufSize, WriteSize);\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            fprintf(logf, \"iter=%lu linear case: StartPos=%zu EndPos=%zu WriteSize=%zu\\n\",\n                    iter_count, StartPos, EndPos, WriteSize);\n        }\n\n        fflush(logf);\n\n        /* Preserve original side-effect: write console output */\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            fprintf(logf, \"iter=%lu wrapped StartPos to 0\\n\", iter_count);\n            fflush(logf);\n        }\n\n        /* Periodically flush and record current EndPos to capture any external updates */\n        if ((iter_count & 0xFF) == 0)\n        {\n            fprintf(logf, \"iter=%lu snapshot: StartPos=%zu EndPos=%zu\\n\", iter_count, StartPos, EndPos);\n            fflush(logf);\n        }\n    }\n\n    /* Record loop exit and number of iterations observed */\n    fprintf(logf, \"loop exited after %lu iterations: final StartPos=%zu EndPos=%zu\\n\",\n            iter_count, StartPos, EndPos);\n    fflush(logf);\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location (preserve original behavior) */\n    console->ReadPos = StartPos;\n\n    fprintf(logf, \"updated ReadPos=%zu (console=%p)\\n\", console->ReadPos, (void *)console);\n    fflush(logf);\n\n    if (logf != stderr)\n    {\n        fclose(logf);\n    }\n}\n"
}