{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer conn_impl is declared as a pointer to a non-const OS_impl_file_internal_record_t but is only used for read access (conn_impl->fd) and is not modified via this pointer. According to MISRA C 2023 Rule 8.13, it should be declared as a pointer to a const-qualified type (const OS_impl_file_internal_record_t *conn_impl). Therefore the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketShutdown_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown_Impl:\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_SocketShutdown_Impl code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_SocketShutdown_Impl with it.\n  - Your function must have the exact same signature as OS_SocketShutdown_Impl.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_SocketShutdown_Impl to check logs.\n  - Your function MUST preserve the original logic of OS_SocketShutdown_Impl as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_SocketShutdown_Impl will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_SocketShutdown_Impl as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    /* Probe log: record function entry and provided token/Mode */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2035.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ENTER: OS_SocketShutdown_Impl token=%p Mode=%d\\n\", (const void *)token, (int)Mode);\n            fclose(fp);\n        }\n    }\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the lookup result (pointer value). Do not change behavior; only record state. */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2035.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"LOOKUP: conn_impl=%p\\n\", (void *)conn_impl);\n            fclose(fp);\n        }\n    }\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    /* Log the chosen 'how' and the fd about to be used. This will also provide\n     * evidence that conn_impl is only read (we log conn_impl->fd but do not modify conn_impl). */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2035.txt\", \"a\");\n        if (fp != NULL)\n        {\n            /* Note: this dereferences conn_impl just as the original implementation does. */\n            fprintf(fp, \"CALL: shutdown fd=%d how=%d (conn_impl=%p)\\n\", conn_impl->fd, how, (void *)conn_impl);\n            fclose(fp);\n        }\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        /* Log success */\n        FILE *fp = fopen(\"/tmp/logs/2035.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"RESULT: shutdown succeeded return=%d\\n\", (int)return_code);\n            fclose(fp);\n        }\n    }\n    else\n    {\n        return_code = OS_ERROR;\n\n        /* Log failure */\n        FILE *fp = fopen(\"/tmp/logs/2035.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"RESULT: shutdown failed return=%d\\n\", (int)return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}