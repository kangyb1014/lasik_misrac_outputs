{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code does not validate the source pointer or its accessible size before calling memcpy. If BufferPtr is NULL (with BufferSize>0) or BufferPtr actually points to a buffer smaller than BufferSize, the call memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) will read beyond the bounds of the source object. For example, passing a 4-byte source buffer with BufferSize==8 will cause an out-of-bounds read.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1613.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original UT_Stub_CopyToReturnValue with it.\n  - Your function must have the exact same signature as UT_Stub_CopyToReturnValue.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call UT_Stub_CopyToReturnValue to check logs.\n  - Your function MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, UT_Stub_CopyToReturnValue will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *logf = fopen(\"/tmp/logs/1613.txt\", \"a\");\n\n    /* Minimal entry probe so logs always show the function was reached */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: UT_Stub_CopyToReturnValue FuncKey=%lu BufferPtr=%p BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n        fflush(logf);\n    }\n    else\n    {\n        /* Fallback to stderr if the log file cannot be opened */\n        fprintf(stderr, \"ENTER: UT_Stub_CopyToReturnValue FuncKey=%lu BufferPtr=%p BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"UT_GetStubEntry returned %p\\n\", (void *)StubPtr);\n        fflush(logf);\n    }\n    else\n    {\n        fprintf(stderr, \"UT_GetStubEntry returned %p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Log current stub buffer state */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Stub state: BasePtr=%p TotalSize=%zu Position=%zu\\n\",\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    (size_t)StubPtr->Data.Buff.TotalSize,\n                    (size_t)StubPtr->Data.Buff.Position);\n            fflush(logf);\n        }\n        else\n        {\n            fprintf(stderr, \"Stub state: BasePtr=%p TotalSize=%zu Position=%zu\\n\",\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    (size_t)StubPtr->Data.Buff.TotalSize,\n                    (size_t)StubPtr->Data.Buff.Position);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (logf != NULL)\n            {\n                fprintf(logf, \"ERROR: Size mismatch in setting return value: TotalSize=%zu BufferSize=%zu\\n\",\n                        (size_t)StubPtr->Data.Buff.TotalSize, BufferSize);\n                fclose(logf);\n            }\n            else\n            {\n                fprintf(stderr, \"ERROR: Size mismatch in setting return value: TotalSize=%zu BufferSize=%zu\\n\",\n                        (size_t)StubPtr->Data.Buff.TotalSize, BufferSize);\n            }\n\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            /* Log details immediately before the memcpy so callers can reproduce out-of-bounds reads */\n            if (logf != NULL)\n            {\n                fprintf(logf, \"ABOUT_TO_MEMCPY dest=%p src=%p size=%zu\\n\",\n                        (void *)StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n                fflush(logf);\n            }\n            else\n            {\n                fprintf(stderr, \"ABOUT_TO_MEMCPY dest=%p src=%p size=%zu\\n\",\n                        (void *)StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            }\n\n            /* Preserve original behavior: perform the copy as before */\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (logf != NULL)\n            {\n                fprintf(logf, \"AFTER_MEMCPY Position=%zu\\n\", (size_t)StubPtr->Data.Buff.Position);\n                fclose(logf);\n            }\n            else\n            {\n                fprintf(stderr, \"AFTER_MEMCPY Position=%zu\\n\", (size_t)StubPtr->Data.Buff.Position);\n            }\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"No stub entry for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n            fclose(logf);\n        }\n        else\n        {\n            fprintf(stderr, \"No stub entry for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n        }\n    }\n}\n"
}