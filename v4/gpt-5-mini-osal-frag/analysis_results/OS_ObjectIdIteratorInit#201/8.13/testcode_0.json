{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member OS_object_iter_t::base is declared as a non-const pointer (OS_common_record_t *base) but it is initialized from &OS_common_table[...] and only used for read-only operations (e.g. match callbacks take a const OS_common_record_t *obj). Therefore the pointer can and should be const-qualified (const OS_common_record_t *base) to prevent accidental modification through the iterator.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_ObjectIdIteratorInit code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_ObjectIdIteratorInit with it.\n  - Your function must have the exact same signature as OS_ObjectIdIteratorInit.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_ObjectIdIteratorInit to check logs.\n  - Your function MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_ObjectIdIteratorInit will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n    /* Preserve original behavior: populate iterator fields then initialize transaction token. */\n    /* Logging to help reproduce the scenario described in the MISRA rule report. */\n    FILE *logf = NULL;\n    time_t now = 0;\n    int32 ret;\n\n    /* Attempt to open log file for append. Continue even if logging fails. */\n    logf = fopen(\"/tmp/logs/2625.txt\", \"a\");\n    if (logf)\n    {\n        now = time(NULL);\n        fprintf(logf, \"--- OS_ObjectIdIteratorInit ENTER (ts=%ld) ---\\n\", (long)now);\n        fprintf(logf, \"inputs: matchfunc=%p, matcharg=%p, objtype=%d, iter=%p\\n\",\n                (void *)matchfunc, matcharg, (int)objtype, (void *)iter);\n    }\n\n    /* Original logic: assign callback, arg, limit and base pointer. */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    if (logf)\n    {\n        fprintf(logf, \"after assign: iter->limit=%u\\n\", (unsigned)iter->limit);\n        fprintf(logf, \"after assign: iter->base=%p\\n\", (void *)iter->base);\n\n        /* Log relation between base and OS_common_table index. */\n        {\n            size_t base_index = (size_t)OS_GetBaseForObjectType(objtype);\n            fprintf(logf, \"OS_common_table + base_index=%zu -> &OS_common_table[%zu] = %p\\n\",\n                    base_index, base_index, (void *)&OS_common_table[base_index]);\n        }\n    }\n\n    /* Call the original transaction-init function and capture its return code. */\n    ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdTransactionInit returned: %ld\\n\", (long)ret);\n\n        /* Log token address (value contents not interpreted here to avoid ABI assumptions). */\n        fprintf(logf, \"token address: %p\\n\", (void *)&iter->token);\n\n        /* Add a short explanatory note helpful to reproduce the rule violation: */\n        fprintf(logf, \"NOTE: iter->base is a non-const pointer to OS_common_table element. \"\n                       \"If this pointer is only used for read-only operations, it should be const-qualified.\\n\");\n\n        fprintf(logf, \"--- OS_ObjectIdIteratorInit EXIT (ts=%ld) ---\\n\", (long)time(NULL));\n        fclose(logf);\n    }\n\n    return ret;\n}\n"
}