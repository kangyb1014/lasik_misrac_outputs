{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) without any guarantee that the object pointed to by s contains at least maxlen bytes. For example, OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may be invoked where VirtualPath points to a shorter buffer (or a string allocated at the end of an allocation); memchr could then access bytes beyond the object boundary if no NUL is found within maxlen bytes. This may result in out\u2011of\u2011bounds accesses and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1033.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkdir with it.\n  - Your function must have the exact same signature as OS_mkdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkdir to check logs.\n  - Your function MUST preserve the original logic of OS_mkdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for append; if this fails, continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/1033.txt\", \"a\");\n    if (log)\n    {\n        /* Log entry with pointer value only (do not dereference 'path' to avoid any out-of-bounds reads). */\n        fprintf(log, \"OS_mkdir ENTER: path=%p access=%u\\n\", (const void *)path, (unsigned)access);\n        fflush(log);\n    }\n\n    /* Preserve original behavior: translate the path into local_path. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (log)\n    {\n        fprintf(log, \"OS_TranslatePath returned %ld\\n\", (long)return_code);\n\n        /* If translation succeeded, safely log the resulting local_path contents.\n           This inspects only the local buffer (known size) that OS_TranslatePath wrote into,\n           avoiding any reads from the original 'path' pointer which might be shorter than\n           expected and could trigger out-of-bounds access. */\n        if (return_code == OS_SUCCESS)\n        {\n            /* Determine length up to the buffer size without reading past local_path. */\n            size_t max_len = sizeof(local_path) / sizeof(local_path[0]);\n            size_t i;\n            for (i = 0; i < max_len; ++i)\n            {\n                if (local_path[i] == '\\0')\n                    break;\n            }\n\n            fprintf(log, \"local_path (len=%zu) = \\\"\", i);\n            if (i > 0)\n            {\n                /* Write the bytes of local_path up to the found length. */\n                fwrite(local_path, 1, i, log);\n            }\n            fprintf(log, \"\\\"\\n\");\n            fflush(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Preserve original behavior: create the directory implementation call. */\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        if (log)\n        {\n            fprintf(log, \"OS_DirCreate_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_mkdir EXIT: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}