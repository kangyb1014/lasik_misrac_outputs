{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) with maxlen == OS_MAX_PATH_LEN. If VirtualPath (the caller-supplied path) does not point to an object that is at least OS_MAX_PATH_LEN bytes long and there is no '\\0' within the actual object bounds, memchr may read past the end of the object while searching for the terminator. Example: caller passes a small buffer such as char buf[8] = {'A','B','C','D','E','F','G','H'} (no '\\0' in the buffer); calling OS_TranslatePath(buf, ...) leads to memchr(buf, 0, OS_MAX_PATH_LEN) reading beyond buf and causing undefined behavior/ out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1033.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkdir with it.\n  - Your function must have the exact same signature as OS_mkdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkdir to check logs.\n  - Your function MUST preserve the original logic of OS_mkdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for append. Best-effort logging; failure to open log should not alter logic. */\n    FILE *logf = fopen(\"/tmp/logs/1033.txt\", \"a\");\n    if (logf)\n    {\n        /* Log entry and basic state. Avoid dereferencing 'path' beyond using its pointer value. */\n        fprintf(logf, \"OS_mkdir ENTER: path=%p, access=%u, OS_MAX_LOCAL_PATH_LEN=%d\\n\",\n                (void *)path, (unsigned)access, (int)OS_MAX_LOCAL_PATH_LEN);\n        fflush(logf);\n    }\n\n    /* Preserve original behavior: translate the user-supplied path into a local path. */\n    return_code = OS_TranslatePath(path, local_path);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_TranslatePath returned %d\\n\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* local_path is only used/logged when translation succeeded to avoid reading uninitialized data. */\n            fprintf(logf, \"OS_mkdir: translated local_path='%s'\\n\", local_path);\n        }\n        else\n        {\n            fprintf(logf, \"OS_mkdir: translation failed for path=%p\\n\", (void *)path);\n        }\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Create the directory using the translated path as in the original implementation. */\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        /* Log result of directory creation in a separate best-effort append (so earlier logs aren't lost). */\n        logf = fopen(\"/tmp/logs/1033.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_DirCreate_Impl returned %d for local_path=%s\\n\", (int)return_code, local_path);\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}