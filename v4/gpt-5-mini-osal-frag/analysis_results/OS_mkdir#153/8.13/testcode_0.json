{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_TranslatePath is something like: int32 OS_TranslatePath(char *path, char *local_path); then passing 'path' (declared as const char *path) discards the const qualifier and thereby violates MISRA C 2023 Rule 8.13. Fix: change OS_TranslatePath to take a const char * for the input path (or make an explicit non-const copy before calling). (If OS_TranslatePath already declares its first parameter as const char *, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified OS_mkdir code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original OS_mkdir with it.\n  - Your function must have the exact same signature as OS_mkdir.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call OS_mkdir to check logs.\n  - Your function MUST preserve the original logic of OS_mkdir as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, OS_mkdir will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of OS_mkdir as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* ----- Probe: entry log ----- */\n    FILE *log = fopen(\"/tmp/logs/1035.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mkdir ENTRY\\n\");\n        fprintf(log, \"  path pointer: %p\\n\", (void *)path);\n        if (path == NULL)\n        {\n            fprintf(log, \"  path: <NULL>\\n\");\n        }\n        else\n        {\n            /* Print up to 256 chars of the provided path to avoid huge logs */\n            size_t i = 0u;\n            while (i < 256u && path[i] != '\\0') { ++i; }\n            fprintf(log, \"  path (truncated up to %zu chars): \\\"%.*s\\\"\\n\", i, (int)i, path);\n        }\n        fprintf(log, \"  Note: calling OS_TranslatePath(path, local_path).\\n\");\n        fprintf(log, \"  Note: 'path' is a const char* here; if OS_TranslatePath is declared as int32 OS_TranslatePath(char *path, char *local_path) this call will discard the const qualifier (MISRA 8.13).\\n\");\n        fclose(log);\n    }\n\n    /* Original behavior preserved: translate path into local_path */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* ----- Probe: after TranslatePath ----- */\n    log = fopen(\"/tmp/logs/1035.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mkdir: OS_TranslatePath returned %ld\\n\", (long)return_code);\n        fprintf(log, \"  local_path pointer: %p\\n\", (void *)local_path);\n        if (local_path[0] == '\\0')\n        {\n            fprintf(log, \"  local_path: <empty>\\n\");\n        }\n        else\n        {\n            size_t j = 0u;\n            while (j < 256u && local_path[j] != '\\0') { ++j; }\n            fprintf(log, \"  local_path (truncated up to %zu chars): \\\"%.*s\\\"\\n\", j, (int)j, local_path);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            fprintf(log, \"  Will call OS_DirCreate_Impl(local_path, access=%u)\\n\", (unsigned)access);\n        }\n        else\n        {\n            fprintf(log, \"  Skipping OS_DirCreate_Impl because OS_TranslatePath failed\\n\");\n        }\n        fclose(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        /* ----- Probe: after DirCreate ----- */\n        log = fopen(\"/tmp/logs/1035.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_mkdir: OS_DirCreate_Impl returned %ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    /* ----- Probe: exit log ----- */\n    log = fopen(\"/tmp/logs/1035.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_mkdir EXIT: return %ld\\n\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}