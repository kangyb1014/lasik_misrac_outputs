{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"..\") will copy three bytes ('.' '.' '\\0') into info->name. If the destination array in struct lfs_info is not large enough to hold 3 bytes (for example, if it were declared as char name[2] or any size < 3), this call will write beyond the bounds of info->name and thus violate the rule. No bounds check is shown in the fragment, so the use is potentially unsafe.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read_:\n```c\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read_ with it.\n  - Your function must have the exact same signature as lfs_dir_read_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read_ to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int ret = 0;\n    FILE *f = fopen(\"/tmp/logs/883.txt\", \"a\");\n\n    if (f) {\n        fprintf(f, \"ENTER lfs_dir_read_: lfs=%p dir=%p info=%p dir->pos=%d dir->id=%d m.count=%d m.split=%d\\n\",\n                (void*)lfs, (void*)dir, (void*)info,\n                (int)dir->pos, (int)dir->id,\n                (int)dir->m.count, (int)dir->m.split);\n    }\n\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        if (f) {\n            /* Log intent to copy '.' into info->name without reading the destination buffer contents. */\n            fprintf(f, \"CASE dir->pos==0: preparing to set info->type=LFS_TYPE_DIR and strcpy(info->name, \\\".\\\")\\n\");\n            /* sizeof(info->name) may be size of pointer or array length depending on struct definition */\n            fprintf(f, \"INFO before copy: info=%p info->name=%p sizeof(info->name)=%zu intended_copy_bytes=%d\\n\",\n                    (void*)info, (void*)(info->name), sizeof(info->name), 2);\n        }\n\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n\n        if (f) {\n            fprintf(f, \"AFTER copy '.': info->name=%p (contents not inspected to avoid UB)\\n\",\n                    (void*)(info->name));\n        }\n\n        dir->pos += 1;\n        ret = true;\n        if (f) {\n            fprintf(f, \"RETURN (special '.') -> %d\\n\", ret);\n            fclose(f);\n        }\n        return ret;\n    } else if (dir->pos == 1) {\n        if (f) {\n            fprintf(f, \"CASE dir->pos==1: preparing to set info->type=LFS_TYPE_DIR and strcpy(info->name, \\\"..\\\")\\n\");\n            fprintf(f, \"INFO before copy: info=%p info->name=%p sizeof(info->name)=%zu intended_copy_bytes=%d\\n\",\n                    (void*)info, (void*)(info->name), sizeof(info->name), 3);\n        }\n\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n\n        if (f) {\n            fprintf(f, \"AFTER copy '..': info->name=%p (contents not inspected to avoid UB)\\n\",\n                    (void*)(info->name));\n        }\n\n        dir->pos += 1;\n        ret = true;\n        if (f) {\n            fprintf(f, \"RETURN (special '..') -> %d\\n\", ret);\n            fclose(f);\n        }\n        return ret;\n    }\n\n    while (true) {\n        if (f) {\n            fprintf(f, \"LOOP: dir->id=%d dir->m.count=%d dir->m.split=%d\\n\",\n                    (int)dir->id, (int)dir->m.count, (int)dir->m.split);\n        }\n\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                if (f) {\n                    fprintf(f, \"dir->id == dir->m.count and no split -> returning false\\n\");\n                    fclose(f);\n                }\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (f) {\n                fprintf(f, \"Called lfs_dir_fetch -> err=%d\\n\", err);\n            }\n            if (err) {\n                if (f) {\n                    fprintf(f, \"RETURN (lfs_dir_fetch error) -> %d\\n\", err);\n                    fclose(f);\n                }\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (f) {\n            fprintf(f, \"Called lfs_dir_getinfo(id=%d) -> err=%d\\n\", (int)dir->id, err);\n        }\n\n        if (err && err != LFS_ERR_NOENT) {\n            if (f) {\n                fprintf(f, \"RETURN (lfs_dir_getinfo error) -> %d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    ret = true;\n    if (f) {\n        fprintf(f, \"EXIT normal: dir->pos=%d dir->id=%d RETURN %d\\n\", (int)dir->pos, (int)dir->id, ret);\n        fclose(f);\n    }\n    return ret;\n}\n"
}