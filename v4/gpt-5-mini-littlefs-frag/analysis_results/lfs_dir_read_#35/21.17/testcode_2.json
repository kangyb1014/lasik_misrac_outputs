{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcpy(info->name, \".\") copies two bytes ('.' and '\\0') into info->name. The snippet does not show the definition or guaranteed size of info->name, so if info->name has length < 2 (e.g. 0 or 1), this will write beyond the bounds of the destination and violate Rule 21.17. Unless it is provable from the surrounding code that info->name is sized >= 2, this use is a potential out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read_:\n```c\nstatic int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    memset(info, 0, sizeof(*info));\n\n    // special offset for '.' and '..'\n    if (dir->pos == 0) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \".\");\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        info->type = LFS_TYPE_DIR;\n        strcpy(info->name, \"..\");\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return false;\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (err && err != LFS_ERR_NOENT) {\n            return err;\n        }\n\n        dir->id += 1;\n        if (err != LFS_ERR_NOENT) {\n            break;\n        }\n    }\n\n    dir->pos += 1;\n    return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read_ with it.\n  - Your function must have the exact same signature as lfs_dir_read_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read_ to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Open log file for this invocation. We use append so multiple calls\n       accumulate evidence. Keep errors non-fatal (do not change function logic)\n       by simply skipping logging if fopen fails. */\n    FILE *log = fopen(\"/tmp/logs/883.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_dir_read_: lfs=%p, dir=%p, info=%p, dir->pos=%d, dir->id=%d\\n\",\n                (void*)lfs, (void*)dir, (void*)info, (int)dir->pos, (int)dir->id);\n        fflush(log);\n    }\n\n    memset(info, 0, sizeof(*info));\n    if (log) {\n        fprintf(log, \"After memset(info,0): info=%p (zeroed)\\n\", (void*)info);\n        fflush(log);\n    }\n\n    /* special offset for '.' and '..' */\n    if (dir->pos == 0) {\n        if (log) {\n            fprintf(log, \"Case dir->pos==0: about to set info->type=LFS_TYPE_DIR and strcpy(info->name, \".\")\\n\");\n            fprintf(log, \"Info pointer: info=%p, info->name (address unknown to this scope)\\n\", (void*)info);\n            fflush(log);\n        }\n\n        info->type = LFS_TYPE_DIR;\n        /* Original behavior retained: this strcpy is the potential OOB point */\n        strcpy(info->name, \".\");\n\n        if (log) {\n            fprintf(log, \"Performed strcpy(info->name, \".\") and returning true; dir->pos was %d\\n\", (int)dir->pos);\n            fflush(log);\n            fclose(log);\n        }\n\n        dir->pos += 1;\n        return true;\n    } else if (dir->pos == 1) {\n        if (log) {\n            fprintf(log, \"Case dir->pos==1: about to set info->type=LFS_TYPE_DIR and strcpy(info->name, \"..\")\\n\");\n            fprintf(log, \"Info pointer: info=%p, info->name (address unknown to this scope)\\n\", (void*)info);\n            fflush(log);\n        }\n\n        info->type = LFS_TYPE_DIR;\n        /* Original behavior retained: this strcpy is the potential OOB point */\n        strcpy(info->name, \"..\");\n\n        if (log) {\n            fprintf(log, \"Performed strcpy(info->name, \"..\") and returning true; dir->pos was %d\\n\", (int)dir->pos);\n            fflush(log);\n            fclose(log);\n        }\n\n        dir->pos += 1;\n        return true;\n    }\n\n    while (true) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                if (log) {\n                    fprintf(log, \"dir->id == dir->m.count and not split: returning false\\n\");\n                    fflush(log);\n                    fclose(log);\n                }\n                return false;\n            }\n\n            if (log) {\n                fprintf(log, \"dir->id == dir->m.count and split: calling lfs_dir_fetch(lfs, &dir->m, dir->m.tail)\\n\");\n                fflush(log);\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (log) {\n                fprintf(log, \"lfs_dir_fetch returned %d\\n\", err);\n                fflush(log);\n            }\n            if (err) {\n                if (log) {\n                    fprintf(log, \"lfs_dir_fetch error: returning err=%d\\n\", err);\n                    fflush(log);\n                    fclose(log);\n                }\n                return err;\n            }\n\n            dir->id = 0;\n            if (log) {\n                fprintf(log, \"After fetch: dir->id reset to 0\\n\");\n                fflush(log);\n            }\n        }\n\n        if (log) {\n            fprintf(log, \"Calling lfs_dir_getinfo(lfs, &dir->m, dir->id=%d, info=%p)\\n\", (int)dir->id, (void*)info);\n            fflush(log);\n        }\n\n        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n        if (log) {\n            fprintf(log, \"lfs_dir_getinfo returned %d for dir->id=%d\\n\", err, (int)dir->id);\n            fflush(log);\n        }\n        if (err && err != LFS_ERR_NOENT) {\n            if (log) {\n                fprintf(log, \"lfs_dir_getinfo fatal error: returning err=%d\\n\", err);\n                fflush(log);\n                fclose(log);\n            }\n            return err;\n        }\n\n        dir->id += 1;\n        if (log) {\n            fprintf(log, \"Incremented dir->id to %d\\n\", (int)dir->id);\n            fflush(log);\n        }\n        if (err != LFS_ERR_NOENT) {\n            if (log) {\n                fprintf(log, \"Found valid entry (err=%d). Breaking loop.\\n\", err);\n                fflush(log);\n                fclose(log);\n            }\n            break;\n        }\n    }\n\n    dir->pos += 1;\n\n    /* Final state log before returning true */\n    log = fopen(\"/tmp/logs/883.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"EXIT lfs_dir_read_: returning true; final dir->pos=%d, dir->id=%d, info=%p\\n\",\n                (int)dir->pos, (int)dir->id, (void*)info);\n        fflush(log);\n        fclose(log);\n    }\n\n    return true;\n}\n"
}