{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(name, \".\", 1) (and similar calls memcmp(name, \"..\", 2) and memcmp(suffix, \".\", 1)/memcmp(suffix, \"..\", 2)) to test for the string \".\"/\"..\". These use memcmp to compare against null-terminated string literals, which violates MISRA C 2023 Rule 21.14 (memcmp shall not be used to compare null terminated strings).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/754.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_getattr code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_getattr with it.\n  - Your function must have the exact same signature as lfs_getattr.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_getattr to check logs.\n  - Your function MUST preserve the original logic of lfs_getattr as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_getattr will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_getattr as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Probe log: append control-flow and key state to /tmp/logs/754.txt */\n    FILE *probe = fopen(\"/tmp/logs/754.txt\", \"a\");\n    if (probe) {\n        /* Basic entry information. Use safe fallbacks for possible NULL path. */\n        fprintf(probe, \"ENTER lfs_getattr: lfs=%p, path=%s, type=%u, buffer=%p, size=%lu\\n\",\n                (void*)lfs, (path != NULL) ? path : \"(null)\", (unsigned)type,\n                buffer, (unsigned long)size);\n        if (path) {\n            /* Log first few characters and length hints to help reproduce comparisons like \".\"/\"..\" */\n            char c0 = (path[0] != '\\0') ? path[0] : '\\0';\n            char c1 = (path[1] != '\\0') ? path[1] : '\\0';\n            char c2 = (path[2] != '\\0') ? path[2] : '\\0';\n            fprintf(probe, \"  path prefix: [%c][%c][%c] (as escaped if NUL show <NUL>)\\n\",\n                    (c0 != '\\0') ? c0 : '<', (c1 != '\\0') ? c1 : '<', (c2 != '\\0') ? c2 : '<');\n            /* Detect exact \".\" or \"..\" cases here for visibility (without changing logic). */\n            if (path[0] == '.' && path[1] == '\\0') {\n                fprintf(probe, \"  NOTE: path matches literal \".\"\\n\");\n            } else if (path[0] == '.' && path[1] == '.' && path[2] == '\\0') {\n                fprintf(probe, \"  NOTE: path matches literal \"..\"\\n\");\n            } else {\n                fprintf(probe, \"  NOTE: path does not match \".\" or \"..\"\\n\");\n            }\n        }\n        fprintf(probe, \"  About to take lock (LFS_LOCK) on lfs->cfg\\n\");\n        fclose(probe);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-return due to lock error */\n        probe = fopen(\"/tmp/logs/754.txt\", \"a\");\n        if (probe) {\n            fprintf(probe, \"EXIT lfs_getattr early: LFS_LOCK returned err=%d\\n\", err);\n            fclose(probe);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Log just prior to calling the underlying implementation */\n    probe = fopen(\"/tmp/logs/754.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"CALL lfs_getattr_: lfs=%p, path=%s\\n\",\n                (void*)lfs, (path != NULL) ? path : \"(null)\");\n        fclose(probe);\n    }\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* Log result and post-call path/state to help reproduce the scenario */\n    probe = fopen(\"/tmp/logs/754.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"RETURN from lfs_getattr_: res=%\" PRId32 \"\\n\", res);\n        if (path) {\n            if (path[0] == '.' && path[1] == '\\0') {\n                fprintf(probe, \"  Observed path was '.' (single dot)\\n\");\n            } else if (path[0] == '.' && path[1] == '.' && path[2] == '\\0') {\n                fprintf(probe, \"  Observed path was '..' (double dot)\\n\");\n            } else {\n                fprintf(probe, \"  Observed path was neither '.' nor '..'\\n\");\n            }\n        }\n        fclose(probe);\n    }\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}