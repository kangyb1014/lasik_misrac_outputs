{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal &(lfs_off_t){0} for the out parameter off. lfs_ctz_find writes to *off (e.g. \"*off = 0\" when size==0 and later \"*off = pos\"), but that write only updates the temporary compound literal whose value is never used by the caller. Those store operations are executed but have no observable effect on program behaviour at this callsite, so they constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/968.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_truncate_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_truncate_ with it.\n  - Your function must have the exact same signature as lfs_file_truncate_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_truncate_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_truncate_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    FILE *fp = fopen(\"/tmp/logs/968.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"ENTER lfs_file_truncate_: lfs=%p file=%p size=%lld\\n\",\n                (void*)lfs, (void*)file, (long long)size);\n    }\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        if (fp) {\n            fprintf(fp, \"RET lfs_file_truncate_: size > LFS_FILE_MAX (%lld > %lld) -> %d\\n\",\n                    (long long)size, (long long)LFS_FILE_MAX, (int)LFS_ERR_INVAL);\n            fclose(fp);\n        }\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (fp) {\n        fprintf(fp, \"STATE before truncate: pos=%lld oldsize=%lld file->ctz.head=%p file->ctz.size=%lld file->block=%p flags=0x%08x\\n\",\n                (long long)pos, (long long)oldsize, (void*)(intptr_t)file->ctz.head, (long long)file->ctz.size,\n                (void*)(intptr_t)file->block, (unsigned)file->flags);\n    }\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            if (fp) fprintf(fp, \"BRANCH: size <= inline_max (%lld <= %lld) -> revert to inline\\n\",\n                             (long long)size, (long long)lfs->inline_max);\n\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                if (fp) {\n                    fprintf(fp, \"ERR seek to head returned %lld\\n\", (long long)res);\n                    fclose(fp);\n                }\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                if (fp) {\n                    fprintf(fp, \"ERR flushedread returned %lld\\n\", (long long)res);\n                    fclose(fp);\n                }\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            if (fp) {\n                fprintf(fp, \"INFO reverted to inline: new ctz.head=%p ctz.size=%lld flags=0x%08x\\n\",\n                        (void*)(intptr_t)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n                fclose(fp);\n            }\n\n        } else {\n            if (fp) fprintf(fp, \"BRANCH: size < oldsize and > inline_max -> need to flush and find new head\\n\");\n\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                if (fp) {\n                    fprintf(fp, \"ERR flush returned %d\\n\", err);\n                    fclose(fp);\n                }\n                return err;\n            }\n\n            if (fp) fprintf(fp, \"CALL lfs_ctz_find with compound-literal out param &(lfs_off_t){0}\\n\");\n\n            /*\n             * Intentionally use an explicitly named pointer to a block-scope\n             * compound literal so we can log its address and value before\n             * and after the call while preserving the original behavior of\n             * passing a compound literal whose storage duration ends at\n             * the end of this block. This reproduces the scenario where\n             * lfs_ctz_find writes to a temporary whose value is never\n             * observed by the caller.\n             */\n            lfs_off_t *temp_off = &(lfs_off_t){0};\n            if (fp) {\n                fprintf(fp, \"BEFORE lfs_ctz_find: temp_off=%p *temp_off=%lld file->block=%p file->ctz.head=%p file->ctz.size=%lld\\n\",\n                        (void*)temp_off, (long long)*temp_off,\n                        (void*)(intptr_t)file->block, (void*)(intptr_t)file->ctz.head, (long long)file->ctz.size);\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, temp_off);\n            if (err) {\n                if (fp) {\n                    fprintf(fp, \"ERR lfs_ctz_find returned %d temp_off(after)=%lld file->block=%p\\n\",\n                            err, (long long)*temp_off, (void*)(intptr_t)file->block);\n                    fclose(fp);\n                }\n                return err;\n            }\n\n            if (fp) {\n                fprintf(fp, \"AFTER lfs_ctz_find: temp_off=%p *temp_off=%lld file->block=%p\\n\",\n                        (void*)temp_off, (long long)*temp_off, (void*)(intptr_t)file->block);\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            if (fp) {\n                fprintf(fp, \"UPDATED after find: pos=%lld ctz.head=%p ctz.size=%lld flags=0x%08x\\n\",\n                        (long long)file->pos, (void*)(intptr_t)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n                fclose(fp);\n            }\n        }\n    } else if (size > oldsize) {\n        if (fp) fprintf(fp, \"BRANCH: size > oldsize -> extend and fill with zeros\\n\");\n\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            if (fp) {\n                fprintf(fp, \"ERR seek to end returned %lld\\n\", (long long)res);\n                fclose(fp);\n            }\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                if (fp) {\n                    fprintf(fp, \"ERR write zero returned %lld at pos=%lld target size=%lld\\n\",\n                            (long long)res, (long long)file->pos, (long long)size);\n                    fclose(fp);\n                }\n                return (int)res;\n            }\n            if (fp) {\n                fprintf(fp, \"WROTE zero: new pos=%lld (target %lld)\\n\", (long long)file->pos, (long long)size);\n            }\n        }\n        if (fp) fclose(fp);\n    } else {\n        if (fp) {\n            fprintf(fp, \"BRANCH: size == oldsize -> no-op\\n\");\n            fclose(fp);\n        }\n    }\n\n    // restore pos\n    if ((fp = fopen(\"/tmp/logs/968.txt\", \"a\"))) {\n        fprintf(fp, \"RESTORE pos -> seeking back to original pos=%lld\\n\", (long long)pos);\n        fclose(fp);\n    }\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n        if ((fp = fopen(\"/tmp/logs/968.txt\", \"a\"))) {\n            fprintf(fp, \"ERR seek restore returned %lld\\n\", (long long)res);\n            fclose(fp);\n        }\n        return (int)res;\n    }\n\n    if ((fp = fopen(\"/tmp/logs/968.txt\", \"a\"))) {\n        fprintf(fp, \"EXIT lfs_file_truncate_: success (0) final pos=%lld ctz.head=%p ctz.size=%lld file->block=%p flags=0x%08x\\n\",\n                (long long)file->pos, (void*)(intptr_t)file->ctz.head, (long long)file->ctz.size,\n                (void*)(intptr_t)file->block, (unsigned)file->flags);\n        fclose(fp);\n    }\n\n    return 0;\n}"
}