{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a compound literal: lfs_ctz_index(lfs, &(lfs_off_t){file->pos}). The second parameter is a pointer to lfs_off_t (non-const). Since lfs_ctz_index appears to only read the value (it is used to compute an index) the parameter should be declared as const lfs_off_t *; having a non-const pointer parameter when no modification is required violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/965.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_truncate_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_truncate_ with it.\n  - Your function must have the exact same signature as lfs_file_truncate_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_truncate_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_truncate_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Minimal logging helper macro style (no new macros allowed globally) */\n    {\n        FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER lfs_file_truncate_: lfs=%p file=%p size=%lld\\n\",\n                    (void*)lfs, (void*)file, (long long)size);\n            fclose(log);\n        }\n    }\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_truncate_: size > LFS_FILE_MAX (%lld > %lld) -> LFS_ERR_INVAL\\n\",\n                    (long long)size, (long long)LFS_FILE_MAX);\n            fclose(log);\n        }\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"AFTER size check: pos=%lld oldsize=%lld size=%lld file->ctz.head=%lld file->ctz.size=%lld\\n\",\n                    (long long)pos, (long long)oldsize, (long long)size,\n                    (long long)file->ctz.head, (long long)file->ctz.size);\n            fclose(log);\n        }\n    }\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"BRANCH: shrink and inline (size <= inline_max). Seek to head res=%lld\\n\",\n                            (long long)res);\n                    fclose(log);\n                }\n            }\n            if (res < 0) {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"EXIT lfs_file_truncate_: seek to head failed res=%lld -> return\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"flushedread res=%lld (read size=%lld)\\n\", (long long)res, (long long)size);\n                    fclose(log);\n                }\n            }\n            if (res < 0) {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"EXIT lfs_file_truncate_: flushedread failed res=%lld -> return\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"AFTER inline revert: new head=%lld new size=%lld flags=0x%08x\\n\",\n                            (long long)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n                    fclose(log);\n                }\n            }\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"BRANCH: shrink but not inline. flush err=%d\\n\", err);\n                    fclose(log);\n                }\n            }\n            if (err) {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"EXIT lfs_file_truncate_: flush failed err=%d -> return\\n\", err);\n                    fclose(log);\n                }\n                return err;\n            }\n\n            /*\n             * NOTE: The original code passes the address of a compound literal\n             * here: &(lfs_off_t){0}. This is the expression reported as part\n             * of the MISRA Rule 8.13 violation (non-const pointer to temporary\n             * / compound literal). We preserve the original behavior, but log\n             * the fact that we are about to pass a compound literal pointer\n             * to lfs_ctz_find along with the relevant values so the scenario\n             * can be reproduced and inspected.\n             */\n            {\n                lfs_off_t tmp_val = 0;\n                lfs_off_t *compound_ptr = &(lfs_off_t){0};\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"Calling lfs_ctz_find: ctz.head=%lld ctz.size=%lld target_index=%lld (size-1) pass_compound_literal_ptr=%p compound_value=%lld\\n\",\n                            (long long)file->ctz.head, (long long)file->ctz.size, (long long)(size-1),\n                            (void*)compound_ptr, (long long)*compound_ptr);\n                    fprintf(log, \"(Also showing tmp_val for comparison=%lld)\\n\", (long long)tmp_val);\n                    fclose(log);\n                }\n            }\n\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &(lfs_off_t){0});\n            if (err) {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"EXIT lfs_file_truncate_: lfs_ctz_find failed err=%d -> return\\n\", err);\n                    fclose(log);\n                }\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"AFTER ctz_find: block=%lld pos=%lld ctz.head=%lld ctz.size=%lld flags=0x%08x\\n\",\n                            (long long)file->block, (long long)file->pos,\n                            (long long)file->ctz.head, (long long)file->ctz.size, (unsigned)file->flags);\n                    fclose(log);\n                }\n            }\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        {\n            FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"BRANCH: grow file. seek to end res=%lld\\n\", (long long)res);\n                fclose(log);\n            }\n        }\n        if (res < 0) {\n            FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"EXIT lfs_file_truncate_: seek to end failed res=%lld -> return\\n\", (long long)res);\n                fclose(log);\n            }\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"writing zero at pos=%lld (target size=%lld) write_res=%lld\\n\",\n                            (long long)file->pos, (long long)size, (long long)res);\n                    fclose(log);\n                }\n            }\n            if (res < 0) {\n                FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n                if (log) {\n                    fprintf(log, \"EXIT lfs_file_truncate_: write failed res=%lld -> return\\n\", (long long)res);\n                    fclose(log);\n                }\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n      if (log) {\n          fprintf(log, \"EXIT lfs_file_truncate_: restore seek failed res=%lld -> return\\n\", (long long)res);\n          fclose(log);\n      }\n      return (int)res;\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_truncate_: success. restored pos=%lld\\n\", (long long)pos);\n            fclose(log);\n        }\n    }\n\n    return 0;\n}\n"
}