{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_ctz_index(lfs, &pos) passes the address of the local scalar 'pos' (type lfs_size_t) as a non-const pointer argument. If lfs_ctz_index merely reads the value (which is implied by its use to compute an index), its parameter should be declared to point to a const-qualified lfs_off_t (e.g. const lfs_off_t *), so the pointer would point to a const-qualified type. As written, the pointer points to a non-const object though const would be possible \u2014 this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/965.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_truncate_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_truncate_ with it.\n  - Your function must have the exact same signature as lfs_file_truncate_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_truncate_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_truncate_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Logging probe: append logs to /tmp/logs/965.txt */\n    FILE *log = fopen(\"/tmp/logs/965.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_file_truncate_: lfs=%p file=%p requested_size=%lld\\n\",\n                (void *)lfs, (void *)file, (long long)size);\n        fflush(log);\n    }\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        if (log) {\n            fprintf(log, \"EXIT lfs_file_truncate_: invalid size %lld > LFS_FILE_MAX\\n\",\n                    (long long)size);\n            fflush(log);\n        }\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    if (log) {\n        fprintf(log, \"saved pos=%lld (addr=%p) file->pos=%lld (addr=%p)\\n\",\n                (long long)pos, (void *)&pos,\n                (long long)file->pos, (void *)&file->pos);\n        fflush(log);\n    }\n\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (log) {\n        fprintf(log, \"oldsize=%lld\\n\", (long long)oldsize);\n        fflush(log);\n    }\n\n    if (size < oldsize) {\n        if (log) {\n            fprintf(log, \"branch: shrink (size %lld < oldsize %lld)\\n\",\n                    (long long)size, (long long)oldsize);\n            fflush(log);\n        }\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            if (log) {\n                fprintf(log, \"sub-branch: revert to inline (size <= inline_max %u)\\n\",\n                        (unsigned)lfs->inline_max);\n                fflush(log);\n            }\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"error: lfs_file_seek_ to head failed res=%lld\\n\",\n                            (long long)res);\n                    fflush(log);\n                }\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"error: lfs_file_flushedread failed res=%lld\\n\",\n                            (long long)res);\n                    fflush(log);\n                }\n                return (int)res;\n            }\n\n            if (log) {\n                fprintf(log, \"making inline: new head=INLINE size=%lld\\n\",\n                        (long long)size);\n                fflush(log);\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            if (log) {\n                fprintf(log, \"sub-branch: shrink but not inline (size %lld > inline_max %u)\\n\",\n                        (long long)size, (unsigned)lfs->inline_max);\n                fflush(log);\n            }\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                if (log) {\n                    fprintf(log, \"error: lfs_file_flush returned %d\\n\", err);\n                    fflush(log);\n                }\n                return err;\n            }\n\n            /*\n             * lookup new head in ctz skip list\n             * Note: original code passed a compound literal &(lfs_off_t){0}.\n             * To allow logging the pointer used while preserving semantics,\n             * we use a temporary lfs_off_t tmp_zero on the stack.\n             */\n            lfs_off_t tmp_zero = 0;\n            if (log) {\n                fprintf(log, \"calling lfs_ctz_find: cache=%p ctz.head=%llu ctz.size=%llu target_index=%lld block_out_addr=%p off_out_addr=%p\\n\",\n                        (void *)&file->cache,\n                        (unsigned long long)file->ctz.head,\n                        (unsigned long long)file->ctz.size,\n                        (long long)(size - 1),\n                        (void *)&file->block,\n                        (void *)&tmp_zero);\n                fflush(log);\n            }\n\n            int err2 = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &tmp_zero);\n            if (err2) {\n                if (log) {\n                    fprintf(log, \"error: lfs_ctz_find returned %d\\n\", err2);\n                    fflush(log);\n                }\n                return err2;\n            }\n\n            if (log) {\n                fprintf(log, \"lfs_ctz_find success: new block=%llu tmp_zero=%lld\\n\",\n                        (unsigned long long)file->block, (long long)tmp_zero);\n                fflush(log);\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        if (log) {\n            fprintf(log, \"branch: grow (size %lld > oldsize %lld)\\n\",\n                    (long long)size, (long long)oldsize);\n            fflush(log);\n        }\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            if (log) {\n                fprintf(log, \"error: lfs_file_seek_ to END failed res=%lld\\n\",\n                        (long long)res);\n                fflush(log);\n            }\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                if (log) {\n                    fprintf(log, \"error: lfs_file_write_ failed res=%lld\\n\",\n                            (long long)res);\n                    fflush(log);\n                }\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n        if (log) {\n            fprintf(log, \"error: final lfs_file_seek_ to pos %lld failed res=%lld\\n\",\n                    (long long)pos, (long long)res);\n            fflush(log);\n        }\n        return (int)res;\n    }\n\n    if (log) {\n        fprintf(log, \"EXIT lfs_file_truncate_: success restored pos=%lld\\n\",\n                (long long)pos);\n        fflush(log);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}