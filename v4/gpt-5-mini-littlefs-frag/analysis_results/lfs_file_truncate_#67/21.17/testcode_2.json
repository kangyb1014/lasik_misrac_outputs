{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPossible buffer overflow when size (<= lfs->inline_max) is larger than the actual capacity of lfs->rcache.buffer (or file->cache.buffer). The call lfs_file_flushedread(lfs, file, lfs->rcache.buffer, size) will make the read routine write size bytes into rcache.buffer; immediately afterwards memcpy(file->cache.buffer, lfs->rcache.buffer, size) copies the same size. If the allocated buffers pointed to by lfs->rcache.buffer or file->cache.buffer are smaller than size (for example if cfg->cache_size < lfs->inline_max or buffers were not allocated to at least inline_max), this results in accesses beyond the bounds of those objects and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate_:\n```c\nstatic int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            if (res < 0) {\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n        } else {\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            if (err) {\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            if (err) {\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n        }\n    } else if (size > oldsize) {\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        if (res < 0) {\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            if (res < 0) {\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    if (res < 0) {\n      return (int)res;\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_truncate_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_truncate_ with it.\n  - Your function must have the exact same signature as lfs_file_truncate_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_truncate_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_truncate_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_truncate_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    /* Logging helper: append an entry to /tmp/logs/963.txt. We open/close\n       around each log call to minimize interactions with the rest of the\n       system and ensure logs are flushed even on early returns. */\n    auto void log_msg(const char *fmt, ...) {\n        FILE *fp = fopen(\"/tmp/logs/963.txt\", \"a\");\n        if (!fp) { return; }\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(fp, fmt, ap);\n        va_end(ap);\n        fprintf(fp, \"\\n\");\n        fclose(fp);\n    }\n\n    /* Entry log */\n    log_msg(\"ENTER lfs_file_truncate_: lfs=%p, file=%p, size=%lld\", (void*)lfs, (void*)file, (long long)size);\n\n    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n\n    if (size > LFS_FILE_MAX) {\n        log_msg(\"EXIT lfs_file_truncate_: size > LFS_FILE_MAX (size=%lld, LFS_FILE_MAX=%lld)\", (long long)size, (long long)LFS_FILE_MAX);\n        return LFS_ERR_INVAL;\n    }\n\n    lfs_off_t pos = file->pos;\n    lfs_off_t oldsize = lfs_file_size_(lfs, file);\n\n    log_msg(\"state before truncate: pos=%lld, oldsize=%lld, requested size=%lld, inline_max=%lld, cfg_cache_size=%lld, file_cache.buffer=%p, rcache.buffer=%p\", \n            (long long)pos, (long long)oldsize, (long long)size, (long long)lfs->inline_max, (long long)lfs->cfg->cache_size, \n            (void*)(file->cache.buffer), (void*)(lfs->rcache.buffer));\n\n    if (size < oldsize) {\n        // revert to inline file?\n        if (size <= lfs->inline_max) {\n            log_msg(\"branch: shrink to inline (size=%lld <= inline_max=%lld)\", (long long)size, (long long)lfs->inline_max);\n\n            // flush+seek to head\n            lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n            log_msg(\"after seek to head: res=%lld\", (long long)res);\n            if (res < 0) {\n                log_msg(\"EXIT lfs_file_truncate_: seek error res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            // read our data into rcache temporarily\n            lfs_cache_drop(lfs, &lfs->rcache);\n            log_msg(\"rcache dropped. about to call lfs_file_flushedread with size=%lld, rcache.buffer=%p\", (long long)size, (void*)lfs->rcache.buffer);\n            res = lfs_file_flushedread(lfs, file,\n                    lfs->rcache.buffer, size);\n            log_msg(\"lfs_file_flushedread returned res=%lld\", (long long)res);\n            if (res < 0) {\n                log_msg(\"EXIT lfs_file_truncate_: flushedread error res=%lld\", (long long)res);\n                return (int)res;\n            }\n\n            file->ctz.head = LFS_BLOCK_INLINE;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING | LFS_F_INLINE;\n            file->cache.block = file->ctz.head;\n            file->cache.off = 0;\n            file->cache.size = lfs->cfg->cache_size;\n\n            log_msg(\"about to memcpy into file->cache.buffer=%p from rcache.buffer=%p with size=%lld; file->cache.size=%lld\", \n                    (void*)file->cache.buffer, (void*)lfs->rcache.buffer, (long long)size, (long long)file->cache.size);\n\n            memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n\n            log_msg(\"after memcpy: copied %lld bytes into file->cache.buffer=%p\", (long long)size, (void*)file->cache.buffer);\n\n        } else {\n            log_msg(\"branch: shrink but not to inline (size=%lld > inline_max=%lld)\", (long long)size, (long long)lfs->inline_max);\n            // need to flush since directly changing metadata\n            int err = lfs_file_flush(lfs, file);\n            log_msg(\"lfs_file_flush returned err=%d\", err);\n            if (err) {\n                log_msg(\"EXIT lfs_file_truncate_: flush error err=%d\", err);\n                return err;\n            }\n\n            // lookup new head in ctz skip list\n            err = lfs_ctz_find(lfs, NULL, &file->cache,\n                    file->ctz.head, file->ctz.size,\n                    size-1, &file->block, &(lfs_off_t){0});\n            log_msg(\"lfs_ctz_find returned err=%d, new block=%p (file->block)\", err, (void*)file->block);\n            if (err) {\n                log_msg(\"EXIT lfs_file_truncate_: ctz_find error err=%d\", err);\n                return err;\n            }\n\n            // need to set pos/block/off consistently so seeking back to\n            // the old position does not get confused\n            file->pos = size;\n            file->ctz.head = file->block;\n            file->ctz.size = size;\n            file->flags |= LFS_F_DIRTY | LFS_F_READING;\n            log_msg(\"metadata updated for non-inline shrink: pos=%lld, ctz.head=%p, ctz.size=%lld\", (long long)file->pos, (void*)file->ctz.head, (long long)file->ctz.size);\n        }\n    } else if (size > oldsize) {\n        log_msg(\"branch: extend file (size=%lld > oldsize=%lld)\", (long long)size, (long long)oldsize);\n        // flush+seek if not already at end\n        lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n        log_msg(\"seek to end returned res=%lld\", (long long)res);\n        if (res < 0) {\n            log_msg(\"EXIT lfs_file_truncate_: seek end error res=%lld\", (long long)res);\n            return (int)res;\n        }\n\n        // fill with zeros\n        while (file->pos < size) {\n            res = lfs_file_write_(lfs, file, &(uint8_t){0}, 1);\n            log_msg(\"lfs_file_write_ wrote 1 byte at pos=%lld (res=%lld)\", (long long)file->pos, (long long)res);\n            if (res < 0) {\n                log_msg(\"EXIT lfs_file_truncate_: write error res=%lld\", (long long)res);\n                return (int)res;\n            }\n        }\n    }\n\n    // restore pos\n    lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n    log_msg(\"restoring pos: seek returned res=%lld, restoring to pos=%lld\", (long long)res, (long long)pos);\n    if (res < 0) {\n      log_msg(\"EXIT lfs_file_truncate_: final seek error res=%lld\", (long long)res);\n      return (int)res;\n    }\n\n    log_msg(\"EXIT lfs_file_truncate_: success\");\n    return 0;\n}\n"
}