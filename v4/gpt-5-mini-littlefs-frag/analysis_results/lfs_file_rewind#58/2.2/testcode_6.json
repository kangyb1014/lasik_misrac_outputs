{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_file_rewind -> %d\", err); expands to an empty/null statement (a no-op). That operation is executed but its removal would not affect program behaviour, i.e. it is dead code (the trace call is compiled out), which violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/728.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_rewind code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_rewind with it.\n  - Your function must have the exact same signature as lfs_file_rewind.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_rewind to check logs.\n  - Your function MUST preserve the original logic of lfs_file_rewind as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_rewind will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Attempt to record failure to the requested log file. If the directory doesn't\n         * exist, attempt to create it and retry. Fall back to /tmp/728.txt or stderr\n         * so that some evidence is always produced. */\n        FILE *f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        if (!f) {\n            /* Try to create the directory if possible. Declare mkdir here to avoid\n             * relying on headers being present in the translation unit. */\n            extern int mkdir(const char *, unsigned int);\n            (void)mkdir(\"/tmp/logs\", 0777u);\n            f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        }\n        if (!f) {\n            f = fopen(\"/tmp/728.txt\", \"a\");\n        }\n        if (f) {\n            fprintf(f, \"lfs_file_rewind ENTRY: lock failed -> %d; lfs=%p file=%p\\n\",\n                    err, (void *)lfs, (void *)file);\n            fclose(f);\n        } else {\n            /* Last-resort: print to stderr so test harness can still capture output. */\n            fprintf(stderr, \"lfs_file_rewind ENTRY: lock failed -> %d; lfs=%p file=%p\\n\",\n                    err, (void *)lfs, (void *)file);\n        }\n        return err;\n    }\n\n    /* Log entry (guarantee at least one record is produced). */\n    {\n        FILE *f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        if (!f) {\n            extern int mkdir(const char *, unsigned int);\n            (void)mkdir(\"/tmp/logs\", 0777u);\n            f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        }\n        if (!f) {\n            f = fopen(\"/tmp/728.txt\", \"a\");\n        }\n        if (f) {\n            fprintf(f, \"lfs_file_rewind ENTER: lfs=%p file=%p\\n\", (void *)lfs, (void *)file);\n            fclose(f);\n        } else {\n            fprintf(stderr, \"lfs_file_rewind ENTER: lfs=%p file=%p\\n\", (void *)lfs, (void *)file);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* Log exit/result */\n    {\n        FILE *f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        if (!f) {\n            extern int mkdir(const char *, unsigned int);\n            (void)mkdir(\"/tmp/logs\", 0777u);\n            f = fopen(\"/tmp/logs/728.txt\", \"a\");\n        }\n        if (!f) {\n            f = fopen(\"/tmp/728.txt\", \"a\");\n        }\n        if (f) {\n            fprintf(f, \"lfs_file_rewind EXIT: err=%d lfs=%p file=%p\\n\",\n                    err, (void *)lfs, (void *)file);\n            fclose(f);\n        } else {\n            fprintf(stderr, \"lfs_file_rewind EXIT: err=%d lfs=%p file=%p\\n\",\n                    err, (void *)lfs, (void *)file);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}