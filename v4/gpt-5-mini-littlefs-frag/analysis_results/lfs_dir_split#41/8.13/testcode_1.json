{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'source' is declared as lfs_mdir_t *source but is not modified inside lfs_dir_split: it is only passed to lfs_dir_compact. If lfs_dir_compact does not modify the pointed-to lfs_mdir_t, then 'source' could and should be declared as const lfs_mdir_t *source. In that case Rule 8.13 is violated because a pointer that could point to a const-qualified type is not const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_split code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_split:\n```c\nstatic int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    // note we don't care about LFS_OK_RELOCATED\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n    if (res < 0) {\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    // update root if needed\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_split code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_split with it.\n  - Your function must have the exact same signature as lfs_dir_split.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_split to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_split as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_split will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_split as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_split(lfs_t *lfs,\n        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,\n        lfs_mdir_t *source, uint16_t split, uint16_t end) {\n    /* Logging probe: append control flow and key state to /tmp/logs/1055.txt */\n    FILE *___log_f = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (___log_f) {\n        fprintf(___log_f, \"ENTER lfs_dir_split: lfs=%p dir=%p source=%p split=%u end=%u attrcount=%d\\n\",\n            (void*)lfs, (void*)dir, (void*)source, (unsigned)split, (unsigned)end, attrcount);\n        if (dir) {\n            /* print some dir state we will read/modify */\n            fprintf(___log_f, \"  dir before: split=%d tail[0]=%llu tail[1]=%llu pair[0]=%llu pair[1]=%llu\\n\",\n                (int)dir->split,\n                (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1],\n                (unsigned long long)dir->pair[0], (unsigned long long)dir->pair[1]);\n        }\n        if (source) {\n            /* source is only passed to lfs_dir_compact in original code; log its observable fields if present */\n            fprintf(___log_f, \"  source before: split=%d tail[0]=%llu tail[1]=%llu pair[0]=%llu pair[1]=%llu\\n\",\n                (int)source->split,\n                (unsigned long long)source->tail[0], (unsigned long long)source->tail[1],\n                (unsigned long long)source->pair[0], (unsigned long long)source->pair[1]);\n        } else {\n            fprintf(___log_f, \"  source before: <NULL>\\n\");\n        }\n        fclose(___log_f);\n    }\n\n    // create tail metadata pair\n    lfs_mdir_t tail;\n    int err = lfs_dir_alloc(lfs, &tail);\n    if (err) {\n        FILE *___log_f2 = fopen(\"/tmp/logs/1055.txt\", \"a\");\n        if (___log_f2) {\n            fprintf(___log_f2, \"lfs_dir_alloc failed: err=%d\\n\", err);\n            fclose(___log_f2);\n        }\n        return err;\n    }\n\n    tail.split = dir->split;\n    tail.tail[0] = dir->tail[0];\n    tail.tail[1] = dir->tail[1];\n\n    /* note we don't care about LFS_OK_RELOCATED */\n    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n\n    /* Log result of compaction and relevant state to help reproduce whether 'source' was modified */\n    FILE *___log_f3 = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (___log_f3) {\n        fprintf(___log_f3, \"lfs_dir_compact returned: res=%d\\n\", res);\n        fprintf(___log_f3, \"  tail after compact: split=%d tail[0]=%llu tail[1]=%llu pair[0]=%llu pair[1]=%llu\\n\",\n            (int)tail.split,\n            (unsigned long long)tail.tail[0], (unsigned long long)tail.tail[1],\n            (unsigned long long)tail.pair[0], (unsigned long long)tail.pair[1]);\n        if (source) {\n            fprintf(___log_f3, \"  source after: split=%d tail[0]=%llu tail[1]=%llu pair[0]=%llu pair[1]=%llu\\n\",\n                (int)source->split,\n                (unsigned long long)source->tail[0], (unsigned long long)source->tail[1],\n                (unsigned long long)source->pair[0], (unsigned long long)source->pair[1]);\n        } else {\n            fprintf(___log_f3, \"  source after: <NULL>\\n\");\n        }\n        fclose(___log_f3);\n    }\n\n    if (res < 0) {\n        return res;\n    }\n\n    dir->tail[0] = tail.pair[0];\n    dir->tail[1] = tail.pair[1];\n    dir->split = true;\n\n    /* update root if needed */\n    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {\n        lfs->root[0] = tail.pair[0];\n        lfs->root[1] = tail.pair[1];\n\n        FILE *___log_f4 = fopen(\"/tmp/logs/1055.txt\", \"a\");\n        if (___log_f4) {\n            fprintf(___log_f4, \"root updated: root[0]=%llu root[1]=%llu\\n\",\n                (unsigned long long)lfs->root[0], (unsigned long long)lfs->root[1]);\n            fclose(___log_f4);\n        }\n    }\n\n    FILE *___log_f5 = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (___log_f5) {\n        fprintf(___log_f5, \"EXIT lfs_dir_split: returning 0, dir->split=%d dir->tail[0]=%llu dir->tail[1]=%llu\\n\",\n            (int)dir->split,\n            (unsigned long long)dir->tail[0], (unsigned long long)dir->tail[1]);\n        fclose(___log_f5);\n    }\n\n    return 0;\n}"
}