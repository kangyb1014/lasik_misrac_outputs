{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: lfs_getattr_ passes the address of its parameter 'path' to lfs_dir_find (lfs_dir_find(lfs, &cwd, &path, NULL)). Inside lfs_dir_find the code assigns to *path (e.g. '*path = name;'), which modifies the value of the parameter 'path' in lfs_getattr_. This modifies the pointer parameter itself and therefore violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/692.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_getattr_:\n```c\nstatic lfs_ssize_t lfs_getattr_(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    tag = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_USERATTR + type,\n                id, lfs_min(size, lfs->attr_max)),\n            buffer);\n    if (tag < 0) {\n        if (tag == LFS_ERR_NOENT) {\n            return LFS_ERR_NOATTR;\n        }\n\n        return tag;\n    }\n\n    return lfs_tag_size(tag);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_getattr_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_getattr_ with it.\n  - Your function must have the exact same signature as lfs_getattr_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_getattr_ to check logs.\n  - Your function MUST preserve the original logic of lfs_getattr_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_getattr_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_getattr_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static lfs_ssize_t lfs_getattr_(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    /* Logging probes to capture control flow and state for Rule 17.8 investigation */\n    FILE *log = fopen(\"/tmp/logs/692.txt\", \"a\");\n    if (log) {\n        /* Log entry and initial state of pointer parameter */\n        fprintf(log, \"ENTER lfs_getattr_: lfs=%p, path_ptr_addr=%p, path_value=%p\\n\",\n                (void*)lfs, (void*)&path, (const void*)path);\n        if (path) {\n            /* print a prefix of the path to avoid very long logs */\n            size_t _len = 0;\n            while (_len < 128 && path[_len] != '\\0') { _len++; }\n            fprintf(log, \"  initial path (len=%zu): '%.*s'\\n\", _len, (int)_len, path);\n        } else {\n            fprintf(log, \"  initial path: (null)\\n\");\n        }\n        fprintf(log, \"  type=%u, buffer=%p, size=%llu\\n\",\n                (unsigned)type, buffer, (unsigned long long)size);\n        fclose(log);\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /* Log state after lfs_dir_find to capture any modification to the pointer parameter */\n    log = fopen(\"/tmp/logs/692.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_find: tag=%lld, path_ptr_addr=%p, path_value=%p\\n\",\n                (long long)tag, (void*)&path, (const void*)path);\n        if (path) {\n            size_t _len = 0;\n            while (_len < 128 && path[_len] != '\\0') { _len++; }\n            fprintf(log, \"  path (len=%zu): '%.*s'\\n\", _len, (int)_len, path);\n        } else {\n            fprintf(log, \"  path: (null)\\n\");\n        }\n        fclose(log);\n    }\n\n    if (tag < 0) {\n        log = fopen(\"/tmp/logs/692.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"RETURN (dir_find failed): tag=%lld\\n\", (long long)tag);\n            fclose(log);\n        }\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        /* special case for root */\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n\n        log = fopen(\"/tmp/logs/692.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"special root case: after fetch err=%d\\n\", err);\n            fclose(log);\n        }\n\n        if (err) {\n            log = fopen(\"/tmp/logs/692.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"RETURN (dir_fetch failed): err=%d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n    }\n\n    tag = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x7ff, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_USERATTR + type,\n                id, lfs_min(size, lfs->attr_max)),\n            buffer);\n\n    log = fopen(\"/tmp/logs/692.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_get: tag=%lld\\n\", (long long)tag);\n        if (tag < 0 && tag == LFS_ERR_NOENT) {\n            fprintf(log, \"  dir_get indicates NOENT -> will return NOATTR\\n\");\n        }\n        fclose(log);\n    }\n\n    if (tag < 0) {\n        if (tag == LFS_ERR_NOENT) {\n            log = fopen(\"/tmp/logs/692.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"RETURN (no attr): LFS_ERR_NOATTR\\n\");\n                fclose(log);\n            }\n            return LFS_ERR_NOATTR;\n        }\n\n        log = fopen(\"/tmp/logs/692.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"RETURN (dir_get failed): tag=%lld\\n\", (long long)tag);\n            fclose(log);\n        }\n\n        return tag;\n    }\n\n    lfs_ssize_t ret = lfs_tag_size(tag);\n    log = fopen(\"/tmp/logs/692.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"RETURN success: size=%lld\\n\", (long long)ret);\n        fclose(log);\n    }\n\n    return ret;\n}\n"
}