{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the code passes &newpath (the address of the function parameter newpath) to lfs_dir_find, which may update the pointer (advance it). That modifies the function parameter variable newpath (the pointer itself), which breaches MISRA C 2023 Rule 17.8. The pointed-to characters remain const, but the pointer value is being changed. A compliant approach is to copy the parameter to a local pointer (e.g. const char *p = newpath) and pass &p instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_rename code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_rename with it.\n  - Your function must have the exact same signature as lfs_rename.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_rename to check logs.\n  - Your function MUST preserve the original logic of lfs_rename as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_rename will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_rename as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to obtain lock */\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_rename: LFS_LOCK failed -> %d (lfs=%p, oldpath=%p, newpath=%p)\\n\",\n                    err, (void*)lfs, (void*)oldpath, (void*)newpath);\n            fflush(f);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs,\n              oldpath ? oldpath : \"(null)\", newpath ? newpath : \"(null)\");\n\n    /* Probe logging to capture control flow and potential modification of the\n       function parameter 'newpath'. We record the address of the parameter\n       variable, its pointer value before/after the inner call, and the\n       string it points to (if non-NULL). This allows reproducing evidence if a\n       nested call writes through &newpath and changes the pointer stored in\n       this function's parameter slot. */\n    FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (f) {\n        const char *oldpath_s = oldpath ? oldpath : \"(null)\";\n        const char *newpath_s = newpath ? newpath : \"(null)\";\n        fprintf(f, \"ENTER lfs_rename: lfs=%p, oldpath=%p ('%s'), newpath=%p ('%s'), &newpath=%p\\n\",\n                (void*)lfs, (void*)oldpath, oldpath_s, (void*)newpath, newpath_s, (void*)&newpath);\n        fflush(f);\n        fclose(f);\n    }\n\n    /* Keep original behavior: call underlying implementation. */\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n\n    /* After call, record the value of the parameter 'newpath' again to detect\n       any modification performed by nested calls that had access to &newpath. */\n    f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (f) {\n        const char *oldpath_s = oldpath ? oldpath : \"(null)\";\n        const char *newpath_s = newpath ? newpath : \"(null)\";\n        fprintf(f, \"EXIT lfs_rename: err=%d, lfs=%p, oldpath=%p ('%s'), newpath=%p ('%s'), &newpath=%p\\n\",\n                err, (void*)lfs, (void*)oldpath, oldpath_s, (void*)newpath, newpath_s, (void*)&newpath);\n        /* If the pointer value changed between ENTER and EXIT, note it explicitly. */\n        /* We cannot compare to the earlier value here without storing it in a\n           persistent location; instead, downstream analysis can compare the\n           ENTER and EXIT log lines by address. */\n        fflush(f);\n        fclose(f);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}