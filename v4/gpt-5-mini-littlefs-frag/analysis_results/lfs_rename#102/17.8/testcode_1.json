{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the function lfs_rename_ takes parameter 'const char *oldpath' and then passes its address (&oldpath) to lfs_dir_find. That allows lfs_dir_find to modify the pointer variable oldpath (e.g. advance it to subsequent path components). Rule 17.8 forbids modifying a function parameter itself (the pointer), even though the object pointed to may be modified. Therefore this usage violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_rename code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_rename with it.\n  - Your function must have the exact same signature as lfs_rename.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_rename to check logs.\n  - Your function MUST preserve the original logic of lfs_rename as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_rename will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_rename as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure so we can trace control flow */\n        FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_rename: LFS_LOCK failed -> %d; lfs=%p oldpath=%p newpath=%p &oldpath=%p\\n\",\n                    err, (void*)lfs, (const void*)oldpath, (const void*)newpath, (void*)&oldpath);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Record entry state: pointer values and address of the parameter variable */\n    FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"ENTER lfs_rename: lfs=%p oldpath=%p \\\"%s\\\" newpath=%p \\\"%s\\\" &oldpath=%p\\n\",\n                (void*)lfs,\n                (const void*)oldpath, (oldpath ? oldpath : \"(null)\"),\n                (const void*)newpath, (newpath ? newpath : \"(null)\"),\n                (void*)&oldpath);\n        fclose(f);\n    }\n\n    /* Preserve a copy of the incoming pointer value so we can compare after the call */\n    const char *oldpath_before = oldpath;\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log exit state: check if the parameter variable (oldpath) was modified by the call path */\n    f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"EXIT  lfs_rename: err=%d lfs=%p oldpath_before=%p \\\"%s\\\" oldpath_after=%p \\\"%s\\\" &oldpath=%p\\n\",\n                err,\n                (void*)lfs,\n                (const void*)oldpath_before, (oldpath_before ? oldpath_before : \"(null)\"),\n                (const void*)oldpath, (oldpath ? oldpath : \"(null)\"),\n                (void*)&oldpath);\n        fclose(f);\n    }\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}