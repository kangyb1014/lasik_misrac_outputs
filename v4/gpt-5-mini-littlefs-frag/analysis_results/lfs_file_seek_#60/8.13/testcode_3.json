{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the address of a non-const local (lfs_off_t noff) to lfs_ctz_index via &noff. If lfs_ctz_index only reads the value (as implied by usage, e.g. also called with &(lfs_off_t){file->pos}), its parameter should be a pointer-to-const (const lfs_off_t *). As written this passes a non-const pointer where a const-qualified pointer would be sufficient, violating Rule 8.13. Change the callee signature to accept const lfs_off_t * (and update calls) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/135.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek_:\n```c\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_seek_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_seek_ with it.\n  - Your function must have the exact same signature as lfs_file_seek_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_seek_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_seek_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_seek_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_seek_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Logging probe: append human-readable trace to /tmp/logs/135.txt */\n    FILE *log = fopen(\"/tmp/logs/135.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_file_seek_: lfs=%p file=%p off=%lld whence=%d file->pos=%lld file->flags=0x%08x\\n\",\n                (void*)lfs, (void*)file, (long long)off, whence, (long long)file->pos, (unsigned)file->flags);\n        fflush(log);\n        fclose(log);\n    }\n\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    log = fopen(\"/tmp/logs/135.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"computed npos=%lld (file_max=%lld)\\n\",\n                (long long)npos, (long long)lfs->file_max);\n        fflush(log);\n        fclose(log);\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        log = fopen(\"/tmp/logs/135.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"RETURN LFS_ERR_INVAL: npos (%lld) > file_max (%lld)\\n\",\n                    (long long)npos, (long long)lfs->file_max);\n            fflush(log);\n            fclose(log);\n        }\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        log = fopen(\"/tmp/logs/135.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"NOOP: file->pos == npos (%lld)\\n\", (long long)npos);\n            fflush(log);\n            fclose(log);\n        }\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        /*\n         * NOTE: The original code used a compound literal for the old offset\n         * (lfs_ctz_index(lfs, &(lfs_off_t){file->pos})). To make the address\n         * and value easily loggable, we use a local temporary holding the\n         * same value and then pass its address. This preserves behavior while\n         * enabling logging of the address/value pair that is relevant to the\n         * Rule 8.13 scenario (passing address of a non-const local).\n         */\n        lfs_off_t ooff = file->pos;\n        int oindex = lfs_ctz_index(lfs, &ooff);\n\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n\n        log = fopen(\"/tmp/logs/135.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"READ-PATH: ooff=%lld (&ooff=%p) oindex=%d  noff=%lld (&noff=%p) nindex=%d cache.off=%lld cache.size=%lld\\n\",\n                    (long long)ooff, (void*)&ooff, oindex,\n                    (long long)noff, (void*)&noff, nindex,\n                    (long long)file->cache.off, (long long)file->cache.size);\n            fflush(log);\n            fclose(log);\n        }\n\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n\n            log = fopen(\"/tmp/logs/135.txt\", \"a\");\n            if (log) {\n                fprintf(log, \"CACHE HIT: updated file->pos=%lld file->off=%lld returning npos=%lld\\n\",\n                        (long long)file->pos, (long long)file->off, (long long)npos);\n                fflush(log);\n                fclose(log);\n            }\n            return npos;\n        }\n\n        log = fopen(\"/tmp/logs/135.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"CACHE MISS: either index mismatch or out of cache range\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    log = fopen(\"/tmp/logs/135.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"after lfs_file_flush: err=%d\\n\", err);\n        fflush(log);\n        fclose(log);\n    }\n    if (err) {\n        log = fopen(\"/tmp/logs/135.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"RETURN err=%d\\n\", err);\n            fflush(log);\n            fclose(log);\n        }\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n\n    log = fopen(\"/tmp/logs/135.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"FINAL: file->pos set to %lld returning %lld\\n\",\n                (long long)file->pos, (long long)npos);\n        fflush(log);\n        fclose(log);\n    }\n    return npos;\n}"
}