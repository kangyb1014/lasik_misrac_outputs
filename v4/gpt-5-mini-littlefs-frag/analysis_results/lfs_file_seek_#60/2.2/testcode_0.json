{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe cast-to-void statement \"(void)lfs;\" (used e.g. in lfs_file_size_) is an executed no-op whose removal would not affect program behaviour (it only suppresses an unused-parameter warning). This is an operation executed but without effect, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/138.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek_:\n```c\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_seek_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_seek_ with it.\n  - Your function must have the exact same signature as lfs_file_seek_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_seek_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_seek_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_seek_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_seek_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Logging probe: append execution trace to /tmp/logs/138.txt */\n    FILE *log = fopen(\"/tmp/logs/138.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_file_seek_: off=%lld whence=%d file_pos=%lld flags=0x%08x file_off=%lld cache_off=%lld cache_size=%lld\\n\",\n                (long long)off, whence, (long long)file->pos,\n                (unsigned)file->flags,\n                (long long)file->off,\n                (long long)file->cache.off,\n                (long long)file->cache.size);\n    }\n\n    /* find new pos\n     *\n     * fortunately for us, littlefs is limited to 31-bit file sizes, so we\n     * don't have to worry too much about integer overflow\n     */\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n        if (log) fprintf(log, \"whence=SET -> npos=%lld\\n\", (long long)npos);\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n        if (log) fprintf(log, \"whence=CUR -> npos=%lld\\n\", (long long)npos);\n    } else if (whence == LFS_SEEK_END) {\n        if (log) fprintf(log, \"whence=END -> calling lfs_file_size_()\\n\");\n        lfs_soff_t fsize = lfs_file_size_(lfs, file);\n        if (log) fprintf(log, \"lfs_file_size_ returned %lld\\n\", (long long)fsize);\n        npos = (lfs_off_t)fsize + (lfs_off_t)off;\n        if (log) fprintf(log, \"whence=END -> npos=%lld\\n\", (long long)npos);\n    }\n\n    if (log) fprintf(log, \"check: npos=%lld file_max=%lld\\n\", (long long)npos, (long long)lfs->file_max);\n    if (npos > lfs->file_max) {\n        /* file position out of range */\n        if (log) fprintf(log, \"npos > file_max -> return LFS_ERR_INVAL\\n\");\n        if (log) fclose(log);\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        /* noop - position has not changed */\n        if (log) fprintf(log, \"noop: file->pos == npos -> return %lld\\n\", (long long)npos);\n        if (log) fclose(log);\n        return npos;\n    }\n\n    /* if we're only reading and our new offset is still in the file's cache\n     * we can avoid flushing and needing to reread the data\n     */\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        if (log) fprintf(log, \"reading && cache candidate -> compute indices\\n\");\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (log) fprintf(log, \"oindex=%d nindex=%d noff=%lld cache.off=%lld cache.size=%lld\\n\",\n                        oindex, nindex, (long long)noff,\n                        (long long)file->cache.off, (long long)file->cache.size);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            if (log) fprintf(log, \"cache hit -> pos=%lld off=%lld return %lld\\n\",\n                             (long long)file->pos, (long long)file->off, (long long)npos);\n            if (log) fclose(log);\n            return npos;\n        }\n    }\n\n    /* write out everything beforehand, may be noop if rdonly */\n    if (log) fprintf(log, \"calling lfs_file_flush() before seek\\n\");\n    int err = lfs_file_flush(lfs, file);\n    if (log) fprintf(log, \"lfs_file_flush returned %d\\n\", err);\n    if (err) {\n        if (log) fclose(log);\n        return err;\n    }\n\n    /* update pos */\n    file->pos = npos;\n    if (log) fprintf(log, \"updated file->pos=%lld -> return %lld\\n\", (long long)file->pos, (long long)npos);\n    if (log) fclose(log);\n    return npos;\n}"
}