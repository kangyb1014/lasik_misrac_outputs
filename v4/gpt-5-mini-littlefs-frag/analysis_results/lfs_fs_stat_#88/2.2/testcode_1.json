{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_superblock_fromle32(&superblock) converts all fields of the local superblock (version, block_size, block_count, name_max, file_max, attr_max), but only superblock.version is subsequently used (assigned to fsinfo->disk_version). The conversions of the other fields are executed but have no effect on program behaviour and therefore constitute dead code (their removal would not change the observable behaviour of the function).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/118.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat_:\n```c\nstatic int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    // if the superblock is up-to-date, we must be on the most recent\n    // minor version of littlefs\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n\n    // otherwise we need to read the minor version on disk\n    } else {\n        // fetch the superblock\n        lfs_mdir_t dir;\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        if (err) {\n            return err;\n        }\n\n        lfs_superblock_t superblock;\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        if (tag < 0) {\n            return tag;\n        }\n        lfs_superblock_fromle32(&superblock);\n\n        // read the on-disk version\n        fsinfo->disk_version = superblock.version;\n    }\n\n    // filesystem geometry\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n\n    // other on-disk configuration, we cache all of these for internal use\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_stat_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_stat_ with it.\n  - Your function must have the exact same signature as lfs_fs_stat_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_stat_ to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_stat_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_stat_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_stat_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Logging probe to capture control flow and state for Rule 2.2 investigation.\n       Attempts to append to /tmp/logs/118.txt. If fopen fails, function still\n       behaves exactly as original. */\n    FILE *log = fopen(\"/tmp/logs/118.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_fs_stat_: lfs=%p fsinfo=%p\\n\", (void *)lfs, (void *)fsinfo);\n    }\n\n    // if the superblock is up-to-date, we must be on the most recent\n    // minor version of littlefs\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n        if (log) {\n            fprintf(log, \"BRANCH: no superblock needed; disk_version=%llu\\n\",\n                    (unsigned long long)fsinfo->disk_version);\n        }\n\n    // otherwise we need to read the minor version on disk\n    } else {\n        // fetch the superblock\n        lfs_mdir_t dir;\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        if (log) {\n            fprintf(log, \"lfs_dir_fetch returned %d\\n\", err);\n        }\n        if (err) {\n            if (log) {\n                fprintf(log, \"EXIT lfs_fs_stat_: returning error %d\\n\", err);\n                fclose(log);\n            }\n            return err;\n        }\n\n        lfs_superblock_t superblock;\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        if (log) {\n            fprintf(log, \"lfs_dir_get returned tag=%lld\\n\", (long long)tag);\n        }\n        if (tag < 0) {\n            if (log) {\n                fprintf(log, \"EXIT lfs_fs_stat_: lfs_dir_get error %lld\\n\", (long long)tag);\n                fclose(log);\n            }\n            return tag;\n        }\n\n        /* Capture raw values before conversion to little-endian host order. */\n        unsigned long long raw_version = (unsigned long long)superblock.version;\n        unsigned long long raw_block_size = (unsigned long long)superblock.block_size;\n        unsigned long long raw_block_count = (unsigned long long)superblock.block_count;\n        unsigned long long raw_name_max = (unsigned long long)superblock.name_max;\n        unsigned long long raw_file_max = (unsigned long long)superblock.file_max;\n        unsigned long long raw_attr_max = (unsigned long long)superblock.attr_max;\n\n        if (log) {\n            fprintf(log, \"superblock (raw) before fromle32: version=%llu block_size=%llu block_count=%llu name_max=%llu file_max=%llu attr_max=%llu\\n\",\n                    raw_version, raw_block_size, raw_block_count,\n                    raw_name_max, raw_file_max, raw_attr_max);\n        }\n\n        lfs_superblock_fromle32(&superblock);\n\n        /* Capture converted values after fromle32. */\n        unsigned long long conv_version = (unsigned long long)superblock.version;\n        unsigned long long conv_block_size = (unsigned long long)superblock.block_size;\n        unsigned long long conv_block_count = (unsigned long long)superblock.block_count;\n        unsigned long long conv_name_max = (unsigned long long)superblock.name_max;\n        unsigned long long conv_file_max = (unsigned long long)superblock.file_max;\n        unsigned long long conv_attr_max = (unsigned long long)superblock.attr_max;\n\n        if (log) {\n            fprintf(log, \"superblock (converted) after fromle32: version=%llu block_size=%llu block_count=%llu name_max=%llu file_max=%llu attr_max=%llu\\n\",\n                    conv_version, conv_block_size, conv_block_count,\n                    conv_name_max, conv_file_max, conv_attr_max);\n        }\n\n        // read the on-disk version\n        fsinfo->disk_version = superblock.version;\n        if (log) {\n            fprintf(log, \"Assigned fsinfo->disk_version = %llu (only this converted field is used later)\\n\",\n                    (unsigned long long)fsinfo->disk_version);\n        }\n    }\n\n    // filesystem geometry\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n\n    // other on-disk configuration, we cache all of these for internal use\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n\n    if (log) {\n        fprintf(log, \"Final fsinfo: disk_version=%llu block_size=%llu block_count=%llu name_max=%llu file_max=%llu attr_max=%llu\\n\",\n                (unsigned long long)fsinfo->disk_version,\n                (unsigned long long)fsinfo->block_size,\n                (unsigned long long)fsinfo->block_count,\n                (unsigned long long)fsinfo->name_max,\n                (unsigned long long)fsinfo->file_max,\n                (unsigned long long)fsinfo->attr_max);\n        fprintf(log, \"EXIT lfs_fs_stat_: returning 0\\n\");\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}