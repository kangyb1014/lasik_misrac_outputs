{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &dir (type lfs_mdir_t *) to lfs_dir_get. If lfs_dir_get only reads the directory (does not modify it), the pointer should be to a const-qualified type (const lfs_mdir_t *). In that case the non-const pointer argument violates MISRA C 2023 Rule 8.13. (The &superblock argument is an output buffer and correctly remains non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/115.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat_:\n```c\nstatic int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    // if the superblock is up-to-date, we must be on the most recent\n    // minor version of littlefs\n    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n\n    // otherwise we need to read the minor version on disk\n    } else {\n        // fetch the superblock\n        lfs_mdir_t dir;\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        if (err) {\n            return err;\n        }\n\n        lfs_superblock_t superblock;\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        if (tag < 0) {\n            return tag;\n        }\n        lfs_superblock_fromle32(&superblock);\n\n        // read the on-disk version\n        fsinfo->disk_version = superblock.version;\n    }\n\n    // filesystem geometry\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n\n    // other on-disk configuration, we cache all of these for internal use\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_stat_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_stat_ with it.\n  - Your function must have the exact same signature as lfs_fs_stat_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_stat_ to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_stat_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_stat_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_stat_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    FILE *logf = NULL;\n    int result = 0;\n\n    /* Open log file for append. If this fails, continue without logging. */\n    logf = fopen(\"/tmp/logs/115.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_fs_stat_: lfs=%p fsinfo=%p\\n\", (void *)lfs, (void *)fsinfo);\n    }\n\n    /* if the superblock is up-to-date, we must be on the most recent\n       minor version of littlefs */\n    int needsuper = lfs_gstate_needssuperblock(&lfs->gstate);\n    if (logf) {\n        fprintf(logf, \"gstate_needssuperblock -> %d\\n\", needsuper);\n    }\n\n    if (!needsuper) {\n        fsinfo->disk_version = lfs_fs_disk_version(lfs);\n        if (logf) {\n            fprintf(logf, \"superblock not needed; disk_version=%u\\n\", (unsigned)fsinfo->disk_version);\n        }\n\n        /* filesystem geometry */\n        fsinfo->block_size = lfs->cfg->block_size;\n        fsinfo->block_count = lfs->block_count;\n\n        /* other on-disk configuration, we cache all of these for internal use */\n        fsinfo->name_max = lfs->name_max;\n        fsinfo->file_max = lfs->file_max;\n        fsinfo->attr_max = lfs->attr_max;\n\n        if (logf) {\n            fprintf(logf, \"exiting lfs_fs_stat_ (no superblock read). block_size=%u block_count=%u name_max=%u file_max=%u attr_max=%u\\n\",\n                    (unsigned)fsinfo->block_size, (unsigned)fsinfo->block_count,\n                    (unsigned)fsinfo->name_max, (unsigned)fsinfo->file_max, (unsigned)fsinfo->attr_max);\n            fclose(logf);\n        }\n        return 0;\n    } else {\n        /* otherwise we need to read the minor version on disk */\n        /* fetch the superblock */\n        lfs_mdir_t dir;\n        if (logf) {\n            fprintf(logf, \"about to call lfs_dir_fetch: &dir=%p lfs->root=%p\\n\", (void *)&dir, (void *)lfs->root);\n        }\n        int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n        if (logf) {\n            fprintf(logf, \"lfs_dir_fetch returned %d\\n\", err);\n        }\n        if (err) {\n            result = err;\n            if (logf) {\n                fprintf(logf, \"exiting lfs_fs_stat_ with error from lfs_dir_fetch: %d\\n\", result);\n                fclose(logf);\n            }\n            return result;\n        }\n\n        lfs_superblock_t superblock;\n        if (logf) {\n            fprintf(logf, \"about to call lfs_dir_get with &dir=%p (mdir pointer)\\n\", (void *)&dir);\n        }\n        lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),\n                &superblock);\n        if (logf) {\n            /* lfs_stag_t may be signed; print as long for portability */\n            fprintf(logf, \"lfs_dir_get returned tag=%ld\\n\", (long)tag);\n        }\n        if (tag < 0) {\n            result = (int)tag;\n            if (logf) {\n                fprintf(logf, \"exiting lfs_fs_stat_ with error from lfs_dir_get: %d\\n\", result);\n                fclose(logf);\n            }\n            return result;\n        }\n\n        lfs_superblock_fromle32(&superblock);\n        if (logf) {\n            fprintf(logf, \"superblock.version (fromle32) = %u\\n\", (unsigned)superblock.version);\n        }\n\n        /* read the on-disk version */\n        fsinfo->disk_version = superblock.version;\n    }\n\n    /* filesystem geometry */\n    fsinfo->block_size = lfs->cfg->block_size;\n    fsinfo->block_count = lfs->block_count;\n\n    /* other on-disk configuration, we cache all of these for internal use */\n    fsinfo->name_max = lfs->name_max;\n    fsinfo->file_max = lfs->file_max;\n    fsinfo->attr_max = lfs->attr_max;\n\n    if (logf) {\n        fprintf(logf, \"final fsinfo: disk_version=%u block_size=%u block_count=%u name_max=%u file_max=%u attr_max=%u\\n\",\n                (unsigned)fsinfo->disk_version, (unsigned)fsinfo->block_size, (unsigned)fsinfo->block_count,\n                (unsigned)fsinfo->name_max, (unsigned)fsinfo->file_max, (unsigned)fsinfo->attr_max);\n        fclose(logf);\n    }\n\n    return 0;\n}"
}