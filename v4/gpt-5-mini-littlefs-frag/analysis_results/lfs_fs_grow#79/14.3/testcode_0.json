{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg,0). In lfs_fs_grow this value is assigned to err and then used as the controlling expression in if (err). Because the macro always yields 0, the if (err) test is invariant (always false), which violates MISRA C 2023 Rule 14.3 (controlling expressions shall not be invariant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_grow code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_grow with it.\n  - Your function must have the exact same signature as lfs_fs_grow.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_grow to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_grow as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_grow will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    FILE *log = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_fs_grow: lfs=%p, cfg=%p, block_count=%\" PRIu32 \", LFS_LOCK returned=%d\\n\",\n                (void*)lfs, (void*)lfs->cfg, block_count, err);\n        fflush(log);\n    }\n\n    if (err) {\n        if (log) {\n            fprintf(log, \"EXIT lfs_fs_grow: early return due to LFS_LOCK err=%d\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    if (log) {\n        fprintf(log, \"CALL lfs_fs_grow_: lfs=%p, block_count=%\" PRIu32 \"\\n\", (void*)lfs, block_count);\n        fflush(log);\n    }\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    if (log) {\n        fprintf(log, \"RETURN from lfs_fs_grow_: err=%d\\n\", err);\n        fflush(log);\n    }\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    if (log) {\n        fprintf(log, \"UNLOCK called on cfg=%p, final err=%d\\n\", (void*)lfs->cfg, err);\n        fprintf(log, \"EXIT lfs_fs_grow: returning %d\\n\", err);\n        fclose(log);\n    }\n\n    return err;\n}"
}