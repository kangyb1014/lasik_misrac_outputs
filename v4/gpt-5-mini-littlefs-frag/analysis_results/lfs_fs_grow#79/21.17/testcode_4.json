{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_dir_fetch calls lfs_dir_fetchmatch passing NULL for the pointer output parameters (the last three args). If lfs_dir_fetchmatch later uses any <string.h> functions (e.g. memcpy, memmove, strcpy, etc.) to copy data into those pointer parameters without first checking for NULL or ensuring a zero length, such calls will dereference the NULL pointer or write beyond the bounds of the object referenced by the pointer, violating MISRA C 2023 Rule 21.17. Example concrete violation: lfs_dir_fetchmatch(..., NULL /* buffer */, NULL, NULL) internally does memcpy(NULL, src, n) with n>0.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_grow code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_grow with it.\n  - Your function must have the exact same signature as lfs_fs_grow.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_grow to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_grow as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_grow will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Try to log entry and key state to /tmp/logs/33.txt. Keep best-effort so we don't change behaviour. */\n    do {\n        FILE *f = fopen(\"/tmp/logs/33.txt\", \"a\");\n        if (f) {\n            /* Log entry, pointers and block_count. Use same PRIu32 formatting as original code. */\n            fprintf(f, \"ENTER lfs_fs_grow: lfs=%p cfg=%p block_count=%\" PRIu32 \"\\n\",\n                    (void*)lfs, (void*)(lfs ? lfs->cfg : (void*)0), block_count);\n            if (err) {\n                fprintf(f, \"lfs_fs_grow: lock failed -> %d\\n\", err);\n            }\n            fclose(f);\n            break;\n        }\n        /* Fallback: try a looser path if directory doesn't exist. */\n        f = fopen(\"/tmp/33.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_fs_grow: lfs=%p cfg=%p block_count=%\" PRIu32 \"\\n\",\n                    (void*)lfs, (void*)(lfs ? lfs->cfg : (void*)0), block_count);\n            if (err) {\n                fprintf(f, \"lfs_fs_grow: lock failed -> %d\\n\", err);\n            }\n            fclose(f);\n            break;\n        }\n        /* If both fail, give up silently to preserve original behaviour. */\n    } while (0);\n\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\" PRIu32 \")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log return value and a few pointers to help reproduce downstream issues. */\n    do {\n        FILE *f = fopen(\"/tmp/logs/33.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_fs_grow: lfs=%p cfg=%p block_count=%\" PRIu32 \" -> err=%d\\n\",\n                    (void*)lfs, (void*)(lfs ? lfs->cfg : (void*)0), block_count, err);\n            fclose(f);\n            break;\n        }\n        f = fopen(\"/tmp/33.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_fs_grow: lfs=%p cfg=%p block_count=%\" PRIu32 \" -> err=%d\\n\",\n                    (void*)lfs, (void*)(lfs ? lfs->cfg : (void*)0), block_count, err);\n            fclose(f);\n            break;\n        }\n    } while (0);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}