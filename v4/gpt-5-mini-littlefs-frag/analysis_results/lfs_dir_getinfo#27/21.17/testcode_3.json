{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"/\") can overflow info->name if LFS_NAME_MAX is configured too small. info->name has size LFS_NAME_MAX+1, and strcpy copies two bytes for \"/\" (the '/' plus terminating '\\0'). If LFS_NAME_MAX==0 (name array size 1) or LFS_NAME_MAX==0/1 depending on other uses (e.g. other code also copies \".\" and \"..\"), this write will exceed the bounds and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_getinfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_getinfo with it.\n  - Your function must have the exact same signature as lfs_dir_getinfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_getinfo to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_getinfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Local lightweight declarations for logging without relying on\n       including <stdio.h> here. These match the signatures sufficiently\n       for usage below and are scoped to this function. */\n    extern void *fopen(const char *path, const char *mode);\n    extern int fprintf(void *stream, const char *format, ...);\n    extern int fclose(void *stream);\n\n    void *log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log) {\n        /* Log basic entry and state that are relevant to the violation\n           scenario: id, lfs->name_max (which determines info->name size),\n           and pointer values for context. */\n        fprintf(log, \"ENTER lfs_dir_getinfo: id=%u lfs->name_max=%d info=%p dir=%p\\n\",\n                (unsigned)id, (int)lfs->name_max, (void *)info, (void *)dir);\n        fclose(log);\n    }\n\n    if (id == 0x3ff) {\n        /* special case for root -- this is the potentially problematic\n           strcpy that may overflow info->name if the configured\n           LFS_NAME_MAX is too small. Log the relevant sizes and the\n           action about to be taken so other agents can reproduce. */\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            int name_buf_size = (int)(lfs->name_max + 1);\n            fprintf(log, \"ROOT CASE: about to strcpy(info->name, \\\"/\\\")\\n\");\n            fprintf(log, \"ROOT CASE: lfs->name_max=%d => info->name buffer size=%d\\n\",\n                    (int)lfs->name_max, name_buf_size);\n            fprintf(log, \"ROOT CASE: info->name pointer=%p\\n\", (void *)info->name);\n            fprintf(log, \"ROOT CASE: note: strcpy will write 2 bytes ('/' + '\\0')\\n\");\n            fclose(log);\n        }\n\n        /* Preserve original behavior (including the strcpy that may overflow\n           in some configurations). This is intentional to allow reproduction\n           and evidence collection. */\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ROOT CASE: strcpy completed; returned type=LFS_TYPE_DIR\\n\");\n            fclose(log);\n        }\n        return 0;\n    }\n\n    /* Non-root case: log before attempting to read the name tag. */\n    log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"NON-ROOT: id=%u fetching name with name_max=%d\\n\",\n                (unsigned)id, (int)lfs->name_max);\n        fclose(log);\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n\n    log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_get (name): tag=%ld\\n\", (long)tag);\n        fclose(log);\n    }\n\n    if (tag < 0) {\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ERROR: lfs_dir_get returned error tag=%ld; returning %d\\n\",\n                    (long)tag, (int)tag);\n            fclose(log);\n        }\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n\n    log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"AFTER lfs_dir_get (struct): tag=%ld type=%d\\n\",\n                (long)tag, (int)lfs_tag_type3(tag));\n        fclose(log);\n    }\n\n    if (tag < 0) {\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ERROR: lfs_dir_get(struct) returned error tag=%ld; returning %d\\n\",\n                    (long)tag, (int)tag);\n            fclose(log);\n        }\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"INFO: tag type CTZSTRUCT => info->size=%lu\\n\", (unsigned long)info->size);\n            fclose(log);\n        }\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n        log = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"INFO: tag type INLINESTRUCT => info->size=%lu (tag size)\\n\", (unsigned long)info->size);\n            fclose(log);\n        }\n    }\n\n    log = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"EXIT lfs_dir_getinfo: returning 0, info->type=%d info->size=%lu\\n\",\n                (int)info->type, (unsigned long)info->size);\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}