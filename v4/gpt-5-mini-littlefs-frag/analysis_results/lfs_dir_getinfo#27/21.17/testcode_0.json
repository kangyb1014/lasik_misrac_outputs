{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes info->name (size LFS_NAME_MAX+1) with a length of lfs->name_max+1. If lfs->name_max > LFS_NAME_MAX (e.g. due to a corrupted or malicious superblock, or lack of runtime check), lfs_dir_get will copy lfs->name_max+1 bytes into info->name, overflowing the buffer. This is a direct way a string/memory copy used by lfs_dir_get can access beyond the bounds of info->name.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_getinfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_getinfo with it.\n  - Your function must have the exact same signature as lfs_dir_getinfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_getinfo to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_getinfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Logging probe: append trace information to /tmp/logs/353.txt */\n    FILE *___log_fp = fopen(\"/tmp/logs/353.txt\", \"a\");\n    if (___log_fp) {\n        /* Basic entry log */\n        fprintf(___log_fp, \"ENTER lfs_dir_getinfo: lfs=%p dir=%p id=%u info=%p\\n\",\n                (void*)lfs, (void*)dir, (unsigned)id, (void*)info);\n        /* Attempt to log buffer size of info->name if available */\n        /* sizeof(info->name) is evaluated at compile time if the member exists */\n        fprintf(___log_fp, \"info->name (addr)=%p sizeof(info->name)=%zu\\n\",\n                (void*)info->name, (size_t)sizeof(info->name));\n        if (lfs) {\n            size_t _name_len = (size_t)lfs->name_max + 1u;\n            fprintf(___log_fp, \"lfs->name_max=%u computed request length(lfs->name_max+1)=%zu\\n\",\n                    (unsigned)lfs->name_max, _name_len);\n            if (_name_len > (size_t)sizeof(info->name)) {\n                fprintf(___log_fp, \"POTENTIAL OVERFLOW: requested length %zu > info->name buffer %zu\\n\",\n                        _name_len, (size_t)sizeof(info->name));\n            } else {\n                fprintf(___log_fp, \"requested length %zu fits within info->name buffer %zu\\n\",\n                        _name_len, (size_t)sizeof(info->name));\n            }\n        } else {\n            fprintf(___log_fp, \"lfs is NULL, cannot determine name_max\\n\");\n        }\n        fclose(___log_fp);\n    }\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n\n        /* Log that we hit the root special case */\n        FILE *___log_fp2 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp2) {\n            fprintf(___log_fp2, \"SPECIAL CASE: id==0x3ff, set name='/' type=DIR\\n\");\n            fclose(___log_fp2);\n        }\n        return 0;\n    }\n\n    /* Log the parameters just before calling lfs_dir_get for the name */\n    {\n        FILE *___log_fp3 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp3) {\n            fprintf(___log_fp3, \"CALL lfs_dir_get FOR NAME: tag criteria=(0x780,0x3ff,0) name_id=%u name_max_plus1=%u nameptr=%p\\n\",\n                    (unsigned)id, (unsigned)(lfs ? lfs->name_max + 1 : 0), (void*)info->name);\n            fclose(___log_fp3);\n        }\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n\n    /* Log return tag from name fetch and the raw name buffer contents up to a reasonable length */\n    {\n        FILE *___log_fp4 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp4) {\n            fprintf(___log_fp4, \"RETURN from lfs_dir_get FOR NAME: tag=%ld\\n\", (long)tag);\n            if (tag < 0) {\n                fprintf(___log_fp4, \"ERROR: lfs_dir_get returned error tag %ld\\n\", (long)tag);\n            } else {\n                /* Print a limited prefix of the name for debugging (non-NULL-terminated safety) */\n                size_t _bufsz = sizeof(info->name);\n                size_t _printlen = _bufsz < 128 ? _bufsz : 128;\n                fprintf(___log_fp4, \"info->name (first %zu bytes):\\n\", _printlen);\n                /* Print as hex to avoid issues with non-printable bytes */\n                for (size_t __i = 0; __i < _printlen; __i++) {\n                    unsigned char __c = (unsigned char)info->name[__i];\n                    fprintf(___log_fp4, \"%02x\", __c);\n                    if ((__i + 1) % 32 == 0) fprintf(___log_fp4, \"\\n\");\n                }\n                fprintf(___log_fp4, \"\\n\");\n            }\n            fclose(___log_fp4);\n        }\n    }\n\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n\n    /* Log before the second lfs_dir_get call (struct fetch) */\n    {\n        FILE *___log_fp5 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp5) {\n            fprintf(___log_fp5, \"CALL lfs_dir_get FOR STRUCT: tag criteria=(0x700,0x3ff,0) struct_id=%u sizeof(ctz)=%zu\\n\",\n                    (unsigned)id, sizeof(ctz));\n            fclose(___log_fp5);\n        }\n    }\n\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n\n    /* Log result of struct fetch */\n    {\n        FILE *___log_fp6 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp6) {\n            fprintf(___log_fp6, \"RETURN from lfs_dir_get FOR STRUCT: tag=%ld\\n\", (long)tag);\n            if (tag < 0) {\n                fprintf(___log_fp6, \"ERROR: lfs_dir_get (struct) returned error tag %ld\\n\", (long)tag);\n            } else {\n                fprintf(___log_fp6, \"raw ctz bytes (sizeof=%zu):\\n\", sizeof(ctz));\n                unsigned char *_p = (unsigned char*)&ctz;\n                for (size_t __i = 0; __i < sizeof(ctz); __i++) {\n                    fprintf(___log_fp6, \"%02x\", _p[__i]);\n                    if ((__i + 1) % 32 == 0) fprintf(___log_fp6, \"\\n\");\n                }\n                fprintf(___log_fp6, \"\\n\");\n            }\n            fclose(___log_fp6);\n        }\n    }\n\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    /* Final state log */\n    {\n        FILE *___log_fp7 = fopen(\"/tmp/logs/353.txt\", \"a\");\n        if (___log_fp7) {\n            fprintf(___log_fp7, \"EXIT lfs_dir_getinfo: id=%u type=%u size=%llu\\n\",\n                    (unsigned)id, (unsigned)info->type, (unsigned long long)info->size);\n            fclose(___log_fp7);\n        }\n    }\n\n    return 0;\n}\n"
}