{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen lfs_dir_get returns a tag whose type is LFS_TYPE_INLINESTRUCT, the subsequent call lfs_ctz_fromle32(&ctz) only converts fields of the local variable ctz which are never read in that case. Removing that call (or moving it inside the branch that handles LFS_TYPE_CTZSTRUCT) would not change program behaviour for that execution, so the call is an executed operation that has no effect \u2014 violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_getinfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/358.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_getinfo:\n```c\nstatic int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    if (id == 0x3ff) {\n        // special case for root\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (tag < 0) {\n        return (int)tag;\n    }\n    lfs_ctz_fromle32(&ctz);\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_getinfo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_getinfo with it.\n  - Your function must have the exact same signature as lfs_dir_getinfo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_getinfo to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_getinfo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_getinfo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,\n        uint16_t id, struct lfs_info *info) {\n    /* Logging probe: append traces to /tmp/logs/358.txt */\n    FILE *logf = fopen(\"/tmp/logs/358.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_dir_getinfo: lfs=%p dir=%p id=0x%03x info=%p\\n\",\n                (void*)lfs, (void*)dir, (unsigned)id, (void*)info);\n    }\n\n    if (id == 0x3ff) {\n        /* special case for root */\n        strcpy(info->name, \"/\");\n        info->type = LFS_TYPE_DIR;\n        if (logf) {\n            fprintf(logf, \"ROOT case: set name='/' type=DIR return=0\\n\");\n            fclose(logf);\n        }\n        return 0;\n    }\n\n    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_get (name): tag=%ld name='%s'\\n\", (long)tag, info->name);\n    }\n    if (tag < 0) {\n        if (logf) {\n            fprintf(logf, \"ERROR: lfs_dir_get (name) returned %ld -> returning error\\n\", (long)tag);\n            fclose(logf);\n        }\n        return (int)tag;\n    }\n\n    info->type = lfs_tag_type3(tag);\n    if (logf) {\n        fprintf(logf, \"info->type set to %d (from tag 0x%lx)\\n\", (int)info->type, (unsigned long)tag);\n    }\n\n    struct lfs_ctz ctz;\n    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),\n            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_get (struct): tag=%ld\\n\", (long)tag);\n    }\n    if (tag < 0) {\n        if (logf) {\n            fprintf(logf, \"ERROR: lfs_dir_get (struct) returned %ld -> returning error\\n\", (long)tag);\n            fclose(logf);\n        }\n        return (int)tag;\n    }\n\n    /* Log ctz state before conversion. Only access ctz.size which is used later\n       by the original logic to avoid introducing undeclared-member usages. */\n    if (logf) {\n        fprintf(logf, \"ctz before le32 conversion: size=0x%llx\\n\", (unsigned long long)ctz.size);\n    }\n\n    lfs_ctz_fromle32(&ctz);\n\n    if (logf) {\n        fprintf(logf, \"ctz after le32 conversion: size=0x%llx\\n\", (unsigned long long)ctz.size);\n    }\n\n    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {\n        info->size = ctz.size;\n        if (logf) {\n            fprintf(logf, \"branch: CTZSTRUCT -> info->size set from ctz.size = 0x%llx\\n\", (unsigned long long)info->size);\n        }\n    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {\n        info->size = lfs_tag_size(tag);\n        if (logf) {\n            fprintf(logf, \"branch: INLINESTRUCT -> info->size set from tag size = 0x%llx\\n\", (unsigned long long)info->size);\n        }\n    } else {\n        if (logf) {\n            fprintf(logf, \"branch: unknown struct type (tag type=%d) -> info->size unchanged\\n\", (int)lfs_tag_type3(tag));\n        }\n    }\n\n    if (logf) {\n        fprintf(logf, \"EXIT lfs_dir_getinfo: return=0 info->type=%d info->size=0x%llx name='%s'\\n\",\n                (int)info->type, (unsigned long long)info->size, info->name);\n        fclose(logf);\n    }\n\n    return 0;\n}"
}