{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg,0). Therefore err is always initialized to 0 and the condition if (err) is never true, making the branch return err; unreachable in the provided project configuration. This constitutes unreachable code under MISRA C 2023 Rule 2.1. (If LFS_LOCK were redefined in another build to return a nonzero error, the branch could become reachable, but in the given codebase it is unreachable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/476.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_size with it.\n  - Your function must have the exact same signature as lfs_file_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_size to check logs.\n  - Your function MUST preserve the original logic of lfs_file_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Local forward declarations so we can write to a log file without\n       adding includes at file-scope. These declarations are valid in\n       function scope and avoid redefining global identifiers. */\n    struct FILE;\n    extern struct FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(struct FILE *stream, const char *format, ...);\n    extern int fclose(struct FILE *stream);\n\n    /* Attempt to open log for append. If this fails, we still preserve\n       original behavior; logging is best-effort only. */\n    struct FILE *log = fopen(\"/tmp/logs/476.txt\", \"a\");\n    if (log) {\n        (void) fprintf(log, \"ENTER: lfs_file_size(lfs=%p, file=%p)\\n\", (void*)lfs, (void*)file);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (log) {\n        (void) fprintf(log, \"LFS_LOCK returned: %d\\n\", err);\n    }\n\n    if (err) {\n        if (log) {\n            (void) fprintf(log, \"BRANCH: err != 0 -> returning err (%d) (this branch is expected to be unreachable if LFS_LOCK expands to ((void)cfg,0))\\n\", err);\n            (void) fclose(log);\n        }\n        return err;\n    }\n\n    if (log) {\n        (void) fprintf(log, \"BRANCH: err == 0 -> continuing to lfs_file_size_\\n\");\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    if (log) {\n        /* Print result as an unsigned long long to be safe for typical\n           integer typedefs; cast to avoid format-mismatch warnings. */\n        (void) fprintf(log, \"lfs_file_size_ returned: %llu\\n\", (unsigned long long)res);\n        (void) fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}