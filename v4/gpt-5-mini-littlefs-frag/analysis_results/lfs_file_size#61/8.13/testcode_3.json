{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointers lfs and file are only used for read/inspection (trace, checks) in this function but are declared as non-const and then cast to (void*) for logging. Per MISRA C 2023 Rule 8.13 they should be const-qualified when possible (e.g. function parameters declared as const lfs_t *lfs and const lfs_file_t *file). Casting to (void*) for the trace hides the lack of const qualification and can mask a missing const qualification on the pointers.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/475.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_size with it.\n  - Your function must have the exact same signature as lfs_file_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_size to check logs.\n  - Your function MUST preserve the original logic of lfs_file_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original locking behavior */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open a persistent log for reproduction evidence */\n    {\n        FILE *f = fopen(\"/tmp/logs/475.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_file_size: lfs=%p file=%p\\n\", (void*)lfs, (void*)file);\n            fprintf(f, \"LOCK returned: %d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* If locking failed, preserve original behavior and return the error. */\n        return err;\n    }\n\n    /* Original trace retained */\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Check and log the open-list state before asserting. */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    {\n        FILE *f = fopen(\"/tmp/logs/475.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"mlist_isopen returned: %d for file=%p\\n\", isopen, (void*)file);\n            /* Note about const qualification to help reproduce MISRA 8.13 scenario */\n            fprintf(f, \"NOTE: parameters are declared as non-const (lfs_t * and lfs_file_t *).\\n\");\n            fclose(f);\n        }\n    }\n\n    /* Preserve original assert semantics */\n    LFS_ASSERT(isopen);\n\n    /* Call the underlying implementation and log its return value. */\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    {\n        FILE *f = fopen(\"/tmp/logs/475.txt\", \"a\");\n        if (f) {\n            /* Log the result and a trace that highlights the potential violation scenario. */\n            fprintf(f, \"lfs_file_size_ returned: %u (as unsigned) for file=%p\\n\", (unsigned)res, (void*)file);\n            fprintf(f, \"TRACE: pointers were used read-only; consider const-qualifying parameters to satisfy MISRA C 2023 Rule 8.13.\\n\");\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}"
}