{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). In lfs_fs_size this expands to ((void)lfs->cfg); which merely evaluates and discards the value and has no effect on program behaviour. Removing this call (or the cast) would not change program behaviour in the shown code, so the operation is dead code and thus violates MISRA C 2023 Rule 2.2. (Note: if the cfg expression had side-effects, the cast would not be dead \u2014 but in the provided usage it does not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/808.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_size with it.\n  - Your function must have the exact same signature as lfs_fs_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_size to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    /* Probe logging to capture control flow and state related to LFS_UNLOCK behavior. */\n    FILE *___lfs_probe_log = fopen(\"/tmp/logs/808.txt\", \"a\");\n    void *___cfg_before = NULL;\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"ENTER lfs_fs_size: lfs=%p\\n\", (void*)lfs);\n        /* Capture the raw cfg expression value (as a pointer) to show that LFS_UNLOCK only evaluates and discards it. */\n        ___cfg_before = (void*)lfs->cfg;\n        fprintf(___lfs_probe_log, \"lfs->cfg (before) = %p\\n\", ___cfg_before);\n        fflush(___lfs_probe_log);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"LFS_LOCK returned %d\\n\", err);\n        fflush(___lfs_probe_log);\n    }\n    if (err) {\n        if (___lfs_probe_log) {\n            fprintf(___lfs_probe_log, \"EXIT lfs_fs_size early return %d\\n\", err);\n            fclose(___lfs_probe_log);\n        }\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    if (___lfs_probe_log) {\n        fprintf(___lfs_probe_log, \"lfs_fs_size_ returned %\" PRId32 \"\\n\", res);\n        fprintf(___lfs_probe_log, \"About to call LFS_UNLOCK(lfs->cfg) -- this macro expands to ((void)cfg) in the reported scenario\\n\");\n        fflush(___lfs_probe_log);\n    }\n\n    /* The invocation under inspection: if LFS_UNLOCK is defined as ((void)cfg), this call has no runtime effect. */\n    LFS_UNLOCK(lfs->cfg);\n\n    if (___lfs_probe_log) {\n        void *___cfg_after = (void*)lfs->cfg;\n        fprintf(___lfs_probe_log, \"lfs->cfg (after) = %p\\n\", ___cfg_after);\n        if (___cfg_before == ___cfg_after) {\n            fprintf(___lfs_probe_log, \"NOTE: cfg pointer unchanged after LFS_UNLOCK (likely no-op / dead code)\\n\");\n        } else {\n            fprintf(___lfs_probe_log, \"NOTE: cfg pointer changed after LFS_UNLOCK\\n\");\n        }\n        fprintf(___lfs_probe_log, \"EXIT lfs_fs_size returning %\" PRId32 \"\\n\", res);\n        fclose(___lfs_probe_log);\n    }\n\n    return res;\n}"
}