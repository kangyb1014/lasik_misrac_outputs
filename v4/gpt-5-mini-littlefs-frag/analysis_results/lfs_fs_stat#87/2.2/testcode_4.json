{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as empty (#define LFS_TRACE(__VA_ARGS__)), so the statement LFS_TRACE(\"lfs_fs_stat -> %d\", err); expands to a null statement that produces no code or side effects. Removing this statement would not change program behaviour, so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2 in the given project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/668.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_stat with it.\n  - Your function must have the exact same signature as lfs_fs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Preserve original locking semantics */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record entry and lock result so the function invocation and control path\n       are observable even if LFS_TRACE is configured as an empty macro. We keep\n       the logging non-fatal if the filesystem for logs does not exist. */\n    {\n        FILE *f = fopen(\"/tmp/logs/668.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_fs_stat: lfs=%p fsinfo=%p\\n\", (void*)lfs, (void*)fsinfo);\n            fprintf(f, \"after LFS_LOCK -> %d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* Preserve original early return on lock failure, but record it first. */\n        FILE *f = fopen(\"/tmp/logs/668.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"LFS_LOCK failed in lfs_fs_stat -> %d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Original trace call left in place to preserve behaviour when LFS_TRACE is\n       enabled; when LFS_TRACE is empty this statement becomes a null statement. */\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Probe: record the outcome of the internal call. This ensures that the\n       second LFS_TRACE line (which may be an empty macro) is not the only place\n       where the result is observable. */\n    {\n        FILE *f = fopen(\"/tmp/logs/668.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_fs_stat_ returned -> %d\\n\", err);\n            /* Note that a disabled/empty LFS_TRACE would eliminate the original\n               logging statement; this file-based log provides reproducible\n               evidence of the control path and state. */\n            fprintf(f, \"(probe) LFS_TRACE(\" \"lfs_fs_stat -> %d\" \", ...) may be empty; recorded here.\\n\", err);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}