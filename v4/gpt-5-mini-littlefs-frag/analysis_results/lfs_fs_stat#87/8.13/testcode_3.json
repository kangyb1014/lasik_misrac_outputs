{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_fs_disk_version takes a non-const pointer parameter (lfs_t *lfs) but only reads from lfs (casts to void when unused and otherwise reads lfs->cfg->disk_version). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. The signature should be changed to static uint32_t lfs_fs_disk_version(const lfs_t *lfs) (and callers updated accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_stat with it.\n  - Your function must have the exact same signature as lfs_fs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe log: record entrance, lock result, and relevant lfs state. */\n    {\n        FILE *f = fopen(\"/tmp/logs/665.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_fs_stat: lfs=%p, fsinfo=%p\\n\", (void*)lfs, (void*)fsinfo);\n            fprintf(f, \"After LFS_LOCK: err=%d\\n\", err);\n            if (lfs != NULL) {\n                fprintf(f, \"lfs->cfg=%p\\n\", (void*)lfs->cfg);\n                if (lfs->cfg != NULL) {\n                    /* Attempt to log disk_version if available. */\n                    fprintf(f, \"lfs->cfg->disk_version=%u\\n\", (unsigned)lfs->cfg->disk_version);\n                }\n            }\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        LFS_TRACE(\"lfs_fs_stat: lock failed -> %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    /* Probe log: record result and final relevant state. */\n    {\n        FILE *f = fopen(\"/tmp/logs/665.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"After lfs_fs_stat_: err=%d\\n\", err);\n            if (lfs != NULL && lfs->cfg != NULL) {\n                fprintf(f, \"Final lfs->cfg=%p disk_version=%u\\n\", (void*)lfs->cfg, (unsigned)lfs->cfg->disk_version);\n            }\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}