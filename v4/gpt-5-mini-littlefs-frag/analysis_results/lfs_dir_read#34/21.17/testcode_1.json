{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe strcpy(info->name, \".\") can overflow info->name if the name buffer is too small. info->name is declared as char name[LFS_NAME_MAX+1], so copying \".\" requires at least 2 bytes (1 char + NUL). If LFS_NAME_MAX is 0 (or otherwise < 1) then info->name has size 1 and strcpy will write beyond the bounds. The same concern applies to the other unconditional strcpy calls for \"..\" and \"/\" which require sizes 3 and 2 respectively. No check is shown ensuring LFS_NAME_MAX >= 1, so this call can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read with it.\n  - Your function must have the exact same signature as lfs_dir_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Preserve original locking behavior */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open log file for append. Best-effort logging: if fopen fails, continue\n       without affecting original control flow. */\n    FILE *log = fopen(\"/tmp/logs/893.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_dir_read: lfs=%p dir=%p info=%p\\n\",\n                (void*)lfs, (void*)dir, (void*)info);\n        /* If we know the info pointer, log its name buffer size and current\n           raw bytes (hex) so callers can observe whether a terminating NUL\n           is present within the allocated buffer. This helps reproduce\n           overflows where strcpy writes bytes beyond the declared array. */\n        if (info) {\n            /* sizeof(info->name) is valid only if the definition of\n               struct lfs_info is visible here (it is in the original\n               compilation unit). This prints the declared buffer length. */\n            size_t name_size = sizeof(info->name);\n            fprintf(log, \"  before: info->name_size = %zu\\n\", name_size);\n            fprintf(log, \"  before: info->name_bytes =\");\n            for (size_t i = 0; i < name_size; i++) {\n                unsigned char b = (unsigned char)info->name[i];\n                fprintf(log, \" %02x\", b);\n            }\n            fprintf(log, \"\\n\");\n        }\n        fclose(log);\n    }\n\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Log result and post-call buffer state to capture possible overflow\n       evidence (e.g. missing NUL within the declared buffer). */\n    log = fopen(\"/tmp/logs/893.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"EXIT lfs_dir_read: err=%d lfs=%p dir=%p info=%p\\n\",\n                err, (void*)lfs, (void*)dir, (void*)info);\n        if (info) {\n            size_t name_size = sizeof(info->name);\n            fprintf(log, \"  after: info->name_size = %zu\\n\", name_size);\n            /* Print bytes inside the declared buffer only. This avoids\n               deliberately reading beyond allocated storage while still\n               demonstrating whether a terminating NUL is present inside\n               the buffer. */\n            fprintf(log, \"  after: info->name_bytes =\");\n            for (size_t i = 0; i < name_size; i++) {\n                unsigned char b = (unsigned char)info->name[i];\n                fprintf(log, \" %02x\", b);\n            }\n            fprintf(log, \"\\n\");\n            /* Also try to print the buffer interpreted as a C string, but\n               only as a best-effort; if it isn't NUL-terminated within\n               the declared buffer this will print up to the next NUL\n               (undefined behavior in general), so we avoid calling it\n               unconditionally. Instead, check if a NUL exists within the\n               declared range and print the string only in that case. */\n            int has_nul = 0;\n            for (size_t i = 0; i < name_size; i++) {\n                if (info->name[i] == '\\0') { has_nul = 1; break; }\n            }\n            if (has_nul) {\n                fprintf(log, \"  after: info->name_str = \\\"\");\n                /* Safe to print as string because we found a NUL within\n                   the declared buffer. */\n                fprintf(log, \"%s\", info->name);\n                fprintf(log, \"\\\"\\n\");\n            } else {\n                fprintf(log, \"  after: info->name_str = <no NUL within declared buffer>\\n\");\n            }\n        }\n        fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}