{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcpy(info->name, \"/\") writes two bytes ( '/' and the terminating NUL ) into info->name, which has size LFS_NAME_MAX+1. If LFS_NAME_MAX is defined as 0 (making info->name length 1) or otherwise the array is smaller than 2, this strcpy will write beyond the bounds of info->name. Therefore this use of strcpy can result in out-of-bounds access when the configured name buffer is too small.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read with it.\n  - Your function must have the exact same signature as lfs_dir_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open log file for appending probe information */\n    FILE *___lfs_log_fp = fopen(\"/tmp/logs/893.txt\", \"a\");\n    if (___lfs_log_fp) {\n        fprintf(___lfs_log_fp, \"ENTER lfs_dir_read: lfs=%p dir=%p info=%p\\n\",\n                (void*)lfs, (void*)dir, (void*)info);\n        fflush(___lfs_log_fp);\n    }\n\n    if (err) {\n        if (___lfs_log_fp) {\n            fprintf(___lfs_log_fp, \"LFS_LOCK returned error: %d\\n\", err);\n            fclose(___lfs_log_fp);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe: dump a small prefix of the memory at info (if non-NULL).\n       This helps capture the state that may lead to string operations\n       writing beyond buffer bounds (e.g. observing a small/zero-length\n       name buffer). We limit to a fixed small number of bytes to\n       reduce risk of reading far beyond the object. */\n    if (___lfs_log_fp) {\n        if (info) {\n            unsigned char *___lfs_probe = (unsigned char*)info;\n            fprintf(___lfs_log_fp, \"info memory prefix (hex):\");\n            for (int ___i = 0; ___i < 16; ___i++) {\n                /* Attempt to print first 16 bytes; if these bytes are\n                   invalid it may still read them (UB), but is useful for\n                   debugging in typical test scenarios where info points\n                   to a valid object. */\n                fprintf(___lfs_log_fp, \" %02x\", ___lfs_probe[___i]);\n            }\n            fprintf(___lfs_log_fp, \"\\n\");\n        } else {\n            fprintf(___lfs_log_fp, \"info is NULL\\n\");\n        }\n        fflush(___lfs_log_fp);\n    }\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    if (___lfs_log_fp) {\n        fprintf(___lfs_log_fp, \"lfs_dir_read_ returned: %d\\n\", err);\n        if (info) {\n            unsigned char *___lfs_probe2 = (unsigned char*)info;\n            fprintf(___lfs_log_fp, \"info memory prefix after call (hex):\");\n            for (int ___i = 0; ___i < 16; ___i++) {\n                fprintf(___lfs_log_fp, \" %02x\", ___lfs_probe2[___i]);\n            }\n            fprintf(___lfs_log_fp, \"\\n\");\n        }\n        fclose(___lfs_log_fp);\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}