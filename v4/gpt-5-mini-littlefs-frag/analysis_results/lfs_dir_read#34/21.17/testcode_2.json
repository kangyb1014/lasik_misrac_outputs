{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes info->name (which has static size LFS_NAME_MAX+1) but requests a copy length of lfs->name_max+1. If lfs->name_max (from the on-disk superblock or runtime config) is greater than LFS_NAME_MAX, the called routine (lfs_dir_get) will copy up to lfs->name_max+1 bytes into info->name, causing out-of-bounds accesses (e.g. via memcpy/strcpy). Thus this use can violate Rule 21.17 unless the implementation guarantees lfs->name_max <= LFS_NAME_MAX before this call.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read with it.\n  - Your function must have the exact same signature as lfs_dir_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probing/logging: append a record to /tmp/logs/893.txt with\n       control flow and memory snapshots to help reproduce any\n       out-of-bounds copy into info. This preserves original\n       behavior while capturing state before and after the call. */\n    {\n        FILE *f = fopen(\"/tmp/logs/893.txt\", \"a\");\n        if (f) {\n            /* Basic entry header */\n            fprintf(f, \"-- lfs_dir_read ENTER --\\n\");\n            fprintf(f, \"lfs=%p dir=%p info=%p\\n\", (void*)lfs, (void*)dir, (void*)info);\n\n            /* Sizes of the involved objects (compile-time sizes). These\n               help determine expected buffer bounds without referencing\n               struct members directly. */\n            fprintf(f, \"sizeof(lfs_t)=%zu sizeof(lfs_dir_t)=%zu sizeof(struct lfs_info)=%zu\\n\",\n                    (size_t)sizeof(*lfs), (size_t)sizeof(*dir), (size_t)sizeof(*info));\n\n            /* Dump first N bytes of each structure (if pointer non-NULL).\n               We limit to a small number to avoid huge logs. This provides\n               a snapshot of the memory contents, including potential name\n               buffers inside struct lfs_info, without assuming field names. */\n            {\n                const size_t DUMP_MAX = 64;\n                size_t i, n;\n                unsigned char *p;\n\n                /* lfs */\n                if (lfs) {\n                    n = (sizeof(*lfs) < DUMP_MAX) ? sizeof(*lfs) : DUMP_MAX;\n                    p = (unsigned char*)lfs;\n                    fprintf(f, \"lfs[0..%zu]:\", n ? n - 1 : 0);\n                    for (i = 0; i < n; i++) {\n                        fprintf(f, \" %02x\", (unsigned)p[i]);\n                    }\n                    fprintf(f, \"\\n\");\n                } else {\n                    fprintf(f, \"lfs=NULL\\n\");\n                }\n\n                /* dir */\n                if (dir) {\n                    n = (sizeof(*dir) < DUMP_MAX) ? sizeof(*dir) : DUMP_MAX;\n                    p = (unsigned char*)dir;\n                    fprintf(f, \"dir[0..%zu]:\", n ? n - 1 : 0);\n                    for (i = 0; i < n; i++) {\n                        fprintf(f, \" %02x\", (unsigned)p[i]);\n                    }\n                    fprintf(f, \"\\n\");\n                } else {\n                    fprintf(f, \"dir=NULL\\n\");\n                }\n\n                /* info */\n                if (info) {\n                    n = (sizeof(*info) < DUMP_MAX) ? sizeof(*info) : DUMP_MAX;\n                    p = (unsigned char*)info;\n                    fprintf(f, \"info[0..%zu]:\", n ? n - 1 : 0);\n                    for (i = 0; i < n; i++) {\n                        fprintf(f, \" %02x\", (unsigned)p[i]);\n                    }\n                    fprintf(f, \"\\n\");\n                } else {\n                    fprintf(f, \"info=NULL\\n\");\n                }\n            }\n\n            fprintf(f, \"-- END ENTER --\\n\\n\");\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Post-call probe to capture any modifications to info that may\n       indicate an out-of-bounds write (e.g., changes to bytes beyond\n       the expected name buffer). */\n    {\n        FILE *f = fopen(\"/tmp/logs/893.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"-- lfs_dir_read EXIT --\\n\");\n            fprintf(f, \"ret=%d lfs=%p dir=%p info=%p\\n\", err, (void*)lfs, (void*)dir, (void*)info);\n\n            const size_t DUMP_MAX = 128; /* a bit larger to see after-write effects */\n            size_t i, n;\n            unsigned char *p;\n\n            if (info) {\n                n = (sizeof(*info) < DUMP_MAX) ? sizeof(*info) : DUMP_MAX;\n                p = (unsigned char*)info;\n                fprintf(f, \"info-post[0..%zu]:\", n ? n - 1 : 0);\n                for (i = 0; i < n; i++) {\n                    fprintf(f, \" %02x\", (unsigned)p[i]);\n                }\n                fprintf(f, \"\\n\");\n            } else {\n                fprintf(f, \"info=NULL\\n\");\n            }\n\n            fprintf(f, \"-- END EXIT --\\n\\n\");\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}