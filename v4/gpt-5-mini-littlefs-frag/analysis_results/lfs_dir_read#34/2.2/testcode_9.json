{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) expands to ((void)cfg), which only evaluates and discards lfs->cfg (no side-effects). Removing that statement would not affect program behaviour with the provided definitions, so this executed operation is dead code and violates MISRA C 2023 Rule 2.2. (Note: in other build configurations where LFS_UNLOCK performs real unlocking it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/898.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_read with it.\n  - Your function must have the exact same signature as lfs_dir_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_read to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    /* Preserve original behaviour */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Minimal, self-contained declarations for file logging syscalls and helpers.\n       We declare them here to avoid adding headers while still producing a runtime\n       log at /tmp/logs/898.txt. These declarations intentionally mirror the\n       signatures used so the code compiles in typical environments. */\n    extern int open(const char *pathname, int flags, ...);\n    extern int close(int fd);\n    extern int write(int fd, const void *buf, unsigned int count);\n    extern int snprintf(char *str, unsigned long size, const char *fmt, ...);\n\n    /* Numeric flag values for open(2) on POSIX systems. Using integers here\n       avoids introducing header dependencies. */\n    const int O_WRONLY = 1;\n    const int O_CREAT  = 64;\n    const int O_APPEND = 1024;\n\n    /* Open log file (append). If open fails, we simply skip logging but do not\n       change the function behaviour. */\n    int logfd = open(\"/tmp/logs/898.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n\n    /* Small stack buffer for formatting log messages. */\n    char buf[256];\n    int n = 0;\n\n    /* Log entry and the result of the lock call. */\n    n = snprintf(buf, sizeof(buf),\n            \"ENTER lfs_dir_read: lfs=%p dir=%p info=%p err_lock=%d\\n\",\n            (void*)lfs, (void*)dir, (void*)info, err);\n    if (logfd >= 0 && n > 0) {\n        /* cast n to unsigned int to match write prototype above */\n        (void)write(logfd, buf, (unsigned int)n);\n    }\n\n    if (err) {\n        /* Log early return due to lock failure, then return as original. */\n        n = snprintf(buf, sizeof(buf), \"lfs_dir_read: returning early, lock error=%d\\n\", err);\n        if (logfd >= 0 && n > 0) {\n            (void)write(logfd, buf, (unsigned int)n);\n            (void)close(logfd);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\", (void*)lfs, (void*)dir, (void*)info);\n\n    /* Call the internal worker and capture its result (preserve behaviour). */\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Log the result of the internal call. */\n    n = snprintf(buf, sizeof(buf), \"lfs_dir_read: lfs_dir_read_ returned %d\\n\", err);\n    if (logfd >= 0 && n > 0) {\n        (void)write(logfd, buf, (unsigned int)n);\n    }\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n\n    /* Log the value of lfs->cfg immediately before unlocking. This read is the\n       same read the LFS_UNLOCK(lfs->cfg) expression would perform; by logging\n       the value here we provide evidence that the unlock macro only evaluates\n       and discards the cfg parameter in configurations where it expands to\n       ((void)cfg). */\n    n = snprintf(buf, sizeof(buf), \"lfs_dir_read: about to LFS_UNLOCK with cfg=%p\\n\", (void*)lfs->cfg);\n    if (logfd >= 0 && n > 0) {\n        (void)write(logfd, buf, (unsigned int)n);\n    }\n\n    /* Call the unlock as in original code. This preserves program behaviour. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log after unlock to show control flow reached past the unlock call. */\n    n = snprintf(buf, sizeof(buf), \"lfs_dir_read: after LFS_UNLOCK, returning %d\\n\", err);\n    if (logfd >= 0 && n > 0) {\n        (void)write(logfd, buf, (unsigned int)n);\n        (void)close(logfd);\n    }\n\n    return err;\n}\n"
}