{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the for loop \"for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next)\", the third clause \"p = &(*p)->next\" (and the second clause \"*p\") access the object pointed to by p (i.e. *p), which is assigned to inside the loop body via \"*p = (*p)->next\". This means the second clause reads an object modified by the loop body and the third clause uses an object that is modified in the loop body, violating the requirement that the second clause shall not use objects modified in the loop body and the third clause shall not use objects modified in the loop body (MISRA C 2023 Rule 14.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/21.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_close code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_close with it.\n  - Your function must have the exact same signature as lfs_dir_close.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_close to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_close as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_close will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_close as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Preserve original locking behaviour */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe log file to capture control flow and state for debugging the\n       reported Rule 14.2 violation. We append so multiple runs accumulate\n       evidence. If fopen fails, we continue to preserve original behaviour. */\n    FILE *probe_log = fopen(\"/tmp/logs/21.txt\", \"a\");\n    if (probe_log) {\n        fprintf(probe_log, \"ENTER lfs_dir_close: lfs=%p dir=%p lock_err=%d\\n\",\n                (void*)lfs, (void*)dir, err);\n        fflush(probe_log);\n    }\n\n    if (err) {\n        if (probe_log) {\n            fprintf(probe_log, \"lfs_dir_close: early return due to lock error=%d\\n\", err);\n            fclose(probe_log);\n        }\n        return err;\n    }\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Call the internal close and log its result. The suspected for-loop\n       violation occurs inside lfs_dir_close_, so logging before/after this\n       call helps reproduce/control the scenario. */\n    err = lfs_dir_close_(lfs, dir);\n\n    if (probe_log) {\n        fprintf(probe_log, \"lfs_dir_close_: returned %d (lfs=%p dir=%p)\\n\",\n                err, (void*)lfs, (void*)dir);\n        fflush(probe_log);\n    }\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    if (probe_log) {\n        fprintf(probe_log, \"EXIT lfs_dir_close: unlocked, returning %d\\n\", err);\n        fclose(probe_log);\n    }\n\n    return err;\n}\n"
}