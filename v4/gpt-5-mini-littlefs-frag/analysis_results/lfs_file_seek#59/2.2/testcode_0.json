{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0), so every call LFS_LOCK(lfs->cfg) always yields 0. In lfs_file_seek this makes \"err\" always zero, so the conditional check if (err) { return err; } can never be taken and the only executed operation from the macro, (void)cfg, is a no-op. Removing the (void)cfg evaluation (and/or the error check) would not change program behaviour (assuming cfg has no observable side-effects such as volatile access), so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/258.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_seek code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_seek with it.\n  - Your function must have the exact same signature as lfs_file_seek.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_seek to check logs.\n  - Your function MUST preserve the original logic of lfs_file_seek as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_seek will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_seek as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry, LFS_LOCK result and cfg pointer to help reproduce\n       the reported dead-code scenario where LFS_LOCK(cfg) expands to ((void)cfg, 0)\n       and therefore err is always 0. Logs are appended to /tmp/logs/258.txt. */\n    {\n        FILE *fp = fopen(\"/tmp/logs/258.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"ENTER lfs_file_seek: lfs=%p file=%p off=%\"PRId32\" whence=%d LFS_LOCK_err=%d cfg=%p\\n\",\n                    (void*)lfs, (void*)file, off, whence, err, (void*)lfs->cfg);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    if (err) {\n        /* Log the error path if taken, then return as original implementation */\n        FILE *fp = fopen(\"/tmp/logs/258.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_file_seek: LFS_LOCK returned non-zero err=%d -> returning\\n\", err);\n            fflush(fp);\n            fclose(fp);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    /* Log the result and the fact that we're about to unlock */\n    {\n        FILE *fp = fopen(\"/tmp/logs/258.txt\", \"a\");\n        if (fp) {\n            fprintf(fp, \"lfs_file_seek -> %\"PRId32\" (about to LFS_UNLOCK cfg=%p)\\n\", res, (void*)lfs->cfg);\n            fflush(fp);\n            fclose(fp);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}