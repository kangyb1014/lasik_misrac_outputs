{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes (struct lfs_mlist*)file to lfs_mlist_isopen which is declared as taking non-const pointers, but lfs_mlist_isopen only inspects the list and does not modify *head or *node. Therefore the parameters (and the argument) could and should be const-qualified (e.g. const struct lfs_mlist *). By using a non-const pointer/cast here the code fails to qualify pointers as const where possible, violating MISRA C 2023 Rule 8.13. A fix is to change lfs_mlist_isopen to take const struct lfs_mlist *head, const struct lfs_mlist *node and call it with (const struct lfs_mlist*)file (or avoid the cast if types permit).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_seek code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_seek with it.\n  - Your function must have the exact same signature as lfs_file_seek.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_seek to check logs.\n  - Your function MUST preserve the original logic of lfs_file_seek as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_seek will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_seek as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Preserve original lock behavior */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open probe log (append) */\n    FILE *probe_f = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (probe_f) {\n        fprintf(probe_f, \"ENTER lfs_file_seek: lfs=%p file=%p off=%\" PRId32 \" whence=%d\\n\",\n                (void*)lfs, (void*)file, off, whence);\n        fprintf(probe_f, \"LOCK result: %d\\n\", err);\n    }\n\n    if (err) {\n        if (probe_f) {\n            fprintf(probe_f, \"EARLY RETURN due to lock error: %d\\n\", err);\n            fclose(probe_f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /*\n     * Call lfs_mlist_isopen separately so we can log its input and output.\n     * This mirrors the original assertion but gives us a reproducible trace\n     * of the invocation that demonstrates the use of a non-const pointer\n     * (cast) when checking if the file is open.\n     */\n    struct lfs_mlist *cast_node = (struct lfs_mlist*)file;\n    if (probe_f) {\n        fprintf(probe_f, \"CALL lfs_mlist_isopen with head=%p node=%p (cast from file)\\n\",\n                (void*)lfs->mlist, (void*)cast_node);\n    }\n\n    int isopen = lfs_mlist_isopen(lfs->mlist, cast_node);\n\n    if (probe_f) {\n        fprintf(probe_f, \"lfs_mlist_isopen returned: %d\\n\", isopen);\n    }\n\n    LFS_ASSERT(isopen);\n\n    /* Proceed with original seek operation */\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n\n    if (probe_f) {\n        fprintf(probe_f, \"lfs_file_seek_ result: %\" PRId32 \"\\n\", res);\n        fprintf(probe_f, \"EXIT lfs_file_seek returning: %\" PRId32 \"\\n\", res);\n        fclose(probe_f);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}