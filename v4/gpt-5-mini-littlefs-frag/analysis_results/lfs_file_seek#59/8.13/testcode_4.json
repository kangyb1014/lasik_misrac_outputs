{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes non-const pointer parameters (struct lfs_mlist *head, struct lfs_mlist *node) but does not modify the pointed-to objects. According to MISRA C 2023 Rule 8.13, these should be const-qualified. The current implementation also takes the address of the parameter (&head) into a struct lfs_mlist **, which prevents simply making head const; the loop should instead iterate with a (const) pointer to the nodes. Example fix: change the signature to 'static bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)' and loop with 'for (const struct lfs_mlist *p = head; p; p = p->next) { if (p == node) return true; }'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_seek code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_seek with it.\n  - Your function must have the exact same signature as lfs_file_seek.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_seek to check logs.\n  - Your function MUST preserve the original logic of lfs_file_seek as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_seek will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_seek as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /* Log entry and parameters to allow reproducing the mlist/isopen scenario */\n    FILE *__lfs_log_fp = fopen(\"/tmp/logs/255.txt\", \"a\");\n    if (__lfs_log_fp) {\n        fprintf(__lfs_log_fp, \"ENTRY: lfs_file_seek called\\n\");\n        fprintf(__lfs_log_fp, \"  lfs=%p\\n\", (void*)lfs);\n        fprintf(__lfs_log_fp, \"  file=%p\\n\", (void*)file);\n        fprintf(__lfs_log_fp, \"  off=%\"PRId32\"\\n\", off);\n        fprintf(__lfs_log_fp, \"  whence=%d\\n\", whence);\n        /* Log the mlist head pointer being passed to lfs_mlist_isopen */\n        fprintf(__lfs_log_fp, \"  lfs->mlist(head)=%p\\n\", (void*)(lfs->mlist));\n        fflush(__lfs_log_fp);\n    }\n\n    /* Capture the is-open check result so we can log it and then assert the same\n       condition as the original code. This documents the control flow and state\n       used in the violation report (non-const pointers passed but not modified). */\n    int __lfs_isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n\n    if (__lfs_log_fp) {\n        fprintf(__lfs_log_fp, \"CALL: lfs_mlist_isopen(head=%p, node=%p) -> %d\\n\",\n                (void*)(lfs->mlist), (void*)((struct lfs_mlist*)file), __lfs_isopen);\n        if (!__lfs_isopen) {\n            fprintf(__lfs_log_fp, \"  NOTE: node not found in mlist (isopen==0)\\n\");\n        }\n        fflush(__lfs_log_fp);\n    }\n\n    /* Preserve original assertion behavior but use the previously computed value\n       to avoid calling the helper twice (which might have side effects). */\n    LFS_ASSERT(__lfs_isopen);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n\n    if (__lfs_log_fp) {\n        fprintf(__lfs_log_fp, \"EXIT: lfs_file_seek returned %\"PRId32\"\\n\", res);\n        fclose(__lfs_log_fp);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}