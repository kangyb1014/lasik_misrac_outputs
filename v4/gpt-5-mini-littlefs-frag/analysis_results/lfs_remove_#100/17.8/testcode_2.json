{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_remove_ the call lfs_dir_find(lfs, &cwd, &path, NULL) passes the address of the function parameter path. lfs_dir_find writes to *path (see line \"*path = name;\"), which modifies the caller's parameter variable path itself (i.e. the pointer), not the object it points to. This is a direct modification of a function parameter and thus violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/92.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_remove_:\n```c\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_remove_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_remove_ with it.\n  - Your function must have the exact same signature as lfs_remove_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_remove_ to check logs.\n  - Your function MUST preserve the original logic of lfs_remove_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_remove_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_remove_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_remove_(lfs_t *lfs, const char *path) {\n    /* Logging probe to capture control flow and state for Rule 17.8 investigation.\n       Logs are appended to /tmp/logs/92.txt. We attempt to preserve original logic\n       and only instrument with non-invasive logging. */\n    FILE *logfp = fopen(\"/tmp/logs/92.txt\", \"a\");\n    if (logfp) {\n        fprintf(logfp, \"ENTER lfs_remove_: lfs=%p, path_var_addr=%p, path_initial=%p, path_initial_str=%s\\n\",\n                (void*)lfs, (void*)&path, (void*)path, (path ? path : \"(null)\"));\n        fflush(logfp);\n    }\n\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        if (logfp) {\n            fprintf(logfp, \"EXIT lfs_remove_: early return from lfs_fs_forceconsistency, err=%d\\n\", err);\n            fclose(logfp);\n        }\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    const char *path_before_find = path; /* capture value before call */\n    if (logfp) {\n        fprintf(logfp, \"BEFORE lfs_dir_find: path_ptr=%p, path_str=%s, &path=%p\\n\",\n                (void*)path_before_find, (path_before_find ? path_before_find : \"(null)\"), (void*)&path);\n        fflush(logfp);\n    }\n\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    if (logfp) {\n        fprintf(logfp, \"AFTER lfs_dir_find: returned tag=%ld, path_ptr_now=%p, path_now_str=%s, &path=%p\\n\",\n                (long)tag, (void*)path, (path ? path : \"(null)\"), (void*)&path);\n        if (path_before_find != path) {\n            fprintf(logfp, \"NOTICE: path variable value changed by lfs_dir_find: before=%p -> after=%p\\n\",\n                    (void*)path_before_find, (void*)path);\n        } else {\n            fprintf(logfp, \"NOTICE: path variable not changed by lfs_dir_find\\n\");\n        }\n        fflush(logfp);\n    }\n\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        int ret = (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n        if (logfp) {\n            fprintf(logfp, \"EXIT lfs_remove_: invalid tag or id, tag=%ld, tag_id=%u, return=%d\\n\",\n                    (long)tag, (unsigned)lfs_tag_id(tag), ret);\n            fclose(logfp);\n        }\n        return ret;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_dir_get failed, res=%ld\\n\", (long)res);\n                fclose(logfp);\n            }\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_dir_fetch failed, err=%d\\n\", err);\n                fclose(logfp);\n            }\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: directory not empty, count=%u, split=%u\\n\",\n                        (unsigned)dir.m.count, (unsigned)dir.m.split);\n                fclose(logfp);\n            }\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_fs_preporphans(+1) failed, err=%d\\n\", err);\n                fclose(logfp);\n            }\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    if (logfp) {\n        fprintf(logfp, \"ABOUT TO lfs_dir_commit: cwd=%p, tag_id=%u\\n\", (void*)&cwd, (unsigned)lfs_tag_id(tag));\n        fflush(logfp);\n    }\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        if (logfp) {\n            fprintf(logfp, \"lfs_dir_commit FAILED: err=%d, restored mlist, exiting\\n\", err);\n            fclose(logfp);\n        }\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (logfp) {\n        fprintf(logfp, \"AFTER delete: restored mlist to %p\\n\", (void*)lfs->mlist);\n        fflush(logfp);\n    }\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        if (logfp) {\n            fprintf(logfp, \"gstate has orphans: fixing orphan for tag_id=%u\\n\", (unsigned)lfs_tag_id(tag));\n            fflush(logfp);\n        }\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_fs_preporphans(-1) failed, err=%d\\n\", err);\n                fclose(logfp);\n            }\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_fs_pred failed, err=%d\\n\", err);\n                fclose(logfp);\n            }\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            if (logfp) {\n                fprintf(logfp, \"EXIT lfs_remove_: lfs_dir_drop failed, err=%d\\n\", err);\n                fclose(logfp);\n            }\n            return err;\n        }\n    }\n\n    if (logfp) {\n        fprintf(logfp, \"EXIT lfs_remove_: success (return 0). Final path pointer=%p, path_str=%s\\n\",\n                (void*)path, (path ? path : \"(null)\"));\n        fclose(logfp);\n    }\n\n    return 0;\n}\n"
}