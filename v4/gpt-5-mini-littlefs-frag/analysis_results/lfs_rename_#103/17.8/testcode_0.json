{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: lfs_rename_ passes the address of its parameter 'newpath' (&newpath) to lfs_dir_find which has signature (const char **path, ...). lfs_dir_find assigns to *path (see '*path = name;' in its body), which changes the value of the local parameter variable newpath in lfs_rename_. This modifies a function parameter (newpath) and thus violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_rename_:\n```c\nstatic int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_rename_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_rename_ with it.\n  - Your function must have the exact same signature as lfs_rename_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_rename_ to check logs.\n  - Your function MUST preserve the original logic of lfs_rename_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_rename_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_rename_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    /* Logging probes to capture control flow and state for Rule 17.8 investigation.\n       Logs are appended to /tmp/logs/452.txt. Keep logging lightweight so behavior\n       of the function is unchanged. */\n    FILE *___lfs_log = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"ENTER lfs_rename_: lfs=%p, &oldpath=%p, oldpath_value=%p, oldpath_str=%s, &newpath=%p, newpath_value=%p, newpath_str=%s\\n\",\n                (void*)lfs,\n                (const void*)&oldpath, (const void*)oldpath, (oldpath?oldpath:\"(null)\"),\n                (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"after lfs_fs_forceconsistency: err=%d\\n\", err);\n        fflush(___lfs_log);\n    }\n    if (err) {\n        if (___lfs_log) { fclose(___lfs_log); }\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"before lfs_dir_find (old): &oldcwd=%p, &oldpath_param=%p, oldpath_value=%p, oldpath_str=%s\\n\",\n                (void*)&oldcwd, (const void*)&oldpath, (const void*)oldpath, (oldpath?oldpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"after lfs_dir_find (old): oldtag=%d, &oldpath_param=%p, oldpath_value=%p, oldpath_str=%s\\n\",\n                (int)oldtag, (const void*)&oldpath, (const void*)oldpath, (oldpath?oldpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        if (___lfs_log) { fclose(___lfs_log); }\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"before lfs_dir_find (new): &newcwd=%p, &newpath_param=%p, newpath_value=%p, newpath_str=%s\\n\",\n                (void*)&newcwd, (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"after lfs_dir_find (new): prevtag=%d, newid=%u, &newpath_param=%p, newpath_value=%p, newpath_str=%s\\n\",\n                (int)prevtag, (unsigned)newid, (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        if (___lfs_log) { fclose(___lfs_log); }\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"after find entries: samepair=%d, newoldid=%u\\n\",\n                (int)samepair, (unsigned)newoldid);\n        fflush(___lfs_log);\n    }\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            if (___lfs_log) { fprintf(___lfs_log, \"reject: newpath is dir but old is not dir\\n\"); fflush(___lfs_log); fclose(___lfs_log); }\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (___lfs_log) {\n            fprintf(___lfs_log, \"nlen=%llu, name_max=%llu\\n\",\n                    (unsigned long long)nlen, (unsigned long long)lfs->name_max);\n            fflush(___lfs_log);\n        }\n        if (nlen > lfs->name_max) {\n            if (___lfs_log) { fprintf(___lfs_log, \"reject: name too long\\n\"); fflush(___lfs_log); fclose(___lfs_log); }\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            if (___lfs_log) { fprintf(___lfs_log, \"adjust newoldid: before=%u, newid=%u\\n\", (unsigned)newoldid, (unsigned)newid); fflush(___lfs_log); }\n            newoldid += 1;\n            if (___lfs_log) { fprintf(___lfs_log, \"adjust newoldid: after=%u\\n\", (unsigned)newoldid); fflush(___lfs_log); }\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        if (___lfs_log) { fprintf(___lfs_log, \"type mismatch prevtag=%d oldtag=%d\\n\", (int)prevtag, (int)oldtag); fflush(___lfs_log); fclose(___lfs_log); }\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        if (___lfs_log) { fprintf(___lfs_log, \"no-op rename to same id\\n\"); fflush(___lfs_log); fclose(___lfs_log); }\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_dir_get for prevpair res=%d\\n\", (int)res); fflush(___lfs_log); }\n        if (res < 0) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_dir_fetch err=%d, prevdir.count=%d, prevdir.split=%d\\n\", err, (int)prevdir.m.count, (int)prevdir.m.split); fflush(___lfs_log); }\n        if (err) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            if (___lfs_log) { fprintf(___lfs_log, \"reject: dir not empty\\n\"); fflush(___lfs_log); fclose(___lfs_log); }\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_fs_preporphans +1 err=%d\\n\", err); fflush(___lfs_log); }\n        if (err) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_fs_prepmove called (not samepair) newoldid=%u\\n\", (unsigned)newoldid); fflush(___lfs_log); }\n    }\n\n    // move over all attributes\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"before lfs_dir_commit: &newcwd=%p, newid=%u, newpath_param_addr=%p, newpath_value=%p, newpath_str=%s\\n\",\n                (void*)&newcwd, (unsigned)newid, (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_dir_commit failed err=%d, restoring mlist\\n\", err); fflush(___lfs_log); fclose(___lfs_log); }\n        return err;\n    }\n\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"after lfs_dir_commit: err=%d, &newpath_param=%p, newpath_value=%p, newpath_str=%s\\n\",\n                err, (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            if (___lfs_log) { fprintf(___lfs_log, \"second lfs_dir_commit failed err=%d\\n\", err); fflush(___lfs_log); fclose(___lfs_log); }\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_fs_preporphans -1 err=%d\\n\", err); fflush(___lfs_log); }\n        if (err) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_fs_pred err=%d\\n\", err); fflush(___lfs_log); }\n        if (err) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (___lfs_log) { fprintf(___lfs_log, \"lfs_dir_drop err=%d\\n\", err); fflush(___lfs_log); }\n        if (err) {\n            if (___lfs_log) { fclose(___lfs_log); }\n            return err;\n        }\n    }\n\n    if (___lfs_log) {\n        fprintf(___lfs_log, \"EXIT lfs_rename_: returning 0, final &newpath=%p, newpath_value=%p, newpath_str=%s\\n\",\n                (const void*)&newpath, (const void*)newpath, (newpath?newpath:\"(null)\"));\n        fflush(___lfs_log);\n        fclose(___lfs_log);\n    }\n\n    return 0;\n}\n"
}