{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nlfs_rename_ passes &oldpath (a function parameter of type const char *) to lfs_dir_find, which assigns to *path (\"*path = name;\"). That write modifies the pointer variable oldpath in the caller (changes the pointer value), i.e. the pointer parameter itself is modified rather than only the object it points to, violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/452.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_rename_:\n```c\nstatic int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_rename_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_rename_ with it.\n  - Your function must have the exact same signature as lfs_rename_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_rename_ to check logs.\n  - Your function MUST preserve the original logic of lfs_rename_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_rename_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_rename_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    // Logging helper: append to log file for tracing\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_rename_: lfs=%p, &oldpath=%p, oldpath=%p, oldpath_str=%s, &newpath=%p, newpath=%p, newpath_str=%s\\n\",\n                    (void *)lfs, (void *)&oldpath, (void *)oldpath,\n                    oldpath ? oldpath : \"(null)\", (void *)&newpath,\n                    (void *)newpath, newpath ? newpath : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: early return from lfs_fs_forceconsistency err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"BEFORE lfs_dir_find (old): &oldpath=%p, oldpath=%p, oldpath_str=%s\\n\",\n                    (void *)&oldpath, (void *)oldpath,\n                    oldpath ? oldpath : \"(null)\");\n            fclose(f);\n        }\n    }\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"AFTER  lfs_dir_find (old): returned oldtag=0x%08x, &oldpath=%p, oldpath=%p, oldpath_str=%s\\n\",\n                    (unsigned)oldtag, (void *)&oldpath, (void *)oldpath,\n                    oldpath ? oldpath : \"(null)\");\n            fclose(f);\n        }\n    }\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: oldtag invalid oldtag=0x%08x\\n\", (unsigned)oldtag);\n            fclose(f);\n        }\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"BEFORE lfs_dir_find (new): &newpath=%p, newpath=%p, newpath_str=%s\\n\",\n                    (void *)&newpath, (void *)newpath,\n                    newpath ? newpath : \"(null)\");\n            fclose(f);\n        }\n    }\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"AFTER  lfs_dir_find (new): returned prevtag=0x%08x, newid=%u, &newpath=%p, newpath=%p, newpath_str=%s\\n\",\n                    (unsigned)prevtag, (unsigned)newid, (void *)&newpath, (void *)newpath,\n                    newpath ? newpath : \"(null)\");\n            fclose(f);\n        }\n    }\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: prevtag invalid prevtag=0x%08x\\n\", (unsigned)prevtag);\n            fclose(f);\n        }\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: LFS_ERR_NOTDIR (trailing slash on non-dir)\\n\");\n                fclose(f);\n            }\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: LFS_ERR_NAMETOOLONG nlen=%u, name_max=%u\\n\",\n                        (unsigned)nlen, (unsigned)lfs->name_max);\n                fclose(f);\n            }\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: type mismatch prevtag_type=%u oldtag_type=%u\\n\",\n                    (unsigned)lfs_tag_type3(prevtag), (unsigned)lfs_tag_type3(oldtag));\n            fclose(f);\n        }\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: renaming to self (no-op)\\n\");\n            fclose(f);\n        }\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (res < 0) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_dir_get failed res=0x%08x\\n\", (unsigned)res);\n                fclose(f);\n            }\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_dir_fetch failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: LFS_ERR_NOTEMPTY count=%u, split=%u\\n\",\n                        (unsigned)prevdir.m.count, (unsigned)prevdir.m.split);\n                fclose(f);\n            }\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_fs_preporphans(+1) failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_rename_: lfs_dir_commit failed err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: second lfs_dir_commit failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_fs_preporphans(-1) failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_fs_pred failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n            if (f) {\n                fprintf(f, \"EXIT lfs_rename_: lfs_dir_drop failed err=%d\\n\", err);\n                fclose(f);\n            }\n            return err;\n        }\n    }\n\n    FILE *f = fopen(\"/tmp/logs/452.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"EXIT lfs_rename_: success, final &oldpath=%p, oldpath=%p, oldpath_str=%s, &newpath=%p, newpath=%p, newpath_str=%s\\n\",\n                (void *)&oldpath, (void *)oldpath, oldpath ? oldpath : \"(null)\",\n                (void *)&newpath, (void *)newpath, newpath ? newpath : \"(null)\");\n        fclose(f);\n    }\n\n    return 0;\n}\n"
}