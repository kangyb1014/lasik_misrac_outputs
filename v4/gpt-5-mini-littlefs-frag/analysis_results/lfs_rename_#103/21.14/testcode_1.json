{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_find the code compares a path component against the literal \"..\" using memcmp(suffix, \"..\", 2) (also similar uses for \".\" elsewhere). This uses memcmp to compare a C string literal (null\u2011terminated string) against a path substring and therefore violates MISRA C 2023 Rule 21.14. Replace with strncmp(suffix, \"..\", 2) or an explicit character comparison (e.g. suffix[0]=='.' && suffix[1]=='.') to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/454.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_rename_:\n```c\nstatic int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            return LFS_ERR_NOTDIR;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (nlen > lfs->name_max) {\n            return LFS_ERR_NAMETOOLONG;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            newoldid += 1;\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n    } else if (samepair && newid == newoldid) {\n        // we're renaming to ourselves??\n        return 0;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (err) {\n            return err;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n    }\n\n    if (!samepair) {\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (err) {\n        lfs->mlist = prevdir.next;\n        return err;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (err) {\n            lfs->mlist = prevdir.next;\n            return err;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_rename_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_rename_ with it.\n  - Your function must have the exact same signature as lfs_rename_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_rename_ to check logs.\n  - Your function MUST preserve the original logic of lfs_rename_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_rename_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_rename_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    /* Local include so we can log to a file regardless of project includes */\n    #include <stdio.h>\n\n    FILE *logf = fopen(\"/tmp/logs/454.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_rename_: lfs=%p oldpath='%s' newpath='%s'\\n\",\n                (void *)lfs, oldpath ? oldpath : \"(null)\", newpath ? newpath : \"(null)\");\n        fflush(logf);\n    }\n\n    int ret = 0;\n    int err = lfs_fs_forceconsistency(lfs);\n    if (logf) {\n        fprintf(logf, \"after lfs_fs_forceconsistency: err=%d\\n\", err);\n        fflush(logf);\n    }\n    if (err) {\n        ret = err;\n        goto cleanup;\n    }\n\n    // find old entry\n    lfs_mdir_t oldcwd;\n    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_find(old): oldtag=%d tag_id=%u\\n\",\n                (int)oldtag, (unsigned)lfs_tag_id(oldtag));\n        fflush(logf);\n    }\n    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {\n        ret = (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;\n        goto cleanup;\n    }\n\n    // find new entry\n    lfs_mdir_t newcwd;\n    uint16_t newid;\n    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_find(new): prevtag=%d tag_id=%u newid=%u\\n\",\n                (int)prevtag, (unsigned)lfs_tag_id(prevtag), (unsigned)newid);\n        fflush(logf);\n    }\n    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&\n            !(prevtag == LFS_ERR_NOENT && lfs_path_islast(newpath))) {\n        ret = (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;\n        goto cleanup;\n    }\n\n    // if we're in the same pair there's a few special cases...\n    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);\n    uint16_t newoldid = lfs_tag_id(oldtag);\n    if (logf) {\n        fprintf(logf, \"samepair=%d newoldid=%u\\n\", (int)samepair, (unsigned)newoldid);\n        fflush(logf);\n    }\n\n    struct lfs_mlist prevdir;\n    prevdir.next = lfs->mlist;\n    if (prevtag == LFS_ERR_NOENT) {\n        // if we're a file, don't allow trailing slashes\n        if (lfs_path_isdir(newpath)\n                && lfs_tag_type3(oldtag) != LFS_TYPE_DIR) {\n            if (logf) {\n                fprintf(logf, \"error: newpath is a dir but oldtag is not dir\\n\");\n                fflush(logf);\n            }\n            ret = LFS_ERR_NOTDIR;\n            goto cleanup;\n        }\n\n        // check that name fits\n        lfs_size_t nlen = lfs_path_namelen(newpath);\n        if (logf) {\n            fprintf(logf, \"nlen=%u name_max=%u\\n\", (unsigned)nlen, (unsigned)lfs->name_max);\n            fflush(logf);\n        }\n        if (nlen > lfs->name_max) {\n            ret = LFS_ERR_NAMETOOLONG;\n            goto cleanup;\n        }\n\n        // there is a small chance we are being renamed in the same\n        // directory/ to an id less than our old id, the global update\n        // to handle this is a bit messy\n        if (samepair && newid <= newoldid) {\n            if (logf) {\n                fprintf(logf, \"adjusting newoldid: before=%u newid=%u\\n\",\n                        (unsigned)newoldid, (unsigned)newid);\n                fflush(logf);\n            }\n            newoldid += 1;\n            if (logf) {\n                fprintf(logf, \"adjusting newoldid: after=%u\\n\", (unsigned)newoldid);\n                fflush(logf);\n            }\n        }\n    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {\n        if (logf) {\n            fprintf(logf, \"type mismatch: prevtag_type=%d oldtag_type=%d\\n\",\n                    (int)lfs_tag_type3(prevtag), (int)lfs_tag_type3(oldtag));\n            fflush(logf);\n        }\n        ret = (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n                ? LFS_ERR_ISDIR\n                : LFS_ERR_NOTDIR;\n        goto cleanup;\n    } else if (samepair && newid == newoldid) {\n        if (logf) {\n            fprintf(logf, \"renaming to self (samepair && newid==newoldid)\\n\");\n            fflush(logf);\n        }\n        ret = 0;\n        goto cleanup;\n    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t prevpair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);\n        if (logf) {\n            fprintf(logf, \"after lfs_dir_get (prevdir struct): res=%d\\n\", (int)res);\n            fflush(logf);\n        }\n        if (res < 0) {\n            ret = (int)res;\n            goto cleanup;\n        }\n        lfs_pair_fromle32(prevpair);\n\n        // must be empty before removal\n        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n        if (logf) {\n            fprintf(logf, \"after lfs_dir_fetch prevdir.m.count=%u prevdir.m.split=%d\\n\",\n                    (unsigned)prevdir.m.count, (int)prevdir.m.split);\n            fflush(logf);\n        }\n        if (err) {\n            ret = err;\n            goto cleanup;\n        }\n\n        if (prevdir.m.count > 0 || prevdir.m.split) {\n            if (logf) {\n                fprintf(logf, \"prevdir not empty: count=%u split=%d\\n\",\n                        (unsigned)prevdir.m.count, (int)prevdir.m.split);\n                fflush(logf);\n            }\n            ret = LFS_ERR_NOTEMPTY;\n            goto cleanup;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphants(lfs, +1);\n        if (logf) {\n            fprintf(logf, \"after lfs_fs_preporphants(+1): err=%d\\n\", err);\n            fflush(logf);\n        }\n        if (err) {\n            ret = err;\n            goto cleanup;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        prevdir.type = 0;\n        prevdir.id = 0;\n        lfs->mlist = &prevdir;\n        if (logf) {\n            fprintf(logf, \"set lfs->mlist to prevdir (%p)\\n\", (void *)&prevdir);\n            fflush(logf);\n        }\n    }\n\n    if (!samepair) {\n        if (logf) {\n            fprintf(logf, \"calling lfs_fs_prepmove(newoldid=%u, oldcwd.pair)\\n\", (unsigned)newoldid);\n            fflush(logf);\n        }\n        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n    }\n\n    // move over all attributes\n    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(\n            {LFS_MKTAG_IF(prevtag != LFS_ERR_NOENT,\n                LFS_TYPE_DELETE, newid, 0), NULL},\n            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},\n            {LFS_MKTAG(lfs_tag_type3(oldtag),\n                newid, lfs_path_namelen(newpath)), newpath},\n            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},\n            {LFS_MKTAG_IF(samepair,\n                LFS_TYPE_DELETE, newoldid, 0), NULL}));\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_commit(newcwd): err=%d\\n\", err);\n        fflush(logf);\n    }\n    if (err) {\n        lfs->mlist = prevdir.next;\n        if (logf) {\n            fprintf(logf, \"commit failed, restored lfs->mlist to %p, err=%d\\n\",\n                    (void *)prevdir.next, err);\n            fflush(logf);\n        }\n        ret = err;\n        goto cleanup;\n    }\n\n    // let commit clean up after move (if we're different! otherwise move\n    // logic already fixed it for us)\n    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {\n        // prep gstate and delete move id\n        lfs_fs_prepmove(lfs, 0x3ff, NULL);\n        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(\n                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));\n        if (logf) {\n            fprintf(logf, \"after lfs_dir_commit(oldcwd delete move): err=%d\\n\", err);\n            fflush(logf);\n        }\n        if (err) {\n            lfs->mlist = prevdir.next;\n            if (logf) {\n                fprintf(logf, \"move cleanup commit failed, restored lfs->mlist to %p, err=%d\\n\",\n                        (void *)prevdir.next, err);\n                fflush(logf);\n            }\n            ret = err;\n            goto cleanup;\n        }\n    }\n\n    lfs->mlist = prevdir.next;\n    if (logf) {\n        fprintf(logf, \"restored lfs->mlist to %p\\n\", (void *)prevdir.next);\n        fflush(logf);\n    }\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(prevtag != LFS_ERR_NOENT\n                && lfs_tag_type3(prevtag) == LFS_TYPE_DIR);\n\n        if (logf) {\n            fprintf(logf, \"gstate reports orphans, fixing up\\n\");\n            fflush(logf);\n        }\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (logf) {\n            fprintf(logf, \"after lfs_fs_preporphants(-1): err=%d\\n\", err);\n            fflush(logf);\n        }\n        if (err) {\n            ret = err;\n            goto cleanup;\n        }\n\n        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n        if (logf) {\n            fprintf(logf, \"after lfs_fs_pred: err=%d\\n\", err);\n            fflush(logf);\n        }\n        if (err) {\n            ret = err;\n            goto cleanup;\n        }\n\n        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n        if (logf) {\n            fprintf(logf, \"after lfs_dir_drop: err=%d\\n\", err);\n            fflush(logf);\n        }\n        if (err) {\n            ret = err;\n            goto cleanup;\n        }\n    }\n\n    ret = 0;\n\ncleanup:\n    if (logf) {\n        fprintf(logf, \"EXIT lfs_rename_: ret=%d\\n\", ret);\n        fclose(logf);\n    }\n    return ret;\n}\n"
}