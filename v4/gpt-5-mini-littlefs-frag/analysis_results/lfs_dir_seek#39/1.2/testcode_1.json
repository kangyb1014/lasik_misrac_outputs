{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro is defined as #define LFS_TRACE(__VA_ARGS__) using __VA_ARGS__ in the macro parameter list. The use of __VA_ARGS__ in the macro header (instead of the standard C99 form using an ellipsis '...') is a compiler-specific extension rather than standard C. This therefore constitutes use of a language extension and violates MISRA C 2023 Rule 1.2. (The compliant form would be #define LFS_TRACE(...) for a C99/C11 variadic macro, or avoid variadic macros if targeting pre-C99 compilers.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/907.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_seek code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_seek with it.\n  - Your function must have the exact same signature as lfs_dir_seek.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_seek to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_seek as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_seek will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and lock result to help reproduce/report the macro-related issue. */\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_dir_seek: lfs=%p dir=%p off=%\" PRIu32 \" LFS_LOCK_ret=%d\\n\",\n                    (void*)lfs, (void*)dir, off, err);\n#ifdef LFS_TRACE\n            fprintf(f, \"NOTE: LFS_TRACE is defined at compile time.\\n\");\n#else\n            fprintf(f, \"NOTE: LFS_TRACE is NOT defined at compile time.\\n\");\n#endif\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* Log early return due to lock failure */\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_dir_seek: early return from LFS_LOCK with err=%d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\" PRIu32 \")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Log before delegating to helper */\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"CALL lfs_dir_seek_: lfs=%p dir=%p off=%\" PRIu32 \"\\n\",\n                    (void*)lfs, (void*)dir, off);\n            fclose(f);\n        }\n    }\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log result of helper */\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"RETURN from lfs_dir_seek_: err=%d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    /* Preserve original trace call */\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before exit */\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT lfs_dir_seek: final err=%d\\n\", err);\n            fclose(f);\n        }\n    }\n\n    return err;\n}"
}