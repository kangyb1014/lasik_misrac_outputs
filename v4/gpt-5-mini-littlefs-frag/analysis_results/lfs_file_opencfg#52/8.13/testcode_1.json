{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void*)cfg->attrs casts away the const qualification of a member accessed via a pointer to const struct (cfg is declared as const struct lfs_file_config *). This discards the const qualifier from the pointer-to-attrs and therefore violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). A compliant fix is to preserve the const qualification, e.g. cast to (const void*)cfg->attrs and adjust the LFS_TRACE prototype/usage to accept/display const void * if needed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/855.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_opencfg code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_opencfg with it.\n  - Your function must have the exact same signature as lfs_file_opencfg.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_opencfg to check logs.\n  - Your function MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_opencfg will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Minimal file-based probe logging to capture control flow and state. */\n    {\n        /* Use local safe snapshots to avoid dereferencing NULL cfg in logs */\n        const void *cfg_ptr = (const void*)cfg;\n        const void *buffer_ptr = NULL;\n        const void *attrs_ptr = NULL;\n        unsigned attr_count = 0u;\n\n        if (cfg) {\n            buffer_ptr = (const void*)cfg->buffer;\n            attrs_ptr = (const void*)cfg->attrs; /* note: attrs is const-qualified */\n            attr_count = (unsigned)cfg->attr_count;\n        }\n\n        FILE *logf = fopen(\"/tmp/logs/855.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"ENTER lfs_file_opencfg: lfs=%p file=%p path=\\\"%s\\\" flags=%x cfg=%p { .buffer=%p, .attrs=%p, .attr_count=%u }\\n\",\n                    (void*)lfs, (void*)file, (path?path:\"(null)\"), (unsigned)flags,\n                    cfg_ptr, buffer_ptr, attrs_ptr, attr_count);\n\n            if (err) {\n                fprintf(logf, \"  -> LFS_LOCK returned err=%d, returning early\\n\", err);\n            } else {\n                /* Log that we will call LFS_TRACE which deliberately casts attrs to (void*) in the original code\n                   This reproduces the scenario where const qualification may be discarded in the trace. */\n                fprintf(logf, \"  -> About to invoke LFS_TRACE with (void*)cfg->attrs cast: (void*)%p\\n\", (void*)attrs_ptr);\n            }\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg ? cfg->buffer : NULL, (void*)cfg->attrs, cfg ? cfg->attr_count : 0);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n\n    /* Log the return result as well to the file probe */\n    {\n        FILE *logf = fopen(\"/tmp/logs/855.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"EXIT lfs_file_opencfg: result=%d lfs=%p file=%p path=\\\"%s\\\"\\n\",\n                    err, (void*)lfs, (void*)file, (path?path:\"(null)\"));\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}