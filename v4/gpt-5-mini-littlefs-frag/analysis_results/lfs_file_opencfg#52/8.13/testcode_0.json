{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member 'buffer' in struct lfs_file_config is declared as a non-const pointer (for example: void *buffer), then using cfg->buffer here violates MISRA C 2023 Rule 8.13 because a pointer (cfg->buffer) obtained from a const-qualified configuration object points to a non-const type. To conform, the member should be declared with a const-qualified pointee (for example: const void *buffer) or otherwise ensure the pointer type is const where possible. If, instead, 'buffer' is already declared as a const-qualified pointer (e.g. const void *buffer), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/855.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_opencfg code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_opencfg with it.\n  - Your function must have the exact same signature as lfs_file_opencfg.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_opencfg to check logs.\n  - Your function MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_opencfg will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Minimal entry log to demonstrate function was entered and to record\n       cfg and its buffer pointer and compile-time expression type. This\n       helps reproduce whether cfg->buffer is a const-qualified pointer or\n       not (detected via _Generic on the expression type). */\n    if (!err) {\n        FILE *log = fopen(\"/tmp/logs/855.txt\", \"a\");\n        if (log) {\n            /* Determine the compile-time type of the expression `cfg->buffer`.\n               If the member in the struct was declared as `const void *buffer`,\n               this will yield \"const void *\"; if it was `void *buffer`, it will\n               yield \"void *\". This is the key piece of evidence for the\n               MISRA 8.13 scenario described. */\n            const char *buf_type = \"<unknown>\";\n            /* Use _Generic to discriminate the expression's type without\n               introducing new macros or altering program logic. */\n            buf_type = _Generic((cfg->buffer),\n                               const void *: \"const void *\",\n                               void *: \"void *\",\n                               default: \"other\");\n\n            fprintf(log, \"ENTER lfs_file_opencfg: lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%X\\n\",\n                    (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags);\n            fprintf(log, \"  cfg=%p, cfg->buffer=%p (%s), cfg->attrs=%p, cfg->attr_count=%\" PRIu32 \"\\n\",\n                    (const void*)cfg, (const void*)(cfg ? cfg->buffer : NULL), buf_type,\n                    (void*)(cfg ? cfg->attrs : NULL), cfg ? cfg->attr_count : 0);\n            fclose(log);\n        }\n    }\n\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log the result and state after the underlying open operation. */\n    {\n        FILE *log = fopen(\"/tmp/logs/855.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT  lfs_file_opencfg: result=%d, lfs=%p, file=%p, path=\\\"%s\\\"\\n\",\n                    err, (void*)lfs, (void*)file, path ? path : \"(null)\");\n            /* Repeat cfg info to capture state after the call (in case other\n               operations modified related state). */\n            const char *buf_type = _Generic((cfg->buffer),\n                                           const void *: \"const void *\",\n                                           void *: \"void *\",\n                                           default: \"other\");\n            fprintf(log, \"  cfg=%p, cfg->buffer=%p (%s), cfg->attrs=%p, cfg->attr_count=%\" PRIu32 \"\\n\",\n                    (const void*)cfg, (const void*)(cfg ? cfg->buffer : NULL), buf_type,\n                    (void*)(cfg ? cfg->attrs : NULL), cfg ? cfg->attr_count : 0);\n            fclose(log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}