{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the parameter 'path' (const char *path) is modified\u2014its address is passed to lfs_dir_find(&path,...), which updates the local parameter value (advancing the pointer). This changes the function parameter itself, which violates MISRA C 2023 Rule 17.8. (Modifying objects pointed-to by pointer parameters, e.g., file->cfg = cfg, is allowed; modifying the pointer variable 'path' is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/852.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_opencfg code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_opencfg with it.\n  - Your function must have the exact same signature as lfs_file_opencfg.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_opencfg to check logs.\n  - Your function MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_opencfg will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log entry for lock failure so control flow is visible */\n        FILE *f = fopen(\"/tmp/logs/852.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_file_opencfg: LFS_LOCK failed -> %d (lfs=%p, file=%p, path=%p)\\n\",\n                    err, (void*)lfs, (void*)file, (void*)path);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: log incoming state (pointer values, contents, and addresses). */\n    {\n        FILE *f = fopen(\"/tmp/logs/852.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_file_opencfg: lfs=%p file=%p path_ptr=%p address_of_path_var=%p flags=0x%x cfg=%p\\n\",\n                    (void*)lfs, (void*)file, (void*)path, (void*)&path, (unsigned)flags, (void*)cfg);\n            if (path) {\n                /* print a safe prefix of the path string to avoid huge logs */\n                size_t i = 0; size_t max = 128;\n                fprintf(f, \"  path_str=\\\"\");\n                for (i = 0; i < max && path[i] != '\\0'; ++i) {\n                    /* escape non-printables conservatively */\n                    unsigned char c = (unsigned char)path[i];\n                    if (c >= 32 && c < 127) {\n                        fputc(c, f);\n                    } else {\n                        fprintf(f, \"\\\\x%02x\", c);\n                    }\n                }\n                if (i == max && path[i] != '\\0') {\n                    fprintf(f, \"...\");\n                }\n                fprintf(f, \"\\\"\\n\");\n\n                /* also log a short hex dump of the first bytes */\n                fprintf(f, \"  path_bytes=\");\n                for (i = 0; i < 32 && path[i] != '\\0'; ++i) {\n                    fprintf(f, \"%02x \", (unsigned char)path[i]);\n                }\n                fprintf(f, \"\\n\");\n            } else {\n                fprintf(f, \"  path_str=(null)\\n\");\n            }\n\n            if (cfg) {\n                fprintf(f, \"  cfg=%p buffer=%p attrs=%p attr_count=%\"PRIu32\"\\n\",\n                        (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n            } else {\n                fprintf(f, \"  cfg=(null)\\n\");\n            }\n\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    /* Original behavior: delegate to internal implementation. */\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe: log return state and observe whether the 'path' pointer value changed\n       (this will capture cases where the parameter is modified within this function\n       before/after internal calls, or show that it remained the same at this call site). */\n    {\n        FILE *f = fopen(\"/tmp/logs/852.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"EXIT  lfs_file_opencfg: err=%d lfs=%p file=%p path_ptr=%p address_of_path_var=%p\\n\",\n                    err, (void*)lfs, (void*)file, (void*)path, (void*)&path);\n            if (path) {\n                /* log a short prefix again */\n                size_t i = 0; size_t max = 64;\n                fprintf(f, \"  path_str=\\\"\");\n                for (i = 0; i < max && path[i] != '\\0'; ++i) {\n                    unsigned char c = (unsigned char)path[i];\n                    if (c >= 32 && c < 127) {\n                        fputc(c, f);\n                    } else {\n                        fprintf(f, \"\\\\x%02x\", c);\n                    }\n                }\n                if (i == max && path[i] != '\\0') {\n                    fprintf(f, \"...\");\n                }\n                fprintf(f, \"\\\"\\n\");\n            } else {\n                fprintf(f, \"  path_str=(null)\\n\");\n            }\n\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}