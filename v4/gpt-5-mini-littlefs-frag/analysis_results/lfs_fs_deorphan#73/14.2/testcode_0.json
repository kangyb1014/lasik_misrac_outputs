{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses a pointer loop counter declared and initialized (for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next)). The loop\u2019s third clause reads f->next (to update the loop counter) while the loop body calls functions (lfs_file_outline, lfs_file_flush) that may modify the file structure or linked-list links (members of *f). This means the third clause uses an object (the contents of *f / f->next) that can be modified by the loop body, which violates MISRA C 2023 Rule 14.2 (the third clause must modify only the loop counter and must not use objects modified in the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_deorphan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_deorphan:\n```c\nstatic int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        return 0;\n    }\n\n    // Check for orphans in two separate passes:\n    // - 1 for half-orphans (relocations)\n    // - 2 for full-orphans (removes/renames)\n    //\n    // Two separate passes are needed as half-orphans can contain outdated\n    // references to full-orphans, effectively hiding them from the deorphan\n    // search.\n    //\n    int pass = 0;\n    while (pass < 2) {\n        // Fix any orphans\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        // iterate over all directory directory entries\n        while (!lfs_pair_isnull(pdir.tail)) {\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (err) {\n                return err;\n            }\n\n            // check head blocks for orphans\n            if (!pdir.split) {\n                // check if we have a parent\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    return tag;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (state < 0) {\n                        return state;\n                    }\n                    lfs_pair_fromle32(pair);\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        // we have desynced\n                        LFS_DEBUG(\"Fixing half-orphan \"\n                                \"{0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                                \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);\n\n                        // fix pending move in this pair? this looks like an\n                        // optimization but is in fact _required_ since\n                        // relocating may outdate the move.\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            LFS_DEBUG(\"Fixing move while fixing orphans \"\n                                    \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                                    pdir.pair[0], pdir.pair[1], moveid);\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                        }\n\n                        lfs_pair_tole32(pair);\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n                        lfs_pair_fromle32(pair);\n                        if (state < 0) {\n                            return state;\n                        }\n\n                        // did our commit create more orphans?\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                        }\n\n                        // refetch tail\n                        continue;\n                    }\n                }\n\n                // note we only check for full orphans if we may have had a\n                // power-loss, otherwise orphans are created intentionally\n                // during operations such as lfs_mkdir\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    // we are an orphan\n                    LFS_DEBUG(\"Fixing orphan {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                            pdir.tail[0], pdir.tail[1]);\n\n                    // steal state\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (err) {\n                        return err;\n                    }\n\n                    // steal tail\n                    lfs_pair_tole32(dir.tail);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n                    lfs_pair_fromle32(dir.tail);\n                    if (state < 0) {\n                        return state;\n                    }\n\n                    // did our commit create more orphans?\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                    }\n\n                    // refetch tail\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n    }\n\n    // mark orphans as fixed\n    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_deorphan code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_deorphan with it.\n  - Your function must have the exact same signature as lfs_fs_deorphan.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_deorphan to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_deorphan as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_deorphan will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_deorphan as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    /* Logging helper: append a message to /tmp/logs/491.txt. We open/close\n       on each use to avoid keeping file descriptors around. */\n    auto _log = (void(*)(const char*, ...))0; /* placeholder to keep compilers static analyzers happy in environments disallowing nested functions */\n\n    /* Use local helper function via a block to avoid adding headers or\n       new global symbols. We'll implement logging by calling fprintf\n       using fopen/fclose directly where needed. */\n\n    /* Entry log */\n    {\n        FILE *f = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"ENTER lfs_fs_deorphan: powerloss=%d\\n\", (int)powerloss);\n            fclose(f);\n        }\n    }\n\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        FILE *f = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"NO_ORPHANS: exiting with 0\\n\");\n            fclose(f);\n        }\n        return 0;\n    }\n\n    /* Check for orphans in two separate passes: */\n    int pass = 0;\n    while (pass < 2) {\n        FILE *f = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"START_PASS: pass=%d\\n\", pass);\n            fclose(f);\n        }\n\n        /* Fix any orphans */\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        /* iterate over all directory directory entries */\n        while (!lfs_pair_isnull(pdir.tail)) {\n            FILE *f2 = fopen(\"/tmp/logs/491.txt\", \"a\");\n            if (f2) {\n                fprintf(f2, \"ITERATE_DIR: pdir.split=%d pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                        (int)pdir.split, pdir.tail[0], pdir.tail[1]);\n                fclose(f2);\n            }\n\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (err) {\n                FILE *f3 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                if (f3) {\n                    fprintf(f3, \"ERROR: lfs_dir_fetch returned %d for tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                            err, pdir.tail[0], pdir.tail[1]);\n                    fclose(f3);\n                }\n                return err;\n            }\n\n            FILE *f4 = fopen(\"/tmp/logs/491.txt\", \"a\");\n            if (f4) {\n                fprintf(f4, \"FETCHED_DIR: dir.split=%d dir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                        (int)dir.split, dir.tail[0], dir.tail[1]);\n                fclose(f4);\n            }\n\n            /* check head blocks for orphans */\n            if (!pdir.split) {\n                /* check if we have a parent */\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n\n                FILE *f5 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                if (f5) {\n                    fprintf(f5, \"PARENT_TAG: tag=%d for tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                            (int)tag, pdir.tail[0], pdir.tail[1]);\n                    fclose(f5);\n                }\n\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    FILE *f6 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                    if (f6) {\n                        fprintf(f6, \"ERROR: lfs_fs_parent returned %d (fatal)\\n\", (int)tag);\n                        fclose(f6);\n                    }\n                    return tag;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (state < 0) {\n                        FILE *f7 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f7) {\n                            fprintf(f7, \"ERROR: lfs_dir_get returned %d\\n\", (int)state);\n                            fclose(f7);\n                        }\n                        return state;\n                    }\n                    lfs_pair_fromle32(pair);\n\n                    FILE *f8 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                    if (f8) {\n                        fprintf(f8, \"PARENT_PAIR: pair={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}, pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                                pair[0], pair[1], pdir.tail[0], pdir.tail[1]);\n                        fclose(f8);\n                    }\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        /* we have desynced */\n                        FILE *f9 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f9) {\n                            fprintf(f9, \"DESYNC: pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}, pair={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                                    pdir.tail[0], pdir.tail[1], pair[0], pair[1]);\n                            fclose(f9);\n                        }\n\n                        /* fix pending move in this pair? required since relocating may outdate the move. */\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            FILE *f10 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                            if (f10) {\n                                fprintf(f10, \"FIX_MOVE: move present for pdir.pair={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}, moveid=0x%04\" PRIx16 \"\\n\",\n                                        pdir.pair[0], pdir.pair[1], moveid);\n                                fclose(f10);\n                            }\n\n                            /* prepare move (side effects possible) */\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n\n                            FILE *f11 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                            if (f11) {\n                                fprintf(f11, \"CALLED lfs_fs_prepmove\\n\");\n                                fclose(f11);\n                            }\n                        }\n\n                        lfs_pair_tole32(pair);\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n                        lfs_pair_fromle32(pair);\n\n                        FILE *f12 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f12) {\n                            fprintf(f12, \"ORPHANINGCOMMIT_RESULT: state=%d\\n\", (int)state);\n                            fclose(f12);\n                        }\n\n                        if (state < 0) {\n                            FILE *f13 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                            if (f13) {\n                                fprintf(f13, \"ERROR: lfs_dir_orphaningcommit returned %d\\n\", (int)state);\n                                fclose(f13);\n                            }\n                            return state;\n                        }\n\n                        /* did our commit create more orphans? */\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                            FILE *f14 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                            if (f14) {\n                                fprintf(f14, \"NOTE: commit created more orphans\\n\");\n                                fclose(f14);\n                            }\n                        }\n\n                        /* refetch tail */\n                        FILE *f15 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f15) {\n                            fprintf(f15, \"REFETCH_AFTER_ORPHANINGCOMMIT: continuing to refetch tail\\n\");\n                            fclose(f15);\n                        }\n\n                        continue;\n                    }\n                }\n\n                /* note we only check for full orphans if we may have had a\n                 * power-loss, otherwise orphans are created intentionally\n                 * during operations such as lfs_mkdir\n                 */\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    /* we are an orphan */\n                    FILE *f16 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                    if (f16) {\n                        fprintf(f16, \"FIXING_FULL_ORPHAN: pdir.tail={0x%08\" PRIx32 \",0x%08\" PRIx32 \"}\\n\",\n                                pdir.tail[0], pdir.tail[1]);\n                        fclose(f16);\n                    }\n\n                    /* steal state */\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (err) {\n                        FILE *f17 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f17) {\n                            fprintf(f17, \"ERROR: lfs_dir_getgstate returned %d\\n\", err);\n                            fclose(f17);\n                        }\n                        return err;\n                    }\n\n                    /* steal tail */\n                    lfs_pair_tole32(dir.tail);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n                    lfs_pair_fromle32(dir.tail);\n\n                    FILE *f18 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                    if (f18) {\n                        fprintf(f18, \"ORPHANINGCOMMIT_FULL_ORPHAN: state=%d\\n\", state);\n                        fclose(f18);\n                    }\n\n                    if (state < 0) {\n                        FILE *f19 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                        if (f19) {\n                            fprintf(f19, \"ERROR: lfs_dir_orphaningcommit returned %d (full orphan)\\n\", state);\n                            fclose(f19);\n                        }\n                        return state;\n                    }\n\n                    /* did our commit create more orphans? */\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                    }\n\n                    /* refetch tail */\n                    FILE *f20 = fopen(\"/tmp/logs/491.txt\", \"a\");\n                    if (f20) {\n                        fprintf(f20, \"REFETCH_AFTER_FULL_ORPHAN_COMMIT: continuing to refetch tail\\n\");\n                        fclose(f20);\n                    }\n\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        FILE *f21 = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (f21) {\n            fprintf(f21, \"END_PASS: pass=%d moreorphans=%d\\n\", pass, (int)moreorphans);\n            fclose(f21);\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n    }\n\n    /* mark orphans as fixed */\n    int final_res = lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n    FILE *f22 = fopen(\"/tmp/logs/491.txt\", \"a\");\n    if (f22) {\n        fprintf(f22, \"EXIT lfs_fs_deorphan: result=%d\\n\", final_res);\n        fclose(f22);\n    }\n\n    return final_res;\n}\n"
}