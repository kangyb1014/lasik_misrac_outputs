{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_dir_get forwards buffer and a length computed from gtag (lfs_tag_size(gtag)) to lfs_dir_getslice without validating that the provided buffer is at least that size. If a caller passes a gtag indicating size N while buffer points to a smaller object of size M < N, a subsequent lfs_dir_getslice implementation that uses memcpy/memmove/memset (from <string.h>) with that length will access beyond the bounds of buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_deorphan code that contains useful probe functions that print useful logs to a file \"/tmp/logs/493.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_deorphan:\n```c\nstatic int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        return 0;\n    }\n\n    // Check for orphans in two separate passes:\n    // - 1 for half-orphans (relocations)\n    // - 2 for full-orphans (removes/renames)\n    //\n    // Two separate passes are needed as half-orphans can contain outdated\n    // references to full-orphans, effectively hiding them from the deorphan\n    // search.\n    //\n    int pass = 0;\n    while (pass < 2) {\n        // Fix any orphans\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        // iterate over all directory directory entries\n        while (!lfs_pair_isnull(pdir.tail)) {\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (err) {\n                return err;\n            }\n\n            // check head blocks for orphans\n            if (!pdir.split) {\n                // check if we have a parent\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    return tag;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (state < 0) {\n                        return state;\n                    }\n                    lfs_pair_fromle32(pair);\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        // we have desynced\n                        LFS_DEBUG(\"Fixing half-orphan \"\n                                \"{0x%\"PRIx32\", 0x%\"PRIx32\"} \"\n                                \"-> {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);\n\n                        // fix pending move in this pair? this looks like an\n                        // optimization but is in fact _required_ since\n                        // relocating may outdate the move.\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            LFS_DEBUG(\"Fixing move while fixing orphans \"\n                                    \"{0x%\"PRIx32\", 0x%\"PRIx32\"} 0x%\"PRIx16\"\\n\",\n                                    pdir.pair[0], pdir.pair[1], moveid);\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                        }\n\n                        lfs_pair_tole32(pair);\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n                        lfs_pair_fromle32(pair);\n                        if (state < 0) {\n                            return state;\n                        }\n\n                        // did our commit create more orphans?\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                        }\n\n                        // refetch tail\n                        continue;\n                    }\n                }\n\n                // note we only check for full orphans if we may have had a\n                // power-loss, otherwise orphans are created intentionally\n                // during operations such as lfs_mkdir\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    // we are an orphan\n                    LFS_DEBUG(\"Fixing orphan {0x%\"PRIx32\", 0x%\"PRIx32\"}\",\n                            pdir.tail[0], pdir.tail[1]);\n\n                    // steal state\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (err) {\n                        return err;\n                    }\n\n                    // steal tail\n                    lfs_pair_tole32(dir.tail);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n                    lfs_pair_fromle32(dir.tail);\n                    if (state < 0) {\n                        return state;\n                    }\n\n                    // did our commit create more orphans?\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                    }\n\n                    // refetch tail\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n    }\n\n    // mark orphans as fixed\n    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_deorphan code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_deorphan with it.\n  - Your function must have the exact same signature as lfs_fs_deorphan.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_deorphan to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_deorphan as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_deorphan will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_deorphan as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {\n    FILE *log = fopen(\"/tmp/logs/493.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER lfs_fs_deorphan: lfs=%p powerloss=%d gstate_hasorphans=%d\\n\",\n                (void*)lfs, (int)powerloss, (int)lfs_gstate_hasorphans(&lfs->gstate));\n        fflush(log);\n    }\n\n    int ret = 0;\n\n    if (!lfs_gstate_hasorphans(&lfs->gstate)) {\n        if (log) {\n            fprintf(log, \"No orphans, returning 0\\n\");\n            fclose(log);\n        }\n        return 0;\n    }\n\n    // Check for orphans in two separate passes:\n    // - 1 for half-orphans (relocations)\n    // - 2 for full-orphans (removes/renames)\n    //\n    // Two separate passes are needed as half-orphans can contain outdated\n    // references to full-orphans, effectively hiding them from the deorphan\n    // search.\n    //\n    int pass = 0;\n    while (pass < 2) {\n        // Fix any orphans\n        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};\n        lfs_mdir_t dir;\n        bool moreorphans = false;\n\n        if (log) {\n            fprintf(log, \"Starting pass %d\\n\", pass);\n            fflush(log);\n        }\n\n        // iterate over all directory directory entries\n        while (!lfs_pair_isnull(pdir.tail)) {\n            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n            if (log) {\n                fprintf(log, \"lfs_dir_fetch returned %d for tail={%llu, %llu}\\n\",\n                        err, (unsigned long long)pdir.tail[0], (unsigned long long)pdir.tail[1]);\n                fflush(log);\n            }\n            if (err) {\n                ret = err;\n                if (log) {\n                    fprintf(log, \"ERROR: lfs_dir_fetch -> %d, exiting\\n\", ret);\n                    fclose(log);\n                }\n                return ret;\n            }\n\n            // check head blocks for orphans\n            if (!pdir.split) {\n                // check if we have a parent\n                lfs_mdir_t parent;\n                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n                if (log) {\n                    fprintf(log, \"lfs_fs_parent returned tag=%d for tail={%llu, %llu}\\n\",\n                            (int)tag, (unsigned long long)pdir.tail[0], (unsigned long long)pdir.tail[1]);\n                    fflush(log);\n                }\n                if (tag < 0 && tag != LFS_ERR_NOENT) {\n                    ret = (int)tag;\n                    if (log) {\n                        fprintf(log, \"ERROR: lfs_fs_parent -> %d, exiting\\n\", ret);\n                        fclose(log);\n                    }\n                    return ret;\n                }\n\n                if (pass == 0 && tag != LFS_ERR_NOENT) {\n                    lfs_block_t pair[2];\n                    lfs_stag_t state = lfs_dir_get(lfs, &parent,\n                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);\n                    if (log) {\n                        fprintf(log, \"lfs_dir_get returned state=%d for tag=%d parent.tail={%llu,%llu}\\n\",\n                                (int)state, (int)tag,\n                                (unsigned long long)parent.tail[0], (unsigned long long)parent.tail[1]);\n                        fflush(log);\n                    }\n                    if (state < 0) {\n                        ret = (int)state;\n                        if (log) {\n                            fprintf(log, \"ERROR: lfs_dir_get -> %d, exiting\\n\", ret);\n                            fclose(log);\n                        }\n                        return ret;\n                    }\n                    lfs_pair_fromle32(pair);\n\n                    if (!lfs_pair_issync(pair, pdir.tail)) {\n                        // we have desynced\n                        if (log) {\n                            fprintf(log, \"Desynced: pdir.tail={%llu,%llu} pair={%llu,%llu}\\n\",\n                                    (unsigned long long)pdir.tail[0], (unsigned long long)pdir.tail[1],\n                                    (unsigned long long)pair[0], (unsigned long long)pair[1]);\n                            fflush(log);\n                        }\n\n                        // fix pending move in this pair? this looks like an\n                        // optimization but is in fact _required_ since\n                        // relocating may outdate the move.\n                        uint16_t moveid = 0x3ff;\n                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {\n                            moveid = lfs_tag_id(lfs->gstate.tag);\n                            if (log) {\n                                fprintf(log, \"Found pending move at pdir.pair={%llu,%llu}, moveid=0x%03x\\n\",\n                                        (unsigned long long)pdir.pair[0], (unsigned long long)pdir.pair[1], moveid);\n                                fflush(log);\n                            }\n                            lfs_fs_prepmove(lfs, 0x3ff, NULL);\n                        }\n\n                        lfs_pair_tole32(pair);\n                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                                {LFS_MKTAG_IF(moveid != 0x3ff,\n                                    LFS_TYPE_DELETE, moveid, 0), NULL},\n                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),\n                                    pair}));\n                        lfs_pair_fromle32(pair);\n                        if (log) {\n                            fprintf(log, \"lfs_dir_orphaningcommit returned state=%d\\n\", (int)state);\n                            fflush(log);\n                        }\n                        if (state < 0) {\n                            ret = (int)state;\n                            if (log) {\n                                fprintf(log, \"ERROR: lfs_dir_orphaningcommit -> %d, exiting\\n\", ret);\n                                fclose(log);\n                            }\n                            return ret;\n                        }\n\n                        // did our commit create more orphans?\n                        if (state == LFS_OK_ORPHANED) {\n                            moreorphans = true;\n                            if (log) {\n                                fprintf(log, \"Commit created more orphans\\n\");\n                                fflush(log);\n                            }\n                        }\n\n                        // refetch tail\n                        if (log) {\n                            fprintf(log, \"Refetching tail after orphaning commit\\n\");\n                            fflush(log);\n                        }\n                        continue;\n                    }\n                }\n\n                // note we only check for full orphans if we may have had a\n                // power-loss, otherwise orphans are created intentionally\n                // during operations such as lfs_mkdir\n                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {\n                    // we are an orphan\n                    if (log) {\n                        fprintf(log, \"Detected full orphan at pdir.tail={%llu,%llu}\\n\",\n                                (unsigned long long)pdir.tail[0], (unsigned long long)pdir.tail[1]);\n                        fflush(log);\n                    }\n\n                    // steal state\n                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n                    if (log) {\n                        fprintf(log, \"lfs_dir_getgstate returned %d\\n\", err);\n                        fflush(log);\n                    }\n                    if (err) {\n                        ret = err;\n                        if (log) {\n                            fprintf(log, \"ERROR: lfs_dir_getgstate -> %d, exiting\\n\", ret);\n                            fclose(log);\n                        }\n                        return ret;\n                    }\n\n                    // steal tail\n                    lfs_pair_tole32(dir.tail);\n                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(\n                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),\n                                dir.tail}));\n                    lfs_pair_fromle32(dir.tail);\n                    if (log) {\n                        fprintf(log, \"lfs_dir_orphaningcommit (steal tail) returned state=%d\\n\", state);\n                        fflush(log);\n                    }\n                    if (state < 0) {\n                        ret = state;\n                        if (log) {\n                            fprintf(log, \"ERROR: lfs_dir_orphaningcommit (steal tail) -> %d, exiting\\n\", ret);\n                            fclose(log);\n                        }\n                        return ret;\n                    }\n\n                    // did our commit create more orphans?\n                    if (state == LFS_OK_ORPHANED) {\n                        moreorphans = true;\n                        if (log) {\n                            fprintf(log, \"Steal-tail commit created more orphans\\n\");\n                            fflush(log);\n                        }\n                    }\n\n                    // refetch tail\n                    if (log) {\n                        fprintf(log, \"Refetching tail after steal-tail commit\\n\");\n                        fflush(log);\n                    }\n                    continue;\n                }\n            }\n\n            pdir = dir;\n        }\n\n        pass = moreorphans ? 0 : pass+1;\n        if (log) {\n            fprintf(log, \"End of outer while loop iteration, next pass=%d moreorphans=%d\\n\",\n                    pass, (int)moreorphans);\n            fflush(log);\n        }\n    }\n\n    // mark orphans as fixed\n    ret = lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n    if (log) {\n        fprintf(log, \"lfs_fs_preporphans returned %d, exiting\\n\", ret);\n        fclose(log);\n    }\n    return ret;\n}\n"
}