{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); invokes lfs_mlist_isopen which has no side-effects (it only traverses the list and returns true/false). The assert macro expands to nothing in release builds (when NDEBUG is defined), so the call is removed and its removal does not change program behaviour (aside from diagnostic/abort on failed assert). Because the executed operation has no effect on program state, it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_sync code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_sync with it.\n  - Your function must have the exact same signature as lfs_file_sync.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_sync to check logs.\n  - Your function MUST preserve the original logic of lfs_file_sync as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_sync will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_sync as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original locking behavior */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Trace entry as original did */\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /*\n     * Probe: evaluate the predicate that was originally inside the assert,\n     * and log its value to an external file so testers can reproduce whether\n     * the call to lfs_mlist_isopen is executed and what it returned.\n     *\n     * We declare minimal prototypes for stdio functions at block scope so\n     * this function is self-contained and does not rely on additional\n     * includes being present in the translation unit.\n     */\n    {\n        /* Minimal forward declarations for file-logging functions */\n        typedef struct FILE FILE;\n        FILE* fopen(const char *filename, const char *mode);\n        int fprintf(FILE *stream, const char *format, ...);\n        int fclose(FILE *stream);\n\n        /* Evaluate the predicate (no side-effects expected) */\n        int is_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n\n        /* Attempt to append a diagnostic record to the log file. */\n        FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n        if (log) {\n            /* Log entry with control-flow and state info relevant to the assert */\n            fprintf(log, \"lfs_file_sync ENTER: lfs=%p file=%p is_open=%d\\n\",\n                    (void*)lfs, (void*)file, (int)is_open);\n            fclose(log);\n        }\n\n        /* Preserve original assert semantics by asserting the evaluated value. */\n        LFS_ASSERT(is_open);\n    }\n\n    /* Continue with original behavior */\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Log exit/status as well to help reproduce control flow */\n    {\n        typedef struct FILE FILE;\n        FILE* fopen(const char *filename, const char *mode);\n        int fprintf(FILE *stream, const char *format, ...);\n        int fclose(FILE *stream);\n\n        FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_file_sync EXIT: lfs=%p file=%p result=%d\\n\",\n                    (void*)lfs, (void*)file, err);\n            fclose(log);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}