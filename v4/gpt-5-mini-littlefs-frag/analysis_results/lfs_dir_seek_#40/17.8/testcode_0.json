{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'off' (type lfs_off_t) is modified in lfs_dir_seek_: e.g. 'off -= dir->pos;' and later 'off -= diff;'. Modifying the scalar function parameter 'off' violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek_:\n```c\nstatic int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (err) {\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    off -= dir->pos;\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n\n    while (off > 0) {\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (err) {\n                return err;\n            }\n\n            dir->id = 0;\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        dir->id += diff;\n        dir->pos += diff;\n        off -= diff;\n    }\n\n    return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_seek_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_seek_ with it.\n  - Your function must have the exact same signature as lfs_dir_seek_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_seek_ to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_seek_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_seek_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_seek_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Logging probe: append execution trace to /tmp/logs/532.txt */\n    FILE *logf = fopen(\"/tmp/logs/532.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_dir_seek_: off=%lld dir->pos=%lld dir->id=%d m.count=%d m.split=%d\\n\",\n                (long long)off, (long long)dir->pos, (int)dir->id, (int)dir->m.count, (int)dir->m.split);\n    }\n\n    // simply walk from head dir\n    int err = lfs_dir_rewind_(lfs, dir);\n    if (logf) {\n        fprintf(logf, \"after lfs_dir_rewind_: err=%d dir->pos=%lld dir->id=%d\\n\",\n                err, (long long)dir->pos, (int)dir->id);\n    }\n    if (err) {\n        if (logf) { fprintf(logf, \"RETURN (rewind error) = %d\\n\", err); fclose(logf); }\n        return err;\n    }\n\n    // first two for ./..\n    dir->pos = lfs_min(2, off);\n    if (logf) {\n        fprintf(logf, \"after dir->pos = lfs_min(2, off): dir->pos=%lld\\n\", (long long)dir->pos);\n    }\n\n    /* VIOLATION SCENARIO POINT: modifying parameter 'off' (scalar) */\n    off -= dir->pos;\n    if (logf) {\n        fprintf(logf, \"after off -= dir->pos: off=%lld\\n\", (long long)off);\n    }\n\n    // skip superblock entry\n    dir->id = (off > 0 && lfs_pair_cmp(dir->head, lfs->root) == 0);\n    if (logf) {\n        fprintf(logf, \"after superblock check: dir->id=%d\\n\", (int)dir->id);\n    }\n\n    while (off > 0) {\n        if (logf) {\n            fprintf(logf, \"loop start: off=%lld dir->id=%d dir->m.count=%d dir->m.split=%d\\n\",\n                    (long long)off, (int)dir->id, (int)dir->m.count, (int)dir->m.split);\n        }\n\n        if (dir->id == dir->m.count) {\n            if (!dir->m.split) {\n                if (logf) { fprintf(logf, \"RETURN LFS_ERR_INVAL (not split)\\n\"); fclose(logf); }\n                return LFS_ERR_INVAL;\n            }\n\n            err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n            if (logf) { fprintf(logf, \"after lfs_dir_fetch: err=%d\\n\", err); }\n            if (err) {\n                if (logf) { fprintf(logf, \"RETURN (fetch error) = %d\\n\", err); fclose(logf); }\n                return err;\n            }\n\n            dir->id = 0;\n            if (logf) {\n                fprintf(logf, \"after dir->id = 0: m.count=%d m.tail=%lld\\n\",\n                        (int)dir->m.count, (long long)dir->m.tail);\n            }\n        }\n\n        int diff = lfs_min(dir->m.count - dir->id, off);\n        if (logf) {\n            fprintf(logf, \"computed diff = lfs_min(%d - %d, %lld) => %d\\n\",\n                    (int)dir->m.count, (int)dir->id, (long long)off, (int)diff);\n        }\n\n        dir->id += diff;\n        dir->pos += diff;\n        if (logf) {\n            fprintf(logf, \"after id/pos increment: dir->id=%d dir->pos=%lld\\n\",\n                    (int)dir->id, (long long)dir->pos);\n        }\n\n        off -= diff;\n        if (logf) {\n            fprintf(logf, \"after off -= diff: off=%lld\\n\", (long long)off);\n        }\n    }\n\n    if (logf) {\n        fprintf(logf, \"EXIT lfs_dir_seek_: success dir->pos=%lld dir->id=%d off=%lld\\n\",\n                (long long)dir->pos, (int)dir->id, (long long)off);\n        fclose(logf);\n    }\n\n    return 0;\n}\n"
}