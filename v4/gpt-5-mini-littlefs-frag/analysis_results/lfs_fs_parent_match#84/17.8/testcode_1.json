{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_bd_read (called by lfs_fs_parent_match), the parameters 'off' and 'size' of lfs_bd_read are modified in the fragment (off += diff; size -= diff;). These are function parameters and are being written to, which violates MISRA C 2023 Rule 17.8. (The pointer 'buffer' is not modified directly; 'data' is a local pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_parent_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_parent_match with it.\n  - Your function must have the exact same signature as lfs_fs_parent_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_parent_match to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_parent_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_parent_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    /* Logging probe: record entry and important input state */\n    FILE *___lfs_log_f = fopen(\"/tmp/logs/202.txt\", \"a\");\n    if (___lfs_log_f) {\n        fprintf(___lfs_log_f,\n            \"ENTER: lfs_fs_parent_match: this=%p, data=%p, buffer=%p, disk->block=%llu, disk->off=%llu\\n\",\n            (void*)lfs, data, buffer,\n            (unsigned long long)disk->block,\n            (unsigned long long)disk->off);\n        fflush(___lfs_log_f);\n    }\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n\n    if (___lfs_log_f) {\n        fprintf(___lfs_log_f, \"AFTER lfs_bd_read: err=%d\\n\", err);\n        if (err == 0) {\n            fprintf(___lfs_log_f,\n                \"READ child raw: child[0]=%llu, child[1]=%llu\\n\",\n                (unsigned long long)child[0], (unsigned long long)child[1]);\n        }\n        fflush(___lfs_log_f);\n    }\n\n    if (err) {\n        if (___lfs_log_f) { fclose(___lfs_log_f); }\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    int result = (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n\n    if (___lfs_log_f) {\n        fprintf(___lfs_log_f,\n            \"AFTER lfs_pair_fromle32: child[0]=%llu, child[1]=%llu, result=%d\\n\",\n            (unsigned long long)child[0], (unsigned long long)child[1], result);\n        fclose(___lfs_log_f);\n    }\n\n    return result;\n}\n"
}