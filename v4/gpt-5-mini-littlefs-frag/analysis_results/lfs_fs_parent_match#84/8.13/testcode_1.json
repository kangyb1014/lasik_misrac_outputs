{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'data' is declared as void * and is assigned to 'struct lfs_fs_parent_match *find'. The function only reads from 'find' (accesses find->lfs and find->pair) and does not modify it, so the pointer should be to a const-qualified type. Correct form would be e.g. const struct lfs_fs_parent_match *find = data; with the parameter changed to const void *data (or the cast used accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_parent_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/205.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_fs_parent_match:\n```c\nstatic int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n    if (err) {\n        return err;\n    }\n\n    lfs_pair_fromle32(child);\n    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_fs_parent_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_fs_parent_match with it.\n  - Your function must have the exact same signature as lfs_fs_parent_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_fs_parent_match to check logs.\n  - Your function MUST preserve the original logic of lfs_fs_parent_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_fs_parent_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_fs_parent_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_fs_parent_match(void *data,\n        lfs_tag_t tag, const void *buffer) {\n    struct lfs_fs_parent_match *find = data;\n    lfs_t *lfs = find->lfs;\n    const struct lfs_diskoff *disk = buffer;\n    (void)tag;\n\n    /* Logging probe: record entry and key state to /tmp/logs/205.txt */\n    do {\n        FILE *logf = fopen(\"/tmp/logs/205.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"ENTER lfs_fs_parent_match\\n\");\n            fprintf(logf, \"  data ptr: %p\\n\", data);\n            fprintf(logf, \"  find ptr: %p\\n\", (void*)find);\n            fprintf(logf, \"  find->lfs ptr: %p\\n\", (void*)lfs);\n            fprintf(logf, \"  find->pair ptr: %p\\n\", (void*)find->pair);\n            /* Print disk location info if available */\n            fprintf(logf, \"  disk->block: %llu\\n\", (unsigned long long)disk->block);\n            fprintf(logf, \"  disk->off: %llu\\n\", (unsigned long long)disk->off);\n            fclose(logf);\n        }\n    } while (0);\n\n    lfs_block_t child[2];\n    int err = lfs_bd_read(lfs,\n            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,\n            disk->block, disk->off, &child, sizeof(child));\n\n    /* Log the result of the block read (and early return on error) */\n    if (err) {\n        FILE *logf = fopen(\"/tmp/logs/205.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"  lfs_bd_read returned error: %d\\n\", err);\n            fclose(logf);\n        }\n        return err;\n    }\n\n    /* Convert and log the read pair before comparison */\n    lfs_pair_fromle32(child);\n    {\n        FILE *logf = fopen(\"/tmp/logs/205.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"  child[0]: %llu\\n\", (unsigned long long)child[0]);\n            fprintf(logf, \"  child[1]: %llu\\n\", (unsigned long long)child[1]);\n            /* Attempt to log the target pair values. This mirrors how the\n             * original code passes find->pair to lfs_pair_cmp, so accessing\n             * the first two elements is expected to be valid in the same\n             * contexts as the original code. */\n            fprintf(logf, \"  find->pair[0]: %llu\\n\", (unsigned long long)find->pair[0]);\n            fprintf(logf, \"  find->pair[1]: %llu\\n\", (unsigned long long)find->pair[1]);\n            fclose(logf);\n        }\n    }\n\n    int cmp = (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;\n\n    /* Log the comparison result and return value */\n    do {\n        FILE *logf = fopen(\"/tmp/logs/205.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"  lfs_pair_cmp result -> returning: %d\\n\", cmp);\n            fprintf(logf, \"EXIT lfs_fs_parent_match\\n\\n\");\n            fclose(logf);\n        }\n    } while (0);\n\n    return cmp;\n}"
}