{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_dir_tell_ is declared as lfs_dir_tell_(lfs_t *lfs, lfs_dir_t *dir) but neither parameter is modified: lfs is unused and dir is only read (return dir->pos). According to MISRA C 2023 Rule 8.13, these pointer parameters should be const-qualified (e.g. const lfs_t *lfs, const lfs_dir_t *dir).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/825.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_tell code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_tell with it.\n  - Your function must have the exact same signature as lfs_dir_tell.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_tell to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_tell as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_tell will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "lfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Probe logging to capture control flow and state for MISRA Rule 8.13 investigation.\n       Logs are appended to /tmp/logs/825.txt. Keep logic identical to original function. */\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Minimal entry log so the function reachability is recorded. */\n    {\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER lfs_dir_tell: lfs=%p dir=%p LFS_LOCK_ret=%d\\n\",\n                    (void*)lfs, (void*)dir, err);\n            fclose(log);\n        }\n    }\n\n    if (err) {\n        /* Log early return due to lock error, preserve original behavior. */\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_dir_tell: LFS_LOCK failed, returning err=%d\\n\", err);\n            fclose(log);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Capture pre-call state: record dir->pos if available. This helps demonstrate\n       that 'dir' is only read and not modified by this wrapper. We guard against\n       NULL to avoid changing original crash behavior before the real call. */\n    long long before_pos = -1LL;\n    if (dir) {\n        /* cast to long long for safe printing even if underlying type differs */\n        before_pos = (long long)dir->pos;\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_dir_tell: before calling lfs_dir_tell_: dir->pos=%lld\\n\", before_pos);\n            fclose(log);\n        }\n    } else {\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_dir_tell: before calling lfs_dir_tell_: dir is NULL\\n\");\n            fclose(log);\n        }\n    }\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Capture post-call state to determine whether the wrapper or inner call\n       modified the pointed-to object. This provides evidence for the violation\n       scenario (parameters not modified by this wrapper). */\n    if (dir) {\n        long long after_pos = (long long)dir->pos;\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_dir_tell: after calling lfs_dir_tell_: dir->pos=%lld (before=%lld)\\n\",\n                    after_pos, before_pos);\n            if (after_pos == before_pos) {\n                fprintf(log, \"lfs_dir_tell: dir->pos unchanged by wrapper.\\n\");\n            } else {\n                fprintf(log, \"lfs_dir_tell: dir->pos changed (wrapper did not modify it, change likely from inner call).\\n\");\n            }\n            fclose(log);\n        }\n    } else {\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_dir_tell: after calling lfs_dir_tell_: dir was NULL\\n\");\n            fclose(log);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/825.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"EXIT lfs_dir_tell: returning res=%\" PRId32 \"\\n\", res);\n            fclose(log);\n        }\n    }\n\n    return res;\n}\n"
}