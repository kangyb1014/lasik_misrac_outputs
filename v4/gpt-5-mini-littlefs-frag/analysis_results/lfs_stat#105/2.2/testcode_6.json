{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(lfs->cfg) expands to the macro definition ((void)cfg), which performs no action. The expression merely evaluates and discards lfs->cfg; removing the line would not change program behaviour in this configuration, so this executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_stat with it.\n  - Your function must have the exact same signature as lfs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open log file for append. If fopen is unavailable in the build\n       environment, these calls should be no-ops (NULL checked). */\n    FILE *fp = NULL;\n    fp = fopen(\"/tmp/logs/558.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"ENTER lfs_stat: lfs=%p path=\\\"%s\\\" info=%p\\n\",\n                (void*)lfs, path ? path : \"(null)\", (void*)info);\n        fprintf(fp, \"After LFS_LOCK: err=%d cfg=%p\\n\", err, (void*)lfs->cfg);\n        fflush(fp);\n    }\n\n    if (err) {\n        if (fp) {\n            fprintf(fp, \"lfs_stat: returning early due to lock error=%d\\n\\n\", err);\n            fclose(fp);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    if (fp) {\n        fprintf(fp, \"After lfs_stat_: err=%d\\n\", err);\n        fflush(fp);\n    }\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Log the cfg pointer immediately before calling LFS_UNLOCK so we\n       can demonstrate whether the unlock expands to a no-op in this\n       configuration. If LFS_UNLOCK is a no-op macro like ((void)cfg),\n       then the value will be identical before and after the call. */\n    if (fp) {\n        fprintf(fp, \"Before LFS_UNLOCK: cfg=%p\\n\", (void*)lfs->cfg);\n        fflush(fp);\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    if (fp) {\n        fprintf(fp, \"After LFS_UNLOCK:  cfg=%p\\n\", (void*)lfs->cfg);\n        fprintf(fp, \"(Note: if LFS_UNLOCK is a no-op, cfg will be unchanged and this indicates executed dead code)\\n\");\n        fprintf(fp, \"Exit lfs_stat -> %d\\n\\n\", err);\n        fclose(fp);\n    }\n\n    return err;\n}"
}