{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). In lfs_stat this yields int err = LFS_LOCK(lfs->cfg); so the subexpression (void)cfg is evaluated but has no effect on program behaviour (it only suppresses an unused-parameter warning). Removing the (void)cfg (or the entire macro call) would not change behaviour (err would still be 0), so the executed no-op constitutes dead code under MISRA C 2023 Rule 2.2. (Similarly LFS_UNLOCK(cfg) ((void)cfg) is an executed no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_stat with it.\n  - Your function must have the exact same signature as lfs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original behavior: call the lock macro and capture its return value. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe logging: append control flow and state to /tmp/logs/558.txt.\n       We deliberately avoid changing the logic of lfs_stat; these logs are\n       observational only and are intended to demonstrate the behavior of\n       LFS_LOCK/LFS_UNLOCK (notably that they may be no-op macros that return 0).\n    */\n    {\n        FILE *logf = fopen(\"/tmp/logs/558.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"lfs_stat entered: lfs=%p, path=%p\\n\", (void*)lfs, (const void*)path);\n            /* Print the string if available to assist reproducing scenario. */\n            if (path) {\n                /* Guard against overly long or invalid strings in constrained test environments. */\n                fprintf(logf, \"  path string: \\\"%s\\\"\\n\", path);\n            }\n            fprintf(logf, \"  info=%p\\n\", (void*)info);\n\n            /* Log the cfg pointer value if lfs is non-NULL so we can see whether\n               the (void)cfg subexpression inside the macro would have evaluated\n               something (its pointer value) even if it did nothing. */\n            if (lfs) {\n                fprintf(logf, \"  lfs->cfg=%p\\n\", (void*)lfs->cfg);\n            } else {\n                fprintf(logf, \"  lfs is NULL\\n\");\n            }\n\n            fprintf(logf, \"  After LFS_LOCK: err=%d\\n\", err);\n            if (err == 0) {\n                fprintf(logf, \"  Note: LFS_LOCK returned 0 (possible executed no-op / dead-code scenario)\\n\");\n            } else {\n                fprintf(logf, \"  Note: LFS_LOCK returned non-zero (lock reported error)\\n\");\n            }\n            fclose(logf);\n        }\n    }\n\n    /* Preserve original control flow. */\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    /* Log right before and after the unlock to capture the unlocking action. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/558.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"  lfs_stat_: lfs_stat_ returned %d\\n\", err);\n            if (lfs) {\n                fprintf(logf, \"  About to call LFS_UNLOCK with cfg=%p\\n\", (void*)lfs->cfg);\n            } else {\n                fprintf(logf, \"  About to call LFS_UNLOCK with lfs==NULL\\n\");\n            }\n            fclose(logf);\n        }\n    }\n\n    LFS_UNLOCK(lfs->cfg);\n\n    {\n        FILE *logf = fopen(\"/tmp/logs/558.txt\", \"a\");\n        if (logf) {\n            fprintf(logf, \"  LFS_UNLOCK called; lfs_stat returning %d\\n\", err);\n            fclose(logf);\n        }\n    }\n\n    return err;\n}\n"
}