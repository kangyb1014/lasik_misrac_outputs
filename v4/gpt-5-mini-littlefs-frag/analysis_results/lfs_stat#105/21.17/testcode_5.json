{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. strcpy(info->name, \"/\") can overflow when info->name is too small. For example, if LFS_NAME_MAX is defined as 0 then info->name has size LFS_NAME_MAX+1 == 1 and cannot hold the two bytes needed for \"/\\0\"; strcpy will write beyond the bounds of info->name. (Also, if the caller passes info == NULL this call will dereference a null pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_stat with it.\n  - Your function must have the exact same signature as lfs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* If lock failed, still log the event so callers can see control flow. */\n    if (err) {\n        FILE *log = fopen(\"/tmp/logs/553.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"lfs_stat: ENTER (lock failed) lfs=%p, path=%p, info=%p, err=%d\\n\",\n                    (void*)lfs, (void*)path, (void*)info, err);\n            if (path) {\n                fprintf(log, \"  path=\\\"%s\\\", len=%zu\\n\", path, strlen(path));\n            } else {\n                fprintf(log, \"  path=NULL\\n\");\n            }\n            if (info == NULL) {\n                fprintf(log, \"  info=NULL\\n\");\n            } else {\n                fprintf(log, \"  info=%p, sizeof(struct lfs_info)=%zu\\n\",\n                        (void*)info, sizeof(*info));\n#ifdef LFS_NAME_MAX\n                fprintf(log, \"  LFS_NAME_MAX=%d, expected name buffer size=%d\\n\",\n                        (int)LFS_NAME_MAX, (int)(LFS_NAME_MAX + 1));\n#endif\n                /* Dump the first N bytes of the info struct to help identify content */\n                size_t sample = sizeof(*info) < 64 ? sizeof(*info) : 64;\n                unsigned char *p = (unsigned char*)info;\n                fprintf(log, \"  info bytes (first %zu):\", sample);\n                for (size_t i = 0; i < sample; i++) {\n                    fprintf(log, \" %02x\", p[i]);\n                }\n                fprintf(log, \"\\n\");\n            }\n            fclose(log);\n        }\n        return err;\n    }\n\n    /* Log entry with runtime state for reproducibility of the reported scenario. */\n    FILE *log = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_stat: ENTER lfs=%p, path=%p, info=%p\\n\",\n                (void*)lfs, (void*)path, (void*)info);\n        if (path) {\n            fprintf(log, \"  path=\\\"%s\\\", len=%zu\\n\", path, strlen(path));\n        } else {\n            fprintf(log, \"  path=NULL\\n\");\n        }\n        if (info == NULL) {\n            fprintf(log, \"  info=NULL (will be passed to lfs_stat_)\\n\");\n        } else {\n            fprintf(log, \"  info=%p, sizeof(struct lfs_info)=%zu\\n\",\n                    (void*)info, sizeof(*info));\n#ifdef LFS_NAME_MAX\n            fprintf(log, \"  LFS_NAME_MAX=%d, expected name buffer size=%d\\n\",\n                    (int)LFS_NAME_MAX, (int)(LFS_NAME_MAX + 1));\n#endif\n            size_t sample = sizeof(*info) < 64 ? sizeof(*info) : 64;\n            unsigned char *p = (unsigned char*)info;\n            fprintf(log, \"  info bytes (first %zu):\", sample);\n            for (size_t i = 0; i < sample; i++) {\n                fprintf(log, \" %02x\", p[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n        fflush(log);\n        fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log result and post-call state to capture potential modification/overflow evidence. */\n    log = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"lfs_stat: AFTER lfs_stat_(...) returned err=%d\\n\", err);\n        if (info == NULL) {\n            fprintf(log, \"  info=NULL after call\\n\");\n        } else {\n            fprintf(log, \"  info=%p, sizeof(struct lfs_info)=%zu\\n\",\n                    (void*)info, sizeof(*info));\n            size_t sample = sizeof(*info) < 64 ? sizeof(*info) : 64;\n            unsigned char *p = (unsigned char*)info;\n            fprintf(log, \"  info bytes (first %zu):\", sample);\n            for (size_t i = 0; i < sample; i++) {\n                fprintf(log, \" %02x\", p[i]);\n            }\n            fprintf(log, \"\\n\");\n        }\n        fflush(log);\n        fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}