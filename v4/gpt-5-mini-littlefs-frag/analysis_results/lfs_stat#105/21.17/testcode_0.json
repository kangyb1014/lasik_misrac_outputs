{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer overflow if the runtime value lfs->name_max exceeds the compile-time LFS_NAME_MAX used to declare info->name. The call requests lfs->name_max+1 bytes to be written into info->name (which is char name[LFS_NAME_MAX+1]). If the on-disk superblock (or other configuration) causes lfs->name_max to be larger than LFS_NAME_MAX, lfs_dir_get will copy up to lfs->name_max+1 bytes (likely using memcpy/memmove/strncpy or similar), writing past the end of info->name and causing an out-of-bounds access. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_stat code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_stat with it.\n  - Your function must have the exact same signature as lfs_stat.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_stat to check logs.\n  - Your function MUST preserve the original logic of lfs_stat as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_stat will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_stat as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original locking behavior */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open log file and record entry state to help reproduce buffer-overflow scenarios. */\n    FILE *logf = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"ENTER lfs_stat: lfs=%p, path=\\\"%s\\\", info=%p\\n\",\n                (void*)lfs, path ? path : \"(null)\", (void*)info);\n        if (lfs) {\n            /* log fields that are relevant to the reported violation */\n            fprintf(logf, \"  lfs->cfg=%p\\n\", (void*)lfs->cfg);\n            /* lfs->name_max is expected to exist in the lfs_t structure; print it if available */\n            fprintf(logf, \"  lfs->name_max=%u\\n\", (unsigned)lfs->name_max);\n        }\n#ifdef LFS_NAME_MAX\n        fprintf(logf, \"  compile-time LFS_NAME_MAX=%d\\n\", LFS_NAME_MAX);\n#endif\n        fprintf(logf, \"  LFS_LOCK returned=%d\\n\", err);\n        fclose(logf);\n    }\n\n    if (err) {\n        /* Preserve original early return semantics */\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log exit state including return value and pointers; do not attempt to dereference\n       members of info (struct layout may vary) except for pointer identity. */\n    logf = fopen(\"/tmp/logs/553.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"EXIT  lfs_stat: err=%d, lfs=%p, path=\\\"%s\\\", info=%p\\n\",\n                err, (void*)lfs, path ? path : \"(null)\", (void*)info);\n        /* If available, give an additional hint about name_max vs compile-time limit. */\n        if (lfs) {\n            fprintf(logf, \"  post-call lfs->name_max=%u\\n\", (unsigned)lfs->name_max);\n        }\n#ifdef LFS_NAME_MAX\n        fprintf(logf, \"  compile-time LFS_NAME_MAX=%d\\n\", LFS_NAME_MAX);\n#endif\n        fprintf(logf, \"  unlocking and returning err=%d\\n\", err);\n        fclose(logf);\n    }\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}