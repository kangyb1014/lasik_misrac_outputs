{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nlfs_stat_ passes the address of its parameter 'path' to lfs_dir_find: lfs_dir_find(lfs, &cwd, &path, NULL). Inside lfs_dir_find the pointer is dereferenced and updated (*path = name;), which changes the value of the caller's parameter 'path' in lfs_stat_. This results in modification of a function parameter (the pointer variable 'path'), violating MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/632.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_stat_:\n```c\nstatic int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return (int)tag;\n    }\n\n    // only allow trailing slashes on dirs\n    if (strchr(path, '/') != NULL\n            && lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        return LFS_ERR_NOTDIR;\n    }\n\n    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_stat_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_stat_ with it.\n  - Your function must have the exact same signature as lfs_stat_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_stat_ to check logs.\n  - Your function MUST preserve the original logic of lfs_stat_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_stat_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_stat_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Logging to capture control flow and state for Rule 17.8 investigation. */\n    FILE *logf = fopen(\"/tmp/logs/632.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"lfs_stat_: ENTER lfs=%p path=%p\", (void *)lfs, (void *)path);\n        if (path) {\n            fprintf(logf, \" path=\\\"%s\\\"\", path);\n        } else {\n            fprintf(logf, \" path=(null)\");\n        }\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n    }\n\n    lfs_mdir_t cwd;\n\n    /* capture path value before calling lfs_dir_find */\n    const char *path_before = path;\n    if (logf) {\n        fprintf(logf, \"lfs_stat_: BEFORE lfs_dir_find path_before=%p\", (void *)path_before);\n        if (path_before) {\n            fprintf(logf, \" path_before_str=\\\"%s\\\"\", path_before);\n        } else {\n            fprintf(logf, \" path_before_str=(null)\");\n        }\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n    }\n\n    /* Original call that can modify the caller's pointer variable (Rule 17.8 scenario) */\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    /* capture path value after calling lfs_dir_find */\n    if (logf) {\n        fprintf(logf, \"lfs_stat_: AFTER lfs_dir_find tag=%d path_after=%p\", (int)tag, (void *)path);\n        if (path) {\n            fprintf(logf, \" path_after_str=\\\"%s\\\"\", path);\n        } else {\n            fprintf(logf, \" path_after_str=(null)\");\n        }\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n    }\n\n    if (tag < 0) {\n        if (logf) {\n            fprintf(logf, \"lfs_stat_: tag < 0, returning %d\\n\", (int)tag);\n            fclose(logf);\n        }\n        return (int)tag;\n    }\n\n    /* only allow trailing slashes on dirs */\n    if (strchr(path, '/') != NULL\n            && lfs_tag_type3(tag) != LFS_TYPE_DIR) {\n        if (logf) {\n            fprintf(logf, \"lfs_stat_: trailing slash found but not a dir, returning LFS_ERR_NOTDIR\\n\");\n            fclose(logf);\n        }\n        return LFS_ERR_NOTDIR;\n    }\n\n    int result = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);\n\n    if (logf) {\n        fprintf(logf, \"lfs_stat_: lfs_dir_getinfo returned %d\\n\", result);\n        fclose(logf);\n    }\n\n    return result;\n}\n"
}