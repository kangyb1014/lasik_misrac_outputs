{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as a non-const pointer (lfs_t *lfs) but the parameter is unused/ not modified in lfs_file_size_. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible (e.g. const lfs_t *lfs). Therefore the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_size_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_size_ with it.\n  - Your function must have the exact same signature as lfs_file_size_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_size_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_size_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_size_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original explicit unused annotation for lfs (demonstrates the pointer\n       is not used by this function, which is the basis of the MISRA Rule 8.13 report). */\n    (void)lfs;\n\n    /* Log entry and state. We intentionally do not reference `lfs` beyond the void\n       cast to demonstrate the parameter is unused. Logs are appended so tests\n       exercising multiple paths produce a trace. */\n    {\n        FILE *log = fopen(\"/tmp/logs/225.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ENTER lfs_file_size_: lfs=UNUSED, file=%p, flags=0x%02x, pos=%lld, ctz.size=%lld\\n\",\n                    (void *)file,\n                    (unsigned)file->flags,\n                    (long long)file->pos,\n                    (long long)file->ctz.size);\n            fclose(log);\n        }\n    }\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_soff_t res = lfs_max(file->pos, file->ctz.size);\n\n        FILE *log = fopen(\"/tmp/logs/225.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"BRANCH: WRITING -> pos=%lld, ctz.size=%lld, result=%lld\\n\",\n                    (long long)file->pos,\n                    (long long)file->ctz.size,\n                    (long long)res);\n            fclose(log);\n        }\n\n        return res;\n    }\n#endif\n\n    /* default return path */\n    {\n        lfs_soff_t res = file->ctz.size;\n        FILE *log = fopen(\"/tmp/logs/225.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"BRANCH: DEFAULT -> ctz.size=%lld, result=%lld\\n\",\n                    (long long)file->ctz.size,\n                    (long long)res);\n            fclose(log);\n        }\n        return res;\n    }\n}\n"
}