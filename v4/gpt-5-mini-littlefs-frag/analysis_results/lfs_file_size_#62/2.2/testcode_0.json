{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression '(void)lfs;' is an executed no-op whose removal would not affect program behaviour. It exists only to suppress an unused-parameter warning (e.g. when LFS_READONLY makes 'lfs' otherwise unused), so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/228.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_file_size_:\n```c\nstatic lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs;\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        return lfs_max(file->pos, file->ctz.size);\n    }\n#endif\n\n    return file->ctz.size;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_file_size_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_file_size_ with it.\n  - Your function must have the exact same signature as lfs_file_size_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_file_size_ to check logs.\n  - Your function MUST preserve the original logic of lfs_file_size_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_file_size_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_file_size_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    /* keep the unused-parameter suppression to reproduce the reported dead-code instance */\n    (void)lfs;\n\n    /* attempt to log entry and relevant state to help reproduce the violation scenario\n       Logs are appended to /tmp/logs/228.txt; failures to open the log are ignored so\n       original behaviour is preserved. */\n    FILE *__lfs_log_f = fopen(\"/tmp/logs/228.txt\", \"a\");\n    if (__lfs_log_f) {\n        if (file) {\n            fprintf(__lfs_log_f,\n                \"ENTER lfs_file_size_: lfs=%p file=%p flags=0x%08x pos=%lld ctz.size=%lld\\n\",\n                (void*)lfs,\n                (void*)file,\n                (unsigned)file->flags,\n                (long long)file->pos,\n                (long long)file->ctz.size);\n        } else {\n            fprintf(__lfs_log_f, \"ENTER lfs_file_size_: lfs=%p file=NULL\\n\", (void*)lfs);\n        }\n        fflush(__lfs_log_f);\n    }\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        lfs_soff_t __result = lfs_max(file->pos, file->ctz.size);\n        if (__lfs_log_f) {\n            fprintf(__lfs_log_f, \"BRANCH: writing -> result=%lld\\n\", (long long)__result);\n            fclose(__lfs_log_f);\n        }\n        return __result;\n    }\n#endif\n\n    if (__lfs_log_f) {\n        fprintf(__lfs_log_f, \"BRANCH: not writing -> result=%lld\\n\", (long long)file->ctz.size);\n        fclose(__lfs_log_f);\n    }\n\n    return file->ctz.size;\n}"
}