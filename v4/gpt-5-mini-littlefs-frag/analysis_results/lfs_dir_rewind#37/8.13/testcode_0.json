{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes lfs->cfg (a non-const pointer member) to LFS_LOCK. If LFS_LOCK (or the underlying function/macro it expands to) does not need to modify the pointed-to configuration object, then the pointer should be to a const-qualified type (e.g. const cfg_t *). In that case this use violates MISRA C 2023 Rule 8.13. Concretely: if lfs->cfg is declared as cfg_t *cfg; and LFS_LOCK only reads from cfg, it should instead take const cfg_t * and lfs->cfg should be const-qualified, so the current code would be a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1065.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_dir_rewind code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_dir_rewind with it.\n  - Your function must have the exact same signature as lfs_dir_rewind.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_dir_rewind to check logs.\n  - Your function MUST preserve the original logic of lfs_dir_rewind as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_dir_rewind will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Capture lock attempt first (preserve original control flow) */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe/log: record entry, pointers and result of lock attempt */\n    {\n        FILE *f = fopen(\"/tmp/logs/1065.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_rewind ENTER\\n\");\n            fprintf(f, \"  lfs=%p\\n\", (void*)lfs);\n            fprintf(f, \"  dir=%p\\n\", (void*)dir);\n            fprintf(f, \"  lfs->cfg=%p\\n\", (void*)(lfs ? lfs->cfg : 0));\n            fprintf(f, \"  LFS_LOCK returned err=%d\\n\", err);\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    if (err) {\n        /* If lock failed, preserve original behavior: return immediately. */\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Record cfg pointer before calling the internal function to see if it gets modified */\n    void *cfg_before = (void*)lfs->cfg;\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    void *cfg_after = (void*)lfs->cfg;\n\n    /* Probe/log: record result and whether lfs->cfg changed during the call */\n    {\n        FILE *f = fopen(\"/tmp/logs/1065.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"  lfs_dir_rewind_ returned err=%d\\n\", err);\n            fprintf(f, \"  cfg_before=%p\\n\", cfg_before);\n            fprintf(f, \"  cfg_after =%p\\n\", cfg_after);\n            if (cfg_before != cfg_after) {\n                fprintf(f, \"  NOTICE: lfs->cfg changed during lfs_dir_rewind_\\n\");\n            } else {\n                fprintf(f, \"  NOTICE: lfs->cfg unchanged during lfs_dir_rewind_\\n\");\n            }\n            fflush(f);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}