{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero very likely calls a string.h function (e.g. memset) to zero the cache using lfs->cfg->cache_size. lfs_init sets lfs->rcache.buffer = cfg->read_buffer when the user supplies a buffer but does not verify that the supplied object has at least cache_size bytes. If a caller supplies a smaller read_buffer (or misinitializes cfg->cache_size), memset in lfs_cache_zero will write past the end of the supplied buffer, causing an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/733.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified lfs_format code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original lfs_format with it.\n  - Your function must have the exact same signature as lfs_format.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call lfs_format to check logs.\n  - Your function MUST preserve the original logic of lfs_format as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, lfs_format will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of lfs_format as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Open an append-only log for probes. Best-effort: if fopen fails, continue\n       normal operation so we don't change program behavior. */\n    FILE *___log733 = fopen(\"/tmp/logs/733.txt\", \"a\");\n    if (___log733) {\n        fprintf(___log733, \"ENTER lfs_format: lfs=%p cfg=%p\\n\", (void*)lfs, (void*)cfg);\n        if (cfg) {\n            fprintf(___log733,\n                \"cfg: context=%p read=%p prog=%p erase=%p sync=%p\\n\",\n                cfg->context, (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n            fprintf(___log733,\n                \"sizes: read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \" block_size=%\" PRIu32 \" block_count=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n            fprintf(___log733,\n                \"cache_size=%\" PRIu32 \" lookahead_size=%\" PRIu32 \" read_buffer=%p prog_buffer=%p lookahead_buffer=%p\\n\",\n                cfg->cache_size, cfg->lookahead_size,\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n            fprintf(___log733,\n                \"limits: name_max=%\" PRIu32 \" file_max=%\" PRIu32 \" attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n\n            /* Probe specifically targeted at the reported violation scenario: */\n            fprintf(___log733,\n                \"PROBE: Possible buffer-size mismatch check: cfg->read_buffer=%p cfg->cache_size=%\" PRIu32 \"\\n\",\n                cfg->read_buffer, cfg->cache_size);\n\n            fflush(___log733);\n        }\n    }\n\n    int err = LFS_LOCK(cfg);\n    if (___log733) {\n        fprintf(___log733, \"LFS_LOCK returned %d\\n\", err);\n        fflush(___log733);\n    }\n    if (err) {\n        if (___log733) {\n            fprintf(___log733, \"EXIT lfs_format early due to LFS_LOCK error %d\\n\", err);\n            fclose(___log733);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    if (___log733) {\n        fprintf(___log733, \"Calling lfs_format_ (delegated format implementation)\\n\");\n        fflush(___log733);\n    }\n\n    err = lfs_format_(lfs, cfg);\n\n    if (___log733) {\n        fprintf(___log733, \"lfs_format_ returned %d\\n\", err);\n        fprintf(___log733, \"About to LFS_UNLOCK(cfg=%p) and exit lfs_format\\n\", (void*)cfg);\n        fclose(___log733);\n    }\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}