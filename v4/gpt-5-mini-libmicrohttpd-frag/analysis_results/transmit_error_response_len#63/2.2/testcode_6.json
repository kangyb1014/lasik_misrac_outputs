{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert((NULL == header_name) || (NULL != header_value)); line is redundant \u2014 it duplicates the immediately preceding logical check ((NULL != header_value) || (NULL == header_name)). When assertions are enabled this duplicate assert is executed but its removal would not affect program behaviour, so it is dead code. Remove the redundant assertion to comply with Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified transmit_error_response_len code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of transmit_error_response_len:\n```c\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified transmit_error_response_len code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original transmit_error_response_len with it.\n  - Your function must have the exact same signature as transmit_error_response_len.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call transmit_error_response_len to check logs.\n  - Your function MUST preserve the original logic of transmit_error_response_len as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, transmit_error_response_len will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of transmit_error_response_len as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n  FILE *log = fopen(\"/tmp/logs/4208.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log,\n            \"ENTER transmit_error_response_len: connection=%p status=%u message_len=%zu header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\\n\",\n            (void *)connection,\n            status_code,\n            message_len,\n            (void *)header_name,\n            header_name_len,\n            (void *)header_value,\n            header_value_len);\n    fflush(log);\n  }\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (log)\n  {\n    fprintf(log, \"check: connection->stop_with_error=%d\\n\",\n            (int) connection->stop_with_error);\n    fflush(log);\n  }\n\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    if (log)\n    {\n      fprintf(log, \"early-exit: stop_with_error true; freed headers; closing log and returning\\n\");\n      fclose(log);\n    }\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (log)\n  {\n    fprintf(log, \"state before send: connection->state=%d\\n\", (int)connection->state);\n    fflush(log);\n  }\n\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    if (log)\n    {\n      fprintf(log, \"early-exit: too late to send error; freed headers; closing log and returning\\n\");\n      fclose(log);\n    }\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n    if (log)\n    {\n      fprintf(log, \"info: read buffer discarded\\n\");\n      fflush(log);\n    }\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n    if (log)\n    {\n      fprintf(log, \"info: destroyed existing connection->rp.response\\n\");\n      fflush(log);\n    }\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    if (log)\n    {\n      fprintf(log, \"early-exit: MHD_create_response_from_buffer_static returned NULL; freed headers; closing log and returning\\n\");\n      fclose(log);\n    }\n    return;\n  }\n\n  /* Log and probe the header invariants that are asserted below. */\n  if (log)\n  {\n    int cond_a = ((0 == header_name_len) || (NULL != header_name));\n    int cond_b = ((NULL == header_name) || (0 != header_name_len));\n    int cond_c = ((0 == header_value_len) || (NULL != header_value));\n    int cond_d = ((NULL == header_value) || (0 != header_value_len));\n    int cond_e = ((NULL == header_name) || (NULL != header_value));\n    int cond_f = ((NULL != header_value) || (NULL == header_name));\n\n    fprintf(log, \"assert-probes: header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\\n\",\n            (void *)header_name, header_name_len, (void *)header_value, header_value_len);\n    fprintf(log, \"assert-probes: (0==header_name_len)||(header_name!=NULL) => %d\\n\", cond_a);\n    fprintf(log, \"assert-probes: (header_name==NULL)||(0!=header_name_len) => %d\\n\", cond_b);\n    fprintf(log, \"assert-probes: (0==header_value_len)||(header_value!=NULL) => %d\\n\", cond_c);\n    fprintf(log, \"assert-probes: (header_value==NULL)||(0!=header_value_len) => %d\\n\", cond_d);\n    fprintf(log, \"assert-probes: (header_name==NULL)||(header_value!=NULL) => %d\\n\", cond_e);\n    fprintf(log, \"assert-probes: (header_value!=NULL)||(header_name==NULL) => %d\\n\", cond_f);\n    fflush(log);\n  }\n\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  if (log)\n  {\n    fprintf(log, \"info: reached first of the two potentially-duplicate asserts (NULL == header_name) || (NULL != header_value)\\n\");\n    fflush(log);\n  }\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (log)\n  {\n    fprintf(log, \"info: reached second of the two potentially-duplicate asserts (NULL != header_value) || (NULL == header_name)\\n\");\n    fflush(log);\n  }\n\n  if (NULL != header_name)\n  {\n    if (log)\n    {\n      fprintf(log, \"branch: header_name != NULL, adding response entry: header_name=%p header_value=%p\\n\",\n              (void*)header_name, (void*)header_value);\n      fflush(log);\n    }\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n      if (log)\n      {\n        fprintf(log, \"info: MHD_add_response_entry_no_alloc_ returned MHD_NO; freed headers\\n\");\n        fflush(log);\n      }\n    }\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"branch: header_name == NULL, skipping add_response_entry, setting iret=MHD_YES\\n\");\n      fflush(log);\n    }\n    iret = MHD_YES;\n  }\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    if (log)\n    {\n      fprintf(log, \"info: queuing response (status=%u)\\n\", status_code);\n      fflush(log);\n    }\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    if (log)\n    {\n      fprintf(log, \"early-exit: failed to queue response (iret==MHD_NO); closing log and returning\\n\");\n      fclose(log);\n    }\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      if (log)\n      {\n        fprintf(log, \"early-exit: build_header_response failed twice; closing log and returning\\n\");\n        fclose(log);\n      }\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n\n  if (log)\n  {\n    fprintf(log, \"EXIT transmit_error_response_len: finished normally; connection=%p state=%d\\n\",\n            (void *)connection, (int)connection->state);\n    fclose(log);\n  }\n}\n"
}