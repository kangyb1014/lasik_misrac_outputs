{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\ntransmit_error_response_len calls CONNECTION_CLOSE_ERROR in multiple places. If the macro CONNECTION_CLOSE_ERROR expands (directly or indirectly) to a call to transmit_error_response_len (for example, to send an error response: TRANSMIT_ERROR_RESPONSE_LEN(connection, status, msg, msg_len, NULL,0,NULL,0)), this produces an indirect recursion: transmit_error_response_len -> CONNECTION_CLOSE_ERROR -> transmit_error_response_len -> ... which violates MISRA C 2023 Rule 17.2 (functions shall not call themselves, either directly or indirectly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified transmit_error_response_len code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4200.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of transmit_error_response_len:\n```c\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified transmit_error_response_len code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original transmit_error_response_len with it.\n  - Your function must have the exact same signature as transmit_error_response_len.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call transmit_error_response_len to check logs.\n  - Your function MUST preserve the original logic of transmit_error_response_len as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, transmit_error_response_len will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of transmit_error_response_len as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n  FILE *mhd_log = fopen(\"/tmp/logs/4200.txt\", \"a\");\n\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"ENTER transmit_error_response_len: connection=%p status=%u message_len=%zu message_ptr=%p header_name=%p header_value=%p\\n\",\n             (void *)connection, status_code, message_len, (void *)message, (void *)header_name, (void *)header_value);\n    fflush (mhd_log);\n  }\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"EARLY RETURN: stop_with_error already set; connection=%p state=%d\\n\",\n               (void *)connection, (int)connection->state);\n      fflush (mhd_log);\n    }\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    if (mhd_log)\n    {\n      fclose (mhd_log);\n    }\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"BRANCH: Too late to send error response; invoking CONNECTION_CLOSE_ERROR; connection=%p state=%d\\n\",\n               (void *)connection, (int)connection->state);\n      fflush (mhd_log);\n    }\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"After CONNECTION_CLOSE_ERROR (Too late) call; connection=%p\\n\",\n               (void *)connection);\n      fflush (mhd_log);\n      fclose (mhd_log);\n    }\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Discarding read buffer: connection=%p read_buffer_size=%zu\\n\",\n               (void *)connection, connection->read_buffer_size);\n      fflush (mhd_log);\n    }\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Destroying existing response: connection=%p rp.response=%p\\n\",\n               (void *)connection, (void *)connection->rp.response);\n      fflush (mhd_log);\n    }\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"Creating response from buffer: message_len=%zu message_ptr=%p\\n\",\n             message_len, (void *)message);\n    fflush (mhd_log);\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Failed to create response: connection=%p; closing connection state set to CLOSED\\n\",\n               (void *)connection);\n      fflush (mhd_log);\n    }\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    if (mhd_log)\n    {\n      fclose (mhd_log);\n    }\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Adding header entry: connection=%p header_name=%p header_name_len=%zu header_value=%p header_value_len=%zu\\n\",\n               (void *)connection, (void *)header_name, header_name_len, (void *)header_value, header_value_len);\n      fflush (mhd_log);\n    }\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"MHD_add_response_entry_no_alloc_ returned NO; freeing header_name/header_value; connection=%p\\n\",\n                 (void *)connection);\n        fflush (mhd_log);\n      }\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Calling MHD_queue_response: connection=%p status=%u response=%p in_access_handler(before)=%d\\n\",\n               (void *)connection, status_code, (void *)response, before ? 1 : 0);\n      fflush (mhd_log);\n    }\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"Returned from MHD_queue_response: connection=%p iret=%d\\n\",\n               (void *)connection, (int)iret);\n      fflush (mhd_log);\n    }\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"MHD_queue_response failed (iret==MHD_NO); invoking CONNECTION_CLOSE_ERROR; connection=%p\\n\",\n               (void *)connection);\n      fflush (mhd_log);\n    }\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"After CONNECTION_CLOSE_ERROR (failed to queue) call; connection=%p\\n\",\n               (void *)connection);\n      fflush (mhd_log);\n      fclose (mhd_log);\n    }\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"build_header_response failed (first try); connection=%p; preparing to reset buffers and retry\\n\",\n               (void *)connection);\n      fflush (mhd_log);\n    }\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"build_header_response failed (second try); invoking CONNECTION_CLOSE_ERROR; connection=%p\\n\",\n                 (void *)connection);\n        fflush (mhd_log);\n      }\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"After CONNECTION_CLOSE_ERROR (failed to create header) call; connection=%p\\n\",\n                 (void *)connection);\n        fflush (mhd_log);\n        fclose (mhd_log);\n      }\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"EXIT transmit_error_response_len: connection=%p state=%d keepalive=%d rp.response=%p\\n\",\n             (void *)connection, (int)connection->state, (int)connection->keepalive, (void *)connection->rp.response);\n    fflush (mhd_log);\n    fclose (mhd_log);\n  }\n}\n"
}