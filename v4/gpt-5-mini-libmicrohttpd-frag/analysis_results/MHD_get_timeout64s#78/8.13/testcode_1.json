{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Daemon *daemon' is not const-qualified even though the function body does not modify the daemon object (it only passes it to MHD_get_timeout64 and uses it read-only). According to MISRA C 2023 Rule 8.13, the parameter should be declared as 'const struct MHD_Daemon *daemon' when the pointed-to object is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64s code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2195.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64s:\n```c\n_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n    return -1;\n  if (INT64_MAX < utimeout)\n    return INT64_MAX;\n\n  return (int64_t) utimeout;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_timeout64s code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_timeout64s with it.\n  - Your function must have the exact same signature as MHD_get_timeout64s.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_timeout64s to check logs.\n  - Your function MUST preserve the original logic of MHD_get_timeout64s as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_timeout64s will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_timeout64s as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN int64_t\nMHD_get_timeout64s (struct MHD_Daemon *daemon)\n{\n  uint64_t utimeout;\n  /* Open log file for append; ignore failures and continue normal logic */\n  FILE *fp = fopen(\"/tmp/logs/2195.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"MHD_get_timeout64s: entered. daemon=%p\\n\", (void *)daemon);\n    fflush(fp);\n  }\n\n  /* Call original helper and log its result */\n  if (MHD_NO == MHD_get_timeout64 (daemon, &utimeout))\n  {\n    if (fp)\n    {\n      fprintf(fp, \"MHD_get_timeout64s: MHD_get_timeout64 returned MHD_NO -> returning -1\\n\");\n      fclose(fp);\n    }\n    return -1;\n  }\n\n  if (fp)\n  {\n    fprintf(fp, \"MHD_get_timeout64s: MHD_get_timeout64 succeeded, utimeout=%llu\\n\",\n            (unsigned long long) utimeout);\n    fflush(fp);\n  }\n\n  if (INT64_MAX < utimeout)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"MHD_get_timeout64s: utimeout (%llu) > INT64_MAX (%lld) -> returning INT64_MAX\\n\",\n              (unsigned long long) utimeout, (long long) INT64_MAX);\n      fclose(fp);\n    }\n    return INT64_MAX;\n  }\n\n  if (fp)\n  {\n    fprintf(fp, \"MHD_get_timeout64s: returning (int64_t) utimeout = %lld\\n\",\n            (long long) (int64_t) utimeout);\n    fclose(fp);\n  }\n\n  return (int64_t) utimeout;\n}"
}