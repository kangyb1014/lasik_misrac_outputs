{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf _MHD_UNPOISON_MEMORY expands to a no-op (for example an empty inline function or a macro that generates an executed no-op) then the call is executed but has no effect; removing it would not change program behaviour, so it would be dead code and violate MISRA C 2023 Rule 2.2. (If instead the macro actually performs sanitizer/unpoisoning actions in some builds, or is removed entirely by the preprocessor so no operation is emitted, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_try_alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1908.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_try_alloc:\n```c\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_try_alloc code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_try_alloc with it.\n  - Your function must have the exact same signature as MHD_pool_try_alloc.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_try_alloc to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_try_alloc will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n  FILE *log = fopen(\"/tmp/logs/1908.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_pool_try_alloc ENTER: pool=%p size=%zu required_bytes=%p\\n\",\n            (void *)pool, size, (void *)required_bytes);\n    /* Attempt to log key pool fields; cast to size_t for printing */\n    fprintf(log, \"pool->pos=%zu pool->end=%zu pool->size=%zu\\n\",\n            (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size);\n    fflush(log);\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    if (log)\n    {\n      fprintf(log, \"BRANCH: size too close to SIZE_MAX: size=%zu asize=%zu\\n\", size, asize);\n      fflush(log);\n    }\n    *required_bytes = SIZE_MAX;\n    if (log)\n    {\n      fprintf(log, \"RETURN NULL (size overflow) required_bytes=%zu\\n\", *required_bytes);\n      fclose(log);\n    }\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: not enough space: asize=%zu available=%zu\\n\",\n              asize, (size_t)(pool->end - pool->pos));\n      fflush(log);\n    }\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    if (log)\n    {\n      fprintf(log, \"RETURN NULL required_bytes=%zu\\n\", *required_bytes);\n      fclose(log);\n    }\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n\n  if (log)\n  {\n    fprintf(log, \"ALLOC path: ret=%p asize=%zu pool->end_before=%zu\\n\",\n            ret, asize, (size_t)pool->end);\n    fflush(log);\n  }\n\n  pool->end -= asize;\n\n  /* Probe memory content at the returned pointer before and after the\n     _MHD_UNPOISON_MEMORY call. This helps demonstrate whether the\n     unpoisoning operation actually changes observable memory bytes. */\n  unsigned char before0 = 0;\n  unsigned char after0 = 0;\n  if (ret != NULL)\n  {\n    /* Safe to read at least one byte within the allocated chunk. */\n    before0 = *((unsigned char *)ret);\n  }\n  if (log)\n  {\n    fprintf(log, \"memory_before_byte0=%u\\n\", (unsigned)before0);\n    fflush(log);\n  }\n\n  /* Original call retained to preserve semantics. If this macro expands\n     to a no-op in some builds, the call will still be executed here; the\n     logs above and below will show that the call occurred and whether any\n     observable memory byte changed as a result. */\n  _MHD_UNPOISON_MEMORY (ret, size);\n\n  if (ret != NULL)\n    after0 = *((unsigned char *)ret);\n  if (log)\n  {\n    fprintf(log, \"memory_after_byte0=%u\\n\", (unsigned)after0);\n    fprintf(log, \"RETURN ret=%p\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}