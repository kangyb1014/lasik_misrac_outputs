{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ROUND_TO_ALIGN_PLUS_RED_ZONE(size) yields asize == 0 (e.g. size == 0) and pool->end equals the buffer length (pool->size), the expression yields &pool->memory[pool->size] \u2014 a pointer one past the last element of the array. Passing that pointer to string.h functions that read or write bytes (for example strcpy, memcpy, memset, strlen, etc.) with a non\u2011zero length will access beyond the object bounds and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_try_alloc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1903.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_try_alloc:\n```c\nvoid *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  *required_bytes = 0;\n  ret = &pool->memory[pool->end - asize];\n  pool->end -= asize;\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_try_alloc code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_try_alloc with it.\n  - Your function must have the exact same signature as MHD_pool_try_alloc.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_try_alloc to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_try_alloc will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_try_alloc as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_try_alloc (struct MemoryPool *pool,\n                    size_t size,\n                    size_t *required_bytes)\n{\n  void *ret;\n  size_t asize;\n\n  /* Minimal entry log to show function was entered and parameters. */\n  {\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_try_alloc ENTER: pool=%p, size=%zu, required_bytes=%p\\n\",\n              (void *)pool, (size_t)size, (void *)required_bytes);\n      if (pool)\n      {\n        fprintf(f, \"  pool->memory=%p, pool->size=%zu, pool->pos=%zu, pool->end=%zu\\n\",\n                (void *)pool->memory, (size_t)pool->size, (size_t)pool->pos, (size_t)pool->end);\n      }\n      fclose(f);\n    }\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n\n  /* Log asize computed */\n  {\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  computed asize=%zu (from size=%zu)\\n\", (size_t)asize, (size_t)size);\n      fclose(f);\n    }\n  }\n\n  if ( (0 == asize) && (0 != size) )\n  { /* size is too close to SIZE_MAX, very unlikely */\n    /* Log this unusual branch */\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  BRANCH: asize==0 && size!=0 -> overflow case, returning NULL, required_bytes=SIZE_MAX\\n\");\n      fclose(f);\n    }\n\n    *required_bytes = SIZE_MAX;\n    return NULL;\n  }\n  if (asize > pool->end - pool->pos)\n  {\n    /* Log before computing required_bytes for this failure path */\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      size_t avail = pool->end - pool->pos;\n      fprintf(f, \"  BRANCH: asize (%zu) > available (%zu)\\n\", (size_t)asize, (size_t)avail);\n      fprintf(f, \"    pool->end=%zu, pool->pos=%zu, pool->size=%zu\\n\",\n              (size_t)pool->end, (size_t)pool->pos, (size_t)pool->size);\n      fclose(f);\n    }\n\n    mhd_assert ((pool->end - pool->pos) == \\\n                ROUND_TO_ALIGN (pool->end - pool->pos));\n    if (asize <= pool->end)\n      *required_bytes = asize - (pool->end - pool->pos);\n    else\n      *required_bytes = SIZE_MAX;\n\n    /* Log computed required_bytes for this failure path */\n    {\n      FILE *f2 = fopen(\"/tmp/logs/1903.txt\", \"a\");\n      if (f2)\n      {\n        fprintf(f2, \"    computed required_bytes=%zu\\n\", (size_t)*required_bytes);\n        fclose(f2);\n      }\n    }\n\n    return NULL;\n  }\n  *required_bytes = 0;\n\n  ret = &pool->memory[pool->end - asize];\n\n  /* Log allocation pointer and important surrounding state before mutation */\n  {\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  SUCCESS: ret=%p (=&pool->memory[pool->end - asize], index=%zu)\\n\",\n              (void *)ret, (size_t)(pool->end - asize));\n      fprintf(f, \"    pool->end (before)=%zu, asize=%zu, pool->size=%zu\\n\",\n              (size_t)pool->end, (size_t)asize, (size_t)pool->size);\n\n      /* Log pointer at pool->memory + pool->size (one past last element) for reproduction */\n      fprintf(f, \"    &pool->memory[pool->size] (one-past-end) = %p\\n\",\n              (void *)&pool->memory[pool->size]);\n\n      fclose(f);\n    }\n  }\n\n  pool->end -= asize;\n\n  /* Log state after adjusting pool->end */\n  {\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"    pool->end (after)=%zu\\n\", (size_t)pool->end);\n      fclose(f);\n    }\n  }\n\n  _MHD_UNPOISON_MEMORY (ret, size);\n\n  /* Final exit log */\n  {\n    FILE *f = fopen(\"/tmp/logs/1903.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_try_alloc EXIT: ret=%p, required_bytes=%zu\\n\",\n              (void *)ret, (size_t)*required_bytes);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}