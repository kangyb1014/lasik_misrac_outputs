{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe right-hand conjunct ((uint64_t) digit > (UINT64_MAX % 16)) is always false. UINT64_MAX % 16 == 15, and toxdigitvalue() (used under the loop condition digit >= 0) is expected to return values in the range 0..15 for hexadecimal digits, so digit > 15 can never hold. Therefore the whole ((res == (UINT64_MAX / 16)) && ...) term can never be true and that branch of the condition is effectively unreachable; this constitutes unreachable code under MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint64_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1026.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint64_n_:\n```c\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_strx_to_uint64_n_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_strx_to_uint64_n_ with it.\n  - Your function must have the exact same signature as MHD_strx_to_uint64_n_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_strx_to_uint64_n_ to check logs.\n  - Your function MUST preserve the original logic of MHD_strx_to_uint64_n_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_strx_to_uint64_n_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_strx_to_uint64_n_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  /* Logging to /tmp/logs/1026.txt to capture control flow and state. */\n  FILE *logf = fopen(\"/tmp/logs/1026.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"MHD_strx_to_uint64_n_: ENTER str=%p maxlen=%zu out_val=%p\\n\",\n            (const void *) str, maxlen, (void *) out_val);\n    fflush(logf);\n  }\n\n  size_t i;\n  uint64_t res;\n  int digit;\n\n  if (! str || ! out_val)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_strx_to_uint64_n_: NULL parameter(s) -> return 0\\n\");\n      fclose(logf);\n    }\n    return 0;\n  }\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    /* Evaluate the overflow checks and log all components to give evidence\n       about why the second conjunct is never true in practice. */\n    uint64_t max_div = (UINT64_MAX / 16);\n    uint64_t max_mod = (UINT64_MAX % 16);\n    int cond1 = (res > max_div);\n    int cond2_left = (res == max_div);\n    int cond2_right = ((uint64_t) digit > max_mod);\n    int cond2 = (cond2_left && cond2_right);\n\n    if (logf)\n    {\n      /* Log iteration state and sub-conditions. */\n      fprintf(logf, \"LOOP i=%zu str[i]=%c (0x%02x) digit=%d res=%llu\\n\",\n              i,\n              (str[i] >= 32 && str[i] < 127) ? str[i] : '?',\n              (unsigned int) (unsigned char) str[i],\n              digit,\n              (unsigned long long) res);\n      fprintf(logf, \"  checks: res > (UINT64_MAX/16) ? %d (res=%llu, max_div=%llu)\\n\",\n              cond1, (unsigned long long) res, (unsigned long long) max_div);\n      fprintf(logf, \"  checks: (res == max_div) ? %d, (digit > max_mod) ? %d => combined ? %d (digit=%d, max_mod=%llu)\\n\",\n              cond2_left, cond2_right, cond2,\n              digit, (unsigned long long) max_mod);\n      fflush(logf);\n    }\n\n    if ( cond1 || cond2 )\n    {\n      if (logf)\n      {\n        fprintf(logf, \"MHD_strx_to_uint64_n_: overflow condition met -> return 0\\n\");\n        fclose(logf);\n      }\n      return 0;\n    }\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n  {\n    *out_val = res;\n    if (logf)\n    {\n      fprintf(logf, \"MHD_strx_to_uint64_n_: SUCCESS parsed %zu digits final_res=%llu -> write out_val\\n\",\n              i, (unsigned long long) res);\n      fclose(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_strx_to_uint64_n_: no digits parsed -> return 0 (i=0)\\n\");\n      fclose(logf);\n    }\n  }\n\n  return i;\n}\n"
}