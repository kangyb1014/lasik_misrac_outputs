{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_lookup_header_s_token_ci has a non-const parameter for the token (e.g. prototype uses 'char *token'), then this call is a violation: a string literal \"close\" is being passed to a non-const pointer. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible, so the function parameter should be declared as 'const char *' (and likewise the connection parameter should be 'const struct MHD_Connection *' if the function only reads it).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4325.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified keepalive_possible code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original keepalive_possible with it.\n  - Your function must have the exact same signature as keepalive_possible.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call keepalive_possible to check logs.\n  - Your function MUST preserve the original logic of keepalive_possible as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, keepalive_possible will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of keepalive_possible as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  /* Provide minimal, local declarations for stdio-like functions so we can\n   * write logs even if <stdio.h> isn't visible in this translation unit.\n   * Use an incomplete 'struct FILE' type for pointer operations only. */\n  struct FILE;\n  extern struct FILE *fopen (const char *path, const char *mode);\n  extern int fprintf (struct FILE *stream, const char *format, ...);\n  extern int fclose (struct FILE *stream);\n\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Try to open log file. If it fails, proceed silently (to preserve\n   * original behavior). */\n  struct FILE *log = fopen(\"/tmp/logs/4325.txt\", \"a\");\n  if (log)\n  {\n    /* Basic entry log and snapshot of a few important fields. */\n    fprintf (log, \"ENTER keepalive_possible: connection=%p, c->keepalive=%d, r=%p\\n\",\n             (void *) connection, (int) c->keepalive, (void *) r);\n    fprintf (log, \"  r->flags=0x%08x, r->flags_auto=0x%08x, c->rq.http_ver=%d, c->stop_with_error=%d\\n\",\n             (unsigned) r->flags, (unsigned) r->flags_auto,\n             (int) c->rq.http_ver, (int) c->stop_with_error);\n  }\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_CLOSE (c->keepalive == MHD_CONN_MUST_CLOSE)\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_UPGRADE (r->upgrade_handler != NULL)\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_CLOSE (read_closed=%d discard_request=%d)\\n\",\n               (int) c->read_closed, (int) c->discard_request);\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_CLOSE (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT set)\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_CLOSE (MHD_RAF_HAS_CONNECTION_CLOSE set)\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    if (log)\n    {\n      fprintf (log, \"EARLY RETURN: MHD_CONN_MUST_CLOSE (HTTP version not supported: %d)\\n\",\n               (int) c->rq.http_ver);\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* Probe before calling MHD_lookup_header_s_token_ci with the literal \"close\".\n   * This captures the address of the string literal and the connection used.\n   * It helps to reproduce the scenario where a string literal is passed to a\n   * non-const parameter. */\n  if (log)\n  {\n    /* Print the pointer value of the literal for evidence. */\n    fprintf (log, \"ABOUT TO CALL: MHD_lookup_header_s_token_ci(c=%p, header=%d, token=%p \\\"close\\\")\\n\",\n             (void *) c, (int) MHD_HTTP_HEADER_CONNECTION, (void *) \"close\");\n  }\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    if (log)\n    {\n      fprintf (log, \"MATCH: connection header contains token 'close' -> MHD_CONN_MUST_CLOSE\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (log)\n      fprintf (log, \"HTTP/1.0 or server flagged as 1.0: checking for 'Keep-Alive' token\\n\");\n\n    if (log)\n    {\n      fprintf (log, \"ABOUT TO CALL: MHD_lookup_header_s_token_ci(connection=%p, header=%d, token=%p \\\"Keep-Alive\\\")\\n\",\n               (void *) connection, (int) MHD_HTTP_HEADER_CONNECTION, (void *) \"Keep-Alive\");\n    }\n\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      if (log)\n      {\n        fprintf (log, \"MATCH: connection header contains token 'Keep-Alive' -> MHD_CONN_USE_KEEPALIVE\\n\");\n        fclose (log);\n      }\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    if (log)\n    {\n      fprintf (log, \"NO MATCH: no 'Keep-Alive' token -> MHD_CONN_MUST_CLOSE\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    if (log)\n    {\n      fprintf (log, \"RETURN: MHD_CONN_USE_KEEPALIVE (HTTP/1.1 compatible)\\n\");\n      fclose (log);\n    }\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  if (log)\n  {\n    fprintf (log, \"FINAL RETURN: MHD_CONN_MUST_CLOSE (fallback)\\n\");\n    fclose (log);\n  }\n\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}