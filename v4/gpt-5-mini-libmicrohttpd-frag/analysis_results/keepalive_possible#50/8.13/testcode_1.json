{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const pointer parameter (struct MHD_Connection *connection) and uses it only to read fields. In the fragment the code reads connection->rq.http_ver and connection->rp.response->flags through that non-const pointer. Also the local alias is declared as 'struct MHD_Connection *const c' (a const pointer to mutable data) rather than 'const struct MHD_Connection *' (pointer to const). Because the pointed-to data is not modified and could be const-qualified, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified keepalive_possible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4325.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of keepalive_possible:\n```c\nstatic enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n    return MHD_CONN_MUST_CLOSE;\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n    return MHD_CONN_MUST_CLOSE;\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n    return MHD_CONN_MUST_CLOSE;\n\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n    return MHD_CONN_MUST_CLOSE;\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n      return MHD_CONN_USE_KEEPALIVE;\n\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n    return MHD_CONN_USE_KEEPALIVE;\n\n  return MHD_CONN_MUST_CLOSE;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified keepalive_possible code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original keepalive_possible with it.\n  - Your function must have the exact same signature as keepalive_possible.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call keepalive_possible to check logs.\n  - Your function MUST preserve the original logic of keepalive_possible as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, keepalive_possible will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of keepalive_possible as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_ConnKeepAlive\nkeepalive_possible (struct MHD_Connection *connection)\n{\n  /* Local prototypes for logging helpers to avoid requiring headers in this\n     replacement function. These are declared extern to avoid redefining\n     library symbols. */\n  extern void *fopen (const char *, const char *);\n  extern int fprintf (void *, const char *, ...);\n  extern int fclose (void *);\n  extern int system (const char *);\n\n  FILE *logf = (FILE *) fopen (\"/tmp/logs/4325.txt\", \"a\");\n  if (NULL == logf)\n  {\n    /* Try to create the directory and reopen the log file. */\n    (void) system (\"mkdir -p /tmp/logs >/dev/null 2>&1\");\n    logf = (FILE *) fopen (\"/tmp/logs/4325.txt\", \"a\");\n  }\n\n  if (NULL != logf)\n  {\n    /* Log entrance and the pointer values (addresses) to provide evidence\n       that the function was reached and which pointers/aliases are used. */\n    (void) fprintf (logf, \"enter keepalive_possible: connection=%p\\n\", (void *) connection);\n  }\n\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  if (NULL != logf)\n  {\n    (void) fprintf (logf, \"aliases: c=%p r=%p\\n\", (void *) c, (void *) r);\n    (void) fprintf (logf, \"initial-state: keepalive=%lu stop_with_error=%lu discard_request=%lu read_closed=%lu\\n\",\n                    (unsigned long) c->keepalive,\n                    (unsigned long) c->stop_with_error,\n                    (unsigned long) c->discard_request,\n                    (unsigned long) c->read_closed);\n    (void) fprintf (logf, \"response-flags: flags=%lu flags_auto=%lu upgrade_handler=%p\\n\",\n                    (unsigned long) r->flags,\n                    (unsigned long) r->flags_auto,\n                    (void *) r->upgrade_handler);\n    (void) fprintf (logf, \"request-http-ver (via c): %lu\\n\", (unsigned long) c->rq.http_ver);\n  }\n\n  mhd_assert (NULL != r);\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (keepalive forced)\\n\");\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n#ifdef UPGRADE_SUPPORT\n  /* TODO: Move below the next check when MHD stops closing connections\n   * when response is queued in first callback */\n  if (NULL != r->upgrade_handler)\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"upgrade_handler present -> asserting no connection close token and returning MUST_UPGRADE\\n\");\n\n    /* No \"close\" token is enforced by 'add_response_header_connection()' */\n    mhd_assert (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    /* Valid HTTP version is enforced by 'MHD_queue_response()' */\n    mhd_assert (MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver));\n    mhd_assert (! c->stop_with_error);\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_UPGRADE\\n\");\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_UPGRADE;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  mhd_assert ( (! c->stop_with_error) || (c->discard_request));\n  if ((c->read_closed) || (c->discard_request))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (read_closed || discard_request) read_closed=%lu discard_request=%lu\\n\",\n                      (unsigned long) c->read_closed,\n                      (unsigned long) c->discard_request);\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (0 != (r->flags & MHD_RF_HTTP_1_0_COMPATIBLE_STRICT))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (RFC 1.0 strict) flags=%lu\\n\", (unsigned long) r->flags);\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n  if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (flags_auto has connection close) flags_auto=%lu\\n\", (unsigned long) r->flags_auto);\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (! MHD_IS_HTTP_VER_SUPPORTED (c->rq.http_ver))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (HTTP version not supported) rq.http_ver=%lu\\n\", (unsigned long) c->rq.http_ver);\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (NULL != logf)\n    (void) fprintf (logf, \"checking header: Connection: close (via c)\\n\");\n  if (MHD_lookup_header_s_token_ci (c,\n                                    MHD_HTTP_HEADER_CONNECTION,\n                                    \"close\"))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (Connection: close header present)\\n\");\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  /* The following branch uses the original 'connection' parameter rather\n     than the local alias 'c'. We log both usages to provide evidence that\n     the function reads from the non-const parameter only. */\n  if (NULL != logf)\n    (void) fprintf (logf, \"checking HTTP/1.0 path: connection->rq.http_ver=%lu connection->rp.response->flags=%lu\\n\",\n                    (unsigned long) connection->rq.http_ver,\n                    (unsigned long) connection->rp.response->flags);\n\n  if ((MHD_HTTP_VER_1_0 == connection->rq.http_ver) ||\n      (0 != (connection->rp.response->flags & MHD_RF_HTTP_1_0_SERVER)))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"in HTTP/1.0 branch - checking header: Connection: Keep-Alive (via connection)\\n\");\n\n    if (MHD_lookup_header_s_token_ci (connection,\n                                      MHD_HTTP_HEADER_CONNECTION,\n                                      \"Keep-Alive\"))\n    {\n      if (NULL != logf)\n        (void) fprintf (logf, \"decision: USE_KEEPALIVE (Connection: Keep-Alive)\\n\");\n      if (NULL != logf)\n        (void) fclose (logf);\n      return MHD_CONN_USE_KEEPALIVE;\n    }\n\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: MUST_CLOSE (HTTP/1.0 with no Keep-Alive)\\n\");\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_MUST_CLOSE;\n  }\n\n  if (MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n  {\n    if (NULL != logf)\n      (void) fprintf (logf, \"decision: USE_KEEPALIVE (HTTP/1.1 compatible)\\n\");\n    if (NULL != logf)\n      (void) fclose (logf);\n    return MHD_CONN_USE_KEEPALIVE;\n  }\n\n  if (NULL != logf)\n    (void) fprintf (logf, \"decision: MUST_CLOSE (fallback)\\n\");\n  if (NULL != logf)\n    (void) fclose (logf);\n  return MHD_CONN_MUST_CLOSE;\n}\n"
}