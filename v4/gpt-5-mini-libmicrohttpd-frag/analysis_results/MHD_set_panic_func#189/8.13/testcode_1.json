{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *cls' is an unqualified pointer to caller data. In the shown code the value is simply stored in mhd_panic_cls (mhd_panic_cls = cls) and not modified here; if the intent is to treat the pointed-to object as read-only (typical for user-supplied context pointers passed to callbacks), the parameter should be declared 'const void *cls' (and mhd_panic_cls likewise 'const void *'). As written the pointer is not const-qualified, so Rule 8.13 is violated unless there is a documented need to modify the pointee through this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_panic_func code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_panic_func:\n```c\n_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n  if ((MHD_PanicCallback) NULL != cb)\n    mhd_panic = cb;\n  else\n    mhd_panic = &mhd_panic_std;\n\n  mhd_panic_cls = cls;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_panic_func code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_panic_func with it.\n  - Your function must have the exact same signature as MHD_set_panic_func.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_panic_func to check logs.\n  - Your function MUST preserve the original logic of MHD_set_panic_func as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_panic_func will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_panic_func as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_set_panic_func (MHD_PanicCallback cb,\n                    void *cls)\n{\n    /* Lightweight local declarations for stdio functions to avoid\n       adding new includes; these are only used for logging. */\n    typedef struct FILE FILE;\n    extern FILE *fopen (const char *filename, const char *mode);\n    extern int fprintf (FILE *stream, const char *format, ...);\n    extern int fclose (FILE *stream);\n\n    FILE *logf = fopen(\"/tmp/logs/3535.txt\", \"a\");\n    if (logf != (FILE *)NULL)\n    {\n        /* Log entry and parameters as pointer values */\n        /* cast cb to void* for printing; implementation-defined but\n           acceptable for diagnostic logging on common platforms */\n        (void) fprintf(logf, \"MHD_set_panic_func entered: cb=%p, cls=%p\\n\",\n                       (void *) cb, cls);\n    }\n\n    if ((MHD_PanicCallback) NULL != cb)\n    {\n        mhd_panic = cb;\n        if (logf != (FILE *)NULL)\n        {\n            (void) fprintf(logf, \"mhd_panic assigned to cb (%p)\\n\", (void *) cb);\n        }\n    }\n    else\n    {\n        mhd_panic = &mhd_panic_std;\n        if (logf != (FILE *)NULL)\n        {\n            (void) fprintf(logf, \"mhd_panic assigned to mhd_panic_std (%p)\\n\",\n                           (void *) &mhd_panic_std);\n        }\n    }\n\n    /* Preserve original behavior: store the caller-supplied context pointer. */\n    mhd_panic_cls = cls;\n\n    if (logf != (FILE *)NULL)\n    {\n        (void) fprintf(logf, \"mhd_panic_cls assigned to %p\\n\", cls);\n        (void) fclose(logf);\n    }\n}\n"
}