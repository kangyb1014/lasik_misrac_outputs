{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'pos' is declared as 'struct MHD_Connection *pos' but in the loop and subsequently it is only used for read-only accesses (pos->connection_timeout_ms, pos->last_activity, pos->prevX). Therefore 'pos' could be declared as 'const struct MHD_Connection *pos' (and related pointers like daemon->manual_timeout_tail / earliest_tmot_conn and the parameter type of connection_get_wait adjusted if necessary). As written the code uses a non-const pointer where a pointer-to-const would be possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3075.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_timeout64 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_timeout64 with it.\n  - Your function must have the exact same signature as MHD_get_timeout64.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_timeout64 to check logs.\n  - Your function MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_timeout64 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n  FILE *log = NULL;\n  unsigned int manual_idx = 0;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* Open log file for appending; best-effort only. */\n  log = fopen(\"/tmp/logs/3075.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTER MHD_get_timeout64: daemon=%p timeout64=%p\\n\", (void *)daemon, (void *)timeout64);\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    if (log)\n    {\n      fprintf(log, \"branch: MHD_D_IS_USING_THREAD_PER_CONN_ -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    if (log)\n    {\n      fprintf(log, \"branch: pending data/cleanup/resume/new/shutdown -> returning timeout=0 MHD_YES\\n\");\n      fclose(log);\n    }\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    if (log)\n    {\n      fprintf(log, \"branch: epoll/eready -> returning timeout=0 MHD_YES\\n\");\n      fclose(log);\n    }\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if (log)\n    fprintf(log, \"normal_timeout_tail=%p\\n\", (void *)pos);\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    if (log)\n      fprintf(log, \"initial earliest from normal tail: conn=%p last_activity=%llu timeout_ms=%llu earliest_deadline=%llu\\n\",\n              (void *)pos,\n              (unsigned long long) pos->last_activity,\n              (unsigned long long) pos->connection_timeout_ms,\n              (unsigned long long) earliest_deadline);\n  }\n  else if (log)\n  {\n    if (pos)\n      fprintf(log, \"normal tail present but connection_timeout_ms==0 for %p\\n\", (void *)pos);\n    else\n      fprintf(log, \"no normal_timeout_tail\\n\");\n  }\n\n  /* Iterate manual timeout list and find earliest deadline */\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (log)\n      fprintf(log, \"manual[%u]: conn=%p connection_timeout_ms=%llu last_activity=%llu prevX=%p\\n\",\n              manual_idx++,\n              (void *)pos,\n              (unsigned long long) pos->connection_timeout_ms,\n              (unsigned long long) pos->last_activity,\n              (void *)pos->prevX);\n\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        if (log)\n          fprintf(log, \"  -> new earliest_tmot_conn=%p earliest_deadline=%llu\\n\",\n                  (void *)earliest_tmot_conn,\n                  (unsigned long long) earliest_deadline);\n      }\n      else if (log)\n      {\n        fprintf(log, \"  -> not earlier than current earliest (earliest_deadline=%llu)\\n\",\n                (unsigned long long) earliest_deadline);\n      }\n    }\n    else if (log)\n    {\n      fprintf(log, \"  -> skipped (connection_timeout_ms==0)\\n\");\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    if (log)\n      fprintf(log, \"selected earliest_tmot_conn=%p final earliest_deadline=%llu\\n\",\n              (void *)earliest_tmot_conn,\n              (unsigned long long) earliest_deadline);\n\n    /* Preserve original behaviour: use connection_get_wait to compute value */\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n\n    if (log)\n    {\n      fprintf(log, \"connection_get_wait returned %llu assigned to *timeout64. returning MHD_YES\\n\",\n              (unsigned long long) *timeout64);\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"no earliest timeout connection found -> returning MHD_NO\\n\");\n    fclose(log);\n  }\n  return MHD_NO;\n}\n"
}