{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'earliest_deadline = 0;' is redundant: earliest_deadline is always assigned a meaningful value before any use (when earliest_tmot_conn is set from normal_timeout_tail or later in the manual-timeout loop, and the comparison using earliest_deadline is short\u2011circuited when earliest_tmot_conn is NULL). Removing this assignment would not change program behaviour (it only mutes a compiler warning), so the operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3078.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_timeout64 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_timeout64 with it.\n  - Your function must have the exact same signature as MHD_get_timeout64.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_timeout64 to check logs.\n  - Your function MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_timeout64 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n  FILE *mhd_log_file = NULL;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* Open the log file for appending; best-effort logging only. Do not\n     alter program control flow if logging fails. */\n  mhd_log_file = fopen(\"/tmp/logs/3078.txt\", \"a\");\n  if (NULL != mhd_log_file)\n  {\n    fprintf (mhd_log_file, \"MHD_get_timeout64: entered (daemon=%p, timeout64=%p)\\n\",\n             (void *) daemon, (void *) timeout64);\n    fprintf (mhd_log_file, \"  flags: data_already_pending=%d, cleanup_head=%p, resuming=%d, have_new=%d, shutdown=%d\\n\",\n             (int) daemon->data_already_pending,\n             (void *) daemon->cleanup_head,\n             (int) daemon->resuming,\n             (int) daemon->have_new,\n             (int) daemon->shutdown);\n  }\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    if (NULL != mhd_log_file)\n    {\n      fprintf (mhd_log_file, \"  branch: thread-per-conn -> returning MHD_NO\\n\");\n      fclose (mhd_log_file);\n    }\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    if (NULL != mhd_log_file)\n    {\n      fprintf (mhd_log_file, \"  branch: data/cleanup/resume/new/shutdown pending -> timeout=0, returning MHD_YES\\n\");\n      fclose (mhd_log_file);\n    }\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    if (NULL != mhd_log_file)\n    {\n      fprintf (mhd_log_file, \"  branch: epoll ready heads non-empty -> timeout=0, returning MHD_YES\\n\");\n      fclose (mhd_log_file);\n    }\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  /* Log just before the assignment that is reported as dead code. */\n  if (NULL != mhd_log_file)\n  {\n    fprintf (mhd_log_file, \"  before earliest_deadline init: earliest_tmot_conn=%p\\n\",\n             (void *) earliest_tmot_conn);\n  }\n  earliest_deadline = 0; /* mute compiler warning */\n  if (NULL != mhd_log_file)\n  {\n    fprintf (mhd_log_file, \"  after earliest_deadline init: earliest_deadline=%llu\\n\",\n             (unsigned long long) earliest_deadline);\n  }\n\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    if (NULL != mhd_log_file)\n    {\n      fprintf (mhd_log_file, \"  normal timeout tail: pos=%p, last_activity=%llu, connection_timeout_ms=%llu -> earliest_deadline=%llu\\n\",\n               (void *) pos,\n               (unsigned long long) pos->last_activity,\n               (unsigned long long) pos->connection_timeout_ms,\n               (unsigned long long) earliest_deadline);\n    }\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if (NULL != mhd_log_file)\n      {\n        fprintf (mhd_log_file, \"  manual loop: pos=%p, last_activity=%llu, connection_timeout_ms=%llu, earliest_tmot_conn=%p, earliest_deadline=%llu\\n\",\n                 (void *) pos,\n                 (unsigned long long) pos->last_activity,\n                 (unsigned long long) pos->connection_timeout_ms,\n                 (void *) earliest_tmot_conn,\n                 (unsigned long long) earliest_deadline);\n      }\n\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        if (NULL != mhd_log_file)\n        {\n          fprintf (mhd_log_file, \"    -> chosen new earliest_tmot_conn=%p, earliest_deadline=%llu\\n\",\n                   (void *) earliest_tmot_conn,\n                   (unsigned long long) earliest_deadline);\n        }\n      }\n      else\n      {\n        if (NULL != mhd_log_file)\n        {\n          fprintf (mhd_log_file, \"    -> not chosen\\n\");\n        }\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    uint64_t wait_val = connection_get_wait (earliest_tmot_conn);\n    if (NULL != mhd_log_file)\n    {\n      fprintf (mhd_log_file, \"  final: earliest_tmot_conn=%p, earliest_deadline=%llu, connection_get_wait=%llu -> returning MHD_YES\\n\",\n               (void *) earliest_tmot_conn,\n               (unsigned long long) earliest_deadline,\n               (unsigned long long) wait_val);\n      fclose (mhd_log_file);\n    }\n    *timeout64 = wait_val;\n    return MHD_YES;\n  }\n  if (NULL != mhd_log_file)\n  {\n    fprintf (mhd_log_file, \"  final: no earliest_tmot_conn -> returning MHD_NO\\n\");\n    fclose (mhd_log_file);\n  }\n  return MHD_NO;\n}\n"
}