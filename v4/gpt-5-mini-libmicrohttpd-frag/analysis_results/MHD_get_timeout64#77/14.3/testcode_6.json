{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression can be invariant when the macro expands to a compile-time constant. For example, if threading support is disabled (e.g. MHD_USE_THREADS not defined) the macro MHD_D_IS_USING_THREAD_PER_CONN_(daemon) may be defined to 0 (or 1) regardless of the runtime 'daemon' argument, making the if (MHD_D_IS_USING_THREAD_PER_CONN_(daemon)) an invariant controlling expression (if (0) or if (1)). In that compilation/configuration case Rule 14.3 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_timeout64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3079.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout64:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    *timeout64 = 0;\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    *timeout64 = connection_get_wait (earliest_tmot_conn);\n    return MHD_YES;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_timeout64 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_timeout64 with it.\n  - Your function must have the exact same signature as MHD_get_timeout64.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_timeout64 to check logs.\n  - Your function MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_timeout64 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_timeout64 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_get_timeout64 (struct MHD_Daemon *daemon,\n                   uint64_t *timeout64)\n{\n  uint64_t earliest_deadline;\n  struct MHD_Connection *pos;\n  struct MHD_Connection *earliest_tmot_conn; /**< the connection with earliest timeout */\n  FILE *logf = fopen(\"/tmp/logs/3079.txt\", \"a\");\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (logf)\n  {\n    fprintf(logf, \"MHD_get_timeout64: entry daemon=%p timeout64=%p\\n\", (void*)daemon, (void*)timeout64);\n  }\n\n  /* Probe: log the value of the thread-per-connection controlling macro */\n  {\n    int using_tpc = MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) ? 1 : 0;\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: MHD_D_IS_USING_THREAD_PER_CONN_() => %d\\n\", using_tpc);\n  }\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Illegal call to MHD_get_timeout.\\n\"));\n#endif\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: returning MHD_NO because thread-per-conn in use\\n\");\n    if (logf)\n      fclose(logf);\n    return MHD_NO;\n  }\n\n  /* Log the state flags that can force an immediate timeout */\n  if (logf)\n  {\n    fprintf(logf, \"MHD_get_timeout64: daemon->data_already_pending=%d cleanup_head=%p resuming=%d have_new=%d shutdown=%d\\n\",\n            (int)daemon->data_already_pending,\n            (void*)daemon->cleanup_head,\n            (int)daemon->resuming,\n            (int)daemon->have_new,\n            (int)daemon->shutdown);\n  }\n\n  if (daemon->data_already_pending\n      || (NULL != daemon->cleanup_head)\n      || daemon->resuming\n      || daemon->have_new\n      || daemon->shutdown)\n  {\n    /* Some data or connection statuses already waiting to be processed. */\n    *timeout64 = 0;\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: immediate timeout due to pending data or state; timeout64=0\\n\");\n    if (logf)\n      fclose(logf);\n    return MHD_YES;\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      ((NULL != daemon->eready_head)\n#if defined(UPGRADE_SUPPORT) && defined(HTTPS_SUPPORT)\n       || (NULL != daemon->eready_urh_head)\n#endif /* UPGRADE_SUPPORT && HTTPS_SUPPORT */\n      ) )\n  {\n    /* Some connection(s) already have some data pending. */\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: EPOLL has ready connections; eready_head=%p\\n\", (void*)daemon->eready_head);\n    *timeout64 = 0;\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: immediate timeout due to epoll ready; timeout64=0\\n\");\n    if (logf)\n      fclose(logf);\n    return MHD_YES;\n  }\n#endif /* EPOLL_SUPPORT */\n\n  earliest_tmot_conn = NULL;\n  earliest_deadline = 0; /* mute compiler warning */\n  /* normal timeouts are sorted, so we only need to look at the 'tail' (oldest) */\n  pos = daemon->normal_timeout_tail;\n  if (logf)\n    fprintf(logf, \"MHD_get_timeout64: normal_timeout_tail=%p\\n\", (void*)pos);\n  if ( (NULL != pos) &&\n       (0 != pos->connection_timeout_ms) )\n  {\n    earliest_tmot_conn = pos;\n    earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: initial earliest from normal tail pos=%p timeout_ms=%llu last_activity=%llu earliest_deadline=%llu\\n\",\n              (void*)pos,\n              (unsigned long long)pos->connection_timeout_ms,\n              (unsigned long long)pos->last_activity,\n              (unsigned long long)earliest_deadline);\n  }\n\n  for (pos = daemon->manual_timeout_tail; NULL != pos; pos = pos->prevX)\n  {\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: examining manual pos=%p timeout_ms=%llu last_activity=%llu\\n\",\n              (void*)pos,\n              (unsigned long long)pos->connection_timeout_ms,\n              (unsigned long long)pos->last_activity);\n\n    if (0 != pos->connection_timeout_ms)\n    {\n      if ( (NULL == earliest_tmot_conn) ||\n           (earliest_deadline - pos->last_activity >\n            pos->connection_timeout_ms) )\n      {\n        earliest_tmot_conn = pos;\n        earliest_deadline = pos->last_activity + pos->connection_timeout_ms;\n        if (logf)\n          fprintf(logf, \"MHD_get_timeout64: updated earliest to pos=%p new_earliest_deadline=%llu\\n\",\n                  (void*)pos,\n                  (unsigned long long)earliest_deadline);\n      }\n    }\n  }\n\n  if (NULL != earliest_tmot_conn)\n  {\n    uint64_t wait = connection_get_wait (earliest_tmot_conn);\n    if (logf)\n      fprintf(logf, \"MHD_get_timeout64: earliest_tmot_conn=%p computed wait=%llu -> returning MHD_YES\\n\",\n              (void*)earliest_tmot_conn,\n              (unsigned long long)wait);\n    *timeout64 = wait;\n    if (logf)\n      fclose(logf);\n    return MHD_YES;\n  }\n  if (logf)\n    fprintf(logf, \"MHD_get_timeout64: no timeout found; returning MHD_NO\\n\");\n  if (logf)\n    fclose(logf);\n  return MHD_NO;\n}\n"
}