{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is initialized from con->daemon but is only used for read-only access (e.g. checking options, shutdown flag, and passing to logging macros). It is declared as 'struct MHD_Daemon *daemon' (non-const) even though it could be 'const struct MHD_Daemon *daemon' to reflect read-only use. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified thread_main_connection_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of thread_main_connection_upgrade:\n```c\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified thread_main_connection_upgrade code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original thread_main_connection_upgrade with it.\n  - Your function must have the exact same signature as thread_main_connection_upgrade.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call thread_main_connection_upgrade to check logs.\n  - Your function MUST preserve the original logic of thread_main_connection_upgrade as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, thread_main_connection_upgrade will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of thread_main_connection_upgrade as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  /* Log entry and key pointers/state for post-mortem. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER: thread_main_connection_upgrade: con=%p, urh=%p, daemon=%p\\n\",\n              (void *) con, (void *) urh, (void *) daemon);\n      if (daemon)\n      {\n        fprintf(log, \"daemon->options=0x%lx, daemon->shutdown=%d, con->tls_read_ready=%d\\n\",\n                (unsigned long) daemon->options,\n                (int) daemon->shutdown,\n                (int) con->tls_read_ready);\n      }\n      fclose(log);\n    }\n  }\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    int __iter_select = 0;\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      /* Log iteration and buffer state */\n      {\n        FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"SELECT_LOOP[%d]: urh=%p in_size=%u out_size=%u in_used=%u out_used=%u tls_read_ready=%d daemon_shutdown=%d\\n\",\n                  __iter_select,\n                  (void *) urh,\n                  (unsigned) urh->in_buffer_size,\n                  (unsigned) urh->out_buffer_size,\n                  (unsigned) urh->in_buffer_used,\n                  (unsigned) urh->out_buffer_used,\n                  (int) con->tls_read_ready,\n                  (int) daemon->shutdown);\n          fclose(log);\n        }\n      }\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        {\n          FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"urh_to_fdset FAILED: urh=%p\\n\", (void *) urh);\n            fclose(log);\n          }\n        }\n        break;\n      }\n\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n\n        {\n          FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"about to select: max_fd=%lld tvp=%p\", (long long) max_fd, (void *) tvp);\n            if (tvp)\n              fprintf(log, \" tv_sec=%ld tv_usec=%ld\", (long) tvp->tv_sec, (long) tvp->tv_usec);\n            fprintf(log, \"\\n\");\n            fclose(log);\n          }\n        }\n\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        {\n          FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"select ERROR: err=%d str=%s\\n\", err, MHD_socket_strerr_ (err));\n            fclose(log);\n          }\n        }\n        break;\n      }\n\n      {\n        FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"select returned num_ready=%d\\n\", num_ready);\n          fclose(log);\n        }\n      }\n\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n\n      __iter_select++;\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"POLL path chosen: p0=%d p1=%d\\n\", p[0].fd, p[1].fd);\n        fclose(log);\n      }\n    }\n\n    int __iter_poll = 0;\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      {\n        FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"POLL_LOOP[%d]: urh=%p in_size=%u out_size=%u in_used=%u out_used=%u p0.events=%d p1.events=%d tls_read_ready=%d daemon_shutdown=%d\\n\",\n                  __iter_poll,\n                  (void *) urh,\n                  (unsigned) urh->in_buffer_size,\n                  (unsigned) urh->out_buffer_size,\n                  (unsigned) urh->in_buffer_used,\n                  (unsigned) urh->out_buffer_used,\n                  p[0].events,\n                  p[1].events,\n                  (int) con->tls_read_ready,\n                  (int) daemon->shutdown);\n          fclose(log);\n        }\n      }\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        {\n          FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"poll ERROR: err=%d str=%s\\n\", err, MHD_socket_strerr_ (err));\n            fclose(log);\n          }\n        }\n        break;\n      }\n      {\n        FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"poll returned: p0.revents=%d p1.revents=%d\\n\", p[0].revents, p[1].revents);\n          fclose(log);\n        }\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n\n      __iter_poll++;\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n\n  {\n    FILE *log = fopen(\"/tmp/logs/3735.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"FINISH: calling MHD_connection_finish_forward_: con=%p urh=%p daemon=%p\\n\",\n              (void *) con, (void *) con->urh, (void *) con->daemon);\n      fclose(log);\n    }\n  }\n\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n}\n"
}