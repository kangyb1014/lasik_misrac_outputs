{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemchr() reads up to token_len bytes from token. If token does not actually reference an object of at least token_len bytes (for example: token is a NUL-terminated string \"abc\" allocated 4 bytes but token_len == 10), memchr(token, '\\t', token_len) will read beyond the bounds of token and invoke undefined behavior. This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_remove_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/33.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_remove_token_caseless_:\n```c\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  return token_removed;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_remove_token_caseless_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_remove_token_caseless_ with it.\n  - Your function must have the exact same signature as MHD_str_remove_token_caseless_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_remove_token_caseless_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_remove_token_caseless_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  /* Open log file for evidence collection. We try to log as much state as\n   * possible without changing the original logic. The test runner will\n   * inspect /tmp/logs/33.txt for the sequence of events. */\n  FILE *mhd_log = fopen(\"/tmp/logs/33.txt\", \"a\");\n  if (mhd_log != NULL)\n  {\n    fprintf(mhd_log, \"ENTER MHD_str_remove_token_caseless_: str=%p str_len=%zu token=%p token_len=%zu buf=%p buf_size_ptr=%p buf_size_val=%zd\\n\",\n            (const void *) str, str_len, (const void *) token, token_len,\n            (void *) buf, (void *) buf_size, (buf_size ? *buf_size : (ssize_t) -1));\n    fflush(mhd_log);\n  }\n\n  /* Replace the direct memchr assertions with single-call checks so we can\n   * log the result (we still assert the same condition afterwards). */\n  {\n    const void *res0 = memchr (token, 0, token_len);\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"memchr(token, '\\0', %zu) -> %p\\n\", token_len, res0);\n      fflush(mhd_log);\n    }\n    mhd_assert (NULL == res0);\n  }\n  {\n    const void *res1 = memchr (token, ' ', token_len);\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"memchr(token, ' ', %zu) -> %p\\n\", token_len, res1);\n      fflush(mhd_log);\n    }\n    mhd_assert (NULL == res1);\n  }\n  {\n    const void *res2 = memchr (token, '\\t', token_len);\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"memchr(token, '\\\\t', %zu) -> %p\\n\", token_len, res2);\n      fflush(mhd_log);\n    }\n    mhd_assert (NULL == res2);\n  }\n  {\n    const void *res3 = memchr (token, ',', token_len);\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"memchr(token, ',', %zu) -> %p\\n\", token_len, res3);\n      fflush(mhd_log);\n    }\n    mhd_assert (NULL == res3);\n  }\n\n  mhd_assert (0 <= *buf_size);\n  if (mhd_log != NULL)\n  {\n    fprintf(mhd_log, \"assert buf_size non-negative passed, buf_size=%zd\\n\", *buf_size);\n    fflush(mhd_log);\n  }\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"overflow check failed: str_len=%zu -> refusing (set buf_size=-1)\\n\", str_len);\n      fflush(mhd_log);\n      fclose(mhd_log);\n    }\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"LOOP: s1_offset=%td (of %zu)\\n\", (ptrdiff_t)(s1 - str), str_len);\n      fflush(mhd_log);\n    }\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"after match loop: s1_offset=%td t_pos=%zu token_len=%zu\\n\",\n              (ptrdiff_t)(s1 - str), t_pos, token_len);\n      fflush(mhd_log);\n    }\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (mhd_log != NULL)\n      {\n        fprintf(mhd_log, \"post-skip whitespace: s1_offset=%td str_len=%zu\\n\",\n                (ptrdiff_t)(s1 - str), str_len);\n        fflush(mhd_log);\n      }\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        if (mhd_log != NULL)\n        {\n          fprintf(mhd_log, \"token matched and removed at offset=%td\\n\", (ptrdiff_t)(cur_token - str));\n          fflush(mhd_log);\n        }\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (mhd_log != NULL)\n    {\n      fprintf(mhd_log, \"prepare copy: cur_token_offset=%td copy_size=%zu buf_has_data=%d\\n\",\n              (ptrdiff_t)(cur_token - str), copy_size, (s2 != buf));\n      fflush(mhd_log);\n    }\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        if (mhd_log != NULL)\n        {\n          fprintf(mhd_log, \"NOT ENOUGH SPACE for first token: required=%zu buf_size=%zd -> set -1 and return false\\n\",\n                  copy_size, *buf_size);\n          fflush(mhd_log);\n          fclose(mhd_log);\n        }\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        if (mhd_log != NULL)\n        {\n          fprintf(mhd_log, \"NOT ENOUGH SPACE for subsequent token: required=%zu existing=%zu buf_size=%zd -> set -1 and return false\\n\",\n                  ((size_t) (s2 - buf)) + copy_size + 2, (size_t) (s2 - buf), *buf_size);\n          fflush(mhd_log);\n          fclose(mhd_log);\n        }\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n      if (mhd_log != NULL)\n      {\n        fprintf(mhd_log, \"wrote separator to output, new s2_offset=%td\\n\", (ptrdiff_t)(s2 - buf));\n        fflush(mhd_log);\n      }\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n      if (mhd_log != NULL)\n      {\n        fprintf(mhd_log, \"memcpy %zu bytes from input offset=%td to output offset=%td\\n\",\n                copy_size, (ptrdiff_t)(cur_token - str), (ptrdiff_t)(s2 - buf - copy_size));\n        fflush(mhd_log);\n      }\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          if (mhd_log != NULL)\n          {\n            fprintf(mhd_log, \"NOT ENOUGH SPACE while copying chars: s2_offset=%td buf_size=%zd -> set -1 and return false\\n\",\n                    (ptrdiff_t)(s2 - buf), *buf_size);\n            fflush(mhd_log);\n            fclose(mhd_log);\n          }\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          if (mhd_log != NULL)\n          {\n            fprintf(mhd_log, \"NOT ENOUGH SPACE before inserting space: s2_offset=%td buf_size=%zd -> set -1 and return false\\n\",\n                    (ptrdiff_t)(s2 - buf), *buf_size);\n            fflush(mhd_log);\n            fclose(mhd_log);\n          }\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n\n  if (mhd_log != NULL)\n  {\n    fprintf(mhd_log, \"EXIT MHD_str_remove_token_caseless_: token_removed=%d final_buf_size=%zd\\n\",\n            token_removed ? 1 : 0, *buf_size);\n    fflush(mhd_log);\n    fclose(mhd_log);\n  }\n  return token_removed;\n}\n"
}