{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(s2 >= buf); is dead code because s2 is initialized to buf and is only ever incremented (s2 = buf; then only s2++ or s2 += copy_size are used). Therefore s2 < buf can never occur at this program point, so the check has no effect on program behaviour. Removing the assertion (or the comparison) would not change program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_remove_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/38.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_remove_token_caseless_:\n```c\nbool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  return token_removed;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_remove_token_caseless_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_remove_token_caseless_ with it.\n  - Your function must have the exact same signature as MHD_str_remove_token_caseless_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_remove_token_caseless_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_remove_token_caseless_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_remove_token_caseless_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_remove_token_caseless_ (const char *str,\n                                size_t str_len,\n                                const char *const token,\n                                const size_t token_len,\n                                char *buf,\n                                ssize_t *buf_size)\n{\n  const char *s1; /**< the \"input\" string / character */\n  char *s2;       /**< the \"output\" string / character */\n  size_t t_pos;   /**< position of matched character in the token */\n  bool token_removed;\n\n  /* Minimal entry log so callers/tests can detect that this function was\n   * entered and capture the initial state. Appends to the log file so\n   * repeated calls accumulate evidence. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"ENTER MHD_str_remove_token_caseless_: str=%p str_len=%zu token=%p token_len=%zu buf=%p *buf_size=%zd\\n\",\n              (void *) str, str_len, (void *) token, token_len, (void *) buf, (ssize_t) *buf_size);\n      fclose(logf);\n    }\n  }\n\n  mhd_assert (NULL == memchr (token, 0, token_len));\n  mhd_assert (NULL == memchr (token, ' ', token_len));\n  mhd_assert (NULL == memchr (token, '\\t', token_len));\n  mhd_assert (NULL == memchr (token, ',', token_len));\n  mhd_assert (0 <= *buf_size);\n\n  if (SSIZE_MAX <= ((str_len / 2) * 3 + 3))\n  {\n    /* The return value may overflow, refuse */\n    *buf_size = (ssize_t) -1;\n    {\n      FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf, \"RETURN false: overflow detected, buf_size set to -1\\n\");\n        fclose(logf);\n      }\n    }\n    return false;\n  }\n  s1 = str;\n  s2 = buf;\n  token_removed = false;\n\n  while ((size_t) (s1 - str) < str_len)\n  {\n    const char *cur_token; /**< the first char of current token */\n    size_t copy_size;\n\n    /* Skip any initial whitespaces and empty tokens */\n    while ( ((size_t) (s1 - str) < str_len) &&\n            ((' ' == *s1) || ('\\t' == *s1) || (',' == *s1)) )\n      s1++;\n\n    /* 's1' points to the first char of token in the input string or\n     * points just beyond the end of the input string */\n\n    if ((size_t) (s1 - str) >= str_len)\n      break; /* Nothing to copy, end of the input string */\n\n    /* 's1' points to the first char of token in the input string */\n\n    cur_token = s1; /* the first char of input token */\n\n    /* Check the token with case-insensetive match */\n    t_pos = 0;\n    while ( ((size_t) (s1 - str) < str_len) && (token_len > t_pos) &&\n            (charsequalcaseless (*s1, token[t_pos])) )\n    {\n      s1++;\n      t_pos++;\n    }\n    /* s1 may point just beyond the end of the input string */\n    if ( (token_len == t_pos) && (0 != token_len) )\n    {\n      /* 'token' matched, check that current input token does not have\n       * any suffixes */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n      /* 's1' points to the first non-whitespace char after the token matched\n       * requested token or points just beyond the end of the input string after\n       * the requested token */\n      if (((size_t) (s1 - str) == str_len) || (',' == *s1))\n      {/* full token match, do not copy current token to the output */\n        token_removed = true;\n        {\n          FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"TOKEN REMOVED at pos=%td (cur_token=%p s1=%p)\\n\",\n                    (ptrdiff_t) (cur_token - str), (void *) cur_token, (void *) s1);\n            fclose(logf);\n          }\n        }\n        continue;\n      }\n    }\n\n    /* 's1' points to first non-whitespace char, to some char after\n     * first non-whitespace char in the token in the input string, to\n     * the ',', or just beyond the end of the input string */\n    /* The current token in the input string does not match the token\n     * to exclude, it must be copied to the output string */\n    /* the current token size excluding leading whitespaces and current char */\n    copy_size = (size_t) (s1 - cur_token);\n    if (buf == s2)\n    { /* The first token to copy to the output */\n      if ((size_t) *buf_size < copy_size)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        {\n          FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"RETURN false: not enough buffer for first token: required=%zu available=%zd\\n\",\n                    copy_size, (ssize_t) *buf_size);\n            fclose(logf);\n          }\n        }\n        return false;\n      }\n    }\n    else\n    { /* Some token was already copied to the output buffer */\n      mhd_assert (s2 > buf);\n      /* Log the check that is claimed to be \"dead\" by the reporting agent. */\n      {\n        FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"ABOUT TO ASSERT s2>=buf: s2=%p buf=%p (s2-buf)=%td copy_size=%zu current_buf_used=%td *buf_size=%zd\\n\",\n                  (void *) s2, (void *) buf, (ptrdiff_t) (s2 - buf), copy_size, (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n          fclose(logf);\n        }\n      }\n      if ((size_t) *buf_size < ((size_t) (s2 - buf)) + copy_size + 2)\n      { /* Not enough space in the output buffer */\n        *buf_size = (ssize_t) -1;\n        {\n          FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"RETURN false: not enough buffer for subsequent token: required=%zu available=%zd current_used=%td\\n\",\n                    ((size_t) (s2 - buf)) + copy_size + 2, (ssize_t) *buf_size, (ptrdiff_t) (s2 - buf));\n            fclose(logf);\n          }\n        }\n        return false;\n      }\n      *(s2++) = ',';\n      *(s2++) = ' ';\n    }\n    /* Copy non-matched token to the output */\n    if (0 != copy_size)\n    {\n      memcpy (s2, cur_token, copy_size);\n      s2 += copy_size;\n    }\n\n    while ( ((size_t) (s1 - str) < str_len) && (',' != *s1))\n    {\n      /* 's1' points to first non-whitespace char, to some char after\n       * first non-whitespace char in the token in the input string */\n      /* Copy all non-whitespace chars from the current token in\n       * the input string */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              (',' != *s1) && (' ' != *s1) && ('\\t' != *s1) )\n      {\n        /* Log before the assertion so we can capture the values that lead to\n         * the assertion being true/false in real runs. This helps to\n         * demonstrate whether s2 < buf is possible. */\n        {\n          FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"LOOP copy char: s1=%p (*s1=0x%02x) s2=%p buf=%p (s2-buf)=%td *buf_size=%zd\\n\",\n                    (void *) s1, (unsigned char) *s1, (void *) s2, (void *) buf, (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n            fclose(logf);\n          }\n        }\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          {\n            FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n            if (NULL != logf)\n            {\n              fprintf(logf, \"RETURN false: buffer full while copying non-whitespace chars. current_used=%td *buf_size=%zd\\n\",\n                      (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n              fclose(logf);\n            }\n          }\n          return false;\n        }\n        *(s2++) = *(s1++);\n      }\n      /* 's1' points to some whitespace char in the token in the input\n       * string, to the ',', or just beyond the end of the input string */\n      /* Skip all whitespaces */\n      while ( ((size_t) (s1 - str) < str_len) &&\n              ((' ' == *s1) || ('\\t' == *s1)) )\n        s1++;\n\n      /* 's1' points to the first non-whitespace char in the input string\n       * after whitespace chars, to the ',', or just beyond the end of\n       * the input string */\n      if (((size_t) (s1 - str) < str_len) && (',' != *s1))\n      { /* Not the end of the current token */\n        /* Log before the assertion so we can capture the state. */\n        {\n          FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n          if (NULL != logf)\n          {\n            fprintf(logf, \"BEFORE ADD SPACE: s1=%p (*s1=0x%02x) s2=%p buf=%p (s2-buf)=%td *buf_size=%zd\\n\",\n                    (void *) s1, (unsigned char) *s1, (void *) s2, (void *) buf, (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n            fclose(logf);\n          }\n        }\n        mhd_assert (s2 >= buf);\n        if ((size_t) *buf_size <= (size_t) (s2 - buf)) /* '<= s2' equals '< s2 + 1' */\n        { /* Not enough space in the output buffer */\n          *buf_size = (ssize_t) -1;\n          {\n            FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n            if (NULL != logf)\n            {\n              fprintf(logf, \"RETURN false: buffer full before adding space. current_used=%td *buf_size=%zd\\n\",\n                      (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n              fclose(logf);\n            }\n          }\n          return false;\n        }\n        *(s2++) = ' ';\n      }\n    }\n  }\n  /* Final assertion: record the final pointers and sizes before asserting. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/38.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"FINAL CHECK: s2=%p buf=%p final_used=%td *buf_size_before_write=%zd\\n\",\n              (void *) s2, (void *) buf, (ptrdiff_t) (s2 - buf), (ssize_t) *buf_size);\n      fclose(logf);\n    }\n  }\n  mhd_assert (((ssize_t) (s2 - buf)) <= *buf_size);\n  *buf_size = (ssize_t) (s2 - buf);\n  return token_removed;\n}\n"
}