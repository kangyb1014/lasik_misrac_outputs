{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'val' (type uint8_t) is modified in the function by the statement 'val %= 10;'. This directly alters a non\u2011pointer function parameter, which violates MISRA C 2023 Rule 17.8. To comply, use a local copy of the parameter and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint8_to_str_pad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3742.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_uint8_to_str_pad:\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_uint8_to_str_pad code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_uint8_to_str_pad with it.\n  - Your function must have the exact same signature as MHD_uint8_to_str_pad.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_uint8_to_str_pad to check logs.\n  - Your function MUST preserve the original logic of MHD_uint8_to_str_pad as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_uint8_to_str_pad will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_uint8_to_str_pad as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  FILE *log = fopen(\"/tmp/logs/3742.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_uint8_to_str_pad: val=%u min_digits=%u buf=%p buf_size=%zu\\n\",\n            (unsigned) val, (unsigned) min_digits, (void *) buf, buf_size);\n  }\n\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n  {\n    if (log)\n    {\n      fprintf(log, \"Early return: buf_size == 0 -> return 0\\n\");\n      fclose(log);\n    }\n    return 0;\n  }\n\n  pos = 0;\n  digit = val / 100;\n  if (log)\n    fprintf(log, \"Computed digit (hundreds): %d (val=%u)\\n\", digit, (unsigned) val);\n\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n    {\n      buf[pos++] = '0';\n      if (log)\n        fprintf(log, \"Hundreds: leading zero written, pos=%zu\\n\", pos);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"Hundreds: no digit written (min_digits=%u)\\n\", (unsigned) min_digits);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    if (log)\n      fprintf(log, \"Hundreds: wrote '%c' at pos=%zu\\n\", buf[pos-1], pos-1);\n\n    {\n      unsigned old_val = (unsigned) val;\n      val %= 100; /* <-- parameter val is modified here (violation scenario) */\n      if (log)\n        fprintf(log, \"Modified val: %u -> %u (val %= 100)\\n\", old_val, (unsigned) val);\n    }\n    min_digits = 2;\n    if (log)\n      fprintf(log, \"min_digits set to 2 after writing hundreds\\n\");\n  }\n\n  if (log)\n    fprintf(log, \"State before tens check: pos=%zu val=%u min_digits=%u buf_size=%zu\\n\",\n            pos, (unsigned) val, (unsigned) min_digits, buf_size);\n\n  if (buf_size <= pos)\n  {\n    if (log)\n    {\n      fprintf(log, \"Early return: buf_size (%zu) <= pos (%zu) -> return 0\\n\", buf_size, pos);\n      fclose(log);\n    }\n    return 0;\n  }\n  digit = val / 10;\n  if (log)\n    fprintf(log, \"Computed digit (tens): %d (val=%u)\\n\", digit, (unsigned) val);\n\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n    {\n      buf[pos++] = '0';\n      if (log)\n        fprintf(log, \"Tens: leading zero written, pos=%zu\\n\", pos);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"Tens: no digit written (min_digits=%u)\\n\", (unsigned) min_digits);\n    }\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    if (log)\n      fprintf(log, \"Tens: wrote '%c' at pos=%zu\\n\", buf[pos-1], pos-1);\n\n    {\n      unsigned old_val = (unsigned) val;\n      val %= 10; /* <-- parameter val is modified here (violation scenario) */\n      if (log)\n        fprintf(log, \"Modified val: %u -> %u (val %= 10)\\n\", old_val, (unsigned) val);\n    }\n  }\n\n  if (log)\n    fprintf(log, \"State before units write: pos=%zu val=%u buf_size=%zu\\n\", pos, (unsigned) val, buf_size);\n\n  if (buf_size <= pos)\n  {\n    if (log)\n    {\n      fprintf(log, \"Early return: buf_size (%zu) <= pos (%zu) -> return 0\\n\", buf_size, pos);\n      fclose(log);\n    }\n    return 0;\n  }\n  buf[pos++] = (char) ('0' + (char) val);\n  if (log)\n  {\n    fprintf(log, \"Units: wrote '%c' at pos=%zu\\n\", buf[pos-1], pos-1);\n\n    /* Log the bytes written to buf (safe: only access [0..pos-1]) */\n    fprintf(log, \"Buffer content (first %zu bytes): \", pos);\n    for (size_t i = 0; i < pos; ++i)\n    {\n      /* print as character; non-printable isn't expected here since digits only */\n      fputc((unsigned char) buf[i], log);\n    }\n    fputc('\\n', log);\n\n    fprintf(log, \"EXIT MHD_uint8_to_str_pad: returning pos=%zu\\n\", pos);\n    fclose(log);\n  }\n  return pos;\n}\n"
}