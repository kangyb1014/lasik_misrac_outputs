{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer pNow is declared as 'struct tm *pNow' and is only used to read the object returned by gmtime(&t) (pNow is checked for NULL and then dereferenced to copy into 'now'). Because the pointee is not modified, pNow should be declared as 'const struct tm *pNow'. Therefore the code fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_date_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3245.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_date_str:\n```c\nstatic bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  if ((time_t) -1 == time (&t))\n    return false;\n#if defined(HAVE_C11_GMTIME_S)\n  if (NULL == gmtime_s (&t,\n                        &now))\n    return false;\n#elif defined(HAVE_W32_GMTIME_S)\n  if (0 != gmtime_s (&now,\n                     &t))\n    return false;\n#elif defined(HAVE_GMTIME_R)\n  if (NULL == gmtime_r (&t,\n                        &now))\n    return false;\n#else\n  pNow = gmtime (&t);\n  if (NULL == pNow)\n    return false;\n  now = *pNow;\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n    return false;\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n    return false;\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_date_str code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_date_str with it.\n  - Your function must have the exact same signature as get_date_str.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_date_str to check logs.\n  - Your function MUST preserve the original logic of get_date_str as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_date_str will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_date_str as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  /* Open log for tracing control flow and state. If logging fails, continue\n     without affecting original behavior. */\n  FILE *logf = fopen(\"/tmp/logs/3245.txt\", \"a\");\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: entry, date_buf=%p\\n\", (void *) date);\n\n  if ((time_t) -1 == time (&t))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: time() returned -1 -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: time t=%lld\\n\", (long long) t);\n#if defined(HAVE_C11_GMTIME_S)\n  if (NULL == gmtime_s (&t,\n                        &now))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: gmtime_s failed -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: gmtime_s succeeded, now.tm_year=%d, tm_mon=%d, tm_mday=%d, tm_wday=%d, tm_hour=%d, tm_min=%d, tm_sec=%d\\n\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#elif defined(HAVE_W32_GMTIME_S)\n  if (0 != gmtime_s (&now,\n                     &t))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: gmtime_s (Win) failed -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: gmtime_s (Win) succeeded, now.tm_year=%d, tm_mon=%d, tm_mday=%d, tm_wday=%d, tm_hour=%d, tm_min=%d, tm_sec=%d\\n\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#elif defined(HAVE_GMTIME_R)\n  if (NULL == gmtime_r (&t,\n                        &now))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: gmtime_r failed -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: gmtime_r succeeded, now.tm_year=%d, tm_mon=%d, tm_mday=%d, tm_wday=%d, tm_hour=%d, tm_min=%d, tm_sec=%d\\n\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#else\n  pNow = gmtime (&t);\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: gmtime() returned pNow=%p\\n\", (void *) pNow);\n  if (NULL == pNow)\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: pNow is NULL -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  now = *pNow;\n  if (logf != NULL)\n    fprintf(logf, \"get_date_str: copied *pNow to now, now.tm_year=%d, tm_mon=%d, tm_mday=%d, tm_wday=%d, tm_hour=%d, tm_min=%d, tm_sec=%d\\n\",\n            now.tm_year, now.tm_mon, now.tm_mday, now.tm_wday,\n            now.tm_hour, now.tm_min, now.tm_sec);\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: MHD_uint8_to_str_pad (mday) failed -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n  {\n    if (logf != NULL)\n      fprintf(logf, \"get_date_str: MHD_uint16_to_str (year) failed -> returning false\\n\");\n    if (logf != NULL)\n      fclose(logf);\n    return false;\n  }\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  if (logf != NULL)\n  {\n    /* Log the produced date buffer content (29 bytes). Do not assume NUL termination. */\n    fprintf(logf, \"get_date_str: produced date (29 bytes):\\n\");\n    fwrite(date, 1, 29, logf);\n    fprintf(logf, \"\\n\");\n    fclose(logf);\n  }\n\n  return true;\n}\n"
}