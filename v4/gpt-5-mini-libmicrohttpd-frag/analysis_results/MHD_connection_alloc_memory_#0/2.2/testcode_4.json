{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(NULL != res) is redundant: all control paths that reach it guarantee that the pool has enough space and MHD_pool_allocate(pool, size, true) is expected to succeed. The assert only evaluates a condition and (assuming the macro has no side effects or is compiled out in production) its presence does not affect program behaviour; removing it would not change behaviour. Therefore this is dead code and violates Rule 2.2. (If mhd_assert can perform observable actions beyond the check\u2014e.g. logging or aborting in release builds\u2014then it would not be dead; the verdict above assumes the usual side\u2011effect\u2011free/assert\u2011compiled\u2011out behaviour.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_alloc_memory_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2328.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_alloc_memory_:\n```c\nvoid *\nMHD_connection_alloc_memory_ (struct MHD_Connection *connection,\n                              size_t size)\n{\n  struct MHD_Connection *const c = connection; /* a short alias */\n  struct MemoryPool *const pool = c->pool;     /* a short alias */\n  size_t need_to_be_freed = 0; /**< The required amount of additional free memory */\n  void *res;\n\n  res = MHD_pool_try_alloc (pool,\n                            size,\n                            &need_to_be_freed);\n  if (NULL != res)\n    return res;\n\n  if (MHD_pool_is_resizable_inplace (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size))\n  {\n    if (c->write_buffer_size - c->write_buffer_append_offset >=\n        need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->write_buffer,\n                                 c->write_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->write_buffer == buf);\n      mhd_assert (c->write_buffer_append_offset <= new_buf_size);\n      mhd_assert (c->write_buffer_send_offset <= new_buf_size);\n      c->write_buffer_size = new_buf_size;\n      c->write_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else if (MHD_pool_is_resizable_inplace (pool,\n                                          c->read_buffer,\n                                          c->read_buffer_size))\n  {\n    if (c->read_buffer_size - c->read_buffer_offset >= need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->read_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->read_buffer,\n                                 c->read_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->read_buffer == buf);\n      mhd_assert (c->read_buffer_offset <= new_buf_size);\n      c->read_buffer_size = new_buf_size;\n      c->read_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else\n    return NULL;\n  res = MHD_pool_allocate (pool, size, true);\n  mhd_assert (NULL != res); /* It has been checked that pool has enough space */\n  return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_alloc_memory_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_alloc_memory_ with it.\n  - Your function must have the exact same signature as MHD_connection_alloc_memory_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_alloc_memory_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_alloc_memory_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_alloc_memory_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_alloc_memory_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_connection_alloc_memory_ (struct MHD_Connection *connection,\n                              size_t size)\n{\n  struct MHD_Connection *const c = connection; /* a short alias */\n  struct MemoryPool *const pool = c->pool;     /* a short alias */\n  size_t need_to_be_freed = 0; /**< The required amount of additional free memory */\n  void *res;\n\n  /* Logging: open log file and record entry and initial state */\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"ENTER MHD_connection_alloc_memory_: connection=%p size=%zu pool=%p initial_need_to_be_freed=%zu\\n\",\n                (void *)connection, size, (void *)pool, need_to_be_freed);\n        fclose(log);\n      }\n  }\n\n  res = MHD_pool_try_alloc (pool,\n                            size,\n                            &need_to_be_freed);\n\n  /* Log result of try_alloc */\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"MHD_pool_try_alloc returned %p need_to_be_freed=%zu\\n\", res, need_to_be_freed);\n        fclose(log);\n      }\n  }\n\n  if (NULL != res)\n    {\n      FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n      if (NULL != log)\n        {\n          fprintf(log, \"RETURN from try_alloc: res=%p\\n\", res);\n          fclose(log);\n        }\n      return res;\n    }\n\n  if (MHD_pool_is_resizable_inplace (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size))\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"write buffer is resizable_inplace: write_buffer=%p write_buffer_size=%zu append_offset=%zu send_offset=%zu\\n\",\n                (void *)c->write_buffer, c->write_buffer_size, c->write_buffer_append_offset, c->write_buffer_send_offset);\n        fclose(log);\n      }\n\n    if (c->write_buffer_size - c->write_buffer_append_offset >=\n        need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;\n\n      FILE *log2 = fopen(\"/tmp/logs/2328.txt\", \"a\");\n      if (NULL != log2)\n        {\n          fprintf(log2, \"Attempting write_buffer reallocate: old_size=%zu need_to_be_freed=%zu new_size=%zu\\n\",\n                  c->write_buffer_size, need_to_be_freed, new_buf_size);\n          fclose(log2);\n        }\n\n      buf = MHD_pool_reallocate (pool,\n                                 c->write_buffer,\n                                 c->write_buffer_size,\n                                 new_buf_size);\n\n      /* Log result of reallocate */\n      {\n        FILE *log3 = fopen(\"/tmp/logs/2328.txt\", \"a\");\n        if (NULL != log3)\n          {\n            fprintf(log3, \"MHD_pool_reallocate returned %p (expected == old write_buffer %p)\\n\",\n                    (void *)buf, (void *)c->write_buffer);\n            fclose(log3);\n          }\n      }\n\n      mhd_assert (c->write_buffer == buf);\n      mhd_assert (c->write_buffer_append_offset <= new_buf_size);\n      mhd_assert (c->write_buffer_send_offset <= new_buf_size);\n      c->write_buffer_size = new_buf_size;\n      c->write_buffer = buf;\n    }\n    else\n      {\n        FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n        if (NULL != log)\n          {\n            fprintf(log, \"RETURN NULL: insufficient write buffer space (write_buffer_size=%zu append_offset=%zu need_to_be_freed=%zu)\\n\",\n                    c->write_buffer_size, c->write_buffer_append_offset, need_to_be_freed);\n            fclose(log);\n          }\n        return NULL;\n      }\n  }\n  else if (MHD_pool_is_resizable_inplace (pool,\n                                          c->read_buffer,\n                                          c->read_buffer_size))\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"read buffer is resizable_inplace: read_buffer=%p read_buffer_size=%zu read_offset=%zu\\n\",\n                (void *)c->read_buffer, c->read_buffer_size, c->read_buffer_offset);\n        fclose(log);\n      }\n\n    if (c->read_buffer_size - c->read_buffer_offset >= need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->read_buffer_size - need_to_be_freed;\n\n      FILE *log2 = fopen(\"/tmp/logs/2328.txt\", \"a\");\n      if (NULL != log2)\n        {\n          fprintf(log2, \"Attempting read_buffer reallocate: old_size=%zu need_to_be_freed=%zu new_size=%zu\\n\",\n                  c->read_buffer_size, need_to_be_freed, new_buf_size);\n          fclose(log2);\n        }\n\n      buf = MHD_pool_reallocate (pool,\n                                 c->read_buffer,\n                                 c->read_buffer_size,\n                                 new_buf_size);\n\n      /* Log result of reallocate */\n      {\n        FILE *log3 = fopen(\"/tmp/logs/2328.txt\", \"a\");\n        if (NULL != log3)\n          {\n            fprintf(log3, \"MHD_pool_reallocate (read) returned %p (expected == old read_buffer %p)\\n\",\n                    (void *)buf, (void *)c->read_buffer);\n            fclose(log3);\n          }\n      }\n\n      mhd_assert (c->read_buffer == buf);\n      mhd_assert (c->read_buffer_offset <= new_buf_size);\n      c->read_buffer_size = new_buf_size;\n      c->read_buffer = buf;\n    }\n    else\n      {\n        FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n        if (NULL != log)\n          {\n            fprintf(log, \"RETURN NULL: insufficient read buffer space (read_buffer_size=%zu read_offset=%zu need_to_be_freed=%zu)\\n\",\n                    c->read_buffer_size, c->read_buffer_offset, need_to_be_freed);\n            fclose(log);\n          }\n        return NULL;\n      }\n  }\n  else\n    {\n      FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n      if (NULL != log)\n        {\n          fprintf(log, \"RETURN NULL: neither buffer resizable_inplace\\n\");\n          fclose(log);\n        }\n      return NULL;\n    }\n\n  /* At this point we believe the pool has enough space. Log intent to allocate. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"Calling MHD_pool_allocate: pool=%p size=%zu allow_spawn=%d\\n\", (void *)pool, size, 1);\n        fclose(log);\n      }\n  }\n\n  res = MHD_pool_allocate (pool, size, true);\n\n  /* Log result of final allocation so we can observe if res is ever NULL here. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2328.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf(log, \"MHD_pool_allocate returned %p (expected non-NULL)\\n\", res);\n        fclose(log);\n      }\n  }\n\n  mhd_assert (NULL != res); /* It has been checked that pool has enough space */\n  return res;\n}\n"
}