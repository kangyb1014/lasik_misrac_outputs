{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\npp->encoding is a non-const char * (e.g. declared as \"char *encoding\" in struct MHD_PostProcessor) even though it is used only for read-only string comparisons (it is compared against string literals). According to MISRA C:2023 Rule 8.13, the pointer should be declared to point to a const-qualified type (const char *) wherever possible; here pp->encoding should be const char * to express immutability and avoid potential modification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_post_process code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1445.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_post_process:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  if (0 == post_data_len)\n    return MHD_YES;\n  if (NULL == pp)\n    return MHD_NO;\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  /* this should never be reached */\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_post_process code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_post_process with it.\n  - Your function must have the exact same signature as MHD_post_process.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_post_process to check logs.\n  - Your function MUST preserve the original logic of MHD_post_process as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_post_process will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_post_process as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_post_process (struct MHD_PostProcessor *pp,\n                  const char *post_data,\n                  size_t post_data_len)\n{\n  FILE *log = fopen(\"/tmp/logs/1445.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_post_process(post_data_len=%zu, pp=%p)\\n\",\n            post_data_len, (void *)pp);\n    fflush(log);\n  }\n\n  if (0 == post_data_len)\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: post_data_len == 0 -> returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n\n  if (NULL == pp)\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: pp == NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Log pp->encoding details (probe for violation evidence) */\n  if (log)\n  {\n    const char *enc = pp->encoding;\n    fprintf(log, \"STATE: pp->encoding pointer=%p, string=%s\\n\",\n            (void *)enc, (enc != NULL) ? enc : \"(NULL)\");\n    fflush(log);\n  }\n\n  /* check for urlencoded */\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: matched FORM_URLENCODED -> calling post_process_urlencoded\\n\");\n      fclose(log);\n    }\n    return post_process_urlencoded (pp,\n                                    post_data,\n                                    post_data_len);\n  }\n\n  /* check for multipart */\n  if (MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                 pp->encoding,\n                                 MHD_STATICSTR_LEN_ (\n                                   MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: matched MULTIPART_FORMDATA -> calling post_process_multipart\\n\");\n      fclose(log);\n    }\n    return post_process_multipart (pp,\n                                   post_data,\n                                   post_data_len);\n  }\n\n  /* this should never be reached */\n  if (log)\n  {\n    fprintf(log, \"BRANCH: no matching encoding -> returning MHD_NO\\n\");\n    fclose(log);\n  }\n  return MHD_NO;\n}\n"
}