{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is declared as 'struct MHD_Daemon *daemon = connection->daemon;' but is only used for reading fields (accessing daemon->default_handler and daemon->default_handler_cls) and not to modify the pointed object. It could be declared 'const struct MHD_Daemon *daemon = connection->daemon;' to indicate immutability. Therefore the code does not qualify the pointer-to-object as const when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified call_connection_handler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of call_connection_handler:\n```c\nstatic void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t processed;\n\n  if (NULL != connection->rp.response)\n    return;                     /* already queued a response */\n  processed = 0;\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    connection->in_access_handler = false;\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    return;\n  }\n  connection->in_access_handler = false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified call_connection_handler code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original call_connection_handler with it.\n  - Your function must have the exact same signature as call_connection_handler.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call call_connection_handler to check logs.\n  - Your function MUST preserve the original logic of call_connection_handler as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, call_connection_handler will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of call_connection_handler as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  FILE *log = fopen(\"/tmp/logs/2215.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"call_connection_handler ENTER: connection=%p\\n\", (void *)connection);\n    fprintf(log, \"daemon ptr=%p\\n\", (void *)daemon);\n    fprintf(log, \"connection->rp.response=%p\\n\", (void *)connection->rp.response);\n    fprintf(log, \"connection->rq.url=%s\\n\", connection->rq.url ? connection->rq.url : \"(null)\");\n    fprintf(log, \"connection->rq.method=%s\\n\", connection->rq.method ? connection->rq.method : \"(null)\");\n    fprintf(log, \"connection->rq.version=%s\\n\", connection->rq.version ? connection->rq.version : \"(null)\");\n    fprintf(log, \"connection->rq.client_context=%p\\n\", (void *)connection->rq.client_context);\n    /* Attempt to log daemon handler pointers; this mirrors the read-only usage in code */\n    if (daemon) {\n      fprintf(log, \"daemon->default_handler=%p daemon->default_handler_cls=%p\\n\",\n              (void *)daemon->default_handler,\n              (void *)daemon->default_handler_cls);\n    } else {\n      fprintf(log, \"daemon is NULL\\n\");\n    }\n    fflush(log);\n  }\n\n  size_t processed;\n\n  if (NULL != connection->rp.response) {\n    if (log) {\n      fprintf(log, \"call_connection_handler EXIT: response already queued, returning\\n\");\n      fclose(log);\n    }\n    return;                     /* already queued a response */\n  }\n\n  processed = 0;\n  if (log) {\n    fprintf(log, \"initialized processed=%zu, setting client_aware and in_access_handler to true\\n\", processed);\n    fflush(log);\n  }\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    connection->in_access_handler = false;\n    if (log) {\n      fprintf(log, \"default_handler returned MHD_NO, processed=%zu\\n\", processed);\n      fprintf(log, \"invoking CONNECTION_CLOSE_ERROR for connection=%p\\n\", (void *)connection);\n      fflush(log);\n    }\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    if (log) {\n      fprintf(log, \"call_connection_handler EXIT (after error path)\\n\");\n      fclose(log);\n    }\n    return;\n  }\n\n  connection->in_access_handler = false;\n  if (log) {\n    fprintf(log, \"default_handler succeeded, processed=%zu, clearing in_access_handler and exiting\\n\", processed);\n    fprintf(log, \"call_connection_handler EXIT\\n\");\n    fclose(log);\n  }\n}\n"
}