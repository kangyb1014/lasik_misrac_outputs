{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'daemon = MHD_get_master(daemon);' reassigns the function parameter 'daemon', thereby modifying the pointer parameter itself. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the object pointed to may be modified, but not the pointer parameter). To conform, the code should use a local variable, e.g. 'struct MHD_Daemon *master = MHD_get_master(daemon);' and use 'master' thereafter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_limit_del code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2582.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_ip_limit_del:\n```c\nstatic void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return;\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n    return;\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Something's wrong if we couldn't find an IP address\n     * that was previously added */\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n    MHD_ip_count_unlock (daemon);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_ip_limit_del code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_ip_limit_del with it.\n  - Your function must have the exact same signature as MHD_ip_limit_del.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_ip_limit_del to check logs.\n  - Your function MUST preserve the original logic of MHD_ip_limit_del as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_ip_limit_del will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_ip_limit_del as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nMHD_ip_limit_del (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount search_key;\n  struct MHD_IPCount *found_key;\n  void **nodep;\n  FILE *logf = NULL;\n  struct MHD_Daemon *orig_daemon = daemon;\n\n  /* Log entry and initial daemon pointer value */\n  logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"MHD_ip_limit_del entered: daemon=%p, addr=%p, addrlen=%u\\n\",\n            (void *)daemon, (const void *)addr, (unsigned)addrlen);\n    fclose(logf);\n  }\n\n  /* Record that we are about to resolve master daemon (this reassigns the\n     function parameter 'daemon' which is the reported MISRA violation). */\n  logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"About to call MHD_get_master with daemon=%p\\n\", (void *)daemon);\n    fclose(logf);\n  }\n\n  daemon = MHD_get_master (daemon);\n\n  /* Log result of master resolution */\n  logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"After MHD_get_master: daemon=%p (orig=%p)\\n\",\n            (void *)daemon, (void *)orig_daemon);\n    fclose(logf);\n  }\n\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n  {\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Per-IP connection limit is 0; returning early. daemon=%p\\n\",\n              (void *)daemon);\n      fclose(logf);\n    }\n    return;\n  }\n  /* Initialize search key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    &search_key))\n  {\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"MHD_ip_addr_to_key failed for addr=%p, addrlen=%u; returning.\\n\",\n              (const void *)addr, (unsigned)addrlen);\n      fclose(logf);\n    }\n    return;\n  }\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  if (NULL == (nodep = tfind (&search_key,\n                              &daemon->per_ip_connection_count,\n                              &MHD_ip_addr_compare)))\n  {\n    /* Log failure to find previously-added IP address, then panic as before */\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"tfind returned NULL: failed to find previously-added IP address. daemon=%p\\n\",\n              (void *)daemon);\n      fclose(logf);\n    }\n    MHD_PANIC (_ (\"Failed to find previously-added IP address.\\n\"));\n  }\n  found_key = (struct MHD_IPCount *) *nodep;\n\n  /* Validate existing count for IP address */\n  if (0 == found_key->count)\n  {\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Found IP record with count == 0 (unexpected). found_key=%p\\n\",\n              (void *)found_key);\n      fclose(logf);\n    }\n    MHD_PANIC (_ (\"Previously-added IP address had counter of zero.\\n\"));\n  }\n\n  /* Log current count before decrement */\n  logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"Found IP entry %p with count=%d; about to decrement. daemon=%p\\n\",\n            (void *)found_key, found_key->count, (void *)daemon);\n    fclose(logf);\n  }\n\n  /* Remove the node entirely if count reduces to 0 */\n  if (0 == --found_key->count)\n  {\n    tdelete (found_key,\n             &daemon->per_ip_connection_count,\n             &MHD_ip_addr_compare);\n\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Count decremented to 0; deleting node and freeing. found_key=%p daemon=%p\\n\",\n              (void *)found_key, (void *)daemon);\n      fclose(logf);\n    }\n\n    MHD_ip_count_unlock (daemon);\n    free (found_key);\n  }\n  else\n  {\n    logf = fopen(\"/tmp/logs/2582.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Count decremented but still >0; new count=%d for found_key=%p daemon=%p\\n\",\n              found_key->count, (void *)found_key, (void *)daemon);\n      fclose(logf);\n    }\n    MHD_ip_count_unlock (daemon);\n  }\n}\n"
}