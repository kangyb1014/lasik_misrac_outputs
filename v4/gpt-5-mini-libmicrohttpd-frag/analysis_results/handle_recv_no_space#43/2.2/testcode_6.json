{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe switch includes an explicit case for MHD_PROC_RECV_COOKIE and a default that only contain a break, followed by mhd_assert(0). The top of the function has mhd_assert(MHD_PROC_RECV_COOKIE != stage) so in normal builds these labels are never expected to be taken; in debug builds the earlier assert prevents execution, and in release builds the assert may compile out so the case/default only execute a no-op break and control reaches the following mhd_assert(0) (which may also be a no-op). The case/default blocks therefore perform no meaningful action and removing them would not change program behaviour \u2014 they are redundant dead operations. This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_recv_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3548.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of handle_recv_no_space:\n```c\nstatic void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    break;\n  }\n  mhd_assert (0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified handle_recv_no_space code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original handle_recv_no_space with it.\n  - Your function must have the exact same signature as handle_recv_no_space.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call handle_recv_no_space to check logs.\n  - Your function MUST preserve the original logic of handle_recv_no_space as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, handle_recv_no_space will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of handle_recv_no_space as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nhandle_recv_no_space (struct MHD_Connection *c,\n                      enum MHD_ProcRecvDataStage stage)\n{\n  FILE *logf = fopen(\"/tmp/logs/3548.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"handle_recv_no_space: ENTRY stage=%d, conn=%p\\n\", (int)stage, (void *)c);\n    if (c)\n    {\n      fprintf(logf, \"  state=%d, read_buffer_offset=%lu, rq.http_mthd=%d, rq.http_ver=%d, rq.have_chunked_upload=%d, rq.some_payload_processed=%d, rq.current_chunk_size=%lu, rq.current_chunk_offset=%lu\\n\",\n              (int)c->state,\n              (unsigned long)c->read_buffer_offset,\n              (int)c->rq.http_mthd,\n              (int)c->rq.http_ver,\n              (int)c->rq.have_chunked_upload,\n              (int)c->rq.some_payload_processed,\n              (unsigned long)c->rq.current_chunk_size,\n              (unsigned long)c->rq.current_chunk_offset);\n    }\n    fflush(logf);\n  }\n\n  mhd_assert (MHD_PROC_RECV_INIT <= stage);\n  mhd_assert (MHD_PROC_RECV_FOOTERS >= stage);\n  mhd_assert (MHD_CONNECTION_FULL_REQ_RECEIVED > c->state);\n  mhd_assert ((MHD_PROC_RECV_INIT != stage) || \\\n              (MHD_CONNECTION_INIT == c->state));\n  mhd_assert ((MHD_PROC_RECV_METHOD != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_URI != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HTTPVER != stage) || \\\n              (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_HEADERS != stage) || \\\n              (MHD_CONNECTION_REQ_HEADERS_RECEIVING == c->state));\n  mhd_assert (MHD_PROC_RECV_COOKIE != stage); /* handle_req_cookie_no_space() must be called directly */\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (MHD_CONNECTION_BODY_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_FOOTERS != stage) || \\\n              (MHD_CONNECTION_FOOTERS_RECEIVING == c->state));\n  mhd_assert ((MHD_PROC_RECV_BODY_NORMAL != stage) || \\\n              (! c->rq.have_chunked_upload));\n  mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n              (c->rq.have_chunked_upload));\n  switch (stage)\n  {\n  case MHD_PROC_RECV_INIT:\n  case MHD_PROC_RECV_METHOD:\n    /* Some data has been received, but it is not clear yet whether\n     * the received data is an valid HTTP request */\n    if (logf)\n    {\n      fprintf(logf, \"  branch: INIT/METHOD - calling connection_close_error\\n\");\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the initial part of \" \\\n                               \"the request line.\"));\n    return;\n  case MHD_PROC_RECV_URI:\n  case MHD_PROC_RECV_HTTPVER:\n    /* Some data has been received, but the request line is incomplete */\n    mhd_assert (MHD_HTTP_MTHD_NO_METHOD != c->rq.http_mthd);\n    mhd_assert (MHD_HTTP_VER_UNKNOWN == c->rq.http_ver);\n    /* A quick simple check whether the incomplete line looks\n     * like an HTTP request */\n    if ((MHD_HTTP_MTHD_GET <= c->rq.http_mthd) &&\n        (MHD_HTTP_MTHD_DELETE >= c->rq.http_mthd))\n    {\n      if (logf)\n      {\n        fprintf(logf, \"  branch: URI/HTTPVER - transmit_error_response_static MHD_HTTP_URI_TOO_LONG\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n      transmit_error_response_static (c,\n                                      MHD_HTTP_URI_TOO_LONG,\n                                      ERR_MSG_REQUEST_TOO_BIG);\n      return;\n    }\n    if (logf)\n    {\n      fprintf(logf, \"  branch: URI/HTTPVER - connection_close_error (non-standard method token)\\n\");\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n    connection_close_error (c,\n                            _ (\"No space left in the read buffer when \" \\\n                               \"receiving the URI in \" \\\n                               \"the request line. \" \\\n                               \"The request uses non-standard HTTP request \" \\\n                               \"method token.\"));\n    return;\n  case MHD_PROC_RECV_HEADERS:\n    if (logf)\n    {\n      fprintf(logf, \"  branch: HEADERS - handle_req_headers_no_space (offset=%lu)\\n\",\n              (unsigned long)c->read_buffer_offset);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n    handle_req_headers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  case MHD_PROC_RECV_BODY_NORMAL:\n  case MHD_PROC_RECV_BODY_CHUNKED:\n    mhd_assert ((MHD_PROC_RECV_BODY_CHUNKED != stage) || \\\n                ! c->rq.some_payload_processed);\n    if (has_unprocessed_upload_body_data_in_buffer (c))\n    {\n      /* The connection must not be in MHD_EVENT_LOOP_INFO_READ state\n         when external polling is used and some data left unprocessed. */\n      mhd_assert (MHD_D_IS_USING_THREADS_ (c->daemon));\n      /* failed to grow the read buffer, and the\n         client which is supposed to handle the\n         received data in a *blocking* fashion\n         (in this mode) did not handle the data as\n         it was supposed to!\n         => we would either have to do busy-waiting\n         (on the client, which would likely fail),\n         or if we do nothing, we would just timeout\n         on the connection (if a timeout is even\n         set!).\n         Solution: we kill the connection with an error */\n      if (logf)\n      {\n        fprintf(logf, \"  branch: BODY_* - unprocessed upload body data present -> transmit_error_response_static INTERNAL_SERVER_ERROR\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n      transmit_error_response_static (c,\n                                      MHD_HTTP_INTERNAL_SERVER_ERROR,\n                                      ERROR_MSG_DATA_NOT_HANDLED_BY_APP);\n    }\n    else\n    {\n      if (MHD_PROC_RECV_BODY_NORMAL == stage)\n      {\n        /* A header probably has been added to a suspended connection and\n           it took precisely all the space in the buffer.\n           Very low probability. */\n        mhd_assert (! c->rq.have_chunked_upload);\n        if (logf)\n        {\n          fprintf(logf, \"  branch: BODY_NORMAL - calling handle_req_headers_no_space(NULL,0)\\n\");\n          fflush(logf);\n          fclose(logf);\n          logf = NULL;\n        }\n        handle_req_headers_no_space (c, NULL, 0);\n      }\n      else\n      {\n        mhd_assert (c->rq.have_chunked_upload);\n        if (c->rq.current_chunk_offset != c->rq.current_chunk_size)\n        { /* Receiving content of the chunk */\n          /* A header probably has been added to a suspended connection and\n             it took precisely all the space in the buffer.\n             Very low probability. */\n          if (logf)\n          {\n            fprintf(logf, \"  branch: BODY_CHUNKED - receiving content of the chunk -> handle_req_headers_no_space(NULL,0)\\n\");\n            fflush(logf);\n            fclose(logf);\n            logf = NULL;\n          }\n          handle_req_headers_no_space (c, NULL, 0);\n        }\n        else\n        {\n          if (0 != c->rq.current_chunk_size)\n          { /* Waiting for chunk-closing CRLF */\n            /* Not really possible as some payload should be\n               processed and the space used by payload should be available. */\n            if (logf)\n            {\n              fprintf(logf, \"  branch: BODY_CHUNKED - waiting for chunk-closing CRLF -> handle_req_headers_no_space(NULL,0)\\n\");\n              fflush(logf);\n              fclose(logf);\n              logf = NULL;\n            }\n            handle_req_headers_no_space (c, NULL, 0);\n          }\n          else\n          { /* Reading the line with the chunk size */\n            if (logf)\n            {\n              fprintf(logf, \"  branch: BODY_CHUNKED - reading chunk size line -> handle_req_chunk_size_line_no_space(offset=%lu)\\n\",\n                      (unsigned long)c->read_buffer_offset);\n              fflush(logf);\n              fclose(logf);\n              logf = NULL;\n            }\n            handle_req_chunk_size_line_no_space (c,\n                                                 c->read_buffer,\n                                                 c->read_buffer_offset);\n          }\n        }\n      }\n    }\n    return;\n  case MHD_PROC_RECV_FOOTERS:\n    if (logf)\n    {\n      fprintf(logf, \"  branch: FOOTERS - handle_req_footers_no_space(offset=%lu)\\n\",\n              (unsigned long)c->read_buffer_offset);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n    handle_req_footers_no_space (c, c->read_buffer, c->read_buffer_offset);\n    return;\n  /* The next cases should not be possible */\n  case MHD_PROC_RECV_COOKIE:\n  default:\n    if (logf)\n    {\n      fprintf(logf, \"  branch: COOKIE/default - reached unexpected case (stage=%d)\\n\", (int)stage);\n      fflush(logf);\n      /* Intentionally do not close the log here, leave it to the assertion handling below */\n    }\n    break;\n  }\n  if (logf)\n  {\n    fprintf(logf, \"  after switch - about to call mhd_assert(0) (unreachable path)\\n\");\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n  mhd_assert (0);\n}\n"
}