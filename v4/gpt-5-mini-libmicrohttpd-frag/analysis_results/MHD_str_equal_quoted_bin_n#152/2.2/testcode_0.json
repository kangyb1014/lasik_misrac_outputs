{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe early check 'if (unquoted_len < quoted_len / 2) return false;' is redundant. For any inputs satisfying that condition (for example quoted_len=6, unquoted_len=2), the subsequent loop and the final length check will also cause the function to return false (the loop will terminate with i < quoted_len and then the final 'if ((quoted_len != i) || (unquoted_len != j)) return false;' will fire). Removing the early return does not change program behaviour (only performance), so this operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3668.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_quoted_bin_n:\n```c\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_equal_quoted_bin_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_equal_quoted_bin_n with it.\n  - Your function must have the exact same signature as MHD_str_equal_quoted_bin_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_equal_quoted_bin_n to check logs.\n  - Your function MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_equal_quoted_bin_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  /* Probe logging to assist in reproducing the reported dead-code scenario.\n     Logs appended to /tmp/logs/3668.txt. */\n  FILE *logf = fopen(\"/tmp/logs/3668.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER: MHD_str_equal_quoted_bin_n quoted=%p quoted_len=%zu unquoted=%p unquoted_len=%zu\\n\",\n            (const void *)quoted, quoted_len, (const void *)unquoted, unquoted_len);\n    fflush(logf);\n  }\n\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EARLY RETURN: unquoted_len (%zu) < quoted_len/2 (%zu) -> returning false\\n\",\n              unquoted_len, quoted_len / 2);\n      fflush(logf);\n      fclose(logf);\n    }\n    return false;\n  }\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if (logf)\n    {\n      /* Log the indices and raw byte values (hex) about to be compared. */\n      unsigned int qv = (unsigned int)(unsigned char)quoted[i];\n      unsigned int uv = (unsigned int)(unsigned char)unquoted[j];\n      fprintf(logf, \"LOOP START: i=%zu j=%zu quoted[i]=0x%02x unquoted[j]=0x%02x\\n\",\n              i, j, qv, uv);\n      fflush(logf);\n    }\n\n    if ('\\\\' == quoted[i])\n    {\n      if (logf)\n      {\n        fprintf(logf, \"ESCAPE: backslash at quoted[%zu], advancing i -> i+1\\n\", i);\n        fflush(logf);\n      }\n\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n      {\n        if (logf)\n        {\n          fprintf(logf, \"RETURN FALSE: escape at end (quoted_len == i == %zu)\\n\", i);\n          fflush(logf);\n          fclose(logf);\n        }\n        return false; /* No character after escaping backslash */\n      }\n    }\n\n    if (quoted[i] != unquoted[j])\n    {\n      if (logf)\n      {\n        unsigned int qv2 = (unsigned int)(unsigned char)quoted[i];\n        unsigned int uv2 = (unsigned int)(unsigned char)unquoted[j];\n        fprintf(logf, \"RETURN FALSE: mismatch at i=%zu j=%zu quoted[i]=0x%02x unquoted[j]=0x%02x\\n\",\n                i, j, qv2, uv2);\n        fflush(logf);\n        fclose(logf);\n      }\n      return false; /* Different characters */\n    }\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"RETURN FALSE: length mismatch final i=%zu j=%zu quoted_len=%zu unquoted_len=%zu\\n\",\n              i, j, quoted_len, unquoted_len);\n      fflush(logf);\n      fclose(logf);\n    }\n    return false; /* The strings have different length */\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"RETURN TRUE: strings equal (i=%zu j=%zu)\\n\", i, j);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  return true;\n}\n"
}