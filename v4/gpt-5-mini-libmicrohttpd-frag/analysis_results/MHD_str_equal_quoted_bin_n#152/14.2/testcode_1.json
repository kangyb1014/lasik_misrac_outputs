{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement uses i and j as loop counters (for(... ++i, ++j)), and the loop body contains the statement i++; which modifies the loop counter inside the loop body. This violates Rule 14.2: there is more than one loop counter and a loop counter (i) is modified in the loop body (loop counters shall not be modified in the body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_quoted_bin_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3661.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_quoted_bin_n:\n```c\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_equal_quoted_bin_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_equal_quoted_bin_n with it.\n  - Your function must have the exact same signature as MHD_str_equal_quoted_bin_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_equal_quoted_bin_n to check logs.\n  - Your function MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_equal_quoted_bin_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_equal_quoted_bin_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  FILE *log = fopen(\"/tmp/logs/3661.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_str_equal_quoted_bin_n ENTRY quoted_len=%zu unquoted_len=%zu\\n\", quoted_len, unquoted_len);\n    fflush(log);\n  }\n\n  if (unquoted_len < quoted_len / 2)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: unquoted_len < quoted_len/2 (%zu < %zu)\\n\", unquoted_len, quoted_len / 2);\n      fclose(log);\n    }\n    return false;\n  }\n\n  j = 0;\n  if (log)\n  {\n    fprintf(log, \"init: j=%zu\\n\", j);\n    fflush(log);\n  }\n\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if (log)\n    {\n      unsigned int qc = (i < quoted_len) ? (unsigned char) quoted[i] : 0;\n      unsigned int uc = (j < unquoted_len) ? (unsigned char) unquoted[j] : 0;\n      fprintf(log, \"LOOP START: i=%zu j=%zu quoted[i]=0x%02x unquoted[j]=0x%02x\\n\", i, j, qc, uc);\n      fflush(log);\n    }\n\n    if ('\\\\' == quoted[i])\n    {\n      if (log)\n      {\n        fprintf(log, \"BACKSLASH at i=%zu (quoted[i]='\\\\') -- will advance i inside body\\n\", i);\n        fflush(log);\n      }\n\n      i++; /* Advance to the next character */\n\n      if (log)\n      {\n        fprintf(log, \"AFTER i++ INSIDE BODY: i=%zu quoted_len=%zu\\n\", i, quoted_len);\n        fflush(log);\n      }\n\n      if (quoted_len == i)\n      {\n        if (log)\n        {\n          fprintf(log, \"RETURN FALSE: No character after escaping backslash (quoted_len==i==%zu)\\n\", i);\n          fclose(log);\n        }\n        return false; /* No character after escaping backslash */\n      }\n    }\n\n    if (quoted[i] != unquoted[j])\n    {\n      if (log)\n      {\n        unsigned int qc = (unsigned char) quoted[i];\n        unsigned int uc = (unsigned char) unquoted[j];\n        fprintf(log, \"RETURN FALSE: Different characters at i=%zu j=%zu quoted=0x%02x unquoted=0x%02x\\n\", i, j, qc, uc);\n        fclose(log);\n      }\n      return false; /* Different characters */\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"AFTER LOOP: i=%zu j=%zu quoted_len=%zu unquoted_len=%zu\\n\", i, j, quoted_len, unquoted_len);\n    fflush(log);\n  }\n\n  if ((quoted_len != i) || (unquoted_len != j))\n  {\n    if (log)\n    {\n      fprintf(log, \"RETURN FALSE: The strings have different length final i=%zu j=%zu quoted_len=%zu unquoted_len=%zu\\n\", i, j, quoted_len, unquoted_len);\n      fclose(log);\n    }\n    return false; /* The strings have different length */\n  }\n\n  if (log)\n  {\n    fprintf(log, \"RETURN TRUE: strings equal (i=%zu j=%zu)\\n\", i, j);\n    fclose(log);\n  }\n\n  return true;\n}\n"
}