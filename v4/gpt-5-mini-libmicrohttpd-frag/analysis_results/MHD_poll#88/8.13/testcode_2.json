{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as a non-const pointer (struct MHD_Daemon *daemon) even though the shown body only queries/forwards the pointer (calls MHD_D_IS_USING_THREAD_PER_CONN_(daemon) and passes daemon to MHD_poll_all / MHD_poll_listen_socket). If MHD_poll and the callees do not modify the pointed-to MHD_Daemon object, the parameter should be declared as pointer to const (const struct MHD_Daemon *daemon). Hence, in the common case where the daemon is only read, this signature violates Rule 8.13. (If the function or any callees actually modify the object or require a non-const pointer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3305.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_poll:\n```c\nstatic enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    return MHD_poll_all (daemon,\n                         may_block ? -1 : 0);\n  return MHD_poll_listen_socket (daemon,\n                                 may_block);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_poll code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_poll with it.\n  - Your function must have the exact same signature as MHD_poll.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_poll to check logs.\n  - Your function MUST preserve the original logic of MHD_poll as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_poll will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_poll as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nMHD_poll (struct MHD_Daemon *daemon,\n          int may_block)\n{\n#include <stdio.h>\n#include <sys/stat.h>\n#include <time.h>\n#include <errno.h>\n\n    /* Minimal, best-effort logging to /tmp/logs/3305.txt. This preserves\n       the original control flow while recording entry, branch taken, and\n       returned result. If logging cannot be performed (e.g. directory\n       missing and cannot be created), the function still behaves the\n       same as the original. */\n    FILE *logf = NULL;\n    time_t now = time(NULL);\n\n    /* Try to ensure directory exists; ignore errors. */\n    (void) mkdir(\"/tmp/logs\", 0777);\n\n    logf = fopen(\"/tmp/logs/3305.txt\", \"a\");\n    if (logf) {\n        fprintf(logf, \"MHD_poll entered: daemon=%p, may_block=%d, time=%ld\\n\",\n                (void *) daemon, may_block, (long) now);\n    }\n\n    /* Preserve original check but evaluate only once to minimize\n       potential side-effects from repeated evaluation. */\n    int using_thread_per_conn = MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) ? 1 : 0;\n\n    if (! using_thread_per_conn)\n    {\n        if (logf)\n            fprintf(logf, \"Branch decision: NOT using thread-per-connection -> calling MHD_poll_all\\n\");\n\n        enum MHD_Result res = MHD_poll_all (daemon,\n                                           may_block ? -1 : 0);\n\n        if (logf)\n        {\n            fprintf(logf, \"MHD_poll_all returned: res=%d\\n\", (int) res);\n            fclose(logf);\n        }\n\n        return res;\n    }\n\n    if (logf)\n        fprintf(logf, \"Branch decision: using thread-per-connection -> calling MHD_poll_listen_socket\\n\");\n\n    enum MHD_Result res = MHD_poll_listen_socket (daemon,\n                                                  may_block);\n\n    if (logf)\n    {\n        fprintf(logf, \"MHD_poll_listen_socket returned: res=%d\\n\", (int) res);\n        fclose(logf);\n    }\n\n    return res;\n}\n"
}