{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_lookup_connection_value_n returns an expect pointer that is not NUL-terminated (note the call passed NULL for the length), and MHD_str_equal_caseless_ is implemented using standard string.h functions that expect NUL-terminated strings (e.g. strcmp/strlen/strncasecmp/memcmp without length), the comparison can read past the bounds of the expect object. In that situation the code would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified need_100_continue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3893.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of need_100_continue:\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified need_100_continue code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original need_100_continue with it.\n  - Your function must have the exact same signature as need_100_continue.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call need_100_continue to check logs.\n  - Your function MUST preserve the original logic of need_100_continue as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, need_100_continue will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of need_100_continue as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n  int rc;\n  FILE *log = fopen(\"/tmp/logs/3893.txt\", \"a\");\n  int used_stderr = 0;\n\n  if (NULL == log) {\n    /* Try to create the directory and reopen. If that fails, fall back to stderr. */\n    /* Use system() as a best-effort attempt to create the directory; if system()\n       is unavailable in the build environment this will simply fail and we\n       will fall back to stderr. */\n    (void) system(\"mkdir -p /tmp/logs\");\n    log = fopen(\"/tmp/logs/3893.txt\", \"a\");\n    if (NULL == log) {\n      log = stderr;\n      used_stderr = 1;\n    }\n  }\n\n  fprintf(log, \"need_100_continue: entered; connection=%p\\n\", (void *) connection);\n  fflush(log);\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n  {\n    fprintf(log, \"need_100_continue: HTTP version is not 1.1 compatible (http_ver=%u) -> returning false\\n\",\n            (unsigned) connection->rq.http_ver);\n    fflush(log);\n    if (!used_stderr) fclose(log);\n    return false;\n  }\n  fprintf(log, \"need_100_continue: HTTP version compatible (http_ver=%u)\\n\",\n          (unsigned) connection->rq.http_ver);\n  fflush(log);\n\n  if (0 == connection->rq.remaining_upload_size)\n  {\n    fprintf(log, \"need_100_continue: no remaining upload size (remaining_upload_size=%llu) -> returning false\\n\",\n            (unsigned long long) connection->rq.remaining_upload_size);\n    fflush(log);\n    if (!used_stderr) fclose(log);\n    return false;\n  }\n  fprintf(log, \"need_100_continue: remaining_upload_size=%llu\\n\",\n          (unsigned long long) connection->rq.remaining_upload_size);\n  fflush(log);\n\n  /* Original lookup: length parameter was NULL. Keep that call exactly as in original\n     to preserve behavior, but capture its return value for logging. */\n  rc = MHD_lookup_connection_value_n (connection,\n                                      MHD_HEADER_KIND,\n                                      MHD_HTTP_HEADER_EXPECT,\n                                      MHD_STATICSTR_LEN_ ( \\\n                                        MHD_HTTP_HEADER_EXPECT),\n                                      &expect,\n                                      NULL);\n\n  fprintf(log, \"need_100_continue: MHD_lookup_connection_value_n returned %d, expect=%p\\n\",\n          rc, (void *) expect);\n  fflush(log);\n\n  if (MHD_NO == rc)\n  {\n    fprintf(log, \"need_100_continue: Expect header not found -> returning false\\n\");\n    fflush(log);\n    if (!used_stderr) fclose(log);\n    return false;\n  }\n\n  /* Attempt a second lookup that requests the length of the value so we can\n     safely log the bytes without relying on NUL-termination. This is a\n     diagnostic second call only; the original logic (which did not request\n     length information) is preserved above. */\n  {\n    size_t val_len = 0;\n    int rc2 = MHD_lookup_connection_value_n (connection,\n                                             MHD_HEADER_KIND,\n                                             MHD_HTTP_HEADER_EXPECT,\n                                             MHD_STATICSTR_LEN_ ( \\\n                                               MHD_HTTP_HEADER_EXPECT),\n                                             &expect,\n                                             &val_len);\n    fprintf(log, \"need_100_continue: second MHD_lookup_connection_value_n returned %d, val_len=%zu\\n\",\n            rc2, val_len);\n    if (rc2 == MHD_YES)\n    {\n      /* Print up to a reasonable limit to avoid huge logs. */\n      size_t to_print = val_len;\n      if (to_print > 256) to_print = 256;\n      fprintf(log, \"need_100_continue: expect (first %zu bytes, hex):\", to_print);\n      for (size_t i = 0; i < to_print; ++i)\n        fprintf(log, \" %02x\", (unsigned char) expect[i]);\n      if (val_len > to_print)\n        fprintf(log, \" ... (total %zu bytes)\", val_len);\n      fprintf(log, \"\\n\");\n\n      /* Also print a length-limited string view (safe even if not NUL-terminated).\n         Use %.*s to specify the number of characters. */\n      fprintf(log, \"need_100_continue: expect (as string, up to %zu chars): '%.*s'\\n\",\n              to_print, (int) to_print, expect);\n    }\n    else\n    {\n      fprintf(log, \"need_100_continue: could not obtain length of expect value; skipping raw-data log\\n\");\n    }\n    fflush(log);\n  }\n\n  /* Log before invoking the comparison that may rely on NUL-termination. */\n  fprintf(log, \"need_100_continue: about to call MHD_str_equal_caseless_(expect, \\\"100-continue\\\") with expect=%p\\n\",\n          (void *) expect);\n  fflush(log);\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n  {\n    fprintf(log, \"need_100_continue: MHD_str_equal_caseless_ returned true -> returning true\\n\");\n    fflush(log);\n    if (!used_stderr) fclose(log);\n    return true;\n  }\n\n  fprintf(log, \"need_100_continue: MHD_str_equal_caseless_ returned false -> returning false\\n\");\n  fflush(log);\n  if (!used_stderr) fclose(log);\n  return false;\n}\n"
}