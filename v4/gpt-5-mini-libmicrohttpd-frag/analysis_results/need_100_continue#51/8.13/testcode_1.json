{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'connection' is declared as a pointer to a non-const struct (struct MHD_Connection *connection) yet the function, as shown, only performs read-only accesses. Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (i.e. const struct MHD_Connection *connection). This is a violation unless there is a reason it must be non-const (for example, if called APIs require a non-const pointer or the function may modify the object).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified need_100_continue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3895.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of need_100_continue:\n```c\nstatic bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n    return false;\n\n  if (0 == connection->rq.remaining_upload_size)\n    return false;\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n    return false;\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified need_100_continue code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original need_100_continue with it.\n  - Your function must have the exact same signature as need_100_continue.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call need_100_continue to check logs.\n  - Your function MUST preserve the original logic of need_100_continue as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, need_100_continue will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of need_100_continue as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nneed_100_continue (struct MHD_Connection *connection)\n{\n  const char *expect;\n  FILE *log = fopen(\"/tmp/logs/3895.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"need_100_continue: ENTRY connection=%p http_ver=%llu remaining_upload_size=%llu\\n\",\n            (void *)connection,\n            (unsigned long long)connection->rq.http_ver,\n            (unsigned long long)connection->rq.remaining_upload_size);\n  }\n\n  if (! MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver))\n  {\n    if (log) fprintf(log, \"need_100_continue: http version not 1.1 compatible -> false\\n\");\n    if (log) fclose(log);\n    return false;\n  }\n\n  if (0 == connection->rq.remaining_upload_size)\n  {\n    if (log) fprintf(log, \"need_100_continue: remaining_upload_size == 0 -> false\\n\");\n    if (log) fclose(log);\n    return false;\n  }\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_EXPECT,\n                                     MHD_STATICSTR_LEN_(MHD_HTTP_HEADER_EXPECT),\n                                     &expect,\n                                     NULL))\n  {\n    if (log) fprintf(log, \"need_100_continue: lookup EXPECT header returned MHD_NO -> false\\n\");\n    if (log) fclose(log);\n    return false;\n  }\n\n  if (MHD_str_equal_caseless_ (expect,\n                               \"100-continue\"))\n  {\n    if (log) fprintf(log, \"need_100_continue: expect == \\\"100-continue\\\" -> true\\n\");\n    if (log) fclose(log);\n    return true;\n  }\n\n  if (log) fprintf(log, \"need_100_continue: default -> false\\n\");\n  if (log) fclose(log);\n  return false;\n}"
}