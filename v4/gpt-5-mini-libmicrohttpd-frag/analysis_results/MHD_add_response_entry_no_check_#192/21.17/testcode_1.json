{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe destination (header_malloced) is allocated with header_len+1 bytes, so the write side is safe. However the source pointer 'header' is not validated; if the caller passes a NULL pointer or a buffer shorter than header_len (e.g. header = \"short\" but header_len = 10), memcpy(header_malloced, header, header_len) will read beyond the bounds of the object referenced by 'header'. The mhd_assert(0 != header_len) does not protect against a NULL or too-small source when assertions are disabled. Thus the code can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_check_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1473.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_check_:\n```c\nbool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (NULL == header_malloced)\n    return false;\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  value_malloced = malloc (content_len + 1);\n  if (NULL != value_malloced)\n  {\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n      return true; /* Success exit point */\n\n    free (value_malloced);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_entry_no_check_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_entry_no_check_ with it.\n  - Your function must have the exact same signature as MHD_add_response_entry_no_check_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_entry_no_check_ to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_entry_no_check_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_entry_no_check_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_entry_no_check_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_add_response_entry_no_check_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  const char *header,\n                                  size_t header_len,\n                                  const char *content,\n                                  size_t content_len)\n{\n  char *header_malloced;\n  char *value_malloced;\n  FILE *log = fopen(\"/tmp/logs/1473.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_add_response_entry_no_check_ response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *)response, (int)kind, (void *)header, header_len, (void *)content, content_len);\n    fflush(log);\n  }\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  header_malloced = malloc (header_len + 1);\n  if (log)\n  {\n    fprintf(log, \"after malloc(header_len+1): header_malloced=%p\\n\", (void *)header_malloced);\n    fflush(log);\n  }\n  if (NULL == header_malloced)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: header_malloced allocation failed, returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memcpy header_malloced <- header (header=%p, header_len=%zu)\\n\",\n            (void *)header, header_len);\n    if (NULL == header)\n      fprintf(log, \"NOTE: header pointer is NULL - memcpy will read from NULL and likely crash\\n\");\n    fflush(log);\n  }\n\n  memcpy (header_malloced, header, header_len);\n  header_malloced[header_len] = 0;\n\n  if (log)\n  {\n    fprintf(log, \"after memcpy header: header_malloced=%p header_malloced[0]=%d (as byte)\\n\",\n            (void *)header_malloced, (unsigned char)header_malloced[0]);\n    fflush(log);\n  }\n\n  value_malloced = malloc (content_len + 1);\n  if (log)\n  {\n    fprintf(log, \"after malloc(content_len+1): value_malloced=%p\\n\", (void *)value_malloced);\n    fflush(log);\n  }\n  if (NULL != value_malloced)\n  {\n    if (log)\n    {\n      fprintf(log, \"about to memcpy value_malloced <- content (content=%p, content_len=%zu)\\n\",\n              (void *)content, content_len);\n      if (NULL == content)\n        fprintf(log, \"NOTE: content pointer is NULL - memcpy will read from NULL and likely crash\\n\");\n      fflush(log);\n    }\n\n    memcpy (value_malloced, content, content_len);\n    value_malloced[content_len] = 0;\n\n    if (log)\n    {\n      fprintf(log, \"after memcpy content: value_malloced=%p value_malloced[0]=%d (as byte)\\n\",\n              (void *)value_malloced, (unsigned char)value_malloced[0]);\n      fflush(log);\n    }\n\n    if (MHD_add_response_entry_no_alloc_ (response, kind,\n                                          header_malloced, header_len,\n                                          value_malloced, content_len))\n    {\n      if (log)\n      {\n        fprintf(log, \"EXIT: MHD_add_response_entry_no_alloc_ returned true - returning true\\n\");\n        fclose(log);\n      }\n      return true; /* Success exit point */\n    }\n\n    if (log)\n    {\n      fprintf(log, \"MHD_add_response_entry_no_alloc_ returned false - freeing value_malloced\\n\");\n      fflush(log);\n    }\n    free (value_malloced);\n  }\n  if (log)\n  {\n    fprintf(log, \"freeing header_malloced=%p and returning false\\n\", (void *)header_malloced);\n    fclose(log);\n  }\n  free (header_malloced);\n\n  return false; /* Failure exit point */\n}\n"
}