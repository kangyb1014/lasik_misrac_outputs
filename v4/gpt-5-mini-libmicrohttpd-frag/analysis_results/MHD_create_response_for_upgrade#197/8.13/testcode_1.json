{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *upgrade_handler_cls' is not const-qualified but is only stored (response->upgrade_handler_cls = upgrade_handler_cls) and never modified in the shown code. Per MISRA C 2023 Rule 8.13 it should be declared as 'const void *upgrade_handler_cls' (and the corresponding field in struct MHD_Response made const) unless the object is intended to be mutable. Therefore the fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_for_upgrade code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_for_upgrade:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  if (NULL == upgrade_handler)\n    return NULL; /* invalid request */\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    MHD_destroy_response (response);\n    return NULL;\n  }\n  return response;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_for_upgrade code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_for_upgrade with it.\n  - Your function must have the exact same signature as MHD_create_response_for_upgrade.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_for_upgrade to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_for_upgrade as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_for_upgrade will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_for_upgrade as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n  FILE *log = fopen(\"/tmp/logs/3395.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_create_response_for_upgrade( upgrade_handler=%p, upgrade_handler_cls=%p )\\n\",\n            (void *) upgrade_handler, upgrade_handler_cls);\n    fflush(log);\n  }\n\n  if (NULL == upgrade_handler)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: invalid request - upgrade_handler is NULL\\n\");\n      fclose(log);\n    }\n    return NULL; /* invalid request */\n  }\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n  {\n    if (log)\n    {\n      fprintf(log, \"ALLOC FAIL: MHD_calloc_ returned NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    if (log)\n    {\n      fprintf(log, \"MUTEX INIT FAIL: response=%p - freeing response and exiting\\n\", (void *) response);\n      fflush(log);\n    }\n    free (response);\n    if (log)\n    {\n      fprintf(log, \"EXIT: after mutex init failure\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n\n  if (log)\n  {\n    fprintf(log, \"SET FIELDS: response=%p, upgrade_handler=%p, upgrade_handler_cls=%p, total_size=%zu, reference_count=%d\\n\",\n            (void *) response,\n            (void *) response->upgrade_handler,\n            response->upgrade_handler_cls,\n            (size_t) response->total_size,\n            (int) response->reference_count);\n    fflush(log);\n  }\n\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    if (log)\n    {\n      fprintf(log, \"ADD HEADER FAIL: connection=Upgrade - destroying response=%p and exiting\\n\", (void *) response);\n      fflush(log);\n    }\n    MHD_destroy_response (response);\n    if (log)\n    {\n      fprintf(log, \"EXIT: after header add failure\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"SUCCESS: responding with upgrade response=%p\\n\", (void *) response);\n    fclose(log);\n  }\n  return response;\n}\n"
}