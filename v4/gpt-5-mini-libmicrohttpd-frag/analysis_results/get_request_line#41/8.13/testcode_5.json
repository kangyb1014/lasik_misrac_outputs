{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment only reads from the buffer (pointer subtraction to compute an offset) but the pointers used appear as non-const. If struct members are declared like\n  char *version;\n  char *read_buffer;\nthen Rule 8.13 is violated because these pointers should be const-qualified (e.g. const char *version; const char *read_buffer;) since the object is not modified here. Change the member types to point to const-qualified types to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_request_line code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2525.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_request_line:\n```c\nstatic bool\nget_request_line (struct MHD_Connection *c)\n{\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Parse whitespace in URI, special parsing of the request line */\n  const bool wsp_in_uri = (0 >= discp_lvl);\n  /* Keep whitespace in URI, give app URI with whitespace instead of\n     automatic redirect to fixed URI */\n  const bool wsp_in_uri_keep = (-2 >= discp_lvl);\n\n  if (! get_request_line_inner (c))\n  {\n    /* End of the request line has not been found yet */\n    mhd_assert ((! wsp_in_uri) || NULL == c->rq.version);\n    if ((NULL != c->rq.version) &&\n        (HTTP_VER_LEN <\n         (c->rq.hdrs.rq_line.proc_pos\n          - (size_t) (c->rq.version - c->read_buffer))))\n    {\n      c->rq.http_ver = MHD_HTTP_VER_INVALID;\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_MALFORMED);\n      return true; /* Error in the request */\n    }\n    return false;\n  }\n  if (MHD_CONNECTION_REQ_LINE_RECEIVING < c->state)\n    return true; /* Error in the request */\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  if (0 != c->rq.hdrs.rq_line.num_ws_in_uri)\n  {\n    if (! wsp_in_uri)\n    {\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      RQ_TARGET_INVALID_CHAR);\n      return true; /* Error in the request */\n    }\n    if (! wsp_in_uri_keep)\n    {\n      send_redirect_fixed_rq_target (c);\n      return true; /* Error in the request */\n    }\n  }\n  if (! process_request_target (c))\n    return true; /* Error in processing */\n\n  c->state = MHD_CONNECTION_REQ_LINE_RECEIVED;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_request_line code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_request_line with it.\n  - Your function must have the exact same signature as get_request_line.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_request_line to check logs.\n  - Your function MUST preserve the original logic of get_request_line as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_request_line will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_request_line as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_request_line (struct MHD_Connection *c)\n{\n  /* Open log file for tracing control flow and key state for Rule 8.13 investigation */\n  FILE *mhd_log = fopen(\"/tmp/logs/2525.txt\", \"a\");\n\n  const int discp_lvl = c->daemon->client_discipline;\n  /* Parse whitespace in URI, special parsing of the request line */\n  const bool wsp_in_uri = (0 >= discp_lvl);\n  /* Keep whitespace in URI, give app URI with whitespace instead of\n     automatic redirect to fixed URI */\n  const bool wsp_in_uri_keep = (-2 >= discp_lvl);\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"ENTER get_request_line: c=%p daemon=%p discp_lvl=%d wsp_in_uri=%d wsp_in_uri_keep=%d state=%d\\n\",\n            (void *)c, (void *)c->daemon, discp_lvl, (int)wsp_in_uri, (int)wsp_in_uri_keep, (int)c->state);\n    /* Log pointers relevant to the Rule 8.13 scenario */\n    fprintf(mhd_log, \"  rq.version=%p read_buffer=%p rq.hdrs.rq_line.proc_pos=%zu\\n\",\n            (void *)c->rq.version, (void *)c->read_buffer,\n            (size_t)c->rq.hdrs.rq_line.proc_pos);\n  }\n\n  if (! get_request_line_inner (c))\n  {\n    /* End of the request line has not been found yet */\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: get_request_line_inner returned false\\n\");\n\n    mhd_assert ((! wsp_in_uri) || NULL == c->rq.version);\n    if ((NULL != c->rq.version) &&\n        (HTTP_VER_LEN <\n         (c->rq.hdrs.rq_line.proc_pos\n          - (size_t) (c->rq.version - c->read_buffer))))\n    {\n      /* Log the computed offset and comparison that triggers the error path */\n      if (mhd_log)\n      {\n        size_t offset = (size_t) (c->rq.version - c->read_buffer);\n        size_t proc_pos = (size_t) c->rq.hdrs.rq_line.proc_pos;\n        fprintf(mhd_log, \"ERROR PATH: version != NULL, offset=%zu proc_pos=%zu HTTP_VER_LEN=%d -> marking invalid\\n\",\n                offset, proc_pos, (int)HTTP_VER_LEN);\n      }\n\n      c->rq.http_ver = MHD_HTTP_VER_INVALID;\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_MALFORMED);\n\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"RETURN: error (REQUEST_MALFORMED) -> true\\n\");\n        fclose(mhd_log);\n      }\n      return true; /* Error in the request */\n    }\n\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"RETURN: request line not complete yet -> false\\n\");\n      fclose(mhd_log);\n    }\n    return false;\n  }\n\n  if (mhd_log)\n    fprintf(mhd_log, \"CONTINUE: get_request_line_inner returned true\\n\");\n\n  if (MHD_CONNECTION_REQ_LINE_RECEIVING < c->state)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"RETURN: state (%d) > MHD_CONNECTION_REQ_LINE_RECEIVING -> true\\n\", (int)c->state);\n      fclose(mhd_log);\n    }\n    return true; /* Error in the request */\n  }\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n\n  if (mhd_log)\n    fprintf(mhd_log, \"ASSERTS OK: rq_tgt=%p\\n\", (void *)c->rq.hdrs.rq_line.rq_tgt);\n\n  if (0 != c->rq.hdrs.rq_line.num_ws_in_uri)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: num_ws_in_uri=%d wsp_in_uri=%d wsp_in_uri_keep=%d\\n\",\n              (int)c->rq.hdrs.rq_line.num_ws_in_uri, (int)wsp_in_uri, (int)wsp_in_uri_keep);\n\n    if (! wsp_in_uri)\n    {\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"ACTION: transmit_error_response_static (RQ_TARGET_INVALID_CHAR)\\n\");\n        fclose(mhd_log);\n      }\n      transmit_error_response_static (c,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      RQ_TARGET_INVALID_CHAR);\n      return true; /* Error in the request */\n    }\n    if (! wsp_in_uri_keep)\n    {\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"ACTION: send_redirect_fixed_rq_target -> redirect and return true\\n\");\n        fclose(mhd_log);\n      }\n      send_redirect_fixed_rq_target (c);\n      return true; /* Error in the request */\n    }\n  }\n\n  if (mhd_log)\n    fprintf(mhd_log, \"CALL: process_request_target\\n\");\n\n  if (! process_request_target (c))\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"RETURN: process_request_target returned false -> true\\n\");\n      fclose(mhd_log);\n    }\n    return true; /* Error in processing */\n  }\n\n  c->state = MHD_CONNECTION_REQ_LINE_RECEIVED;\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"RETURN: success, state set to MHD_CONNECTION_REQ_LINE_RECEIVED -> true\\n\");\n    fclose(mhd_log);\n  }\n  return true;\n}\n"
}