{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: if the mhd_assert macro expands to a no-op (for example when assertions are disabled in production builds), the statement mhd_assert(NULL == daemon->worker_pool); is an executed no-op whose removal would not affect program behaviour, so it is dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has an observable effect (e.g. aborts/logs on failure) then removing it would change behaviour and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_resume_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2598.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_resume_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_resume_connection with it.\n  - Your function must have the exact same signature as MHD_resume_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_resume_connection to check logs.\n  - Your function MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_resume_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  /* Open log file early to record control flow and state for analysis. */\n  FILE *mhd_log = fopen(\"/tmp/logs/2598.txt\", \"a\");\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"MHD_resume_connection ENTER: connection=%p, daemon=%p\\n\",\n              (void *)connection, (void *)daemon);\n      /* Try to log some daemon state that is relevant to the violation scenario. */\n      if (daemon)\n        {\n          fprintf(mhd_log, \" daemon->options=0x%lx, daemon->resuming=%d\\n\",\n                  (unsigned long)daemon->options, (int)daemon->resuming);\n        }\n      fflush(mhd_log);\n    }\n\n#if defined(MHD_USE_THREADS)\n  /* Log worker_pool before the assert so that we capture the state even if\n     mhd_assert is compiled out (which is the reported violation scenario). */\n  if (NULL != mhd_log)\n    {\n      if (daemon)\n        fprintf(mhd_log, \" mhd_assert check: daemon->worker_pool=%p\\n\",\n                (void *)daemon->worker_pool);\n      fflush(mhd_log);\n    }\n\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    {\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \" MHD_PANIC condition met: MHD_TEST_ALLOW_SUSPEND_RESUME not enabled\\n\");\n          fflush(mhd_log);\n        }\n      MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                    \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n    }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \" locking cleanup_connection_mutex\\n\");\n      fflush(mhd_log);\n    }\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \" set connection->resuming = true\\n\");\n      fflush(mhd_log);\n    }\n  daemon->resuming = true;\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \" set daemon->resuming = true\\n\");\n      fflush(mhd_log);\n    }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \" unlocked cleanup_connection_mutex\\n\");\n      fflush(mhd_log);\n    }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \" MHD_itc_activate_ failed for daemon->itc=%p\\n\",\n                  (void *)daemon->itc);\n          fflush(mhd_log);\n        }\n    }\n\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"MHD_resume_connection EXIT: connection=%p, daemon=%p\\n\",\n              (void *)connection, (void *)daemon);\n      fclose(mhd_log);\n    }\n}\n"
}