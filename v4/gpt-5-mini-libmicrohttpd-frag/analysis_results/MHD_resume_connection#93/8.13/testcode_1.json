{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the string literal \"r\" to MHD_itc_activate_. If the prototype of MHD_itc_activate_ accepts a non-const char * (e.g. int MHD_itc_activate_(..., char *cmd)), this is a violation: the function should take a const char * because the argument is a string literal and not meant to be modified. If, however, MHD_itc_activate_ is declared to take a const char * (or daemon->itc is a pointer to a type that must be mutable and is legitimately non-const), then there is no violation. Based on the fragment alone the likely problematic scenario is a non-const parameter for the string literal.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_resume_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_resume_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_resume_connection with it.\n  - Your function must have the exact same signature as MHD_resume_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_resume_connection to check logs.\n  - Your function MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_resume_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  /* Open log and record entry and key state. Keep best-effort logging if fopen fails. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: ENTRY\\n\");\n      fprintf(log, \"  connection=%p\\n\", (void *) connection);\n      fprintf(log, \"  daemon=%p\\n\", (void *) daemon);\n      fprintf(log, \"  daemon->options=0x%08lx\\n\", (unsigned long) daemon->options);\n      fprintf(log, \"  daemon->itc=%p\\n\", (void *) daemon->itc);\n      fclose(log);\n    }\n  }\n\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Check and log the options test just before the original panic check. */\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: about to call MHD_PANIC because suspend/resume not allowed (options=0x%08lx)\\n\",\n              (unsigned long) daemon->options);\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Log before and after acquiring the cleanup_connection_mutex. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: acquiring cleanup_connection_mutex\\n\");\n      fclose(log);\n    }\n  }\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  {\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: released cleanup_connection_mutex\\n\");\n      fprintf(log, \"  connection->resuming=%d daemon->resuming=%d\\n\", (int) connection->resuming, (int) daemon->resuming);\n      fclose(log);\n    }\n  }\n#endif\n  /* Preserve original behavior: attempt to signal resume via inter-thread channel. */\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) )\n  {\n    /* Log that the ITC is considered valid and the literal being passed. */\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: ITC valid (itc=%p). About to call MHD_itc_activate_(..., \\\"r\\\")\\n\", (void *) daemon->itc);\n      fclose(log);\n    }\n\n    /* Call activation and capture result for logging. */\n    int activate_result = MHD_itc_activate_ (daemon->itc, \"r\");\n\n    log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: MHD_itc_activate_(daemon->itc, \\\"r\\\") returned %d\\n\", activate_result);\n      fclose(log);\n    }\n\n    if (! activate_result)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n      /* Log the failure to signal resume. */\n      FILE *log2 = fopen(\"/tmp/logs/2595.txt\", \"a\");\n      if (log2)\n      {\n        fprintf(log2, \"MHD_resume_connection: Failed to signal resume via inter-thread communication channel.\\n\");\n        fclose(log2);\n      }\n    }\n  }\n  else\n  {\n    /* Log that ITC was not valid. */\n    FILE *log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_resume_connection: ITC not valid, skipping activation (itc=%p).\\n\", (void *) daemon->itc);\n      fclose(log);\n    }\n  }\n}\n"
}