{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a translatable string (the result of _(\"...\"), i.e. a string literal) to MHD_DLOG. If MHD_DLOG (or the _() macro/gettext) is declared to take/return a non-const char * (e.g. char *), this discards the const-qualification of data that is not intended to be modified. In that situation the pointer should be declared as pointing to const (e.g. const char *) so the parameter and/or _() return type should be changed accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_resume_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_resume_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_resume_connection with it.\n  - Your function must have the exact same signature as MHD_resume_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_resume_connection to check logs.\n  - Your function MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_resume_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_resume_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Entry probe: log that we entered the function and some key state. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (NULL == fp)\n      fp = fopen(\"/tmp/2595.txt\", \"a\");\n    if (NULL != fp)\n      {\n        fprintf(fp, \"ENTER MHD_resume_connection: connection=%p daemon=%p\\n\",\n                (void *) connection, (void *) daemon);\n        fprintf(fp, \"  daemon->options=0x%llx daemon->resuming=%d connection->resuming=%d daemon->itc=%p\\n\",\n                (unsigned long long) daemon->options,\n                (int) daemon->resuming,\n                (int) connection->resuming,\n                (void *) daemon->itc);\n        fflush(fp);\n        fclose(fp);\n      }\n  }\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    {\n      /* Log the panic reason (capture pointer + content) before invoking MHD_PANIC. */\n      const void *panic_msg_ptr = (const void *) (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n      FILE *fp = fopen(\"/tmp/logs/2595.txt\", \"a\");\n      if (NULL == fp)\n        fp = fopen(\"/tmp/2595.txt\", \"a\");\n      if (NULL != fp)\n        {\n          fprintf(fp, \"PANIC branch taken: panic_msg_ptr=%p msg=\\\"%s\\\"\\n\",\n                  panic_msg_ptr,\n                  (const char *) panic_msg_ptr);\n          fflush(fp);\n          fclose(fp);\n        }\n\n      MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                    \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n    }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) )\n    {\n      /* Attempt activation once, capture the result for logging and decision. */\n      int itc_valid = 1;\n      int activated = 0;\n\n      activated = MHD_itc_activate_ (daemon->itc, \"r\");\n\n      if (! activated)\n        {\n#ifdef HAVE_MESSAGES\n          /* Log the fact that activation failed, and capture the translatable\n             string pointer + content used in the MHD_DLOG call. This helps\n             reproduce pointer/const-qualification observations. */\n          const void *dlog_msg_ptr = (const void *) (_ (\"Failed to signal resume via inter-thread \" \\\n                     \"communication channel.\\n\"));\n          FILE *fp = fopen(\"/tmp/logs/2595.txt\", \"a\");\n          if (NULL == fp)\n            fp = fopen(\"/tmp/2595.txt\", \"a\");\n          if (NULL != fp)\n            {\n              fprintf(fp, \"ITC activation failed: itc=%p activated=%d dlog_msg_ptr=%p msg=\\\"%s\\\"\\n\",\n                      (void *) daemon->itc,\n                      activated,\n                      dlog_msg_ptr,\n                      (const char *) dlog_msg_ptr);\n              fflush(fp);\n              fclose(fp);\n            }\n\n          /* Preserve original behavior: call MHD_DLOG with the same translatable string. */\n          MHD_DLOG (daemon,\n                    _ (\"Failed to signal resume via inter-thread \" \\\n                       \"communication channel.\\n\"));\n#endif\n        }\n    }\n}\n"
}