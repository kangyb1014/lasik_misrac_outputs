{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled with HTTPS_SUPPORT not defined, tls_conn is initialized as the constant 'false' (const bool tls_conn = false). The controlling expression 'if (tls_conn)' is therefore invariant (always false) \u2014 not covered by the allowed exceptions \u2014 so this violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_data_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1799.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_send_data_:\n```c\nssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n      return MHD_ERR_AGAIN_;\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n      return MHD_ERR_TLS_;\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n      return MHD_ERR_PIPE_;\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n      return MHD_ERR_CONNRESET_;\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n      return MHD_ERR_CONNRESET_;\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n      return MHD_ERR_NOMEM_;\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    ret = MHD_ERR_NOTCONN_;\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n        return MHD_ERR_AGAIN_;\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n        return MHD_ERR_CONNRESET_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n        return MHD_ERR_PIPE_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n        return MHD_ERR_OPNOTSUPP_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n        return MHD_ERR_NOTCONN_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n        return MHD_ERR_INVAL_;\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n        return MHD_ERR_NOMEM_;\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n        return MHD_ERR_BADF_;\n      /* Treat any other error as a hard error. */\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n    post_send_setopt (connection, (! tls_conn), push_data);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_send_data_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_send_data_ with it.\n  - Your function must have the exact same signature as MHD_send_data_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_send_data_ to check logs.\n  - Your function MUST preserve the original logic of MHD_send_data_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_send_data_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_send_data_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "ssize_t\nMHD_send_data_ (struct MHD_Connection *connection,\n                const char *buffer,\n                size_t buffer_size,\n                bool push_data)\n{\n  MHD_socket s = connection->socket_fd;\n  ssize_t ret;\n#ifdef HTTPS_SUPPORT\n  const bool tls_conn = (connection->daemon->options & MHD_USE_TLS);\n#else  /* ! HTTPS_SUPPORT */\n  const bool tls_conn = false;\n#endif /* ! HTTPS_SUPPORT */\n\n  /* Open log file for tracing control flow and state. */\n  FILE *log = fopen(\"/tmp/logs/1799.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_send_data_ ENTRY: connection=%p socket_fd=%lld state=%d buffer_size=%zu push_data=%d tls_conn=%d\\n\",\n            (void *) connection,\n            (long long) s,\n            (int) connection->state,\n            buffer_size,\n            (int) push_data,\n            (int) tls_conn);\n    fflush(log);\n  }\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: early return MHD_ERR_NOTCONN_ (invalid socket or closed)\\n\");\n      fclose(log);\n    }\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (buffer_size > SSIZE_MAX)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: buffer_size (%zu) > SSIZE_MAX, capping to SSIZE_MAX and clearing push_data\\n\",\n              buffer_size);\n      fflush(log);\n    }\n    buffer_size = SSIZE_MAX; /* Max return value */\n    push_data = false; /* Incomplete send */\n  }\n\n  if (tls_conn)\n  {\n#ifdef HTTPS_SUPPORT\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: entering TLS branch (tls_conn=1)\\n\");\n      fflush(log);\n    }\n    pre_send_setopt (connection, (! tls_conn), push_data);\n    ret = gnutls_record_send (connection->tls_session,\n                              buffer,\n                              buffer_size);\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: gnutls_record_send returned %zd\\n\", ret);\n      fflush(log);\n    }\n    if (GNUTLS_E_AGAIN == ret)\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS_E_AGAIN -> return MHD_ERR_AGAIN_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if (GNUTLS_E_INTERRUPTED == ret)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS_E_INTERRUPTED -> return MHD_ERR_AGAIN_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if ( (GNUTLS_E_ENCRYPTION_FAILED == ret) ||\n         (GNUTLS_E_INVALID_SESSION == ret) ||\n         (GNUTLS_E_COMPRESSION_FAILED == ret) ||\n         (GNUTLS_E_EXPIRED == ret) ||\n         (GNUTLS_E_HASH_FAILED == ret) )\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: TLS hard errors -> return MHD_ERR_TLS_ (ret=%zd)\\n\", ret);\n        fclose(log);\n      }\n      return MHD_ERR_TLS_;\n    }\n    if ( (GNUTLS_E_PUSH_ERROR == ret) ||\n         (GNUTLS_E_INTERNAL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_IOCTL_ERROR == ret) ||\n         (GNUTLS_E_CRYPTODEV_DEVICE_ERROR == ret) )\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: TLS pipe/internal errors -> return MHD_ERR_PIPE_ (ret=%zd)\\n\", ret);\n        fclose(log);\n      }\n      return MHD_ERR_PIPE_;\n    }\n#if defined(GNUTLS_E_PREMATURE_TERMINATION)\n    if (GNUTLS_E_PREMATURE_TERMINATION == ret)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS_E_PREMATURE_TERMINATION -> return MHD_ERR_CONNRESET_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_CONNRESET_;\n    }\n#elif defined(GNUTLS_E_UNEXPECTED_PACKET_LENGTH)\n    if (GNUTLS_E_UNEXPECTED_PACKET_LENGTH == ret)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS_E_UNEXPECTED_PACKET_LENGTH -> return MHD_ERR_CONNRESET_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_CONNRESET_;\n    }\n#endif /* GNUTLS_E_UNEXPECTED_PACKET_LENGTH */\n    if (GNUTLS_E_MEMORY_ERROR == ret)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS_E_MEMORY_ERROR -> return MHD_ERR_NOMEM_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_NOMEM_;\n    }\n    if (ret < 0)\n    {\n      /* Treat any other error as hard error. */\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: GNUTLS other error (ret=%zd) -> return MHD_ERR_NOTCONN_\\n\", ret);\n        fclose(log);\n      }\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    /* Unlike non-TLS connections, do not reset \"write-ready\" if\n     * sent amount smaller than provided amount, as TLS\n     * connections may break data into smaller parts for sending. */\n#endif /* EPOLL_SUPPORT */\n#else  /* ! HTTPS_SUPPORT  */\n    /* When HTTPS_SUPPORT is not defined, tls_conn will be false, so this\n     * branch should be unreachable. Still, preserve behavior. */\n    ret = MHD_ERR_NOTCONN_;\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: HTTPS_SUPPORT not defined but tls_conn path compiled -> set ret=MHD_ERR_NOTCONN_\\n\");\n      fflush(log);\n    }\n#endif /* ! HTTPS_SUPPORT  */\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: entering plaintext branch (tls_conn=0)\\n\");\n      fflush(log);\n    }\n    /* plaintext transmission */\n    if (buffer_size > MHD_SCKT_SEND_MAX_SIZE_)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: buffer_size (%zu) > MHD_SCKT_SEND_MAX_SIZE_, capping and clearing push_data\\n\",\n                buffer_size);\n        fflush(log);\n      }\n      buffer_size = MHD_SCKT_SEND_MAX_SIZE_; /* send() return value limit */\n      push_data = false; /* Incomplete send */\n    }\n\n    pre_send_setopt (connection, (! tls_conn), push_data);\n#ifdef MHD_USE_MSG_MORE\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      push_data ? 0 : MSG_MORE);\n#else\n    ret = MHD_send4_ (s,\n                      buffer,\n                      buffer_size,\n                      0);\n#endif\n\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: MHD_send4_ returned %zd\\n\", ret);\n      fflush(log);\n    }\n\n    if (0 > ret)\n    {\n      const int err = MHD_socket_get_error_ ();\n\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: socket error code = %d\\n\", err);\n        fflush(log);\n      }\n\n      if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n      {\n#ifdef EPOLL_SUPPORT\n        /* EAGAIN, no longer write-ready */\n        connection->epoll_state &=\n          ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: socket EAGAIN -> return MHD_ERR_AGAIN_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: socket EINTR -> return MHD_ERR_AGAIN_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_AGAIN_;\n      }\n      if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: remote disconnect -> return MHD_ERR_CONNRESET_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_CONNRESET_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: EPIPE -> return MHD_ERR_PIPE_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_PIPE_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: EOPNOTSUPP -> return MHD_ERR_OPNOTSUPP_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_OPNOTSUPP_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: ENOTCONN -> return MHD_ERR_NOTCONN_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_NOTCONN_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: EINVAL -> return MHD_ERR_INVAL_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_INVAL_;\n      }\n      if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: low resources -> return MHD_ERR_NOMEM_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_NOMEM_;\n      }\n      if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_send_data_: EBADF -> return MHD_ERR_BADF_\\n\");\n          fclose(log);\n        }\n        return MHD_ERR_BADF_;\n      }\n      /* Treat any other error as a hard error. */\n      if (log)\n      {\n        fprintf(log, \"MHD_send_data_: socket other error -> return MHD_ERR_NOTCONN_\\n\");\n        fclose(log);\n      }\n      return MHD_ERR_NOTCONN_;\n    }\n#ifdef EPOLL_SUPPORT\n    else if (buffer_size > (size_t) ret)\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n  }\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  /* If TLS connection is used then next final send() will be\n   * without MSG_MORE support. If non-TLS connection is used\n   * it's unknown whether sendfile() will be used or not so\n   * assume that next call will be the same, like this call. */\n  if ( (push_data) &&\n       (buffer_size == (size_t) ret) )\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_send_data_: calling post_send_setopt (push_data=1, buffer_size==ret)\\n\");\n      fflush(log);\n    }\n    post_send_setopt (connection, (! tls_conn), push_data);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_send_data_: EXIT ret=%zd\\n\", ret);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}