{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'line' is declared as 'char *' but is only read (not modified) and the call uses &line[prefix_len] as the source string for strdup. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Here 'line' could and should be declared as 'const char *line', and the call would then pass a 'const char *' to strdup. As written, the non-const 'char *line' violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_match_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_match_header with it.\n  - Your function must have the exact same signature as try_match_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_match_header to check logs.\n  - Your function MUST preserve the original logic of try_match_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_match_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_match_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  /* Logging probes to allow reproduction/evidence collection. Logs appended\n     to /tmp/logs/4275.txt. */\n  FILE *log = fopen(\"/tmp/logs/4275.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"try_match_header ENTER: prefix=%p prefix_len=%zu line=%p *suffix=%p\\n\",\n            (const void *)prefix, prefix_len, (void *)line, (const void *)(*suffix));\n    /* Print a short preview of prefix (up to 64 chars) */\n    if (prefix != NULL)\n    {\n      size_t i = 0u;\n      fprintf(log, \"prefix_preview=\\\"\");\n      while ((i < 64u) && (prefix[i] != '\\0'))\n      {\n        fputc((unsigned char)prefix[i], log);\n        ++i;\n      }\n      if (i == 64u)\n        fprintf(log, \"...\");\n      fprintf(log, \"\\\"\\n\");\n    }\n\n    /* Print a short preview of line (up to 64 chars) */\n    if (line != NULL)\n    {\n      size_t i = 0u;\n      fprintf(log, \"line_preview=\\\"\");\n      while ((i < 64u) && (line[i] != '\\0'))\n      {\n        fputc((unsigned char)line[i], log);\n        ++i;\n      }\n      if (i == 64u)\n        fprintf(log, \"...\");\n      fprintf(log, \"\\\"\\n\");\n    }\n    fclose(log);\n  }\n\n  if (NULL != *suffix)\n  {\n    FILE *log2 = fopen(\"/tmp/logs/4275.txt\", \"a\");\n    if (log2 != NULL)\n    {\n      fprintf(log2, \"suffix already set (%p); returning MHD_NO\\n\", (const void *)(*suffix));\n      fclose(log2);\n    }\n    return MHD_NO;\n  }\n\n  /* Preserve original logic: iterate through 'line' and attempt match. */\n  size_t offset = 0u;\n  while (0 != *line)\n  {\n    FILE *loop_log = fopen(\"/tmp/logs/4275.txt\", \"a\");\n    if (loop_log != NULL)\n    {\n      /* Log current offset and character (hex for non-printables). */\n      fprintf(loop_log, \"loop offset=%zu char='\", offset);\n      /* Print up to 1 visible character; if non-printable, use hex. */\n      unsigned char uc = (unsigned char)*line;\n      if ((uc >= 0x20u) && (uc <= 0x7Eu))\n        fprintf(loop_log, \"%c\", uc);\n      else\n        fprintf(loop_log, \"0x%02x\", uc);\n      fprintf(loop_log, \"' (0x%02x)\\n\", uc);\n      fclose(loop_log);\n    }\n\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      /* Matched: log the match and the exact string that will be passed to\n         strdup. At this point it is safe to access line[prefix_len] because\n         the match checked prefix_len characters. */\n      FILE *match_log = fopen(\"/tmp/logs/4275.txt\", \"a\");\n      if (match_log != NULL)\n      {\n        fprintf(match_log, \"prefix matched at offset=%zu; will strdup from &line[%zu]=%p\\n\",\n                offset, prefix_len, (void *)(&line[prefix_len]));\n        /* Print a preview (up to 256 chars) of the suffix being duplicated. */\n        fprintf(match_log, \"suffix_preview=\\\"\");\n        {\n          size_t j = 0u;\n          while ((j < 256u) && (line[prefix_len + j] != '\\0'))\n          {\n            fputc((unsigned char)line[prefix_len + j], match_log);\n            ++j;\n          }\n          if (j == 256u)\n            fprintf(match_log, \"...\");\n        }\n        fprintf(match_log, \"\\\"\\n\");\n        fclose(match_log);\n      }\n\n      *suffix = strdup (&line[prefix_len]);\n\n      FILE *after_dup = fopen(\"/tmp/logs/4275.txt\", \"a\");\n      if (after_dup != NULL)\n      {\n        fprintf(after_dup, \"strdup assigned %p to *suffix\\n\", (const void *)(*suffix));\n        fclose(after_dup);\n      }\n      return MHD_YES;\n    }\n    ++line;\n    ++offset;\n  }\n\n  FILE *end_log = fopen(\"/tmp/logs/4275.txt\", \"a\");\n  if (end_log != NULL)\n  {\n    fprintf(end_log, \"no match found; returning MHD_NO\\n\");\n    fclose(end_log);\n  }\n  return MHD_NO;\n}\n"
}