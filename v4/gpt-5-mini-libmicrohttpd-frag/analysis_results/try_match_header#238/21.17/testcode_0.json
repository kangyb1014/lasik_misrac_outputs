{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_n_ compares up to prefix_len characters from its pointer arguments, calling it with prefix_len larger than the number of characters remaining in line can cause reads beyond the end of the object pointed to by line. For example, if line contains a shorter (null-terminated) string than prefix_len, the call may access bytes past the terminating null (out-of-bounds) \u2014 violating MISRA C 2023 Rule 21.17 unless MHD_str_equal_caseless_n_ itself guards against such reads.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_match_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_match_header:\n```c\nstatic int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  if (NULL != *suffix)\n    return MHD_NO;\n  while (0 != *line)\n  {\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      *suffix = strdup (&line[prefix_len]);\n      return MHD_YES;\n    }\n    ++line;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_match_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_match_header with it.\n  - Your function must have the exact same signature as try_match_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_match_header to check logs.\n  - Your function MUST preserve the original logic of try_match_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_match_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_match_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\ntry_match_header (const char *prefix,\n                  size_t prefix_len,\n                  char *line,\n                  char **suffix)\n{\n  FILE *log = fopen(\"/tmp/logs/4273.txt\", \"a\");\n  if (log)\n  {\n    /* Log entry and pointer state without dereferencing line or *suffix yet. */\n    (void)fprintf(log,\n                  \"try_match_header ENTER: prefix=%p prefix_len=%zu line=%p suffix_ptr=%p\\n\",\n                  (void *)prefix,\n                  prefix_len,\n                  (void *)line,\n                  (void *)suffix);\n    (void)fflush(log);\n  }\n\n  /* Preserve original early-exit behavior exactly. */\n  if (NULL != *suffix)\n  {\n    if (log)\n    {\n      (void)fprintf(log, \"try_match_header: *suffix != NULL -> returning MHD_NO\\n\");\n      (void)fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  size_t iter = 0u;\n  while (0 != *line)\n  {\n    if (log)\n    {\n      /* Safe to dereference *line here because while condition checked it. */\n      (void)fprintf(log,\n                    \"iter=%zu: line=%p *line=0x%02x\\n\",\n                    iter,\n                    (void *)line,\n                    (unsigned int)(unsigned char)(*line));\n      (void)fflush(log);\n    }\n\n    if (MHD_str_equal_caseless_n_ (prefix,\n                                   line,\n                                   prefix_len))\n    {\n      if (log)\n      {\n        (void)fprintf(log,\n                      \"match at iter=%zu: prefix_len=%zu line=%p -> calling strdup(&line[prefix_len])\\n\",\n                      iter,\n                      prefix_len,\n                      (void *)line);\n        (void)fflush(log);\n      }\n\n      *suffix = strdup (&line[prefix_len]);\n\n      if (log)\n      {\n        (void)fprintf(log,\n                      \"after strdup: new suffix=%p\\n\",\n                      (void *)(*suffix));\n        if (NULL != *suffix)\n        {\n          /* Safe to inspect the first byte of the duplicated string (strdup returns NUL-terminated). */\n          (void)fprintf(log,\n                        \"after strdup: suffix[0]=0x%02x\\n\",\n                        (unsigned int)(unsigned char)((*suffix)[0]));\n        }\n        (void)fclose(log);\n      }\n      return MHD_YES;\n    }\n\n    ++line;\n    ++iter;\n  }\n\n  if (log)\n  {\n    (void)fprintf(log, \"no match found -> returning MHD_NO\\n\");\n    (void)fclose(log);\n  }\n  return MHD_NO;\n}\n"
}