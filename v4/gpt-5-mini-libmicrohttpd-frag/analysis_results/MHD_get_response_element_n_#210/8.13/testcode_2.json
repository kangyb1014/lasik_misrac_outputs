{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local iterator pointer 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but it is only used to read header fields (no writes through pos). Therefore the pointed-to type could be const-qualified (e.g. 'const struct MHD_HTTP_Res_Header *pos'), so the current declaration violates MISRA C 2023 Rule 8.13. (If the API must return a non-const pointer, either the function signature should be changed to return a pointer-to-const or an explicit decision/cast should be documented.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3025.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_response_element_n_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_response_element_n_ with it.\n  - Your function must have the exact same signature as MHD_get_response_element_n_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_response_element_n_ to check logs.\n  - Your function MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_response_element_n_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "struct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/3025.txt\", \"a\");\n\n  if (log)\n  {\n    /* Log entry into the function with key preview */\n    fprintf(log, \"ENTER MHD_get_response_element_n_: response=%p kind=%d key_len=%zu key=\\\"%.*s\\\"\\n\",\n            (void *)response, (int)kind, key_len, (int)key_len, key);\n  }\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  int iter = 0;\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if (log)\n    {\n      fprintf(log, \"  iter=%d pos=%p header_size=%zu pos->kind=%d\\n\",\n              iter, (void *)pos, pos->header_size, (int)pos->kind);\n      if (pos->header != NULL)\n      {\n        /* Print header as a string up to header_size and as hex bytes for unambiguous logging */\n        fprintf(log, \"    header (as string up to header_size): \\\"%.*s\\\"\\n\",\n                (int)pos->header_size, pos->header);\n        fprintf(log, \"    header (hex): \");\n        for (size_t i = 0; i < pos->header_size; ++i)\n        {\n          fprintf(log, \"%02x \", (unsigned char)pos->header[i]);\n        }\n        fprintf(log, \"\\n\");\n      }\n      else\n      {\n        fprintf(log, \"    header is NULL\\n\");\n      }\n    }\n\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n    {\n      if (log)\n      {\n        fprintf(log, \"  MATCH at iter=%d pos=%p\\n\", iter, (void *)pos);\n        fclose(log);\n      }\n      return pos;\n    }\n\n    ++iter;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"  NO MATCH, returning NULL\\n\");\n    fclose(log);\n  }\n\n  return NULL;\n}\n"
}