{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call itself invokes a custom comparator MHD_str_equal_caseless_bin_n_. If that function internally uses <string.h> functions that expect NUL-terminated C-strings (for example strlen(), strcmp(), strcasecmp(), strcpy(), strcat() or any implementation that calls those), and pos->header is a length-delimited buffer without a terminating '\\0' (or the implementation calls strlen(pos->header) or otherwise reads past header_size), then those library calls can read beyond the bounds of pos->header (or key) and thus violate MISRA C 2023 Rule 21.17. For example, an implementation that does if (strlen(pos->header) == strlen(key) && strncasecmp(pos->header, key, pos->header_size) == 0) would read bytes past the header_size when pos->header is not NUL-terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_response_element_n_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_response_element_n_ with it.\n  - Your function must have the exact same signature as MHD_get_response_element_n_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_response_element_n_ to check logs.\n  - Your function MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_response_element_n_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "struct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  /* Include stdio for logging. Placed here so the surrounding file need not\n     necessarily already include it. Preprocessor handles include anywhere. */\n  #include <stdio.h>\n\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  /* Open log file for append. Best-effort logging: if fopen fails, we still\n     preserve original function behavior. */\n  FILE *logf = fopen(\"/tmp/logs/3023.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"ENTER MHD_get_response_element_n_: response=%p, kind=%d, key=%p, key_len=%zu\\n\",\n              (void *)response, (int)kind, (const void *)key, key_len);\n      /* Dump up to first 64 bytes of key (hex) to avoid reading beyond). */\n      {\n        size_t dump = (key_len < 64) ? key_len : 64;\n        fprintf(logf, \" key bytes (hex, up to %zu):\", dump);\n        for (size_t i = 0; i < dump; ++i)\n          fprintf(logf, \" %02x\", (unsigned char)key[i]);\n        if (key_len > dump)\n          fprintf(logf, \" ... (total %zu bytes)\", key_len);\n        fprintf(logf, \"\\n\");\n        /* Note if there is an internal NUL within the bounded key length. */\n        int key_has_nul = 0;\n        for (size_t i = 0; i < key_len; ++i)\n          if (key[i] == '\\0') { key_has_nul = 1; break; }\n        fprintf(logf, \" key has NUL within length: %s\\n\", key_has_nul ? \"YES\" : \"NO\");\n        fflush(logf);\n      }\n    }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    /* Log header metadata safely (do not read beyond pos->header_size). */\n    if (logf)\n      {\n        fprintf(logf, \"ITER: pos=%p, pos->header=%p, pos->header_size=%zu, pos->kind=%d\\n\",\n                (void *)pos, (void *)pos->header, pos->header_size, (int)pos->kind);\n        /* Dump up to first 64 bytes of header payload (bounded by header_size). */\n        size_t hdump = (pos->header_size < 64) ? pos->header_size : 64;\n        fprintf(logf, \" header bytes (hex, up to %zu):\", hdump);\n        if (pos->header != NULL)\n          {\n            for (size_t i = 0; i < hdump; ++i)\n              fprintf(logf, \" %02x\", (unsigned char)pos->header[i]);\n            if (pos->header_size > hdump)\n              fprintf(logf, \" ... (total %zu bytes)\", pos->header_size);\n            /* Check for NUL within the declared header_size (safe). */\n            int header_has_nul = 0;\n            for (size_t i = 0; i < pos->header_size; ++i)\n              if (pos->header[i] == '\\0') { header_has_nul = 1; break; }\n            fprintf(logf, \"\\n header has NUL within length: %s\\n\",\n                    header_has_nul ? \"YES\" : \"NO\");\n          }\n        else\n          {\n            fprintf(logf, \" (header pointer is NULL)\\n\");\n          }\n        fflush(logf);\n      }\n\n    /* Preserve original logic and ordering: check sizes and kind first. */\n    if ((pos->header_size == key_len) && (kind == pos->kind))\n    {\n      /* Log that we are about to call the comparator with the bounded length.\n         This is important to reproduce scenarios where the comparator might\n         internally assume NUL-terminated strings and read beyond the bound. */\n      if (logf)\n        {\n          fprintf(logf, \" About to call MHD_str_equal_caseless_bin_n_(pos->header=%p, key=%p, n=%zu)\\n\",\n                  (void *)pos->header, (const void *)key, pos->header_size);\n          fflush(logf);\n        }\n\n      /* Call the comparator exactly as in original code. */\n      if (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size))\n      {\n        if (logf)\n          {\n            fprintf(logf, \" Comparator returned TRUE -> match found at pos=%p\\n\", (void *)pos);\n            fclose(logf);\n          }\n        return pos;\n      }\n      else\n      {\n        if (logf)\n          {\n            fprintf(logf, \" Comparator returned FALSE for pos=%p\\n\", (void *)pos);\n            fflush(logf);\n          }\n      }\n    }\n    else\n    {\n      if (logf)\n        {\n          fprintf(logf, \" Skipped comparator: header_size==key_len? %s, kind match? %s\\n\",\n                  (pos->header_size == key_len) ? \"YES\" : \"NO\",\n                  (kind == pos->kind) ? \"YES\" : \"NO\");\n          fflush(logf);\n        }\n    }\n  }\n\n  if (logf)\n    {\n      fprintf(logf, \"EXIT MHD_get_response_element_n_: no matching header found\\n\");\n      fclose(logf);\n    }\n  return NULL;\n}\n"
}