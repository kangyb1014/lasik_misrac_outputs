{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the code is built with none of the feature macros defined (HAVE_FREEBSD_SENDFILE not defined, or SF_FLAGS not defined, and either HAVE_SYSCONF or _SC_IOV_MAX not defined so the second block is inactive), MHD_send_init_static_vars_ has no executable statements. Any calls to this function would execute but perform no action, so removing those calls would not change program behaviour (aside from timing). In that configuration the calls are dead code and thus Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_init_static_vars_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1958.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_send_init_static_vars_:\n```c\nvoid\nMHD_send_init_static_vars_ (void)\n{\n#ifdef HAVE_FREEBSD_SENDFILE\n  /* FreeBSD 11 and later allow to specify read-ahead size\n   * and handles SF_NODISKIO differently.\n   * SF_FLAGS defined only on FreeBSD 11 and later. */\n#ifdef SF_FLAGS\n  freebsd_sendfile_init_ ();\n#endif /* SF_FLAGS */\n#endif /* HAVE_FREEBSD_SENDFILE */\n#if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX)\n  iov_max_init_ ();\n#endif /* HAVE_SYSCONF && _SC_IOV_MAX */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_send_init_static_vars_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_send_init_static_vars_ with it.\n  - Your function must have the exact same signature as MHD_send_init_static_vars_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_send_init_static_vars_ to check logs.\n  - Your function MUST preserve the original logic of MHD_send_init_static_vars_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_send_init_static_vars_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_send_init_static_vars_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_send_init_static_vars_ (void)\n{\n#include <stdio.h>\n  FILE *logf = fopen(\"/tmp/logs/1958.txt\", \"a\");\n  if (logf) {\n    fprintf(logf, \"MHD_send_init_static_vars_: entered\\n\");\n  }\n\n#ifdef HAVE_FREEBSD_SENDFILE\n  if (logf) {\n    fprintf(logf, \"MHD: HAVE_FREEBSD_SENDFILE defined\\n\");\n  }\n  /* FreeBSD 11 and later allow to specify read-ahead size\n   * and handles SF_NODISKIO differently.\n   * SF_FLAGS defined only on FreeBSD 11 and later. */\n#ifdef SF_FLAGS\n  if (logf) {\n    fprintf(logf, \"MHD: SF_FLAGS defined, about to call freebsd_sendfile_init_()\\n\");\n  }\n  freebsd_sendfile_init_ ();\n  if (logf) {\n    fprintf(logf, \"MHD: freebsd_sendfile_init_() returned\\n\");\n  }\n#else /* SF_FLAGS */\n  if (logf) {\n    fprintf(logf, \"MHD: SF_FLAGS not defined, skipping freebsd_sendfile_init_()\\n\");\n  }\n#endif /* SF_FLAGS */\n#else /* HAVE_FREEBSD_SENDFILE */\n  if (logf) {\n    fprintf(logf, \"MHD: HAVE_FREEBSD_SENDFILE not defined, skipping FreeBSD sendfile init\\n\");\n  }\n#endif /* HAVE_FREEBSD_SENDFILE */\n\n#if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX)\n  if (logf) {\n    fprintf(logf, \"MHD: HAVE_SYSCONF && _SC_IOV_MAX defined, about to call iov_max_init_()\\n\");\n  }\n  iov_max_init_ ();\n  if (logf) {\n    fprintf(logf, \"MHD: iov_max_init_() returned\\n\");\n  }\n#else\n  if (logf) {\n    fprintf(logf, \"MHD: HAVE_SYSCONF && _SC_IOV_MAX not defined, skipping iov_max_init_()\\n\");\n  }\n#endif /* HAVE_SYSCONF && _SC_IOV_MAX */\n\n  if (logf) {\n    fflush(logf);\n    fclose(logf);\n  }\n}\n"
}