{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_itc_activate_ is declared with a non-const pointer parameter for the second argument (e.g. char * or void *), then passing the string literal \"n\" means a pointer is used that is not const-qualified even though the pointed object is not intended to be modified. That violates MISRA C 2023 Rule 8.13. The fix is to declare the parameter as const char * (or const void *) so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified internal_add_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of internal_add_connection:\n```c\nstatic enum MHD_Result\ninternal_add_connection (struct MHD_Daemon *daemon,\n                         MHD_socket client_socket,\n                         const struct sockaddr_storage *addr,\n                         socklen_t addrlen,\n                         bool external_add,\n                         bool non_blck,\n                         bool sk_spipe_supprs,\n                         enum MHD_tristate sk_is_nonip)\n{\n  struct MHD_Connection *connection;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Direct add to master daemon could never happen. */\n  mhd_assert (NULL == daemon->worker_pool);\n#endif\n\n  if (MHD_D_IS_USING_SELECT_ (daemon) &&\n      (! MHD_D_DOES_SCKT_FIT_FDSET_ (client_socket, daemon)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"New connection socket descriptor (%d) is not less \" \\\n                 \"than FD_SETSIZE (%d).\\n\"),\n              (int) client_socket,\n              (int) MHD_D_GET_FD_SETSIZE_ (daemon));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n    errno = ENFILE;\n#endif\n    return MHD_NO;\n  }\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (! non_blck) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Epoll mode supports only non-blocking sockets\\n\"));\n#endif\n    MHD_socket_close_chk_ (client_socket);\n#if defined(EINVAL) && (EINVAL + 0 != 0)\n    errno = EINVAL;\n#endif\n    return MHD_NO;\n  }\n\n  connection = new_connection_prepare_ (daemon,\n                                        client_socket,\n                                        addr, addrlen,\n                                        external_add,\n                                        non_blck,\n                                        sk_spipe_supprs,\n                                        sk_is_nonip);\n  if (NULL == connection)\n    return MHD_NO;\n\n  if ((external_add) &&\n      MHD_D_IS_THREAD_SAFE_ (daemon))\n  {\n    /* Connection is added externally and MHD is thread safe mode. */\n    MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n    DLL_insert (daemon->new_connections_head,\n                daemon->new_connections_tail,\n                connection);\n    daemon->have_new = true;\n    MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n\n    /* The rest of connection processing must be handled in\n     * the daemon thread. */\n    if ((MHD_ITC_IS_VALID_ (daemon->itc)) &&\n        (! MHD_itc_activate_ (daemon->itc, \"n\")))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal new connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n    return MHD_YES;\n  }\n\n  return new_connection_process_ (daemon, connection);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified internal_add_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original internal_add_connection with it.\n  - Your function must have the exact same signature as internal_add_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call internal_add_connection to check logs.\n  - Your function MUST preserve the original logic of internal_add_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, internal_add_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of internal_add_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ninternal_add_connection (struct MHD_Daemon *daemon,\n                         MHD_socket client_socket,\n                         const struct sockaddr_storage *addr,\n                         socklen_t addrlen,\n                         bool external_add,\n                         bool non_blck,\n                         bool sk_spipe_supprs,\n                         enum MHD_tristate sk_is_nonip)\n{\n  struct MHD_Connection *connection;\n  FILE *logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /* Direct add to master daemon could never happen. */\n  mhd_assert (NULL == daemon->worker_pool);\n#endif\n\n  /* Log entry and key parameter/state information. */\n  if (logf)\n  {\n    fprintf(logf, \"internal_add_connection: ENTER\\n\");\n    fprintf(logf, \"  daemon=%p, client_socket=%lu, addr=%p, addrlen=%u\\n\",\n            (void *)daemon,\n            (unsigned long) client_socket,\n            (void *)addr,\n            (unsigned) addrlen);\n    fprintf(logf, \"  flags: external_add=%d, non_blck=%d, sk_spipe_supprs=%d, sk_is_nonip=%d\\n\",\n            (int) external_add, (int) non_blck, (int) sk_spipe_supprs, (int) sk_is_nonip);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  if (MHD_D_IS_USING_SELECT_ (daemon) &&\n      (! MHD_D_DOES_SCKT_FIT_FDSET_ (client_socket, daemon)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"New connection socket descriptor (%d) is not less \" \\\n                 \"than FD_SETSIZE (%d).\\n\"),\n              (int) client_socket,\n              (int) MHD_D_GET_FD_SETSIZE_ (daemon));\n#endif\n    /* Log this early exit reason. */\n    logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"internal_add_connection: socket descriptor too large for FD_SET, client_socket=%lu\\n\",\n              (unsigned long) client_socket);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    MHD_socket_close_chk_ (client_socket);\n#if defined(ENFILE) && (ENFILE + 0 != 0)\n    errno = ENFILE;\n#endif\n    return MHD_NO;\n  }\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (! non_blck) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Epoll mode supports only non-blocking sockets\\n\"));\n#endif\n    /* Log this early exit reason. */\n    logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"internal_add_connection: epoll requires non-blocking socket, non_blck=%d\\n\",\n              (int) non_blck);\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    MHD_socket_close_chk_ (client_socket);\n#if defined(EINVAL) && (EINVAL + 0 != 0)\n    errno = EINVAL;\n#endif\n    return MHD_NO;\n  }\n\n  connection = new_connection_prepare_ (daemon,\n                                        client_socket,\n                                        addr, addrlen,\n                                        external_add,\n                                        non_blck,\n                                        sk_spipe_supprs,\n                                        sk_is_nonip);\n  if (NULL == connection)\n  {\n    /* Log failure to allocate/prepare connection. */\n    logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"internal_add_connection: new_connection_prepare_ returned NULL\\n\");\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n    return MHD_NO;\n  }\n\n  if ((external_add) &&\n      MHD_D_IS_THREAD_SAFE_ (daemon))\n  {\n    /* Connection is added externally and MHD is thread safe mode. */\n    MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n    DLL_insert (daemon->new_connections_head,\n                daemon->new_connections_tail,\n                connection);\n    daemon->have_new = true;\n    MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n\n    /* The rest of connection processing must be handled in\n     * the daemon thread. */\n    if ((MHD_ITC_IS_VALID_ (daemon->itc)))\n    {\n      /* Before calling the inter-thread communication activate function,\n       * log the intention to call it and the exact pointer/value passed.\n       * This helps to reproduce the scenario where a string literal \"n\"\n       * (which has type const char[]) is passed to a function that may\n       * accept a non-const pointer parameter. */\n      logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n      if (logf)\n      {\n        const char *literal = \"n\";\n        fprintf(logf, \"internal_add_connection: about to call MHD_itc_activate_ with itc=%p, literal_ptr=%p, literal_val='%c'\\n\",\n                (void *)daemon->itc,\n                (void *) literal,\n                literal[0]);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n\n      /* Preserve original behavior but capture the return value for logging. */\n      int itc_res = MHD_itc_activate_ (daemon->itc, \"n\");\n\n      /* Log the result of the activation call. */\n      logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"internal_add_connection: MHD_itc_activate_(daemon->itc, \\\"n\\\") returned %d\\n\",\n                itc_res);\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n\n      if (! itc_res)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon,\n                  _ (\"Failed to signal new connection via inter-thread \" \\\n                     \"communication channel.\\n\"));\n#endif\n      }\n    }\n    else\n    {\n      /* Log that ITC is not valid. */\n      logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"internal_add_connection: daemon->itc not valid, skipping activation\\n\");\n        fflush(logf);\n        fclose(logf);\n        logf = NULL;\n      }\n    }\n    return MHD_YES;\n  }\n\n  /* Log the handoff to new_connection_process_. */\n  logf = fopen(\"/tmp/logs/4255.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"internal_add_connection: handing off to new_connection_process_ for connection=%p\\n\",\n            (void *) connection);\n    fflush(logf);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  return new_connection_process_ (daemon, connection);\n}\n"
}