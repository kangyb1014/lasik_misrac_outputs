{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable buf is declared as char * but is only used for read-only operations (passed to memcmp() and memchr()). According to Rule 8.13 it should be declared as const char * (e.g. const char *buf = (const char *)&pp[1];). Therefore the code violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of find_boundary:\n```c\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      else if (dash == buf)\n        (*ioffptr)++;                         /* at least skip one byte */\n      else\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified find_boundary code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original find_boundary with it.\n  - Your function must have the exact same signature as find_boundary.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call find_boundary to check logs.\n  - Your function MUST preserve the original logic of find_boundary as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, find_boundary will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of find_boundary as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  /* NOTE: keep the original declaration to preserve the reported Rule 8.13 violation\n     (buf is a char * though used read-only). Logging is added to capture control flow\n     and state so the violation scenario can be reproduced and inspected. */\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  /* Open log file in append mode. If this fails, proceed silently to avoid\n     changing original behavior. */\n  FILE *logf = fopen(\"/tmp/logs/3435.txt\", \"a\");\n  if (NULL != logf)\n  {\n    /* Log entry with key control/state info available at function entry. */\n    fprintf(logf, \"ENTER find_boundary: pp=%p boundary=%p blen=%zu ioff=%p(*=%zu) next_state=%d next_dash_state=%d\\n\",\n            (void *)pp, (const void *)boundary, blen, (void *)ioffptr, (ioffptr ? *ioffptr : (size_t)0), (int)next_state, (int)next_dash_state);\n    fprintf(logf, \"  pp->buffer_pos=%zu pp->buffer_size=%zu pp->state=%d buf=%p\\n\",\n            pp->buffer_pos, pp->buffer_size, (int)pp->state, (void *)buf);\n    /* Dump up to first 32 bytes of the buffer for inspection (hex). */\n    {\n      size_t dump = pp->buffer_pos < 32 ? pp->buffer_pos : 32;\n      fprintf(logf, \"  buf[0..%zu]:\", dump ? dump - 1 : 0);\n      for (size_t i = 0; i < dump; ++i)\n        fprintf(logf, \" %02x\", (unsigned char)buf[i]);\n      fprintf(logf, \"\\n\");\n    }\n    fflush(logf);\n  }\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"BRANCH: not enough data (buffer_pos=%zu < 2+blen=%zu)\\n\",\n              pp->buffer_pos, 2 + blen);\n      if (pp->buffer_pos == pp->buffer_size)\n        fprintf(logf, \"  buffer is full: setting pp->state = PP_Error\\n\");\n      fflush(logf);\n    }\n\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    if (NULL != logf) fclose(logf);\n    return MHD_NO;              /* not enough data */\n  }\n\n  /* Compare the two leading dashes and the boundary contents. Capture memcmp results for logging. */\n  int cmp_prefix = memcmp (\"--\",\n                           buf,\n                           2);\n  int cmp_boundary = memcmp (&buf[2],\n                             boundary,\n                             blen);\n  if (NULL != logf)\n  {\n    fprintf(logf, \"memcmp results: cmp_prefix=%d cmp_boundary=%d\\n\", cmp_prefix, cmp_boundary);\n    fflush(logf);\n  }\n\n  if ( (0 != cmp_prefix) ||\n       (0 != cmp_boundary))\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"BRANCH: boundary not found in buffer\\n\");\n      fprintf(logf, \"  pp->state before handling garbage = %d\\n\", (int)pp->state);\n      fflush(logf);\n    }\n\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n      if (NULL != logf)\n      {\n        fprintf(logf, \"  pp->state set to PP_Error (garbage not allowed)\\n\");\n        fflush(logf);\n      }\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n      {\n        if (NULL != logf)\n        {\n          fprintf(logf, \"  no '-' found: skipping entire buffer of %zu bytes\\n\", pp->buffer_pos);\n          fflush(logf);\n        }\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      }\n      else if (dash == buf)\n      {\n        if (NULL != logf)\n        {\n          fprintf(logf, \"  '-' at buf[0]: incrementing ioff by 1\\n\");\n          fflush(logf);\n        }\n        (*ioffptr)++;                         /* at least skip one byte */\n      }\n      else\n      {\n        size_t advance = (size_t) (dash - buf);\n        if (NULL != logf)\n        {\n          fprintf(logf, \"  '-' found at offset %zu: advancing ioff by %zu\\n\", advance, advance);\n          fflush(logf);\n        }\n        (*ioffptr) += advance;  /* skip to first possible boundary */\n      }\n    }\n    if (NULL != logf)\n    {\n      fprintf(logf, \"EXIT find_boundary: returning MHD_NO ioffptr->%zu pp->state=%d\\n\", *ioffptr, (int)pp->state);\n      fclose(logf);\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MATCH: boundary found; removed 2+blen=%zu bytes; new ioff=%zu\\n\", 2 + blen, *ioffptr);\n  }\n\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"SET: pp->skip_rn=RN_Dash pp->state=%d pp->dash_state=%d\\n\", (int)pp->state, (int)pp->dash_state);\n    fprintf(logf, \"EXIT find_boundary: returning MHD_YES\\n\");\n    fclose(logf);\n  }\n  return MHD_YES;\n}\n"
}