{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(\"--\", buf, 2) where the left operand is a null\u2011terminated string literal. Using memcmp to compare the contents of a (null\u2011terminated) string literal against a buffer constitutes using memcmp to compare null\u2011terminated strings and thus violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of find_boundary:\n```c\nstatic int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    return MHD_NO;              /* not enough data */\n  }\n  if ( (0 != memcmp (\"--\",\n                     buf,\n                     2)) ||\n       (0 != memcmp (&buf[2],\n                     boundary,\n                     blen)))\n  {\n    if (pp->state != PP_Init)\n    {\n      /* garbage not allowed */\n      pp->state = PP_Error;\n    }\n    else\n    {\n      /* skip over garbage (RFC 2046, 5.1.1) */\n      dash = memchr (buf,\n                     '-',\n                     pp->buffer_pos);\n      if (NULL == dash)\n        (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n      else if (dash == buf)\n        (*ioffptr)++;                         /* at least skip one byte */\n      else\n        (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n    }\n    return MHD_NO;                            /* expected boundary */\n  }\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified find_boundary code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original find_boundary with it.\n  - Your function must have the exact same signature as find_boundary.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call find_boundary to check logs.\n  - Your function MUST preserve the original logic of find_boundary as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, find_boundary will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of find_boundary as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nfind_boundary (struct MHD_PostProcessor *pp,\n               const char *boundary,\n               size_t blen,\n               size_t *ioffptr,\n               enum PP_State next_state,\n               enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  const char *dash;\n  FILE *log = fopen(\"/tmp/logs/3434.txt\", \"a\");\n\n  if (log)\n  {\n    /* Log entry and key pp fields. boundary may not be NUL-terminated; print up to blen. */\n    fprintf(log, \"ENTER find_boundary: pp=%p blen=%zu buffer_pos=%zu buffer_size=%zu ioff=%zu state=%d\\n\",\n            (void *) pp, blen, pp->buffer_pos, pp->buffer_size, (ioffptr != NULL) ? *ioffptr : (size_t)0, (int) pp->state);\n    /* Print a preview of the buffer (limited to 64 bytes) to avoid overly large logs */\n    {\n      size_t preview = pp->buffer_pos;\n      if (preview > 64U) preview = 64U;\n      fprintf(log, \"buffer_preview(%zu):\\n\", preview);\n      if (preview > 0U)\n      {\n        fwrite(buf, 1, preview, log);\n      }\n      fprintf(log, \"\\n\");\n    }\n    /* Print boundary preview */\n    fprintf(log, \"boundary_preview(blen=%zu):\\n\", blen);\n    if (blen > 0U)\n    {\n      size_t bpreview = blen;\n      if (bpreview > 64U) bpreview = 64U;\n      fwrite(boundary, 1, bpreview, log);\n    }\n    fprintf(log, \"\\n---\\n\");\n  }\n\n  if (pp->buffer_pos < 2 + blen)\n  {\n    if (log)\n      fprintf(log, \"Not enough data: buffer_pos=%zu required=%zu -> returning MHD_NO\\n\",\n              pp->buffer_pos, 2 + blen);\n\n    if (pp->buffer_pos == pp->buffer_size)\n      pp->state = PP_Error;     /* out of memory */\n    /* ++(*ioffptr); */\n    if (log) fclose(log);\n    return MHD_NO;              /* not enough data */\n  }\n\n  /* perform memcmp checks but log their results to help reproduce violation */\n  {\n    int r1 = memcmp (\"--\",\n                     buf,\n                     2);\n    int r2 = memcmp (&buf[2],\n                     boundary,\n                     blen);\n    if (log)\n      fprintf(log, \"memcmp results: memcmp('--', buf, 2)=%d memcmp(&buf[2], boundary, blen)=%d\\n\",\n              r1, r2);\n\n    if ( (0 != r1) ||\n         (0 != r2))\n    {\n      if (log)\n        fprintf(log, \"Boundary mismatch: entering garbage handling (pp->state=%d)\\n\", (int) pp->state);\n\n      if (pp->state != PP_Init)\n      {\n        /* garbage not allowed */\n        pp->state = PP_Error;\n        if (log)\n          fprintf(log, \"Set pp->state = PP_Error due to garbage when not in PP_Init\\n\");\n      }\n      else\n      {\n        /* skip over garbage (RFC 2046, 5.1.1) */\n        dash = memchr (buf,\n                       '-',\n                       pp->buffer_pos);\n        if (log)\n        {\n          if (NULL == dash)\n            fprintf(log, \"memchr: no '-' found in buffer (buffer_pos=%zu)\\n\", pp->buffer_pos);\n          else\n            fprintf(log, \"memchr: found '-' at offset %td\\n\", (dash - buf));\n        }\n\n        if (NULL == dash)\n          (*ioffptr) += pp->buffer_pos;         /* skip entire buffer */\n        else if (dash == buf)\n          (*ioffptr)++;                         /* at least skip one byte */\n        else\n          (*ioffptr) += (size_t) (dash - buf);  /* skip to first possible boundary */\n\n        if (log)\n          fprintf(log, \"After skipping garbage: new ioff=%zu\\n\", *ioffptr);\n      }\n\n      if (log)\n      {\n        fprintf(log, \"Returning MHD_NO (expected boundary)\\n\");\n        fclose(log);\n      }\n      return MHD_NO;                            /* expected boundary */\n    }\n  }\n\n  /* remove boundary from buffer */\n  (*ioffptr) += 2 + blen;\n  /* next: start with headers */\n  pp->skip_rn = RN_Dash;\n  pp->state = next_state;\n  pp->dash_state = next_dash_state;\n\n  if (log)\n  {\n    fprintf(log, \"Boundary matched: advanced ioff by %zu, new ioff=%zu pp->state=%d pp->dash_state=%d\\n\",\n            2 + blen, *ioffptr, (int) pp->state, (int) pp->dash_state);\n    fprintf(log, \"Returning MHD_YES\\n\");\n    fclose(log);\n  }\n\n  return MHD_YES;\n}\n"
}