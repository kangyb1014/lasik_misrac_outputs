{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter declaration 'void *dh_cls' is not const-qualified. If the daemon and any callbacks treat the object pointed-to by dh_cls as read-only (i.e. they do not modify the pointee), then this violates MISRA C 2023 Rule 8.13. The compliant fix is to declare the parameter as 'const void *dh_cls' and propagate the const qualifier to any related callback types and forwarding functions (e.g. MHD_start_daemon_va). If the pointee must be modified, then the current declaration is acceptable but a documented justification is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_start_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_start_daemon:\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_start_daemon code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_start_daemon with it.\n  - Your function must have the exact same signature as MHD_start_daemon.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_start_daemon to check logs.\n  - Your function MUST preserve the original logic of MHD_start_daemon as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_start_daemon will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_start_daemon as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  /* Minimal, safe logging to help reproduce/report the potential\n     MISRA Rule 8.13 scenario. Logs are appended to /tmp/logs/1715.txt.\n     We do not dereference dh_cls; we only record its presence and\n     pointer value so this log is safe and non-invasive. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (logf != NULL)\n    {\n      fprintf(logf, \"Enter MHD_start_daemon: flags=%u port=%u apc=%s apc_cls=%p dh=%s dh_cls=%p\\n\",\n              flags,\n              (unsigned int)port,\n              (apc ? \"present\" : \"NULL\"),\n              apc_cls,\n              (dh ? \"present\" : \"NULL\"),\n              dh_cls);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  va_start (ap,\n            dh_cls);\n\n  /* Log that va_list was started and we are about to forward the call. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (logf != NULL)\n    {\n      fprintf(logf, \"va_start completed; forwarding to MHD_start_daemon_va\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n\n  va_end (ap);\n\n  /* Log the return value so callers/tests can observe the outcome. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (logf != NULL)\n    {\n      fprintf(logf, \"MHD_start_daemon_va returned: daemon=%p\\n\",\n              daemon);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  return daemon;\n}\n"
}