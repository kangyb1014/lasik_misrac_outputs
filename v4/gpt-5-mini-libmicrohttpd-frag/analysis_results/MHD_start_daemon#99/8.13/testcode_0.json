{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function returns a non-const pointer to an object (struct MHD_Daemon *). If the returned daemon pointer refers to internal state that callers must not modify (e.g. an opaque daemon instance managed by the library), then the pointer should be to a const-qualified type (const struct MHD_Daemon *) to prevent inadvertent modification. In that common API case the declaration violates MISRA C 2023 Rule 8.13. If, however, callers are expected to modify the returned structure, then const would be inappropriate and the rule would not apply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_start_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_start_daemon:\n```c\n_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n\n  va_start (ap,\n            dh_cls);\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n  va_end (ap);\n  return daemon;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_start_daemon code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_start_daemon with it.\n  - Your function must have the exact same signature as MHD_start_daemon.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_start_daemon to check logs.\n  - Your function MUST preserve the original logic of MHD_start_daemon as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_start_daemon will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_start_daemon as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Daemon *\nMHD_start_daemon (unsigned int flags,\n                  uint16_t port,\n                  MHD_AcceptPolicyCallback apc,\n                  void *apc_cls,\n                  MHD_AccessHandlerCallback dh,\n                  void *dh_cls,\n                  ...)\n{\n  struct MHD_Daemon *daemon;\n  va_list ap;\n  /* Logging probe: append control flow and key state to the log file. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_start_daemon: entry\\n\");\n      fprintf(log, \"  flags=0x%X, port=%u\\n\", flags, (unsigned)port);\n      /* apc and dh are callbacks (function pointers). To avoid undefined\n         conversions between function pointers and data pointers we only\n         log whether they are NULL or not. */\n      fprintf(log, \"  apc=%s, dh=%s\\n\", apc ? \"non-NULL\" : \"NULL\", dh ? \"non-NULL\" : \"NULL\");\n      fprintf(log, \"  apc_cls=%p, dh_cls=%p\\n\", apc_cls, dh_cls);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  va_start (ap,\n            dh_cls);\n\n  /* Log that va_list has been started. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_start_daemon: va_start called\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  daemon = MHD_start_daemon_va (flags,\n                                port,\n                                apc,\n                                apc_cls,\n                                dh,\n                                dh_cls,\n                                ap);\n\n  /* Record the return value from the va variant so callers/analysts can see\n     whether an internal (opaque) pointer was returned. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_start_daemon: MHD_start_daemon_va returned %p\\n\", (void *) daemon);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  va_end (ap);\n\n  /* Final log entry before return. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_start_daemon: va_end called, returning %p\\n\", (void *) daemon);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return daemon;\n}\n"
}