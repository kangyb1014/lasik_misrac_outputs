{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member param->name is assigned from the function parameter thread_name which has type const char *. If param->name is declared as a non-const pointer (e.g. char *name), this assignment discards the const qualifier and makes a non-const pointer refer to const-qualified data. That violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_named_thread_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/205.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_named_thread_:\n```c\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if ((res == 0) && (0 != stack_size) )\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n    return 0;\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    return 0;\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_named_thread_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_named_thread_ with it.\n  - Your function must have the exact same signature as MHD_create_named_thread_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_named_thread_ to check logs.\n  - Your function MUST preserve the original logic of MHD_create_named_thread_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_named_thread_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_named_thread_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n  /* Logging probe file. We append so multiple tests accumulate evidence. */\n  FILE *log = fopen(\"/tmp/logs/205.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_create_named_thread_: handle_id=%p thread_name=%p stack_size=%zu start_routine=%p arg=%p\\n\",\n            (const void *) handle_id,\n            (const void *) thread_name,\n            stack_size,\n            (void *) start_routine,\n            arg);\n    fflush(log);\n  }\n\n#if defined(MHD_USE_THREAD_ATTR_SETNAME)\n  int res;\n  pthread_attr_t attr;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  res = pthread_attr_init (&attr);\n  if (log)\n  {\n    fprintf(log, \"pthread_attr_init -> %d\\n\", res);\n    fflush(log);\n  }\n  if (0 == res)\n  {\n#if defined(HAVE_PTHREAD_ATTR_SETNAME_NP_NETBSD)\n    /* NetBSD uses 3 arguments: second argument is string in printf-like format,\n     *                          third argument is single argument for printf;\n     * OSF1 uses 3 arguments too, but last one always must be zero (NULL).\n     * MHD doesn't use '%' in thread names, so both forms are used in same way.\n     */\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name,\n                                   0);\n    if (log)\n    {\n      fprintf(log, \"pthread_attr_setname_np (netbsd) called with name=%p\\n\", (const void *) thread_name);\n      fflush(log);\n    }\n#elif defined(HAVE_PTHREAD_ATTR_SETNAME_NP_IBMI)\n    res = pthread_attr_setname_np (&attr,\n                                   thread_name);\n    if (log)\n    {\n      fprintf(log, \"pthread_attr_setname_np (ibmi) called with name=%p\\n\", (const void *) thread_name);\n      fflush(log);\n    }\n#else\n#error No pthread_attr_setname_np() function.\n#endif\n    if (log)\n    {\n      fprintf(log, \"after setname res=%d\\n\", res);\n      fflush(log);\n    }\n    if ((res == 0) && (0 != stack_size) )\n    {\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n      if (log)\n      {\n        fprintf(log, \"pthread_attr_setstacksize -> %d stack_size=%zu\\n\", res, stack_size);\n        fflush(log);\n      }\n    }\n    if (0 == res)\n      res = pthread_create (new_tid_ptr,\n                            &attr,\n                            start_routine,\n                            arg);\n    if (log)\n    {\n      fprintf(log, \"pthread_create -> %d new_tid_ptr=%p\\n\", res, (void *) new_tid_ptr);\n      fflush(log);\n    }\n    pthread_attr_destroy (&attr);\n  }\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n    if (log)\n    {\n      fprintf(log, \"error path: errno set to %d, thread handle marked invalid\\n\", res);\n      fflush(log);\n    }\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  if (log) fclose(log);\n  return ! res;\n#else  /* ! MHD_USE_THREAD_ATTR_SETNAME */\n  struct MHD_named_helper_param_ *param;\n\n  if (NULL == thread_name)\n  {\n    if (log)\n    {\n      fprintf(log, \"invalid input: thread_name is NULL -> errno=EINVAL, returning 0\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (log)\n  {\n    fprintf(log, \"malloc for param -> %p\\n\", (void *) param);\n    fflush(log);\n  }\n  if (NULL == param)\n  {\n    if (log) fclose(log);\n    return 0;\n  }\n\n  param->start_routine = start_routine;\n  param->arg = arg;\n  /* Probe: log assignment of name (this is the potential const-discard point) */\n  param->name = thread_name;\n  if (log)\n  {\n    fprintf(log, \"Assigned param->name = %p (thread_name)\\n\", (const void *) thread_name);\n    if (thread_name)\n      fprintf(log, \"Assigned name string: '%s'\\n\", thread_name);\n    fflush(log);\n  }\n\n  /* Set thread name in thread itself to avoid problems with\n   * threads which terminated before name is set in other thread.\n   */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            &named_thread_starter,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    if (log)\n    {\n      fprintf(log, \"MHD_create_thread_ failed: errno=%d; freeing param=%p and restoring errno\\n\", err_num, (void *) param);\n      fflush(log);\n    }\n    free (param);\n    errno = err_num;\n    if (log) fclose(log);\n    return 0;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"created thread successfully with param=%p name=%p\\n\", (void *) param, (const void *) param->name);\n    fflush(log);\n    fclose(log);\n  }\n\n  return ! 0;\n#endif /* ! MHD_USE_THREAD_ATTR_SETNAME */\n}\n"
}