{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls free(pos->value) but pos->value is used only for storage/transfer and not modified in this routine. Declaring the pointer in the struct without const means a pointer to a non-const type is used where a pointer to a const-qualified type would be preferable. Under MISRA C:2023 Rule 8.13 the pointer should be const-qualified when possible, so leaving pos->value non-const is a violation. (If the implementation actually needs to modify the pointed-to object elsewhere, keep it non-const; otherwise change the declaration to a const-qualified pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1055.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_response:\n```c\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_destroy_response code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_destroy_response with it.\n  - Your function must have the exact same signature as MHD_destroy_response.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_destroy_response to check logs.\n  - Your function MUST preserve the original logic of MHD_destroy_response as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_destroy_response will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_destroy_response as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  /* Local forward declarations for logging functions/FILE type to avoid\n     requiring additional includes in the surrounding translation unit. */\n  typedef struct MHD_LOG_FILE FILE;\n  extern FILE *fopen (const char *filename, const char *mode);\n  extern int fprintf (FILE *stream, const char *format, ...);\n  extern int fclose (FILE *stream);\n\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Log helper: try to append to the log file. Keep failure silent so\n     original behavior is preserved. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: entered with response=%p\\n\", (void *)response);\n      fclose(log);\n    }\n  }\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  /* Log before changing the reference count */\n  {\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: locked mutex, reference_count(before)=%d\\n\",\n              (int)response->reference_count);\n      fclose(log);\n    }\n  }\n\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    /* Log the early return and the remaining reference count */\n    {\n      FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MHD_destroy_response: decremented reference_count, now=%d, returning early\\n\",\n                (int)response->reference_count);\n        fclose(log);\n      }\n    }\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  /* Log that we will proceed to destroy the response */\n  {\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: reference_count reached 0, destroying response %p\\n\", (void *)response);\n      fclose(log);\n    }\n  }\n\n  if (NULL != response->crfc)\n  {\n    /* Log the callback invocation */\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: calling crfc callback with crc_cls=%p\\n\", (void *)response->crc_cls);\n      fclose(log);\n    }\n    response->crfc (response->crc_cls);\n  }\n\n  if (NULL != response->data_iov)\n  {\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: freeing data_iov=%p\\n\", (void *)response->data_iov);\n      fclose(log);\n    }\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n\n    /* Log header/node details prior to freeing. Avoid dereferencing header/value\n       contents to prevent undefined behaviour; just log pointer values and NULLness. */\n    {\n      FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MHD_destroy_response: freeing header node=%p, header=%p, value=%p, next=%p\\n\",\n                (void *)pos, (void *)pos->header, (void *)pos->value, (void *)pos->next);\n        fclose(log);\n      }\n    }\n\n    free (pos->header);\n\n    /* Log the specific free of pos->value which is relevant for the\n       Rule 8.13 violation scenario (pointer to non-const). */\n    {\n      FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n      if (log)\n      {\n        if (pos->value == NULL)\n        {\n          fprintf(log, \"MHD_destroy_response: pos->value is NULL, calling free(NULL) is a no-op\\n\");\n        }\n        else\n        {\n          fprintf(log, \"MHD_destroy_response: about to free pos->value (%p) -- used for storage/transfer only; check if should be const-qualified\\n\",\n                  (void *)pos->value);\n        }\n        fclose(log);\n      }\n    }\n\n    free (pos->value);\n    free (pos);\n  }\n\n  /* Final free of the response object */\n  {\n    FILE *log = fopen(\"/tmp/logs/1055.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_destroy_response: freeing response object %p\\n\", (void *)response);\n      fclose(log);\n    }\n  }\n  free (response);\n}\n"
}