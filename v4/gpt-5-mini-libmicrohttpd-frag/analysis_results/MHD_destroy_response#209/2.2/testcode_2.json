{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe NULL-check guarding free(response->data_iov) is redundant: the C standard defines free(NULL) as a no-op, so replacing the if-block with an unconditional call free(response->data_iov); would not change program behaviour. Therefore the conditional check is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1058.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_response:\n```c\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_destroy_response code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_destroy_response with it.\n  - Your function must have the exact same signature as MHD_destroy_response.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_destroy_response to check logs.\n  - Your function MUST preserve the original logic of MHD_destroy_response as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_destroy_response will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_destroy_response as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  /* Minimal local declarations to use stdio-like logging without including headers */\n  typedef struct _mhd_file FILE;\n  extern FILE *fopen (const char *path, const char *mode);\n  extern int fprintf (FILE *stream, const char *format, ...);\n  extern int fclose (FILE *stream);\n\n  FILE *log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_destroy_response(response=%p)\\n\", (void *) response);\n    fclose(log);\n  }\n\n  if (NULL == response)\n  {\n    log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"EXIT: response is NULL - returning\\n\");\n      fclose(log);\n    }\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n\n  /* Log reference count before and after decrement */\n  log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"Before decrement: response=%p, reference_count=%d\\n\",\n            (void *) response, (int) response->reference_count);\n    fclose(log);\n  }\n\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Reference count still non-zero after decrement: response=%p, reference_count=%d - returning\\n\",\n              (void *) response, (int) response->reference_count);\n      fclose(log);\n    }\n    return;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n\n  /* Log the presence of crfc callback */\n  log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"About to call crfc?: response=%p, crfc=%p, crc_cls=%p\\n\",\n            (void *) response, (void *) response->crfc, (void *) response->crc_cls);\n    fclose(log);\n  }\n\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  /* Log data_iov pointer value and whether free will be invoked */\n  log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"data_iov check: response=%p, data_iov=%p\\n\",\n            (void *) response, (void *) response->data_iov);\n    fclose(log);\n  }\n\n  if (NULL != response->data_iov)\n  {\n    log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Calling free(response->data_iov) for response=%p, data_iov=%p\\n\",\n              (void *) response, (void *) response->data_iov);\n      fclose(log);\n    }\n    free (response->data_iov);\n  }\n  else\n  {\n    /* Specifically log the branch where data_iov is NULL to provide evidence that\n       the conditional is redundant w.r.t. free(NULL) being a no-op per the C standard. */\n    log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Skipped free(response->data_iov) because data_iov is NULL for response=%p\\n\",\n              (void *) response);\n      fclose(log);\n    }\n  }\n\n  /* Walk and free headers, logging each step before freeing */\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n\n    log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Freeing header node=%p: header=%p, value=%p\\n\",\n              (void *) pos, (void *) pos->header, (void *) pos->value);\n      fclose(log);\n    }\n\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n\n  /* Log final free of response */\n  log = fopen(\"/tmp/logs/1058.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"Calling free(response) for response=%p - end of MHD_destroy_response\\n\",\n            (void *) response);\n    fclose(log);\n  }\n\n  free (response);\n}\n"
}