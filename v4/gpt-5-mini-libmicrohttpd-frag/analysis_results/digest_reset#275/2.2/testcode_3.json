{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro is defined as a debug-only check that expands to nothing (e.g. becomes a no-op when assertions are disabled / NDEBUG is set), then the statement mhd_assert(! da->hashing); is executed only in debug builds and has no observable effect in release builds. Removing that statement (or compiling with assertions disabled) would not change the program behaviour in the release configuration, so the operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_reset:\n```c\n_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (! da->hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_MD5_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    mhd_assert (! da->ready_for_hashing);\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    mhd_assert (da->ready_for_hashing);\n#endif /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    mhd_assert (! da->ready_for_hashing);\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif\n    mhd_assert (0); /* May not happen, bad algorithm */\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_reset code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_reset with it.\n  - Your function must have the exact same signature as digest_reset.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_reset to check logs.\n  - Your function MUST preserve the original logic of digest_reset as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_reset will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_reset as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ndigest_reset (struct DigestAlgorithm *da)\n{\n  /* Logging probe: capture entry and key state for reproducing Rule 2.2 scenario */\n  FILE *mhd_log_file = fopen(\"/tmp/logs/2658.txt\", \"a\");\n  if (mhd_log_file)\n  {\n    fprintf(mhd_log_file, \"digest_reset: enter da=%p uninitialised=%d algo_selected=%d hashing=%d algo=%d ready_for_hashing=%d\\n\",\n            (void *)da,\n            (int) da->uninitialised,\n            (int) da->algo_selected,\n            (int) da->hashing,\n            (int) da->algo,\n            (int) da->ready_for_hashing);\n    fflush(mhd_log_file);\n  }\n\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: about to assert !da->uninitialised (value=%d)\\n\", (int)!da->uninitialised);\n  mhd_assert (! da->uninitialised);\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: returned from assert !da->uninitialised\\n\");\n\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: about to assert da->algo_selected (value=%d)\\n\", (int)da->algo_selected);\n  mhd_assert (da->algo_selected);\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: returned from assert da->algo_selected\\n\");\n\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: about to assert !da->hashing (value=%d)\\n\", (int)!da->hashing);\n  mhd_assert (! da->hashing);\n  if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: returned from assert !da->hashing\\n\");\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: about to assert !da->ready_for_hashing (value=%d)\\n\", (int)!da->ready_for_hashing);\n    mhd_assert (! da->ready_for_hashing);\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: returned from assert !da->ready_for_hashing\\n\");\n#else  /* ! MHD_MD5_HAS_FINISH */\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: about to assert da->ready_for_hashing (value=%d)\\n\", (int)da->ready_for_hashing);\n    mhd_assert (da->ready_for_hashing);\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: returned from assert da->ready_for_hashing\\n\");\n#endif /* ! MHD_MD5_HAS_FINISH */\n\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: calling MHD_MD5_reset\\n\");\n    MHD_MD5_reset (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: set ready_for_hashing = true (debug)\\n\");\n#endif /* _DEBUG */\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: MD5 branch: exit\\n\");\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: about to assert !da->ready_for_hashing (value=%d)\\n\", (int)!da->ready_for_hashing);\n    mhd_assert (! da->ready_for_hashing);\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: returned from assert !da->ready_for_hashing\\n\");\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: about to assert da->ready_for_hashing (value=%d)\\n\", (int)da->ready_for_hashing);\n    mhd_assert (da->ready_for_hashing);\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: returned from assert da->ready_for_hashing\\n\");\n#endif /* ! MHD_SHA256_HAS_FINISH */\n\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: calling MHD_SHA256_reset\\n\");\n    MHD_SHA256_reset (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: set ready_for_hashing = true (debug)\\n\");\n#endif /* _DEBUG */\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA256 branch: exit\\n\");\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA512_256 branch: about to assert !da->ready_for_hashing (value=%d)\\n\", (int)!da->ready_for_hashing);\n    mhd_assert (! da->ready_for_hashing);\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA512_256 branch: returned from assert !da->ready_for_hashing\\n\");\n\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA512_256 branch: calling MHD_SHA512_256_init\\n\");\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA512_256 branch: set ready_for_hashing = true (debug)\\n\");\n#endif\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: SHA512_256 branch: exit\\n\");\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: default branch: set ready_for_hashing = false (debug)\\n\");\n#endif\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: default branch: about to assert(0) - bad algorithm\\n\");\n    mhd_assert (0); /* May not happen, bad algorithm */\n    if (mhd_log_file) fprintf(mhd_log_file, \"digest_reset: default branch: returned from assert(0)\\n\");\n  }\n\n  if (mhd_log_file) {\n    fprintf(mhd_log_file, \"digest_reset: exit da=%p ready_for_hashing=%d\\n\", (void *)da, (int) da->ready_for_hashing);\n    fclose(mhd_log_file);\n  }\n}\n"
}