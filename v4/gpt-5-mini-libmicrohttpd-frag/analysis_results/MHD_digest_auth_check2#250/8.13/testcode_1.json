{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression _(\"Wrong 'algo' value, API violation\") typically expands to the gettext-like macro/function returning char * (non-const). That non-const pointer is then passed to MHD_PANIC. A string literal here could and should be treated as const char *, so using a non-const pointer (from _ or the MHD_PANIC parameter) violates MISRA C 2023 Rule 8.13. If either the _ macro/function or the MHD_PANIC parameter type were changed to use const char * (or both), the violation would be resolved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_check2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3205.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check2:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_check2 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_check2 with it.\n  - Your function must have the exact same signature as MHD_digest_auth_check2.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_check2 to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_check2 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_check2 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_check2 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n  FILE *log = NULL;\n\n  /* Open log file for append. Keep this non-fatal so function behavior\n     remains unchanged if logging cannot be performed. */\n  log = fopen(\"/tmp/logs/3205.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"ENTER: MHD_digest_auth_check2: connection=%p realm=%s username=%s password=%p nonce_timeout=%u algo=%d\\n\",\n              (void *) connection,\n              (realm ? realm : \"(null)\"),\n              (username ? username : \"(null)\"),\n              (void *) password,\n              nonce_timeout,\n              (int) algo);\n      fflush(log);\n    }\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    {\n      malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n      if (log)\n        {\n          fprintf(log, \"BRANCH: AUTO -> malgo3=%d\\n\", (int) malgo3);\n          fflush(log);\n        }\n    }\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    {\n      malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n      if (log)\n        {\n          fprintf(log, \"BRANCH: MD5 -> malgo3=%d\\n\", (int) malgo3);\n          fflush(log);\n        }\n    }\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    {\n      malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n      if (log)\n        {\n          fprintf(log, \"BRANCH: SHA256 -> malgo3=%d\\n\", (int) malgo3);\n          fflush(log);\n        }\n    }\n  else\n    {\n      /* Capture the API-violation path and the exact message passed to MHD_PANIC.\n         This reproduces the scenario described: the translation function/macro\n         _() typically returns a non-const char* which is then passed to\n         MHD_PANIC. We log the pointer value and the string content so other\n         agents can inspect the evidence. */\n      char *panic_msg = _ (\"Wrong 'algo' value, API violation\");\n      if (log)\n        {\n          fprintf(log, \"BRANCH: INVALID ALGO (%d) -> about to call MHD_PANIC with message_ptr=%p message='%s'\\n\",\n                  (int) algo,\n                  (void *) panic_msg,\n                  (panic_msg ? panic_msg : \"(null)\"));\n          fflush(log);\n        }\n      /* Preserve original behavior: call MHD_PANIC with the same message. */\n      MHD_PANIC (panic_msg);\n    }\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (log)\n    {\n      fprintf(log, \"CALL: MHD_digest_auth_check3 returned %d\\n\", (int) res);\n      fflush(log);\n    }\n\n  if (MHD_DAUTH_OK == res)\n    {\n      if (log)\n        {\n          fprintf(log, \"EXIT: returning MHD_YES\\n\");\n          fclose(log);\n        }\n      return MHD_YES;\n    }\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    {\n      if (log)\n        {\n          fprintf(log, \"EXIT: returning MHD_INVALID_NONCE\\n\");\n          fclose(log);\n        }\n      return MHD_INVALID_NONCE;\n    }\n\n  if (log)\n    {\n      fprintf(log, \"EXIT: returning MHD_NO\\n\");\n      fclose(log);\n    }\n  return MHD_NO;\n\n}\n"
}