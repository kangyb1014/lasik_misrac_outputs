{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code computes copy_size = response->data_iovcnt * sizeof(MHD_iovec_) and then blindly does malloc(copy_size) and memcpy(dest, response->data_iov, copy_size) without validating response->data_iovcnt or the multiplication result. If response->data_iovcnt is malformed (too large, negative when treated as signed then converted, or simply larger than the actual number of elements pointed to by response->data_iov) this can cause memcpy to read from or write to memory beyond the bounds of the source or destination buffers. A concrete example: if response->data_iovcnt > SIZE_MAX / sizeof(MHD_iovec_), the multiplication can overflow, or if response->data_iovcnt is larger than the real length of the response->data_iov array, memcpy will read past the source buffer \u2014 both cases violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_ready_normal_body code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_ready_normal_body with it.\n  - Your function must have the exact same signature as try_ready_normal_body.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_ready_normal_body to check logs.\n  - Your function MUST preserve the original logic of try_ready_normal_body as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_ready_normal_body will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n  FILE *logf = NULL;\n\n  /* Open log file for append; tolerate failures to avoid changing behavior */\n  logf = fopen(\"/tmp/logs/3113.txt\", \"a\");\n  if (logf)\n    fprintf(logf, \"ENTER try_ready_normal_body: connection=%p\\n\", (void *) connection);\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if (logf)\n  {\n    fprintf(logf, \"response=%p total_size=%llu rsp_write_position=%llu\\n\",\n            (void *) response,\n            (unsigned long long) response->total_size,\n            (unsigned long long) connection->rp.rsp_write_position);\n  }\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Early return: zero-byte or already complete (total_size==0 or rsp_write_position==total_size)\\n\");\n      fclose(logf);\n    }\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n    size_t iovcnt = (size_t) response->data_iovcnt;\n\n    if (logf)\n    {\n      fprintf(logf, \"response->data_iov != NULL: data_iov=%p data_iovcnt=%zu sizeof(MHD_iovec_)=%zu\\n\",\n              (void *) response->data_iov,\n              iovcnt,\n              sizeof(MHD_iovec_));\n    }\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Returning YES because connection->rp.resp_iov.iov already set: %p\\n\",\n                (void *) connection->rp.resp_iov.iov);\n        fclose(logf);\n      }\n      return MHD_YES;\n    }\n\n    /* Compute copy size exactly as original code does, but log potential overflow */\n    if (logf)\n    {\n      int overflow = 0;\n      if (iovcnt != 0 && iovcnt > ((size_t) -1) / sizeof(MHD_iovec_))\n        overflow = 1;\n      fprintf(logf, \"Pre-copy check: iovcnt=%zu potential_overflow=%d\\n\", iovcnt, overflow);\n    }\n\n    copy_size = iovcnt * sizeof(MHD_iovec_);\n\n    if (logf)\n      fprintf(logf, \"Allocating %zu bytes for resp_iov.iov\\n\", copy_size);\n\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Allocation failed: resp_iov.iov is NULL\\n\");\n        fclose(logf);\n      }\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n\n    if (logf)\n      fprintf(logf, \"memcpy dest=%p src=%p size=%zu\\n\",\n              (void *) connection->rp.resp_iov.iov,\n              (void *) response->data_iov,\n              copy_size);\n\n    /* Preserve original behavior: do the memcpy even if we logged a potential overflow. */\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n\n    if (logf)\n      fprintf(logf, \"memcpy completed; setting resp_iov.cnt=%zu\\n\", iovcnt);\n\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n\n    if (logf)\n    {\n      fprintf(logf, \"Returning YES after preparing resp_iov\\n\");\n      fclose(logf);\n    }\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"No CRC: response->crc == NULL, returning YES\\n\");\n      fclose(logf);\n    }\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Response already ready: data_start=%llu data_size=%zu rsp_write_position=%llu\\n\",\n              (unsigned long long) response->data_start,\n              response->data_size,\n              (unsigned long long) connection->rp.rsp_write_position);\n      fclose(logf);\n    }\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    if (logf)\n    {\n      fprintf(logf, \"Using sendfile sender; returning YES\\n\");\n      fclose(logf);\n    }\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (logf)\n    fprintf(logf, \"CRC call returned %zd\\n\", ret);\n\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"CRC indicated error or end: ret=%zd; updated total_size=%llu\\n\", ret, (unsigned long long) response->total_size);\n      fclose(logf);\n    }\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (logf)\n    fprintf(logf, \"Updated response data_start=%llu data_size=%zu\\n\",\n            (unsigned long long) response->data_start,\n            response->data_size);\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"CRC returned 0 bytes: setting state MHD_CONNECTION_NORMAL_BODY_UNREADY and returning NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n  if (logf)\n  {\n    fprintf(logf, \"Returning YES at end of try_ready_normal_body\\n\");\n    fclose(logf);\n  }\n  return MHD_YES;\n}\n"
}