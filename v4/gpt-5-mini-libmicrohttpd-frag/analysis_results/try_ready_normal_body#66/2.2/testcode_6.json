{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'mhd_assert(connection->rp.props.send_reply_body);' is a diagnostic assertion macro that typically expands to code only in debug builds and to nothing in release builds. When the asserted condition is true the call has no effect, so its execution can be removed without changing program behaviour \u2014 i.e. it constitutes dead code per MISRA C 2023 Rule 2.2. If the macro is compiled out (no-op) in some configurations the operation is effectively dead in the builds where it is present only for diagnostics.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_normal_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3118.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_ready_normal_body:\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_ready_normal_body code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_ready_normal_body with it.\n  - Your function must have the exact same signature as try_ready_normal_body.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_ready_normal_body to check logs.\n  - Your function MUST preserve the original logic of try_ready_normal_body as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_ready_normal_body will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_ready_normal_body as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n\n  /* Probe: log entry and key state to help reproduce/report the assertion-related scenario. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body ENTER: connection=%p response=%p send_reply_body=%d total_size=%lld rsp_write_position=%lld\\n\",\n              (void *) connection,\n              (void *) response,\n              (int) connection->rp.props.send_reply_body,\n              (long long) response->total_size,\n              (long long) connection->rp.rsp_write_position);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: early return MHD_YES (0-byte or already written). total_size=%lld rsp_write_position=%lld\\n\",\n              (long long) response->total_size,\n              (long long) connection->rp.rsp_write_position);\n      fclose(log);\n    }\n    return MHD_YES;  /* 0-byte response is always ready */\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"try_ready_normal_body: resp_iov already set, returning MHD_YES\\n\");\n        fclose(log);\n      }\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n\n    FILE *log_alloc = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log_alloc)\n    {\n      fprintf(log_alloc, \"try_ready_normal_body: allocating resp_iov.iov copy_size=%zu\\n\", copy_size);\n      fclose(log_alloc);\n    }\n\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      {\n        FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"try_ready_normal_body: allocation failed for resp_iov.iov, closing connection (out of memory)\\n\");\n          fclose(log);\n        }\n      }\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"try_ready_normal_body: copied data_iov -> resp_iov (cnt=%zu) returning MHD_YES\\n\",\n                connection->rp.resp_iov.cnt);\n        fclose(log);\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: response->crc == NULL, returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: response already ready (data_start=%lld data_size=%zu rsp_write_position=%lld) returning MHD_YES\\n\",\n              (long long) response->data_start,\n              response->data_size,\n              (long long) connection->rp.rsp_write_position);\n      fclose(log);\n    }\n    return MHD_YES; /* response already ready */\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: using sendfile resp_sender, returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  {\n    size_t to_check_size = (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                             response->total_size\n                                             - connection->rp.rsp_write_position);\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: calling crc with cls=%p pos=%lld data_ptr=%p to_check_size=%zu\\n\",\n              (void *) response->crc_cls,\n              (long long) connection->rp.rsp_write_position,\n              (void *) response->data,\n              to_check_size);\n      fclose(log);\n    }\n  }\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: crc returned ret=%lld\\n\", (long long) ret);\n      fclose(log);\n    }\n  }\n\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n    {\n      FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"try_ready_normal_body: crc signaled end-of-stream (ret=%lld), closing connection with COMPLETED_OK\\n\", (long long) ret);\n        fclose(log);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"try_ready_normal_body: crc error (ret=%lld), closing connection (application reported error generating data)\\n\", (long long) ret);\n        fclose(log);\n      }\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    }\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    {\n      FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"try_ready_normal_body: crc returned 0 (no data), set state=MHD_CONNECTION_NORMAL_BODY_UNREADY, returning MHD_NO\\n\");\n        fclose(log);\n      }\n    }\n    return MHD_NO;\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/3118.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_ready_normal_body: data available after crc (data_start=%lld data_size=%zu) returning MHD_YES\\n\",\n              (long long) response->data_start,\n              response->data_size);\n      fclose(log);\n    }\n  }\n  return MHD_YES;\n}\n"
}