{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a translated string via _(\"...\") and the daemon pointer to MHD_DLOG. If the _ macro/gettext and/or MHD_DLOG are declared to use non-const char * (a common case for gettext returning char * and logging APIs taking char *), then an immutable string literal and a parameter that is not modified are being referenced by non-const pointers. Per MISRA C 2023 Rule 8.13 both should use const-qualified types (const char * and/or a pointer-to-const daemon) whenever possible. Therefore, if _() or MHD_DLOG use non-const pointer types, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_add_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2105.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_add_header:\n```c\nstatic enum MHD_Result\nconnection_add_header (void *cls,\n                       const char *key,\n                       size_t key_size,\n                       const char *value,\n                       size_t value_size,\n                       enum MHD_ValueKind kind)\n{\n  struct MHD_Connection *connection = (struct MHD_Connection *) cls;\n  if (MHD_NO ==\n      MHD_set_connection_value_n (connection,\n                                  kind,\n                                  key,\n                                  key_size,\n                                  value,\n                                  value_size))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                    ERR_MSG_REQUEST_TOO_BIG);\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_add_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_add_header with it.\n  - Your function must have the exact same signature as connection_add_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_add_header to check logs.\n  - Your function MUST preserve the original logic of connection_add_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_add_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_add_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nconnection_add_header (void *cls,\n                       const char *key,\n                       size_t key_size,\n                       const char *value,\n                       size_t value_size,\n                       enum MHD_ValueKind kind)\n{\n  struct MHD_Connection *connection = (struct MHD_Connection *) cls;\n  /* Probe logging: record entry and parameter/state info to help reproduce\n     the scenario described in the violation report. Logs are appended to\n     /tmp/logs/2105.txt. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2105.txt\", \"a\");\n    if (log != NULL)\n    {\n      void *daemon_ptr = NULL;\n      if (connection)\n      {\n        /* connection->daemon is expected to be a pointer type in usual\n           libmicrohttpd implementations; cast to void* for printing. If it\n           is not a pointer type this cast will still compile in C but may\n           be implementation-defined. The purpose is to capture the value\n           passed to MHD_DLOG in the original code path. */\n        daemon_ptr = (void *) connection->daemon;\n      }\n\n      fprintf(log, \"[connection_add_header] ENTER: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu daemon=%p\\n\",\n              (void *) connection,\n              (int) kind,\n              (const void *) key,\n              key_size,\n              (const void *) value,\n              value_size,\n              daemon_ptr);\n\n      /* Print a safe prefix of key (key may not be NUL-terminated). */\n      if (key != NULL && key_size > 0)\n      {\n        size_t lim = key_size < 256u ? key_size : 256u;\n        fprintf(log, \"[connection_add_header] key (prefix up to %zu): '\\n\", lim);\n        for (size_t i = 0; i < lim; ++i)\n        {\n          unsigned char c = (unsigned char) key[i];\n          if (c == '\\n')\n            fprintf(log, \"\\\\n\");\n          else if (c == '\\r')\n            fprintf(log, \"\\\\r\");\n          else if (c >= 32 && c < 127)\n            fputc(c, log);\n          else\n            fprintf(log, \"\\\\x%02x\", c);\n        }\n        fprintf(log, \"'\\n\");\n      }\n\n      /* Print a safe prefix of value (value may not be NUL-terminated). */\n      if (value != NULL && value_size > 0)\n      {\n        size_t lim = value_size < 256u ? value_size : 256u;\n        fprintf(log, \"[connection_add_header] value (prefix up to %zu): '\\n\", lim);\n        for (size_t i = 0; i < lim; ++i)\n        {\n          unsigned char c = (unsigned char) value[i];\n          if (c == '\\n')\n            fprintf(log, \"\\\\n\");\n          else if (c == '\\r')\n            fprintf(log, \"\\\\r\");\n          else if (c >= 32 && c < 127)\n            fputc(c, log);\n          else\n            fprintf(log, \"\\\\x%02x\", c);\n        }\n        fprintf(log, \"'\\n\");\n      }\n\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  if (MHD_NO ==\n      MHD_set_connection_value_n (connection,\n                                  kind,\n                                  key,\n                                  key_size,\n                                  value,\n                                  value_size))\n  {\n    /* Log the failure path before performing the original actions so the\n       test harness can observe the exact pointer values and strings used\n       when the code attempts to call MHD_DLOG with the daemon pointer and\n       a translated string. */\n    FILE *log = fopen(\"/tmp/logs/2105.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[connection_add_header] MHD_set_connection_value_n returned MHD_NO\\n\");\n      fprintf(log, \"[connection_add_header] About to call MHD_DLOG (if enabled) and transmit_error_response_static.\\n\");\n      fflush(log);\n      fclose(log);\n    }\n\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in pool to allocate header record!\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE,\n                                    ERR_MSG_REQUEST_TOO_BIG);\n    return MHD_NO;\n  }\n\n  /* Log success path so tests can verify both outcomes. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2105.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"[connection_add_header] MHD_set_connection_value_n succeeded, returning MHD_YES\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return MHD_YES;\n}\n"
}