{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'str' is declared as 'const char *'. If 'pbauth->token68.str' is declared as a non-const pointer (e.g. 'char *token68.str;'), then the assignment pbauth->token68.str = str + token68_start; discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. If, however, token68.str is declared as 'const char *', there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_bauth_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2905.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_bauth_params:\n```c\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n        return false;  /* Binary zero is not allowed */\n      if ((',' == str[i]) || (';' == str[i]))\n        return false;  /* Only single token68 is allowed */\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n      return false;\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_bauth_params code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_bauth_params with it.\n  - Your function must have the exact same signature as parse_bauth_params.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_bauth_params to check logs.\n  - Your function MUST preserve the original logic of parse_bauth_params as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_bauth_params will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_bauth_params as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n  FILE *log = fopen(\"/tmp/logs/2905.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"parse_bauth_params: entered. str=%p str_len=%zu pbauth=%p\\n\",\n            (const void *)str, str_len, (void *)pbauth);\n    fflush(log);\n  }\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (log)\n    fprintf(log, \"parse_bauth_params: after leading whitespace skip i=%zu\\n\", i);\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n      {\n        if (log)\n        {\n          fprintf(log, \"parse_bauth_params: binary zero byte found at pos %zu -> returning false\\n\", i);\n          fclose(log);\n        }\n        return false;  /* Binary zero is not allowed */\n      }\n      if ((',' == str[i]) || (';' == str[i]))\n      {\n        if (log)\n        {\n          fprintf(log, \"parse_bauth_params: delimiter ('%c') found at pos %zu -> returning false\\n\", str[i], i);\n          fclose(log);\n        }\n        return false;  /* Only single token68 is allowed */\n      }\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    if (log)\n    {\n      /* Log token68 position and a printable approximation of the token (safe up to token68_len) */\n      fprintf(log, \"parse_bauth_params: token68_start=%zu token68_len=%zu token_preview=\\\"\", token68_start, token68_len);\n      /* Print at most 256 characters to avoid huge log entries; replace non-printable with '?'. */\n      {\n        size_t j;\n        size_t limit = token68_len;\n        if (limit > 256u)\n          limit = 256u;\n        for (j = 0; j < limit; ++j)\n        {\n          unsigned char c = (unsigned char) str[token68_start + j];\n          if (c >= 32u && c < 127u)\n            fputc((int)c, log);\n          else\n            fputc('?', log);\n        }\n        if (token68_len > limit)\n          fprintf(log, \"... (truncated %zu bytes)\", token68_len - limit);\n      }\n      fprintf(log, \"\\\"\\n\");\n      fflush(log);\n    }\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n    {\n      if (log)\n      {\n        fprintf(log, \"parse_bauth_params: trailing garbage after token at pos %zu expected end %zu -> returning false\\n\", i, str_len);\n        fclose(log);\n      }\n      return false;\n    }\n    else\n    {\n      /* No more data in the string, only single token68. */\n      if (log)\n      {\n        fprintf(log, \"parse_bauth_params: assigning token68.str = str + %zu (%p), token68.len = %zu\\n\",\n                token68_start, (const void *)(str + token68_start), token68_len);\n        fflush(log);\n      }\n\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n\n      if (log)\n      {\n        fprintf(log, \"parse_bauth_params: assignment complete. token68.str=%p token68.len=%zu\\n\",\n                (const void *)pbauth->token68.str, pbauth->token68.len);\n        fprintf(log, \"parse_bauth_params: returning true\\n\");\n        fclose(log);\n      }\n    }\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"parse_bauth_params: string is empty or contains only whitespace -> nothing to assign\\n\");\n      fprintf(log, \"parse_bauth_params: returning true\\n\");\n      fclose(log);\n    }\n  }\n\n  return true;\n}\n"
}