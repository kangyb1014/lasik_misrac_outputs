{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(0 != token68_len); is redundant: token68_len is computed as i - token68_start where token68_start is set to the first non-whitespace character and the subsequent loop that advances i over the token executes at least once, so token68_len is guaranteed > 0. Thus the assert has no effect on program behaviour (its removal would not change behaviour), so it is executed but constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_bauth_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2908.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_bauth_params:\n```c\nstatic bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n        return false;  /* Binary zero is not allowed */\n      if ((',' == str[i]) || (';' == str[i]))\n        return false;  /* Only single token68 is allowed */\n      i++;\n    }\n    token68_len = i - token68_start;\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n      return false;\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_bauth_params code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_bauth_params with it.\n  - Your function must have the exact same signature as parse_bauth_params.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_bauth_params to check logs.\n  - Your function MUST preserve the original logic of parse_bauth_params as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_bauth_params will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_bauth_params as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nparse_bauth_params (const char *str,\n                    size_t str_len,\n                    struct MHD_RqBAuth *pbauth)\n{\n  size_t i;\n  FILE *log = NULL;\n\n  /* Try to open log file for append. If it fails, we continue without logging. */\n  log = fopen(\"/tmp/logs/2908.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"parse_bauth_params ENTER: str=%p str_len=%zu pbauth=%p\\n\", (void *)str, str_len, (void *)pbauth);\n    fflush(log);\n  }\n\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  if (log)\n    fprintf(log, \"after initial whitespace skip: i=%zu\\n\", i);\n\n  if (str_len > i)\n  {\n    size_t token68_start;\n    size_t token68_len;\n\n    /* 'i' points to the first non-whitespace char after scheme token */\n    token68_start = i;\n    if (log)\n      fprintf(log, \"token68_start=%zu char=0x%02x\\n\", token68_start,\n              (unsigned int)(unsigned char)str[token68_start]);\n\n    /* Find end of the token. Token cannot contain whitespace. */\n    while (i < str_len && ' ' != str[i] && '\\t' != str[i])\n    {\n      if (0 == str[i])\n      {\n        if (log)\n          fprintf(log, \"binary zero found at pos %zu -> returning false\\n\", i);\n        if (log) fclose(log);\n        return false;  /* Binary zero is not allowed */\n      }\n      if ((',' == str[i]) || (';' == str[i]))\n      {\n        if (log)\n          fprintf(log, \"delimiter '%c' found at pos %zu -> returning false\\n\", str[i], i);\n        if (log) fclose(log);\n        return false;  /* Only single token68 is allowed */\n      }\n      if (log && (i - token68_start) < 64) /* avoid flooding log */\n        fprintf(log, \"token scan pos=%zu char=0x%02x\\n\", i, (unsigned int)(unsigned char)str[i]);\n      i++;\n    }\n    token68_len = i - token68_start;\n    if (log)\n      fprintf(log, \"token68_len computed: %zu (i=%zu token68_start=%zu)\\n\", token68_len, i, token68_start);\n\n    mhd_assert (0 != token68_len);\n\n    /* Skip all whitespaces */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n\n    if (log)\n      fprintf(log, \"after trailing whitespace skip: i=%zu str_len=%zu\\n\", i, str_len);\n\n    /* Check whether any garbage is present at the end of the string */\n    if (str_len != i)\n    {\n      if (log)\n        fprintf(log, \"extra garbage present at end (first bad pos=%zu) -> returning false\\n\", i);\n      if (log) fclose(log);\n      return false;\n    }\n    else\n    {\n      /* No more data in the string, only single token68. */\n      pbauth->token68.str = str + token68_start;\n      pbauth->token68.len = token68_len;\n      if (log)\n      {\n        fprintf(log, \"accepting token68: start=%zu len=%zu pbauth->token68.str=%p\\n\",\n                token68_start, token68_len, (void *)pbauth->token68.str);\n        /* Log up to the first 64 bytes of token in hex to avoid issues with non-printables */\n        {\n          size_t j, limit = token68_len < 64 ? token68_len : 64;\n          fprintf(log, \"token68 hex (first %zu bytes):\", limit);\n          for (j = 0; j < limit; ++j)\n            fprintf(log, \" %02x\", (unsigned int)(unsigned char)pbauth->token68.str[j]);\n          if (token68_len > limit)\n            fprintf(log, \" ... (total %zu bytes)\", token68_len);\n          fprintf(log, \"\\n\");\n        }\n        fflush(log);\n      }\n    }\n  }\n  if (log) fclose(log);\n  return true;\n}\n"
}