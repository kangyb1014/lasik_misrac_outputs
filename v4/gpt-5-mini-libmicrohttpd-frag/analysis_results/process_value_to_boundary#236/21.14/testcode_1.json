{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(\"\\r\\n--\", &buf[newline], 4) where the first operand is a string literal (a null\u2011terminated string). MISRA C 2023 Rule 21.14 forbids using memcmp to compare null\u2011terminated strings \u2014 use the appropriate string function (e.g. strncmp) or compare raw memory that is not a C string. Therefore this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value_to_boundary code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1644.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_value_to_boundary:\n```c\nstatic int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        break;\n      }\n      newline = (size_t) (r - buf);\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n        break;\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_value_to_boundary code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_value_to_boundary with it.\n  - Your function must have the exact same signature as process_value_to_boundary.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_value_to_boundary to check logs.\n  - Your function MUST preserve the original logic of process_value_to_boundary as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_value_to_boundary will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_value_to_boundary as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_value_to_boundary (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           const char *boundary,\n                           size_t blen,\n                           enum PP_State next_state,\n                           enum PP_State next_dash_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  const char *r;\n\n  /* open log file for appending; best-effort logging, don't affect logic */\n  FILE *log = fopen(\"/tmp/logs/1644.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER process_value_to_boundary: pp=%p, buffer_pos=%zu, buffer_size=%zu, blen=%zu\\n\",\n            (void *)pp, pp->buffer_pos, pp->buffer_size, blen);\n    fflush(log);\n  }\n\n  /* all data in buf until the boundary\n     (\\r\\n--+boundary) is part of the value */\n  newline = 0;\n  while (1)\n  {\n    while (newline + 4 < pp->buffer_pos)\n    {\n      if (log)\n      {\n        fprintf(log, \"loop: newline=%zu, buffer_pos=%zu\\n\", newline, pp->buffer_pos);\n        fflush(log);\n      }\n\n      r = memchr (&buf[newline],\n                  '\\r',\n                  pp->buffer_pos - newline - 4);\n      if (log)\n      {\n        fprintf(log, \"memchr returned %p\\n\", (void *)r);\n        fflush(log);\n      }\n      if (NULL == r)\n      {\n        newline = pp->buffer_pos - 4;\n        if (log)\n        {\n          fprintf(log, \"memchr NULL -> set newline=%zu\\n\", newline);\n          fflush(log);\n        }\n        break;\n      }\n      newline = (size_t) (r - buf);\n\n      /* Log the 4 bytes that will be compared to \"\\r\\n--\" if available */\n      if (log)\n      {\n        fprintf(log, \"checking potential boundary at newline=%zu: bytes=\", newline);\n        {\n          size_t i;\n          for (i = 0; i < 4; ++i)\n          {\n            unsigned char c = (unsigned char) buf[newline + i];\n            fprintf(log, \"%02x\", c);\n          }\n        }\n        fprintf(log, \" (as hex)\\n\");\n        fflush(log);\n      }\n\n      if (0 == memcmp (\"\\r\\n--\",\n                       &buf[newline],\n                       4))\n      {\n        if (log)\n        {\n          fprintf(log, \"memcmp('\\\\r\\\\n--', &buf[newline], 4) == 0 -> potential boundary start at %zu\\n\", newline);\n          fflush(log);\n        }\n        break;\n      }\n      if (log)\n      {\n        fprintf(log, \"memcmp('\\\\r\\\\n--', &buf[%zu], 4) != 0 -> continue search\\n\", newline);\n        fflush(log);\n      }\n      newline++;\n    }\n    if (newline + blen + 4 <= pp->buffer_pos)\n    {\n      /* can check boundary */\n      if (log)\n      {\n        fprintf(log, \"can check full boundary: newline=%zu, blen=%zu\\n\", newline, blen);\n        /* log the bytes that will be compared against boundary */\n        fprintf(log, \"boundary compare bytes at %zu: \", newline + 4);\n        {\n          size_t i;\n          for (i = 0; i < blen; ++i)\n          {\n            unsigned char c = (unsigned char) buf[newline + 4 + i];\n            fprintf(log, \"%02x\", c);\n          }\n        }\n        fprintf(log, \" (hex) vs boundary (hex): \");\n        {\n          size_t i;\n          for (i = 0; i < blen; ++i)\n          {\n            unsigned char c = (unsigned char) boundary[i];\n            fprintf(log, \"%02x\", c);\n          }\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n      }\n\n      if (0 != memcmp (&buf[newline + 4],\n                       boundary,\n                       blen))\n      {\n        /* no boundary, \"\\r\\n--\" is part of content, skip */\n        if (log)\n        {\n          fprintf(log, \"boundary mismatch at %zu (not a boundary), skipping 4 bytes\\n\", newline);\n          fflush(log);\n        }\n        newline += 4;\n        continue;\n      }\n      else\n      {\n        /* boundary found, process until newline then\n           skip boundary and go back to init */\n        if (log)\n        {\n          fprintf(log, \"boundary found at %zu, setting states and skipping %zu bytes\\n\", newline, blen + 4);\n          fflush(log);\n        }\n        pp->skip_rn = RN_Dash;\n        pp->state = next_state;\n        pp->dash_state = next_dash_state;\n        (*ioffptr) += blen + 4;             /* skip boundary as well */\n        buf[newline] = '\\0';\n        break;\n      }\n    }\n    else\n    {\n      /* cannot check for boundary, process content that\n         we have and check again later; except, if we have\n         no content, abort (out of memory) */\n      if ( (0 == newline) &&\n           (pp->buffer_pos == pp->buffer_size) )\n      {\n        if (log)\n        {\n          fprintf(log, \"out of memory condition: newline==0 and buffer_pos==buffer_size (%zu) -> PP_Error\\n\", pp->buffer_size);\n          fflush(log);\n        }\n        pp->state = PP_Error;\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n      if (log)\n      {\n        fprintf(log, \"cannot check boundary yet, breaking to process what we have: newline=%zu\\n\", newline);\n        fflush(log);\n      }\n      break;\n    }\n  }\n  /* newline is either at beginning of boundary or\n     at least at the last character that we are sure\n     is not part of the boundary */\n  if ( ( (pp->must_ikvi) ||\n         (0 != newline) ) &&\n       (MHD_NO == pp->ikvi (pp->cls,\n                            MHD_POSTDATA_KIND,\n                            pp->content_name,\n                            pp->content_filename,\n                            pp->content_type,\n                            pp->content_transfer_encoding,\n                            buf,\n                            pp->value_offset,\n                            newline)) )\n  {\n    if (log)\n    {\n      fprintf(log, \"ikvi callback returned MHD_NO, setting PP_Error\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    pp->state = PP_Error;\n    return MHD_NO;\n  }\n  if (log)\n  {\n    fprintf(log, \"ikvi succeeded or not called; must_ikvi reset, value_offset advanced by %zu, ioffptr advanced by %zu\\n\",\n            newline, newline);\n    fflush(log);\n    fclose(log);\n  }\n  pp->must_ikvi = false;\n  pp->value_offset += newline;\n  (*ioffptr) += newline;\n  return MHD_YES;\n}\n"
}