{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer is declared as a modifiable pointer but is only used for read-only access. In this function 'daemon' is assigned from 'connection->daemon' and only read (e.g. checking 'daemon->options' to test MHD_USE_TLS) \u2014 it is never used to modify the pointed-to object. Per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'const struct MHD_Daemon *daemon;'). Assigning the non-const 'connection->daemon' to a 'const struct MHD_Daemon *' is allowed, so const qualification is feasible here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgrade_action code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_upgrade_action:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_upgrade_action code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_upgrade_action with it.\n  - Your function must have the exact same signature as MHD_upgrade_action.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_upgrade_action to check logs.\n  - Your function MUST preserve the original logic of MHD_upgrade_action as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_upgrade_action will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_upgrade_action as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n  enum MHD_Result ret = MHD_NO;\n  FILE *log = fopen(\"/tmp/logs/3125.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_upgrade_action ENTER: urh=%p action=%d\\n\", (void *)urh, (int)action);\n    fflush(log);\n  }\n\n  if (NULL == urh)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: urh is NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: connection is NULL (urh=%p) -> returning MHD_NO\\n\", (void *)urh);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  daemon = connection->daemon;\n  if (log)\n    fprintf(log, \"MHD_upgrade_action: connection=%p daemon=%p\\n\", (void *)connection, (void *)daemon);\n\n  if (NULL == daemon)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: daemon is NULL (connection=%p) -> returning MHD_NO\\n\", (void *)connection);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n#ifdef HTTPS_SUPPORT\n  if (log)\n    fprintf(log, \"MHD_upgrade_action: daemon->options=0x%lx\\n\", (unsigned long)daemon->options);\n#endif /* HTTPS_SUPPORT */\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (log)\n      fprintf(log, \"MHD_upgrade_action: case CLOSE: urh->was_closed=%d\\n\", (int)urh->was_closed);\n\n    if (urh->was_closed)\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_upgrade_action: already closed -> returning MHD_NO\\n\");\n        fclose(log);\n      }\n      return MHD_NO; /* Already closed. */\n    }\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      if (log)\n      {\n        fprintf(log, \"MHD_upgrade_action: daemon indicates TLS in use -> shutting down app socket %d\\n\", (int)urh->app.socket);\n        fflush(log);\n      }\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: marking app closed for connection=%p\\n\", (void *)connection);\n      fflush(log);\n    }\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: after MHD_upgraded_connection_mark_app_closed_ (urh=%p) -> returning MHD_YES\\n\", (void *)urh);\n      fclose(log);\n    }\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: case CORK_ON -> calling MHD_connection_set_cork_state_(connection=%p, true)\\n\", (void *)connection);\n      fflush(log);\n    }\n    ret = MHD_connection_set_cork_state_ (connection,\n                                          true) ? MHD_YES : MHD_NO;\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: CORK_ON result=%d -> returning %s\\n\", (int)ret, (ret==MHD_YES)?\"MHD_YES\":\"MHD_NO\");\n      fclose(log);\n    }\n    return ret;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: case CORK_OFF -> calling MHD_connection_set_cork_state_(connection=%p, false)\\n\", (void *)connection);\n      fflush(log);\n    }\n    ret = MHD_connection_set_cork_state_ (connection,\n                                          false) ? MHD_YES : MHD_NO;\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: CORK_OFF result=%d -> returning %s\\n\", (int)ret, (ret==MHD_YES)?\"MHD_YES\":\"MHD_NO\");\n      fclose(log);\n    }\n    return ret;\n  default:\n    if (log)\n    {\n      fprintf(log, \"MHD_upgrade_action: default (unknown action %d) -> returning MHD_NO\\n\", (int)action);\n      fclose(log);\n    }\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n"
}