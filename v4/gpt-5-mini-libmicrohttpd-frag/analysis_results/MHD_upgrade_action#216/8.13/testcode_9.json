{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable is declared as a non-const pointer: \"struct MHD_Daemon *daemon;\" and is assigned from connection->daemon. In the shown code the pointer is only used for read-only access (daemon->options is inspected), so it could and should be declared as a pointer to const (e.g. \"const struct MHD_Daemon *daemon = connection->daemon;\") to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgrade_action code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_upgrade_action:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n\n  if (NULL == urh)\n    return MHD_NO;\n  connection = urh->connection;\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n    return MHD_NO;\n  daemon = connection->daemon;\n  if (NULL == daemon)\n    return MHD_NO;\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (urh->was_closed)\n      return MHD_NO; /* Already closed. */\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           true) ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    /* Unportable API. TODO: replace with portable action. */\n    return MHD_connection_set_cork_state_ (connection,\n                                           false) ? MHD_YES : MHD_NO;\n  default:\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_upgrade_action code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_upgrade_action with it.\n  - Your function must have the exact same signature as MHD_upgrade_action.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_upgrade_action to check logs.\n  - Your function MUST preserve the original logic of MHD_upgrade_action as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_upgrade_action will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_upgrade_action as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_upgrade_action (struct MHD_UpgradeResponseHandle *urh,\n                    enum MHD_UpgradeAction action,\n                    ...)\n{\n  struct MHD_Connection *connection;\n  struct MHD_Daemon *daemon;\n  FILE *log = NULL;\n  int cork_res = 0;\n\n  /* Open log early to capture entry and subsequent control flow */\n  log = fopen(\"/tmp/logs/3125.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_upgrade_action: urh=%p action=%d\\n\", (void *)urh, (int)action);\n    fflush(log);\n  }\n\n  if (NULL == urh)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: urh == NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  connection = urh->connection;\n  if (log)\n  {\n    fprintf(log, \"connection := urh->connection => %p\\n\", (void *)connection);\n    fflush(log);\n  }\n\n  /* Precaution checks on external data. */\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: connection == NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  daemon = connection->daemon;\n  if (log)\n  {\n    fprintf(log, \"daemon := connection->daemon => %p\\n\", (void *)daemon);\n    fflush(log);\n  }\n\n  if (NULL == daemon)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: daemon == NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Log daemon state that is relevant to the reported violation scenario. */\n  if (log)\n  {\n    /* daemon->options is read-only here in the original code; record it. */\n    fprintf(log, \"daemon->options = 0x%lx\\n\", (unsigned long) daemon->options);\n    fflush(log);\n  }\n\n  switch (action)\n  {\n  case MHD_UPGRADE_ACTION_CLOSE:\n    if (log)\n      fprintf(log, \"case MHD_UPGRADE_ACTION_CLOSE\\n\");\n\n    if (urh->was_closed)\n    {\n      if (log)\n      {\n        fprintf(log, \"urh->was_closed == true -> already closed -> returning MHD_NO\\n\");\n        fclose(log);\n      }\n      return MHD_NO; /* Already closed. */\n    }\n\n    /* transition to special 'closed' state for start of cleanup */\n#ifdef HTTPS_SUPPORT\n    if (0 != (daemon->options & MHD_USE_TLS) )\n    {\n      if (log)\n      {\n        fprintf(log, \"daemon->options indicates MHD_USE_TLS -> calling shutdown on app.socket (%d)\\n\", urh->app.socket);\n        fflush(log);\n      }\n      /* signal that app is done by shutdown() of 'app' socket */\n      /* Application will not use anyway this socket after this command. */\n      shutdown (urh->app.socket,\n                SHUT_RDWR);\n    }\n#endif /* HTTPS_SUPPORT */\n    mhd_assert (MHD_CONNECTION_UPGRADE == connection->state);\n    /* The next function will mark the connection as closed by application\n     * by setting 'urh->was_closed'.\n     * As soon as connection will be marked with BOTH\n     * 'urh->was_closed' AND 'urh->clean_ready', it will\n     * be moved to cleanup list by MHD_resume_connection(). */\n    if (log)\n    {\n      fprintf(log, \"Calling MHD_upgraded_connection_mark_app_closed_(%p)\\n\", (void *)connection);\n      fflush(log);\n    }\n    MHD_upgraded_connection_mark_app_closed_ (connection);\n    if (log)\n    {\n      fprintf(log, \"RETURN: MHD_YES (after CLOSE handling)\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  case MHD_UPGRADE_ACTION_CORK_ON:\n    if (log)\n      fprintf(log, \"case MHD_UPGRADE_ACTION_CORK_ON -> calling MHD_connection_set_cork_state_(connection, true)\\n\");\n    cork_res = MHD_connection_set_cork_state_ (connection,\n                                           true) ? 1 : 0;\n    if (log)\n    {\n      fprintf(log, \"MHD_connection_set_cork_state_(..., true) returned %d -> returning %s\\n\", cork_res, cork_res ? \"MHD_YES\" : \"MHD_NO\");\n      fclose(log);\n    }\n    return cork_res ? MHD_YES : MHD_NO;\n  case MHD_UPGRADE_ACTION_CORK_OFF:\n    if (log)\n      fprintf(log, \"case MHD_UPGRADE_ACTION_CORK_OFF -> calling MHD_connection_set_cork_state_(connection, false)\\n\");\n    cork_res = MHD_connection_set_cork_state_ (connection,\n                                           false) ? 1 : 0;\n    if (log)\n    {\n      fprintf(log, \"MHD_connection_set_cork_state_(..., false) returned %d -> returning %s\\n\", cork_res, cork_res ? \"MHD_YES\" : \"MHD_NO\");\n      fclose(log);\n    }\n    return cork_res ? MHD_YES : MHD_NO;\n  default:\n    if (log)\n    {\n      fprintf(log, \"default: unknown action (%d) -> returning MHD_NO\\n\", (int)action);\n      fclose(log);\n    }\n    /* we don't understand this one */\n    return MHD_NO;\n  }\n}\n"
}