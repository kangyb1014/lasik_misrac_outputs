{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen the code is compiled so that one of the unconditional-return branches is active (for example on Windows with _WIN32 and _WIN32_WINNT >= 0x0600 the block with \"if (1) return (uint64_t) (GetTickCount64 () - tick_start);\" is included, or when HAVE_GETHRTIME is defined which contains \"if (1) return ...\"), that unconditional return will always transfer control out of the function and the final fallback statement\n    return (uint64_t) (time (NULL) - sys_clock_start) * 1000;\ncan never be reached. In such a build configuration the final return is unreachable, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_monotonic_msec_counter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1696.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_monotonic_msec_counter:\n```c\nuint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n    return (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n      return (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                         * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n    return (uint64_t) (GetTickCount64 () - tick_start);\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    return ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n    return ((uint64_t) (gethrtime () - hrtime_start)) / 1000000;\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n    return (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n      return (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  return (uint64_t) (time (NULL) - sys_clock_start) * 1000;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_monotonic_msec_counter code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_monotonic_msec_counter with it.\n  - Your function must have the exact same signature as MHD_monotonic_msec_counter.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_monotonic_msec_counter to check logs.\n  - Your function MUST preserve the original logic of MHD_monotonic_msec_counter as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_monotonic_msec_counter will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_monotonic_msec_counter as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "uint64_t\nMHD_monotonic_msec_counter (void)\n{\n#if defined(HAVE_CLOCK_GETTIME) || defined(HAVE_TIMESPEC_GET)\n  struct timespec ts;\n#endif /* HAVE_CLOCK_GETTIME || HAVE_TIMESPEC_GET */\n\n#ifdef HAVE_CLOCK_GETTIME\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n  {\n    uint64_t __mhd1696_result = (uint64_t) (((uint64_t) (ts.tv_sec - mono_clock_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n    /* Log control path and relevant state */\n    {\n      FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n      if (__mhd1696_fp)\n      {\n        fprintf(__mhd1696_fp,\n                \"MHD_monotonic_msec_counter: branch=CLOCK_GETTIME mono_clock_id=%lld mono_clock_start=%llu ts.tv_sec=%lld ts.tv_nsec=%ld result=%llu\\n\",\n                (long long) mono_clock_id,\n                (unsigned long long) mono_clock_start,\n                (long long) ts.tv_sec,\n                (long) ts.tv_nsec,\n                (unsigned long long) __mhd1696_result);\n        fclose(__mhd1696_fp);\n      }\n    }\n    return __mhd1696_result;\n  }\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n    {\n      uint64_t __mhd1696_result = (uint64_t) (((uint64_t) (cur_time.tv_sec - mono_clock_start))\n                         * 1000 + (uint64_t) (cur_time.tv_nsec / 1000000));\n      FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n      if (__mhd1696_fp)\n      {\n        fprintf(__mhd1696_fp,\n                \"MHD_monotonic_msec_counter: branch=CLOCK_GET_TIME mono_clock_service=%p mono_clock_start=%llu cur_time.tv_sec=%lld cur_time.tv_nsec=%ld result=%llu\\n\",\n                (void *) mono_clock_service,\n                (unsigned long long) mono_clock_start,\n                (long long) cur_time.tv_sec,\n                (long) cur_time.tv_nsec,\n                (unsigned long long) __mhd1696_result);\n        fclose(__mhd1696_fp);\n      }\n      return __mhd1696_result;\n    }\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n  {\n    uint64_t __mhd1696_result = (uint64_t) (GetTickCount64 () - tick_start);\n    FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n    if (__mhd1696_fp)\n    {\n      fprintf(__mhd1696_fp,\n              \"MHD_monotonic_msec_counter: branch=WIN32_GetTickCount64 tick_start=%llu GetTickCount64()=%llu result=%llu\\n\",\n              (unsigned long long) tick_start,\n              (unsigned long long) GetTickCount64(),\n              (unsigned long long) __mhd1696_result);\n      fclose(__mhd1696_fp);\n    }\n    return __mhd1696_result;\n  }\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n    uint64_t num_ticks;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    num_ticks = (uint64_t) (perf_counter.QuadPart - perf_start);\n    {\n      uint64_t __mhd1696_result = ((num_ticks / perf_freq) * 1000)\n           + ((num_ticks % perf_freq) / (perf_freq / 1000));\n      FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n      if (__mhd1696_fp)\n      {\n        fprintf(__mhd1696_fp,\n                \"MHD_monotonic_msec_counter: branch=WIN32_QPC perf_freq=%llu perf_start=%llu perf_counter=%lld num_ticks=%llu result=%llu\\n\",\n                (unsigned long long) perf_freq,\n                (unsigned long long) perf_start,\n                (long long) perf_counter.QuadPart,\n                (unsigned long long) num_ticks,\n                (unsigned long long) __mhd1696_result);\n        fclose(__mhd1696_fp);\n      }\n      return __mhd1696_result;\n    }\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n  {\n    uint64_t __mhd1696_result = ((uint64_t) (gethrtime () - hrtime_start)) / 1000000;\n    FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n    if (__mhd1696_fp)\n    {\n      fprintf(__mhd1696_fp,\n              \"MHD_monotonic_msec_counter: branch=GETHRTIME hrtime_start=%llu gethrtime()=%llu result=%llu\\n\",\n              (unsigned long long) hrtime_start,\n              (unsigned long long) gethrtime(),\n              (unsigned long long) __mhd1696_result);\n      fclose(__mhd1696_fp);\n    }\n    return __mhd1696_result;\n  }\n#endif /* HAVE_GETHRTIME */\n\n  /* Fallbacks, affected by system time change */\n#ifdef HAVE_TIMESPEC_GET\n  if (TIME_UTC == timespec_get (&ts, TIME_UTC))\n  {\n    uint64_t __mhd1696_result = (uint64_t) (((uint64_t) (ts.tv_sec - gettime_start)) * 1000\n                       + (uint64_t) (ts.tv_nsec / 1000000));\n    FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n    if (__mhd1696_fp)\n    {\n      fprintf(__mhd1696_fp,\n              \"MHD_monotonic_msec_counter: branch=TIMESPEC_GET gettime_start=%llu ts.tv_sec=%lld ts.tv_nsec=%ld result=%llu\\n\",\n              (unsigned long long) gettime_start,\n              (long long) ts.tv_sec,\n              (long) ts.tv_nsec,\n              (unsigned long long) __mhd1696_result);\n      fclose(__mhd1696_fp);\n    }\n    return __mhd1696_result;\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n    {\n      uint64_t __mhd1696_result = (uint64_t) (((uint64_t) (tv.tv_sec - gettime_start)) * 1000\n                         + (uint64_t) (tv.tv_usec / 1000));\n      FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n      if (__mhd1696_fp)\n      {\n        fprintf(__mhd1696_fp,\n                \"MHD_monotonic_msec_counter: branch=GETTIMEOFDAY gettime_start=%llu tv.tv_sec=%lld tv.tv_usec=%ld result=%llu\\n\",\n                (unsigned long long) gettime_start,\n                (long long) tv.tv_sec,\n                (long) tv.tv_usec,\n                (unsigned long long) __mhd1696_result);\n        fclose(__mhd1696_fp);\n      }\n      return __mhd1696_result;\n    }\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n\n  /* The last resort fallback with very low resolution */\n  {\n    uint64_t __mhd1696_result = (uint64_t) (time (NULL) - sys_clock_start) * 1000;\n    FILE *__mhd1696_fp = fopen(\"/tmp/logs/1696.txt\", \"a\");\n    if (__mhd1696_fp)\n    {\n      fprintf(__mhd1696_fp,\n              \"MHD_monotonic_msec_counter: branch=FALLBACK_TIME sys_clock_start=%llu time(NULL)=%llu result=%llu\\n\",\n              (unsigned long long) sys_clock_start,\n              (unsigned long long) time(NULL),\n              (unsigned long long) __mhd1696_result);\n      fclose(__mhd1696_fp);\n    }\n    return __mhd1696_result;\n  }\n}\n"
}