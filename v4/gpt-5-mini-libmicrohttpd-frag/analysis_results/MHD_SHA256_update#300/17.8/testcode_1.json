{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'length -= bytes_left;' modifies the function parameter 'length'. MISRA C 2023 Rule 17.8 requires that function parameters not be modified (pointer objects pointed-to may be modified but the parameter itself shall not). Therefore this line violates Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA256_update with it.\n  - Your function must have the exact same signature as MHD_SHA256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n  FILE *log = NULL;\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  /* Open log for append. Keep failure non-fatal. */\n  log = fopen(\"/tmp/logs/532.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_SHA256_update: ctx=%p data=%p length=%zu count=%llu\\n\",\n            (void *) ctx,\n            (void *) data,\n            length,\n            (unsigned long long) ctx->count);\n    fflush(log);\n  }\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log)\n    {\n      fprintf(log, \"early return: length == 0\\n\");\n      fclose(log);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  if (log)\n  {\n    fprintf(log, \"computed bytes_have=%u (ctx->count & %d - 1)\\n\",\n            bytes_have,\n            SHA256_BLOCK_SIZE);\n    fflush(log);\n  }\n\n  ctx->count += length;\n  if (log)\n  {\n    fprintf(log, \"after ctx->count += length -> ctx->count=%llu (added %zu)\\n\",\n            (unsigned long long) ctx->count,\n            length);\n    fflush(log);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (log)\n    {\n      fprintf(log, \"buffer has %u bytes, bytes_left to fill=%u, incoming length=%zu\\n\",\n              bytes_have, bytes_left, length);\n      fflush(log);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      if (log)\n      {\n        fprintf(log, \"enough incoming data to fill buffer: length(%zu) >= bytes_left(%u)\\n\",\n                length, bytes_left);\n        fflush(log);\n      }\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      if (log)\n      {\n        fprintf(log, \"memcpy %u bytes into ctx->buffer+%u\\n\", bytes_left, bytes_have);\n        fflush(log);\n      }\n      data += bytes_left;\n      if (log)\n      {\n        fprintf(log, \"advanced data pointer by %u -> data=%p\\n\", bytes_left, (void *) data);\n        fflush(log);\n      }\n\n      /* --- VIOLATION EVIDENCE: parameter 'length' is modified below --- */\n      length -= bytes_left;\n      if (log)\n      {\n        fprintf(log, \"modified parameter 'length' by subtracting bytes_left -> length=%zu\\n\",\n                length);\n        fflush(log);\n      }\n\n      sha256_transform (ctx->H, ctx->buffer);\n      if (log)\n      {\n        fprintf(log, \"sha256_transform called on combined buffer\\n\");\n        fflush(log);\n      }\n      bytes_have = 0;\n      if (log)\n      {\n        fprintf(log, \"reset bytes_have to 0 after processing combined block\\n\");\n        fflush(log);\n      }\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"not enough incoming data to fill buffer: length(%zu) < bytes_left(%u)\\n\",\n                length, bytes_left);\n        fflush(log);\n      }\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (log)\n    {\n      fprintf(log, \"processing full block directly: length=%zu >= SHA256_BLOCK_SIZE=%d\\n\",\n              length, SHA256_BLOCK_SIZE);\n      fflush(log);\n    }\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n    if (log)\n    {\n      fprintf(log, \"after block: advanced data=%p remaining length=%zu\\n\",\n              (void *) data, length);\n      fflush(log);\n    }\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log)\n    {\n      fprintf(log, \"copying incomplete tail: length=%zu to buffer at offset %u\\n\",\n              length, bytes_have);\n      fflush(log);\n    }\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n    if (log)\n    {\n      fprintf(log, \"memcpy of tail done: data=%p length=%zu -> buffer+%u\\n\",\n              (void *) data, length, bytes_have);\n      fflush(log);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_SHA256_update: final length=%zu ctx->count=%llu\\n\",\n            length, (unsigned long long) ctx->count);\n    fclose(log);\n  }\n}\n"
}