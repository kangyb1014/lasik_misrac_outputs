{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf ctx->buffer is declared with a const-qualified type (for example: const uint8_t buffer[SHA256_BLOCK_SIZE] or const uint8_t *buffer) then the cast ((uint8_t *) ctx->buffer) removes the const qualifier and is used as the destination of memcpy \u2014 this discards const and allows writing to an object that was declared const, violating MISRA C 2023 Rule 8.13. (If ctx->buffer is already a non-const type, the cast is unnecessary but does not violate Rule 8.13.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA256_update with it.\n  - Your function must have the exact same signature as MHD_SHA256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n  FILE *log = fopen(\"/tmp/logs/535.txt\", \"a\");\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_SHA256_update: ctx=%p, buffer=%p, data=%p, length=%zu, count(before)=%llu\\n\",\n            (void *)ctx,\n            (const void *)ctx->buffer,\n            (const void *)data,\n            length,\n            (unsigned long long)ctx->count);\n    fflush(log);\n  }\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: length == 0\\n\");\n      fclose(log);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (log)\n  {\n    fprintf(log, \"AFTER COUNT UPDATE: count(after)=%llu, bytes_have=%u\\n\",\n            (unsigned long long)ctx->count,\n            bytes_have);\n    fflush(log);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (log)\n    {\n      fprintf(log, \"BUFFER PARTIAL: bytes_have=%u, bytes_left=%u, incoming_length=%zu\\n\",\n              bytes_have, bytes_left, length);\n      fflush(log);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      if (log)\n      {\n        fprintf(log,\n                \"ABOUT TO MEMCPY (finish block): dest=((uint8_t*)ctx->buffer)+%u -> %p, src=%p, bytes=%u\\n\",\n                bytes_have,\n                (void *)(((uint8_t *) ctx->buffer) + bytes_have),\n                (const void *)data,\n                bytes_left);\n        fprintf(log, \"NOTE: If ctx->buffer is const-qualified at compile-time, the cast ((uint8_t *) ctx->buffer) removes const and this memcpy writes to that object.\\n\");\n        fflush(log);\n      }\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      if (log)\n      {\n        fprintf(log, \"MEMCPY DONE (finish block): dest=%p, src=%p, bytes=%u\\n\",\n                (void *)(((uint8_t *) ctx->buffer) + bytes_have),\n                (const void *)data,\n                bytes_left);\n        fflush(log);\n      }\n\n      data += bytes_left;\n      length -= bytes_left;\n      if (log)\n      {\n        fprintf(log, \"CALL sha256_transform with ctx->H=%p, buffer=%p\\n\",\n                (void *)ctx->H,\n                (const void *)ctx->buffer);\n        fflush(log);\n      }\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (log)\n    {\n      fprintf(log, \"PROCESS FULL BLOCK DIRECTLY: data=%p, H=%p, remaining_length=%zu\\n\",\n              (const void *)data,\n              (void *)ctx->H,\n              length);\n      fflush(log);\n    }\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log)\n    {\n      fprintf(log,\n              \"ABOUT TO MEMCPY (incomplete tail): dest=((uint8_t*)ctx->buffer)+%u -> %p, src=%p, bytes=%zu\\n\",\n              bytes_have,\n              (void *)(((uint8_t *) ctx->buffer) + bytes_have),\n              (const void *)data,\n              length);\n      fprintf(log, \"NOTE: This memcpy also uses ((uint8_t *) ctx->buffer) cast which removes const at compile-time if buffer was const-qualified.\\n\");\n      fflush(log);\n    }\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n\n    if (log)\n    {\n      fprintf(log, \"MEMCPY DONE (incomplete tail): dest=%p, src=%p, bytes=%zu\\n\",\n              (void *)(((uint8_t *) ctx->buffer) + bytes_have),\n              (const void *)data,\n              length);\n      fflush(log);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_SHA256_update: final_count=%llu\\n\",\n            (unsigned long long)ctx->count);\n    fclose(log);\n  }\n}\n"
}