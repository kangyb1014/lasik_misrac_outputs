{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call violates Rule 8.13 if sha256_transform's second parameter is not const-qualified. Specifically, if sha256_transform is declared as sha256_transform(..., uint8_t *block) (a non-const pointer) then passing data (declared const uint8_t *) discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. If, however, sha256_transform is declared to accept a pointer to const (e.g. const uint8_t *), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA256_update with it.\n  - Your function must have the exact same signature as MHD_SHA256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n  FILE *log = NULL;\n\n  /* Try to ensure the log directory exists (best-effort). */\n  /* Declare mkdir locally to avoid adding headers; if provided elsewhere this is a harmless redeclaration. */\n  extern int mkdir (const char *, int);\n  (void) mkdir(\"/tmp/logs\", 0777);\n\n  /* Open the log file in append mode so multiple calls accumulate evidence. */\n  log = fopen(\"/tmp/logs/535.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"--- MHD_SHA256_update entered: ctx=%p data=%p length=%zu ---\\n\",\n            (void *) ctx, (const void *) data, length);\n    fflush(log);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n  if (log)\n  {\n    fprintf(log, \"mhd_assert passed (data %s NULL)\\n\", (data ? \"is\" : \"is NOT\"));\n    fflush(log);\n  }\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log)\n    {\n      fprintf(log, \"length==0: early return\\n\\n\");\n      fclose(log);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  {\n    size_t old_count = ctx->count;\n    bytes_have = (unsigned) (old_count & (SHA256_BLOCK_SIZE - 1));\n    ctx->count += length;\n    if (log)\n    {\n      fprintf(log, \"count: old=%zu added=%zu new=%zu bytes_have=%u\\n\",\n              old_count, length, ctx->count, bytes_have);\n      fflush(log);\n    }\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (log)\n      fprintf(log, \"bytes_have=%u bytes_left=%u length=%zu\\n\", bytes_have, bytes_left, length);\n\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      if (log)\n      {\n        fprintf(log, \"Will memcpy %u bytes into ctx->buffer+%u from data=%p\\n\",\n                bytes_left, bytes_have, (const void *) data);\n        /* Log up to first 16 bytes of the source for inspection (if available). */\n        {\n          unsigned n = (bytes_left < 16u) ? bytes_left : 16u;\n          unsigned i;\n          fprintf(log, \"src bytes:\");\n          for (i = 0u; i < n; ++i)\n            fprintf(log, \" %02x\", (unsigned) ((unsigned char) data[i]));\n          fprintf(log, \"\\n\");\n        }\n        fflush(log);\n      }\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      data += bytes_left;\n      length -= bytes_left;\n\n      if (log)\n      {\n        fprintf(log, \"Calling sha256_transform(ctx->H=%p, ctx->buffer=%p) [combined block]\\n\",\n                (void *) ctx->H, (void *) ctx->buffer);\n        fprintf(log, \"NOTE: In caller MHD_SHA256_update the parameter 'data' is declared 'const uint8_t *'.\\\\n\");\n        fflush(log);\n      }\n\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"Not enough new data to fill buffer: need %u, have %zu -> will copy later\\n\",\n                bytes_left, length);\n        fflush(log);\n      }\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (log)\n    {\n      /* Log the pointer being passed to sha256_transform and first bytes. */\n      unsigned peek = 16u;\n      fprintf(log, \"Calling sha256_transform(ctx->H=%p, data=%p) [direct block], length_remaining=%zu\\n\",\n              (void *) ctx->H, (const void *) data, length);\n      fprintf(log, \"NOTE: caller 'data' parameter is declared 'const uint8_t *' in this function.\\n\");\n      fprintf(log, \"data bytes:\");\n      for (unsigned i = 0u; i < peek; ++i)\n      {\n        fprintf(log, \" %02x\", (unsigned) ((unsigned char) data[i]));\n      }\n      fprintf(log, \"\\n\");\n      fflush(log);\n    }\n\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log)\n    {\n      fprintf(log, \"Copying final incomplete block: %zu bytes into ctx->buffer+%u from data=%p\\n\",\n              length, bytes_have, (const void *) data);\n      fprintf(log, \"final bytes:\");\n      for (size_t i = 0; i < length && i < 16; ++i)\n        fprintf(log, \" %02x\", (unsigned) ((unsigned char) data[i]));\n      fprintf(log, \"\\n\");\n      fflush(log);\n    }\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_SHA256_update exit: ctx=%p\\n\\n\", (void *) ctx);\n    fclose(log);\n  }\n}\n"
}