{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is not defined the earlier check \u2018if (0 == length) return;\u2019 guarantees that control reaches the later \u2018if (0 != length)\u2019 only when length is non\u2011zero, so the controlling expression is invariant (always true). This violates MISRA C 2023 Rule 14.3 (no applicable exceptions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_update:\n```c\nvoid\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha256_transform (ctx->H, data);\n    data += SHA256_BLOCK_SIZE;\n    length -= SHA256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA256_update with it.\n  - Your function must have the exact same signature as MHD_SHA256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA256_update (struct Sha256Ctx *ctx,\n                   const uint8_t *data,\n                   size_t length)\n{\n  unsigned bytes_have; /**< Number of bytes in buffer */\n  FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_SHA256_update ENTRY: ctx=%p length=%zu\\n\", (void *)ctx, length);\n    fflush(log);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY_RETURN: length == 0 (shortcut)\\n\");\n      fclose(log);\n      log = NULL;\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equals (count % SHA256_BLOCK_SIZE) for this block size. */\n  {\n    size_t old_count = ctx->count;\n    bytes_have = (unsigned) (old_count & (SHA256_BLOCK_SIZE - 1));\n    ctx->count += length;\n    if (log)\n    {\n      fprintf(log, \"COUNT_BEFORE=%zu COUNT_AFTER=%zu BYTES_HAVE=%u\\n\",\n              old_count, ctx->count, bytes_have);\n      fflush(log);\n    }\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned bytes_left = SHA256_BLOCK_SIZE - bytes_have;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: bytes_have != 0 (bytes_have=%u bytes_left=%u length=%zu)\\n\",\n              bytes_have, bytes_left, length);\n      fflush(log);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process full block. */\n      if (log)\n      {\n        fprintf(log, \"TAKING bytes_left bytes to complete buffer and transform\\n\");\n        fflush(log);\n      }\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha256_transform (ctx->H, ctx->buffer);\n      if (log)\n      {\n        fprintf(log, \"TRANSFORM: buffer -> bytes_have reset to 0 length now=%zu\\n\", length);\n        fflush(log);\n      }\n      bytes_have = 0;\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"NOT_ENOUGH_TO_COMPLETE: need=%u have_new=%zu -> will buffer\\n\",\n                bytes_left, length);\n        fflush(log);\n      }\n    }\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: bytes_have == 0 (no partial buffered data) length=%zu\\n\", length);\n      fflush(log);\n    }\n  }\n\n  {\n    unsigned loop_count = 0u;\n    while (SHA256_BLOCK_SIZE <= length)\n    {   /* Process any full blocks of new data directly,\n           without copying to the buffer. */\n      if (log)\n      {\n        fprintf(log, \"WHILE_LOOP: processing block #%u (data=%p length=%zu)\\n\",\n                loop_count, (const void *)data, length);\n        fflush(log);\n      }\n      sha256_transform (ctx->H, data);\n      data += SHA256_BLOCK_SIZE;\n      length -= SHA256_BLOCK_SIZE;\n      loop_count++;\n    }\n    if (log)\n    {\n      fprintf(log, \"WHILE_DONE: processed %u full blocks, remaining length=%zu\\n\",\n              loop_count, length);\n      fflush(log);\n    }\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log)\n    {\n      fprintf(log, \"FINAL_COPY: copying remaining %zu bytes into buffer at offset %u\\n\",\n              length, bytes_have);\n      fflush(log);\n    }\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"FINAL_COPY: no remaining bytes to copy (length==0)\\n\");\n      fflush(log);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: final length=%zu bytes_have=%u ctx_count=%zu\\n\",\n            length, bytes_have, ctx->count);\n    fclose(log);\n  }\n}\n"
}