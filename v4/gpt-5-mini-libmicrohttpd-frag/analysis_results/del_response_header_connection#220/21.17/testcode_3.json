{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPossible out-of-bounds write when the stored header buffer does not have space for a terminating NUL. If hdr->value points to a buffer whose allocated size equals hdr->value_size (i.e. no extra byte reserved for the '\\0'), then the statement hdr->value[hdr->value_size] = 0 writes one past the allocated object and is an out-of-bounds access. This can trigger violations of Rule 21.17 if subsequent uses of string.h functions (e.g. memcmp/strlen) operate on that buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified del_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of del_response_header_connection:\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified del_response_header_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original del_response_header_connection with it.\n  - Your function must have the exact same signature as del_response_header_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call del_response_header_connection to check logs.\n  - Your function MUST preserve the original logic of del_response_header_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, del_response_header_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of del_response_header_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  FILE *log = fopen(\"/tmp/logs/3453.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"del_response_header_connection: ENTRY response=%p value=%s\\n\",\n            (void *) response, (value ? value : \"(null)\"));\n    fflush(log);\n  }\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (log)\n  {\n    fprintf(log, \"del_response_header_connection: MHD_get_response_element_n_ returned hdr=%p\\n\",\n            (void *) hdr);\n    fflush(log);\n  }\n\n  if (NULL == hdr)\n  {\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: no header found, returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n  {\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: MHD_str_remove_tokens_caseless_ returned false; hdr=%p value_size=%zu\\n\",\n              (void *) hdr, (size_t) hdr->value_size);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"del_response_header_connection: after token removal hdr=%p value_size=%zu value_ptr=%p\\n\",\n            (void *) hdr, (size_t) hdr->value_size, (void *) hdr->value);\n    fflush(log);\n  }\n\n  if (0 == hdr->value_size)\n  {\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: value_size==0 -> removing header hdr=%p\\n\",\n              (void *) hdr);\n      fprintf(log, \"del_response_header_connection: about to free hdr->value=%p hdr->header=%p hdr=%p\\n\",\n              (void *) hdr->value, (void *) hdr->header, (void *) hdr);\n      fflush(log);\n    }\n\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: removed header and cleared flags_auto bits; new flags_auto=%u\\n\",\n              (unsigned int) response->flags_auto);\n      fclose(log);\n    }\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: non-empty value branch hdr=%p value_size=%zu value_ptr=%p\\n\",\n              (void *) hdr, (size_t) hdr->value_size, (void *) hdr->value);\n      fflush(log);\n    }\n\n    /* Null-terminate the result */\n    hdr->value[hdr->value_size] = 0;\n\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: wrote terminating NUL at hdr->value + %zu (addr=%p)\\n\",\n              (size_t) hdr->value_size, (void *) (hdr->value ? (hdr->value + hdr->value_size) : NULL));\n      fflush(log);\n    }\n\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (log)\n      {\n        fprintf(log, \"del_response_header_connection: flags_auto check passed (pre=%u)\\n\",\n                (unsigned int) response->flags_auto);\n        fflush(log);\n      }\n\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n\n        if (log)\n        {\n          fprintf(log, \"del_response_header_connection: exact-length branch; value_size=%zu; after memcmp, flags_auto=%u\\n\",\n                  (size_t) hdr->value_size, (unsigned int) response->flags_auto);\n          fflush(log);\n        }\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n\n        if (log)\n        {\n          fprintf(log, \"del_response_header_connection: prefix \"\n                  \"branch; value_size=%zu; after memcmp, flags_auto=%u\\n\",\n                  (size_t) hdr->value_size, (unsigned int) response->flags_auto);\n          fflush(log);\n        }\n      }\n      else\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n\n        if (log)\n        {\n          fprintf(log, \"del_response_header_connection: else branch (too short), flags_auto=%u\\n\",\n                  (unsigned int) response->flags_auto);\n          fflush(log);\n        }\n      }\n    }\n\n    if (log)\n    {\n      fprintf(log, \"del_response_header_connection: exiting non-empty branch; final flags_auto=%u\\n\",\n              (unsigned int) response->flags_auto);\n      fclose(log);\n    }\n  }\n\n  return MHD_YES;\n}\n"
}