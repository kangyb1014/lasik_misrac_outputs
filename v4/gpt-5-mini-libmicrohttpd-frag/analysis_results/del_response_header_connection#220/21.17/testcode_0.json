{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(value) can read beyond the bounds of the object pointed to by value if value is NULL or not terminated by a NUL character. For example, if the caller passes a non-NUL-terminated buffer or NULL, strlen(value) will scan out-of-bounds (or dereference NULL), violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified del_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of del_response_header_connection:\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified del_response_header_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original del_response_header_connection with it.\n  - Your function must have the exact same signature as del_response_header_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call del_response_header_connection to check logs.\n  - Your function MUST preserve the original logic of del_response_header_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, del_response_header_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of del_response_header_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  FILE *logf = fopen(\"/tmp/logs/3453.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"del_response_header_connection: entered; response=%p; value=%p\\n\",\n            (void *) response, (const void *) value);\n    fflush(logf);\n  }\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: no Connection header found -> MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"del_response_header_connection: hdr=%p; hdr->value=%p; hdr->value_size=%zu\\n\",\n            (void *) hdr, (void *) hdr->value, (size_t) hdr->value_size);\n    fprintf(logf, \"del_response_header_connection: about to call strlen(value) (this may read memory)\\n\");\n    fflush(logf);\n  }\n\n  /* Preserve original behavior: call strlen(value) as in the original code.\n     This may crash or read out-of-bounds if value is NULL or not NUL-terminated;\n     we log the pointer before calling so that reproducer evidence exists. */\n  size_t value_len = strlen (value);\n\n  if (logf)\n  {\n    fprintf(logf, \"del_response_header_connection: strlen(value) returned %zu\\n\", value_len);\n    fflush(logf);\n  }\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         value_len))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: MHD_str_remove_tokens_caseless_ returned false -> MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n  if (0 == hdr->value_size)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: hdr->value_size == 0; removing header and freeing resources\\n\");\n      fflush(logf);\n    }\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: header removed; returning MHD_YES\\n\");\n      fclose(logf);\n    }\n  }\n  else\n  {\n    /* Null-terminate the result */\n    hdr->value[hdr->value_size] = 0;\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: updated hdr->value (size=%zu) = %p\\n\",\n              (size_t) hdr->value_size, (void *) hdr->value);\n      fflush(logf);\n    }\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n        if (logf)\n        {\n          fprintf(logf, \"del_response_header_connection: checked exact 'close' token; flags_auto now = %u\\n\",\n                  (unsigned) response->flags_auto);\n          fflush(logf);\n        }\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n        if (logf)\n        {\n          fprintf(logf, \"del_response_header_connection: checked 'close, ' prefix; flags_auto now = %u\\n\",\n                  (unsigned) response->flags_auto);\n          fflush(logf);\n        }\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n    if (logf)\n    {\n      fprintf(logf, \"del_response_header_connection: finished else branch; returning MHD_YES\\n\");\n      fclose(logf);\n    }\n  }\n  return MHD_YES;\n}\n"
}