{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn del_response_header_connection, after null-terminating hdr->value (hdr->value[hdr->value_size] = 0), the code calls memcmp(hdr->value, \"close, \", MHD_STATICSTR_LEN_(\"close, \")). This uses memcmp to compare null-terminated strings (a string literal vs hdr->value), which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified del_response_header_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3454.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of del_response_header_connection:\n```c\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n    return MHD_NO;\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n    return MHD_NO;\n  if (0 == hdr->value_size)\n  {\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    response->flags_auto &=\n      ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n        | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n  }\n  else\n  {\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        if (0 != memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \")))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified del_response_header_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original del_response_header_connection with it.\n  - Your function must have the exact same signature as del_response_header_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call del_response_header_connection to check logs.\n  - Your function MUST preserve the original logic of del_response_header_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, del_response_header_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of del_response_header_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  FILE *f = fopen(\"/tmp/logs/3454.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f, \"del_response_header_connection: entry response=%p value=%p\\n\",\n            (void *) response, (void *) value);\n    fprintf(f, \"del_response_header_connection: value (as passed)='%s'\\n\",\n            (value != NULL) ? value : \"(null)\");\n  }\n\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     MHD_STATICSTR_LEN_ ( \\\n                                       MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n  {\n    if (NULL != f)\n    {\n      fprintf(f, \"del_response_header_connection: no Connection header found (hdr==NULL)\\n\");\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n\n  if (NULL != f)\n  {\n    fprintf(f, \"del_response_header_connection: found hdr=%p value_size=%zu header_ptr=%p value_ptr=%p\\n\",\n            (void *) hdr, (size_t) hdr->value_size, (void *) hdr->header, (void *) hdr->value);\n  }\n\n  if (! MHD_str_remove_tokens_caseless_ (hdr->value, &hdr->value_size, value,\n                                         strlen (value)))\n  {\n    if (NULL != f)\n    {\n      fprintf(f, \"del_response_header_connection: MHD_str_remove_tokens_caseless_ returned FALSE; value_size now=%zu\\n\",\n              (size_t) hdr->value_size);\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n\n  if (NULL != f)\n  {\n    fprintf(f, \"del_response_header_connection: after token removal value_size=%zu\\n\",\n            (size_t) hdr->value_size);\n  }\n\n  if (0 == hdr->value_size)\n  {\n    if (NULL != f)\n    {\n      fprintf(f, \"del_response_header_connection: value_size == 0 -> removing header hdr=%p\\n\", (void *) hdr);\n    }\n    _MHD_remove_header (response, hdr);\n    free (hdr->value);\n    free (hdr->header);\n    free (hdr);\n    if (NULL != f)\n    {\n      unsigned long long old_flags = (unsigned long long) response->flags_auto;\n      response->flags_auto &=\n        ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_HDR\n          | (enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      fprintf(f, \"del_response_header_connection: cleared connection flags (old=0x%llx new=0x%llx)\\n\",\n              old_flags, (unsigned long long) response->flags_auto);\n      fclose(f);\n    }\n  }\n  else\n  {\n    /* Null-terminate the result */\n    if (NULL != f)\n    {\n      size_t to_dump = hdr->value_size;\n      if (to_dump > 128U)\n        to_dump = 128U;\n      fprintf(f, \"del_response_header_connection: about to null-terminate hdr->value at index %zu\\n\",\n              (size_t) hdr->value_size);\n      fprintf(f, \"del_response_header_connection: dump first %zu bytes of value: \", to_dump);\n      if (hdr->value != NULL && to_dump > 0)\n      {\n        fwrite(hdr->value, 1, to_dump, f);\n        if (hdr->value_size > to_dump)\n          fprintf(f, \"...(truncated by logger)\");\n      }\n      fprintf(f, \"\\n\");\n    }\n\n    hdr->value[hdr->value_size] = 0; /* Null-terminate the result */\n\n    if (NULL != f)\n    {\n      fprintf(f, \"del_response_header_connection: after null-termination value='%.*s' (size=%zu)\\n\",\n              (int) hdr->value_size, hdr->value ? hdr->value : \"\", (size_t) hdr->value_size);\n      fprintf(f, \"del_response_header_connection: response->flags_auto before checks = 0x%llx\\n\",\n              (unsigned long long) response->flags_auto);\n    }\n\n    if (0 != (response->flags_auto\n              & ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE)))\n    {\n      if (MHD_STATICSTR_LEN_ (\"close\") == hdr->value_size)\n      {\n        int cmp = memcmp (hdr->value, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n        if (NULL != f)\n          fprintf(f, \"del_response_header_connection: compare exact 'close' -> memcmp returned %d\\n\", cmp);\n        if (0 != cmp)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else if (MHD_STATICSTR_LEN_ (\"close, \") < hdr->value_size)\n      {\n        int cmp = memcmp (hdr->value, \"close, \",\n                         MHD_STATICSTR_LEN_ (\"close, \"));\n        if (NULL != f)\n          fprintf(f, \"del_response_header_connection: compare prefix 'close, ' -> memcmp returned %d\\n\", cmp);\n        if (0 != cmp)\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n      }\n      else\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONNECTION_CLOSE);\n\n      if (NULL != f)\n      {\n        fprintf(f, \"del_response_header_connection: response->flags_auto after checks = 0x%llx\\n\",\n                (unsigned long long) response->flags_auto);\n        fclose(f);\n      }\n    }\n    else\n    {\n      if (NULL != f)\n        fclose(f);\n    }\n  }\n  return MHD_YES;\n}\n"
}