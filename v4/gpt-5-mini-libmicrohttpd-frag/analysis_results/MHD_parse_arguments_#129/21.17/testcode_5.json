{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If args does not point to a NUL-terminated character array (or points to an interior of an object where no '\\0' occurs before the object end), then calling strchr(args, '=') / strchr(args, '&') will scan past the bounds searching for the terminator. Example: caller provides a 1-byte buffer char buf[1] = {'A'} and passes args = buf; the function tests args[0] != '\\0' (true) and then strchr(args, '=') will read beyond buf searching for '=' or '\\0', causing an out-of-bounds access. The code does not prove or ensure that the entire string is NUL-terminated, so the use of strchr can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4513.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_parse_arguments_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_parse_arguments_ with it.\n  - Your function must have the exact same signature as MHD_parse_arguments_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_parse_arguments_ to check logs.\n  - Your function MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_parse_arguments_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "enum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  /* Log entry */\n  {\n    FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"ENTER MHD_parse_arguments_: connection=%p args=%p daemon=%p\\n\",\n              (void *)connection, (void *)args, (void *)daemon);\n      if (NULL != args)\n        fprintf(log, \"  initial args[0]=0x%02x\\n\", (unsigned char)args[0]);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n\n    /* Log loop iteration and current args state before scanning */\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"LOOP start: args=%p args[0]=0x%02x\\n\",\n                (void *)args, (unsigned char)args[0]);\n        fflush(log);\n        fclose(log);\n      }\n    }\n\n    /* These strchr calls are the points of interest for the violation scenario. */\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    /* Log results of strchr */\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  strchr results: equals=%p amper=%p\\n\",\n                (void *)equals, (void *)amper);\n        fflush(log);\n        fclose(log);\n      }\n    }\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        {\n          FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \"  branch: last argument without '='; calling MHD_unescape_plus on args=%p\\n\",\n                    (void *)args);\n            fflush(log);\n            fclose(log);\n          }\n        }\n\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n\n        {\n          FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \"  after unescape: key_len=%zu; invoking cb with value=NULL\\n\",\n                    key_len);\n            fflush(log);\n            fclose(log);\n          }\n        }\n\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n        {\n          FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \"  cb returned MHD_NO -> returning MHD_NO\\n\");\n            fflush(log);\n            fclose(log);\n          }\n          return MHD_NO;\n        }\n        break;\n      }\n      /* got 'foo=bar' */\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  branch: last argument with '='; equals=%p\\n\", (void *)equals);\n          fflush(log);\n          fclose(log);\n        }\n      }\n\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  after unescape: key_len=%zu value_len=%zu; invoking cb with value=%p\\n\",\n                  key_len, value_len, (void *)equals);\n          fflush(log);\n          fclose(log);\n        }\n      }\n\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  cb returned MHD_NO -> returning MHD_NO\\n\");\n          fflush(log);\n          fclose(log);\n        }\n        return MHD_NO;\n      }\n      break;\n    }\n    /* amper is non-NULL here */\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  branch: amper non-NULL -> amper=%p\\n\", (void *)amper);\n        fflush(log);\n        fclose(log);\n      }\n    }\n\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  branch: no equals before amper or equals>=amper; equals=%p amper(after)=%p\\n\",\n                  (void *)equals, (void *)amper);\n          fflush(log);\n          fclose(log);\n        }\n      }\n\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  cb returned MHD_NO -> returning MHD_NO\\n\");\n          fflush(log);\n          fclose(log);\n        }\n        return MHD_NO;\n      }\n      /* continue with 'bar' */\n      args = amper;\n      {\n        FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  continue with args=%p\\n\", (void *)args);\n          fflush(log);\n          fclose(log);\n        }\n      }\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  branch: equals and amper non-NULL and equals < amper; equals=%p amper=%p\\n\",\n                (void *)equals, (void *)amper);\n        fflush(log);\n        fclose(log);\n      }\n    }\n\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  cb returned MHD_NO -> returning MHD_NO\\n\");\n        fflush(log);\n        fclose(log);\n      }\n      return MHD_NO;\n    }\n    args = amper;\n\n    {\n      FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  end of iteration; next args=%p\\n\", (void *)args);\n        fflush(log);\n        fclose(log);\n      }\n    }\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/4513.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"EXIT MHD_parse_arguments_: returning MHD_YES\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n  return MHD_YES;\n}\n"
}