{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Connection *connection' is not const-qualified even though the function only reads from the connection object (connection->daemon) and does not modify *connection. Therefore it could and should be declared as 'const struct MHD_Connection *connection' to satisfy MISRA C 2023 Rule 8.13. (Note: 'char *args' must remain non-const because the function modifies the buffer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_parse_arguments_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_parse_arguments_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_parse_arguments_ with it.\n  - Your function must have the exact same signature as MHD_parse_arguments_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_parse_arguments_ to check logs.\n  - Your function MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_parse_arguments_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_parse_arguments_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "enum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n  FILE *log = fopen(\"/tmp/logs/4515.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_parse_arguments_: connection=%p, daemon=%p, kind=%d, args=%s\\n\",\n            (void *)connection, (void *)daemon, (int)kind, (args != NULL) ? args : \"(null)\");\n    fflush(log);\n  }\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n\n    if (log)\n    {\n      fprintf(log, \"LOOP: args=%p (\\\"%s\\\"), equals=%p, amper=%p\\n\",\n              (void *)args, args, (void *)equals, (void *)amper);\n      fflush(log);\n    }\n\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        if (log)\n        {\n          fprintf(log, \"BRANCH: last arg without '=' -> before unescape args=\\\"%s\\\"\\n\", args);\n          fflush(log);\n        }\n\n        MHD_unescape_plus (args);\n\n        if (log)\n        {\n          fprintf(log, \"AFTER unescape args=\\\"%s\\\"\\n\", args);\n          fflush(log);\n        }\n\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n\n        if (log)\n        {\n          fprintf(log, \"unescape_callback returned key_len=%zu for args=\\\"%s\\\"\\n\",\n                  key_len, args);\n          fflush(log);\n        }\n\n        if (log)\n        {\n          fprintf(log, \"CALL cb(cls=%p, key=\\\"%s\\\", key_len=%zu, value=NULL, value_len=0, kind=%d)\\n\",\n                  cls, args, key_len, (int)kind);\n          fflush(log);\n        }\n\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n        {\n          if (log)\n          {\n            fprintf(log, \"cb returned MHD_NO -> returning MHD_NO\\n\");\n            fclose(log);\n          }\n          return MHD_NO;\n        }\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n\n      if (log)\n      {\n        fprintf(log, \"BRANCH: last arg with '=' -> split into key=\\\"%s\\\" and value=\\\"%s\\\" (before unescape)\\n\",\n                args, equals);\n        fflush(log);\n      }\n\n      MHD_unescape_plus (args);\n\n      if (log)\n      {\n        fprintf(log, \"AFTER unescape key=\\\"%s\\\"\\n\", args);\n        fflush(log);\n      }\n\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n\n      if (log)\n      {\n        fprintf(log, \"unescape_callback returned key_len=%zu for key=\\\"%s\\\"\\n\",\n                key_len, args);\n        fflush(log);\n      }\n\n      MHD_unescape_plus (equals);\n\n      if (log)\n      {\n        fprintf(log, \"AFTER unescape value=\\\"%s\\\"\\n\", equals);\n        fflush(log);\n      }\n\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n\n      if (log)\n      {\n        fprintf(log, \"unescape_callback returned value_len=%zu for value=\\\"%s\\\"\\n\",\n                value_len, equals);\n        fflush(log);\n      }\n\n      if (log)\n      {\n        fprintf(log, \"CALL cb(cls=%p, key=\\\"%s\\\", key_len=%zu, value=\\\"%s\\\", value_len=%zu, kind=%d)\\n\",\n                cls, args, key_len, equals, value_len, (int)kind);\n        fflush(log);\n      }\n\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n      {\n        if (log)\n        {\n          fprintf(log, \"cb returned MHD_NO -> returning MHD_NO\\n\");\n          fclose(log);\n        }\n        return MHD_NO;\n      }\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n\n    if (log)\n    {\n      fprintf(log, \"BRANCH: amper non-NULL -> key part=\\\"%s\\\", next args starts at %p (\\\"%s\\\")\\n\",\n              args, (void *)amper, amper);\n      fflush(log);\n    }\n\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      if (log)\n      {\n        fprintf(log, \"SUB-BRANCH: no equals in current arg or equals past amper -> treat as key only: key=\\\"%s\\\"\\n\",\n                args);\n        fflush(log);\n      }\n\n      MHD_unescape_plus (args);\n\n      if (log)\n      {\n        fprintf(log, \"AFTER unescape key=\\\"%s\\\"\\n\", args);\n        fflush(log);\n      }\n\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n\n      if (log)\n      {\n        fprintf(log, \"unescape_callback returned key_len=%zu for key=\\\"%s\\\"\\n\",\n                key_len, args);\n        fflush(log);\n      }\n\n      if (log)\n      {\n        fprintf(log, \"CALL cb(cls=%p, key=\\\"%s\\\", key_len=%zu, value=NULL, value_len=0, kind=%d)\\n\",\n                cls, args, key_len, (int)kind);\n        fflush(log);\n      }\n\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n      {\n        if (log)\n        {\n          fprintf(log, \"cb returned MHD_NO -> returning MHD_NO\\n\");\n          fclose(log);\n        }\n        return MHD_NO;\n      }\n      /* continue with 'bar' */\n      args = amper;\n      if (log)\n      {\n        fprintf(log, \"CONTINUE: next args now at %p -> \\\"%s\\\"\\n\", (void *)args, args);\n        fflush(log);\n      }\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n\n    if (log)\n    {\n      fprintf(log, \"REGULAR PAIR: key before unescape=\\\"%s\\\", value before unescape=\\\"%s\\\"\\n\",\n              args, equals);\n      fflush(log);\n    }\n\n    MHD_unescape_plus (args);\n\n    if (log)\n    {\n      fprintf(log, \"AFTER unescape key=\\\"%s\\\"\\n\", args);\n      fflush(log);\n    }\n\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n\n    if (log)\n    {\n      fprintf(log, \"unescape_callback returned key_len=%zu for key=\\\"%s\\\"\\n\",\n              key_len, args);\n      fflush(log);\n    }\n\n    MHD_unescape_plus (equals);\n\n    if (log)\n    {\n      fprintf(log, \"AFTER unescape value=\\\"%s\\\"\\n\", equals);\n      fflush(log);\n    }\n\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n\n    if (log)\n    {\n      fprintf(log, \"unescape_callback returned value_len=%zu for value=\\\"%s\\\"\\n\",\n              value_len, equals);\n      fflush(log);\n    }\n\n    if (log)\n    {\n      fprintf(log, \"CALL cb(cls=%p, key=\\\"%s\\\", key_len=%zu, value=\\\"%s\\\", value_len=%zu, kind=%d)\\n\",\n              cls, args, key_len, equals, value_len, (int)kind);\n      fflush(log);\n    }\n\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n    {\n      if (log)\n      {\n        fprintf(log, \"cb returned MHD_NO -> returning MHD_NO\\n\");\n        fclose(log);\n      }\n      return MHD_NO;\n    }\n    args = amper;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_parse_arguments_: returning MHD_YES\\n\");\n    fclose(log);\n  }\n  return MHD_YES;\n}\n"
}