{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcpy(buf, param->value.str, param->value.len) and then writes buf[param->value.len] = 0 without any guarantee that buf has space for an additional NUL. If buf refers to an object sized exactly param->value.len (or smaller), the subsequent write (and possibly the memcpy itself if buf is smaller than param->value.len) will access beyond the bounds of the object. Since memcpy (from <string.h>) is used, this can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_param_unquoted_copy_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_param_unquoted_copy_z:\n```c\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  if (! param->quoted)\n  {\n    memcpy (buf, param->value.str, param->value.len);\n    buf [param->value.len] = 0;\n    return param->value.len;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n  buf[len] = 0;\n  return len;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_param_unquoted_copy_z code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_param_unquoted_copy_z with it.\n  - Your function must have the exact same signature as get_rq_param_unquoted_copy_z.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_param_unquoted_copy_z to check logs.\n  - Your function MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_param_unquoted_copy_z will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_param_unquoted_copy_z as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static size_t\nget_rq_param_unquoted_copy_z (const struct MHD_RqDAuthParam *param, char *buf)\n{\n  size_t len;\n  FILE *logf = NULL;\n\n  /* Preserve original precondition check */\n  mhd_assert (NULL != param->value.str);\n\n  /* Try to open log file; do not change behavior if logging fails */\n  logf = fopen(\"/tmp/logs/4233.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER get_rq_param_unquoted_copy_z: param=%p, buf=%p, value.str=%p, value.len=%zu, quoted=%d\\n\",\n            (const void *)param, (void *)buf, (const void *)param->value.str,\n            (size_t)param->value.len, (int)!!param->quoted);\n    fflush(logf);\n  }\n\n  if (! param->quoted)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH non-quoted: about to memcpy(buf, param->value.str, param->value.len)\\n\");\n      fprintf(logf, \"  src=%p, dst=%p, len=%zu\\n\", (const void *)param->value.str, (void *)buf, (size_t)param->value.len);\n      fflush(logf);\n    }\n\n    memcpy (buf, param->value.str, param->value.len);\n\n    if (logf)\n    {\n      fprintf(logf, \"AFTER memcpy: wrote %zu bytes to buf. Now writing NUL at buf[%zu]\\n\",\n              (size_t)param->value.len, (size_t)param->value.len);\n      fflush(logf);\n    }\n\n    buf [param->value.len] = 0;\n\n    if (logf)\n    {\n      fprintf(logf, \"RETURN (non-quoted): %zu\\n\", (size_t)param->value.len);\n      fclose(logf);\n    }\n\n    return param->value.len;\n  }\n\n  /* Quoted case: call unquote routine and log results */\n  if (logf)\n  {\n    fprintf(logf, \"BRANCH quoted: calling MHD_str_unquote(src=%p, srclen=%zu, dst=%p)\\n\",\n            (const void *)param->value.str, (size_t)param->value.len, (void *)buf);\n    fflush(logf);\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, buf);\n\n  if (logf)\n  {\n    fprintf(logf, \"AFTER MHD_str_unquote: returned len=%zu\\n\", (size_t)len);\n    fflush(logf);\n  }\n\n  mhd_assert (0 != len);\n  mhd_assert (len < param->value.len);\n\n  if (logf)\n  {\n    fprintf(logf, \"ABOUT TO WRITE NUL at buf[%zu]\\n\", (size_t)len);\n    fflush(logf);\n  }\n\n  buf[len] = 0;\n\n  if (logf)\n  {\n    fprintf(logf, \"RETURN (quoted): %zu\\n\", (size_t)len);\n    fclose(logf);\n  }\n\n  return len;\n}\n"
}