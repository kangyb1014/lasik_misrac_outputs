{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MemoryPool *pool' is only read (the fragment reads pool->end and pool->pos) and the function does not modify the pointee. The pointer should therefore be declared as 'const struct MemoryPool *pool'. Because the pointer is not const-qualified, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2125.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_get_free code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_get_free with it.\n  - Your function must have the exact same signature as MHD_pool_get_free.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_get_free to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_get_free as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_get_free will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  /* Open log file for appending. Do not fail if logging is unavailable. */\n  FILE *mhd_log = fopen(\"/tmp/logs/2125.txt\", \"a\");\n  if (mhd_log)\n    {\n      fprintf(mhd_log, \"ENTER: MHD_pool_get_free called, pool=%p\\n\", (void *)pool);\n      /* Attempt to print members if pool appears non-NULL. If pool is invalid, this may still crash as in original code. */\n      if (pool)\n        fprintf(mhd_log, \"  initial state: pos=%zu end=%zu size=%zu\\n\",\n                (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size);\n      fflush(mhd_log);\n    }\n\n  /* Preserve original assertions and behavior. */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    {\n      if (mhd_log)\n        {\n          fprintf(mhd_log, \"BRANCH: asan red zone triggered: end-pos=%zu <= red_zone=%zu => returning 0\\n\",\n                  (size_t)(pool->end - pool->pos), (size_t)_MHD_RED_ZONE_SIZE);\n          fflush(mhd_log);\n          fclose(mhd_log);\n        }\n      return 0;\n    }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  {\n    size_t free_bytes = (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n    if (mhd_log)\n      {\n        fprintf(mhd_log, \"RETURN: computed free bytes = (end-pos)-red_zone = %zu - %zu = %zu\\n\",\n                (size_t)(pool->end - pool->pos), (size_t)_MHD_RED_ZONE_SIZE, free_bytes);\n        fflush(mhd_log);\n        fclose(mhd_log);\n      }\n    return free_bytes;\n  }\n}\n"
}