{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert invocation is dead code when it has no observable effect (e.g. the assert macro is a no-op in production builds or the condition is provably always true). Example: if mhd_assert expands to ((void)0) for non\u2011debug builds, or the expression pool->size >= pool->end - pool->pos is guaranteed by other code/analysis, then executing that assertion (or keeping it compiled in) has no effect on program behaviour and its removal would not change behaviour \u2014 this is dead code and thus violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert can change behaviour \u2014 e.g. it can abort, log, or otherwise affect timing/state \u2014 then it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_get_free code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2128.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_get_free:\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_get_free code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_get_free with it.\n  - Your function must have the exact same signature as MHD_pool_get_free.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_get_free to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_get_free as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_get_free will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_get_free as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  /* Log entry and state so that tests can observe control flow and values. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2128.txt\", \"a\");\n    if (log != NULL)\n      {\n        fprintf(log, \"MHD_pool_get_free: entry: pool=%p\\n\", (void *) pool);\n        if (pool != NULL)\n          {\n            fprintf(log, \"  pos=%zu end=%zu size=%zu\\n\",\n                    pool->pos, pool->end, pool->size);\n            fprintf(log, \"  eval: end>=pos=%d size>=(end-pos)=%d pos==ROUND_TO_ALIGN(pos)=%d\\n\",\n                    (int) (pool->end >= pool->pos),\n                    (int) (pool->size >= pool->end - pool->pos),\n                    (int) (pool->pos == ROUND_TO_ALIGN (pool->pos)));\n          }\n        else\n          {\n            fprintf(log, \"  pool is NULL\\n\");\n          }\n        fclose(log);\n      }\n  }\n\n  /* Preserve original assertions exactly as in the target code. */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    {\n      FILE *log = fopen(\"/tmp/logs/2128.txt\", \"a\");\n      if (log != NULL)\n        {\n          fprintf(log, \"  condition: (end - pos) <= _MHD_RED_ZONE_SIZE -> returning 0\\n\");\n          fprintf(log, \"  values: end=%zu pos=%zu red_zone=%d\\n\",\n                  pool->end, pool->pos, (int) _MHD_RED_ZONE_SIZE);\n          fclose(log);\n        }\n      return 0;\n    }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n\n  size_t free_space = (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2128.txt\", \"a\");\n    if (log != NULL)\n      {\n        fprintf(log, \"  returning free_space=%zu (computed as (end - pos) - _MHD_RED_ZONE_SIZE)\\n\",\n                free_space);\n        fclose(log);\n      }\n  }\n\n  return free_space;\n}\n"
}