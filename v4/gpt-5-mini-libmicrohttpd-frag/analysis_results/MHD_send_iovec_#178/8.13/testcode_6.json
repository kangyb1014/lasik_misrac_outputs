{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as a const pointer to a non-const object: 'struct MHD_iovec_track_ *const r_iov'. Rule 8.13 expects the pointee to be const whenever possible. If MHD_send_iovec_ does not modify the object pointed to by r_iov (it only reads it or forwards it to callees that do not modify it), then the declaration should be 'const struct MHD_iovec_track_ * const r_iov' (or at least 'const struct MHD_iovec_track_ * r_iov'). In that usage scenario the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_iovec_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4405.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_send_iovec_:\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_send_iovec_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_send_iovec_ with it.\n  - Your function must have the exact same signature as MHD_send_iovec_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_send_iovec_ to check logs.\n  - Your function MUST preserve the original logic of MHD_send_iovec_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_send_iovec_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_send_iovec_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "ssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  /* Preserve original assertions exactly as in the target code. */\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n\n  /* Open log file and record entry and key state. If the log cannot be\n     opened (e.g., directory doesn't exist), proceed silently so behavior\n     is unchanged. */\n  {\n    FILE *log = fopen(\"/tmp/logs/4405.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf (log, \"ENTER MHD_send_iovec_: connection=%p r_iov=%p push_data=%d\\n\",\n                 (void *) connection, (void *) r_iov, (int) push_data);\n        /* Log some of the state the function asserts about. These members\n           are referenced in the original function and therefore should be\n           available. Rely on the asserts above to ensure validity. */\n        fprintf (log, \"  resp_iov.iov=%p, response->data_iov=%p\\n\",\n                 (void *) connection->rp.resp_iov.iov,\n                 (void *) connection->rp.response->data_iov);\n        fprintf (log, \"  resp_iov.cnt=%zu, resp_iov.sent=%zu\\n\",\n                 (size_t) connection->rp.resp_iov.cnt,\n                 (size_t) connection->rp.resp_iov.sent);\n        /* If daemon pointer exists, log some options that influence control flow. */\n        if (NULL != connection->daemon)\n          {\n            fprintf (log, \"  daemon=%p options=0x%08x sigpipe_blocked=%d sk_spipe_suppress=%d\\n\",\n                     (void *) connection->daemon,\n                     (unsigned) connection->daemon->options,\n                     (int) connection->daemon->sigpipe_blocked,\n                     (int) connection->sk_spipe_suppress);\n          }\n        fprintf (log, \"  r_iov pointer will be forwarded to callees without modification in this function.\\n\");\n        fclose (log);\n      }\n  }\n\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  {\n    /* Call the original send function but capture return so we can log it. */\n    ssize_t ret = send_iov_nontls (connection, r_iov, push_data);\n    FILE *log = fopen(\"/tmp/logs/4405.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf (log, \"CALL send_iov_nontls: connection=%p r_iov=%p push_data=%d -> ret=%zd\\n\",\n                 (void *) connection, (void *) r_iov, (int) push_data, ret);\n        fclose (log);\n      }\n    return ret;\n  }\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  {\n    ssize_t ret = send_iov_emu (connection, r_iov, push_data);\n    FILE *log = fopen(\"/tmp/logs/4405.txt\", \"a\");\n    if (NULL != log)\n      {\n        fprintf (log, \"CALL send_iov_emu: connection=%p r_iov=%p push_data=%d -> ret=%zd\\n\",\n                 (void *) connection, (void *) r_iov, (int) push_data, ret);\n        fclose (log);\n      }\n    return ret;\n  }\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n"
}