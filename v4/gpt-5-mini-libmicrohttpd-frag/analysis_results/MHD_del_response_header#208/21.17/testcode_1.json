{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(header) assumes 'header' points to a NUL-terminated char array. If the caller passes a non\u2011NUL\u2011terminated buffer (e.g. char h[3] = {'A','B','C'}; MHD_del_response_header(resp, h, \"content\");) strlen will read past the object bounds and cause an out\u2011of\u2011bounds access/UB. This violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_del_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_del_response_header with it.\n  - Your function must have the exact same signature as MHD_del_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_del_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_del_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_del_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n  FILE *logf = fopen(\"/tmp/logs/2383.txt\", \"a\");\n  if (NULL == logf)\n    logf = stderr;\n\n  fprintf(logf, \"ENTRY: MHD_del_response_header(response=%p, header=%p, content=%p)\\n\",\n          (void *) response, (void *) header, (void *) content);\n  fflush(logf);\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    fprintf(logf, \"EARLY_RETURN: NULL parameter: header=%p content=%p\\n\",\n            (void *) header, (void *) content);\n    fflush(logf);\n    if (logf != stderr) fclose(logf);\n    return MHD_NO;\n  }\n\n  /* Preserve original behavior: this may read memory beyond the buffer if\n     'header' is not NUL-terminated (the violation scenario). We log just\n     before and after to capture evidence. */\n  fprintf(logf, \"BEFORE_STRLEN: calling strlen(header) for header=%p\\n\",\n          (void *) header);\n  fflush(logf);\n  header_len = strlen (header);\n  fprintf(logf, \"AFTER_STRLEN: header_len=%zu for header=%p\\n\",\n          header_len, (void *) header);\n  fflush(logf);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    fprintf(logf, \"BRANCH: connection header matched, calling del_response_header_connection(response=%p, content=%p)\\n\",\n            (void *) response, (void *) content);\n    fflush(logf);\n    if (logf != stderr) fclose(logf);\n    return del_response_header_connection (response, content);\n  }\n\n  fprintf(logf, \"BEFORE_STRLEN_CONTENT: calling strlen(content) for content=%p\\n\",\n          (void *) content);\n  fflush(logf);\n  content_len = strlen (content);\n  fprintf(logf, \"AFTER_STRLEN_CONTENT: content_len=%zu for content=%p\\n\",\n          content_len, (void *) content);\n  fflush(logf);\n\n  pos = response->first_header;\n  fprintf(logf, \"LOOP_START: first_header=%p\\n\", (void *) pos);\n  fflush(logf);\n  while (NULL != pos)\n  {\n    fprintf(logf, \"LOOP_ITER: pos=%p header_size=%zu value_size=%zu\\n\",\n            (void *) pos, pos->header_size, pos->value_size);\n    fflush(logf);\n\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      fprintf(logf, \"MATCH_FOUND: pos=%p -- removing header and value\\n\",\n              (void *) pos);\n      fflush(logf);\n\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        fprintf(logf, \"FLAG_CLEAR: cleared RAF_HAS_TRANS_ENC_CHUNKED; flags_auto=%u\\n\",\n                (unsigned int) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n      {\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        fprintf(logf, \"FLAG_CLEAR: cleared RAF_HAS_DATE_HDR; flags_auto=%u\\n\",\n                (unsigned int) response->flags_auto);\n      }\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          fprintf(logf, \"FLAG_CLEAR: cleared RAF_HAS_CONTENT_LENGTH; flags_auto=%u\\n\",\n                  (unsigned int) response->flags_auto);\n        }\n      }\n\n      fprintf(logf, \"RETURN: header removed, returning MHD_YES\\n\");\n      fflush(logf);\n      if (logf != stderr) fclose(logf);\n      return MHD_YES;\n    }\n    pos = pos->next;\n    fprintf(logf, \"LOOP_CONTINUE: next pos=%p\\n\", (void *) pos);\n    fflush(logf);\n  }\n\n  fprintf(logf, \"END: no matching header found, returning MHD_NO\\n\");\n  fflush(logf);\n  if (logf != stderr) fclose(logf);\n  return MHD_NO;\n}\n"
}