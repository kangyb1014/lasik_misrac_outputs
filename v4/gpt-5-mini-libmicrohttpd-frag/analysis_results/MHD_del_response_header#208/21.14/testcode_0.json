{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes content_len = strlen(content) (so content is a null\u2011terminated C string) and then calls memcmp(content, pos->value, content_len) to compare them. Using memcmp to compare a null\u2011terminated string (content) violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_del_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2384.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_del_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_del_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_del_response_header with it.\n  - Your function must have the exact same signature as MHD_del_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_del_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_del_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_del_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_del_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n  FILE *log = fopen(\"/tmp/logs/2384.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_del_response_header: entered (response=%p, header=%p, content=%p)\\n\",\n            (void *)response, (const void *)header, (const void *)content);\n    fflush(log);\n  }\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_del_response_header: NULL parameter (header=%p, content=%p) -> returning MHD_NO\\n\",\n              (const void *)header, (const void *)content);\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  header_len = strlen (header);\n  if (log)\n  {\n    fprintf(log, \"MHD_del_response_header: header_len=%zu, header=\\\"%s\\\"\\n\",\n            header_len, header);\n    fflush(log);\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    if (log)\n      fprintf(log, \"MHD_del_response_header: special-case Connection header -> calling del_response_header_connection\\n\");\n    /* preserve original behaviour: forward and return result */\n    enum MHD_Result res = del_response_header_connection (response, content);\n    if (log)\n    {\n      fprintf(log, \"MHD_del_response_header: del_response_header_connection returned %d\\n\", (int)res);\n      fclose(log);\n    }\n    return res;\n  }\n\n  content_len = strlen (content);\n  if (log)\n  {\n    fprintf(log, \"MHD_del_response_header: content_len=%zu, content=\\\"%s\\\"\\n\",\n            content_len, content);\n    fflush(log);\n  }\n\n  pos = response->first_header;\n  int iter = 0;\n  while (NULL != pos)\n  {\n    if (log)\n      fprintf(log, \"MHD_del_response_header: iter=%d pos=%p header_size=%zu value_size=%zu\\n\",\n              iter, (void *)pos, pos->header_size, pos->value_size);\n\n    /* Only perform memcmp if sizes match, same as original code */\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size))\n    {\n      int header_cmp = 0;\n      int content_cmp = 0;\n\n      /* perform the same comparisons as the original code but capture results for logging */\n      header_cmp = memcmp (header,\n                           pos->header,\n                           header_len);\n      content_cmp = memcmp (content,\n                            pos->value,\n                            content_len);\n\n      if (log)\n        fprintf(log, \"MHD_del_response_header: header_cmp=%d content_cmp=%d\\n\",\n                header_cmp, content_cmp);\n\n      if ((0 == header_cmp) && (0 == content_cmp))\n      {\n        if (log)\n        {\n          fprintf(log, \"MHD_del_response_header: match found at pos=%p -> removing header\\n\",\n                  (void *)pos);\n          fflush(log);\n        }\n\n        _MHD_remove_header (response, pos);\n        free (pos->header);\n        free (pos->value);\n        free (pos);\n\n        if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n              header_len) &&\n             MHD_str_equal_caseless_bin_n_ (header,\n                                            MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                            header_len) )\n        {\n          if (log)\n            fprintf(log, \"MHD_del_response_header: clearing RAF_HAS_TRANS_ENC_CHUNKED flag\\n\");\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n        }\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                    header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_DATE,\n                                                 header_len) )\n        {\n          if (log)\n            fprintf(log, \"MHD_del_response_header: clearing RAF_HAS_DATE_HDR flag\\n\");\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n        }\n        else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                    header_len) &&\n                  MHD_str_equal_caseless_bin_n_ (header,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len) )\n        {\n          if (NULL == MHD_get_response_element_n_ (response,\n                                                   MHD_HEADER_KIND,\n                                                   MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                   header_len))\n          {\n            if (log)\n              fprintf(log, \"MHD_del_response_header: clearing RAF_HAS_CONTENT_LENGTH flag (no other content-length present)\\n\");\n            response->flags_auto &=\n              ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n          }\n        }\n\n        if (log)\n        {\n          fprintf(log, \"MHD_del_response_header: removal complete -> returning MHD_YES\\n\");\n          fclose(log);\n        }\n        return MHD_YES;\n      }\n    }\n\n    pos = pos->next;\n    iter++;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_del_response_header: header not found -> returning MHD_NO\\n\");\n    fclose(log);\n  }\n  return MHD_NO;\n}\n"
}