{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if daemon->custom_error_log points to MHD_DLOG (or to some function that calls MHD_DLOG). In that case MHD_DLOG calls daemon->custom_error_log which calls MHD_DLOG again \u2014 an indirect recursive call and therefore a breach of MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_DLOG code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1390.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_DLOG:\n```c\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_DLOG code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_DLOG with it.\n  - Your function must have the exact same signature as MHD_DLOG.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_DLOG to check logs.\n  - Your function MUST preserve the original logic of MHD_DLOG as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_DLOG will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_DLOG as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n  FILE *logf = fopen(\"/tmp/logs/1390.txt\", \"a\");\n\n  /* Minimal entry probe: record that the function was entered and pointer values. */\n  if (logf)\n    {\n      fprintf(logf, \"MHD_DLOG ENTER: this=%p format=%p\\n\",\n              (const void *)daemon, (const void *)format);\n      /* Attempt to log daemon internals if available. We must not change behaviour, so\n         merely log the values; accessing the members mirrors the original code. */\n      if (daemon)\n        {\n          /* Print options and pointers. Use unsigned long cast for portability. */\n          fprintf(logf, \" daemon->options=0x%lx daemon->custom_error_log=%p daemon->custom_error_log_cls=%p\\n\",\n                  (unsigned long)daemon->options,\n                  (const void *)daemon->custom_error_log,\n                  daemon->custom_error_log_cls);\n\n          /* Detect (best-effort) if the custom_error_log pointer equals MHD_DLOG itself.\n             Cast MHD_DLOG to the expected function-pointer type for comparison so the\n             comparison is meaningful in typical implementations where the types match. */\n          if (daemon->custom_error_log == (void (*)(void *, const char *, va_list))MHD_DLOG)\n            {\n              fprintf(logf, \" WARNING: daemon->custom_error_log == MHD_DLOG (potential indirect recursion)\\n\");\n            }\n          else\n            {\n              fprintf(logf, \" daemon->custom_error_log != MHD_DLOG\\n\");\n            }\n        }\n      else\n        {\n          fprintf(logf, \" daemon is NULL\\n\");\n        }\n      fflush(logf);\n      fclose(logf);\n    }\n\n  /* Preserve original behaviour: if error logging is disabled, return immediately. */\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n\n  va_start (va, format);\n\n  /* Log the imminent call into the custom error logger. */\n  logf = fopen(\"/tmp/logs/1390.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"MHD_DLOG: invoking daemon->custom_error_log(cls=%p, format=%p, va_list)\\n\",\n              daemon->custom_error_log_cls, (const void *)format);\n      fflush(logf);\n      fclose(logf);\n    }\n\n  /* Call through to the user-supplied logger (original behaviour). */\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n\n  /* Exit probe. */\n  logf = fopen(\"/tmp/logs/1390.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"MHD_DLOG EXIT\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n}\n"
}