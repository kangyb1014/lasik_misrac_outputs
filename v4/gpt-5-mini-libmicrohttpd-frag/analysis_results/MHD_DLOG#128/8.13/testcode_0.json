{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe daemon object is passed as const, but the member custom_error_log_cls is (presumably) declared as a pointer to a non-const type (e.g. void *custom_error_log_cls). Accessing daemon->custom_error_log_cls therefore yields a pointer that is top-level const (void * const) but which points to a non-const type. Rule 8.13 requires pointers to point to const-qualified types when possible, so the member should be declared as const void *custom_error_log_cls (and the callback should accept a const void *), or the API adjusted otherwise.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_DLOG code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_DLOG:\n```c\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_DLOG code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_DLOG with it.\n  - Your function must have the exact same signature as MHD_DLOG.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_DLOG to check logs.\n  - Your function MUST preserve the original logic of MHD_DLOG as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_DLOG will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_DLOG as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n  FILE *logf = NULL;\n\n  /* Try to open log file for appending diagnostic information. */\n  logf = fopen(\"/tmp/logs/1395.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"MHD_DLOG ENTER: this function was reached\\n\");\n      fprintf(logf, \"  daemon ptr = %p\\n\", (const void *)daemon);\n      fprintf(logf, \"  format ptr = %p\\n\", (const void *)format);\n      if (daemon)\n        {\n          /* Print fields we will inspect/use below. Cast options to unsigned long for safe printing. */\n          fprintf(logf, \"  daemon->options = 0x%lx\\n\", (unsigned long) daemon->options);\n          fprintf(logf, \"  daemon->custom_error_log = %p\\n\", (const void *) daemon->custom_error_log);\n          fprintf(logf, \"  daemon->custom_error_log_cls = %p\\n\", (const void *) daemon->custom_error_log_cls);\n          fprintf(logf, \"  Note: MHD_DLOG parameter 'daemon' is declared const in this function.\\n\");\n          fprintf(logf, \"  The reported MISRA concern: member 'custom_error_log_cls' may be a pointer to a non-const type while 'daemon' is const.\\n\");\n        }\n      else\n        {\n          fprintf(logf, \"  daemon is NULL (will proceed as original code would).\\n\");\n        }\n      fflush(logf);\n    }\n\n  /* Preserve original behavior: if error logging not enabled, return. */\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    {\n      if (logf)\n        {\n          fprintf(logf, \"MHD_DLOG EXIT: MHD_USE_ERROR_LOG not set, returning without invoking callback.\\n\");\n          fclose(logf);\n        }\n      return;\n    }\n\n  /* Start varargs handling as in original implementation. */\n  va_start (va, format);\n\n  /* Record the formatted message we will pass to the custom callback. Use va_copy so we can both log it and\n     forward the original va_list to the callback (preserving original semantics). */\n  if (logf)\n    {\n      va_list vap;\n      va_copy(vap, va);\n      fprintf(logf, \"MHD_DLOG: formatted message about to be passed to custom_error_log:\\n\");\n      /* Print the formatted message to the diagnostic file. We do not modify the original va so the callback\n         receives the expected va_list. */\n      vfprintf(logf, format, vap);\n      fprintf(logf, \"\\n-- end of message --\\n\");\n      va_end(vap);\n      fflush(logf);\n    }\n\n  /* Call the user-supplied callback exactly as the original function did. */\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n\n  va_end (va);\n\n  if (logf)\n    {\n      fprintf(logf, \"MHD_DLOG EXIT: returned from custom_error_log callback.\\n\");\n      fclose(logf);\n    }\n}\n"
}