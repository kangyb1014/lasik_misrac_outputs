{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_digest_auth_get_username the statement '(void) used; /* Mute compiler warning for non-debug builds */' is an executed no\u2011op whose removal would not affect program behaviour (it only suppresses an unused\u2011variable warning). Therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_username code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4358.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_username:\n```c\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n    return NULL;\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n    return NULL;\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_get_username code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_get_username with it.\n  - Your function must have the exact same signature as MHD_digest_auth_get_username.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_get_username to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_get_username will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n  FILE *logf = NULL;\n\n  /* Attempt to open log file. If this fails, fall back to stderr. */\n  logf = fopen(\"/tmp/logs/4358.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER: MHD_digest_auth_get_username(connection=%p)\\n\", (void *) connection);\n    fflush(logf);\n  }\n  else\n  {\n    (void) fprintf(stderr, \"ENTER: MHD_digest_auth_get_username(connection=%p) - cannot open /tmp/logs/4358.txt\\n\", (void *) connection);\n  }\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EXIT: params == NULL -> returning NULL\\n\");\n      fclose(logf);\n    }\n    else\n    {\n      (void) fprintf(stderr, \"EXIT: params == NULL -> returning NULL\\n\");\n    }\n    return NULL;\n  }\n\n  uname_type = get_rq_uname_type (params);\n  if (logf)\n    fprintf(logf, \"STATE: uname_type=%d\\n\", (int) uname_type);\n  else\n    (void) fprintf(stderr, \"STATE: uname_type=%d\\n\", (int) uname_type);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EXIT: uname_type invalid (%d) -> returning NULL\\n\", (int) uname_type);\n      fclose(logf);\n    }\n    else\n    {\n      (void) fprintf(stderr, \"EXIT: uname_type invalid (%d) -> returning NULL\\n\", (int) uname_type);\n    }\n    return NULL;\n  }\n\n  buf_size = get_rq_unames_size (params, uname_type);\n  if (logf)\n    fprintf(logf, \"STATE: buf_size=%zu\\n\", buf_size);\n  else\n    (void) fprintf(stderr, \"STATE: buf_size=%zu\\n\", buf_size);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EXIT: username allocation failed -> returning NULL\\n\");\n      fclose(logf);\n    }\n    else\n    {\n      (void) fprintf(stderr, \"EXIT: username allocation failed -> returning NULL\\n\");\n    }\n    return NULL;\n  }\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n\n    if (logf)\n    {\n      fprintf(logf, \"CALL: get_rq_uname returned used=%zu, uname_strct.uname_type=%d\\n\",\n              used, (int) uname_strct.uname_type);\n      fflush(logf);\n    }\n    else\n    {\n      (void) fprintf(stderr, \"CALL: get_rq_uname returned used=%zu, uname_strct.uname_type=%d\\n\",\n                     used, (int) uname_strct.uname_type);\n    }\n\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      if (logf)\n      {\n        fprintf(logf, \"EXIT: uname_type mismatch (expected=%d, got=%d) -> freeing username and returning NULL\\n\",\n                (int) uname_type, (int) uname_strct.uname_type);\n        fclose(logf);\n      }\n      else\n      {\n        (void) fprintf(stderr, \"EXIT: uname_type mismatch (expected=%d, got=%d) -> freeing username and returning NULL\\n\",\n                       (int) uname_type, (int) uname_strct.uname_type);\n      }\n      free (username);\n      return NULL;\n    }\n\n    /* This is the statement reported as dead code: executed no-op to mute warning. */\n    (void) used; /* Mute compiler warning for non-debug builds */\n\n    if (logf)\n    {\n      fprintf(logf, \"INFO: executed (void) used; (no-op) - used=%zu\\n\", used);\n      fflush(logf);\n    }\n    else\n    {\n      (void) fprintf(stderr, \"INFO: executed (void) used; (no-op) - used=%zu\\n\", used);\n    }\n\n    mhd_assert (buf_size >= used);\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT: returning username=%p (contents first bytes: '%.32s')\\n\", (void *) username, username ? username : \"(null)\");\n    fclose(logf);\n  }\n  else\n  {\n    (void) fprintf(stderr, \"EXIT: returning username=%p (contents first bytes: '%.32s')\\n\", (void *) username, username ? username : \"(null)\");\n  }\n\n  return username;\n}\n"
}