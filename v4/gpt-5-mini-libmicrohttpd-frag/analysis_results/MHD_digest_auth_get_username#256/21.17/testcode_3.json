{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(buf_size >= used) is performed after get_rq_uname has already written into the username buffer. If get_rq_uname internally uses a string.h function (e.g. memcpy/memmove/strncpy) and copies 'used' bytes into the buffer but used > buf_size (for example get_rq_uname copies buf_size+10 bytes), an out-of-bounds write will occur before the assertion runs. Because the assert may be compiled out in non-debug builds, this does not prevent the overrun and therefore the code can result in accesses beyond the bounds of the username object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_get_username code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4353.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_get_username:\n```c\n_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n    return NULL;\n\n  uname_type = get_rq_uname_type (params);\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n    return NULL;\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n    return NULL;\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_get_username code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_get_username with it.\n  - Your function must have the exact same signature as MHD_digest_auth_get_username.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_get_username to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_get_username will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_get_username as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN char *\nMHD_digest_auth_get_username (struct MHD_Connection *connection)\n{\n  const struct MHD_RqDAuth *params;\n  char *username;\n  size_t buf_size;\n  enum MHD_DigestAuthUsernameType uname_type;\n  FILE *logf = fopen(\"/tmp/logs/4353.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"MHD_digest_auth_get_username: entry; connection=%p\\n\", (void *)connection);\n    fflush(logf);\n  }\n\n  params = MHD_get_rq_dauth_params_ (connection);\n  if (NULL == params)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_digest_auth_get_username: params == NULL -> return NULL\\n\");\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  uname_type = get_rq_uname_type (params);\n  if (logf)\n  {\n    fprintf(logf, \"MHD_digest_auth_get_username: uname_type=%d\\n\", (int)uname_type);\n    fflush(logf);\n  }\n\n  if ( (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD != uname_type) &&\n       (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED != uname_type) )\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_digest_auth_get_username: unsupported uname_type=%d -> return NULL\\n\", (int)uname_type);\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  buf_size = get_rq_unames_size (params, uname_type);\n\n  if (logf)\n  {\n    fprintf(logf, \"MHD_digest_auth_get_username: buf_size=%zu\\n\", buf_size);\n    fflush(logf);\n  }\n\n  mhd_assert (0 != buf_size);\n\n  username = (char *) MHD_calloc_ (1, buf_size);\n  if (NULL == username)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_digest_auth_get_username: calloc failed (buf_size=%zu) -> return NULL\\n\", buf_size);\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  if (1)\n  {\n    struct MHD_DigestAuthUsernameInfo uname_strct;\n    size_t used;\n\n    memset (&uname_strct, 0, sizeof(uname_strct));\n\n    if (logf)\n    {\n      fprintf(logf, \"MHD_digest_auth_get_username: before get_rq_uname: username=%p, buf_size=%zu, uname_type=%d\\n\",\n              (void *)username, buf_size, (int)uname_type);\n      fflush(logf);\n    }\n\n    used = get_rq_uname (params, uname_type, &uname_strct,\n                         (uint8_t *) username, buf_size);\n\n    if (logf)\n    {\n      fprintf(logf, \"MHD_digest_auth_get_username: after get_rq_uname: used=%zu, uname_strct.uname_type=%d\\n\",\n              used, (int)uname_strct.uname_type);\n      /* Detect potential overflow condition: used > buf_size means get_rq_uname reported it wrote more bytes than buffer size */\n      if (used > buf_size)\n        fprintf(logf, \"MHD_digest_auth_get_username: WARNING: used (%zu) > buf_size (%zu) -> potential out-of-bounds write occurred before assert\\n\",\n                used, buf_size);\n      fflush(logf);\n    }\n\n    if (uname_type != uname_strct.uname_type)\n    { /* Broken encoding for extended notation */\n      if (logf)\n      {\n        fprintf(logf, \"MHD_digest_auth_get_username: uname_type mismatch (expected=%d got=%d) -> free username and return NULL\\n\",\n                (int)uname_type, (int)uname_strct.uname_type);\n        fclose(logf);\n      }\n      free (username);\n      return NULL;\n    }\n    (void) used; /* Mute compiler warning for non-debug builds */\n\n    /* Log assertion outcome explicitly; do not change original control flow */\n    if (logf)\n    {\n      if (buf_size >= used)\n        fprintf(logf, \"MHD_digest_auth_get_username: assertion check passed (buf_size=%zu >= used=%zu)\\n\", buf_size, used);\n      else\n        fprintf(logf, \"MHD_digest_auth_get_username: assertion check FAILED (buf_size=%zu < used=%zu) -- overflow likely\\n\", buf_size, used);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    mhd_assert (buf_size >= used);\n  }\n\n  return username;\n}\n"
}