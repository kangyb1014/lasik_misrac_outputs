{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of close_connection:\n```c\nstatic void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    MHD_connection_mark_closed_ (pos);\n    return;   /* must let thread to do the rest */\n  }\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n  else\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  daemon->data_already_pending = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "close_connection (struct MHD_Connection *pos)",
    "MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);",
    "daemon->data_already_pending = true;",
    "DLL_insert (daemon->cleanup_head, daemon->cleanup_tail, pos);",
    "mhd_assert (! pos->resuming);",
    "DLL_remove (daemon->connections_head, daemon->connections_tail, pos);",
    "MHD_connection_mark_closed_ (pos);",
    "MHD_connection_close_ (pos, MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);",
    "XDLL_remove (daemon->manual_timeout_head, daemon->manual_timeout_tail, pos);",
    "NULL == daemon->worker_pool",
    "struct MHD_Daemon *daemon = pos->daemon;",
    "mhd_assert (! pos->suspended);",
    "MHD_thread_handle_ID_is_current_thread_ (daemon->tid)",
    "XDLL_remove (daemon->normal_timeout_head, daemon->normal_timeout_tail, pos);",
    "MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)",
    "MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);",
    "pos->connection_timeout_ms == daemon->connection_timeout_ms"
  ],
  "explanation": "I focused on every place in the function where pointers or pointer-like fields are declared, taken by address, or passed to other functions/macros \u2014 these are the places where const-qualification of the pointed-to type might be applicable and thus should be investigated for compliance with MISRA C Rule 8.13. Other parts of the function (preprocessor conditionals, control-flow statements such as the return, the comment, and boolean-only expressions that do not involve pointer types) do not present additional pointer-to-non-const instances and therefore do not need further investigation for this rule. Additionally, several of the listed fragments clearly mutate the pointed-to objects (e.g. assignment to daemon->data_already_pending, list insertion/removal and mutex lock/unlock), so those usages plausibly require non-const pointers \u2014 they are included so the reviewer can confirm whether const qualification is appropriate or not."
}