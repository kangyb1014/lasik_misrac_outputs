{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call passes 'pos' (type struct MHD_Connection *) to XDLL_remove as a non-const pointer. If XDLL_remove does not modify the MHD_Connection object that 'pos' points to (i.e. it only uses the pointer value to unlink the node from the list), then 'pos' should be a pointer to const-qualified type and the code violates MISRA C 2023 Rule 8.13. If, however, XDLL_remove modifies fields inside the pointed MHD_Connection (for example next/prev pointers stored in the node), then a non-const pointer is required and there is no violation. Without the XDLL_remove prototype/implementation we cannot prove compliance; the rule is violated in the specific scenario where XDLL_remove only reads 'pos' but its parameter is non-const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified close_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2365.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of close_connection:\n```c\nstatic void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    MHD_connection_mark_closed_ (pos);\n    return;   /* must let thread to do the rest */\n  }\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n  else\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  daemon->data_already_pending = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified close_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original close_connection with it.\n  - Your function must have the exact same signature as close_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call close_connection to check logs.\n  - Your function MUST preserve the original logic of close_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, close_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of close_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nclose_connection (struct MHD_Connection *pos)\n{\n  struct MHD_Daemon *daemon = pos->daemon;\n  FILE *logf = fopen(\"/tmp/logs/2365.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER close_connection: pos=%p daemon=%p\\n\", (void *)pos, (void *)daemon);\n    fprintf(logf, \"  initial state: suspended=%d resuming=%d connection_timeout_ms=%d daemon_timeout_ms=%d\\n\",\n            (int)pos->suspended, (int)pos->resuming,\n            (int)pos->connection_timeout_ms,\n            (int)daemon->connection_timeout_ms);\n  }\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    if (logf)\n      fprintf(logf, \"  branch: THREAD_PER_CONN -> mark closed and return\\n\");\n    MHD_connection_mark_closed_ (pos);\n    if (logf)\n    {\n      fprintf(logf, \"EXIT close_connection (thread-per-conn): pos=%p\\n\", (void *)pos);\n      fclose(logf);\n    }\n    return;   /* must let thread to do the rest */\n  }\n\n  if (logf)\n    fprintf(logf, \"  calling MHD_connection_close_\\n\");\n  MHD_connection_close_ (pos,\n                         MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN);\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (logf)\n    fprintf(logf, \"  acquiring cleanup_connection_mutex\\n\");\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  mhd_assert (! pos->suspended);\n  mhd_assert (! pos->resuming);\n\n  if (logf)\n  {\n    fprintf(logf, \"  after close: suspended=%d resuming=%d\\n\",\n            (int)pos->suspended, (int)pos->resuming);\n  }\n\n  if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n  {\n    if (logf)\n      fprintf(logf, \"  chosen XDLL_remove on normal timeout list: head=%p tail=%p pos=%p\\n\",\n              (void *)daemon->normal_timeout_head, (void *)daemon->normal_timeout_tail, (void *)pos);\n    XDLL_remove (daemon->normal_timeout_head,\n                 daemon->normal_timeout_tail,\n                 pos);\n    if (logf)\n      fprintf(logf, \"  returned from XDLL_remove (normal list)\\n\");\n  }\n  else\n  {\n    if (logf)\n      fprintf(logf, \"  chosen XDLL_remove on manual timeout list: head=%p tail=%p pos=%p\\n\",\n              (void *)daemon->manual_timeout_head, (void *)daemon->manual_timeout_tail, (void *)pos);\n    XDLL_remove (daemon->manual_timeout_head,\n                 daemon->manual_timeout_tail,\n                 pos);\n    if (logf)\n      fprintf(logf, \"  returned from XDLL_remove (manual list)\\n\");\n  }\n\n  if (logf)\n    fprintf(logf, \"  calling DLL_remove on connections list: head=%p tail=%p pos=%p\\n\",\n            (void *)daemon->connections_head, (void *)daemon->connections_tail, (void *)pos);\n  DLL_remove (daemon->connections_head,\n              daemon->connections_tail,\n              pos);\n  if (logf)\n    fprintf(logf, \"  returned from DLL_remove (connections)\\n\");\n\n  if (logf)\n    fprintf(logf, \"  calling DLL_insert on cleanup list: head=%p tail=%p pos=%p\\n\",\n            (void *)daemon->cleanup_head, (void *)daemon->cleanup_tail, (void *)pos);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              pos);\n  if (logf)\n    fprintf(logf, \"  returned from DLL_insert (cleanup)\\n\");\n\n  daemon->data_already_pending = true;\n  if (logf)\n    fprintf(logf, \"  set daemon->data_already_pending = true\\n\");\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (logf)\n    fprintf(logf, \"  releasing cleanup_connection_mutex\\n\");\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT close_connection: pos=%p daemon=%p\\n\", (void *)pos, (void *)daemon);\n    fclose(logf);\n  }\n}\n"
}