{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf get_date_header is called with a char buffer smaller than 38 bytes (for example char buf[20]; get_date_header(buf);), the write header[35] = '\\r' (and subsequent writes header[36], header[37]) will access beyond the bounds of the object. This also interacts with get_date_str(header + 6): if that function uses <string.h> routines and assumes a larger buffer, those calls could likewise produce out\u2011of\u2011bounds accesses. The code provides no bounds information or checks, so an invocation with a too\u2011small buffer violates the requirement that string handling and related accesses must not exceed object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_date_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1703.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_date_header:\n```c\nstatic bool\nget_date_header (char *header)\n{\n  if (! get_date_str (header + 6))\n  {\n    header[0] = 0;\n    return false;\n  }\n  header[0] = 'D';\n  header[1] = 'a';\n  header[2] = 't';\n  header[3] = 'e';\n  header[4] = ':';\n  header[5] = ' ';\n  header[35] = '\\r';\n  header[36] = '\\n';\n  header[37] = 0;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_date_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_date_header with it.\n  - Your function must have the exact same signature as get_date_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_date_header to check logs.\n  - Your function MUST preserve the original logic of get_date_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_date_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_date_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_date_header (char *header)\n{\n  /* Minimal forward declarations so we can log without including <stdio.h> here. */\n  typedef struct FILE FILE;\n  extern FILE *fopen(const char *filename, const char *mode);\n  extern int fprintf(FILE *stream, const char *format, ...);\n  extern int fclose(FILE *stream);\n\n  FILE *logf = fopen(\"/tmp/logs/1703.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER get_date_header: header=%p\\n\", (void *)header);\n  }\n\n  /* Preserve original behavior: call get_date_str with header + 6. */\n  if (! get_date_str (header + 6))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"get_date_str(header + 6) returned false -> setting header[0]=0 and returning false\\n\");\n      fclose(logf);\n    }\n    header[0] = 0;\n    return false;\n  }\n\n  /* Log that get_date_str returned true and we will write the fixed prefix. */\n  if (logf)\n  {\n    fprintf(logf, \"get_date_str(header + 6) returned true -> writing prefix at header=%p\\n\", (void *)header);\n  }\n\n  header[0] = 'D';\n  header[1] = 'a';\n  header[2] = 't';\n  header[3] = 'e';\n  header[4] = ':';\n  header[5] = ' ';\n\n  /* Before performing the writes that can overflow a too-small buffer, log the intent.\n     This log line provides evidence of the control flow up to the risky write. */\n  if (logf)\n  {\n    fprintf(logf, \"about to write header[35..37] (\\\"\\\\r\\\\n\\\\0\\\") at header=%p\\n\", (void *)header);\n  }\n\n  /* The following writes reproduce the original behavior exactly. */\n  header[35] = '\\r';\n  header[36] = '\\n';\n  header[37] = 0;\n\n  if (logf)\n  {\n    fprintf(logf, \"wrote header[35]=\\\\r header[36]=\\\\n header[37]=\\\\0 at header=%p -> returning true\\n\", (void *)header);\n    fclose(logf);\n  }\n\n  return true;\n}\n"
}