{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_date_header:\n```c\nstatic bool\nget_date_header (char *header)\n{\n  if (! get_date_str (header + 6))\n  {\n    header[0] = 0;\n    return false;\n  }\n  header[0] = 'D';\n  header[1] = 'a';\n  header[2] = 't';\n  header[3] = 'e';\n  header[4] = ':';\n  header[5] = ' ';\n  header[35] = '\\r';\n  header[36] = '\\n';\n  header[37] = 0;\n  return true;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (! get_date_str (header + 6))\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "This call can violate Rule 21.17 unless there is a documented/checked contract guaranteeing the buffer size. Passing header + 6 hands get_date_str a pointer into the caller's buffer; if that buffer is smaller than the space get_date_str (or the string.h routines it uses) will read/write, accesses beyond the object will occur. Example: if header points to char header[20], header+6 provides only 14 bytes of storage but get_date_str writes a full date (e.g. ~29 bytes) and the caller later writes header[35..37], causing out-of-bounds writes. Without an explicit guarantee that header has sufficient size (at least 38 bytes in this function), the code can violate Rule 21.17."
}