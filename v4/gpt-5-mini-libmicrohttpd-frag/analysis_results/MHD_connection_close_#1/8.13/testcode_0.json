{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'daemon' is declared as 'struct MHD_Daemon *daemon = connection->daemon;' but in this function it is only used for read-only access (checking daemon->notify_completed, testing thread status via a macro, and reading notify_completed_cls). There are no modifications to the pointed-to MHD_Daemon object, so the pointer could and should be declared as 'const struct MHD_Daemon *daemon' to satisfy MISRA C 2023 Rule 8.13. (If any macros or called functions require a non-const pointer, that would be the only legitimate reason to keep it non-const.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_close_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3615.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_close_:\n```c\nvoid\nMHD_connection_close_ (struct MHD_Connection *connection,\n                       enum MHD_RequestTerminationCode termination_code)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  struct MHD_Response *resp = connection->rp.response;\n\n  mhd_assert (! connection->suspended);\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n  if ( (NULL != daemon->notify_completed) &&\n       (connection->rq.client_aware) )\n    daemon->notify_completed (daemon->notify_completed_cls,\n                              connection,\n                              &connection->rq.client_context,\n                              termination_code);\n  connection->rq.client_aware = false;\n  if (NULL != resp)\n  {\n    connection->rp.response = NULL;\n    MHD_destroy_response (resp);\n  }\n  if (NULL != connection->pool)\n  {\n    MHD_pool_destroy (connection->pool);\n    connection->pool = NULL;\n  }\n\n  MHD_connection_mark_closed_ (connection);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_close_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_close_ with it.\n  - Your function must have the exact same signature as MHD_connection_close_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_close_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_close_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_close_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_close_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_connection_close_ (struct MHD_Connection *connection,\n                       enum MHD_RequestTerminationCode termination_code)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  struct MHD_Response *resp = connection->rp.response;\n\n  FILE *log = fopen(\"/tmp/logs/3615.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_connection_close_ ENTER: connection=%p\\n\", (void *)connection);\n    fprintf(log, \"  daemon=%p resp=%p pool=%p\\n\",\n            (void *)daemon, (void *)resp, (void *)connection->pool);\n    fprintf(log, \"  suspended=%d client_aware=%d\\n\",\n            (int)connection->suspended, (int)connection->rq.client_aware);\n#ifdef MHD_USE_THREADS\n    fprintf(log, \"  tid=%ld\\n\", (long) connection->tid);\n#endif\n    if (daemon)\n    {\n      fprintf(log, \"  daemon->notify_completed=%p notify_completed_cls=%p\\n\",\n              (void *)daemon->notify_completed,\n              (void *)daemon->notify_completed_cls);\n    }\n    fflush(log);\n  }\n\n  mhd_assert (! connection->suspended);\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n  if ( (NULL != daemon->notify_completed) &&\n       (connection->rq.client_aware) )\n  {\n    if (log)\n    {\n      fprintf(log, \"  invoking notify_completed: func=%p cls=%p connection=%p client_context=%p termination_code=%d\\n\",\n              (void *)daemon->notify_completed,\n              (void *)daemon->notify_completed_cls,\n              (void *)connection,\n              (void *)&connection->rq.client_context,\n              (int)termination_code);\n      fflush(log);\n    }\n\n    daemon->notify_completed (daemon->notify_completed_cls,\n                              connection,\n                              &connection->rq.client_context,\n                              termination_code);\n\n    if (log)\n    {\n      fprintf(log, \"  returned from notify_completed\\n\");\n      fflush(log);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"  setting client_aware = false\\n\");\n    fflush(log);\n  }\n  connection->rq.client_aware = false;\n  if (NULL != resp)\n  {\n    if (log)\n      fprintf(log, \"  destroying response: resp=%p\\n\", (void *)resp);\n    connection->rp.response = NULL;\n    MHD_destroy_response (resp);\n    if (log)\n      fprintf(log, \"  response destroyed\\n\");\n  }\n  if (NULL != connection->pool)\n  {\n    if (log)\n      fprintf(log, \"  destroying pool: pool=%p\\n\", (void *)connection->pool);\n    MHD_pool_destroy (connection->pool);\n    connection->pool = NULL;\n    if (log)\n      fprintf(log, \"  pool destroyed\\n\");\n  }\n\n  MHD_connection_mark_closed_ (connection);\n\n  if (log)\n  {\n    fprintf(log, \"MHD_connection_close_ EXIT: connection=%p\\n\", (void *)connection);\n    fclose(log);\n  }\n}\n"
}