{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns to the non-pointer function parameter 'millisec' (millisec = -1;), i.e. it modifies a value parameter inside the function.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4062.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_run_wait:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n    millisec = -1;\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    res = MHD_poll_all (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    res = MHD_epoll (daemon, millisec);\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    res = MHD_select (daemon, millisec);\n    /* MHD_select does MHD_cleanup_connections already */\n  }\n  return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_run_wait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_run_wait with it.\n  - Your function must have the exact same signature as MHD_run_wait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_run_wait to check logs.\n  - Your function MUST preserve the original logic of MHD_run_wait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_run_wait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_run_wait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_run_wait (struct MHD_Daemon *daemon,\n              int32_t millisec)\n{\n  enum MHD_Result res;\n  /* Logging probe: open log file and record entry and input state */\n  {\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait ENTER: daemon=%p initial_millisec=%ld shutdown=%d using_threads=%d\\n\",\n              (void *) daemon, (long) millisec,\n              (int) (daemon ? daemon->shutdown : -1),\n              (int) (daemon ? MHD_D_IS_USING_THREADS_ (daemon) : 0));\n      fclose(f);\n    }\n  }\n\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n    /* Log early exit reason */\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait EXIT early: shutdown=%d using_threads=%d returning=MHD_NO\\n\",\n              (int) daemon->shutdown,\n              (int) MHD_D_IS_USING_THREADS_ (daemon));\n      fclose(f);\n    }\n    return MHD_NO;\n  }\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid));\n\n  if (0 > millisec)\n  {\n    /* Log before modifying the non-pointer parameter (violates MISRA 17.8) */\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: millisec (%ld) < 0, will set to -1 (modify parameter)\\n\", (long) millisec);\n      fclose(f);\n    }\n\n    millisec = -1;\n\n    /* Log after modification */\n    f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: millisec modified to %ld\\n\", (long) millisec);\n      fclose(f);\n    }\n  }\n#ifdef HAVE_POLL\n  if (MHD_D_IS_USING_POLL_ (daemon))\n  {\n    /* Log branch taken */\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: using POLL branch, calling MHD_poll_all with millisec=%ld\\n\", (long) millisec);\n      fclose(f);\n    }\n\n    res = MHD_poll_all (daemon, millisec);\n\n    /* Log result and cleanup call */\n    f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: MHD_poll_all returned=%d; calling MHD_cleanup_connections\\n\", (int) res);\n      fclose(f);\n    }\n\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n    /* Log branch taken */\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: using EPOLL branch, calling MHD_epoll with millisec=%ld\\n\", (long) millisec);\n      fclose(f);\n    }\n\n    res = MHD_epoll (daemon, millisec);\n\n    f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait: MHD_epoll returned=%d; calling MHD_cleanup_connections\\n\", (int) res);\n      fclose(f);\n    }\n\n    MHD_cleanup_connections (daemon);\n  }\n  else\n#endif\n  if (1)\n  {\n    mhd_assert (MHD_D_IS_USING_SELECT_ (daemon));\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n#ifdef HAVE_MESSAGES\n    if (daemon->fdset_size_set_by_app\n        && (((int) FD_SETSIZE) < daemon->fdset_size))\n    {\n      MHD_DLOG (daemon,\n                _ (\"MHD_run()/MHD_run_wait() called for daemon started with \" \\\n                   \"MHD_OPTION_APP_FD_SETSIZE option (%d). \" \\\n                   \"The library was compiled with smaller FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_run_from_select2() instead of MHD_run() or \" \\\n                   \"do not use MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                daemon->fdset_size, (int) FD_SETSIZE);\n    }\n#endif /* HAVE_MESSAGES */\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n    /* Log select branch and call */\n    {\n      FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_run_wait: using SELECT branch, calling MHD_select with millisec=%ld\\n\", (long) millisec);\n        fclose(f);\n      }\n    }\n\n    res = MHD_select (daemon, millisec);\n\n    /* MHD_select does MHD_cleanup_connections already */\n\n    {\n      FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"MHD_run_wait: MHD_select returned=%d\\n\", (int) res);\n        fclose(f);\n      }\n    }\n  }\n\n  /* Final log before return */\n  {\n    FILE *f = fopen(\"/tmp/logs/4062.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_run_wait EXIT: returning=%d final_millisec=%ld\\n\", (int) res, (long) millisec);\n      fclose(f);\n    }\n  }\n\n  return res;\n}\n"
}