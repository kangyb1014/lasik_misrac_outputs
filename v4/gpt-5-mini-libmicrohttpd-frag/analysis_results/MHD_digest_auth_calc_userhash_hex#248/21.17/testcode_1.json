{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe check uses digest_size * 2 + 1 without guarding against size_t overflow. If digest_size is large enough that (digest_size * 2 + 1) wraps around (i.e. digest_size > (SIZE_MAX - 1) / 2), the comparison can be bypassed and MHD_bin_to_hex_z(userhash_bin, digest_size, userhash_hex) may write 2*digest_size + 1 bytes into userhash_hex, overflowing it. Example on a 32-bit platform (SIZE_MAX = 4294967295): digest_size = 2147483648 -> digest_size*2 == 0 (wrap), +1 == 1, so the check (1 > hex_buf_size) is false even for small hex_buf_size; the subsequent call will attempt to produce 4294967297 bytes, causing out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash_hex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4433.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash_hex:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash_hex (enum MHD_DigestAuthAlgo3 algo3,\n                                   const char *username,\n                                   const char *realm,\n                                   char *userhash_hex,\n                                   size_t hex_buf_size)\n{\n  uint8_t userhash_bin[MAX_DIGEST];\n  size_t digest_size;\n\n  digest_size = digest_get_hash_size (algo3);\n  if (digest_size * 2 + 1 > hex_buf_size)\n    return MHD_NO;\n  if (MHD_NO == MHD_digest_auth_calc_userhash (algo3, username, realm,\n                                               userhash_bin, MAX_DIGEST))\n    return MHD_NO;\n\n  MHD_bin_to_hex_z (userhash_bin, digest_size, userhash_hex);\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_calc_userhash_hex code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_calc_userhash_hex with it.\n  - Your function must have the exact same signature as MHD_digest_auth_calc_userhash_hex.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_calc_userhash_hex to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_calc_userhash_hex as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_calc_userhash_hex will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash_hex as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash_hex (enum MHD_DigestAuthAlgo3 algo3,\n                                   const char *username,\n                                   const char *realm,\n                                   char *userhash_hex,\n                                   size_t hex_buf_size)\n{\n  uint8_t userhash_bin[MAX_DIGEST];\n  size_t digest_size;\n\n  /* Open log file for appending diagnostic information. */\n  FILE *logf = fopen(\"/tmp/logs/4433.txt\", \"a\");\n  if (logf) {\n    fprintf(logf, \"ENTER: MHD_digest_auth_calc_userhash_hex\\n\");\n    fprintf(logf, \"  algo3=%d, username=%p, realm=%p, hex_buf_size=%zu\\n\",\n            (int)algo3,\n            (const void *)username,\n            (const void *)realm,\n            hex_buf_size);\n    fprintf(logf, \"  username_str=%s, realm_str=%s\\n\",\n            username ? username : \"(null)\",\n            realm ? realm : \"(null)\");\n  }\n\n  digest_size = digest_get_hash_size (algo3);\n\n  /* Compute intermediate values and detect potential overflow for logging.\n     Do not change the original control flow: perform the exact same check\n     as in the original code (which may overflow). */\n  size_t size_max = (size_t)-1;\n  int overflow_possible = (digest_size > (size_max - 1) / 2) ? 1 : 0;\n  size_t doubled = digest_size * 2; /* may overflow like original code */\n  size_t required = doubled + 1;    /* may overflow like original code */\n\n  if (logf) {\n    fprintf(logf, \"  digest_size=%zu\\n\", digest_size);\n    fprintf(logf, \"  computed: digest_size*2 (may wrap) = %zu\\n\", doubled);\n    fprintf(logf, \"  computed: digest_size*2 + 1 (may wrap) = %zu\\n\", required);\n    fprintf(logf, \"  hex_buf_size=%zu\\n\", hex_buf_size);\n    fprintf(logf, \"  overflow_possible_by_check=%d\\n\", overflow_possible);\n    fflush(logf);\n  }\n\n  /* Original check (kept exactly to preserve behavior and coverage). */\n  if (digest_size * 2 + 1 > hex_buf_size)\n  {\n    if (logf) {\n      fprintf(logf, \"  DECISION: insufficient buffer (returns MHD_NO) -- original check triggered\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf) {\n    fprintf(logf, \"  DECISION: buffer appears sufficient according to original check, proceeding to compute userhash binary\\n\");\n    fflush(logf);\n  }\n\n  if (MHD_NO == MHD_digest_auth_calc_userhash (algo3, username, realm,\n                                               userhash_bin, MAX_DIGEST))\n  {\n    if (logf) {\n      fprintf(logf, \"  MHD_digest_auth_calc_userhash returned MHD_NO -> returning MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf) {\n    fprintf(logf, \"  MHD_digest_auth_calc_userhash succeeded, calling MHD_bin_to_hex_z with digest_size=%zu\\n\", digest_size);\n    fflush(logf);\n  }\n\n  MHD_bin_to_hex_z (userhash_bin, digest_size, userhash_hex);\n\n  if (logf) {\n    fprintf(logf, \"  MHD_bin_to_hex_z returned, returning MHD_YES\\n\");\n    fclose(logf);\n  }\n\n  return MHD_YES;\n}\n"
}