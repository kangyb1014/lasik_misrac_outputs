{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' is declared as struct MHD_Connection *connection but the function only reads fields and does not modify the pointed object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. A corrected signature would be: static void check_connection_reply(const struct MHD_Connection *connection) and the local alias: const struct MHD_Connection *const c = connection; (the existing r assignment can remain as struct MHD_Response *const r = c->rp.response).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_connection_reply code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4005.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_connection_reply:\n```c\nstatic void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_connection_reply code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_connection_reply with it.\n  - Your function must have the exact same signature as check_connection_reply.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_connection_reply to check logs.\n  - Your function MUST preserve the original logic of check_connection_reply as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_connection_reply will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_connection_reply as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncheck_connection_reply (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n\n  /* Probe logging: record entry and relevant state to help reproduce the\n     Rule 8.13 scenario. Logs are appended so multiple runs accumulate info. */\n  {\n    FILE *log = fopen(\"/tmp/logs/4005.txt\", \"a\");\n    if (log != NULL)\n    {\n      /* Print basic pointers and key fields used in the checks below. */\n      fprintf(log, \"check_connection_reply ENTER: connection=%p c=%p r=%p\\n\",\n              (void *) connection, (void *) c, (void *) r);\n      /* Guard against types we don't know precisely by casting to common types. */\n      fprintf(log, \"props.set=%d use_reply_body_headers=%d responseCode=%u total_size=%llu flags_auto=0x%08x daemon=%p\\n\",\n              (int) (c->rp.props.set),\n              (int) (c->rp.props.use_reply_body_headers),\n              (unsigned) (c->rp.responseCode),\n              (unsigned long long) (r->total_size),\n              (unsigned) (r->flags_auto),\n              (void *) (c->daemon));\n      fclose(log);\n    }\n  }\n\n  mhd_assert (c->rp.props.set);\n#ifdef HAVE_MESSAGES\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != r->total_size) )\n  {\n    /* Log that this branch is taken (before calling the original logging). */\n    {\n      FILE *log = fopen(\"/tmp/logs/4005.txt\", \"a\");\n      if (log != NULL)\n      {\n        fprintf(log, \"Branch: cannot use reply body -> total_size=%llu (will call MHD_DLOG)\\n\",\n                (unsigned long long) (r->total_size));\n        fclose(log);\n      }\n    }\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Non-empty response body is ignored and not used.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n  if ( (! c->rp.props.use_reply_body_headers) &&\n       (0 != (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) )\n  {\n    /* Log that this branch is taken (before calling the original logging). */\n    {\n      FILE *log = fopen(\"/tmp/logs/4005.txt\", \"a\");\n      if (log != NULL)\n      {\n        fprintf(log, \"Branch: application defined Content-Length violates spec -> flags_auto=0x%08x (will call MHD_DLOG)\\n\",\n                (unsigned) (r->flags_auto));\n        fclose(log);\n      }\n    }\n\n    MHD_DLOG (c->daemon,\n              _ (\"This reply with response code %u cannot use reply body. \"\n                 \"Application defined \\\"Content-Length\\\" header violates\"\n                 \"HTTP specification.\\n\"),\n              (unsigned) (c->rp.responseCode));\n  }\n#else\n  /* When messages are not enabled, ensure the same variables are referenced\n     (to preserve behavior) and record that HAVE_MESSAGES is not defined. */\n  {\n    FILE *log = fopen(\"/tmp/logs/4005.txt\", \"a\");\n    if (log != NULL)\n    {\n      fprintf(log, \"HAVE_MESSAGES not defined: check_connection_reply reached, no MHD_DLOG calls.\\n\");\n      fclose(log);\n    }\n  }\n  (void) c; /* Mute compiler warning */\n  (void) r; /* Mute compiler warning */\n#endif\n}\n"
}