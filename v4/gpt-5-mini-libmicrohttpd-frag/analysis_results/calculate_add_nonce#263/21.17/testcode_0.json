{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf nn->nonce has storage of MAX_DIGEST_NONCE_LENGTH bytes (i.e. no extra byte for a terminating NUL) and nonce_size equals MAX_DIGEST_NONCE_LENGTH, then memcpy(nn->nonce, nonce, nonce_size) fills the buffer and the subsequent write nn->nonce[nonce_size] = 0 writes one byte past the end of the array. Because the code only asserts nonce_size <= MAX_DIGEST_NONCE_LENGTH but does not show that nn->nonce has capacity >= MAX_DIGEST_NONCE_LENGTH+1, this can cause an out\u2011of\u2011bounds write.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce with it.\n  - Your function must have the exact same signature as calculate_add_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  /* Open a log file for tracing control flow and state; best effort. */\n  FILE *log = fopen(\"/tmp/logs/1853.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER calculate_add_nonce: this=%p connection=%p daemon(master)=%p timestamp=%llu realm_len=%zu nonce_ptr=%p nonce_size=%zu\\n\",\n            (void *) &calculate_add_nonce, (void *) connection, (void *) daemon, (unsigned long long) timestamp, realm_len, (void *) nonce, nonce_size);\n    fflush(log);\n  }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  if (log)\n  {\n    fprintf(log, \"Pre-calc: MAX_DIGEST_NONCE_LENGTH=%d NONCE_STD_LEN(MAX_DIGEST)=%zu nonce_size=%zu\\n\",\n            MAX_DIGEST_NONCE_LENGTH, (size_t) NONCE_STD_LEN (MAX_DIGEST), nonce_size);\n    fflush(log);\n  }\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n  {\n    if (log)\n    {\n      fprintf(log, \"digest_ext_error detected -> exit false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (log)\n  {\n    /* Log nonce bytes (hex) up to a reasonable limit for inspection */\n    size_t i;\n    fprintf(log, \"nonce bytes (hex, up to 64):\");\n    for (i = 0; i < nonce_size && i < 64; ++i)\n      fprintf(log, \" %02x\", (unsigned char) nonce[i]);\n    if (nonce_size > 64)\n      fprintf(log, \" ... (total %zu bytes)\", nonce_size);\n    fprintf(log, \"\\n\");\n    fflush(log);\n  }\n\n  if (0 == daemon->nonce_nc_size)\n  {\n    if (log)\n    {\n      fprintf(log, \"daemon->nonce_nc_size == 0 -> exit false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  if (log)\n  {\n    fprintf(log, \"computed nn index -> nn=%p nn->nonce=%p daemon->nnc=%p nonce_nc_size=%zu\\n\",\n            (void *) nn, (void *) nn->nonce, (void *) daemon->nnc, (size_t) daemon->nonce_nc_size);\n    fflush(log);\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  /* Probe availability and log result */\n  {\n    int slot_available = is_slot_available (nn, timestamp, nonce, nonce_size);\n    if (log)\n    {\n      fprintf(log, \"is_slot_available=%d (timestamp=%llu, nonce_size=%zu)\\n\",\n              slot_available, (unsigned long long) timestamp, nonce_size);\n      fflush(log);\n    }\n\n    if (slot_available)\n    {\n      /* Log intended copy range before performing it */\n      if (log)\n      {\n        fprintf(log, \"about to memcpy(nn->nonce=%p, nonce=%p, nonce_size=%zu)\\n\",\n                (void *) nn->nonce, (void *) nonce, nonce_size);\n        /* Also print target bytes after copy will be written (we can't inspect until after) */\n        fflush(log);\n      }\n\n      memcpy (nn->nonce,\n              nonce,\n              nonce_size);\n      nn->nonce[nonce_size] = 0;  /* With terminating zero */\n      nn->nc = 0;\n      nn->nmask = 0;\n      ret = true;\n\n      if (log)\n      {\n        size_t i;\n        fprintf(log, \"after write: nn->nonce bytes (hex, up to 64):\");\n        for (i = 0; i < nonce_size && i < 64; ++i)\n          fprintf(log, \" %02x\", (unsigned char) nn->nonce[i]);\n        if (nonce_size > 64)\n          fprintf(log, \" ... (total %zu bytes)\", nonce_size);\n        /* Also attempt to log the terminating byte value at nn->nonce[nonce_size] in hex */\n        fprintf(log, \" ; terminator (nn->nonce[nonce_size]) = %02x\\n\", (unsigned char) nn->nonce[nonce_size]);\n        fflush(log);\n      }\n    }\n    else\n    {\n      ret = false;\n      if (log)\n      {\n        fprintf(log, \"slot not available -> ret=false\\n\");\n        fflush(log);\n      }\n    }\n  }\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT calculate_add_nonce -> ret=%d\\n\", ret ? 1 : 0);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}