{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a char *nonce buffer to calculate_nonce without an accompanying size parameter, so calculate_nonce may use string.h functions (memcpy, strcpy, strcat, etc.) to build the nonce and thereby write more bytes than the caller's buffer can hold. For example, if calculate_nonce concatenates daemon->digest_auth_random, parts of connection->rq.url (connection->rq.url_len) and other fields into nonce using memcpy/strcat and those combined lengths exceed the buffer capacity (nonce_size), this will result in out\u2011of\u2011bounds writes. Because the callee is given no explicit buffer length in this call, the use of string functions inside calculate_nonce can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce with it.\n  - Your function must have the exact same signature as calculate_add_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n  FILE *logf = NULL;\n\n  /* Open log file for appending; do not fail the function if logging fails */\n  logf = fopen(\"/tmp/logs/1853.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"calculate_add_nonce ENTER\\n\");\n    fprintf(logf, \"  this=%p connection=%p daemon=%p\\n\", (void *) &connection, (void *) connection, (void *) daemon);\n    fprintf(logf, \"  timestamp=%llu nonce=%p nonce_size=%zu\\n\",\n            (unsigned long long) timestamp, (void *) nonce, nonce_size);\n    fprintf(logf, \"  realm=%p realm_len=%zu\\n\", (const void *) realm, realm_len);\n    fprintf(logf, \"  da=%p hashing=%d digest_size=%zu\\n\",\n            (void *) da, (int) da->hashing, (size_t) digest_get_size (da));\n    fprintf(logf, \"  daemon->digest_auth_random=%p daemon->digest_auth_rand_size=%zu\\n\",\n            (void *) daemon->digest_auth_random, daemon->digest_auth_rand_size);\n    fprintf(logf, \"  connection->addr=%p addr_len=%zu\\n\",\n            (void *) connection->addr, (size_t) connection->addr_len);\n    fprintf(logf, \"  connection->rq.url=%p url_len=%zu headers_received=%llu\\n\",\n            (void *) connection->rq.url, connection->rq.url_len,\n            (unsigned long long) connection->rq.headers_received);\n    fprintf(logf, \"  Note: nonce buffer length is determined here as nonce_size and is NOT passed to calculate_nonce()\\n\");\n    fflush(logf);\n  }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  /* Log before calling calculate_nonce to capture inputs that the callee\n     might use (and possibly concatenate) without being given a buffer length. */\n  if (NULL != logf)\n  {\n    fprintf(logf, \"calling calculate_nonce(... )\\n\");\n    fflush(logf);\n  }\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"returned from calculate_nonce\\n\");\n    /* Try to capture a small prefix of the nonce buffer for evidence. */\n    if (nonce != NULL && nonce_size > 0)\n    {\n      size_t i, peek = nonce_size < 32 ? nonce_size : 32;\n      fprintf(logf, \"  nonce[0..%zu]=\", peek ? peek - 1 : 0);\n      for (i = 0; i < peek; ++i)\n        fprintf(logf, \"%02x\", (unsigned char) nonce[i]);\n      fprintf(logf, \"\\n\");\n    }\n    fflush(logf);\n  }\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"digest_ext_error returned true - exiting false\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"daemon->nonce_nc_size == 0 - exiting false\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"nn=%p nn_idx=%td nonce_size=%zu daemon->nonce_nc_size=%zu\\n\",\n            (void *) nn, (ptrdiff_t) (nn - daemon->nnc), nonce_size, daemon->nonce_nc_size);\n    fflush(logf);\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"is_slot_available -> true, performing memcpy of nonce_size=%zu bytes to nn->nonce (addr=%p)\\n\",\n              nonce_size, (void *) nn->nonce);\n      fflush(logf);\n    }\n\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n\n    if (NULL != logf)\n    {\n      fprintf(logf, \"after memcpy: nn->nonce[0..3]=%02x%02x%02x%02x nn->nc=%u nn->nmask=%u\\n\",\n              (unsigned char) nn->nonce[0], (unsigned char) nn->nonce[1],\n              (unsigned char) nn->nonce[2], (unsigned char) nn->nonce[3],\n              (unsigned) nn->nc, (unsigned) nn->nmask);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"is_slot_available -> false, not copying, returning false\\n\");\n      fflush(logf);\n    }\n    ret = false;\n  }\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"calculate_add_nonce EXIT ret=%d\\n\", (int) ret);\n    fclose(logf);\n  }\n\n  return ret;\n}\n"
}