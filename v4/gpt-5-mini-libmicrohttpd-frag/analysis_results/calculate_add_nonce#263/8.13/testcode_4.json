{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'connection' is declared as 'struct MHD_Connection *const connection' (the pointer is const but the pointed-to object is not). The function only reads from connection fields (no writes), so per MISRA C 2023 Rule 8.13 the pointee should be const-qualified, e.g. 'const struct MHD_Connection *const connection'. Additionally, 'struct DigestAlgorithm *da' appears to be only read here and could be 'const struct DigestAlgorithm *da' unless the called functions modify it.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1855.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce with it.\n  - Your function must have the exact same signature as calculate_add_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  /* Logging probe: append logs to /tmp/logs/1855.txt to capture control flow\n     and state useful to reproduce the pointer-const violation scenario. */\n  FILE *log = fopen(\"/tmp/logs/1855.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"ENTER calculate_add_nonce: this=%p, connection=%p, connection->daemon=%p, timestamp=%llu, realm=%p, realm_len=%zu, da=%p\\n\",\n              (void *) &calculate_add_nonce, (void *) connection, (void *) (connection ? connection->daemon : NULL), (unsigned long long) timestamp,\n              (void *) realm, realm_len, (void *) da);\n      /* If `da` is non-NULL, try to log the hashing flag; keep it guarded to avoid crash. */\n      if (da)\n        {\n          /* Print as integer; assume hashing is an integer/boolean type. */\n          fprintf(log, \"  da->hashing=%d\\n\", (int) da->hashing);\n        }\n      fflush(log);\n    }\n\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  if (log)\n    {\n      fprintf(log, \"  Obtained daemon=%p, computed nonce_size=%zu\\n\", (void *) daemon, nonce_size);\n      fflush(log);\n    }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  /* Log parameters that will be passed to calculate_nonce */\n  if (log)\n    {\n      fprintf(log, \"  About to call calculate_nonce with: rq.http_mthd=%p, rq.method=%p, daemon->digest_auth_random=%p, digest_auth_rand_size=%zu, addr=%p, addr_len=%zu, rq.url=%p, rq.url_len=%zu, rq.headers_received=%d, realm=%p, realm_len=%zu, da=%p\\n\",\n              (void *) connection->rq.http_mthd,\n              (void *) connection->rq.method,\n              (void *) daemon->digest_auth_random,\n              (size_t) daemon->digest_auth_rand_size,\n              (void *) connection->addr,\n              (size_t) connection->addr_len,\n              (void *) connection->rq.url,\n              (size_t) connection->rq.url_len,\n              (int) connection->rq.headers_received,\n              (void *) realm,\n              realm_len,\n              (void *) da);\n      fflush(log);\n    }\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n  if (log)\n    {\n      /* Log a hex snapshot of the nonce buffer (up to nonce_size bytes). */\n      fprintf(log, \"  After calculate_nonce: nonce_size=%zu, nonce_hex=\", nonce_size);\n      for (size_t i = 0; i < nonce_size; ++i)\n        fprintf(log, \"%02x\", (unsigned char) nonce[i]);\n      fprintf(log, \"\\n\");\n      fflush(log);\n    }\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    {\n      if (log)\n        {\n          fprintf(log, \"  digest_ext_error(da) == true --> returning false\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (log)\n    {\n      fprintf(log, \"  daemon->nonce_nc_size=%zu\\n\", daemon->nonce_nc_size);\n      fflush(log);\n    }\n\n  if (0 == daemon->nonce_nc_size)\n    {\n      if (log)\n        {\n          fprintf(log, \"  nonce_nc_size == 0 --> returning false\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  if (log)\n    {\n      fprintf(log, \"  Selected nn slot at index %td: nn=%p\\n\", (ptrdiff_t) (nn - daemon->nnc), (void *) nn);\n      fflush(log);\n    }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    if (log)\n      {\n        fprintf(log, \"  is_slot_available == true: writing nonce into slot, setting nc and nmask to 0\\n\");\n        fflush(log);\n      }\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    {\n      if (log)\n        {\n          fprintf(log, \"  is_slot_available == false: not writing, will return false\\n\");\n          fflush(log);\n        }\n      ret = false;\n    }\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  if (log)\n    {\n      fprintf(log, \"EXIT calculate_add_nonce: returning %d\\n\", (int) ret);\n      fclose(log);\n    }\n\n  return ret;\n}\n"
}