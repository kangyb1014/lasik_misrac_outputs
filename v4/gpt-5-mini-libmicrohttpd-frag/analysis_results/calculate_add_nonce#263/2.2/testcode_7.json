{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(0 != nonce_size) is a redundant runtime check: nonce_size is derived from NONCE_STD_LEN(digest_get_size(da)) and is guaranteed > 0 by the design/other checks, so the assertion does not alter program behaviour. If assertions are enabled it executes but cannot change behaviour (it only confirms an invariant), and if assertions are compiled out it has no effect. Thus the operation is executed (in debug builds) but its removal would not affect program behaviour, constituting dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1858.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce with it.\n  - Your function must have the exact same signature as calculate_add_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n  FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n\n  /* Log entry: function entered and key derived values */\n  if (logf != NULL)\n  {\n    fprintf (logf, \"calculate_add_nonce: entered\\n\");\n    fprintf (logf, \"  connection=%p, daemon=%p, timestamp=%llu\\n\",\n             (void *) connection, (void *) daemon, (unsigned long long) timestamp);\n    fprintf (logf, \"  realm_len=%zu, digest_size=%zu, nonce_size=%zu\\n\",\n             realm_len, digest_get_size (da), nonce_size);\n    fflush (logf);\n  }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  /* Probe around the assertion that is reported as dead code. Log the\n     computed value so agents can see the assertion is always satisfied. */\n  if (logf != NULL)\n  {\n    fprintf (logf, \"  probe: about to evaluate mhd_assert(0 != nonce_size) -> nonce_size=%zu\\n\",\n             nonce_size);\n    fflush (logf);\n  }\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n  {\n    if (logf != NULL)\n    {\n      fprintf (logf, \"  digest_ext_error returned true; bailing out with false\\n\");\n      fflush (logf);\n      fclose (logf);\n    }\n    return false;\n  }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n  {\n    if (logf != NULL)\n    {\n      fprintf (logf, \"  daemon->nonce_nc_size == 0; returning false\\n\");\n      fflush (logf);\n      fclose (logf);\n    }\n    return false;\n  }\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  if (logf != NULL)\n  {\n    fprintf (logf, \"  nn index computed, nn=%p, nonce_size=%zu\\n\",\n             (void *) nn, nonce_size);\n    /* Log the generated nonce in hex (limited to reasonable length) */\n    fprintf (logf, \"  generated nonce (hex, first up to 64 bytes): \");\n    for (size_t i = 0; i < nonce_size && i < 64; ++i)\n      fprintf (logf, \"%02x\", (unsigned char) nonce[i]);\n    fprintf (logf, \"\\n\");\n    fflush (logf);\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    if (logf != NULL)\n    {\n      fprintf (logf, \"  slot is available: writing nonce into slot\\n\");\n      fflush (logf);\n    }\n\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n  {\n    if (logf != NULL)\n    {\n      fprintf (logf, \"  slot is NOT available: not updating slot\\n\");\n      fflush (logf);\n    }\n    ret = false;\n  }\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  if (logf != NULL)\n  {\n    fprintf (logf, \"  returning ret=%d\\n\", ret ? 1 : 0);\n    fflush (logf);\n    fclose (logf);\n  }\n\n  return ret;\n}\n"
}