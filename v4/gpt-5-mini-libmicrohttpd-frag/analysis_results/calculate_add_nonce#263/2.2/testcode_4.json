{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion tests equality of two compile-time constants (MAX_DIGEST_NONCE_LENGTH and NONCE_STD_LEN(MAX_DIGEST)). If mhd_assert expands to an actual runtime check (i.e. it is active in the build), that check will always succeed and thus is an executed operation whose removal would not affect program behaviour \u2014 this is dead code and violates MISRA C 2023 Rule 2.2. (If mhd_assert is compiled out entirely the statement is not executed, but the important violation scenario is when the assertion is active and redundant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1858.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce:\n```c\nstatic bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce with it.\n  - Your function must have the exact same signature as calculate_add_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce (struct MHD_Connection *const connection,\n                     uint64_t timestamp,\n                     const char *realm,\n                     size_t realm_len,\n                     struct DigestAlgorithm *da,\n                     char *nonce)\n{\n  struct MHD_Daemon *const daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  const size_t nonce_size = NONCE_STD_LEN (digest_get_size (da));\n  bool ret;\n\n  /* Open a log file to record control flow and state for reproducing\n     the reported dead-code assertion scenario. Use append mode so\n     multiple calls accumulate evidence. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"ENTER calculate_add_nonce: connection=%p timestamp=%llu realm_len=%zu nonce_size=%zu daemon=%p\\n\",\n               (void *) connection,\n               (unsigned long long) timestamp,\n               realm_len,\n               nonce_size,\n               (void *) daemon);\n\n      /* Log values involved in the assertions so a reviewer can see\n         that the assertion comparing compile-time constants is\n         redundant. We print the two values used in the static check. */\n      /* Note: these macros expand to compile-time constants in the\n         build; printing them here documents the actual numeric values\n         observed at runtime (they are constant). */\n      fprintf (logf, \"ASSERT CHECKS: MAX_DIGEST_NONCE_LENGTH=%zu NONCE_STD_LEN(MAX_DIGEST)=%zu\\n\",\n               (size_t) MAX_DIGEST_NONCE_LENGTH,\n               (size_t) NONCE_STD_LEN (MAX_DIGEST));\n\n      fclose (logf);\n    }\n  }\n\n  mhd_assert (! da->hashing);\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH >= nonce_size);\n  mhd_assert (0 != nonce_size);\n\n  /* Record that we are about to call calculate_nonce and the parameters\n     of interest (we avoid logging large buffers other than a small hex\n     preview of the resulting nonce). */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"CALL calculate_nonce: method_http=%s method_internal=%s url_len=%zu headers_received=%u realm_len=%zu da_hash_size=%zu\\n\",\n               connection->rq.http_mthd ? connection->rq.http_mthd : \"(null)\",\n               connection->rq.method ? connection->rq.method : \"(null)\",\n               connection->rq.url_len,\n               (unsigned) connection->rq.headers_received,\n               realm_len,\n               (size_t) digest_get_size (da));\n      fclose (logf);\n    }\n  }\n\n  calculate_nonce (timestamp,\n                   connection->rq.http_mthd,\n                   connection->rq.method,\n                   daemon->digest_auth_random,\n                   daemon->digest_auth_rand_size,\n                   connection->addr,\n                   (size_t) connection->addr_len,\n                   connection->rq.url,\n                   connection->rq.url_len,\n                   connection->rq.headers_received,\n                   realm,\n                   realm_len,\n                   daemon->dauth_bind_type,\n                   da,\n                   nonce);\n\n  /* After calculate_nonce we log a short hex preview of the nonce. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"AFTER calculate_nonce: nonce_size=%zu nonce_preview=\", nonce_size);\n      for (size_t i = 0; i < nonce_size && i < 32; ++i)\n        fprintf (logf, \"%02x\", (unsigned char) nonce[i]);\n      if (nonce_size > 32)\n        fprintf (logf, \"..(truncated)\");\n      fprintf (logf, \"\\n\");\n      fclose (logf);\n    }\n  }\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n  if (digest_ext_error (da))\n    return false;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n  if (0 == daemon->nonce_nc_size)\n    return false;\n\n  /* Sanity check for values */\n  mhd_assert (MAX_DIGEST_NONCE_LENGTH == NONCE_STD_LEN (MAX_DIGEST));\n\n  /* Log the constant-equality assertion execution to provide direct\n     evidence if the assertion is active at runtime. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"EXECUTED sanity mhd_assert for compile-time constants: MAX_DIGEST_NONCE_LENGTH=%zu NONCE_STD_LEN(MAX_DIGEST)=%zu\\n\",\n               (size_t) MAX_DIGEST_NONCE_LENGTH,\n               (size_t) NONCE_STD_LEN (MAX_DIGEST));\n      fclose (logf);\n    }\n  }\n\n  nn = daemon->nnc + get_nonce_nc_idx (daemon->nonce_nc_size,\n                                       nonce,\n                                       nonce_size);\n\n  /* Log chosen index and pointer before attempting to acquire lock. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"Selected nn idx ptr=%p nn_index_info nonce_nc_size=%zu nonce_size=%zu\\n\",\n               (void *) nn,\n               (size_t) daemon->nonce_nc_size,\n               nonce_size);\n      fclose (logf);\n    }\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n  if (is_slot_available (nn, timestamp, nonce, nonce_size))\n  {\n    memcpy (nn->nonce,\n            nonce,\n            nonce_size);\n    nn->nonce[nonce_size] = 0;  /* With terminating zero */\n    nn->nc = 0;\n    nn->nmask = 0;\n    ret = true;\n\n    /* Log successful insertion into slot. */\n    {\n      FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n      if (logf)\n      {\n        fprintf (logf, \"SLOT AVAILABLE: inserted nonce into nn=%p nonce_size=%zu ret=true\\n\",\n                 (void *) nn,\n                 nonce_size);\n        /* Also log the stored nonce preview (null-terminated now). */\n        fprintf (logf, \"STORED nonce (as string)=%s\\n\", nn->nonce);\n        fclose (logf);\n      }\n    }\n  }\n  else\n    ret = false;\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  /* Final outcome log. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1858.txt\", \"a\");\n    if (logf)\n    {\n      fprintf (logf, \"EXIT calculate_add_nonce: ret=%s\\n\", ret ? \"true\" : \"false\");\n      fclose (logf);\n    }\n  }\n\n  return ret;\n}\n"
}