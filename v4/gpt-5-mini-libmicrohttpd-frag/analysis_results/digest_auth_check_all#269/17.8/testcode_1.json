{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter 'nonce_timeout' (a non-pointer parameter) with: if (0 == nonce_timeout) nonce_timeout = connection->daemon->dauth_def_nonce_timeout; \u2014 this directly modifies the parameter variable, which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_auth_check_all code that contains useful probe functions that print useful logs to a file \"/tmp/logs/912.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_auth_check_all:\n```c\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_auth_check_all code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_auth_check_all with it.\n  - Your function must have the exact same signature as digest_auth_check_all.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_auth_check_all to check logs.\n  - Your function MUST preserve the original logic of digest_auth_check_all as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_auth_check_all will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_auth_check_all as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n  FILE *logf = NULL;\n\n  /* initialize local variables as in original implementation */\n  buf = NULL;\n  digest_setup_zero (&da);\n\n  /* Open log file for appending; if it fails, continue without logging. */\n  logf = fopen(\"/tmp/logs/912.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"ENTER digest_auth_check_all: connection=%p, realm=%s, username=%s, password=%s, userdigest=%p, nonce_timeout=%u, max_nc=%u, mqop=%d, malgo3=%d\\n\",\n            (void *)connection,\n            (realm ? realm : \"(null)\"),\n            (username ? username : \"(null)\"),\n            (password ? password : \"(null)\"),\n            (void *)userdigest,\n            (unsigned)nonce_timeout,\n            (unsigned)max_nc,\n            (int)mqop,\n            (int)malgo3);\n  }\n\n  /* Log and perform nonce timeout defaulting exactly as original code does. */\n  if (0 == nonce_timeout)\n  {\n    /* Dereference daemon here as in original code; this may crash if daemon is NULL, which matches original semantics. */\n    unsigned int def_nt = connection->daemon->dauth_def_nonce_timeout;\n    if (logf != NULL)\n      fprintf(logf, \"nonce_timeout == 0, assigning from daemon: daemon=%p, dauth_def_nonce_timeout=%u\\n\",\n              (void *)connection->daemon, (unsigned)def_nt);\n    nonce_timeout = def_nt;\n    if (logf != NULL)\n      fprintf(logf, \"nonce_timeout now=%u\\n\", (unsigned)nonce_timeout);\n  }\n  else\n  {\n    if (logf != NULL)\n      fprintf(logf, \"nonce_timeout non-zero, no assignment: nonce_timeout=%u\\n\", (unsigned)nonce_timeout);\n  }\n\n  /* Log and perform max_nc defaulting exactly as original code does. */\n  if (0 == max_nc)\n  {\n    uint32_t def_mnc = connection->daemon->dauth_def_max_nc;\n    if (logf != NULL)\n      fprintf(logf, \"max_nc == 0, assigning from daemon: daemon=%p, dauth_def_max_nc=%u\\n\",\n              (void *)connection->daemon, (unsigned)def_mnc);\n    max_nc = def_mnc;\n    if (logf != NULL)\n      fprintf(logf, \"max_nc now=%u\\n\", (unsigned)max_nc);\n  }\n  else\n  {\n    if (logf != NULL)\n      fprintf(logf, \"max_nc non-zero, no assignment: max_nc=%u\\n\", (unsigned)max_nc);\n  }\n\n  if (logf != NULL)\n    fprintf(logf, \"Calling digest_auth_check_all_inner: connection=%p, realm=%s, username=%s, password=%s, userdigest=%p, nonce_timeout=%u, max_nc=%u, mqop=%d, malgo3=%d\\n\",\n            (void *)connection,\n            (realm ? realm : \"(null)\"),\n            (username ? username : \"(null)\"),\n            (password ? password : \"(null)\"),\n            (void *)userdigest,\n            (unsigned)nonce_timeout,\n            (unsigned)max_nc,\n            (int)mqop,\n            (int)malgo3);\n\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n\n  if (logf != NULL)\n    fprintf(logf, \"Returned from digest_auth_check_all_inner: res=%d, buf=%p, da.ptr=%p\\n\",\n            (int)res, (void *)buf, (void *)&da);\n\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"EXIT digest_auth_check_all: res=%d\\n\", (int)res);\n    fclose(logf);\n  }\n\n  return res;\n}\n"
}