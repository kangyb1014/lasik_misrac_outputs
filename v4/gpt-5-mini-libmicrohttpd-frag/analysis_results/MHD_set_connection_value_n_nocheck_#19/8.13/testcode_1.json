{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'value' is declared as 'const char *value' but 'pos->value' is (presumably) a non-const pointer (e.g. 'char *'). The assignment 'pos->value = value;' therefore discards the const qualifier and makes a pointer point to a non-const-qualified type. This violates MISRA C 2023 Rule 8.13. Corrective action: declare 'pos->value' as 'const char *' (or otherwise ensure the pointed-to type is const-qualified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n_nocheck_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2505.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n_nocheck_:\n```c\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value_n_nocheck_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value_n_nocheck_ with it.\n  - Your function must have the exact same signature as MHD_set_connection_value_n_nocheck_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value_n_nocheck_ to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value_n_nocheck_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value_n_nocheck_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value_n_nocheck_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *logf = fopen(\"/tmp/logs/2505.txt\", \"a\");\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"ENTER: MHD_set_connection_value_n_nocheck_\\n\");\n    fprintf(logf, \"  connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n    /* print key and value up to provided sizes (may not be NUL-terminated) */\n    if (key != NULL)\n      fprintf(logf, \"  key (up to size): '%.*s'\\n\", (int)key_size, key);\n    else\n      fprintf(logf, \"  key is NULL\\n\");\n    if (value != NULL)\n      fprintf(logf, \"  value (up to size): '%.*s'\\n\", (int)value_size, value);\n    else\n      fprintf(logf, \"  value is NULL\\n\");\n  }\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n  {\n    if (logf != NULL)\n    {\n      fprintf(logf, \"  allocation failed: pos == NULL -> returning MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"  allocation succeeded: pos=%p\\n\", (void *)pos);\n  }\n\n  pos->header = key;\n  pos->header_size = key_size;\n  /* The following assignment intentionally demonstrates the const-discarding\n     scenario that can trigger MISRA Rule 8.13: 'value' is const char * but\n     pos->value is (presumably) a non-const char * member. */\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"  after assignment: pos->header=%p pos->header_size=%zu pos->value=%p pos->value_size=%zu\\n\",\n            (void *)pos->header, pos->header_size, (void *)pos->value, pos->value_size);\n    fprintf(logf, \"  NOTE: pos->value assigned from const char* 'value' -> potential const-discard\\n\");\n  }\n\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    if (logf != NULL)\n      fprintf(logf, \"  headers_received_tail is NULL: inserting first element\\n\");\n\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    if (logf != NULL)\n      fprintf(logf, \"  appending to existing headers_received_tail=%p\\n\",\n              (void *)connection->rq.headers_received_tail);\n\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"EXIT: returning MHD_YES, headers_received_tail=%p\\n\",\n            (void *)connection->rq.headers_received_tail);\n    fclose(logf);\n  }\n\n  return MHD_YES;\n}\n"
}