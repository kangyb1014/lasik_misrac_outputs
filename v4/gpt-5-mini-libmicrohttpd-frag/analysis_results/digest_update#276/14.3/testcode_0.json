{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a macro that uses the supplied expression as a controlling expression (for example: #define mhd_assert(x) do { if (!(x)) mhd_assert_fail(); } while(0) or #define mhd_assert(x) ((void)((x) ? 0 : mhd_assert_fail())) ), then the call mhd_assert(0) yields an invariant controlling expression (if(1) or the conditional's controlling expression is constant). That expansion therefore violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1999.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_update:\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_update with it.\n  - Your function must have the exact same signature as digest_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_update to check logs.\n  - Your function MUST preserve the original logic of digest_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n#include <stdio.h>\n\n  /* Probe variables to avoid double evaluation of expressions that may have side effects */\n  int cond_uninitialised = ! da->uninitialised;\n  int cond_algo_selected = da->algo_selected;\n  int cond_ready_for_hashing = da->ready_for_hashing;\n\n  /* Log entry and initial state to aid reproduction of the reported violation scenario. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"digest_update: entry\\n\");\n      fprintf(log, \"  da=%p length=%zu\\n\", (void *) da, length);\n      fprintf(log, \"  initial state: uninitialised=%d, algo_selected=%d, ready_for_hashing=%d, algo=%d\\n\",\n              da->uninitialised, da->algo_selected, da->ready_for_hashing, (int) da->algo);\n      fprintf(log, \"  evaluated conditions: !da->uninitialised=%d, da->algo_selected=%d, da->ready_for_hashing=%d\\n\",\n              cond_uninitialised, cond_algo_selected, cond_ready_for_hashing);\n      fclose(log);\n    }\n  }\n\n  /* Preserve original assertion semantics while providing logs immediately before each assertion.\n     This ensures that, even if an assertion macro expands into constructs with invariant\n     controlling expressions, the state leading up to that call is recorded. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"calling mhd_assert(! da->uninitialised) with value=%d\\n\", cond_uninitialised);\n      fclose(log);\n    }\n  }\n  mhd_assert (cond_uninitialised);\n\n  {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"calling mhd_assert(da->algo_selected) with value=%d\\n\", cond_algo_selected);\n      fclose(log);\n    }\n  }\n  mhd_assert (cond_algo_selected);\n\n  {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"calling mhd_assert(da->ready_for_hashing) with value=%d\\n\", cond_ready_for_hashing);\n      fclose(log);\n    }\n  }\n  mhd_assert (cond_ready_for_hashing);\n\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo) {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log) { fprintf(log, \"taking MD5 branch\\n\"); fclose(log); }\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo) {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log) { fprintf(log, \"taking SHA256 branch\\n\"); fclose(log); }\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo) {\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log) { fprintf(log, \"taking SHA512_256 branch\\n\"); fclose(log); }\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n    /* Log the unexpected path and the invariant assertion that follows. */\n    FILE *log = fopen(\"/tmp/logs/1999.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"no matching algorithm branch taken; about to call mhd_assert(0)\\n\");\n      fprintf(log, \"This is the point that reproduces the reported MISRA 14.3 scenario if the mhd_assert macro\\n\");\n      fprintf(log, \"is implemented using a controlling expression based on the supplied argument (e.g., if (x) ...).\\n\");\n      fclose(log);\n    }\n\n    /* Preserve original behavior: this assertion is intended to be unreachable. */\n    mhd_assert (0);   /* May not happen */\n  }\n\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n"
}