{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement \u201c(void) emsg;\u201d is executed but has no effect on program behaviour (it only suppresses an unused-parameter warning). Removing that statement does not change runtime behaviour for a normal const char * parameter, so it constitutes dead code under Rule 2.2. (Only if evaluating the parameter had observable side-effects \u2014 e.g. emsg were volatile or its evaluation triggered a side-effect \u2014 would this not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_close_error code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2248.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_close_error:\n```c\nstatic void\nconnection_close_error (struct MHD_Connection *connection,\n                        const char *emsg)\n{\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  if (NULL != emsg)\n    MHD_DLOG (connection->daemon,\n              \"%s\\n\",\n              emsg);\n#else  /* ! HAVE_MESSAGES */\n  (void) emsg; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n  MHD_connection_close_ (connection,\n                         MHD_REQUEST_TERMINATED_WITH_ERROR);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_close_error code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_close_error with it.\n  - Your function must have the exact same signature as connection_close_error.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_close_error to check logs.\n  - Your function MUST preserve the original logic of connection_close_error as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_close_error will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_close_error as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nconnection_close_error (struct MHD_Connection *connection,\n                        const char *emsg)\n{\n  /* Preserve original behavior flags */\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  if (NULL != emsg)\n    MHD_DLOG (connection->daemon,\n              \"%s\\n\",\n              emsg);\n#else  /* ! HAVE_MESSAGES */\n  /* Keep the original intent: mute compiler warning by evaluating the\n     parameter without changing program behaviour. */\n  (void) emsg; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n  /* Probe logging: record control flow and state to a file so other\n     agents can reproduce and gather evidence about the (void) emsg\n     execution path. We deliberately do not dereference emsg when\n     HAVE_MESSAGES is not defined; we only log the pointer value and\n     whether it is NULL to avoid altering program behaviour. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2248.txt\", \"a\");\n    if (NULL != fp)\n      {\n        fprintf(fp,\n                \"connection_close_error: entered; connection=%p; stop_with_error=%d; discard_request=%d; HAVE_MESSAGES=%d; emsg_ptr=%p; emsg_is_null=%d\\n\",\n                (void *) connection,\n                connection->stop_with_error ? 1 : 0,\n                connection->discard_request ? 1 : 0,\n#ifdef HAVE_MESSAGES\n                1,\n#else\n                0,\n#endif\n                (const void *) emsg,\n                emsg == NULL ? 1 : 0);\n#ifdef HAVE_MESSAGES\n        if (NULL != emsg)\n          fprintf(fp, \"connection_close_error: emsg=\\\"%s\\\"\\n\", emsg);\n#endif\n        fclose(fp);\n      }\n  }\n\n  MHD_connection_close_ (connection,\n                         MHD_REQUEST_TERMINATED_WITH_ERROR);\n}\n"
}