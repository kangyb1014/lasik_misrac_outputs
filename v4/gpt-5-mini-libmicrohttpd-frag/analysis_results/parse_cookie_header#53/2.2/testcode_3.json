{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen the code is compiled with HAVE_MESSAGES not defined, the statement \"(void) saved_tail;\" is executed solely to suppress an unused-variable warning. This cast has no effect on program behaviour \u2014 removing it would not change runtime behaviour \u2014 so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_cookie_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4108.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_cookie_header:\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_cookie_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_cookie_header with it.\n  - Your function must have the exact same signature as parse_cookie_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_cookie_header to check logs.\n  - Your function MUST preserve the original logic of parse_cookie_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_cookie_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_cookie_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  /* Logging probe: attempt to open the log file. If it fails, continue\n     without logging to avoid changing program behaviour. */\n  FILE *mhd_logf = NULL;\n  mhd_logf = fopen(\"/tmp/logs/4108.txt\", \"a\");\n  if (mhd_logf)\n  {\n    fprintf (mhd_logf,\n             \"parse_cookie_header ENTER: connection=%p saved_tail=%p daemon=%p client_discipline=%d\\n\",\n             (void *) connection,\n             (void *) saved_tail,\n             (void *) connection->daemon,\n             connection->daemon ? connection->daemon->client_discipline : -1);\n    fflush (mhd_logf);\n  }\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n  {\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: no Cookie header found -> returning MHD_PARSE_COOKIE_OK\\n\");\n      fclose (mhd_logf);\n    }\n    return MHD_PARSE_COOKIE_OK;\n  }\n  if (0 == hdr_len)\n  {\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: Cookie header length 0 -> returning MHD_PARSE_COOKIE_OK\\n\");\n      fclose (mhd_logf);\n    }\n    return MHD_PARSE_COOKIE_OK;\n  }\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n  {\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: allocation failed (cpy==NULL) -> parse_res = MHD_PARSE_COOKIE_NO_MEMORY\\n\");\n      fflush (mhd_logf);\n    }\n  }\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: calling parse_cookies_string with cpy+%zu (len=%zu)\\n\",\n               i, hdr_len - i);\n      fflush (mhd_logf);\n    }\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n\n    if (mhd_logf)\n    {\n      const char *prs = \"UNKNOWN\";\n      switch (parse_res)\n      {\n      case MHD_PARSE_COOKIE_OK: prs = \"MHD_PARSE_COOKIE_OK\"; break;\n      case MHD_PARSE_COOKIE_OK_LAX: prs = \"MHD_PARSE_COOKIE_OK_LAX\"; break;\n      case MHD_PARSE_COOKIE_MALFORMED: prs = \"MHD_PARSE_COOKIE_MALFORMED\"; break;\n      case MHD_PARSE_COOKIE_NO_MEMORY: prs = \"MHD_PARSE_COOKIE_NO_MEMORY\"; break;\n      default: prs = \"(other)\"; break;\n      }\n      fprintf (mhd_logf, \"parse_cookie_header: parse_cookies_string returned %s (%d)\\n\", prs, (int) parse_res);\n      fflush (mhd_logf);\n    }\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: case MHD_PARSE_COOKIE_OK_LAX: saved_tail=%p new_tail=%p\\n\",\n               (void *) saved_tail, (void *) connection->rq.headers_received_tail);\n      fflush (mhd_logf);\n    }\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        if (mhd_logf)\n        {\n          fprintf (mhd_logf, \"parse_cookie_header: MALFORMED and removing extracted values: restoring headers_received_tail from %p to %p\\n\",\n                   (void *) connection->rq.headers_received_tail, (void *) saved_tail);\n          fflush (mhd_logf);\n        }\n\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: case MHD_PARSE_COOKIE_MALFORMED: final saved_tail=%p headers_received_tail=%p allow_partially_correct_cookie=%d\\n\",\n               (void *) saved_tail, (void *) connection->rq.headers_received_tail,\n               allow_partially_correct_cookie ? 1 : 0);\n      fflush (mhd_logf);\n    }\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (mhd_logf)\n    {\n      fprintf (mhd_logf, \"parse_cookie_header: case MHD_PARSE_COOKIE_NO_MEMORY\\n\");\n      fflush (mhd_logf);\n    }\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  /* The original code had a cast to suppress an unused-variable warning. */\n  if (mhd_logf)\n  {\n    fprintf (mhd_logf, \"parse_cookie_header: executing the no-op cast (void) saved_tail; saved_tail=%p\\n\",\n             (void *) saved_tail);\n    fflush (mhd_logf);\n  }\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  if (mhd_logf)\n  {\n    fprintf (mhd_logf, \"parse_cookie_header EXIT: returning %d\\n\", (int) parse_res);\n    fclose (mhd_logf);\n  }\n\n  return parse_res;\n}\n"
}