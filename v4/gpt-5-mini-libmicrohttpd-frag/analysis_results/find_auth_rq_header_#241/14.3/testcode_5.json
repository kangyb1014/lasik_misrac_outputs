{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(0) likely expands to a control statement such as if (!(0)) { /* fail */ } which becomes if (1) { /* fail */ } \u2014 an invariant (always-true) controlling expression in the expanded code. This is a breach of Rule 14.3 (controlling expressions shall not be invariant).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/349.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified find_auth_rq_header_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original find_auth_rq_header_ with it.\n  - Your function must have the exact same signature as find_auth_rq_header_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call find_auth_rq_header_ to check logs.\n  - Your function MUST preserve the original logic of find_auth_rq_header_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, find_auth_rq_header_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  /* Ensure FILE prototypes are available even if the surrounding file\n   * doesn't include <stdio.h>. Including headers inside a function is\n   * valid at preprocessing time and keeps this replacement self-contained. */\n#include <stdio.h>\n\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n  FILE *log = fopen(\"/tmp/logs/349.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"enter find_auth_rq_header_: this=%p, c=%p, state=%u, type=%d\\n\",\n            (void *) &find_auth_rq_header_, (void *) c,\n            (unsigned int) (c ? c->state : 0U), (int) type);\n    fflush(log);\n  }\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n  {\n    if (log)\n    {\n      fprintf(log, \"early exit: headers not processed (state=%u)\\n\",\n              (unsigned int) c->state);\n      fclose(log);\n    }\n    return false;\n  }\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n    if (log)\n    {\n      fprintf(log, \"selected DIGEST token=%p token_len=%zu\\n\",\n              (void *) token, token_len);\n      fflush(log);\n    }\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n    if (log)\n    {\n      fprintf(log, \"selected BASIC token=%p token_len=%zu\\n\",\n              (void *) token, token_len);\n      fflush(log);\n    }\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    /* Reproduce and log the unexpected branch that leads to mhd_assert(0). */\n    if (log)\n    {\n      fprintf(log, \"unexpected auth type: %d -- about to call mhd_assert(0) and return false\\n\",\n              (int) type);\n      fflush(log);\n      /* Keep the log open briefly to ensure the assertion and return\n       * sequence is captured. Do not close here if mhd_assert may longjmp/abort. */\n    }\n    mhd_assert (0);\n    if (log)\n    {\n      /* If execution continues past mhd_assert (e.g., if it's a no-op in\n       * the build), close the log and return consistently. */\n      fprintf(log, \"mhd_assert(0) returned/was a no-op; returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (log)\n    {\n      fprintf(log, \"iter header: h=%p kind=%d header_size=%zu value_size=%zu header=%p value=%p\\n\",\n              (void *) h, (int) h->kind, h->header_size, h->value_size,\n              (void *) h->header, (void *) h->value);\n      fflush(log);\n    }\n\n    if (MHD_HEADER_KIND != h->kind)\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: kind mismatch (expected %d, got %d)\\n\",\n                MHD_HEADER_KIND, (int) h->kind);\n        fflush(log);\n      }\n      continue;\n    }\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: header_size mismatch (expected %zu, got %zu)\\n\",\n                MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION), h->header_size);\n        fflush(log);\n      }\n      continue;\n    }\n    if (token_len > h->value_size)\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: token_len (%zu) > value_size (%zu)\\n\", token_len, h->value_size);\n        fflush(log);\n      }\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: header name not equal (caseless)\\n\");\n        fflush(log);\n      }\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: token not equal at start of value (token_len=%zu)\\n\", token_len);\n        fflush(log);\n      }\n      continue;\n    }\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (log)\n      {\n        fprintf(log, \"  candidate match: token_len=%zu value_size=%zu char_after_token='%c'\\n\",\n                token_len, h->value_size,\n                (token_len < h->value_size) ? h->value[token_len] : '\\0');\n        fflush(log);\n      }\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n        if (log)\n        {\n          fprintf(log, \"  assigned auth_value: str=%p len=%zu (skipped whitespace)\\n\",\n                  (void *) auth_value->str, auth_value->len);\n          fflush(log);\n        }\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n        if (log)\n        {\n          fprintf(log, \"  assigned auth_value: str=%p len=%zu (no whitespace)\\n\",\n                  (void *) auth_value->str, auth_value->len);\n          fflush(log);\n        }\n      }\n      if (log)\n      {\n        fprintf(log, \"found match: returning true\\n\");\n        fclose(log);\n      }\n      return true; /* Found a match */\n    }\n    else\n    {\n      if (log)\n      {\n        fprintf(log, \"  skip: char after token is not space or tab and sizes don't match\\n\");\n        fflush(log);\n      }\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"no matching header has been found: returning false\\n\");\n    fclose(log);\n  }\n  return false; /* No matching header has been found */\n}\n"
}