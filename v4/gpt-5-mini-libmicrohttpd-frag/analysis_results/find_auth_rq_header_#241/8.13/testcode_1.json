{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf auth_value->str is declared as a non-const pointer (e.g. char *str in struct _MHD_str_w_len) while h->value refers to data that should be const (e.g. const char *value in the request header), then the assignment auth_value->str = h->value + token_len + 1; discards const-qualification. In that case Rule 8.13 is violated: auth_value->str should be declared as const char * (or otherwise const-qualified) to avoid removing const from the source pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified find_auth_rq_header_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/345.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of find_auth_rq_header_:\n```c\nstatic bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n    return false;\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (MHD_HEADER_KIND != h->kind)\n      continue;\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n      continue;\n    if (token_len > h->value_size)\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n      continue;\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n      continue;\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        auth_value->str = h->value + token_len + 1;\n        auth_value->len = h->value_size - (token_len + 1);\n      }\n      else\n      { /* No whitespace to skip */\n        auth_value->str = h->value + token_len;\n        auth_value->len = h->value_size - token_len;\n      }\n      return true; /* Found a match */\n    }\n  }\n  return false; /* No matching header has been found */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified find_auth_rq_header_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original find_auth_rq_header_ with it.\n  - Your function must have the exact same signature as find_auth_rq_header_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call find_auth_rq_header_ to check logs.\n  - Your function MUST preserve the original logic of find_auth_rq_header_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, find_auth_rq_header_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of find_auth_rq_header_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nfind_auth_rq_header_ (const struct MHD_Connection *c, enum MHD_AuthType type,\n                      struct _MHD_str_w_len *auth_value)\n{\n  const struct MHD_HTTP_Req_Header *h;\n  const char *token;\n  size_t token_len;\n  FILE *log = fopen(\"/tmp/logs/345.txt\", \"a\");\n\n  if (log)\n    fprintf(log, \"Entered find_auth_rq_header_: c=%p type=%d auth_value=%p state=%d\\n\",\n            (const void *)c, (int) type, (void *) auth_value,\n            (int) c->state);\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= c->state);\n  if (MHD_CONNECTION_HEADERS_PROCESSED > c->state)\n  {\n    if (log)\n      fprintf(log, \"Early exit: headers not processed (state=%d)\\n\", (int) c->state);\n    if (log) fclose(log);\n    return false;\n  }\n\n#ifdef DAUTH_SUPPORT\n  if (MHD_AUTHTYPE_DIGEST == type)\n  {\n    token = _MHD_AUTH_DIGEST_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_DIGEST_BASE);\n    if (log)\n      fprintf(log, \"Auth type: DIGEST token=%s token_len=%zu\\n\", token, token_len);\n  }\n  else /* combined with the next line */\n#endif /* DAUTH_SUPPORT */\n#ifdef BAUTH_SUPPORT\n  if (MHD_AUTHTYPE_BASIC == type)\n  {\n    token = _MHD_AUTH_BASIC_BASE;\n    token_len = MHD_STATICSTR_LEN_ (_MHD_AUTH_BASIC_BASE);\n    if (log)\n      fprintf(log, \"Auth type: BASIC token=%s token_len=%zu\\n\", token, token_len);\n  }\n  else /* combined with the next line */\n#endif /* BAUTH_SUPPORT */\n  {\n    mhd_assert (0);\n    if (log)\n      fprintf(log, \"Unknown auth type: %d - asserting and exiting\\n\", (int) type);\n    if (log) fclose(log);\n    return false;\n  }\n\n  for (h = c->rq.headers_received; NULL != h; h = h->next)\n  {\n    if (log)\n      fprintf(log, \"Inspect header: h=%p kind=%d header_size=%zu value_size=%zu header=%p value=%p\\n\",\n              (const void *) h, (int) h->kind, (size_t) h->header_size,\n              (size_t) h->value_size, (const void *) h->header, (const void *) h->value);\n\n    if (MHD_HEADER_KIND != h->kind)\n    {\n      if (log) fprintf(log, \"  Skipping: not a header kind\\n\");\n      continue;\n    }\n    if (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION) != h->header_size)\n    {\n      if (log) fprintf(log, \"  Skipping: header size mismatch (expected %zu got %zu)\\n\",\n                       (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_AUTHORIZATION), h->header_size);\n      continue;\n    }\n    if (token_len > h->value_size)\n    {\n      if (log) fprintf(log, \"  Skipping: token_len (%zu) > value_size (%zu)\\n\", token_len, h->value_size);\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_AUTHORIZATION,\n                                         h->header,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_AUTHORIZATION)))\n    {\n      if (log) fprintf(log, \"  Skipping: header name mismatch\\n\");\n      continue;\n    }\n    if (! MHD_str_equal_caseless_bin_n_ (h->value, token, token_len))\n    {\n      if (log) fprintf(log, \"  Skipping: token not matched at start of value\\n\");\n      continue;\n    }\n    /* Match only if token string is full header value or token is\n     * followed by space or tab\n     * Note: RFC 9110 (and RFC 7234) allows only space character, but\n     * tab is supported here as well for additional flexibility and uniformity\n     * as tabs are supported as separators between parameters.\n     */\n    if ((token_len == h->value_size) ||\n        (' ' == h->value[token_len]) || ('\\t'  == h->value[token_len]))\n    {\n      if (log)\n        fprintf(log, \"  Found potential match: h=%p value=%p value_size=%zu token_len=%zu char_after_token='%c'\\n\",\n                (const void *) h, (const void *) h->value, h->value_size, token_len,\n                (char) ((token_len < h->value_size) ? h->value[token_len] : '?'));\n\n      if (token_len != h->value_size)\n      { /* Skip whitespace */\n        const char *computed = h->value + token_len + 1;\n        size_t computed_len = h->value_size - (token_len + 1);\n        if (log)\n        {\n          fprintf(log, \"  Assigning auth_value->str = h->value + token_len + 1 -> computed=%p computed_len=%zu\\n\",\n                  (const void *) computed, computed_len);\n          /* Log the bytes (up to a limited amount) to aid reproduction */\n          if (computed && computed_len > 0)\n          {\n            size_t i, lim = computed_len < 64 ? computed_len : 64;\n            fprintf(log, \"  computed content (first %zu bytes): '\", lim);\n            for (i = 0; i < lim; ++i)\n            {\n              int c = (unsigned char) computed[i];\n              if (c >= 32 && c < 127) fputc(c, log);\n              else fputc('.', log);\n            }\n            fprintf(log, \"'\\n\");\n          }\n        }\n        auth_value->str = (char *) computed; /* original behavior preserved */\n        auth_value->len = computed_len;\n      }\n      else\n      { /* No whitespace to skip */\n        const char *computed = h->value + token_len;\n        size_t computed_len = h->value_size - token_len;\n        if (log)\n        {\n          fprintf(log, \"  Assigning auth_value->str = h->value + token_len -> computed=%p computed_len=%zu\\n\",\n                  (const void *) computed, computed_len);\n          if (computed && computed_len > 0)\n          {\n            size_t i, lim = computed_len < 64 ? computed_len : 64;\n            fprintf(log, \"  computed content (first %zu bytes): '\", lim);\n            for (i = 0; i < lim; ++i)\n            {\n              int c = (unsigned char) computed[i];\n              if (c >= 32 && c < 127) fputc(c, log);\n              else fputc('.', log);\n            }\n            fprintf(log, \"'\\n\");\n          }\n        }\n        auth_value->str = (char *) computed; /* original behavior preserved */\n        auth_value->len = computed_len;\n      }\n      if (log)\n      {\n        fprintf(log, \"  After assignment: auth_value=%p auth_value->str=%p auth_value->len=%zu\\n\",\n                (void *) auth_value, (const void *) auth_value->str, auth_value->len);\n        fclose(log);\n      }\n      return true; /* Found a match */\n    }\n  }\n  if (log)\n  {\n    fprintf(log, \"No matching header has been found -> returning false\\n\");\n    fclose(log);\n  }\n  return false; /* No matching header has been found */\n}\n"
}