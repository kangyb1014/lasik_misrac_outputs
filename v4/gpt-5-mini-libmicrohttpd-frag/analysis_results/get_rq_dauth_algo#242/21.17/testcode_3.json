{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro MHD_str_equal_caseless_s_bin_n_ expands to a routine that invokes a string/byte compare (e.g. memcmp/strncasecmp) using the provided length parameter directly, then passing algo_param->value.len as the compare length can cause the routine to read past the end of the concatenated token literal (_MHD_MD5_TOKEN _MHD_SESS_TOKEN) when algo_param->value.len is larger than the token length. In that case the token buffer would be accessed out-of-bounds and Rule 21.17 would be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_dauth_algo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_dauth_algo with it.\n  - Your function must have the exact same signature as get_rq_dauth_algo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_dauth_algo to check logs.\n  - Your function MUST preserve the original logic of get_rq_dauth_algo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_dauth_algo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  enum MHD_DigestAuthAlgo3 result = MHD_DIGEST_AUTH_ALGO3_INVALID;\n  FILE *fp = NULL;\n  size_t cmp_len = 0;\n  size_t tlen = 0;\n\n  /* Open log file for append; best-effort logging, do not change behavior on failure */\n  fp = fopen(\"/tmp/logs/1173.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"enter get_rq_dauth_algo: algo_param=%p, value.str=%p, value.len=%zu, quoted=%d\\n\",\n            (void *)algo_param, (void *)algo_param->value.str,\n            (size_t)algo_param->value.len, (int)algo_param->quoted);\n  }\n\n  /* Preserve original logic, but route all returns through 'done' to ensure logging */\n  if (NULL == algo_param->value.str)\n  {\n    if (fp)\n      fprintf(fp, \"value.str is NULL -> returning MHD_DIGEST_AUTH_ALGO3_MD5\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n    goto done;\n  }\n\n  cmp_len = (size_t)algo_param->value.len;\n\n  if (algo_param->quoted)\n  {\n    /* Quoted comparisons: token is the second parameter in the original functions */\n    /* Check MD5 token */\n    tlen = (sizeof(_MHD_MD5_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_MD5_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB when compare routine uses compare length directly\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n    {\n      if (fp) fprintf(fp, \"matched quoted MD5 token\\n\");\n      result = MHD_DIGEST_AUTH_ALGO3_MD5;\n      goto done;\n    }\n\n    /* Check SHA256 token */\n    tlen = (sizeof(_MHD_SHA256_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_SHA256_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n    {\n      if (fp) fprintf(fp, \"matched quoted SHA256 token\\n\");\n      result = MHD_DIGEST_AUTH_ALGO3_SHA256;\n      goto done;\n    }\n\n    /* Check MD5 + SESSION token concatenation */\n    tlen = (sizeof(_MHD_MD5_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_MD5_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      if (fp) fprintf(fp, \"matched quoted MD5+SESS token -> SHA512_256 (as per original logic)\\n\");\n      result = MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n      goto done;\n    }\n\n    /* The next check in original code has an odd formatting/comment; preserve it exactly */\n    tlen = (sizeof(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      {\n        if (fp) fprintf(fp, \"matched quoted SHA512_256+SESS token -> returning MD5_SESSION (preserve original behavior)\\n\");\n        result = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n        goto done;\n      }\n\n    tlen = (sizeof(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n    {\n      if (fp) fprintf(fp, \"matched quoted SHA256+SESS token\\n\");\n      result = MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n      goto done;\n    }\n\n    tlen = (sizeof(_MHD_SHA512_256_TOKEN) - 1);\n    if (fp)\n    {\n      fprintf(fp, \"quoted: checking _MHD_SHA512_256_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n              tlen, cmp_len);\n      if (cmp_len > tlen)\n        fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n                cmp_len, tlen);\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      if (fp) fprintf(fp, \"matched quoted SHA512_256 token -> session variant\\n\");\n      result = MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n      goto done;\n    }\n\n    /* No known algorithm has been detected */\n    if (fp) fprintf(fp, \"quoted: no known algorithm detected -> returning INVALID\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_INVALID;\n    goto done;\n  }\n\n  /* The algorithm value is not quoted */\n  /* Non-quoted comparisons: token appears as first parameter in original functions */\n  tlen = (sizeof(_MHD_MD5_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_MD5_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted MD5 token\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_MD5;\n    goto done;\n  }\n\n  tlen = (sizeof(_MHD_SHA256_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_SHA256_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted SHA256 token\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_SHA256;\n    goto done;\n  }\n\n  tlen = (sizeof(_MHD_SHA512_256_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_SHA512_256_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted SHA512_256 token\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    goto done;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n  tlen = (sizeof(_MHD_MD5_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_MD5_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted MD5+SESS token -> MD5_SESSION\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    goto done;\n  }\n\n  tlen = (sizeof(_MHD_SHA256_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_SHA256_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted SHA256+SESS token\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    goto done;\n  }\n\n  tlen = (sizeof(_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN) - 1);\n  if (fp)\n  {\n    fprintf(fp, \"non-quoted: checking _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN (token_len=%zu) against value.len=%zu\\n\",\n            tlen, cmp_len);\n    if (cmp_len > tlen)\n      fprintf(fp, \"WARNING: compare length (%zu) > token length (%zu) -> potential OOB\\n\",\n              cmp_len, tlen);\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n  {\n    if (fp) fprintf(fp, \"matched non-quoted SHA512_256+SESS token -> session variant\\n\");\n    result = MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    goto done;\n  }\n\n  /* No known algorithm has been detected */\n  if (fp) fprintf(fp, \"non-quoted: no known algorithm detected -> returning INVALID\\n\");\n  result = MHD_DIGEST_AUTH_ALGO3_INVALID;\n\ndone:\n  if (fp)\n  {\n    fprintf(fp, \"exit get_rq_dauth_algo: result=%d\\n\", (int)result);\n    fclose(fp);\n  }\n  return result;\n}\n"
}