{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call can lead to out\u2011of\u2011bounds access if algo_param->value.len does not reflect the actual size of the buffer pointed to by algo_param->value.str. The code only checks for NULL but does not verify that value.len \u2264 the allocation/available bytes for value.str; if value.len is larger (e.g. coming from untrusted input or not validated), MHD_str_equal_caseless_quoted_s_bin_n (which likely reads up to that length or calls memcmp/strncmp) can access past the end of the object and thus violate MISRA C 2023 Rule 21.17. (The adjacent macro concatenation of _MHD_MD5_TOKEN and _MHD_SESS_TOKEN itself is not the problem.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1173.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_dauth_algo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_dauth_algo with it.\n  - Your function must have the exact same signature as get_rq_dauth_algo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_dauth_algo to check logs.\n  - Your function MUST preserve the original logic of get_rq_dauth_algo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_dauth_algo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_dauth_algo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  enum MHD_DigestAuthAlgo3 ret = MHD_DIGEST_AUTH_ALGO3_INVALID;\n  FILE *logf = fopen(\"/tmp/logs/1173.txt\", \"a\");\n\n  if (logf)\n  {\n    /* Log entry and pointers/lengths without dereferencing the buffer contents */\n    fprintf(logf, \"ENTER get_rq_dauth_algo: algo_param=%p\\n\", (void *)algo_param);\n    if (algo_param)\n    {\n      fprintf(logf, \"  algo_param->value.str=%p\\n\", (void *)algo_param->value.str);\n      fprintf(logf, \"  algo_param->value.len=%zu\\n\", (size_t)algo_param->value.len);\n      fprintf(logf, \"  algo_param->quoted=%d\\n\", (int)algo_param->quoted);\n    }\n    else\n    {\n      fprintf(logf, \"  algo_param is NULL (will mirror original behaviour and likely crash on access)\\n\");\n    }\n    fflush(logf);\n  }\n\n  /* Preserve original control flow and order of checks. Instead of returning immediately,\n     set ret and jump to out so we can record which branch was taken. */\n\n  if (NULL == algo_param->value.str)\n  {\n    if (logf) { fprintf(logf, \"  Branch: value.str == NULL -> default MD5\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_MD5;\n    goto out;\n  }\n\n  if (algo_param->quoted)\n  {\n    if (logf) { fprintf(logf, \"  Branch: quoted == true\\n\"); fflush(logf); }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_MD5_TOKEN))\n    {\n      if (logf) { fprintf(logf, \"    Matched _MHD_MD5_TOKEN (quoted)\\n\"); fflush(logf); }\n      ret = MHD_DIGEST_AUTH_ALGO3_MD5;\n      goto out;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA256_TOKEN))\n    {\n      if (logf) { fprintf(logf, \"    Matched _MHD_SHA256_TOKEN (quoted)\\n\"); fflush(logf); }\n      ret = MHD_DIGEST_AUTH_ALGO3_SHA256;\n      goto out;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n    {\n      if (logf) { fprintf(logf, \"    Matched _MHD_MD5_TOKEN + _MHD_SESS_TOKEN (quoted) -> SHA512_256\\n\"); fflush(logf); }\n      ret = MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n      goto out;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA512_256_TOKEN\n                                               _MHD_SESS_TOKEN))\n    {\n      /* The original code has an odd layout here; preserve behaviour */\n      if (logf) { fprintf(logf, \"    Matched _MHD_SHA512_256_TOKEN + _MHD_SESS_TOKEN (quoted) -> MD5_SESSION (unsupported mapping)\\n\"); fflush(logf); }\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      ret = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n      goto out;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA256_TOKEN\n                                               _MHD_SESS_TOKEN))\n    {\n      if (logf) { fprintf(logf, \"    Matched _MHD_SHA256_TOKEN + _MHD_SESS_TOKEN (quoted) -> SHA256_SESSION\\n\"); fflush(logf); }\n      ret = MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n      goto out;\n    }\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str,\n                                               algo_param->value.len,\n                                               _MHD_SHA512_256_TOKEN))\n    {\n      if (logf) { fprintf(logf, \"    Matched _MHD_SHA512_256_TOKEN (quoted) -> SHA512_256_SESSION\\n\"); fflush(logf); }\n      ret = MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n      goto out;\n    }\n\n    /* No known algorithm has been detected */\n    if (logf) { fprintf(logf, \"    No quoted algorithm matched -> INVALID\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_INVALID;\n    goto out;\n  }\n\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_MD5_TOKEN (unquoted)\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_MD5;\n    goto out;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_SHA256_TOKEN (unquoted)\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_SHA256;\n    goto out;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_SHA512_256_TOKEN (unquoted)\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    goto out;\n  }\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_MD5_TOKEN + _MHD_SESS_TOKEN (unquoted) -> MD5_SESSION\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    goto out;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_SHA256_TOKEN + _MHD_SESS_TOKEN (unquoted) -> SHA256_SESSION\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    goto out;\n  }\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN,\n                                       algo_param->value.str,\n                                       algo_param->value.len))\n  {\n    if (logf) { fprintf(logf, \"  Matched _MHD_SHA512_256_TOKEN + _MHD_SESS_TOKEN (unquoted) -> SHA512_256_SESSION\\n\"); fflush(logf); }\n    ret = MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n    goto out;\n  }\n\n  /* No known algorithm has been detected */\n  if (logf) { fprintf(logf, \"  No unquoted algorithm matched -> INVALID\\n\"); fflush(logf); }\n  ret = MHD_DIGEST_AUTH_ALGO3_INVALID;\n\nout:\n  if (logf)\n  {\n    fprintf(logf, \"EXIT get_rq_dauth_algo: returning %d\\n\", (int)ret);\n    fflush(logf);\n    fclose(logf);\n  }\n  return ret;\n}\n"
}