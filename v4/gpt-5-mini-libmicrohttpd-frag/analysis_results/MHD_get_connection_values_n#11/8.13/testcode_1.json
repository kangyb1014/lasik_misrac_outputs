{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator 'pos' is declared as 'struct MHD_HTTP_Req_Header *pos' but is only used for read access inside the loop (pos->kind, pos->header, pos->header_size, pos->value, pos->value_size). Therefore it could be declared as 'const struct MHD_HTTP_Req_Header *pos' so the pointer would point to a const-qualified type. (Only if other code or the iterator callback requires modifying the pointed-to data would const-qualification be impossible.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_connection_values_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_values_n:\n```c\n_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n\n  if (NULL == iterator)\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  else\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n          return ret;\n      }\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_connection_values_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_connection_values_n with it.\n  - Your function must have the exact same signature as MHD_get_connection_values_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_connection_values_n to check logs.\n  - Your function MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_connection_values_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_connection_values_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN int\nMHD_get_connection_values_n (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             MHD_KeyValueIteratorN iterator,\n                             void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = NULL;\n\n  /* Attempt to open log file. If this fails, continue without logging. */\n  log = fopen(\"/tmp/logs/4335.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"Entered MHD_get_connection_values_n: connection=%p, kind=%lu, iterator=%p, iterator_cls=%p\\n\",\n            (void *)connection, (unsigned long)kind, (void *)iterator, iterator_cls);\n    fflush(log);\n  }\n\n  if (NULL == connection)\n  {\n    if (log)\n    {\n      fprintf(log, \"connection is NULL, returning -1\\n\");\n      fclose(log);\n    }\n    return -1;\n  }\n  ret = 0;\n\n  if (NULL == iterator)\n  {\n    if (log)\n    {\n      fprintf(log, \"Iterator is NULL: counting matching headers only\\n\");\n      fflush(log);\n    }\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (log)\n      {\n        fprintf(log, \"Visiting header node: pos=%p, kind=%lu, header=%p, header_size=%lu, value=%p, value_size=%lu\\n\",\n                (void *)pos,\n                (unsigned long)pos->kind,\n                (void *)pos->header,\n                (unsigned long)pos->header_size,\n                (void *)pos->value,\n                (unsigned long)pos->value_size);\n        fflush(log);\n      }\n\n      if (0 != (kind & pos->kind))\n        ret++;\n    }\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"Iterator provided: invoking callback for matching headers\\n\");\n      fflush(log);\n    }\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (log)\n      {\n        fprintf(log, \"Visiting header node: pos=%p, kind=%lu, header=%p, header_size=%lu, value=%p, value_size=%lu\\n\",\n                (void *)pos,\n                (unsigned long)pos->kind,\n                (void *)pos->header,\n                (unsigned long)pos->header_size,\n                (void *)pos->value,\n                (unsigned long)pos->value_size);\n        fflush(log);\n      }\n\n      if (0 != (kind & pos->kind))\n      {\n        ret++;\n        if (log)\n        {\n          fprintf(log, \"Header matched (incremented ret to %d). Calling iterator callback...\\n\", ret);\n          fflush(log);\n        }\n\n        if (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->header_size,\n                                pos->value,\n                                pos->value_size))\n        {\n          if (log)\n          {\n            fprintf(log, \"Iterator returned MHD_NO, returning ret=%d\\n\", ret);\n            fclose(log);\n          }\n          return ret;\n        }\n      }\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"Completed MHD_get_connection_values_n normally, ret=%d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}