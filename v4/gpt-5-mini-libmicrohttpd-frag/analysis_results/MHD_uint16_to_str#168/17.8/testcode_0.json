{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'val = (uint16_t) (val % divisor);' assigns to the function parameter 'val', thereby modifying a parameter variable. MISRA C 2023 Rule 17.8 prohibits modifying function parameters. To comply, make a local copy (e.g. 'uint16_t tmp = val;') and modify that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint16_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/712.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_uint16_to_str:\n```c\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_uint16_to_str code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_uint16_to_str with it.\n  - Your function must have the exact same signature as MHD_uint16_to_str.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_uint16_to_str to check logs.\n  - Your function MUST preserve the original logic of MHD_uint16_to_str as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_uint16_to_str will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_uint16_to_str as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n  int iter = 0;\n\n  /* Open log file (append) to record control flow and state */\n  {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ENTER MHD_uint16_to_str: val=%u, buf=%p, buf_size=%zu\\n\",\n              (unsigned) val, (void *) buf, buf_size);\n      fclose(f);\n    }\n  }\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Log after initial digit computation */\n  {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"initial: divisor=%u, digit=%d\\n\", (unsigned) divisor, digit);\n      fclose(f);\n    }\n  }\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log each shrink of divisor while skipping leading zeros */\n    {\n      FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"skip leading zeros: iter=%d, val=%u, divisor=%u, digit=%d\\n\",\n                iter, (unsigned) val, (unsigned) divisor, digit);\n        fclose(f);\n      }\n    }\n  }\n\n  while (0 != buf_size)\n  {\n    /* Log before writing a character */\n    {\n      FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"write iter=%d: chr_ptr=%p, buf_size=%zu, digit=%d, divisor=%u, val=%u\\n\",\n                iter, (void *) chr, buf_size, digit, (unsigned) divisor, (unsigned) val);\n        fclose(f);\n      }\n    }\n\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n    {\n      /* Log return for final digit */\n      {\n        FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \"return final: written=%td (chr-buf)\\n\", (ptrdiff_t) (chr - buf));\n          fclose(f);\n        }\n      }\n      return (size_t) (chr - buf);\n    }\n\n    /* This assignment modifies the function parameter 'val' (the reported violation) */\n    val = (uint16_t) (val % divisor);\n\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n\n    /* Log after updating val/divisor/digit */\n    {\n      FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"after mod: iter=%d, val=%u, divisor=%u, digit=%d, next_buf_size=%zu\\n\",\n                iter, (unsigned) val, (unsigned) divisor, digit, buf_size);\n        fclose(f);\n      }\n    }\n\n    iter++;\n  }\n\n  /* Log buffer-too-small case */\n  {\n    FILE *f = fopen(\"/tmp/logs/712.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"return 0: buffer too small, wrote=%td\\n\", (ptrdiff_t) (chr - buf));\n      fclose(f);\n    }\n  }\n  return 0; /* The buffer is too small */\n}\n"
}