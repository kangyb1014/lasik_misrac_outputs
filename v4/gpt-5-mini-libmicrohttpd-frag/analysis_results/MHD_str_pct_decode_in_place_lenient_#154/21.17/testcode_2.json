{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen MHD_FAVOR_SMALL_CODE is defined: len is obtained from strlen(str) and then passed as the destination limit to MHD_str_pct_decode_lenient_n_. The code then performs str[res] = 0 without a local check that res <= len (or that the caller supplied buffer is larger than len). If MHD_str_pct_decode_lenient_n_ were to return a value greater than len (for example because it does not enforce the passed dest length or due to a bug), the write at str[res] would write past the object\u2019s bounds and therefore violate Rule 21.17. (Also, if str is not NUL-terminated, the earlier strlen call itself can read out of bounds.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_pct_decode_in_place_lenient_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2113.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_pct_decode_in_place_lenient_:\n```c\nsize_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  len = strlen (str);\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  str[res] = 0;\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_pct_decode_in_place_lenient_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_pct_decode_in_place_lenient_ with it.\n  - Your function must have the exact same signature as MHD_str_pct_decode_in_place_lenient_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_pct_decode_in_place_lenient_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_pct_decode_in_place_lenient_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_pct_decode_in_place_lenient_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_pct_decode_in_place_lenient_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_str_pct_decode_in_place_lenient_ (char *str,\n                                      bool *broken_encoding)\n{\n  FILE *log = fopen(\"/tmp/logs/2113.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTRY: MHD_str_pct_decode_in_place_lenient_ str=%p broken_encoding=%p\\n\", (void *) str, (void *) broken_encoding);\n\n#ifdef MHD_FAVOR_SMALL_CODE\n  size_t len;\n  size_t res;\n\n  len = strlen (str);\n  if (log)\n    fprintf(log, \"FAVOR_SMALL_CODE: strlen(str) -> len=%zu\\n\", len);\n\n  res = MHD_str_pct_decode_lenient_n_ (str, len, str, len, broken_encoding);\n  if (log)\n    fprintf(log, \"FAVOR_SMALL_CODE: MHD_str_pct_decode_lenient_n_ returned res=%zu\\n\", res);\n\n  if (log && res > len)\n    fprintf(log, \"WARNING: res (%zu) > len (%zu) -> about to perform str[res] = 0 which may write out of bounds\\n\", res, len);\n\n  if (log)\n    fprintf(log, \"FAVOR_SMALL_CODE: about to write terminating NUL at str+%zu\\n\", res);\n\n  /* Preserve original behavior: perform the write (may trigger the violation in tests) */\n  str[res] = 0;\n\n  if (log)\n  {\n    fprintf(log, \"FAVOR_SMALL_CODE: wrote NUL at str+%zu, returning %zu\\n\", res, res);\n    fclose(log);\n  }\n\n  return res;\n#else  /* ! MHD_FAVOR_SMALL_CODE */\n  size_t r;\n  size_t w;\n  if (NULL != broken_encoding)\n    *broken_encoding = false;\n  if (log)\n    fprintf(log, \"NON_FAVOR_SMALL_CODE: initialized broken_encoding=false\\n\");\n  r = 0;\n  w = 0;\n  while (0 != str[r])\n  {\n    const char chr = str[r++];\n    if (log)\n      fprintf(log, \"LOOP: r=%zu w=%zu chr=0x%02x('%c')\\n\", r - 1, w, (unsigned char) chr, (chr >= 32 && chr < 127) ? chr : '?');\n    if ('%' == chr)\n    {\n      const char d1 = str[r++];\n      if (log)\n        fprintf(log, \"PERCENT: saw '%%', d1=%p (char 0x%02x) r now=%zu\\n\", (void *) &str[r-1], (unsigned char) d1, r);\n      if (0 == d1)\n      {\n        if (NULL != broken_encoding)\n          *broken_encoding = true;\n        str[w++] = chr; /* Copy \"as is\" */\n        str[w] = 0;\n        if (log)\n        {\n          fprintf(log, \"EARLY_RETURN: d1==0 -> broken_encoding=true, wrote chr at w-1=%zu, terminating at w=%zu\\n\", w - 1, w);\n          fclose(log);\n        }\n        return w;\n      }\n      else\n      {\n        const char d2 = str[r++];\n        if (log)\n          fprintf(log, \"PERCENT: d2=%p (char 0x%02x) r now=%zu\\n\", (void *) &str[r-1], (unsigned char) d2, r);\n        if (0 == d2)\n        {\n          if (NULL != broken_encoding)\n            *broken_encoding = true;\n          str[w++] = chr; /* Copy \"as is\" */\n          str[w++] = d1; /* Copy \"as is\" */\n          str[w] = 0;\n          if (log)\n          {\n            fprintf(log, \"EARLY_RETURN: d2==0 -> broken_encoding=true, copied '%%' and d1, terminating at w=%zu\\n\", w);\n            fclose(log);\n          }\n          return w;\n        }\n        else\n        {\n          const int h = toxdigitvalue (d1);\n          const int l = toxdigitvalue (d2);\n          unsigned char out;\n          if ((0 > h) || (0 > l))\n          {\n            if (NULL != broken_encoding)\n              *broken_encoding = true;\n            str[w++] = chr; /* Copy \"as is\" */\n            str[w++] = d1;\n            str[w++] = d2;\n            if (log)\n              fprintf(log, \"INVALID_HEX: toxdigitvalue(d1)=%d toxdigitvalue(d2)=%d -> copied as-is, new w=%zu\\n\", h, l, w);\n            continue;\n          }\n          out =\n            (unsigned char) (((uint8_t) (((uint8_t) ((unsigned int) h)) << 4))\n                             | ((uint8_t) ((unsigned int) l)));\n          str[w++] = (char) out;\n          if (log)\n            fprintf(log, \"DECODED: d1='%c' d2='%c' -> out=0x%02x stored at w-1=%zu\\n\", d1, d2, (unsigned) out, w - 1);\n          continue;\n        }\n      }\n    }\n    str[w++] = chr;\n  }\n  str[w] = 0;\n  if (log)\n  {\n    fprintf(log, \"EXIT: loop finished, final w=%zu, wrote terminating NUL, returning %zu\\n\", w, w);\n    fclose(log);\n  }\n  return w;\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n}\n"
}