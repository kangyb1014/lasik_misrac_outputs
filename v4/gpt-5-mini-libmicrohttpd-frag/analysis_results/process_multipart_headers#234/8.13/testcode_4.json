{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of try_match_header declares its first parameter as a non-const pointer (for example: int try_match_header(char *header, size_t len, char *buf, char **out)), then the call try_match_header(\"Content-Transfer-Encoding: \", ...) passes a string literal to a non-const char * parameter. That causes a pointer to a string literal to be treated as pointing to a non-const type, violating MISRA C 2023 Rule 8.13. (Fix: change the function prototype to take const char * for the header argument.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1425.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_multipart_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_multipart_headers with it.\n  - Your function must have the exact same signature as process_multipart_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_multipart_headers to check logs.\n  - Your function MUST preserve the original logic of process_multipart_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_multipart_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_multipart_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  FILE *log = fopen(\"/tmp/logs/1425.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER process_multipart_headers: pp=%p, buffer_pos=%zu, buffer_size=%zu, *ioffptr=%zu, next_state=%d\\n\",\n            (void *)pp,\n            (size_t)pp->buffer_pos,\n            (size_t)pp->buffer_size,\n            (size_t)(ioffptr ? *ioffptr : 0),\n            (int)next_state);\n    fflush(log);\n  }\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  if (log)\n  {\n    fprintf(log, \"scanned newline=%zu (buffer_pos=%zu)\\n\", newline, (size_t)pp->buffer_pos);\n    fflush(log);\n  }\n\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    if (log)\n    {\n      fprintf(log, \"ERROR: newline == buffer_size -> set PP_Error, returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    if (log)\n    {\n      fprintf(log, \"NEED MORE DATA: newline == buffer_pos -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    if (log)\n    {\n      fprintf(log, \"EMPTY LINE: end of headers -> skip_rn=RN_Full, state=%d, returning MHD_YES\\n\", (int)pp->state);\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n\n  if (log)\n  {\n    fprintf(log, \"HEADER: buf=%p -> '%s' (newline=%zu)\\n\", (void *)buf, buf, newline);\n    fflush(log);\n  }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    char *valptr1 = &buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")];\n    char *valptr2 = &buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")];\n    if (log)\n    {\n      fprintf(log, \"BRANCH: Content-disposition matched. name_ptr=%p, filename_ptr=%p\\n\",\n              (void *)valptr1, (void *)valptr2);\n      fflush(log);\n    }\n    try_get_value (valptr1,\n                   \"name\",\n                   &pp->content_name);\n    if (log)\n    {\n      fprintf(log, \"AFTER try_get_value(name): content_name=%p\\n\", (void *)pp->content_name);\n      fflush(log);\n    }\n    try_get_value (valptr2,\n                   \"filename\",\n                   &pp->content_filename);\n    if (log)\n    {\n      fprintf(log, \"AFTER try_get_value(filename): content_filename=%p\\n\", (void *)pp->content_filename);\n      fflush(log);\n    }\n  }\n  else\n  {\n    /* Prepare pointers to the string literals used as headers so we can log their addresses. */\n    const char *hdr_ct = \"Content-type: \";\n    const char *hdr_cte = \"Content-Transfer-Encoding: \";\n\n    if (log)\n    {\n      fprintf(log, \"BRANCH: Other headers. hdr_ct=%p ('%s'), hdr_cte=%p ('%s'), buf=%p\\n\",\n              (void *)hdr_ct, hdr_ct,\n              (void *)hdr_cte, hdr_cte,\n              (void *)buf);\n      fflush(log);\n    }\n\n    if (log)\n    {\n      fprintf(log, \"CALL try_match_header for Content-type: header_ptr=%p, header_len=%zu, buf_ptr=%p, out_ptr=%p\\n\",\n              (void *)hdr_ct,\n              (size_t)MHD_STATICSTR_LEN_(\"Content-type: \"),\n              (void *)buf,\n              (void *)&pp->content_type);\n      fflush(log);\n    }\n    try_match_header (hdr_ct,\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    if (log)\n    {\n      fprintf(log, \"AFTER try_match_header Content-type: content_type=%p\\n\", (void *)pp->content_type);\n      fflush(log);\n    }\n\n    if (log)\n    {\n      fprintf(log, \"CALL try_match_header for Content-Transfer-Encoding: header_ptr=%p, header_len=%zu, buf_ptr=%p, out_ptr=%p\\n\",\n              (void *)hdr_cte,\n              (size_t)MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \"),\n              (void *)buf,\n              (void *)&pp->content_transfer_encoding);\n      fflush(log);\n    }\n    try_match_header (hdr_cte,\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n    if (log)\n    {\n      fprintf(log, \"AFTER try_match_header Content-Transfer-Encoding: content_transfer_encoding=%p\\n\", (void *)pp->content_transfer_encoding);\n      fflush(log);\n    }\n  }\n  (*ioffptr) += newline + 1;\n  if (log)\n  {\n    fprintf(log, \"ADVANCE: new *ioffptr=%zu, returning MHD_YES\\n\", (size_t)*ioffptr);\n    fclose(log);\n  }\n  return MHD_YES;\n}\n"
}