{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")] (a char *) to try_get_value. If try_get_value\u2019s parameter is declared as char * (i.e. non-const) but the function only reads the string, then the pointer parameter is not const-qualified and Rule 8.13 is violated. The correct approach is for try_get_value to accept a const char * (or for the passed pointer to be const-qualified) when the function does not modify the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1425.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_multipart_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_multipart_headers with it.\n  - Your function must have the exact same signature as process_multipart_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_multipart_headers to check logs.\n  - Your function MUST preserve the original logic of process_multipart_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_multipart_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_multipart_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  FILE *fp = NULL;\n\n  /* Open log file for appending; best-effort logging. */\n  fp = fopen(\"/tmp/logs/1425.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"ENTER process_multipart_headers: pp=%p buf=%p buffer_pos=%zu buffer_size=%zu\\n\",\n            (void *)pp, (void *)buf, pp->buffer_pos, pp->buffer_size);\n    fflush(fp);\n  }\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  if (fp)\n  {\n    fprintf(fp, \"computed newline=%zu\\n\", newline);\n    fflush(fp);\n  }\n\n  if (newline == pp->buffer_size)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"newline == buffer_size -> setting state PP_Error and returning MHD_NO\\n\");\n      fclose(fp);\n    }\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"newline == buffer_pos -> need more data; returning MHD_NO\\n\");\n      fclose(fp);\n    }\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    if (fp)\n    {\n      fprintf(fp, \"empty line at beginning of buffer -> end of headers; setting skip_rn=RN_Full state=%d\\n\", (int)next_state);\n      fclose(fp);\n    }\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n  {\n    pp->skip_rn = RN_OptN;\n    if (fp)\n    {\n      fprintf(fp, \"found CR at newline -> set skip_rn=RN_OptN\\n\");\n      fflush(fp);\n    }\n  }\n  /* terminate the header line for easier logging/processing */\n  buf[newline] = '\\0';\n\n  if (fp)\n  {\n    /* log the header line (null-terminated now) */\n    fprintf(fp, \"header_line='%s'\\n\", buf);\n    fflush(fp);\n  }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    if (fp)\n    {\n      void *p = (void *)&buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")];\n      fprintf(fp, \"branch: Content-disposition matched; value_ptr=%p value_str='%s'\\n\",\n              p, (char *)p);\n      fflush(fp);\n    }\n\n    /* Calls as original; logging before each call to capture pointer passed */\n    if (fp)\n    {\n      fprintf(fp, \"calling try_get_value for name with pointer=%p\\n\",\n              (void *)&buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")]);\n      fflush(fp);\n    }\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n\n    if (fp)\n    {\n      fprintf(fp, \"calling try_get_value for filename with pointer=%p\\n\",\n              (void *)&buf[MHD_STATICSTR_LEN_(\"Content-disposition: \")]);\n      fflush(fp);\n    }\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    if (fp)\n    {\n      fprintf(fp, \"branch: other headers (trying Content-type and Content-Transfer-Encoding)\\n\");\n      fflush(fp);\n    }\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    if (fp)\n    {\n      fprintf(fp, \"called try_match_header for Content-type with buffer='%s'\\n\", buf);\n      fflush(fp);\n    }\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n    if (fp)\n    {\n      fprintf(fp, \"called try_match_header for Content-Transfer-Encoding with buffer='%s'\\n\", buf);\n      fflush(fp);\n    }\n  }\n\n  (*ioffptr) += newline + 1;\n  if (fp)\n  {\n    fprintf(fp, \"advancing *ioffptr by %zu -> new_ioff=%zu; leaving with MHD_YES\\n\",\n            newline + 1, *ioffptr);\n    fclose(fp);\n  }\n  return MHD_YES;\n}\n"
}