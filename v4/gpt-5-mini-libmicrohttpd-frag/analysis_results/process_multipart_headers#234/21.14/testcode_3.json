{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe buffer is explicitly NUL-terminated in the shown function (buf[newline] = '\\0'), so buf is a null-terminated string when try_match_header is called. If try_match_header performs the comparison by calling the Standard Library function memcmp to compare the header literal against buf (even with an explicit length such as MHD_STATICSTR_LEN_), that is using memcmp to compare a null-terminated string and thus violates MISRA C 2023 Rule 21.14. (If try_match_header instead uses a proper string comparison function such as strncmp/strncasecmp or a dedicated routine that does not use memcmp on NUL-terminated strings, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1424.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_multipart_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_multipart_headers with it.\n  - Your function must have the exact same signature as process_multipart_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_multipart_headers to check logs.\n  - Your function MUST preserve the original logic of process_multipart_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_multipart_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_multipart_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n  FILE *logf = fopen(\"/tmp/logs/1424.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER process_multipart_headers: pp=%p, buffer_pos=%zu, buffer_size=%zu, next_state=%d\\n\",\n            (void *)pp, pp->buffer_pos, pp->buffer_size, (int)next_state);\n    fflush(logf);\n  }\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  if (logf)\n  {\n    /* log the scan result and the header fragment (not assuming NUL-termination yet) */\n    fprintf(logf, \"scanned newline=%zu (buffer_pos=%zu). bytes up to newline: '\", newline, pp->buffer_pos);\n    if (newline > 0)\n    {\n      /* print only the bytes up to newline to avoid over-reading */\n      fprintf(logf, \"%.*s\", (int)newline, buf);\n    }\n    fprintf(logf, \"'\\n\");\n    fflush(logf);\n  }\n\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    if (logf)\n    {\n      fprintf(logf, \"newline == buffer_size -> set state=PP_Error, return MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"newline == buffer_pos -> need more data, return MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    if (logf)\n    {\n      fprintf(logf, \"empty line -> end of headers, set skip_rn=RN_Full, state=%d, return MHD_YES\\n\", (int)pp->state);\n      fclose(logf);\n    }\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n\n  /* Insert NUL termination as original code did and log the fact. */\n  if (logf)\n  {\n    fprintf(logf, \"about to NUL-terminate buf at index %zu (char before=0x%02x)\\n\",\n            newline, (unsigned int)(unsigned char)buf[newline]);\n    fflush(logf);\n  }\n  buf[newline] = '\\0';\n\n  if (logf)\n  {\n    fprintf(logf, \"buf after NUL-termination: '%s'\\n\", buf);\n    fflush(logf);\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"checking Content-disposition using MHD_str_equal_caseless_n_\\n\");\n    fflush(logf);\n  }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"matched Content-disposition header. calling try_get_value for name and filename\\n\");\n      fflush(logf);\n    }\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"did not match Content-disposition. will call try_match_header for Content-type and Content-Transfer-Encoding\\n\");\n      /* Log details relevant to the MISRA 21.14 scenario: buf is NUL-terminated and passed to try_match_header */\n      fprintf(logf, \"Preparing to call try_match_header with buf as a NUL-terminated string. buf='%s'\\n\", buf);\n      fprintf(logf, \"Content-type literal length (MHD_STATICSTR_LEN_): %zu\\n\",\n              (size_t)MHD_STATICSTR_LEN_(\"Content-type: \"));\n      fprintf(logf, \"Content-Transfer-Encoding literal length (MHD_STATICSTR_LEN_): %zu\\n\",\n              (size_t)MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \"));\n      fflush(logf);\n    }\n\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    if (logf)\n    {\n      fprintf(logf, \"returned from try_match_header for Content-type\\n\");\n      fflush(logf);\n    }\n\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n    if (logf)\n    {\n      fprintf(logf, \"returned from try_match_header for Content-Transfer-Encoding\\n\");\n      fflush(logf);\n    }\n  }\n\n  (*ioffptr) += newline + 1;\n  if (logf)\n  {\n    fprintf(logf, \"advancing ioffptr by %zu, new ioffptr value=%zu, returning MHD_YES\\n\",\n            newline + 1, *ioffptr);\n    fclose(logf);\n  }\n  return MHD_YES;\n}\n"
}