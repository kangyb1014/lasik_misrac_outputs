{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe expression &pp[1] yields a pointer one-past the struct object. If the MHD_PostProcessor object was not allocated with trailing bytes immediately after the struct (e.g. no trailing buffer or flexible array member), then casting that one-past-end address to char * and subsequently indexing (buf[newline]) or passing buf to string-handling routines (strlen, memcmp, etc., called directly or via helpers like MHD_str_equal_caseless_n_) can read/write beyond the bounds of the pp object. In that case string functions will access out-of-bounds memory and Rule 21.17 is violated. (If, however, the struct is deliberately allocated with extra storage immediately following it or defines a flexible array member for the buffer, the use is safe.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_multipart_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_multipart_headers with it.\n  - Your function must have the exact same signature as process_multipart_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_multipart_headers to check logs.\n  - Your function MUST preserve the original logic of process_multipart_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_multipart_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_multipart_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  /* Logging probe file. We try to write useful information for reproducing\n     the one-past-end/buffer scenario described in the violation report. */\n  FILE *log = fopen(\"/tmp/logs/1423.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"process_multipart_headers: entry\\n\");\n      fprintf(log, \"  pp=%p, &pp[1]=%p\\n\", (void *)pp, (void *)&pp[1]);\n      fprintf(log, \"  pp->buffer_pos=%zu, pp->buffer_size=%zu\\n\",\n              (size_t)pp->buffer_pos, (size_t)pp->buffer_size);\n      fflush(log);\n    }\n\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    {\n      if (log)\n        {\n          /* Log each step but avoid excessive output: only log the first few\n             bytes and periodically thereafter. */\n          if (newline < 64 || (newline < pp->buffer_pos && (newline % 64) == 0))\n            fprintf(log, \"  loop: newline=%zu, buf[%zu]=%02x ('%c')\\n\",\n                    newline, newline,\n                    (unsigned char) buf[newline],\n                    (buf[newline] >= 32 && buf[newline] < 127) ? buf[newline] : '?');\n          fflush(log);\n        }\n      newline++;\n    }\n\n  if (log)\n    {\n      fprintf(log, \"  after loop: newline=%zu\\n\", newline);\n      fflush(log);\n    }\n\n  if (newline == pp->buffer_size)\n  {\n    if (log)\n      {\n        fprintf(log, \"  condition: newline == pp->buffer_size -> PP_Error, return MHD_NO\\n\");\n        fflush(log);\n      }\n    pp->state = PP_Error;\n    if (log) fclose(log);\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    {\n      if (log)\n        {\n          fprintf(log, \"  condition: newline == pp->buffer_pos -> need more data, return MHD_NO\\n\");\n          fflush(log);\n          fclose(log);\n        }\n      return MHD_NO;              /* will need more data */\n    }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    if (log)\n      {\n        fprintf(log, \"  empty line: setting skip_rn=RN_Full, state=next_state, return MHD_YES\\n\");\n        fflush(log);\n        fclose(log);\n      }\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n\n  if (log)\n    {\n      fprintf(log, \"  header found at index %zu, char at newline before nul: 0x%02x ('%c')\\n\",\n              newline,\n              (unsigned char) buf[newline],\n              (buf[newline] >= 32 && buf[newline] < 127) ? buf[newline] : '?');\n      fflush(log);\n    }\n\n  buf[newline] = '\\0';\n\n  if (log)\n    {\n      /* Log the header string up to a reasonable length to avoid huge logs. */\n      size_t show_len = strlen(buf);\n      if (show_len > 256) show_len = 256;\n      fprintf(log, \"  header text (len=%zu, showing up to %zu bytes):\\n\", strlen(buf), show_len);\n      if (show_len > 0)\n        fwrite(buf, 1, show_len, log);\n      fprintf(log, \"\\n\");\n      fflush(log);\n    }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    if (log)\n      fprintf(log, \"  matched Content-disposition header\\n\");\n\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"  did not match Content-disposition, trying other headers\\n\");\n\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n\n  if (log)\n    {\n      fprintf(log, \"  advancing ioffptr by %zu -> was %zu\\n\", newline + 1, (size_t) *ioffptr);\n      fflush(log);\n      fclose(log);\n    }\n\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n"
}