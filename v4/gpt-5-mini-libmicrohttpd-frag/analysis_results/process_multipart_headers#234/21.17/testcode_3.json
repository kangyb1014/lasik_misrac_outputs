{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nLikely violated. The call passes buf and a fixed prefix length (MHD_STATICSTR_LEN_(\"Content-type: \")) to try_match_header without ensuring that the buffer contains at least that many bytes. If try_match_header implements the prefix comparison using a string.h routine that reads exactly the provided length (e.g. memcmp/strncmp with the length parameter), and the prefix length is greater than the number of bytes safely addressable in the object pointed to by buf (for example if pp->buffer_size or the remaining allocated bytes at &pp[1] are smaller than the prefix length, or the code only ensured newline < pp->buffer_pos but not that pp->buffer_size >= prefix_len), then the comparison can read past the end of the buffer and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_multipart_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_multipart_headers:\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_multipart_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_multipart_headers with it.\n  - Your function must have the exact same signature as process_multipart_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_multipart_headers to check logs.\n  - Your function MUST preserve the original logic of process_multipart_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_multipart_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_multipart_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  /* Logging: open log file and record entry and initial state */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"ENTER process_multipart_headers: pp=%p buf=%p buffer_pos=%zu buffer_size=%zu ioff=%zu next_state=%d\\n\",\n              (void *)pp, (void *)buf, pp->buffer_pos, pp->buffer_size, (size_t)(*ioffptr), (int)next_state);\n      fclose(logf);\n    }\n  }\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n\n  /* Log the scanned newline position and a hex dump (up to buffer_pos or 32 bytes) */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      size_t dump_len = pp->buffer_pos < 32 ? pp->buffer_pos : 32;\n      fprintf(logf, \"SCANNED newline=%zu (buffer_pos=%zu buffer_size=%zu)\\n\", newline, pp->buffer_pos, pp->buffer_size);\n      fprintf(logf, \"BUF DUMP (first %zu bytes):\", dump_len);\n      for (size_t i = 0; i < dump_len; ++i)\n        fprintf(logf, \" %02x\", (unsigned char)buf[i]);\n      fprintf(logf, \"\\n\");\n      fclose(logf);\n    }\n  }\n\n  if (newline == pp->buffer_size)\n  {\n    /* Log out-of-memory-like condition */\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: newline == buffer_size -> PP_Error. newline=%zu buffer_size=%zu\\n\",\n              newline, pp->buffer_size);\n      fclose(logf);\n    }\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: newline == buffer_pos -> need more data. newline=%zu buffer_pos=%zu\\n\",\n              newline, pp->buffer_pos);\n      fclose(logf);\n    }\n    return MHD_NO;              /* will need more data */\n  }\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: empty header line (newline==0) -> end of headers.\\n\");\n      fclose(logf);\n    }\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n\n  /* Null-terminate the header for parsing (as original) */\n  buf[newline] = '\\0';\n\n  /* Log the header string safely (only up to buffer_pos bytes) */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      size_t show_len = newline < 256 ? newline : 255;\n      fprintf(logf, \"PARSED HEADER (len=%zu): \", newline);\n      for (size_t i = 0; i < show_len; ++i)\n      {\n        unsigned char c = (unsigned char)buf[i];\n        if (c >= 0x20 && c <= 0x7e)\n          fprintf(logf, \"%c\", c);\n        else\n          fprintf(logf, \"\\\\x%02x\", c);\n      }\n      if (show_len < newline)\n        fprintf(logf, \"... (truncated)\");\n      fprintf(logf, \"\\n\");\n      fclose(logf);\n    }\n  }\n\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"MATCH: Content-disposition header. prefix_len=%zu\\n\",\n              (size_t) MHD_STATICSTR_LEN_(\"Content-disposition: \"));\n      fclose(logf);\n    }\n\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    /* Log the parameters used for try_match_header to capture potential over-read risk */\n    {\n      FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n      if (logf)\n      {\n        size_t pfx1 = (size_t) MHD_STATICSTR_LEN_(\"Content-type: \");\n        size_t pfx2 = (size_t) MHD_STATICSTR_LEN_(\"Content-Transfer-Encoding: \");\n        fprintf(logf, \"NO Content-disposition match -> attempting try_match_header for two headers.\\n\");\n        fprintf(logf, \"try_match_header 1: prefix=\\\"Content-type: \\\" prefix_len=%zu buf=%p newline=%zu buffer_pos=%zu buffer_size=%zu\\n\",\n                pfx1, (void *)buf, newline, pp->buffer_pos, pp->buffer_size);\n        fprintf(logf, \"try_match_header 2: prefix=\\\"Content-Transfer-Encoding: \\\" prefix_len=%zu buf=%p newline=%zu buffer_pos=%zu buffer_size=%zu\\n\",\n                pfx2, (void *)buf, newline, pp->buffer_pos, pp->buffer_size);\n        fclose(logf);\n      }\n    }\n\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/1423.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT process_multipart_headers: returning MHD_YES new_ioff=%zu state=%d skip_rn=%d\\n\",\n              (size_t)(*ioffptr), (int)pp->state, (int)pp->skip_rn);\n      fclose(logf);\n    }\n  }\n\n  return MHD_YES;\n}\n"
}