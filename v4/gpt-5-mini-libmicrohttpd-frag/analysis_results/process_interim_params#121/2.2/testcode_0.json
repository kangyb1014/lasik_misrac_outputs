{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen params->listen_fd equals MHD_INVALID_SOCKET the code executes the statement \u201c(void) 0;\u201d (a no-op). That operation has no effect on program behaviour and could be removed without changing behaviour, therefore it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_interim_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3228.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_interim_params:\n```c\nstatic bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      (void) 0; /* Use MHD-created socket */\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n        return false;\n      /* Ignore parameter if it is NULL */\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n          return false;\n        *psockaddr_len = params->server_addr_len;\n      }\n      else\n        *psockaddr_len = 0;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_interim_params code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_interim_params with it.\n  - Your function must have the exact same signature as process_interim_params.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_interim_params to check logs.\n  - Your function MUST preserve the original logic of process_interim_params as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_interim_params will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_interim_params as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  /* Minimal entry log to prove function was reached and record key state. */\n  {\n    FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n    if (___log)\n    {\n      (void) fprintf(___log, \"ENTER process_interim_params: d=%p, params=%p, fdset_size_set=%d, fdset_size=%d, listen_fd_set=%d, listen_fd=%lld\\n\",\n                     (void *) d,\n                     (void *) params,\n                     params ? (int) params->fdset_size_set : -1,\n                     params ? (int) params->fdset_size : 0,\n                     params ? (int) params->listen_fd_set : -1,\n                     params ? (long long) params->listen_fd : 0LL);\n      (void) fclose(___log);\n    }\n  }\n\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"EXIT process_interim_params: invalid fdset_size=%d -> return false\\n\",\n                         params->fdset_size);\n          (void) fclose(___log);\n        }\n      }\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"BRANCH: fdset_size_set && using_internal_polling_thread -> no action (void 0)\\n\");\n          (void) fclose(___log);\n        }\n      }\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"BRANCH: fdset_size_set && using_poll -> no action (void 0)\\n\");\n          (void) fclose(___log);\n        }\n      }\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        {\n          FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n          if (___log)\n          {\n            (void) fprintf(___log, \"EXIT process_interim_params: fdset_size mismatch app=%d platform=%d -> return false\\n\",\n                           params->fdset_size, (int) FD_SETSIZE);\n            (void) fclose(___log);\n          }\n        }\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"ACTION: overridden fdset_size set to %d by app\\n\",\n                         params->fdset_size);\n          (void) fclose(___log);\n        }\n      }\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      /* Capture the specific branch indicated in the violation report. */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"BRANCH: listen_fd_set && listen_fd == MHD_INVALID_SOCKET -> no-op (Use MHD-created socket). listen_fd=%lld\\n\",\n                         (long long) params->listen_fd);\n          (void) fclose(___log);\n        }\n      }\n      (void) 0; /* Use MHD-created socket */\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"EXIT process_interim_params: invalid listen_fd (negative)=%lld -> return false\\n\",\n                         (long long) params->listen_fd);\n          (void) fclose(___log);\n        }\n      }\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"BRANCH: MHD_USE_NO_LISTEN_SOCKET set but app provided listen_fd=%lld -> closing provided socket and return false\\n\",\n                         (long long) params->listen_fd);\n          (void) fclose(___log);\n        }\n      }\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"ACTION: using app-provided listen_fd=%lld, listen_is_unix=%d\\n\",\n                         (long long) d->listen_fd, (int) d->listen_is_unix);\n          (void) fclose(___log);\n        }\n      }\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n      {\n        {\n          FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n          if (___log)\n          {\n            (void) fprintf(___log, \"EXIT process_interim_params: pserver_addr NULL but server_addr_len_set and non-zero -> return false\\n\");\n            (void) fclose(___log);\n          }\n        }\n        return false;\n      }\n      /* Ignore parameter if it is NULL */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"BRANCH: pserver_addr_set but pserver_addr == NULL -> ignore parameter\\n\");\n          (void) fclose(___log);\n        }\n      }\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      {\n        FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (___log)\n        {\n          (void) fprintf(___log, \"EXIT process_interim_params: pserver_addr_set and daemon has listen_fd=%lld -> return false\\n\",\n                         (long long) d->listen_fd);\n          (void) fclose(___log);\n        }\n      }\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n        {\n          FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n          if (___log)\n          {\n            (void) fprintf(___log, \"ACTION: closed listen_fd and set params->listen_fd to MHD_INVALID_SOCKET due to MHD_USE_NO_LISTEN_SOCKET\\n\");\n            (void) fclose(___log);\n          }\n        }\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n        {\n          {\n            FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n            if (___log)\n            {\n              (void) fprintf(___log, \"EXIT process_interim_params: server_addr_len_set but server_addr_len == 0 -> return false\\n\");\n              (void) fclose(___log);\n            }\n          }\n          return false;\n        }\n        *psockaddr_len = params->server_addr_len;\n        {\n          FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n          if (___log)\n          {\n            (void) fprintf(___log, \"ACTION: using provided pserver_addr=%p with len=%u\\n\",\n                           (void *) params->pserver_addr, (unsigned) params->server_addr_len);\n            (void) fclose(___log);\n          }\n        }\n      }\n      else\n        *psockaddr_len = 0;\n    }\n  }\n\n  {\n    FILE *___log = fopen(\"/tmp/logs/3228.txt\", \"a\");\n    if (___log)\n    {\n      (void) fprintf(___log, \"EXIT process_interim_params: return true\\n\");\n      (void) fclose(___log);\n    }\n  }\n  return true;\n}\n"
}