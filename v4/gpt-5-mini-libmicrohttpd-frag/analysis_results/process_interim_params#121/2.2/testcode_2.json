{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe expression-statement \"(void) 0;\" in the branch 'else if (MHD_D_IS_USING_POLL_(d))' is a no-op that is executed when that branch is taken. Its removal would not change program behaviour, so it constitutes dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_interim_params code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3228.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_interim_params:\n```c\nstatic bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      (void) 0; /* Use MHD-created socket */\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n        return false;\n      /* Ignore parameter if it is NULL */\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n          return false;\n        *psockaddr_len = params->server_addr_len;\n      }\n      else\n        *psockaddr_len = 0;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_interim_params code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_interim_params with it.\n  - Your function must have the exact same signature as process_interim_params.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_interim_params to check logs.\n  - Your function MUST preserve the original logic of process_interim_params as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_interim_params will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_interim_params as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  /* Simple logger helper (inline use only) */\n  FILE *logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER process_interim_params: d=%p, ppsockaddr=%p, psockaddr_len=%p, params=%p\\n\",\n            (void *) d, (void *) ppsockaddr, (void *) psockaddr_len, (void *) params);\n    fprintf(logf, \"  initial: fdset_size_set=%d, fdset_size=%d, listen_fd_set=%d, listen_fd=%ld, server_addr_len_set=%d, pserver_addr_set=%d, options=0x%08x\\n\",\n            (int) params->fdset_size_set, (int) params->fdset_size,\n            (int) params->listen_fd_set, (long) params->listen_fd,\n            (int) params->server_addr_len_set, (int) params->pserver_addr_set,\n            (unsigned int) d->options);\n    fclose(logf);\n    logf = NULL;\n  }\n\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      /* Log reason for rejection */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"BRANCH: fdset_size_set && fdset_size <= 0: fdset_size=%d -> return false\\n\",\n                (int) params->fdset_size);\n        fclose(logf);\n        logf = NULL;\n      }\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      /* Probe: record that the threads branch was taken */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"BRANCH: MHD_D_IS_USING_THREADS_ taken (no change to fdset_size).\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n      (void) 0;\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      /* Probe: record that the poll branch (the reported no-op) was taken. */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"BRANCH: MHD_D_IS_USING_POLL_ taken (executing (void)0 no-op).\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n      (void) 0;\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        /* Log mismatch */\n        logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"BRANCH: no threads/poll and FD_SETSIZE mismatch: app=%d platform=%d -> return false\\n\",\n                  (int) params->fdset_size, (int) FD_SETSIZE);\n          fclose(logf);\n          logf = NULL;\n        }\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n      /* Log override */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"ACTION: overridden fdset_size set to %d by app\\n\", (int) params->fdset_size);\n        fclose(logf);\n        logf = NULL;\n      }\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    /* Log entry to listen_fd_set handling */\n    logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: listen_fd_set taken: listen_fd=%ld\\n\", (long) params->listen_fd);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      (void) 0; /* Use MHD-created socket */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: listen_fd == MHD_INVALID_SOCKET -> use MHD-created socket\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: invalid signed listen_fd (%ld) -> return false\\n\", (long) params->listen_fd);\n        fclose(logf);\n        logf = NULL;\n      }\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: MHD_USE_NO_LISTEN_SOCKET set while listen_fd specified -> close and return false\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"ACTION: assigned listen_fd=%ld, listen_is_unix=%d\\n\", (long) d->listen_fd, (int) d->listen_is_unix);\n        fclose(logf);\n        logf = NULL;\n      }\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: pserver_addr_set taken: pserver_addr=%p, server_addr_len_set=%d, server_addr_len=%lu\\n\",\n              (void *) params->pserver_addr, (int) params->server_addr_len_set, (unsigned long) params->server_addr_len);\n      fclose(logf);\n      logf = NULL;\n    }\n\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n      {\n        logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"SUBBRANCH: pserver_addr is NULL but server_addr_len_set and non-zero -> return false\\n\");\n          fclose(logf);\n          logf = NULL;\n        }\n        return false;\n      }\n      /* Ignore parameter if it is NULL */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: pserver_addr is NULL -> parameter ignored\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: pserver_addr provided but listen_fd already set -> return false\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"SUBBRANCH: MHD_USE_NO_LISTEN_SOCKET set while sock addr specified -> cleanup and return false\\n\");\n        fclose(logf);\n        logf = NULL;\n      }\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n          return false;\n        *psockaddr_len = params->server_addr_len;\n      }\n      else\n        *psockaddr_len = 0;\n      logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"ACTION: assigned ppsockaddr=%p, psockaddr_len=%lu\\n\", (void *) *ppsockaddr, (unsigned long) *psockaddr_len);\n        fclose(logf);\n        logf = NULL;\n      }\n    }\n  }\n\n  logf = fopen(\"/tmp/logs/3228.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"EXIT process_interim_params: returning true\\n\");\n    fclose(logf);\n    logf = NULL;\n  }\n  return true;\n}\n"
}