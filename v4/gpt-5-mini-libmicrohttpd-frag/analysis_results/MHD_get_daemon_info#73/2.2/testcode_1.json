{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe case label for MHD_DAEMON_INFO_MAC_KEY_SIZE simply does 'return NULL;' while the switch's default case also returns NULL. Removing this case and its return statement would not change program behaviour (the default would handle that enum value), so the operation is redundant and constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_daemon_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1328.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_daemon_info:\n```c\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n    return NULL;\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    return &daemon->daemon_info_dummy_port;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_daemon_info code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_daemon_info with it.\n  - Your function must have the exact same signature as MHD_get_daemon_info.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_daemon_info to check logs.\n  - Your function MUST preserve the original logic of MHD_get_daemon_info as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_daemon_info will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_daemon_info as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  FILE *log = fopen(\"/tmp/logs/1328.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTER: MHD_get_daemon_info: daemon=%p info_type=%d\\n\", (void *)daemon, (int)info_type);\n\n  if (NULL == daemon)\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT: daemon == NULL -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  /* Map info_type to a readable name for logging */\n  {\n    const char *info_name = \"UNKNOWN\";\n    switch (info_type)\n    {\n    case MHD_DAEMON_INFO_KEY_SIZE:\n      info_name = \"MHD_DAEMON_INFO_KEY_SIZE\";\n      break;\n    case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n      info_name = \"MHD_DAEMON_INFO_MAC_KEY_SIZE\";\n      break;\n    case MHD_DAEMON_INFO_LISTEN_FD:\n      info_name = \"MHD_DAEMON_INFO_LISTEN_FD\";\n      break;\n    case MHD_DAEMON_INFO_EPOLL_FD:\n      info_name = \"MHD_DAEMON_INFO_EPOLL_FD\";\n      break;\n    case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n      info_name = \"MHD_DAEMON_INFO_CURRENT_CONNECTIONS\";\n      break;\n    case MHD_DAEMON_INFO_FLAGS:\n      info_name = \"MHD_DAEMON_INFO_FLAGS\";\n      break;\n    case MHD_DAEMON_INFO_BIND_PORT:\n      info_name = \"MHD_DAEMON_INFO_BIND_PORT\";\n      break;\n    default:\n      info_name = \"DEFAULT\";\n      break;\n    }\n    if (log)\n      fprintf(log, \"INFO_TYPE_RESOLVED: %s\\n\", info_name);\n  }\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_KEY_SIZE -> returning NULL (no longer supported)\\n\");\n      fclose(log);\n    }\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    if (log)\n    {\n      /* Log that this branch is returning NULL, which is identical to default. */\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_MAC_KEY_SIZE -> returning NULL (no longer supported).\\n\");\n      fprintf(log, \"NOTE: This return is redundant with the default case that also returns NULL.\\n\");\n      fclose(log);\n    }\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_LISTEN_FD -> listen_fd=%d returning &daemon_info_dummy_listen_fd\\n\",\n              (int)daemon->listen_fd);\n      fclose(log);\n    }\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_EPOLL_FD -> epoll_fd=%d returning &daemon_info_dummy_epoll_fd\\n\",\n              (int)daemon->epoll_fd);\n      fclose(log);\n    }\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_EPOLL_FD -> EPOLL_SUPPORT NOT defined -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_CURRENT_CONNECTIONS -> connections=%lu returning &daemon_info_dummy_num_connections\\n\",\n              (unsigned long)daemon->connections);\n      fclose(log);\n    }\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_FLAGS -> options=0x%08x returning &daemon_info_dummy_flags\\n\",\n              (unsigned int)daemon->options);\n      fclose(log);\n    }\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: MHD_DAEMON_INFO_BIND_PORT -> port=%d returning &daemon_info_dummy_port\\n\",\n              (int)daemon->port);\n      fclose(log);\n    }\n    return &daemon->daemon_info_dummy_port;\n  default:\n    if (log)\n    {\n      fprintf(log, \"BRANCH: DEFAULT -> returning NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n}\n"
}