{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const pointer to the connection (struct MHD_Connection *connection) and uses a non-const iterator (struct MHD_HTTP_Req_Header *pos) even though the function only reads from those objects. Neither the connection nor the header nodes are modified in the body. According to MISRA C 2023 Rule 8.13 these should be const-qualified (e.g. const struct MHD_Connection *connection and const struct MHD_HTTP_Req_Header *pos). The other parameters (const char *key, const char **value_ptr) are appropriately const; value_size_ptr cannot be const because it is used as an output parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/65.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return MHD_NO;\n\n  if (NULL == key)\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n        break;\n    }\n  }\n  else\n  {\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           ( (key == pos->header) ||\n             (MHD_str_equal_caseless_bin_n_ (key,\n                                             pos->header,\n                                             key_size) ) ) )\n        break;\n    }\n  }\n\n  if (NULL == pos)\n    return MHD_NO;\n\n  if (NULL != value_ptr)\n    *value_ptr = pos->value;\n\n  if (NULL != value_size_ptr)\n    *value_size_ptr = pos->value_size;\n\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_connection_value_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_connection_value_n with it.\n  - Your function must have the exact same signature as MHD_lookup_connection_value_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_connection_value_n to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_connection_value_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_connection_value_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_lookup_connection_value_n (struct MHD_Connection *connection,\n                               enum MHD_ValueKind kind,\n                               const char *key,\n                               size_t key_size,\n                               const char **value_ptr,\n                               size_t *value_size_ptr)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *fp = fopen(\"/tmp/logs/65.txt\", \"a\");\n\n  if (fp)\n    fprintf(fp, \"ENTER MHD_lookup_connection_value_n: connection=%p kind=%d key=%p key_size=%zu value_ptr=%p value_size_ptr=%p\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size,\n            (const void *)value_ptr, (void *)value_size_ptr);\n\n  if (NULL == connection)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"EARLY RETURN: connection is NULL -> MHD_NO\\n\");\n      fclose(fp);\n    }\n    return MHD_NO;\n  }\n\n  if (NULL == key)\n  {\n    if (fp)\n      fprintf(fp, \"SEARCHING: key == NULL, looking for header nodes with matching kind and NULL header\\n\");\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      if (fp)\n        fprintf(fp, \"ITER: pos=%p header=%p header_size=%zu kind=%d\\n\",\n                (void *)pos, (const void *)pos->header, pos->header_size, (int)pos->kind);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (NULL == pos->header) )\n      {\n        if (fp)\n          fprintf(fp, \"MATCH FOUND (key==NULL branch): pos=%p -> breaking\\n\", (void *)pos);\n        break;\n      }\n    }\n  }\n  else\n  {\n    if (fp)\n      fprintf(fp, \"SEARCHING: key != NULL (%p, size=%zu), comparing against headers\\n\", (const void *)key, key_size);\n\n    for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    {\n      int equal = (key == pos->header) ||\n                  (MHD_str_equal_caseless_bin_n_ (key, pos->header, key_size));\n\n      if (fp)\n        fprintf(fp, \"ITER: pos=%p header=%p header_size=%zu kind=%d equal=%d\\n\",\n                (void *)pos, (const void *)pos->header, pos->header_size, (int)pos->kind, equal);\n\n      if ( (0 != (kind & pos->kind)) &&\n           (key_size == pos->header_size) &&\n           equal )\n      {\n        if (fp)\n          fprintf(fp, \"MATCH FOUND (key branch): pos=%p -> breaking\\n\", (void *)pos);\n        break;\n      }\n    }\n  }\n\n  if (NULL == pos)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"NO MATCH: pos == NULL -> MHD_NO\\n\");\n      fclose(fp);\n    }\n    return MHD_NO;\n  }\n\n  if (NULL != value_ptr)\n  {\n    if (fp)\n      fprintf(fp, \"ASSIGN: *value_ptr = pos->value (pos=%p value=%p)\\n\", (void *)pos, (const void *)pos->value);\n    *value_ptr = pos->value;\n  }\n\n  if (NULL != value_size_ptr)\n  {\n    if (fp)\n      fprintf(fp, \"ASSIGN: *value_size_ptr = pos->value_size (size=%zu)\\n\", pos->value_size);\n    *value_size_ptr = pos->value_size;\n  }\n\n  if (fp)\n  {\n    fprintf(fp, \"RETURN MHD_YES: pos=%p value=%p value_size=%zu\\n\",\n            (void *)pos, (const void *)pos->value, pos->value_size);\n    fclose(fp);\n  }\n\n  return MHD_YES;\n}\n"
}