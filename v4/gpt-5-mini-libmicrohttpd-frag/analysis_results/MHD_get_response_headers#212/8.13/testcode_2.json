{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters are non-const pointers though they are used only for input. In the shown body 'response' is only read (response->first_header and its members are not modified) and 'iterator_cls' is passed through to the iterator but never modified. According to MISRA C 2023 Rule 8.13 these should be declared to point to const-qualified types (e.g. const struct MHD_Response *response and const void *iterator_cls). Also the iterator callback\u2019s parameter types should use const for header/value if they are not modified. Because these input-only pointers are not const-qualified, the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_response_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2925.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_headers:\n```c\n_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n      break;\n  }\n  return numHeaders;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_response_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_response_headers with it.\n  - Your function must have the exact same signature as MHD_get_response_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_response_headers to check logs.\n  - Your function MUST preserve the original logic of MHD_get_response_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_response_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_response_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN int\nMHD_get_response_headers (struct MHD_Response *response,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  int numHeaders = 0;\n  struct MHD_HTTP_Res_Header *pos;\n  FILE *log = NULL;\n\n  /* Open log for append. If opening fails, proceed without logging. */\n  log = fopen(\"/tmp/logs/2925.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_get_response_headers: response=%p iterator=%p iterator_cls=%p\\n\",\n            (void *)response, (void *)iterator, iterator_cls);\n    /* Note: dereference of response->first_header mirrors original behavior */\n    fprintf(log, \"response->first_header=%p\\n\",\n            (void *)response->first_header);\n  }\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    numHeaders++;\n\n    if (log)\n    {\n      /* Print available state for each header; guard string prints if NULL */\n      fprintf(log,\n              \"ITER header_index=%d pos=%p kind=%d header=%s value=%s\\n\",\n              numHeaders,\n              (void *)pos,\n              pos->kind,\n              (pos->header != NULL) ? pos->header : \"(null)\",\n              (pos->value != NULL) ? pos->value : \"(null)\");\n    }\n\n    if ((NULL != iterator) &&\n        (MHD_NO == iterator (iterator_cls,\n                             pos->kind,\n                             pos->header,\n                             pos->value)))\n    {\n      if (log)\n      {\n        fprintf(log, \"Iterator returned MHD_NO at header_index=%d, breaking\\n\",\n                numHeaders);\n      }\n      break;\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_get_response_headers: numHeaders=%d\\n\", numHeaders);\n    fclose(log);\n  }\n\n  return numHeaders;\n}\n"
}