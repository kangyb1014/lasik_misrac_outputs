{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(NULL != key) is an assertion-only operation. If mhd_assert is implemented as an assert-like macro that becomes a no-op in release builds (e.g. under NDEBUG or similar), the call has no effect at runtime and its removal would not change program behaviour. In that case the statement constitutes dead code and violates MISRA C 2023 Rule 2.2. If, however, mhd_assert performs a runtime action with observable effects (logging, abort, etc.), then it is not dead code and the rule is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1348.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified test_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original test_header with it.\n  - Your function must have the exact same signature as test_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call test_header to check logs.\n  - Your function MUST preserve the original logic of test_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, test_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of test_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n  FILE *logf = fopen(\"/tmp/logs/1348.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"test_header ENTER: cls=%p, param=%p, connection=%p, key=%p, key_size=%zu, value=%p, value_size=%zu, kind=%d\\n\",\n            cls, (void *)param, (void *)connection, (const void *)key, key_size, (const void *)value, value_size, (int)kind);\n  }\n\n  param->num_headers++;\n  if (logf)\n  {\n    fprintf(logf, \"num_headers incremented -> %u\\n\", (unsigned)param->num_headers);\n  }\n\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"iter: pos=%p, pos->kind=%d, pos->header_size=%zu, pos->value_size=%zu, current i=%zu\\n\",\n              (void *)pos, (int)pos->kind, pos->header_size, pos->value_size, i);\n    }\n\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n      {\n        if (logf)\n          fprintf(logf, \"header size mismatch: key_size=%zu != pos->header_size=%zu -> return MHD_NO\\n\", key_size, pos->header_size);\n        if (logf) fclose(logf);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        if (logf)\n          fprintf(logf, \"value size mismatch: value_size=%zu != pos->value_size=%zu -> return MHD_NO\\n\", value_size, pos->value_size);\n        if (logf) fclose(logf);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        /* Log the pointers that the assertions are checking. This lets us\n           observe whether the assertions would be no-ops at runtime (i.e.,\n           whether the pointers might be NULL) without changing behaviour. */\n        if (logf)\n        {\n          fprintf(logf, \"about to mhd_assert key != NULL (key=%p)\\n\", (const void *)key);\n          fprintf(logf, \"about to mhd_assert pos->header != NULL (pos->header=%p)\\n\", (const void *)pos->header);\n        }\n\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n        {\n          if (logf)\n            fprintf(logf, \"memcmp header failed -> return MHD_NO\\n\");\n          if (logf) fclose(logf);\n          return MHD_NO;\n        }\n        else\n        {\n          if (logf)\n            fprintf(logf, \"memcmp header matched\\n\");\n        }\n      }\n      if (0 != value_size)\n      {\n        if (logf)\n        {\n          fprintf(logf, \"about to mhd_assert value != NULL (value=%p)\\n\", (const void *)value);\n          fprintf(logf, \"about to mhd_assert pos->value != NULL (pos->value=%p)\\n\", (const void *)pos->value);\n        }\n\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n        {\n          if (logf)\n            fprintf(logf, \"memcmp value failed -> return MHD_NO\\n\");\n          if (logf) fclose(logf);\n          return MHD_NO;\n        }\n        else\n        {\n          if (logf)\n            fprintf(logf, \"memcmp value matched\\n\");\n        }\n      }\n\n      if (logf)\n        fprintf(logf, \"match found -> return MHD_YES\\n\");\n      if (logf) fclose(logf);\n      return MHD_YES;\n    }\n  }\n\n  if (logf)\n    fprintf(logf, \"no matching header found -> return MHD_NO\\n\");\n  if (logf) fclose(logf);\n  return MHD_NO;\n}\n"
}