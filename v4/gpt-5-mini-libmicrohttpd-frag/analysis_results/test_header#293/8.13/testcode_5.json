{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes pos->value to memcmp as read-only data. If the struct member pos->value is declared as 'char *' (non-const) rather than 'const char *', that is a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when it is only used for read access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified test_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1345.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of test_header:\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified test_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original test_header with it.\n  - Your function must have the exact same signature as test_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call test_header to check logs.\n  - Your function MUST preserve the original logic of test_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, test_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of test_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n  FILE *log = fopen(\"/tmp/logs/1345.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER test_header: cls=%p param=%p connection=%p key_size=%zu value_size=%zu kind=%d num_headers_before=%zu\\n\",\n            cls,\n            (void *)param,\n            (void *)connection,\n            key_size,\n            value_size,\n            (int) kind,\n            param ? param->num_headers : 0);\n  }\n\n  param->num_headers++;\n  if (log)\n    fprintf(log, \"num_headers incremented -> %zu\\n\", param->num_headers);\n\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n      fprintf(log, \"loop: pos=%p pos->kind=%d pos->header=%p pos->header_size=%zu pos->value=%p pos->value_size=%zu\\n\",\n              (void *)pos,\n              (int) pos->kind,\n              (void *) pos->header,\n              pos->header_size,\n              (void *) pos->value,\n              pos->value_size);\n\n    if (kind != pos->kind)\n    {\n      if (log)\n        fprintf(log, \"  kind mismatch (expected %d, got %d) - continue\\n\", (int) kind, (int) pos->kind);\n      continue;\n    }\n    if (++i == param->num_headers)\n    {\n      if (log)\n        fprintf(log, \"  matched header index i=%zu (target num_headers=%zu)\\n\", i, param->num_headers);\n\n      if (key_size != pos->header_size)\n      {\n        if (log)\n          fprintf(log, \"  header_size mismatch: expected %zu, got %zu -> returning MHD_NO\\n\", key_size, pos->header_size);\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n      if (value_size != pos->value_size)\n      {\n        if (log)\n          fprintf(log, \"  value_size mismatch: expected %zu, got %zu -> returning MHD_NO\\n\", value_size, pos->value_size);\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        {\n          int cmp_key = memcmp (key,\n                                pos->header,\n                                key_size);\n          if (log)\n            fprintf(log, \"  memcmp header -> cmp_key=%d\\n\", cmp_key);\n          if (0 != cmp_key)\n          {\n            if (log) fclose(log);\n            return MHD_NO;\n          }\n        }\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        {\n          int cmp_value = memcmp (value,\n                                  pos->value,\n                                  value_size);\n          if (log)\n            fprintf(log, \"  memcmp value -> cmp_value=%d pos->value=%p value_size=%zu\\n\",\n                    cmp_value,\n                    (void *) pos->value,\n                    value_size);\n          if (0 != cmp_value)\n          {\n            if (log) fclose(log);\n            return MHD_NO;\n          }\n        }\n      }\n      if (log)\n        fprintf(log, \"  all checks passed -> returning MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;\n    }\n  }\n  if (log)\n  {\n    fprintf(log, \"no matching header found -> returning MHD_NO\\n\");\n    fclose(log);\n  }\n  return MHD_NO;\n}\n"
}