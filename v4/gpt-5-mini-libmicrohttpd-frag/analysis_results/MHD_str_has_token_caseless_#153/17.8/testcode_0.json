{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'str' (declared as 'const char *str') is incremented in the loop (str++), e.g. while (0 != *str && ',' != *str) str++; \u2014 this modifies the function parameter itself, which violates MISRA C 2023 Rule 17.8. Use a local pointer (e.g. const char *p = str;) and advance p instead of str to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4502.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_has_token_caseless_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_has_token_caseless_ with it.\n  - Your function must have the exact same signature as MHD_str_has_token_caseless_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_has_token_caseless_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_has_token_caseless_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  /* Local (minimal) declarations for logging functions to avoid\n   * relying on headers being present where this snippet is inserted. */\n  typedef struct _FILE FILE;\n  extern FILE *fopen (const char *, const char *);\n  extern int fprintf (FILE *, const char *, ...);\n  extern int fclose (FILE *);\n\n  FILE *logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n  if (logf)\n  {\n    /* Log function entry and initial state. */\n    fprintf(logf, \"ENTER MHD_str_has_token_caseless_: str=%p token=%p token_len=%zu first_char='%c'\\n\",\n            (const void *)str, (const void *)token, token_len,\n            (0 != str && 0 != *str) ? *str : '\\0');\n    fclose(logf);\n  }\n\n  if (0 == token_len)\n  {\n    logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"token_len == 0 -> returning false\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n    {\n      logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"skipping delimiter/whitespace at str=%p char='%c' -> advancing\\n\",\n                (const void *)str, *str);\n        fclose(logf);\n      }\n      str++;\n    }\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"comp loop: i=%zu sc='%c'(%p) tc='%c' token[i-1]=%zu str now=%p\\n\",\n                i, (sc != 0) ? sc : '\\0', (const void *)(str - 1), tc,\n                (size_t)(i - 1), (const void *)str);\n        fclose(logf);\n      }\n\n      if (0 == sc)\n      {\n        logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"reached NUL in input (sc==0) -> returning false, str=%p\\n\", (const void *)str);\n          fclose(logf);\n        }\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"chars not equal (caseless): sc='%c' tc='%c' -> break to find next substring, str=%p\\n\",\n                  sc, tc, (const void *)str);\n          fclose(logf);\n        }\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n        {\n          logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n          if (logf)\n          {\n            fprintf(logf, \"skipping trailing space/tab after match at str=%p char='%c'\\n\",\n                    (const void *)str, *str);\n            fclose(logf);\n          }\n          str++;\n        }\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n          if (logf)\n          {\n            fprintf(logf, \"full token matched (i=%zu token_len=%zu) and ended properly at str=%p char='%c' -> returning true\\n\",\n                    i, token_len, (const void *)str, (0 != *str) ? *str : '\\0');\n            fclose(logf);\n          }\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"token matched but substring has extra trailing chars at str=%p char='%c' -> continue search\\n\",\n                  (const void *)str, *str);\n          fclose(logf);\n        }\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n    {\n      logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"advancing to next substring: str=%p char='%c'\\n\", (const void *)str, *str);\n        fclose(logf);\n      }\n      str++;\n    }\n  }\n\n  logf = fopen(\"/tmp/logs/4502.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"no more input -> returning false\\n\");\n    fclose(logf);\n  }\n  return false;\n}\n"
}