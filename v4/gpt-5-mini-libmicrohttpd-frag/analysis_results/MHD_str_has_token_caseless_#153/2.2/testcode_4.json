{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment const char tc = token[i++]; (and the increment of i) is executed even when sc == 0 and the function immediately returns. In that branch the read of token[i] and the increment of i have no observable effect on program behaviour (the function returns), so those operations are executed but could be removed without changing behaviour. Therefore the code contains dead code (violates MISRA C 2023 Rule 2.2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_has_token_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4508.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_has_token_caseless_:\n```c\nbool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  if (0 == token_len)\n    return false;\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (0 == sc)\n        return false;\n      if (! charsequalcaseless (sc, tc))\n        break;\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n          return true;\n        /* Unmatched chars at end of substring. */\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_has_token_caseless_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_has_token_caseless_ with it.\n  - Your function must have the exact same signature as MHD_str_has_token_caseless_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_has_token_caseless_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_has_token_caseless_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_has_token_caseless_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_has_token_caseless_ (const char *str,\n                             const char *const token,\n                             size_t token_len)\n{\n  FILE *log = fopen(\"/tmp/logs/4508.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_str_has_token_caseless_: entered: str=%p token=%p token_len=%zu\\n\",\n            (const void *)str, (const void *)token, token_len);\n  }\n\n  if (0 == token_len)\n  {\n    if (log)\n    {\n      fprintf(log, \"token_len == 0 -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  while (0 != *str)\n  {\n    size_t i;\n    /* Skip all whitespaces and empty tokens. */\n    while (' ' == *str || '\\t' == *str || ',' == *str)\n      str++;\n\n    if (log)\n      fprintf(log, \"scanning substring starting at str=%p (char=0x%02x)\\n\",\n              (const void *)str, (unsigned char)*str);\n\n    /* Check for token match. */\n    i = 0;\n    while (1)\n    {\n      const char sc = *(str++);\n      const char tc = token[i++];\n\n      if (log)\n      {\n        /* Log raw numeric values to avoid issues with non-printables. */\n        fprintf(log, \"inner: sc=0x%02x tc=0x%02x i_after=%zu str_ptr=%p token_ptr=%p\\n\",\n                (unsigned char)sc, (unsigned char)tc, i, (const void *)str, (const void *)token);\n      }\n\n      if (0 == sc)\n      {\n        /* Violation scenario: token[i++] was executed even though sc==0 and function returns. */\n        if (log)\n        {\n          fprintf(log, \"sc == 0 detected. Observed tc=0x%02x, i_after=%zu -> returning false\\n\",\n                  (unsigned char)tc, i);\n          fclose(log);\n        }\n        return false;\n      }\n      if (! charsequalcaseless (sc, tc))\n      {\n        if (log)\n          fprintf(log, \"chars not equal (caseless): sc=0x%02x tc=0x%02x -> break to next substring\\n\",\n                  (unsigned char)sc, (unsigned char)tc);\n        break;\n      }\n      if (i >= token_len)\n      {\n        /* Check whether substring match token fully or\n         * has additional unmatched chars at tail. */\n        while (' ' == *str || '\\t' == *str)\n          str++;\n        /* End of (sub)string? */\n        if ((0 == *str) || (',' == *str) )\n        {\n          if (log)\n          {\n            fprintf(log, \"full token matched and ended at str=%p -> return true\\n\", (const void *)str);\n            fclose(log);\n          }\n          return true;\n        }\n        /* Unmatched chars at end of substring. */\n        if (log)\n          fprintf(log, \"token matched but substring has extra chars at tail -> continue\\n\");\n        break;\n      }\n    }\n    /* Find next substring. */\n    while (0 != *str && ',' != *str)\n      str++;\n\n    if (log)\n      fprintf(log, \"moving to next substring, new str=%p (char=0x%02x)\\n\",\n              (const void *)str, (unsigned char)*str);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"no match found -> return false\\n\");\n    fclose(log);\n  }\n  return false;\n}\n"
}