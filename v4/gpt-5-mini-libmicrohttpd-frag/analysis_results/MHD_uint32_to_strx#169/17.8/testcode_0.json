{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code performs a compound assignment on the function parameter 'val' (uint32_t) via 'val <<= 4;'. This modifies the parameter variable itself rather than using a separate local copy, which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint32_to_strx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_uint32_to_strx:\n```c\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  } while ((0 == digit) && (0 != digit_pos));\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n    if (0 == digit_pos)\n      return o_pos;\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_uint32_to_strx code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_uint32_to_strx with it.\n  - Your function must have the exact same signature as MHD_uint32_to_strx.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_uint32_to_strx to check logs.\n  - Your function MUST preserve the original logic of MHD_uint32_to_strx as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_uint32_to_strx will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_uint32_to_strx as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  /* Forward declarations for logging functions to avoid requiring headers */\n  struct FILE;\n  extern struct FILE *fopen(const char *path, const char *mode);\n  extern int fprintf(struct FILE *stream, const char *format, ...);\n  extern int fclose(struct FILE *stream);\n\n  struct FILE *log = fopen(\"/tmp/logs/402.txt\", \"a\");\n  if (log)\n  {\n    /* Log entrance and initial state. Cast uint32_t to unsigned long for portable printing. */\n    fprintf(log, \"ENTER MHD_uint32_to_strx: val=0x%08lX (%lu), buf=%p, buf_size=%zu\\n\",\n            (unsigned long) val, (unsigned long) val, (void *) buf, buf_size);\n  }\n\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    if (log)\n      fprintf(log, \"skip_loop before shift: digit_pos=%d, digit=%d, val=0x%08lX\\n\",\n              digit_pos, digit, (unsigned long) val);\n    /* Violation scenario: parameter 'val' is modified in place via left shift */\n    val <<= 4;\n    if (log)\n      fprintf(log, \"skip_loop after shift: val=0x%08lX\\n\", (unsigned long) val);\n  } while ((0 == digit) && (0 != digit_pos));\n\n  if (log)\n    fprintf(log, \"after_skip: digit_pos=%d, digit=%d, val=0x%08lX\\n\",\n            digit_pos, digit, (unsigned long) val);\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n\n    if (log)\n      fprintf(log, \"wrote_char: o_pos=%zu, char='%c', digit=%d\\n\",\n              o_pos, buf[o_pos - 1], digit);\n\n    if (0 == digit_pos)\n    {\n      if (log)\n        fprintf(log, \"returning_success o_pos=%zu\\n\", o_pos);\n      if (log)\n        fclose(log);\n      return o_pos;\n    }\n\n    digit_pos--;\n    digit = (int) (val >> 28);\n    if (log)\n      fprintf(log, \"loop before shift: digit_pos=%d, digit=%d, val=0x%08lX\\n\",\n              digit_pos, digit, (unsigned long) val);\n    val <<= 4;\n    if (log)\n      fprintf(log, \"loop after shift: val=0x%08lX\\n\", (unsigned long) val);\n  }\n\n  if (log)\n    fprintf(log, \"buffer too small, returning 0\\n\");\n  if (log)\n    fclose(log);\n  return 0; /* The buffer is too small */\n}\n"
}