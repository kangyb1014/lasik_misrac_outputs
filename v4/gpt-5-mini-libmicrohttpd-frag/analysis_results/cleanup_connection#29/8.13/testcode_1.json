{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis call passes a string literal (via _()) to MHD_DLOG. If MHD_DLOG (or the _ macro/gettext) is declared to take a plain char * (non-const), then the pointer parameter is not const-qualified even though the argument is an immutable string literal \u2014 violating MISRA C 2023 Rule 8.13. Example violating declaration: void MHD_DLOG(struct MHD_Daemon *d, char *msg); or char *_(const char *s); (returning non-const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified cleanup_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/425.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of cleanup_connection:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified cleanup_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original cleanup_connection with it.\n  - Your function must have the exact same signature as cleanup_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call cleanup_connection to check logs.\n  - Your function MUST preserve the original logic of cleanup_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, cleanup_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of cleanup_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  /* Probe: record entry and important initial state */\n  {\n    FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (file_log)\n    {\n      fprintf(file_log, \"ENTER cleanup_connection: connection=%p daemon=%p in_cleanup=%d suspended=%d resuming=%d in_idle=%d rp.response=%p\\n\",\n              (void *) connection,\n              (void *) daemon,\n              (int) connection->in_cleanup,\n              (int) connection->suspended,\n              (int) connection->resuming,\n              (int) connection->in_idle,\n              (void *) connection->rp.response);\n      fclose(file_log);\n    }\n  }\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n  {\n    /* Log the early return due to already-in-cleanup */\n    FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (file_log)\n    {\n      fprintf(file_log, \"EARLY RETURN: connection=%p already in_cleanup\\n\", (void *) connection);\n      fclose(file_log);\n    }\n    return; /* Prevent double cleanup. */\n  }\n\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    /* Log response destruction */\n    FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (file_log)\n    {\n      fprintf(file_log, \"DESTROY RESPONSE: connection=%p response=%p\\n\",\n              (void *) connection, (void *) connection->rp.response);\n      fclose(file_log);\n    }\n\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n\n    {\n      FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n      if (file_log)\n      {\n        fprintf(file_log, \"PATH: suspended -> removed and marked not suspended: connection=%p\\n\", (void *) connection);\n        fclose(file_log);\n      }\n    }\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n      {\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n\n        {\n          FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n          if (file_log)\n          {\n            fprintf(file_log, \"PATH: normal timeout list removal: connection=%p\\n\", (void *) connection);\n            fclose(file_log);\n          }\n        }\n      }\n      else\n      {\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n\n        {\n          FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n          if (file_log)\n          {\n            fprintf(file_log, \"PATH: manual timeout list removal: connection=%p (conn_timeout=%d daemon_timeout=%d)\\n\",\n                    (void *) connection,\n                    (int) connection->connection_timeout_ms,\n                    (int) daemon->connection_timeout_ms);\n            fclose(file_log);\n          }\n        }\n      }\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n\n    {\n      FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n      if (file_log)\n      {\n        fprintf(file_log, \"PATH: removed from connections list: connection=%p\\n\", (void *) connection);\n        fclose(file_log);\n      }\n    }\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n\n  connection->resuming = false;\n  connection->in_idle = false;\n\n  {\n    FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (file_log)\n    {\n      fprintf(file_log, \"INSERTED into cleanup list and flags cleared: connection=%p resuming=%d in_idle=%d\\n\",\n              (void *) connection,\n              (int) connection->resuming,\n              (int) connection->in_idle);\n      fclose(file_log);\n    }\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      /* Probe: log the fact that the itc activation failed, and log\n         the literal message and its pointer value before calling MHD_DLOG. */\n      {\n        const char *probe_msg = _ (\"Failed to signal end of connection via inter-thread \"\n                                  \"communication channel.\\n\");\n        FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n        if (file_log)\n        {\n          fprintf(file_log, \"ITC_ACTIVATE_FAILED: daemon=%p itc=%p will call MHD_DLOG with message ptr=%p text='%s'\\n\",\n                  (void *) daemon,\n                  (void *) daemon->itc,\n                  (void *) probe_msg,\n                  probe_msg ? probe_msg : \"(null)\");\n          fclose(file_log);\n        }\n\n        /* Call original logging macro/function as in the original code. */\n        MHD_DLOG (daemon,\n                  probe_msg);\n      }\n#else\n      /* If messages are not enabled, still record that the branch was taken. */\n      FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n      if (file_log)\n      {\n        fprintf(file_log, \"ITC_ACTIVATE_FAILED: daemon=%p itc=%p (HAVE_MESSAGES not defined)\\n\",\n                (void *) daemon, (void *) daemon->itc);\n        fclose(file_log);\n      }\n#endif\n    }\n  }\n\n  /* Final probe: record exit */\n  {\n    FILE *file_log = fopen(\"/tmp/logs/425.txt\", \"a\");\n    if (file_log)\n    {\n      fprintf(file_log, \"EXIT cleanup_connection: connection=%p daemon=%p in_cleanup=%d\\n\",\n              (void *) connection, (void *) daemon, (int) connection->in_cleanup);\n      fclose(file_log);\n    }\n  }\n}\n"
}