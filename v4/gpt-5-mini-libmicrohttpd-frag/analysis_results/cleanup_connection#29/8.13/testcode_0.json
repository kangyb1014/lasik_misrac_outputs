{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the string literal \"c\" to MHD_itc_activate_. If the prototype of MHD_itc_activate_ declares the parameter as a non-const pointer (e.g. char *), this discards the const nature of the literal and violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when modification is not required. If, however, the function prototype already declares the parameter as const char * (or equivalent const-qualified type), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified cleanup_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/425.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of cleanup_connection:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified cleanup_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original cleanup_connection with it.\n  - Your function must have the exact same signature as cleanup_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call cleanup_connection to check logs.\n  - Your function MUST preserve the original logic of cleanup_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, cleanup_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of cleanup_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  FILE *logf = NULL;\n  int itc_valid = 0;\n  int itc_ret = 0;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  /* Open log file early to record entry and state. Try to append so multiple\n     runs don't clobber earlier evidence. If opening fails, fall back to NULL\n     and avoid disrupting program flow. */\n  logf = fopen(\"/tmp/logs/425.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER cleanup_connection: connection=%p daemon=%p\\n\",\n            (void *)connection, (void *)daemon);\n    fprintf(logf, \" state: in_cleanup=%d suspended=%d resuming=%d in_idle=%d\\n\",\n            connection->in_cleanup ? 1 : 0,\n            connection->suspended ? 1 : 0,\n            connection->resuming ? 1 : 0,\n            connection->in_idle ? 1 : 0);\n    fflush(logf);\n  }\n\n  if (connection->in_cleanup)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EARLY RETURN: already in cleanup.\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n    return; /* Prevent double cleanup. */\n  }\n  connection->in_cleanup = true;\n\n  if (NULL != connection->rp.response)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Destroying response: response_ptr=%p\\n\",\n              (void *)connection->rp.response);\n      fflush(logf);\n    }\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Removing suspended connection from suspended list.\\n\");\n      fflush(logf);\n    }\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n      {\n        if (logf) fprintf(logf, \"Removing from normal timeout list.\\n\"), fflush(logf);\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      }\n      else\n      {\n        if (logf) fprintf(logf, \"Removing from manual timeout list.\\n\"), fflush(logf);\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n      }\n    }\n    if (logf) fprintf(logf, \"Removing connection from connections list.\\n\"), fflush(logf);\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  if (logf) fprintf(logf, \"Inserting connection into cleanup list.\\n\"), fflush(logf);\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    itc_valid = (MHD_ITC_IS_VALID_ (daemon->itc)) ? 1 : 0;\n    if (logf)\n    {\n      fprintf(logf, \"Thread-per-conn path: itc=%p valid=%d\\n\",\n              (void *)daemon->itc, itc_valid);\n      fflush(logf);\n    }\n\n    if (itc_valid)\n    {\n      /* Call the inter-thread communication activation and log the exact\n         arguments passed, including the literal string. This helps expose\n         scenarios where a non-const parameter might be declared in the\n         prototype while a const string literal is passed here. */\n      const char *sig = \"c\"; /* string literal; shows const nature */\n\n      if (logf)\n      {\n        fprintf(logf, \"About to call MHD_itc_activate_: itc=%p signal_ptr=%p signal_val=\\\"%s\\\"\\n\",\n                (void *)daemon->itc, (void *)sig, sig);\n        fflush(logf);\n      }\n\n      /* Preserve original semantics: check result and only log if failed. */\n      itc_ret = MHD_itc_activate_ (daemon->itc, \"c\");\n\n      if (logf)\n      {\n        fprintf(logf, \"MHD_itc_activate_ returned: %d\\n\", itc_ret);\n        fflush(logf);\n      }\n\n      if (! itc_ret)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon,\n                  _ (\"Failed to signal end of connection via inter-thread \" \\\n                     \"communication channel.\\n\"));\n#endif\n        if (logf)\n        {\n          fprintf(logf, \"MHD_itc_activate_ failed (returned 0).\\n\");\n          fprintf(logf, \"Violation-scenario evidence: passed string literal \\\"c\\\" to MHD_itc_activate_.\\n\");\n          fprintf(logf, \"Note: inability to determine the parameter's const-qualification at runtime; check the prototype for non-const char * to confirm MISRA Rule 8.13 violation.\\n\");\n          fflush(logf);\n        }\n      }\n    }\n    else\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Inter-thread communication channel invalid; skipping activation.\\n\");\n        fflush(logf);\n      }\n    }\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT cleanup_connection: connection=%p\\n\", (void *)connection);\n    fflush(logf);\n    fclose(logf);\n  }\n}\n"
}