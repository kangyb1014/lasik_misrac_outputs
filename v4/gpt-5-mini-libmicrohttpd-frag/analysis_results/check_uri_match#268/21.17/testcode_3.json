{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes args (either qmark+1 or uri+uri_len) to check_argument_match without guaranteeing that args points to a valid, null\u2011terminated region inside the original buffer. If check_argument_match uses <string.h> functions (e.g. strlen/strcmp/strchr), they can read beyond the object bounds when: (a) qmark was found before calling daemon->unescape_callback and that callback modifies/reallocates/shifts the uri buffer or changes its length, leaving qmark (and thus qmark+1) invalid or not pointing at a terminated string; or (b) uri[uri_len] was written before unescape but unescape changes uri_len or content so uri+uri_len is not a valid, NUL\u2011terminated start of the arguments. In those cases string.h functions inside check_argument_match may access out of bounds \u2014 a MISRA C 2023 Rule 21.17 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Logging: open log file (best-effort). */\n  FILE *log = fopen(\"/tmp/logs/3853.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"ENTER check_uri_match: connection=%p, uri=%p, uri_len=%zu, daemon=%p\\n\",\n            (void *)connection, (void *)uri, uri_len, (void *)daemon);\n    fflush(log);\n  }\n\n  /* Preserve original behavior: terminate at uri_len (caller must ensure space).\n     Log the action and a bounded dump of the buffer prior to further modifications. */\n  uri[uri_len] = 0;\n  if (NULL != log)\n  {\n    fprintf(log, \"WROTE NUL at uri[uri_len] -> uri[%zu]=0\\n\", uri_len);\n    /* Dump up to uri_len bytes as hex and as a bounded string (may include NULs). */\n    size_t i;\n    fprintf(log, \"BUFFER DUMP (up to uri_len bytes) len=%zu:\\n\", uri_len);\n    for (i = 0; i < uri_len; ++i)\n    {\n      unsigned char c = (unsigned char)uri[i];\n      fprintf(log, \"%02x \", c);\n      if ((i & 0x1F) == 0x1F) fprintf(log, \"\\n\");\n    }\n    fprintf(log, \"\\nSTRING VIEW: \\\"\");\n    /* Print as a C string up to uri_len bytes (we wrote a NUL at uri_len so this is safe). */\n    fprintf(log, \"%s\", uri);\n    fprintf(log, \"\\\"\\n\");\n    fflush(log);\n  }\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n  {\n    if (NULL != log)\n      fprintf(log, \"FOUND '?' at %p (offset %td)\\n\", (void *)qmark, (ptrdiff_t)(qmark - uri));\n    *qmark = '\\0';\n    if (NULL != log)\n      fprintf(log, \"REPLACED '?' with NUL at %p\\n\", (void *)qmark);\n  }\n  else\n  {\n    if (NULL != log)\n      fprintf(log, \"NO '?' found within first %zu bytes\\n\", uri_len);\n  }\n\n  /* Log qmark pointer and whether it is inside the pre-unescape buffer. */\n  if (NULL != log)\n  {\n    if (NULL != qmark)\n    {\n      int in_range = (qmark >= uri && qmark < (uri + uri_len));\n      fprintf(log, \"qmark pre-unescape: %p, in_pre_range=%d\\n\", (void *)qmark, in_range);\n    }\n    else\n    {\n      fprintf(log, \"qmark pre-unescape: NULL\\n\");\n    }\n    fflush(log);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  {\n    size_t uri_len_before = uri_len;\n    size_t uri_len_after;\n\n    if (NULL != log)\n      fprintf(log, \"CALLING unescape_callback (cls=%p) with uri=%p, len=%zu\\n\",\n              (void *)daemon->unescape_callback_cls, (void *)uri, uri_len_before);\n\n    uri_len_after = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                               connection,\n                                               uri);\n\n    if (NULL != log)\n    {\n      fprintf(log, \"unescape_callback returned new_len=%zu\\n\", uri_len_after);\n      /* Log whether qmark (if any) still looks like it points into the buffer.\n         Note: this only records pointer arithmetic and does not dereference qmark. */\n      if (NULL != qmark)\n      {\n        int in_old_range = (qmark >= uri && qmark < (uri + uri_len_before));\n        int in_new_range = (qmark >= uri && qmark < (uri + uri_len_after));\n        fprintf(log, \"qmark post-unescape pointer=%p, in_old_range=%d, in_new_range=%d\\n\",\n                (void *)qmark, in_old_range, in_new_range);\n      }\n      fflush(log);\n    }\n\n    uri_len = uri_len_after;\n  }\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    if (NULL != log)\n    {\n      fprintf(log, \"URI mismatch: uri_len=%zu, connection->rq.url_len=%zu\\n\",\n              uri_len, connection->rq.url_len);\n      fprintf(log, \"uri=%p, connection->rq.url=%p\\n\", (void *)uri, (void *)connection->rq.url);\n      fflush(log);\n      fclose(log);\n    }\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  /* Log the chosen args pointer and whether it lies within the (post-unescape) buffer. */\n  if (NULL != log)\n  {\n    fprintf(log, \"CHOSE args pointer = %p\\n\", (void *)args);\n    if (args >= uri && args < (uri + uri_len))\n    {\n      size_t safe_len = (size_t)((uri + uri_len) - args);\n      size_t dump_len = safe_len;\n      if (dump_len > 256) dump_len = 256; /* bound output */\n      fprintf(log, \"args appears inside buffer: offset=%td, safe_len=%zu, dumping up to %zu bytes:\\n\",\n              (ptrdiff_t)(args - uri), safe_len, dump_len);\n      /* Write a bounded view of args (not relying on NUL beyond safe_len). */\n      fwrite(args, 1, dump_len, log);\n      fprintf(log, \"\\n\");\n    }\n    else\n    {\n      fprintf(log, \"args is NOT inside the post-unescape uri buffer; NOT dereferencing args.\\n\");\n    }\n    fflush(log);\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (NULL != log)\n    {\n      fprintf(log, \"check_argument_match returned FALSE for args=%p\\n\", (void *)args);\n      fflush(log);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (NULL != log)\n  {\n    fprintf(log, \"check_argument_match returned TRUE for args=%p, returning TRUE\\n\", (void *)args);\n    fflush(log);\n    fclose(log);\n  }\n\n  return true;\n}\n"
}