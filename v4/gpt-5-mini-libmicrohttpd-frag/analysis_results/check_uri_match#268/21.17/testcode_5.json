{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provided a buffer of size uri_len (valid indices 0..uri_len-1), the code writes uri[uri_len] = 0 just before the memchr call which already writes out of bounds. More generally, memchr(uri, '?', uri_len) will read uri_len bytes starting at uri \u2014 if uri_len exceeds the actual allocated size of the object pointed to by uri (e.g. caller passed a pointer to an N-byte buffer but uri_len > N), memchr will access beyond the object. Therefore the use of memchr here can violate Rule 21.17 when uri_len is not guaranteed to be <= the buffer size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Open log file for append. If this fails, continue silently to preserve\n     original behavior as much as possible. */\n  FILE *log = fopen(\"/tmp/logs/3853.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER check_uri_match: connection=%p, uri=%p, uri_len=%zu, daemon=%p\\n\",\n            (void *) connection, (void *) uri, uri_len, (void *) daemon);\n    /* Try to log the configured expected url length and pointer (if available). */\n    fprintf(log, \" connection->rq.url=%p, connection->rq.url_len=%zu\\n\",\n            (void *) connection->rq.url, connection->rq.url_len);\n    fflush(log);\n  }\n\n  if (log)\n    fprintf(log, \"About to write terminating NUL at uri[%zu]\\n\", uri_len);\n\n  /* Preserve original logic which writes a terminator at uri[uri_len]. */\n  uri[uri_len] = 0;\n\n  if (log)\n    fprintf(log, \"Wrote terminator. Calling memchr(uri, '?', %zu)\\n\", uri_len);\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n\n  if (log)\n  {\n    if (qmark != NULL)\n      fprintf(log, \"memchr found '?' at %p (index %td)\\n\",\n              (void *) qmark, (ptrdiff_t) (qmark - uri));\n    else\n      fprintf(log, \"memchr did not find '?' within first %zu bytes\\n\", uri_len);\n    fflush(log);\n  }\n\n  if (NULL != qmark)\n  {\n    if (log)\n      fprintf(log, \"Replacing '?' with '\\0' at %p\\n\", (void *) qmark);\n    *qmark = '\\0';\n    if (log)\n    {\n      fprintf(log, \"Replacement done. uri now NUL-terminated at qmark.\\n\");\n      fflush(log);\n    }\n  }\n\n  if (log)\n    fprintf(log, \"Calling unescape_callback (%p)\\n\", (void *) daemon->unescape_callback);\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  if (log)\n  {\n    fprintf(log, \"unescape_callback returned new uri_len=%zu\\n\", uri_len);\n    fprintf(log, \"Comparing lengths: uri_len=%zu, connection->rq.url_len=%zu\\n\",\n            uri_len, connection->rq.url_len);\n    fflush(log);\n  }\n\n  /* Perform comparison in the same manner as original. Log memcmp result when\n     performed so control flow and state leading to a mismatch are captured. */\n  int memcmp_res = 1; /* non-zero default to indicate mismatch when lengths differ */\n  if (uri_len == connection->rq.url_len)\n  {\n    memcmp_res = memcmp (uri, connection->rq.url, uri_len);\n    if (log)\n    {\n      fprintf(log, \"memcmp returned %d\\n\", memcmp_res);\n      fflush(log);\n    }\n  }\n  else if (log)\n  {\n    fprintf(log, \"Lengths differ; skipping memcmp.\\n\");\n    fflush(log);\n  }\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp_res))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    if (log)\n    {\n      fprintf(log, \"Authentication failed: URI does not match. Returning false.\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (log)\n  {\n    fprintf(log, \"Arguments pointer args=%p (qmark=%p). args index=%td\\n\",\n            (void *) args, (void *) qmark, (ptrdiff_t) (args - uri));\n    fflush(log);\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (log)\n    {\n      fprintf(log, \"Authentication failed: arguments do not match. Returning false.\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"Authentication succeeded. Returning true.\\n\");\n    fclose(log);\n  }\n  return true;\n}\n"
}