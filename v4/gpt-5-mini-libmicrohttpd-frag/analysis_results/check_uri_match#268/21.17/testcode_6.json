{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls daemon->unescape_callback(uri) without passing the capacity of the buffer pointed to by uri. The callback therefore has no guaranteed knowledge of the available space and might use string.h functions (e.g. strcpy, strcat, memcpy, memmove) or perform writes/reads assuming extra room. For example, if the callback decodes percent-escapes into a target buffer using strcpy/strcat or memcpy with a length greater than the original allocation, or if the original buffer was allocated with exactly uri_len bytes and the earlier uri[uri_len] = 0 already wrote out of bounds, the callback can read or write past the end of the object. Because the fragment does not constrain or communicate the buffer bounds, this can result in accesses beyond the bounds of the object referenced by uri and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3853.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  FILE *logf = fopen(\"/tmp/logs/3853.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"enter check_uri_match: connection=%p, uri=%p, uri_len=%zu\\n\",\n            (void *)connection, (void *)uri, uri_len);\n    if (uri != NULL)\n    {\n      size_t dump_len = uri_len < 64 ? uri_len : 64;\n      fprintf(logf, \"initial uri (first %zu bytes): '\", dump_len);\n      for (size_t i = 0; i < dump_len; ++i)\n      {\n        unsigned char c = (unsigned char)uri[i];\n        if (c >= 32 && c < 127)\n          fputc(c, logf);\n        else\n          fprintf(logf, \"\\\\x%02x\", c);\n      }\n      fprintf(logf, \"'\\n\");\n    }\n  }\n\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  if (logf)\n  {\n    fprintf(logf, \"daemon=%p, unescape_callback=%p, unescape_callback_cls=%p\\n\",\n            (void *)daemon,\n            (void *)(daemon ? daemon->unescape_callback : NULL),\n            (void *)(daemon ? daemon->unescape_callback_cls : NULL));\n  }\n\n  /* Probe: read the byte currently at uri[uri_len] (may be out-of-bounds in buggy cases) */\n  if (uri != NULL)\n  {\n    unsigned char saved = (unsigned char)uri[uri_len];\n    if (logf)\n      fprintf(logf, \"byte at uri[uri_len] before write: 0x%02x\\n\", saved);\n  }\n\n  /* Preserve original behavior: attempt to NUL-terminate at uri[uri_len] */\n  uri[uri_len] = 0;\n\n  if (logf)\n  {\n    fprintf(logf, \"wrote null at uri[uri_len]\\n\");\n    if (uri != NULL)\n    {\n      size_t start = (uri_len > 8) ? (uri_len - 8) : 0;\n      fprintf(logf, \"around boundary (offset %zu..%zu): '\", start, uri_len);\n      for (size_t i = start; i <= uri_len; ++i)\n      {\n        unsigned char c = (unsigned char)uri[i];\n        if (c >= 32 && c < 127)\n          fputc(c, logf);\n        else\n          fprintf(logf, \"\\\\x%02x\", c);\n      }\n      fprintf(logf, \"'\\n\");\n    }\n  }\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (logf)\n    fprintf(logf, \"memchr('?') -> %p\\n\", (void *)qmark);\n\n  if (NULL != qmark)\n  {\n    *qmark = '\\0';\n    if (logf)\n      fprintf(logf, \"replaced '?' with '\\\\0' at %p\\n\", (void *)qmark);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  if (logf)\n  {\n    fprintf(logf, \"calling unescape_callback with uri='%s', uri_len=%zu\\n\", uri ? uri : \"(null)\", uri_len);\n    fflush(logf);\n  }\n\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n\n  if (logf)\n  {\n    fprintf(logf, \"unescape_callback returned uri_len=%zu\\n\", uri_len);\n    if (uri != NULL)\n    {\n      size_t d2 = uri_len < 128 ? uri_len : 128;\n      fprintf(logf, \"decoded uri (first %zu bytes): '\", d2);\n      for (size_t i = 0; i < d2; ++i)\n      {\n        unsigned char c = (unsigned char)uri[i];\n        if (c >= 32 && c < 127)\n          fputc(c, logf);\n        else\n          fprintf(logf, \"\\\\x%02x\", c);\n      }\n      fprintf(logf, \"'\\n\");\n    }\n  }\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"URI mismatch: uri_len=%zu, expected=%zu\\n\", uri_len, connection->rq.url_len);\n      fprintf(logf, \"memcmp(%p,%p,%zu) -> %d\\n\", (void *)uri, (void *)connection->rq.url, uri_len,\n              (int)(0 != memcmp (uri, connection->rq.url, uri_len)));\n      fclose(logf);\n    }\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (logf)\n  {\n    fprintf(logf, \"args pointer=%p\\n\", (void *)args);\n    fflush(logf);\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"arguments do not match\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"check_uri_match succeeded\\n\");\n    fclose(logf);\n  }\n  return true;\n}\n"
}