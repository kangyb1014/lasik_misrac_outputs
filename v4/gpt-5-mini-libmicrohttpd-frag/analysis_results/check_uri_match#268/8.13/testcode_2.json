{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code declares a const pointer to a non-const object: 'struct MHD_Daemon *const daemon = connection->daemon;'. The function only reads members of *daemon (calls daemon->unescape_callback and uses daemon for logging) and does not modify the pointed-to object, so the pointer should point to a const-qualified type. Replace with 'const struct MHD_Daemon *const daemon = connection->daemon;' (or 'const struct MHD_Daemon *daemon') to satisfy MISRA C 2023 Rule 8.13. Note: if the function actually needs to modify the daemon object, then leaving it non-const is acceptable; otherwise this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3855.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  FILE *log = fopen(\"/tmp/logs/3855.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER check_uri_match: connection=%p, uri=%p, uri_len=%zu\\n\",\n            (void *) connection, (void *) uri, uri_len);\n  }\n\n  char *qmark;\n  char *args;\n  /* Intentionally keep the original (non-const-qualified) pointer to\n     reproduce the reported Rule 8.13 scenario: the pointer itself is\n     const, but the pointed-to object is not const-qualified. */\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  if (log)\n  {\n    fprintf(log, \"daemon=%p, daemon->unescape_callback=%p, daemon->unescape_callback_cls=%p\\n\",\n            (void *) daemon,\n            (void *) daemon->unescape_callback,\n            (void *) daemon->unescape_callback_cls);\n    fprintf(log, \"connection->rq.url=%p, connection->rq.url_len=%zu\\n\",\n            (void *) connection->rq.url,\n            connection->rq.url_len);\n  }\n\n  /* Preserve original behavior: terminate the buffer at uri_len. */\n  uri[uri_len] = 0;\n  if (log)\n    fprintf(log, \"uri after null-terminate: \\\"%s\\\"\\n\", uri);\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (log)\n    fprintf(log, \"qmark=%p\\n\", (void *) qmark);\n\n  if (NULL != qmark)\n  {\n    *qmark = '\\0';\n    if (log)\n      fprintf(log, \"uri truncated at '?': \\\"%s\\\"\\n\", uri);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if (log)\n    fprintf(log, \"after unescape_callback: uri_len=%zu, uri=\\\"%s\\\"\\n\",\n            uri_len, uri);\n\n  /* Evaluate comparison safely and log useful state without reading out of bounds. */\n  {\n    int cmpres = 0;\n    bool mismatch = false;\n\n    if (uri_len != connection->rq.url_len)\n    {\n      mismatch = true;\n      if (log)\n        fprintf(log, \"URI length mismatch: uri_len=%zu, connection->rq.url_len=%zu\\n\",\n                uri_len, connection->rq.url_len);\n    }\n    else\n    {\n      /* Only compare when lengths are equal to avoid out-of-bounds reads. */\n      cmpres = memcmp (uri, connection->rq.url, uri_len);\n      if (log)\n        fprintf(log, \"memcmp result for length %zu: %d\\n\", uri_len, cmpres);\n      if (0 != cmpres)\n        mismatch = true;\n    }\n\n    if (mismatch)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n      if (log)\n      {\n        fprintf(log, \"Authentication failed: URI does not match. Returning false.\\n\");\n        fclose(log);\n      }\n      return false;\n    }\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  if (log)\n    fprintf(log, \"args pointer=%p, args=\\\"%s\\\"\\n\", (void *) args, args);\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (log)\n    {\n      fprintf(log, \"Authentication failed: arguments do not match. Returning false.\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"check_uri_match succeeded. Returning true.\\n\");\n    fclose(log);\n  }\n  return true;\n}\n"
}