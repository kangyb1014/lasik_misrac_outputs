{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'args' is declared as 'char *' but is only used to point into the URI buffer for read-only use (assigned from qmark+1 or uri+uri_len and then passed to check_argument_match). It does not need to be used to modify the pointed-to characters and therefore should be declared as 'const char *args' to reflect immutability and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3855.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n  FILE *log = fopen(\"/tmp/logs/3855.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"[check_uri_match] Entered: connection=%p, uri=%p, uri_len=%zu, daemon=%p\\n\",\n            (void *) connection, (void *) uri, uri_len, (void *) daemon);\n  }\n\n  /* Preserve original behavior: null-terminate the URI at uri_len */\n  uri[uri_len] = 0;\n  if (log)\n    fprintf(log, \"[check_uri_match] Null-terminated uri at index %zu\\n\", uri_len);\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (log)\n    fprintf(log, \"[check_uri_match] memchr('?') returned %p\\n\", (void *) qmark);\n\n  if (NULL != qmark)\n  {\n    *qmark = '\\0';\n    if (log)\n      fprintf(log, \"[check_uri_match] Found '?', wrote '\\0' at %p\\n\", (void *) qmark);\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if (log)\n    fprintf(log, \"[check_uri_match] After unescape_callback: uri_len=%zu\\n\", uri_len);\n\n  /* Compare lengths and contents; log the details */\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n    if (log)\n    {\n      fprintf(log, \"[check_uri_match] URI mismatch: computed_len=%zu, expected_len=%zu\\n\",\n              uri_len, connection->rq.url_len);\n      if (uri_len == connection->rq.url_len)\n      {\n        /* If lengths equal, log first differing byte index (best-effort) */\n        size_t i;\n        int diff_index = -1;\n        for (i = 0; i < uri_len; ++i)\n        {\n          if (uri[i] != connection->rq.url[i])\n          {\n            diff_index = (int)i;\n            break;\n          }\n        }\n        if (diff_index >= 0)\n          fprintf(log, \"[check_uri_match] First byte difference at index %d: uri[%d]=0x%02x, expected=0x%02x\\n\",\n                  diff_index, diff_index, (unsigned char)uri[diff_index], (unsigned char)connection->rq.url[diff_index]);\n        else\n          fprintf(log, \"[check_uri_match] memcmp indicated difference but no differing index found (len=0?)\\n\");\n      }\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    if (log)\n      fclose(log);\n    return false;\n  }\n\n  /* args points either to the first character after '?' or to the end of uri */\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  if (log)\n  {\n    fprintf(log, \"[check_uri_match] args assigned: qmark=%p, args=%p\\n\", (void *) qmark, (void *) args);\n    /* Do not dereference args extensively to avoid reading out-of-bounds; only note whether it's empty */\n    if (args && args[0] == '\\0')\n      fprintf(log, \"[check_uri_match] args appears to be empty string (args[0]=='\\\\0')\\n\");\n    else\n      fprintf(log, \"[check_uri_match] args appears non-empty (or not null-terminated within observed bounds)\\n\");\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n    if (log)\n      fprintf(log, \"[check_uri_match] check_argument_match returned FALSE for args=%p\\n\", (void *) args);\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (log)\n      fclose(log);\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"[check_uri_match] check_argument_match returned TRUE for args=%p, returning TRUE\\n\", (void *) args);\n    fclose(log);\n  }\n  return true;\n}\n"
}