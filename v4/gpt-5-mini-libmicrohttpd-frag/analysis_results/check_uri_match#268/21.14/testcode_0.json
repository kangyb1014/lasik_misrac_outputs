{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nViolation: The code explicitly sets uri[uri_len] = 0 (and may set *qmark = '\\0'), making 'uri' a null-terminated string, then calls memcmp(uri, connection->rq.url, uri_len) to compare it. Using memcmp to compare null-terminated strings is prohibited by MISRA C 2023 Rule 21.14. The violation occurs when uri_len == connection->rq.url_len and the memcmp is executed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_uri_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3854.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_uri_match:\n```c\nstatic bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  uri[uri_len] = 0;\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n    *qmark = '\\0';\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != memcmp (uri, connection->rq.url, uri_len)))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_uri_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_uri_match with it.\n  - Your function must have the exact same signature as check_uri_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_uri_match to check logs.\n  - Your function MUST preserve the original logic of check_uri_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_uri_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_uri_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_uri_match (struct MHD_Connection *connection, char *uri, size_t uri_len)\n{\n  char *qmark;\n  char *args;\n  struct MHD_Daemon *const daemon = connection->daemon;\n  FILE *logf = fopen(\"/tmp/logs/3854.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"check_uri_match ENTER: connection=%p uri=%p initial_uri_len=%zu daemon=%p\\n\",\n            (void *)connection, (void *)uri, uri_len, (void *)daemon);\n    fflush(logf);\n  }\n\n  /* Preserve original behavior: explicitly terminate provided buffer. */\n  uri[uri_len] = 0;\n  if (logf)\n  {\n    fprintf(logf, \"set uri[uri_len]=0 at index %zu -> uri as string (truncated 256): '%.*s'\\n\",\n            uri_len, (int) (uri_len > 256 ? 256 : uri_len), uri);\n    fflush(logf);\n  }\n\n  qmark = memchr (uri,\n                  '?',\n                  uri_len);\n  if (NULL != qmark)\n  {\n    size_t qmark_index = (size_t)(qmark - uri);\n    if (logf)\n    {\n      fprintf(logf, \"found '?' at index %zu (qmark=%p). Setting *qmark='\\0' to isolate path.\\n\",\n              qmark_index, (void *)qmark);\n      fflush(logf);\n    }\n    *qmark = '\\0';\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"no '?' found in first %zu bytes of uri.\\n\", uri_len);\n      fflush(logf);\n    }\n  }\n\n  /* Need to unescape URI before comparing with connection->url */\n  uri_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                       connection,\n                                       uri);\n  if (logf)\n  {\n    fprintf(logf, \"after unescape_callback: uri=%p new_uri_len=%zu connection->rq.url_len=%zu\\n\",\n            (void *)uri, uri_len, connection->rq.url_len);\n    fflush(logf);\n  }\n\n  /* Evaluate comparison using same semantics as original, but capture the result for logging. */\n  int cmp_result = 1; /* non-zero by default */\n  /* Only call memcmp when uri_len is as intended (consistent with original code). */\n  cmp_result = memcmp (uri, connection->rq.url, uri_len);\n  if (logf)\n  {\n    fprintf(logf, \"memcmp called with len=%zu -> result=%d\\n\", uri_len, cmp_result);\n    /* Note: Do not read connection->rq.url[connection->rq.url_len] here (may be out-of-bounds). */\n    {\n      size_t dump_len = (uri_len < 64) ? uri_len : 64;\n      fprintf(logf, \"uri (hex, first %zu bytes):\", dump_len);\n      for (size_t i = 0; i < dump_len; ++i)\n        fprintf(logf, \" %02x\", (unsigned char)uri[i]);\n      fprintf(logf, \"\\n\");\n\n      fprintf(logf, \"connection->rq.url (hex, first %zu bytes or url_len):\", dump_len);\n      for (size_t i = 0; i < dump_len && i < connection->rq.url_len; ++i)\n        fprintf(logf, \" %02x\", (unsigned char)connection->rq.url[i]);\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n    }\n  }\n\n  if ((uri_len != connection->rq.url_len) ||\n      (0 != cmp_result))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, URI does not match.\\n\"));\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"authentication failed: (uri_len != url_len) -> %d or (memcmp != 0) -> %d\\n\",\n              (int)(uri_len != connection->rq.url_len), (int)(0 != cmp_result));\n      fflush(logf);\n      fclose(logf);\n    }\n    return false;\n  }\n\n  args = (NULL != qmark) ? (qmark + 1) : uri + uri_len;\n  if (logf)\n  {\n    fprintf(logf, \"uri matched. args pointer=%p (args start as string truncated 256): '%.*s'\\n\",\n            (void *)args, (int) (256), args);\n    fflush(logf);\n  }\n\n  if (! check_argument_match (connection,\n                              args) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Authentication failed, arguments do not match.\\n\"));\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"check_argument_match returned false for args=%p\\n\", (void *)args);\n      fflush(logf);\n      fclose(logf);\n    }\n    return false;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"check_uri_match SUCCESS: returning true\\n\");\n    fflush(logf);\n    fclose(logf);\n  }\n  return true;\n}\n"
}