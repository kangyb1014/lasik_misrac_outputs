{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression (! cloexec_set) can be invariant depending on build-time configuration. For example, when MHD_WINSOCK_SOCKETS && WSA_FLAG_NO_HANDLE_INHERIT is defined, cloexec_set is set to !0 (i.e. 1) so (! cloexec_set) is always false; similarly, in the fallback branch cloexec_set = 0 so (! cloexec_set) is always true. In these configurations the if condition is invariant, which violates MISRA C 2023 Rule 14.3 (no applicable exceptions).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_socket_create_listen_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_socket_create_listen_:\n```c\nMHD_socket\nMHD_socket_create_listen_ (int pf)\n{\n  MHD_socket fd;\n  int cloexec_set;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  int nosigpipe_set;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n\n#if defined(MHD_POSIX_SOCKETS) && (defined(SOCK_CLOEXEC) || \\\n  defined(SOCK_NOSIGPIPE) )\n\n  fd = socket (pf,\n               SOCK_STREAM | SOCK_CLOEXEC | SOCK_NOSIGPIPE_OR_ZERO,\n               0);\n  cloexec_set = (SOCK_CLOEXEC_OR_ZERO != 0);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = (SOCK_NOSIGPIPE_OR_ZERO != 0);\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n#elif defined(MHD_WINSOCK_SOCKETS) && defined(WSA_FLAG_NO_HANDLE_INHERIT)\n  fd = WSASocketW (pf,\n                   SOCK_STREAM,\n                   0,\n                   NULL,\n                   0,\n                   WSA_FLAG_OVERLAPPED | WSA_FLAG_NO_HANDLE_INHERIT);\n  cloexec_set = ! 0;\n#else  /* No special socket init function / flags */\n  fd = MHD_INVALID_SOCKET;\n  cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n#endif /* No special socket init function / flags */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n    fd = socket (pf,\n                 SOCK_STREAM,\n                 0);\n    cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n    nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n  }\n  if (MHD_INVALID_SOCKET == fd)\n    return MHD_INVALID_SOCKET;\n\n#if defined(MHD_socket_nosignal_)\n  if ( (! nosigpipe_set) &&\n       (0 == MHD_socket_nosignal_ (fd)) &&\n       (0 == MSG_NOSIGNAL_OR_ZERO) )\n  {\n    /* SIGPIPE disable is possible on this platform\n     * (so application expect that it will be disabled),\n     * but failed to be disabled here and it is not\n     * possible to disable SIGPIPE by MSG_NOSIGNAL. */\n    const int err = MHD_socket_get_error_ ();\n    (void) MHD_socket_close_ (fd);\n    MHD_socket_fset_error_ (err);\n    return MHD_INVALID_SOCKET;\n  }\n#endif /* defined(MHD_socket_nosignal_) */\n  if (! cloexec_set)\n    (void) MHD_socket_noninheritable_ (fd);\n\n  return fd;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_socket_create_listen_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_socket_create_listen_ with it.\n  - Your function must have the exact same signature as MHD_socket_create_listen_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_socket_create_listen_ to check logs.\n  - Your function MUST preserve the original logic of MHD_socket_create_listen_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_socket_create_listen_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_socket_create_listen_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "MHD_socket\nMHD_socket_create_listen_ (int pf)\n{\n  MHD_socket fd;\n  int cloexec_set;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  int nosigpipe_set;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n\n  /* Open log for tracing control flow/state for MISRA Rule 14.3 investigation. */\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER MHD_socket_create_listen_: pf=%d\\n\", pf);\n      fclose(log);\n    }\n  }\n\n#if defined(MHD_POSIX_SOCKETS) && (defined(SOCK_CLOEXEC) || \\\n  defined(SOCK_NOSIGPIPE) )\n\n  fd = socket (pf,\n               SOCK_STREAM | SOCK_CLOEXEC | SOCK_NOSIGPIPE_OR_ZERO,\n               0);\n  cloexec_set = (SOCK_CLOEXEC_OR_ZERO != 0);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = (SOCK_NOSIGPIPE_OR_ZERO != 0);\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"BRANCH: POSIX flags socket called; fd=%ld; cloexec_set=%d\", (long) fd, cloexec_set);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n      fprintf(log, \"; nosigpipe_set=%d\", nosigpipe_set);\n#endif\n      fprintf(log, \"\\n\");\n      fclose(log);\n    }\n  }\n#elif defined(MHD_WINSOCK_SOCKETS) && defined(WSA_FLAG_NO_HANDLE_INHERIT)\n  fd = WSASocketW (pf,\n                   SOCK_STREAM,\n                   0,\n                   NULL,\n                   0,\n                   WSA_FLAG_OVERLAPPED | WSA_FLAG_NO_HANDLE_INHERIT);\n  cloexec_set = ! 0;\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"BRANCH: WINSOCK WSASocketW called; fd=%ld; cloexec_set=%d\\n\", (long) fd, cloexec_set);\n      fclose(log);\n    }\n  }\n#else  /* No special socket init function / flags */\n  fd = MHD_INVALID_SOCKET;\n  cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n  nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"BRANCH: fallback (no special socket init); fd=%ld; cloexec_set=%d\\n\", (long) fd, cloexec_set);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n      fprintf(log, \"; nosigpipe_set=%d\", nosigpipe_set);\n#endif\n      fprintf(log, \"\\n\");\n      fclose(log);\n    }\n  }\n#endif /* No special socket init function / flags */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"SECOND ATTEMPT: initial socket failed, trying plain socket()\\n\");\n      fclose(log);\n    }\n\n    fd = socket (pf,\n                 SOCK_STREAM,\n                 0);\n    cloexec_set = 0;\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n    nosigpipe_set = 0;\n#endif /* SOCK_NOSIGPIPE ||  MHD_socket_nosignal_ */\n    {\n      FILE *log2 = fopen(\"/tmp/logs/359.txt\", \"a\");\n      if (log2)\n      {\n        fprintf(log2, \"SECOND ATTEMPT RESULT: fd=%ld; cloexec_set=%d\\n\", (long) fd, cloexec_set);\n#if defined(SOCK_NOSIGPIPE) || defined(MHD_socket_nosignal_)\n        fprintf(log2, \"; nosigpipe_set=%d\", nosigpipe_set);\n#endif\n        fprintf(log2, \"\\n\");\n        fclose(log2);\n      }\n    }\n  }\n  if (MHD_INVALID_SOCKET == fd)\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"RETURN: cannot create socket, returning MHD_INVALID_SOCKET\\n\");\n      fclose(log);\n    }\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_socket_nosignal_)\n  if ( (! nosigpipe_set) &&\n       (0 == MHD_socket_nosignal_ (fd)) &&\n       (0 == MSG_NOSIGNAL_OR_ZERO) )\n  {\n    /* SIGPIPE disable is possible on this platform\n     * (so application expect that it will be disabled),\n     * but failed to be disabled here and it is not\n     * possible to disable SIGPIPE by MSG_NOSIGNAL. */\n    const int err = MHD_socket_get_error_ ();\n    (void) MHD_socket_close_ (fd);\n    MHD_socket_fset_error_ (err);\n\n    {\n      FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"RETURN: nosigpipe disable failed; closed fd and set error=%d; returning MHD_INVALID_SOCKET\\n\", err);\n        fclose(log);\n      }\n    }\n\n    return MHD_INVALID_SOCKET;\n  }\n#endif /* defined(MHD_socket_nosignal_) */\n  if (! cloexec_set)\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ACTION: cloexec not set (cloexec_set=%d) -> calling MHD_socket_noninheritable_(fd=%ld)\\n\", cloexec_set, (long) fd);\n      fclose(log);\n    }\n    (void) MHD_socket_noninheritable_ (fd);\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/359.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"EXIT: returning fd=%ld\\n\", (long) fd);\n      fclose(log);\n    }\n  }\n\n  return fd;\n}\n"
}