{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'daemon = MHD_get_master(daemon);' reassigns the function parameter 'daemon' (the pointer itself). MISRA C 2023 Rule 17.8 forbids modifying a function parameter variable; only the object referred to by a pointer parameter may be modified. Reassigning the pointer violates the rule. (Fix: use a local copy, e.g. 'struct MHD_Daemon *master = MHD_get_master(daemon);')\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_limit_add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_ip_limit_add:\n```c\nstatic enum MHD_Result\nMHD_ip_limit_add (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount *newkeyp;\n  struct MHD_IPCount *keyp;\n  struct MHD_IPCount **nodep;\n  enum MHD_Result result;\n\n  daemon = MHD_get_master (daemon);\n  /* Ignore if no connection limit assigned */\n  if (0 == daemon->per_ip_connection_limit)\n    return MHD_YES;\n\n  newkeyp = (struct MHD_IPCount *) malloc (sizeof(struct MHD_IPCount));\n  if (NULL == newkeyp)\n    return MHD_NO;\n\n  /* Initialize key */\n  if (MHD_NO == MHD_ip_addr_to_key (addr,\n                                    addrlen,\n                                    newkeyp))\n  {\n    free (newkeyp);\n    return MHD_YES; /* Allow unhandled address types through */\n  }\n\n  MHD_ip_count_lock (daemon);\n\n  /* Search for the IP address */\n  nodep = (struct MHD_IPCount **) tsearch (newkeyp,\n                                           &daemon->per_ip_connection_count,\n                                           &MHD_ip_addr_compare);\n  if (NULL == nodep)\n  {\n    MHD_ip_count_unlock (daemon);\n    free (newkeyp);\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to add IP connection count node.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  keyp = *nodep;\n  /* Test if there is room for another connection; if so,\n   * increment count */\n  result = (keyp->count < daemon->per_ip_connection_limit) ? MHD_YES : MHD_NO;\n  if (MHD_NO != result)\n    ++keyp->count;\n  MHD_ip_count_unlock (daemon);\n\n  /* If we got an existing node back, free the one we created */\n  if (keyp != newkeyp)\n    free (newkeyp);\n\n  return result;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_ip_limit_add code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_ip_limit_add with it.\n  - Your function must have the exact same signature as MHD_ip_limit_add.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_ip_limit_add to check logs.\n  - Your function MUST preserve the original logic of MHD_ip_limit_add as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_ip_limit_add will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_ip_limit_add as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nMHD_ip_limit_add (struct MHD_Daemon *daemon,\n                  const struct sockaddr_storage *addr,\n                  socklen_t addrlen)\n{\n  struct MHD_IPCount *newkeyp;\n  struct MHD_IPCount *keyp;\n  struct MHD_IPCount **nodep;\n  enum MHD_Result result;\n\n  /* Log entry and initial parameter state */\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"ENTER MHD_ip_limit_add: param daemon=%p, addr=%p, addrlen=%u\\n\",\n              (void *) daemon,\n              (const void *) addr,\n              (unsigned) addrlen);\n      fclose(logf);\n    }\n  }\n\n  /* Intentionally reassign the parameter (the scenario reported as violating MISRA Rule 17.8). */\n  {\n    struct MHD_Daemon *orig_daemon = daemon;\n    daemon = MHD_get_master (daemon);\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"After MHD_get_master: orig_daemon=%p, new daemon=%p\\n\",\n              (void *) orig_daemon,\n              (void *) daemon);\n      fclose(logf);\n    }\n  }\n\n  /* Ignore if no connection limit assigned */\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      /* Print the per_ip_connection_limit value; cast to unsigned long for safety */\n      unsigned long limit = 0UL;\n      if (NULL != daemon)\n        limit = (unsigned long) daemon->per_ip_connection_limit;\n      fprintf(logf, \"Check per_ip_connection_limit: daemon=%p, limit=%lu\\n\",\n              (void *) daemon,\n              limit);\n      fclose(logf);\n    }\n  }\n\n  if (0 == daemon->per_ip_connection_limit)\n    return MHD_YES;\n\n  newkeyp = (struct MHD_IPCount *) malloc (sizeof(struct MHD_IPCount));\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"malloc newkeyp -> %p\\n\", (void *) newkeyp);\n      fclose(logf);\n    }\n  }\n  if (NULL == newkeyp)\n    return MHD_NO;\n\n  /* Initialize key */\n  {\n    enum MHD_Result addr_conv_res = MHD_ip_addr_to_key (addr,\n                                                        addrlen,\n                                                        newkeyp);\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_ip_addr_to_key returned %d for addr=%p, addrlen=%u, newkeyp=%p\\n\",\n              (int) addr_conv_res,\n              (const void *) addr,\n              (unsigned) addrlen,\n              (void *) newkeyp);\n      fclose(logf);\n    }\n    if (MHD_NO == addr_conv_res)\n    {\n      free (newkeyp);\n      FILE *logf2 = fopen(\"/tmp/logs/82.txt\", \"a\");\n      if (NULL != logf2)\n      {\n        fprintf(logf2, \"Address conversion failed, freed newkeyp and allowing through (MHD_YES)\\n\");\n        fclose(logf2);\n      }\n      return MHD_YES; /* Allow unhandled address types through */\n    }\n  }\n\n  MHD_ip_count_lock (daemon);\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Acquired ip_count lock for daemon=%p\\n\", (void *) daemon);\n      fclose(logf);\n    }\n  }\n\n  /* Search for the IP address */\n  nodep = (struct MHD_IPCount **) tsearch (newkeyp,\n                                           &daemon->per_ip_connection_count,\n                                           &MHD_ip_addr_compare);\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"tsearch returned nodep=%p (newkeyp=%p)\\n\", (void *) nodep, (void *) newkeyp);\n      fclose(logf);\n    }\n  }\n  if (NULL == nodep)\n  {\n    MHD_ip_count_unlock (daemon);\n    free (newkeyp);\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to add IP connection count node.\\n\"));\n#endif\n    {\n      FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf, \"tsearch failed (nodep==NULL). Freed newkeyp and returning MHD_NO\\n\");\n        fclose(logf);\n      }\n    }\n    return MHD_NO;\n  }\n  keyp = *nodep;\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Found node: nodep=%p, keyp=%p, keyp->count=%u, daemon->per_ip_connection_limit=%lu\\n\",\n              (void *) nodep,\n              (void *) keyp,\n              (unsigned) (keyp ? keyp->count : 0),\n              (unsigned long) daemon->per_ip_connection_limit);\n      fclose(logf);\n    }\n  }\n  /* Test if there is room for another connection; if so,\n   * increment count */\n  result = (keyp->count < daemon->per_ip_connection_limit) ? MHD_YES : MHD_NO;\n  if (MHD_NO != result)\n  {\n    ++keyp->count;\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Incremented keyp->count, new count=%u\\n\", (unsigned) keyp->count);\n      fclose(logf);\n    }\n  }\n  else\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Connection limit reached: keyp->count=%u, limit=%lu\\n\",\n              (unsigned) keyp->count,\n              (unsigned long) daemon->per_ip_connection_limit);\n      fclose(logf);\n    }\n  }\n  MHD_ip_count_unlock (daemon);\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Released ip_count lock for daemon=%p\\n\", (void *) daemon);\n      fclose(logf);\n    }\n  }\n\n  /* If we got an existing node back, free the one we created */\n  if (keyp != newkeyp)\n  {\n    free (newkeyp);\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Freed newly allocated newkeyp (%p) because keyp (%p) existed\\n\",\n              (void *) newkeyp,\n              (void *) keyp);\n      fclose(logf);\n    }\n  }\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"EXIT MHD_ip_limit_add: returning result=%d\\n\", (int) result);\n      fclose(logf);\n    }\n  }\n\n  return result;\n}\n"
}