{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled without thread support (neither MHD_USE_POSIX_THREADS nor MHD_USE_W32_THREADS defined), the statement '(void) daemon;' in the #else branch is executed only to suppress an unused-parameter warning. It has no observable effect and could be removed without changing program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_ip_count_unlock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_unlock:\n```c\nstatic void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_ip_count_unlock code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_ip_count_unlock with it.\n  - Your function must have the exact same signature as MHD_ip_count_unlock.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_ip_count_unlock to check logs.\n  - Your function MUST preserve the original logic of MHD_ip_count_unlock as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_ip_count_unlock will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_ip_count_unlock as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nMHD_ip_count_unlock (struct MHD_Daemon *daemon)\n{\n  /* Preserve original assertion */\n  mhd_assert (NULL == daemon->master);\n\n  /* Open log file to record control flow and state for analysis of dead-code scenario. */\n  FILE *mhd_log = fopen(\"/tmp/logs/1578.txt\", \"a\");\n  if (mhd_log != NULL)\n    fprintf(mhd_log, \"MHD_ip_count_unlock: entered; daemon=%p, master=%p\\n\", (void *) daemon, (void *) (daemon ? daemon->master : NULL));\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (mhd_log != NULL)\n    fprintf(mhd_log, \"MHD_ip_count_unlock: thread support enabled -> unlocking per_ip_connection_mutex\\n\");\n\n  /* Original behavior when threads are enabled */\n  MHD_mutex_unlock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  /*\n   * Original code used (void) daemon; only to suppress unused-parameter warnings when\n   * no thread support is compiled in. That statement has no runtime effect. We keep\n   * it to preserve original logic, but also log that this branch was taken so test\n   * runs can demonstrate the presence of code that has no observable effect.\n   */\n  if (mhd_log != NULL)\n    fprintf(mhd_log, \"MHD_ip_count_unlock: thread support NOT enabled -> executing (void) daemon; (no-op)\\n\");\n\n  (void) daemon;\n#endif\n\n  if (mhd_log != NULL)\n  {\n    fprintf(mhd_log, \"MHD_ip_count_unlock: exiting\\n\");\n    fclose(mhd_log);\n  }\n}\n"
}