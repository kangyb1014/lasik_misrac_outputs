{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal (\"\\n\") which decays to a pointer to char. If the prototype of post_process_urlencoded declares the corresponding parameter as a non-const pointer (e.g. char *), this violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when possible. If the function parameter is declared as const char * (or otherwise does not allow modification), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_destroy_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_destroy_post_processor:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n\n  if (NULL == pp)\n    return MHD_YES;\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n  }\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n  pp->have = NE_none;\n  free_unmarked (pp);\n  if (NULL != pp->nested_boundary)\n    free (pp->nested_boundary);\n  free (pp);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_destroy_post_processor code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_destroy_post_processor with it.\n  - Your function must have the exact same signature as MHD_destroy_post_processor.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_destroy_post_processor to check logs.\n  - Your function MUST preserve the original logic of MHD_destroy_post_processor as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_destroy_post_processor will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_destroy_post_processor as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_destroy_post_processor (struct MHD_PostProcessor *pp)\n{\n  enum MHD_Result ret;\n  FILE *log = fopen(\"/tmp/logs/1215.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_destroy_post_processor: pp=%p\\n\", (void *)pp);\n    fflush(log);\n  }\n\n  if (NULL == pp)\n  {\n    if (log)\n    {\n      fprintf(log, \"pp is NULL -> returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n\n  /* Log state and key internal fields before any final processing */\n  if (log)\n  {\n    fprintf(log, \"pp->state (before) = %d\\n\", (int)pp->state);\n    fprintf(log, \"pp->xbuf_pos = %d\\n\", (int)pp->xbuf_pos);\n    fprintf(log, \"pp->have = %d\\n\", (int)pp->have);\n    fprintf(log, \"pp->nested_boundary = %p\\n\", (void *)pp->nested_boundary);\n    fflush(log);\n  }\n\n  if (PP_ProcessValue == pp->state)\n  {\n    /* key without terminated value left at the end of the\n       buffer; fake receiving a termination character to\n       ensure it is also processed */\n    if (log)\n    {\n      fprintf(log, \"pp->state == PP_ProcessValue: about to call post_process_urlencoded(pp, \" \"\\\\n\" \", 1)\\n\");\n      fprintf(log, \"(Note: the call uses a string literal \\\"\\\\n\\\" which decays to char * in C)\\n\");\n      fprintf(log, \"pp->state (just before call) = %d\\n\", (int)pp->state);\n      fflush(log);\n    }\n\n    /* Call exactly as original to preserve behavior */\n    post_process_urlencoded (pp,\n                             \"\\n\",\n                             1);\n\n    if (log)\n    {\n      fprintf(log, \"post_process_urlencoded returned; pp=%p\\n\", (void *)pp);\n      fprintf(log, \"pp->state (after) = %d\\n\", (int)pp->state);\n      fflush(log);\n    }\n  }\n\n  /* These internal strings need cleaning up since\n     the post-processing may have been interrupted\n     at any stage */\n  if ( (pp->xbuf_pos > 0) ||\n       ( (pp->state != PP_Done) &&\n         (pp->state != PP_Init) ) )\n    ret = MHD_NO;\n  else\n    ret = MHD_YES;\n\n  if (log)\n  {\n    fprintf(log, \"Decision: pp->xbuf_pos=%d, pp->state=%d -> ret=%d\\n\",\n            (int)pp->xbuf_pos, (int)pp->state, (int)ret);\n    fflush(log);\n  }\n\n  /* record previous have value then clear */\n  if (log)\n  {\n    fprintf(log, \"pp->have (before clear) = %d\\n\", (int)pp->have);\n    fflush(log);\n  }\n  pp->have = NE_none;\n\n  if (log)\n  {\n    fprintf(log, \"Called free_unmarked(pp) for pp=%p\\n\", (void *)pp);\n    fflush(log);\n  }\n  free_unmarked (pp);\n\n  if (NULL != pp->nested_boundary)\n  {\n    if (log)\n    {\n      fprintf(log, \"freeing pp->nested_boundary=%p\\n\", (void *)pp->nested_boundary);\n      fflush(log);\n    }\n    free (pp->nested_boundary);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"freeing pp=%p and returning ret=%d\\n\", (void *)pp, (int)ret);\n    fclose(log);\n  }\n\n  free (pp);\n  return ret;\n}\n"
}