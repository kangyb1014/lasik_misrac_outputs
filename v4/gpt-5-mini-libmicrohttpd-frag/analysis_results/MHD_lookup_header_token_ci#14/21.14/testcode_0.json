{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'token' (checked earlier as a C string: token != NULL and token[0] != 0) and 'pos->value' (header value, also a C string) into MHD_str_has_token_caseless_. If that function internally uses the Standard Library function memcmp to compare the null\u2011terminated token (or null\u2011terminated substrings of pos->value) \u2014 e.g. memcmp(p, token, token_len) == 0 or memcmp(token, p, token_len) == 0 \u2014 then Rule 21.14 is violated because memcmp is being used to compare null\u2011terminated strings.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3384.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_header_token_ci code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_header_token_ci with it.\n  - Your function must have the exact same signature as MHD_lookup_header_token_ci.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_header_token_ci to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_header_token_ci will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/3384.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_lookup_header_token_ci: connection=%p header=%p header_len=%zu token=%p token_len=%zu\\n\",\n            (void *)connection, (void *)header, header_len, (void *)token, token_len);\n    /* Print a hex-prefix of header (safe: only if header != NULL and within header_len) */\n    if (header)\n    {\n      size_t lim = header_len < 64 ? header_len : 64;\n      fprintf(log, \"  header bytes (len=%zu, show=%zu):\", header_len, lim);\n      for (size_t i = 0; i < lim; ++i)\n        fprintf(log, \" %02x\", (unsigned char)header[i]);\n      if (header_len > lim) fprintf(log, \" ...\");\n      fprintf(log, \"\\n\");\n    }\n    else\n    {\n      fprintf(log, \"  header is NULL\\n\");\n    }\n\n    /* Print a hex-prefix of token (safe: only if token != NULL and within token_len) */\n    if (token)\n    {\n      size_t limt = token_len < 64 ? token_len : 64;\n      fprintf(log, \"  token bytes (len=%zu, show=%zu):\", token_len, limt);\n      for (size_t i = 0; i < limt; ++i)\n        fprintf(log, \" %02x\", (unsigned char)token[i]);\n      if (token_len > limt) fprintf(log, \" ...\");\n      fprintf(log, \"\\n\");\n    }\n    else\n    {\n      fprintf(log, \"  token is NULL\\n\");\n    }\n\n    fflush(log);\n  }\n\n  /* Preserve original input validation logic exactly. */\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n  {\n    if (log)\n    {\n      fprintf(log, \"EXIT MHD_lookup_header_token_ci: input validation failed -> false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    /* Log header entry details to help reproduce token comparison scenario. */\n    if (log)\n    {\n      fprintf(log, \"  checking pos=%p kind=0x%08x header_size=%zu header=%p value=%p\\n\",\n              (void *)pos, (unsigned int)pos->kind, pos->header_size,\n              (void *)pos->header, (void *)pos->value);\n      /* Print header bytes for pos (safe: use pos->header_size) */\n      if (pos->header && pos->header_size > 0)\n      {\n        size_t lim = pos->header_size < 64 ? pos->header_size : 64;\n        fprintf(log, \"    pos->header bytes (len=%zu, show=%zu):\", pos->header_size, lim);\n        for (size_t i = 0; i < lim; ++i)\n          fprintf(log, \" %02x\", (unsigned char)pos->header[i]);\n        if (pos->header_size > lim) fprintf(log, \" ...\");\n        fprintf(log, \"\\n\");\n      }\n      else if (!pos->header)\n      {\n        fprintf(log, \"    pos->header is NULL\\n\");\n      }\n      /* Print a small prefix of pos->value (null-terminated string expected) but be defensive */\n      if (pos->value)\n      {\n        fprintf(log, \"    pos->value prefix: '\");\n        for (size_t i = 0; i < 128; ++i)\n        {\n          unsigned char c = (unsigned char)pos->value[i];\n          if (c == 0) break;\n          /* Print printable characters directly, others as hex escape */\n          if (c >= 32 && c < 127)\n            fputc(c, log);\n          else\n            fprintf(log, \"\\\\x%02x\", c);\n        }\n        fprintf(log, \"'\\n\");\n      }\n      else\n      {\n        fprintf(log, \"    pos->value is NULL\\n\");\n      }\n      fflush(log);\n    }\n\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size))\n    {\n      /* Evaluate header identity or case-insensitive binary equality as in original. */\n      bool header_matches = false;\n      if (header == pos->header)\n      {\n        header_matches = true;\n        if (log) fprintf(log, \"    header pointer equals pos->header -> header_matches=1\\n\");\n      }\n      else\n      {\n        /* call original helper to compare header strings case-insensitively */\n        header_matches = MHD_str_equal_caseless_bin_n_ (header, pos->header, header_len);\n        if (log) fprintf(log, \"    MHD_str_equal_caseless_bin_n_ returned %d\\n\", header_matches ? 1 : 0);\n      }\n\n      if (header_matches)\n      {\n        /* Check for token presence (case-insensitive) as in original. */\n        bool has_token = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n        if (log) fprintf(log, \"    MHD_str_has_token_caseless_ returned %d\\n\", has_token ? 1 : 0);\n        if (has_token)\n        {\n          if (log)\n          {\n            fprintf(log, \"EXIT MHD_lookup_header_token_ci: match found -> true (pos=%p)\\n\", (void *)pos);\n            fclose(log);\n          }\n          return true;\n        }\n      }\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_lookup_header_token_ci: no match -> false\\n\");\n    fclose(log);\n  }\n  return false;\n}\n"
}