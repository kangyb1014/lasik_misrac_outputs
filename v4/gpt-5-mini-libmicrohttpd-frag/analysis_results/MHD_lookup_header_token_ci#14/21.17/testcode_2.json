{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf header_len does not reflect the actual number of bytes available at pointer header (for example header_len is larger than the storage or the true length of the buffer pointed to by header), the call to MHD_str_equal_caseless_bin_n_(header, pos->header, header_len) can cause the function to read header_len bytes from header. If MHD_str_equal_caseless_bin_n_ uses a <string.h> routine such as memcmp/strncasecmp internally, that will access beyond header's bounds. Note: the code only checks header != NULL and header[0] != 0 and compares header_len to pos->header_size (protecting pos->header), but it does not validate that header actually has header_len bytes, so an out-of-bounds access is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_header_token_ci code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_header_token_ci with it.\n  - Your function must have the exact same signature as MHD_lookup_header_token_ci.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_header_token_ci to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_header_token_ci will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = NULL;\n\n  /* Open log file in append mode. Best-effort; do not fail the logic if logging\n     is not available. */\n  log = fopen(\"/tmp/logs/3383.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"MHD_lookup_header_token_ci entered: connection=%p header=%p header_len=%zu token=%p token_len=%zu\\n\",\n            (const void *)connection, (const void *)header, header_len, (const void *)token, token_len);\n    if (header)\n      fprintf(log, \"  header[0]=%c (0x%02x)\\n\", (header[0] >= 32 && header[0] < 127) ? header[0] : '?', (unsigned char)header[0]);\n    else\n      fprintf(log, \"  header is NULL\\n\");\n    if (token)\n      fprintf(log, \"  token[0]=%c (0x%02x)\\n\", (token[0] >= 32 && token[0] < 127) ? token[0] : '?', (unsigned char)token[0]);\n    else\n      fprintf(log, \"  token is NULL\\n\");\n    fflush(log);\n  }\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n  {\n    if (log) {\n      fprintf(log, \"  Initial parameter check failed: connection=%p header=%p header_first=%d token=%p token_first=%d\\n\",\n              (const void *)connection, (const void *)header, header ? (int)header[0] : -1,\n              (const void *)token, token ? (int)token[0] : -1);\n      fclose(log);\n    }\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log) {\n      fprintf(log, \"  Inspecting header entry: pos=%p kind=0x%08x header_size=%zu header_ptr=%p value_ptr=%p\\n\",\n              (void *)pos, (unsigned int)pos->kind, pos->header_size,\n              (void *)pos->header, (void *)pos->value);\n      fflush(log);\n    }\n\n    /* Preserve original condition order and behavior. Add probes for each\n       sub-condition so callers can reproduce and see the control flow and\n       state that may lead to the violation described. */\n    if (0 == (pos->kind & MHD_HEADER_KIND))\n    {\n      if (log) fprintf(log, \"    Skipping entry: kind mask not set (pos->kind & MHD_HEADER_KIND)==0\\n\");\n      continue;\n    }\n\n    if (header_len != pos->header_size)\n    {\n      if (log) fprintf(log, \"    Skipping entry: header_len (%zu) != pos->header_size (%zu)\\n\", header_len, pos->header_size);\n      continue;\n    }\n\n    /* At this point header_len == pos->header_size. If header != pos->header\n       then the code will call MHD_str_equal_caseless_bin_n_ with header_len.\n       That call is the focus of the potential out-of-bounds read. We log the\n       pointer values and sizes so investigators can determine if header may\n       not actually have header_len bytes available. */\n    if (log) {\n      fprintf(log, \"    header_len matches pos->header_size (%zu). Comparing headers: header=%p pos->header=%p\\n\",\n              header_len, (const void *)header, (const void *)pos->header);\n      fflush(log);\n    }\n\n    /* Evaluate the header equality exactly as original code: either same\n       pointer or caseless binary compare. */\n    bool headers_equal = false;\n    if (header == pos->header)\n    {\n      headers_equal = true;\n      if (log) fprintf(log, \"    Headers are identical pointers (header == pos->header).\\n\");\n    }\n    else\n    {\n      if (log) fprintf(log, \"    Headers are different pointers; calling MHD_str_equal_caseless_bin_n_(header, pos->header, header_len)\\n\");\n      fflush(log);\n      /* This call mirrors the original control flow. It is only invoked when\n         header_len == pos->header_size, as above. If header does not actually\n         have header_len bytes available this is the point an out-of-bounds\n         read could occur. We log before and after the call so the trace\n         captures the arguments and the result. */\n      headers_equal = MHD_str_equal_caseless_bin_n_ (header, pos->header, header_len);\n      if (log) fprintf(log, \"    MHD_str_equal_caseless_bin_n_ returned %s\\n\", headers_equal ? \"true\" : \"false\");\n    }\n\n    if (!headers_equal)\n    {\n      if (log) fflush(log);\n      continue;\n    }\n\n    /* If headers match, check for the token in the header value. */\n    bool has_token = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n    if (log) fprintf(log, \"    MHD_str_has_token_caseless_ returned %s for value_ptr=%p\\n\", has_token ? \"true\" : \"false\", (void *)pos->value);\n\n    if (has_token)\n    {\n      if (log) {\n        fprintf(log, \"  Match found: returning true (pos=%p)\\n\", (void *)pos);\n        fclose(log);\n      }\n      return true;\n    }\n    else\n    {\n      if (log) fprintf(log, \"    Token not present; continuing search.\\n\");\n    }\n  }\n\n  if (log) {\n    fprintf(log, \"No matching header/token found: returning false\\n\");\n    fclose(log);\n  }\n  return false;\n}\n"
}