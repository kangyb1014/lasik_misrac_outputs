{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call may violate Rule 21.17 if the helper MHD_str_has_token_caseless_ uses string.h routines (e.g. memcmp/memcpy/strlen) without ensuring its pointer/length arguments are within the actual object bounds. Example violation: token points to a 4\u2011byte buffer (\"abc\\0\") but token_len==10, and MHD_str_has_token_caseless_ calls memcmp(..., token, token_len) or otherwise reads token_len bytes \u2014 this would access beyond the token object. Similarly, if pos->value is shorter than token_len and the helper reads token_len bytes from pos->value, that also overruns the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_header_token_ci code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_header_token_ci with it.\n  - Your function must have the exact same signature as MHD_lookup_header_token_ci.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_header_token_ci to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_header_token_ci will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *log = fopen(\"/tmp/logs/3383.txt\", \"a\");\n\n  if (log)\n    fprintf(log, \"ENTER: MHD_lookup_header_token_ci connection=%p header=%p header_len=%zu token=%p token_len=%zu\\n\",\n            (const void *)connection, (const void *)header, header_len,\n            (const void *)token, token_len);\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n  {\n    if (log)\n      fprintf(log, \"EARLY RETURN: invalid input (connection=%p header=%p token=%p)\\n\",\n              (const void *)connection, (const void *)header, (const void *)token);\n    if (log) fclose(log);\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n    {\n      /* Log the header node pointers and metadata but avoid dereferencing\n         potentially-short buffers beyond their known sizes. */\n      fprintf(log, \"LOOP: pos=%p pos->next=%p kind=0x%08x header_size=%zu header_ptr=%p value_ptr=%p\\n\",\n              (void *)pos, (void *)pos->next,\n              (unsigned int) pos->kind,\n              (size_t) pos->header_size,\n              (const void *) pos->header,\n              (const void *) pos->value);\n    }\n\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) )\n    {\n      if (log)\n      {\n        /* Log before invoking token-check helper. Do not read or print\n           more of the token or pos->value than is guaranteed by the\n           callers' checks. We print pointer values and lengths and the\n           first byte if it is safe (non-NULL pointer and accessible\n           first byte). This minimizes the chance of introducing new\n           out-of-bounds reads while providing useful diagnostics. */\n        fprintf(log, \"CANDIDATE MATCH: header matched: pos=%p header_ptr=%p header_size=%zu\\n\",\n                (void *)pos, (const void *)pos->header, (size_t)pos->header_size);\n\n        fprintf(log, \"CALL: MHD_str_has_token_caseless_(pos->value=%p, token=%p, token_len=%zu)\\n\",\n                (const void *)pos->value, (const void *)token, token_len);\n\n        if (token != NULL)\n        {\n          /* token[0] is safe to inspect because caller already checked token!=NULL && token[0]!=0 */\n          unsigned char tb = (unsigned char) token[0];\n          fprintf(log, \"token[0]=0x%02x (%c)\\n\", tb, (tb >= 32 && tb < 127) ? (char)tb : '.');\n        }\n        else\n        {\n          fprintf(log, \"token==NULL\\n\");\n        }\n\n        if (pos->value != NULL)\n        {\n          /* Only log the first byte of pos->value if available to avoid\n             accidental overreads (we don't know the true allocated size\n             here). */\n          unsigned char vb = (unsigned char) pos->value[0];\n          fprintf(log, \"pos->value[0]=0x%02x (%c)\\n\", vb, (vb >= 32 && vb < 127) ? (char)vb : '.');\n        }\n        else\n        {\n          fprintf(log, \"pos->value==NULL\\n\");\n        }\n      }\n\n      /* Call the helper exactly once and log the result. */\n      bool has_token = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n\n      if (log)\n        fprintf(log, \"RESULT: MHD_str_has_token_caseless_ returned %d for pos=%p\\n\",\n                has_token ? 1 : 0, (void *)pos);\n\n      if (has_token)\n      {\n        if (log)\n          fprintf(log, \"MATCH FOUND: returning true (pos=%p)\\n\", (void *)pos);\n        if (log) fclose(log);\n        return true;\n      }\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"SKIP: candidate did not meet header/kind/size/equality checks (pos=%p)\\n\", (void *)pos);\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: no match found, returning false\\n\");\n    fclose(log);\n  }\n\n  return false;\n}\n"
}