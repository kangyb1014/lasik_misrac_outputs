{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct MHD_HTTP_Req_Header::header is declared as a non-const char * (e.g. char *header), this is a violation: the function treats the header as read\u2011only (const char *header parameter and only performs comparisons/reads), so the pointer in the struct should be const-qualified. In that case Rule 8.13 is violated (pos->header should be declared const char *). If, however, pos->header is already declared as const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_header_token_ci code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3385.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_header_token_ci code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_header_token_ci with it.\n  - Your function must have the exact same signature as MHD_lookup_header_token_ci.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_header_token_ci to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_header_token_ci will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_header_token_ci as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  FILE *logf = fopen(\"/tmp/logs/3385.txt\", \"a\");\n\n  if (logf)\n  {\n    /* Log entry with key parameter pointers and lengths. Use safe guards for header/token characters. */\n    fprintf(logf, \"ENTER: MHD_lookup_header_token_ci conn=%p header=%p header0=%c header_len=%zu token=%p token0=%c token_len=%zu\\n\",\n            (void *)connection,\n            (void *)header,\n            (NULL != header && 0 != header[0]) ? header[0] : '?',\n            header_len,\n            (void *)token,\n            (NULL != token && 0 != token[0]) ? token[0] : '?',\n            token_len);\n    fflush(logf);\n  }\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EARLY RETURN: invalid argument(s)\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (logf)\n    {\n      /* Log state of the current header node. */\n      fprintf(logf, \"LOOP: pos=%p pos->header=%p pos->header_size=%zu pos->kind=0x%lx pos->value=%p\\n\",\n              (void *)pos,\n              (void *)pos->header,\n              (size_t)pos->header_size,\n              (unsigned long)pos->kind,\n              (void *)pos->value);\n      fflush(logf);\n    }\n\n    /* Preserve original evaluation order and semantics while capturing intermediate results. */\n    int cond_kind = (0 != (pos->kind & MHD_HEADER_KIND));\n    int cond_size = (header_len == pos->header_size);\n    int cond_ptr_eq = (header == pos->header);\n    int cond_str_eq = 0;\n    if (!cond_ptr_eq && cond_size)\n    {\n      /* Only call string comparison if sizes match (matches original short-circuit order). */\n      cond_str_eq = MHD_str_equal_caseless_bin_n_ (header, pos->header, header_len);\n    }\n\n    int cond_token = 0;\n    if (cond_kind && cond_size && (cond_ptr_eq || cond_str_eq))\n    {\n      /* Only call token check when prior conditions are satisfied (matches original short-circuit order). */\n      cond_token = MHD_str_has_token_caseless_ (pos->value, token, token_len);\n    }\n\n    if (logf)\n    {\n      fprintf(logf, \"CONDS: kind=%d size=%d ptr_eq=%d str_eq=%d token=%d\\n\",\n              cond_kind, cond_size, cond_ptr_eq, cond_str_eq, cond_token);\n      fflush(logf);\n    }\n\n    if (cond_kind && cond_size && (cond_ptr_eq || cond_str_eq) && cond_token)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"MATCH: pos=%p -> returning true\\n\", (void *)pos);\n        fclose(logf);\n      }\n      return true;\n    }\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"NO MATCH: returning false\\n\");\n    fclose(logf);\n  }\n  return false;\n}\n"
}