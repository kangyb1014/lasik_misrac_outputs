{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call can be dead code if the mhd_assert macro expands to a no-op in the project build (e.g. behaves like standard assert and is compiled out in non\u2011debug builds). In that case the statement performs no operation at runtime and its removal would not affect program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2. To avoid the violation, either ensure the check is a genuine runtime check that remains in all builds or document/guard the conditional compilation so the project contains no executed-but-effectless operations.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_no_space_err_status_code code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2228.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_no_space_err_status_code:\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_no_space_err_status_code code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_no_space_err_status_code with it.\n  - Your function must have the exact same signature as get_no_space_err_status_code.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_no_space_err_status_code to check logs.\n  - Your function MUST preserve the original logic of get_no_space_err_status_code as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_no_space_err_status_code will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_no_space_err_status_code as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n  unsigned int ret = 0;\n  FILE *log = fopen(\"/tmp/logs/2228.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER get_no_space_err_status_code: c=%p, state=%d, stage=%d, add_element=%p, add_element_size=%zu\\n\",\n            (void*)c, (int)(c ? c->state : 0), (int)stage, (void*)add_element, add_element_size);\n  }\n\n  /* Log the assertion checks so we can reproduce if mhd_assert is a no-op. */\n  if (log)\n  {\n    int a1 = (int)(MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n    int a2 = (int)(MHD_PROC_RECV_HEADERS <= stage);\n    int a3 = (int)(((0 == add_element_size) || (NULL != add_element)));\n    fprintf(log, \"ASSERTIONS: req_line_received<state=%d, proc_recv_headers<=stage=%d, add_el_ok=%d\\n\",\n            a1, a2, a3);\n  }\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    if (log)\n    {\n      int a4 = (int)(NULL != c->rq.field_lines.start);\n      fprintf(log, \"BRANCH: headers not yet received: field_lines.start != NULL -> %d\\n\", a4);\n    }\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n    if (log)\n      fprintf(log, \"computed opt_headers_size (partial) = %zu\\n\", opt_headers_size);\n  }\n  else\n  {\n    opt_headers_size = c->rq.field_lines.size;\n    if (log)\n      fprintf(log, \"opt_headers_size (full) = %zu\\n\", opt_headers_size);\n  }\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    if (log)\n      fprintf(log, \"RETURN branch: chunked body and add_element_size %zu > min chunk -> %u\\n\",\n              add_element_size, (unsigned)MHD_HTTP_CONTENT_TOO_LARGE);\n    ret = MHD_HTTP_CONTENT_TOO_LARGE;\n    goto done;\n  }\n\n  host_field_line_size = 0;\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (log)\n      fprintf(log, \"HEADER CHECK: header_host_key_len=%zu, is_host_header=%d\\n\",\n              header_host_key_len, (int)is_host_header);\n\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      if (log)\n      {\n        /* replicate the assertion logic evaluation for logging */\n        int a_host_assert = (int)(! is_parsed || (0 == add_element[header_host_key_len]));\n        fprintf(log, \"HOST HEADER: is_parsed=%d, add_element[%zu]=%d, host_assert=%d\\n\",\n                (int)is_parsed, header_host_key_len,\n                (int)((header_host_key_len < add_element_size) ? (unsigned char)add_element[header_host_key_len] : -1),\n                a_host_assert);\n      }\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n\n      if (log)\n        fprintf(log, \"HOST HEADER: actual_element_size=%zu\\n\", actual_element_size);\n\n      mhd_assert (opt_headers_size >= actual_element_size);\n      if (log)\n        fprintf(log, \"ASSERT opt_headers_size >= actual_element_size: %d (opt=%zu, actual=%zu)\\n\",\n                (int)(opt_headers_size >= actual_element_size), opt_headers_size, actual_element_size);\n\n      opt_headers_size -= actual_element_size;\n      if (log)\n        fprintf(log, \"opt_headers_size after host removed = %zu\\n\", opt_headers_size);\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      if (log)\n        fprintf(log, \"LOOKUP: host_field_name_value_len=%zu, host_field_line_size=%zu\\n\",\n                host_field_name_value_len, host_field_line_size);\n\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n        if (log)\n          fprintf(log, \"opt_headers_size after possible app-added host = %zu\\n\", opt_headers_size);\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    if (log)\n      fprintf(log, \"METHOD: method pointer=%p, computing strlen\\n\", (void*)c->rq.method);\n    method_size = strlen (c->rq.method);\n    if (log)\n      fprintf(log, \"METHOD: method_size=%zu\\n\", method_size);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    if (log)\n      fprintf(log, \"BRANCH: opt_headers_size %zu > MAX_REASONABLE_HEADERS -> comparing with uri_size %zu and method_size %zu\\n\",\n              opt_headers_size, uri_size, method_size);\n\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n      {\n        if (log) fprintf(log, \"RETURN: REQUEST_HEADER_FIELDS_TOO_LARGE\\n\");\n        ret = MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n        goto done;\n      }\n      else\n      {\n        if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n        ret = MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n        goto done;\n      }\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n      {\n        if (log) fprintf(log, \"RETURN: URI_TOO_LONG (much larger than headers)\\n\");\n        ret = MHD_HTTP_URI_TOO_LONG;\n        goto done;\n      }\n      else\n      {\n        if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n        ret = MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n        goto done;\n      }\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    if (log) fprintf(log, \"BRANCH: uri_size %zu > MAX_REASONABLE_REQ_TARGET -> method_size %zu\\n\", uri_size, method_size);\n    if ((uri_size / 16) > method_size)\n    {\n      if (log) fprintf(log, \"RETURN: URI_TOO_LONG\\n\");\n      ret = MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n      goto done;\n    }\n    else\n    {\n      if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n      ret = MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n      goto done;\n    }\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    if (log) fprintf(log, \"BRANCH: opt_headers_size %zu > MIN_REASONABLE_HEADERS -> comparing with uri_size %zu and method_size %zu\\n\",\n                     opt_headers_size, uri_size, method_size);\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n      {\n        if (log) fprintf(log, \"RETURN: REQUEST_HEADER_FIELDS_TOO_LARGE\\n\");\n        ret = MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n        goto done;\n      }\n      else\n      {\n        if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n        ret = MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n        goto done;\n      }\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n      {\n        if (log) fprintf(log, \"RETURN: URI_TOO_LONG\\n\");\n        ret = MHD_HTTP_URI_TOO_LONG;\n        goto done;\n      }\n      else\n      {\n        if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n        ret = MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n        goto done;\n      }\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    if (log) fprintf(log, \"BRANCH: uri_size %zu > MIN_REASONABLE_REQ_TARGET -> compare with method_size %zu\\n\", uri_size, method_size);\n    if (uri_size > method_size * 4)\n    {\n      if (log) fprintf(log, \"RETURN: URI_TOO_LONG\\n\");\n      ret = MHD_HTTP_URI_TOO_LONG;\n      goto done;\n    }\n    else\n    {\n      if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (method unreasonably large)\\n\");\n      ret = MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      goto done;\n    }\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    if (log) fprintf(log, \"RETURN: NOT_IMPLEMENTED (non-standard long request method)\\n\");\n    ret = MHD_HTTP_NOT_IMPLEMENTED;\n    goto done;\n  }\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n    {\n      if (log) fprintf(log, \"RETURN: REQUEST_HEADER_FIELDS_TOO_LARGE (opt_headers_size >= uri_size)\\n\");\n      ret = MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      goto done;\n    }\n    else\n    {\n      if (log) fprintf(log, \"RETURN: URI_TOO_LONG (uri_size > opt_headers_size)\\n\");\n      ret = MHD_HTTP_URI_TOO_LONG;\n      goto done;\n    }\n  }\n\n  if (0 != host_field_line_size)\n  {\n    if (log) fprintf(log, \"RETURN: REQUEST_HEADER_FIELDS_TOO_LARGE (host_field_line_size != 0)\\n\");\n    ret = MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    goto done;\n  }\n\n  if (log) fprintf(log, \"RETURN: URI_TOO_LONG (default fallthrough)\\n\");\n  ret = MHD_HTTP_URI_TOO_LONG;\n\ndone:\n  if (log)\n  {\n    fprintf(log, \"EXIT get_no_space_err_status_code: ret=%u\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}