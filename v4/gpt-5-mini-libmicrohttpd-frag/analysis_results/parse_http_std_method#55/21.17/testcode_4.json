{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 memcmp(m, MHD_HTTP_METHOD_HEAD, len) will read len bytes from the caller-supplied pointer m. The code only checks that len equals the length of the static literal, not that the object pointed to by method has at least len bytes. If the caller passes a method pointer whose accessible/storage size is smaller than len (for example method points to \"HE\\0\" but len==4), memcmp will read past the end of the object referenced by m and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2953.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_http_std_method code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_http_std_method with it.\n  - Your function must have the exact same signature as parse_http_std_method.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_http_std_method to check logs.\n  - Your function MUST preserve the original logic of parse_http_std_method as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_http_std_method will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_http_std_method as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Open log file and record entry + state. Use append so multiple calls accumulate. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"enter parse_http_std_method: m=%p len=%zu\\n\", (const void *)m, len);\n        fprintf(log, \"  expected lens: GET=%zu HEAD=%zu POST=%zu PUT=%zu DELETE=%zu CONNECT=%zu OPTIONS=%zu TRACE=%zu\\n\",\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS),\n                (size_t) MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE));\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    {\n      /* Log the branch decision */\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: GET matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: HEAD matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: POST matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: PUT matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: DELETE matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: CONNECT matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: OPTIONS matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: TRACE matched (len=%zu)\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n    }\n  else\n    {\n      FILE *log = fopen(\"/tmp/logs/2953.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"branch: OTHER (no match) for len=%zu\\n\", len);\n          fflush(log);\n          fclose(log);\n        }\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n    }\n}\n"
}