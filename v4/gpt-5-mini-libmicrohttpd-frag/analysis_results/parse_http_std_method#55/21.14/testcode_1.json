{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nWhen len equals MHD_STATICSTR_LEN_(MHD_HTTP_METHOD_DELETE) the code calls memcmp(m, MHD_HTTP_METHOD_DELETE, len). MHD_HTTP_METHOD_DELETE is a null-terminated string literal, so memcmp is being used to compare a null-terminated string (the literal) against m \u2014 this use violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2954.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_http_std_method code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_http_std_method with it.\n  - Your function must have the exact same signature as parse_http_std_method.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_http_std_method to check logs.\n  - Your function MUST preserve the original logic of parse_http_std_method as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_http_std_method will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_http_std_method as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Open log file (append) to record control flow and state. If open\n     fails, we simply skip logging but keep original behavior. */\n  FILE *logf = fopen(\"/tmp/logs/2954.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"parse_http_std_method: entry method=%p len=%zu\\n\", (void *)m, len);\n      /* Print up to a reasonable prefix of the method bytes (method may not be NUL-terminated) */\n      {\n        size_t to_write = (len < 128u) ? len : 128u;\n        fprintf(logf, \"method (first %zu bytes): '\", to_write);\n        if (to_write > 0u)\n          fwrite(m, 1, to_write, logf);\n        if (len > to_write)\n          fprintf(logf, \"...\");\n        fprintf(logf, \"'\\n\");\n      }\n    }\n\n  /* Preserve original logic but capture intermediate checks and memcmp results. */\n  {\n    size_t expect_len;\n    int matched = 0;\n    int cmpres = 1; /* non-zero default means not equal */\n\n    /* GET */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n    if (logf) fprintf(logf, \"checking GET: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_GET, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(GET, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for GET: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n        if (logf) fprintf(logf, \"  branch -> GET\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* HEAD */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n    if (logf) fprintf(logf, \"checking HEAD: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(HEAD, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for HEAD: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n        if (logf) fprintf(logf, \"  branch -> HEAD\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* POST */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n    if (logf) fprintf(logf, \"checking POST: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_POST, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(POST, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for POST: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n        if (logf) fprintf(logf, \"  branch -> POST\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* PUT */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n    if (logf) fprintf(logf, \"checking PUT: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(PUT, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for PUT: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n        if (logf) fprintf(logf, \"  branch -> PUT\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* DELETE */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n    if (logf) fprintf(logf, \"checking DELETE: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(DELETE, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for DELETE: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n        if (logf) fprintf(logf, \"  branch -> DELETE\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* CONNECT */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n    if (logf) fprintf(logf, \"checking CONNECT: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(CONNECT, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for CONNECT: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n        if (logf) fprintf(logf, \"  branch -> CONNECT\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* OPTIONS */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n    if (logf) fprintf(logf, \"checking OPTIONS: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(OPTIONS, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for OPTIONS: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n        if (logf) fprintf(logf, \"  branch -> OPTIONS\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* TRACE */\n    expect_len = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n    if (logf) fprintf(logf, \"checking TRACE: expected_len=%zu\\n\", expect_len);\n    if (expect_len == len)\n      {\n        cmpres = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n        matched = (0 == cmpres);\n        if (logf) fprintf(logf, \"  memcmp(TRACE, m, %zu) => %d matched=%d\\n\", len, cmpres, matched);\n      }\n    else\n      {\n        matched = 0;\n        if (logf) fprintf(logf, \"  length mismatch for TRACE: got %zu expected %zu\\n\", len, expect_len);\n      }\n    if (matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n        if (logf) fprintf(logf, \"  branch -> TRACE\\n\");\n        if (logf) fclose(logf);\n        return;\n      }\n\n    /* default */\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n    if (logf) fprintf(logf, \"  branch -> OTHER\\n\");\n    if (logf) fclose(logf);\n  }\n}\n"
}