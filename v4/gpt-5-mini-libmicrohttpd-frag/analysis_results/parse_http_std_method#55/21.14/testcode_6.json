{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcmp(m, MHD_HTTP_METHOD_OPTIONS, len) where MHD_HTTP_METHOD_OPTIONS is a null\u2011terminated string literal. Even though len is checked to equal the literal\u2019s length, memcmp is still being used to compare a null\u2011terminated string, which is forbidden by MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2954.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_http_std_method code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_http_std_method with it.\n  - Your function must have the exact same signature as parse_http_std_method.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_http_std_method to check logs.\n  - Your function MUST preserve the original logic of parse_http_std_method as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_http_std_method will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_http_std_method as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Open log file to record control flow and state for debugging the\n     memcmp usage (violation scenario). Use append mode so repeated calls\n     accumulate evidence. */\n  {\n    FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n    if (fp != NULL)\n      {\n        fprintf (fp, \"parse_http_std_method ENTER: method=%p len=%zu\\n\",\n                 (void *) m, len);\n        /* print bytes of method up to len in a safe, escaped form */\n        fprintf (fp, \"method bytes: '\");\n        for (size_t i = 0U; i < len; ++i)\n          {\n            unsigned char c = (unsigned char) m[i];\n            if ((c >= 32U) && (c < 127U))\n              fputc ((int) c, fp);\n            else\n              fprintf (fp, \"\\\\x%02x\", (unsigned) c);\n          }\n        fprintf (fp, \"'\\n\");\n        fclose (fp);\n      }\n  }\n\n  /* Preserve original matching logic but capture intermediate state for each\n     comparison without changing control flow. For each candidate method we\n     first check length, then perform memcmp only if length matches, and log\n     the results. */\n  {\n    int matched = 0;\n\n    /* GET */\n    {\n      size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET);\n      int len_ok = (expected == len) ? 1 : 0;\n      int cmp = 1; /* non-zero means different by default */\n      if (len_ok)\n        cmp = memcmp (m, MHD_HTTP_METHOD_GET, len);\n      FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n      if (fp)\n        {\n          fprintf (fp, \"CHECK GET: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                   expected, len_ok, cmp);\n          fclose (fp);\n        }\n      if (len_ok && (0 == cmp))\n        {\n          connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n          matched = 1;\n        }\n    }\n\n    /* HEAD */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_HEAD, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK HEAD: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n            matched = 1;\n          }\n      }\n\n    /* POST */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_POST, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK POST: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n            matched = 1;\n          }\n      }\n\n    /* PUT */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_PUT, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK PUT: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n            matched = 1;\n          }\n      }\n\n    /* DELETE */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_DELETE, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK DELETE: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n            matched = 1;\n          }\n      }\n\n    /* CONNECT */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_CONNECT, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK CONNECT: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n            matched = 1;\n          }\n      }\n\n    /* OPTIONS -- this is the branch reported as violating MISRA 21.14; log\n       additional contextual information here so the evidence is captured. */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_OPTIONS, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK OPTIONS: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fprintf (fp, \"NOTE: MHD_HTTP_METHOD_OPTIONS is a null-terminated string literal; memcmp used with length %zu\\n\",\n                     len);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n            matched = 1;\n          }\n      }\n\n    /* TRACE */\n    if (!matched)\n      {\n        size_t expected = MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE);\n        int len_ok = (expected == len) ? 1 : 0;\n        int cmp = 1;\n        if (len_ok)\n          cmp = memcmp (m, MHD_HTTP_METHOD_TRACE, len);\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"CHECK TRACE: expected_len=%zu len_ok=%d memcmp=%d\\n\",\n                     expected, len_ok, cmp);\n            fclose (fp);\n          }\n        if (len_ok && (0 == cmp))\n          {\n            connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n            matched = 1;\n          }\n      }\n\n    /* OTHER */\n    if (!matched)\n      {\n        connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n        FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n        if (fp)\n          {\n            fprintf (fp, \"FALLTHROUGH: set http_mthd = MHD_HTTP_MTHD_OTHER\\n\");\n            fclose (fp);\n          }\n      }\n\n    /* Final log of selected method */\n    {\n      FILE *fp = fopen(\"/tmp/logs/2954.txt\", \"a\");\n      if (fp)\n        {\n          fprintf (fp, \"EXIT: http_mthd=%d\\n\", (int) connection->rq.http_mthd);\n          fclose (fp);\n        }\n    }\n  }\n}\n"
}