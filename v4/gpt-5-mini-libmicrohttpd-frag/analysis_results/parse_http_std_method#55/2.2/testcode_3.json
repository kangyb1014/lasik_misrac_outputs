{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 if mhd_assert is a diagnostic-only macro that expands to nothing in release builds (e.g. when NDEBUG is defined) then the call mhd_assert(0 != len); is executed in some builds (debug) but can be removed without affecting normal program behaviour in release builds, which meets the definition of dead code. For example, with mhd_assert implemented like the standard assert (abort on failure in debug, no code emitted in release) the check has no effect on correct runs and its removal would not change behaviour \u2014 therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_http_std_method code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2958.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_http_std_method:\n```c\nstatic void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n  else\n    connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_http_std_method code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_http_std_method with it.\n  - Your function must have the exact same signature as parse_http_std_method.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_http_std_method to check logs.\n  - Your function MUST preserve the original logic of parse_http_std_method as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_http_std_method will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_http_std_method as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nparse_http_std_method (struct MHD_Connection *connection,\n                       const char *method,\n                       size_t len)\n{\n  const char *const m = method; /**< short alias */\n  mhd_assert (NULL != m);\n  mhd_assert (0 != len);\n\n  /* Logging probe: record entry and basic state to /tmp/logs/2958.txt. */\n  do\n    {\n      FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n      if (log)\n        {\n          /* Log pointer values and length */\n          fprintf(log, \"parse_http_std_method ENTER: connection=%p method=%p len=%zu\\n\",\n                  (void *) connection, (void *) m, len);\n\n          /* Log a short, safe preview of the method bytes (up to 32 bytes) */\n          if (m != NULL && len > 0)\n            {\n              size_t _preview_len = (len < 32) ? len : 32;\n              char _preview[33];\n              memcpy(_preview, m, _preview_len);\n              _preview[_preview_len] = '\\0';\n              fprintf(log, \"  method_preview(%zu): '%s'\\n\", _preview_len, _preview);\n            }\n          else\n            {\n              fprintf(log, \"  method_preview: <none>\\n\");\n            }\n\n          fclose(log);\n        }\n    }\n  while (0);\n\n  if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_GET) == len) &&\n      (0 == memcmp (m, MHD_HTTP_METHOD_GET, len)))\n    {\n      /* Log branch taken */\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: GET -> MHD_HTTP_MTHD_GET\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_GET;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_HEAD) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_HEAD, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: HEAD -> MHD_HTTP_MTHD_HEAD\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_HEAD;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_POST) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_POST, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: POST -> MHD_HTTP_MTHD_POST\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_POST;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_PUT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_PUT, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: PUT -> MHD_HTTP_MTHD_PUT\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_PUT;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_DELETE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_DELETE, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: DELETE -> MHD_HTTP_MTHD_DELETE\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_DELETE;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_CONNECT) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_CONNECT, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: CONNECT -> MHD_HTTP_MTHD_CONNECT\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_CONNECT;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_OPTIONS) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_OPTIONS, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: OPTIONS -> MHD_HTTP_MTHD_OPTIONS\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OPTIONS;\n    }\n  else if ((MHD_STATICSTR_LEN_ (MHD_HTTP_METHOD_TRACE) == len) &&\n           (0 == memcmp (m, MHD_HTTP_METHOD_TRACE, len)))\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: TRACE -> MHD_HTTP_MTHD_TRACE\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_TRACE;\n    }\n  else\n    {\n      do\n        {\n          FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n          if (log)\n            {\n              fprintf(log, \"  branch: OTHER -> MHD_HTTP_MTHD_OTHER\\n\");\n              fclose(log);\n            }\n        }\n      while (0);\n\n      connection->rq.http_mthd = MHD_HTTP_MTHD_OTHER;\n    }\n\n  /* Log exit and selected method value */\n  do\n    {\n      FILE *log = fopen(\"/tmp/logs/2958.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"parse_http_std_method EXIT: selected_http_mthd=%d for connection=%p\\n\",\n                  (int) connection->rq.http_mthd, (void *) connection);\n          fclose(log);\n        }\n    }\n  while (0);\n}\n"
}