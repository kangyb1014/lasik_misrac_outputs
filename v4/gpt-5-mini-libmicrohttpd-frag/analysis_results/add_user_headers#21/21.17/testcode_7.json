{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: el_size is computed by adding hdr->header_size, hdr->value_size and several small constants into a size_t. These additions can overflow (wrap-around). Example: if hdr->header_size = SIZE_MAX - 3 and hdr->value_size = 0 then el_size becomes (SIZE_MAX - 3) + 2 + 0 + 2 = SIZE_MAX + 1 -> wraps to 0. The subsequent check if (buf_size < *ppos + el_size) can therefore pass incorrectly and the following memcpy calls (which copy hdr->header_size and hdr->value_size bytes) will write beyond buf bounds. Thus Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_user_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_user_headers with it.\n  - Your function must have the exact same signature as add_user_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_user_headers to check logs.\n  - Your function MUST preserve the original logic of add_user_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_user_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_user_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n  FILE *log = NULL;\n\n  /* Open log file once at entry. Use append so multiple calls accumulate evidence. */\n  log = fopen(\"/tmp/logs/4383.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"enter add_user_headers: buf=%p, ppos=%p(*ppos=%zu), buf_size=%zu, response=%p, filter_transf_enc=%d, filter_content_len=%d, add_close=%d, add_keep_alive=%d\\n\",\n            (void *)buf, (void *)ppos, (ppos ? *ppos : (size_t)0), buf_size,\n            (void *)response, (int)filter_transf_enc, (int)filter_content_len, (int)add_close, (int)add_keep_alive);\n    fflush(log);\n  }\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (log)\n    {\n      fprintf(log, \"loop hdr=%p: kind=%d, header_size=%zu, value_size=%zu, initial_pos=%zu\\n\",\n              (void *)hdr, (int)hdr->kind, hdr->header_size, hdr->value_size, initial_pos);\n      fflush(log);\n    }\n    if (MHD_HEADER_KIND != hdr->kind)\n    {\n      if (log)\n      {\n        fprintf(log, \" skip header: kind mismatch (expected %d)\\n\", (int)MHD_HEADER_KIND);\n        fflush(log);\n      }\n      continue;\n    }\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        if (log)\n        {\n          fprintf(log, \" filtered Transfer-Encoding header at hdr=%p\\n\", (void *)hdr);\n          fflush(log);\n        }\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        if (log)\n        {\n          fprintf(log, \" filtered Content-Length header at hdr=%p, reset filter_transf_enc=%d\\n\",\n                  (void *)hdr, (int)filter_transf_enc);\n          fflush(log);\n        }\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    /* Compute el_size exactly as original code, but also compute widened sum to detect wrap-around for logging. */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (log)\n    {\n      unsigned long long wide_sum = (unsigned long long)hdr->header_size + 2ull + (unsigned long long)hdr->value_size + 2ull;\n      unsigned long long max_sz = (unsigned long long)((size_t)-1);\n      int overflow_el_size = (wide_sum > max_sz) ? 1 : 0;\n      fprintf(log, \" computed el_size (wrapped)=%zu, wide_sum=%llu, overflow_el_size=%d\\n\",\n              el_size, wide_sum, overflow_el_size);\n      fflush(log);\n    }\n\n    /* Check available buffer space using original semantics. Log widened arithmetic for evidence. */\n    if (buf_size < *ppos + el_size)\n    {\n      if (log)\n      {\n        unsigned long long wide_rhs = (unsigned long long)(*ppos) + (unsigned long long)el_size;\n        unsigned long long wide_buf = (unsigned long long)buf_size;\n        fprintf(log, \" buffer check failed: buf_size(%zu) < *ppos(%zu) + el_size(%zu) -- wide: buf_size=%llu, rhs=%llu\\n\",\n                buf_size, *ppos, el_size, wide_buf, wide_rhs);\n        fflush(log);\n        fclose(log);\n      }\n      else\n      {\n        /* ensure we return same as original */\n      }\n      return false;\n    }\n\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    if (log)\n    {\n      fprintf(log, \" memcpy header: dest=%p, src=%p, n=%zu\\n\",\n              (void *)(buf + *ppos), (void *)hdr->header, hdr->header_size);\n      fflush(log);\n    }\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (log)\n        {\n          fprintf(log, \" add_close branch: after adding token el_size=%zu, initial_pos=%zu\\n\",\n                  el_size, initial_pos);\n          fflush(log);\n        }\n        if (buf_size < initial_pos + el_size)\n        {\n          if (log)\n          {\n            unsigned long long wide_initial_rhs = (unsigned long long)initial_pos + (unsigned long long)el_size;\n            fprintf(log, \" buffer check failed (add_close): buf_size(%zu) < initial_pos(%zu) + el_size(%zu) -- wide rhs=%llu\\n\",\n                    buf_size, initial_pos, el_size, wide_initial_rhs);\n            fflush(log);\n            fclose(log);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        if (log)\n        {\n          fprintf(log, \" memcpy close token at dest=%p, n=%zu\\n\", (void *)(buf + *ppos), (size_t)MHD_STATICSTR_LEN_(\"close, \"));\n          fflush(log);\n        }\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (log)\n        {\n          fprintf(log, \" add_keep_alive branch: after adding token el_size=%zu, initial_pos=%zu\\n\",\n                  el_size, initial_pos);\n          fflush(log);\n        }\n        if (buf_size < initial_pos + el_size)\n        {\n          if (log)\n          {\n            unsigned long long wide_initial_rhs2 = (unsigned long long)initial_pos + (unsigned long long)el_size;\n            fprintf(log, \" buffer check failed (add_keep_alive): buf_size(%zu) < initial_pos(%zu) + el_size(%zu) -- wide rhs=%llu\\n\",\n                    buf_size, initial_pos, el_size, wide_initial_rhs2);\n            fflush(log);\n            fclose(log);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        if (log)\n        {\n          fprintf(log, \" memcpy Keep-Alive token at dest=%p, n=%zu\\n\", (void *)(buf + *ppos), (size_t)MHD_STATICSTR_LEN_(\"Keep-Alive, \"));\n          fflush(log);\n        }\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n    {\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n      if (log)\n      {\n        fprintf(log, \" memcpy value: dest=%p, src=%p, n=%zu\\n\", (void *)(buf + *ppos), (void *)hdr->value, hdr->value_size);\n        fflush(log);\n      }\n    }\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    if (log)\n    {\n      fprintf(log, \" after header written: ppos=%zu, expected_end=%zu\\n\", *ppos, (size_t)(initial_pos + el_size));\n      fflush(log);\n    }\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  if (log)\n  {\n    fprintf(log, \"exit add_user_headers: returning true, final *ppos=%zu\\n\", *ppos);\n    fflush(log);\n    fclose(log);\n  }\n  return true;\n}\n"
}