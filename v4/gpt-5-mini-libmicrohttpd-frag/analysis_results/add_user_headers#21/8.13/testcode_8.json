{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes hdr->header (a non-const pointer to header bytes) into a string-comparison using a string literal (MHD_HTTP_HEADER_CONTENT_LENGTH). The header data is only read, not modified, so the member should be declared as pointing to const-qualified data (e.g. const char *header). Because hdr->header is not const-qualified even though it could and should be, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4385.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_user_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_user_headers with it.\n  - Your function must have the exact same signature as add_user_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_user_headers to check logs.\n  - Your function MUST preserve the original logic of add_user_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_user_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_user_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Minimal logging probe: append a record that the function was entered\n     and capture initial relevant state. */\n  {\n    FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"ENTER add_user_headers: r=%p ppos=%zu buf_size=%zu filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d flags_auto=0x%08x flags=0x%08x\\n\",\n              (void *)r, (ppos ? *ppos : (size_t)0), buf_size,\n              (int)filter_transf_enc, (int)filter_content_len,\n              (int)add_close, (int)add_keep_alive,\n              (unsigned int)r->flags_auto, (unsigned int)r->flags);\n      fclose(f);\n    }\n  }\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n\n    /* Log header iteration and basic hdr state */\n    {\n      FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"ITER header: hdr=%p kind=%d header_size=%zu value_size=%zu header_ptr=%p\\n\",\n                (void *)hdr, (int)hdr->kind, hdr->header_size, hdr->value_size, (void *)hdr->header);\n        /* Print up to the first 64 bytes of header name in hex to avoid relying on NUL-termination */\n        if (hdr->header && hdr->header_size > 0)\n        {\n          size_t to_print = hdr->header_size < 64 ? hdr->header_size : 64;\n          fprintf(f, \" header_bytes=\");\n          for (size_t i = 0; i < to_print; ++i)\n            fprintf(f, \"%02x\", (unsigned char)hdr->header[i]);\n          if (hdr->header_size > to_print)\n            fprintf(f, \"...(%zu bytes)\", hdr->header_size);\n          fprintf(f, \"\\n\");\n        }\n        fclose(f);\n      }\n    }\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      int match_len = (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) == hdr->header_size);\n      int match_name = 0;\n      if (match_len)\n        match_name = (int) MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                                          hdr->header, hdr->header_size);\n\n      /* Log comparison result for Transfer-Encoding */\n      {\n        FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \" CHECK Transfer-Encoding: header_size_match=%d name_match=%d\\n\",\n                  match_len, match_name);\n          fclose(f);\n        }\n      }\n\n      if (match_len && match_name)\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n\n        /* Log the fact we skip this header */\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \" SKIP header: Transfer-Encoding at initial_pos=%zu\\n\", initial_pos);\n            fclose(f);\n          }\n        }\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      int match_len = (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) == hdr->header_size);\n      int match_name = 0;\n      if (match_len)\n        match_name = (int) MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                          hdr->header, hdr->header_size);\n\n      /* Log comparison result for Content-Length */\n      {\n        FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n        if (f)\n        {\n          fprintf(f, \" CHECK Content-Length: header_size_match=%d name_match=%d\\n\",\n                  match_len, match_name);\n          fclose(f);\n        }\n      }\n\n      if (match_len && match_name)\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n\n        /* Log the fact we skip this header and new filter_transf_enc */\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \" SKIP header: Content-Length at initial_pos=%zu new_filter_transf_enc=%d\\n\",\n                    initial_pos, (int)filter_transf_enc);\n            fclose(f);\n          }\n        }\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"FAIL: insufficient buffer: buf_size=%zu *ppos=%zu el_size=%zu required=%zu\\n\",\n                buf_size, *ppos, el_size, *ppos + el_size);\n        fclose(f);\n      }\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"FAIL: insufficient buffer for close token: buf_size=%zu initial_pos=%zu el_size=%zu\\n\",\n                    buf_size, initial_pos, el_size);\n            fclose(f);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n\n        /* Log insertion of close token */\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \" INSERT connection token: close at pos=%zu\\n\", *ppos);\n            fclose(f);\n          }\n        }\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \"FAIL: insufficient buffer for Keep-Alive token: buf_size=%zu initial_pos=%zu el_size=%zu\\n\",\n                    buf_size, initial_pos, el_size);\n            fclose(f);\n          }\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n\n        /* Log insertion of Keep-Alive token */\n        {\n          FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n          if (f)\n          {\n            fprintf(f, \" INSERT connection token: Keep-Alive at pos=%zu\\n\", *ppos);\n            fclose(f);\n          }\n        }\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n\n    /* Log successful addition of header */\n    {\n      FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n      if (f)\n      {\n        fprintf(f, \"ADDED header at initial_pos=%zu new_ppos=%zu expected_end=%zu\\n\",\n                initial_pos, *ppos, initial_pos + el_size);\n        fclose(f);\n      }\n    }\n\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n\n  /* Final log on normal return */\n  {\n    FILE *f = fopen(\"/tmp/logs/4385.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"EXIT add_user_headers: final_ppos=%zu\\n\", *ppos);\n      fclose(f);\n    }\n  }\n\n  return true;\n}\n"
}