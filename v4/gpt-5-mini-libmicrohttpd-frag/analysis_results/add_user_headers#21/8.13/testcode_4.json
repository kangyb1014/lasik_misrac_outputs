{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes header name data and a string literal to a case-insensitive compare. If the struct member hdr->header is declared as a non-const pointer (e.g. char *header) or the macro MHD_HTTP_HEADER_TRANSFER_ENCODING expands to a non-const char array/pointer, this violates MISRA C 2023 Rule 8.13 because these pointers point to objects that are not modified and therefore should be const-qualified (const char *). For example, if struct MHD_HTTP_Res_Header declares header as 'char *header' (not 'const char *header'), that is a rule violation. Recommended fix: declare header and static string macros as const char * (and ensure comparison functions accept const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4385.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_user_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_user_headers with it.\n  - Your function must have the exact same signature as add_user_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_user_headers to check logs.\n  - Your function MUST preserve the original logic of add_user_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_user_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_user_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  /* Open log file for append. If opening fails, proceed without logging. */\n  FILE *mhd_log = fopen(\"/tmp/logs/4385.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"add_user_headers ENTER: this=%p response=%p buf=%p *ppos=%zu buf_size=%zu filter_transf_enc=%d filter_content_len=%d add_close=%d add_keep_alive=%d\\n\",\n            (void *)__builtin_frame_address(0), (void *)response, (void *)buf, (size_t)(ppos ? *ppos : 0), buf_size,\n            (int)filter_transf_enc, (int)filter_content_len, (int)add_close, (int)add_keep_alive);\n  }\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"flags_auto: no transfer-encoding chunked -> disable filter_transf_enc\\n\");\n    filter_transf_enc = false;   /* No such header */\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"flags_auto: no content-length -> disable filter_content_len\\n\");\n    filter_content_len = false;  /* No such header */\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"flags_auto: no connection header -> disable add_close/add_keep_alive\\n\");\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"flags_auto: connection close already present -> disable add_close\\n\");\n    add_close = false;          /* \"close\" token was already set */\n  }\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (mhd_log)\n      fprintf(mhd_log, \"-- header loop: hdr=%p kind=%d header_size=%zu value_size=%zu header_ptr=%p value_ptr=%p\\n\",\n              (void *)hdr, (int)hdr->kind, hdr->header_size, hdr->value_size, (void *)hdr->header, (void *)hdr->value);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"   skip: not MHD_HEADER_KIND\\n\");\n      continue;\n    }\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        if (mhd_log)\n          fprintf(mhd_log, \"   filtered: Transfer-Encoding header matched (hdr=%p) -> skipping\\n\", (void *)hdr);\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n      else\n      {\n        if (mhd_log)\n          fprintf(mhd_log, \"   no match for Transfer-Encoding (hdr=%p)\\n\", (void *)hdr);\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        if (mhd_log)\n          fprintf(mhd_log, \"   filtered: Content-Length header matched (hdr=%p) -> skipping, reset filter_transf_enc=%d\\n\",\n                  (void *)hdr, (int)filter_transf_enc);\n        continue; /* Skip \"Content-Length\" header */\n      }\n      else\n      {\n        if (mhd_log)\n          fprintf(mhd_log, \"   no match for Content-Length (hdr=%p)\\n\", (void *)hdr);\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      if (mhd_log)\n        fprintf(mhd_log, \"   error: insufficient buf_size (needed %zu available %zu) -> return false\\n\",\n                *ppos + el_size, buf_size);\n      if (mhd_log)\n        fclose(mhd_log);\n      return false;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (mhd_log)\n        fprintf(mhd_log, \"   connection header encountered: add_close=%d add_keep_alive=%d\\n\",\n                (int)add_close, (int)add_keep_alive);\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (mhd_log)\n            fprintf(mhd_log, \"   error: insufficient buf_size for close token (needed %zu available %zu) -> return false\\n\",\n                    initial_pos + el_size, buf_size);\n          if (mhd_log)\n            fclose(mhd_log);\n          return false;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n        if (mhd_log)\n          fprintf(mhd_log, \"   appended token: close,\\n\");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (mhd_log)\n            fprintf(mhd_log, \"   error: insufficient buf_size for Keep-Alive token (needed %zu available %zu) -> return false\\n\",\n                    initial_pos + el_size, buf_size);\n          if (mhd_log)\n            fclose(mhd_log);\n          return false;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (mhd_log)\n          fprintf(mhd_log, \"   appended token: Keep-Alive,\\n\");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n\n    if (mhd_log)\n    {\n      /* Log a printable snapshot of header and value (truncated) */\n      size_t hcp = hdr->header_size < 200 ? hdr->header_size : 200;\n      size_t vcp = hdr->value_size < 200 ? hdr->value_size : 200;\n      /* Print header bytes safely */\n      fprintf(mhd_log, \"   writing header bytes (len=%zu, show=%zu): \", hdr->header_size, hcp);\n      if (hdr->header && hcp > 0)\n      {\n        fwrite(hdr->header, 1, hcp, mhd_log);\n      }\n      fprintf(mhd_log, \"\\n\");\n      fprintf(mhd_log, \"   writing value bytes (len=%zu, show=%zu): \", hdr->value_size, vcp);\n      if (hdr->value && vcp > 0)\n      {\n        fwrite(hdr->value, 1, vcp, mhd_log);\n      }\n      fprintf(mhd_log, \"\\n\");\n    }\n\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n\n    if (mhd_log)\n      fprintf(mhd_log, \"   header appended successfully new *ppos=%zu\\n\", *ppos);\n  }\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"add_user_headers EXIT: return true final *ppos=%zu\\n\", *ppos);\n    fclose(mhd_log);\n  }\n  return true;\n}\n"
}