{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns to the value parameter add_keep_alive (and similarly add_close elsewhere) \u2014 the statement 'add_keep_alive = false;' modifies a function parameter variable passed by value. Rule 17.8 prohibits modifying function parameters (the exception for modifying the object pointed-to by a pointer does not apply here).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_user_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4382.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_user_headers:\n```c\nstatic bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    filter_transf_enc = false;   /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n    filter_content_len = false;  /* No such header */\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n    add_close = false;          /* \"close\" token was already set */\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n      return false;\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, \\\n                                             MHD_HTTP_HEADER_CONNECTION, \\\n                                             hdr->header_size));\n\n      if (add_close)\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n          return false;\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n      add_close = false;\n      add_keep_alive = false;\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_user_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_user_headers with it.\n  - Your function must have the exact same signature as add_user_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_user_headers to check logs.\n  - Your function MUST preserve the original logic of add_user_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_user_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_user_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_user_headers (char *buf,\n                  size_t *ppos,\n                  size_t buf_size,\n                  struct MHD_Response *response,\n                  bool filter_transf_enc,\n                  bool filter_content_len,\n                  bool add_close,\n                  bool add_keep_alive)\n{\n  struct MHD_Response *const r = response; /**< a short alias */\n  struct MHD_HTTP_Res_Header *hdr; /**< Iterates through User-specified headers */\n  size_t el_size; /**< the size of current element to be added to the @a buf */\n  bool result = true;\n  FILE *fp = NULL;\n\n  /* Open log file. If opening fails, continue without logging. */\n  fp = fopen(\"/tmp/logs/4382.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"ENTER add_user_headers: buf=%p, ppos=%p (*ppos=%zu), buf_size=%zu, response=%p\\n\",\n            (void *)buf, (void *)ppos, (ppos ? *ppos : (size_t)0), buf_size, (void *)response);\n    if (r)\n      fprintf(fp, \"  flags_auto=0x%zx, flags=0x%zx, add_close(initial)=%d, add_keep_alive(initial)=%d, filter_transf_enc=%d, filter_content_len=%d\\n\",\n              (size_t)r->flags_auto, (size_t)r->flags, add_close ? 1 : 0, add_keep_alive ? 1 : 0,\n              filter_transf_enc ? 1 : 0, filter_content_len ? 1 : 0);\n    else\n      fprintf(fp, \"  response pointer is NULL\\n\");\n    fflush(fp);\n  }\n\n  mhd_assert (! add_close || ! add_keep_alive);\n\n  if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n  {\n    if (fp) fprintf(fp, \"  No TRANS_ENC_CHUNKED auto-flag -> filter_transf_enc from %d to 0\\n\", filter_transf_enc ? 1 : 0);\n    filter_transf_enc = false;   /* No such header */\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  {\n    if (fp) fprintf(fp, \"  No CONTENT_LENGTH auto-flag -> filter_content_len from %d to 0\\n\", filter_content_len ? 1 : 0);\n    filter_content_len = false;  /* No such header */\n  }\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    if (fp) fprintf(fp, \"  No CONNECTION_HDR auto-flag -> add_close from %d to 0, add_keep_alive from %d to 0\\n\",\n                     add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n    add_close = false;          /* No such header */\n    add_keep_alive = false;     /* No such header */\n  }\n  else if (0 != (r->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE))\n  {\n    if (fp) fprintf(fp, \"  CONNECTION_CLOSE auto-flag present -> add_close from %d to 0\\n\", add_close ? 1 : 0);\n    add_close = false;          /* \"close\" token was already set */\n  }\n\n  for (hdr = r->first_header; NULL != hdr; hdr = hdr->next)\n  {\n    size_t initial_pos = *ppos;\n    if (fp) fprintf(fp, \"  Processing header: kind=%d, header_size=%zu, value_size=%zu, initial_pos=%zu\\n\",\n                    hdr->kind, hdr->header_size, hdr->value_size, initial_pos);\n\n    if (MHD_HEADER_KIND != hdr->kind)\n      continue;\n    if (filter_transf_enc)\n    { /* Need to filter-out \"Transfer-Encoding\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          hdr->header, hdr->header_size)) )\n      {\n        if (fp) fprintf(fp, \"    Found Transfer-Encoding header -> resetting filter_transf_enc and skipping header\\n\");\n        filter_transf_enc = false; /* There is the only one such header */\n        continue; /* Skip \"Transfer-Encoding\" header */\n      }\n    }\n    if (filter_content_len)\n    { /* Need to filter-out \"Content-Length\" */\n      if ((MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n           hdr->header_size) &&\n          (MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          hdr->header, hdr->header_size)) )\n      {\n        /* Reset filter flag if only one header is allowed */\n        if (fp) fprintf(fp, \"    Found Content-Length header -> will reset filter_transf_enc depending on flags (flags=0x%zx)\\n\", (size_t)r->flags);\n        filter_transf_enc =\n          (0 == (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH));\n        continue; /* Skip \"Content-Length\" header */\n      }\n    }\n\n    /* Add user header */\n    el_size = hdr->header_size + 2 + hdr->value_size + 2;\n    if (buf_size < *ppos + el_size)\n    {\n      if (fp) fprintf(fp, \"    Buffer too small for header at pos %zu: needed %zu, buf_size %zu -> returning false\\n\", *ppos, el_size, buf_size);\n      result = false;\n      goto cleanup;\n    }\n    memcpy (buf + *ppos, hdr->header, hdr->header_size);\n    (*ppos) += hdr->header_size;\n    buf[(*ppos)++] = ':';\n    buf[(*ppos)++] = ' ';\n    if (add_close || add_keep_alive)\n    {\n      /* \"Connection:\" header must be always the first one */\n      mhd_assert (MHD_str_equal_caseless_n_ (hdr->header, MHD_HTTP_HEADER_CONNECTION, hdr->header_size));\n\n      if (add_close)\n      {\n        if (fp) fprintf(fp, \"    Adding 'close' token because add_close is true (before change)\\n\");\n        el_size += MHD_STATICSTR_LEN_ (\"close, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (fp) fprintf(fp, \"    Buffer too small for 'close' token at initial_pos %zu: needed %zu, buf_size %zu -> returning false\\n\", initial_pos, el_size, buf_size);\n          result = false;\n          goto cleanup;\n        }\n        memcpy (buf + *ppos, \"close, \",\n                MHD_STATICSTR_LEN_ (\"close, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"close, \");\n      }\n      else\n      {\n        if (fp) fprintf(fp, \"    Adding 'Keep-Alive' token because add_keep_alive is true (before change)\\n\");\n        el_size += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n        if (buf_size < initial_pos + el_size)\n        {\n          if (fp) fprintf(fp, \"    Buffer too small for 'Keep-Alive' token at initial_pos %zu: needed %zu, buf_size %zu -> returning false\\n\", initial_pos, el_size, buf_size);\n          result = false;\n          goto cleanup;\n        }\n        memcpy (buf + *ppos, \"Keep-Alive, \",\n                MHD_STATICSTR_LEN_ (\"Keep-Alive, \"));\n        *ppos += MHD_STATICSTR_LEN_ (\"Keep-Alive, \");\n      }\n\n      if (fp) fprintf(fp, \"    Clearing add_close/add_keep_alive (was add_close=%d, add_keep_alive=%d) -> \", add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n      add_close = false;\n      add_keep_alive = false;\n      if (fp) fprintf(fp, \"now add_close=%d, add_keep_alive=%d\\n\", add_close ? 1 : 0, add_keep_alive ? 1 : 0);\n    }\n    if (0 != hdr->value_size)\n      memcpy (buf + *ppos, hdr->value, hdr->value_size);\n    *ppos += hdr->value_size;\n    buf[(*ppos)++] = '\\r';\n    buf[(*ppos)++] = '\\n';\n    mhd_assert (initial_pos + el_size == (*ppos));\n    if (fp) fprintf(fp, \"    Finished header: new *ppos=%zu\\n\", *ppos);\n  }\n\n  result = true;\n\ncleanup:\n  if (fp)\n  {\n    fprintf(fp, \"EXIT add_user_headers: result=%d, final *ppos=%zu, add_close(final)=%d, add_keep_alive(final)=%d, filter_transf_enc(final)=%d, filter_content_len(final)=%d\\n\",\n            result ? 1 : 0, (ppos ? *ppos : (size_t)0), add_close ? 1 : 0, add_keep_alive ? 1 : 0,\n            filter_transf_enc ? 1 : 0, filter_content_len ? 1 : 0);\n    fclose(fp);\n  }\n  return result;\n}\n"
}