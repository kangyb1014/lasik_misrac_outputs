{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe single statement is a runtime-only check (mhd_assert(pp->xbuf_pos < sizeof(xbuf))); it has no side-effects when the condition holds, so in normal/expected executions its presence does not affect program behaviour. That means the call is executable but removable without changing program behaviour (i.e. dead code). Therefore Rule 2.2 is violated. (If the assertion macro can abort on failure, removal would change behaviour only in fault cases; but for the intended correct operation the assertion is redundant and constitutes dead code. Recommend removing or converting the check to a required runtime-safe check with defined effect, or to a static-analysis-only invariant.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/828.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_value with it.\n  - Your function must have the exact same signature as process_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_value to check logs.\n  - Your function MUST preserve the original logic of process_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n  FILE *logf = fopen(\"/tmp/logs/828.txt\", \"a\");\n  size_t pp_xbuf_pos = (pp != NULL) ? pp->xbuf_pos : (size_t)0;\n  if (logf)\n  {\n    fprintf(logf, \"ENTER process_value: pp=%p pp->xbuf_pos=%zu sizeof(xbuf)=%zu value_start=%p value_end=%p last_escape=%p\\n\",\n            (void *)pp, pp_xbuf_pos, (size_t)sizeof(xbuf), (void *)value_start, (void *)value_end, (void *)last_escape);\n    fflush(logf);\n  }\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  if (logf)\n  {\n    fprintf(logf, \"ASSERT CHECKS: (value_start==NULL)=%d (value_end==NULL)=%d (last_escape==NULL)=%d\\n\",\n            (int)(value_start == NULL), (int)(value_end == NULL), (int)(last_escape == NULL));\n    fflush(logf);\n  }\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"COPY PREV: pp->xbuf_pos=%zu copying %zu bytes from pp->xbuf to xbuf\\n\",\n              pp->xbuf_pos, pp->xbuf_pos);\n      /* attempt to print few bytes as hex to help reproduce state */\n      fprintf(logf, \"pp->xbuf[0..min]=\");\n      {\n        size_t i, max = pp->xbuf_pos < 16 ? pp->xbuf_pos : 16;\n        for (i = 0; i < max; ++i)\n          fprintf(logf, \"%02x \", (unsigned char)pp->xbuf[i]);\n      }\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n    }\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if (logf)\n  {\n    fprintf(logf, \"AFTER MOVE: xoff=%zu pp->xbuf_pos=%zu\\n\", xoff, pp->xbuf_pos);\n    fflush(logf);\n  }\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n    if (logf)\n    {\n      fprintf(logf, \"LAST_ESCAPE handled: new pp->xbuf_pos=%zu value_end=%p\\n\",\n              pp->xbuf_pos, (void *)value_end);\n      fflush(logf);\n    }\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (logf)\n    {\n      fprintf(logf, \"LOOP START: value_start=%p value_end=%p delta(before)=%zu xoff=%zu must_ikvi=%d\\n\",\n              (void *)value_start, (void *)value_end, delta, xoff, (int)pp->must_ikvi);\n      fflush(logf);\n    }\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n      if (logf)\n      {\n        fprintf(logf, \"COPIED: delta=%zu new xoff=%zu value_start=%p\\n\", delta, xoff, (void *)value_start);\n        fflush(logf);\n      }\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n        if (logf)\n        {\n          fprintf(logf, \"ESCAPE: single '%%' at end, cut=%d, set pp->xbuf_pos=1\\n\", (int)cut);\n          fflush(logf);\n        }\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n        if (logf)\n        {\n          fprintf(logf, \"ESCAPE skip single, delta=%zu clen=%zu xoff=%zu\\n\", delta, clen, xoff);\n          fflush(logf);\n        }\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n        if (logf)\n        {\n          fprintf(logf, \"ESCAPE: '%%' at xoff-2, cut=%d, set pp->xbuf_pos=2\\n\", (int)cut);\n          fflush(logf);\n        }\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n        if (logf)\n        {\n          fprintf(logf, \"ESCAPE skip two, delta=%zu clen=%zu xoff=%zu\\n\", delta, clen, xoff);\n          fflush(logf);\n        }\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n      if (logf)\n      {\n        fprintf(logf, \"UNESCAPED: xoff(after unescape)=%zu xbuf_preview=\\\"%.*s\\\"\\n\",\n                xoff, (int)(xoff < 64 ? xoff : 64), xbuf);\n        fflush(logf);\n      }\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (logf)\n      {\n        fprintf(logf, \"CALL IKVI: cls=%p kind=%d key=%p value_offset=%zu xoff=%zu\\n\",\n                (void *)pp->cls, (int)MHD_POSTDATA_KIND, (void *)&pp[1], pp->value_offset, xoff);\n        fflush(logf);\n      }\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        if (logf)\n        {\n          fprintf(logf, \"IKVI returned MHD_NO, setting pp->state=PP_Error and returning\\n\");\n          fclose(logf);\n        }\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (logf)\n    {\n      fprintf(logf, \"AFTER IKVI/UPDATE: value_offset=%zu xoff=%zu cut=%d clen=%zu\\n\",\n              pp->value_offset, xoff, (int)cut, clen);\n      fflush(logf);\n    }\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n      if (logf)\n      {\n        fprintf(logf, \"UNDO TERM: moved %zu bytes to front, new xoff(clen)=%zu\\n\", clen, clen);\n        fflush(logf);\n      }\n    }\n    xoff = clen;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT process_value: pp=%p final pp->xbuf_pos=%zu final value_offset=%zu\\n\",\n            (void *)pp, (pp != NULL) ? pp->xbuf_pos : (size_t)0, (pp != NULL) ? pp->value_offset : (size_t)0);\n    fclose(logf);\n  }\n}\n"
}