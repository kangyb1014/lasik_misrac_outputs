{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'value_end = last_escape;' in the shown fragment modifies the pointer parameter 'value_end'. MISRA C 2023 Rule 17.8 prohibits modifying function parameter pointers themselves (the object they point to may be changed, but not the pointer). Thus this line violates Rule 17.8. (As a note, elsewhere in the function 'value_start += delta;' also modifies a pointer parameter and would likewise violate the rule.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/822.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_value with it.\n  - Your function must have the exact same signature as process_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_value to check logs.\n  - Your function MUST preserve the original logic of process_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n  FILE *logf = fopen(\"/tmp/logs/822.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER process_value: pp=%p value_start=%p value_end=%p last_escape=%p pp->xbuf_pos=%zu pp->value_offset=%zu\\n\",\n            (void *)pp, (const void *)value_start, (const void *)value_end, (const void *)last_escape,\n            pp ? pp->xbuf_pos : 0U, pp ? pp->value_offset : 0U);\n    fflush(logf);\n  }\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    if (logf)\n    {\n      fprintf(logf, \"About to modify pointer parameter: value_end (old)=%p last_escape=%p diff=%zu\\n\",\n              (const void *)value_end, (const void *)last_escape,\n              (size_t) (value_end - last_escape));\n      fflush(logf);\n    }\n    value_end = last_escape;\n    if (logf)\n    {\n      fprintf(logf, \"Modified value_end (new)=%p\\n\", (const void *)value_end);\n      fflush(logf);\n    }\n  }\n  {\n    int iter = 0;\n    while ( (value_start != value_end) ||\n            (pp->must_ikvi) ||\n            (xoff > 0) )\n    {\n      size_t delta = (size_t) (value_end - value_start);\n      bool cut = false;\n      size_t clen = 0;\n\n      mhd_assert (value_end >= value_start);\n\n      if (logf)\n      {\n        fprintf(logf, \"ITER %d: start value_start=%p value_end=%p delta(before cap)=%zu xoff=%zu must_ikvi=%d\\n\",\n                iter, (const void *)value_start, (const void *)value_end, delta, xoff, (int)pp->must_ikvi);\n        fflush(logf);\n      }\n\n      if (delta > XBUF_SIZE - xoff)\n        delta = XBUF_SIZE - xoff;\n      /* move (additional) input into processing buffer */\n      if (0 != delta)\n      {\n        if (logf)\n        {\n          fprintf(logf, \"  copying delta=%zu bytes from %p to xbuf+%zu (xoff before)\\n\",\n                  delta, (const void *)value_start, xoff);\n          fflush(logf);\n        }\n        memcpy (&xbuf[xoff],\n                value_start,\n                delta);\n        xoff += delta;\n        if (logf)\n        {\n          fprintf(logf, \"  about to modify pointer parameter: value_start (old)=%p delta=%zu\\n\",\n                  (const void *)value_start, delta);\n          fflush(logf);\n        }\n        value_start += delta;\n        if (logf)\n        {\n          fprintf(logf, \"  modified value_start (new)=%p xoff=%zu\\n\",\n                  (const void *)value_start, xoff);\n          fflush(logf);\n        }\n      }\n      /* find if escape sequence is at the end of the processing buffer;\n         if so, exclude those from processing (reduce delta to point at\n         end of processed region) */\n      if ( (xoff > 0) &&\n           ('%' == xbuf[xoff - 1]) )\n      {\n        cut = (xoff != XBUF_SIZE);\n        xoff--;\n        if (logf)\n        {\n          fprintf(logf, \"  found trailing '%%' at xbuf[%zu], cut=%d xoff(after)=%zu\\n\",\n                  xoff, (int)cut, xoff);\n          fflush(logf);\n        }\n        if (cut)\n        {\n          /* move escape sequence into buffer for next function invocation */\n          pp->xbuf[0] = '%';\n          pp->xbuf_pos = 1;\n        }\n        else\n        {\n          /* just skip escape sequence for next loop iteration */\n          delta = xoff;\n          clen = 1;\n        }\n      }\n      else if ( (xoff > 1) &&\n                ('%' == xbuf[xoff - 2]) )\n      {\n        cut = (xoff != XBUF_SIZE);\n        xoff -= 2;\n        if (logf)\n        {\n          fprintf(logf, \"  found trailing '%%' at xbuf[%zu] and xbuf[%zu], cut=%d xoff(after)=%zu\\n\",\n                  (size_t)(xoff), (size_t)(xoff+1), (int)cut, xoff);\n          fflush(logf);\n        }\n        if (cut)\n        {\n          /* move escape sequence into buffer for next function invocation */\n          memcpy (pp->xbuf,\n                  &xbuf[xoff],\n                  2);\n          pp->xbuf_pos = 2;\n        }\n        else\n        {\n          /* just skip escape sequence for next loop iteration */\n          delta = xoff;\n          clen = 2;\n        }\n      }\n      mhd_assert (xoff < sizeof (xbuf));\n      /* unescape */\n      xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n      if (0 != xoff)\n      {\n        MHD_unescape_plus (xbuf);\n        xoff = MHD_http_unescape (xbuf);\n        if (logf)\n        {\n          fprintf(logf, \"  after unescape xbuf='%s' xoff=%zu\\n\", xbuf, xoff);\n          fflush(logf);\n        }\n      }\n      /* finally: call application! */\n      if (pp->must_ikvi || (0 != xoff) )\n      {\n        if (logf)\n        {\n          fprintf(logf, \"  calling ikvi: must_ikvi=%d xoff=%zu pp->value_offset=%zu\\n\",\n                  (int)pp->must_ikvi, xoff, pp->value_offset);\n          fflush(logf);\n        }\n        pp->must_ikvi = false;\n        if (MHD_NO == pp->ikvi (pp->cls,\n                                MHD_POSTDATA_KIND,\n                                (const char *) &pp[1],      /* key */\n                                NULL,\n                                NULL,\n                                NULL,\n                                xbuf,\n                                pp->value_offset,\n                                xoff))\n        {\n          pp->state = PP_Error;\n          if (logf)\n          {\n            fprintf(logf, \"  ikvi returned MHD_NO -> setting state=PP_Error and returning\\n\");\n            fflush(logf);\n          }\n          fclose(logf);\n          return;\n        }\n        if (logf)\n        {\n          fprintf(logf, \"  ikvi returned ok\\n\");\n          fflush(logf);\n        }\n      }\n      pp->value_offset += xoff;\n      if (cut)\n      {\n        if (logf)\n        {\n          fprintf(logf, \"  break due to cut (iter %d)\\n\", iter);\n          fflush(logf);\n        }\n        break;\n      }\n      if (0 != clen)\n      {\n        xbuf[delta] = '%';        /* undo 0-termination */\n        memmove (xbuf,\n                 &xbuf[delta],\n                 clen);\n      }\n      if (logf)\n      {\n        fprintf(logf, \"  end ITER %d: xoff=%zu pp->value_offset=%zu pp->xbuf_pos=%zu\\n\",\n                iter, xoff, pp->value_offset, pp->xbuf_pos);\n        fflush(logf);\n      }\n      xoff = clen;\n      iter++;\n    }\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT process_value: pp=%p pp->xbuf_pos=%zu pp->value_offset=%zu state=%d\\n\",\n            (void *)pp, pp->xbuf_pos, pp->value_offset, (int)pp->state);\n    fflush(logf);\n    fclose(logf);\n  }\n}\n"
}