{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy call uses pp->xbuf_pos as the length but the function only asserts pp->xbuf_pos < sizeof(xbuf) (the local destination size). There is no check that pp->xbuf_pos <= sizeof(pp->xbuf) (the source buffer size). If pp->xbuf is smaller than xbuf or pp->xbuf_pos contains a value that is less than sizeof(xbuf) but greater than sizeof(pp->xbuf) (for example, pp->xbuf_pos has been set/corrupted to a value in the range sizeof(pp->xbuf)+1 .. sizeof(xbuf)-1), memcpy(xbuf, pp->xbuf, pp->xbuf_pos) will read beyond the bounds of pp->xbuf. Therefore Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/823.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_value:\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_value with it.\n  - Your function must have the exact same signature as process_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_value to check logs.\n  - Your function MUST preserve the original logic of process_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  /* Logging helper: append human-readable trace info to /tmp/logs/823.txt */\n  {\n    FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER process_value: pp=%p, pp->xbuf_pos=%zu, sizeof(pp->xbuf)=%zu, sizeof(xbuf)=%zu, XBUF_SIZE=%d, value_start=%p, value_end=%p, last_escape=%p\\n\",\n              (void *)pp,\n              pp ? pp->xbuf_pos : 0u,\n              pp ? sizeof (pp->xbuf) : 0u,\n              sizeof (xbuf),\n              XBUF_SIZE,\n              (const void *)value_start,\n              (const void *)value_end,\n              (const void *)last_escape);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n  {\n    {\n      FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"MEMCPY pre: copying pp->xbuf_pos=%zu bytes from pp->xbuf(%p) to xbuf(%p); sizeof(pp->xbuf)=%zu, sizeof(xbuf)=%zu\\n\",\n                pp->xbuf_pos,\n                (void *)pp->xbuf,\n                (void *)xbuf,\n                sizeof (pp->xbuf),\n                sizeof (xbuf));\n        fclose(log);\n      }\n    }\n\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  }\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    {\n      FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"LAST_ESCAPE branch: last_escape=%p, value_end=%p, len=%zu, will copy into pp->xbuf(%p)\\n\",\n                (const void *)last_escape,\n                (const void *)value_end,\n                pp->xbuf_pos,\n                (void *)pp->xbuf);\n        fclose(log);\n      }\n    }\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      {\n        FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"MEMCPY chunk: delta=%zu, xoff=%zu, will copy %zu bytes from value_start=%p into &xbuf[xoff]=%p; value_offset=%zu\\n\",\n                  delta, xoff, delta,\n                  (const void *)value_start,\n                  (void *)&xbuf[xoff], pp->value_offset);\n          fclose(log);\n        }\n      }\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n        {\n          FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"ESCAPE single at end: set pp->xbuf_pos=1, pp->xbuf[0]='%%'\\n\");\n            fclose(log);\n          }\n        }\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        {\n          FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"ESCAPE double at end: moving 2 bytes from &xbuf[%zu] to pp->xbuf, set pp->xbuf_pos=2\\n\", xoff);\n            fclose(log);\n          }\n        }\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      {\n        FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"UNESCAPE: calling MHD_unescape_plus on xbuf(%p) (xoff=%zu)\\n\", (void *)xbuf, xoff);\n          fclose(log);\n        }\n      }\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n      {\n        FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"UNESCAPE result: new xoff=%zu\\n\", xoff);\n          fclose(log);\n        }\n      }\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      {\n        FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"CALL ikvi: cls=%p, key_ptr=%p, xbuf=%p, value_offset=%zu, xoff=%zu\\n\",\n                  (void *)pp->cls,\n                  (const void *)&pp[1],\n                  (void *)xbuf,\n                  pp->value_offset,\n                  xoff);\n          fclose(log);\n        }\n      }\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        {\n          FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"IKVI returned MHD_NO: setting pp->state=PP_Error and returning; pp=%p\\n\", (void *)pp);\n            fclose(log);\n          }\n        }\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      {\n        FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"MEMMOVE: memmove(xbuf, &xbuf[%zu], clen=%zu)\\n\", delta, clen);\n          fclose(log);\n        }\n      }\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n\n  {\n    FILE *log = fopen(\"/tmp/logs/823.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"EXIT process_value: pp=%p, final pp->xbuf_pos=%zu, final value_offset=%zu\\n\",\n              (void *)pp,\n              pp ? pp->xbuf_pos : 0u,\n              pp ? pp->value_offset : 0u);\n      fclose(log);\n    }\n  }\n}\n"
}