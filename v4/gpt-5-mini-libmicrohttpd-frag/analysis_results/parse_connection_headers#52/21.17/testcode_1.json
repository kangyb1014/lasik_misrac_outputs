{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nMHD_lookup_connection_value_n is called with &enc and NULL for the length. If that lookup returns a pointer to a header value that is not NUL-terminated (or whose validity length is not reported because the length argument was NULL), then the subsequent call MHD_str_equal_caseless_(enc, \"chunked\") may internally use standard <string.h> functions that assume NUL-terminated strings (e.g. strcmp/strcasecmp/strlen) and thus read past the end of the object referenced by enc. That would be an out-of-bounds access and therefore a violation of MISRA C 2023 Rule 21.17. To avoid the violation, the code should obtain the value length and use a length-aware comparison or ensure the returned string is NUL-terminated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified parse_connection_headers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2093.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of parse_connection_headers:\n```c\nstatic void\nparse_connection_headers (struct MHD_Connection *connection)\n{\n  const char *clen;\n  const char *enc;\n  size_t val_len;\n\n#ifdef COOKIE_SUPPORT\n  if (MHD_PARSE_COOKIE_NO_MEMORY == parse_cookie_header (connection))\n  {\n    handle_req_cookie_no_space (connection);\n    return;\n  }\n#endif /* COOKIE_SUPPORT */\n  if ( (-3 < connection->daemon->client_discipline) &&\n       (MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver)) &&\n       (MHD_NO ==\n        MHD_lookup_connection_value_n (connection,\n                                       MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_HOST,\n                                       MHD_STATICSTR_LEN_ (\n                                         MHD_HTTP_HEADER_HOST),\n                                       NULL,\n                                       NULL)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Received HTTP/1.1 request without `Host' header.\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_LACKS_HOST);\n    return;\n  }\n\n  /* The presence of the request body is indicated by \"Content-Length:\" or\n     \"Transfer-Encoding:\" request headers.\n     Unless one of these two headers is used, the request has no request body.\n     See RFC9112, Section 6, paragraph 4. */\n  connection->rq.remaining_upload_size = 0;\n  if (MHD_NO !=\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_TRANSFER_ENCODING),\n                                     &enc,\n                                     NULL))\n  {\n    if (! MHD_str_equal_caseless_ (enc,\n                                   \"chunked\"))\n    {\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_UNSUPPORTED_TR_ENCODING);\n      return;\n    }\n    else if (MHD_NO !=\n             MHD_lookup_connection_value_n (connection,\n                                            MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                            MHD_STATICSTR_LEN_ ( \\\n                                              MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                            NULL,\n                                            NULL))\n    {\n      /* TODO: add individual settings */\n      if (1 <= connection->daemon->client_discipline)\n      {\n        transmit_error_response_static (connection,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_LENGTH_WITH_TR_ENCODING);\n        return;\n      }\n      else\n      {\n        /* Must close connection after reply to prevent potential attack */\n        connection->keepalive = MHD_CONN_MUST_CLOSE;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The 'Content-Length' request header is ignored \"\n                     \"as chunked Transfer-Encoding is used \"\n                     \"for this request.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n    }\n    connection->rq.have_chunked_upload = true;\n    connection->rq.remaining_upload_size = MHD_SIZE_UNKNOWN;\n  }\n  else if (MHD_NO !=\n           MHD_lookup_connection_value_n (connection,\n                                          MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          MHD_STATICSTR_LEN_ (\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                          &clen,\n                                          &val_len))\n  {\n    size_t num_digits;\n\n    num_digits = MHD_str_to_uint64_n_ (clen,\n                                       val_len,\n                                       &connection->rq.remaining_upload_size);\n\n    if (((0 == num_digits) &&\n         (0 != val_len) &&\n         ('0' <= clen[0]) && ('9' >= clen[0]))\n        || (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Too large value of 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      REQUEST_CONTENTLENGTH_TOOLARGE);\n    }\n    else if ((val_len != num_digits) ||\n             (0 == num_digits))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to parse 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_CONTENTLENGTH_MALFORMED);\n    }\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified parse_connection_headers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original parse_connection_headers with it.\n  - Your function must have the exact same signature as parse_connection_headers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call parse_connection_headers to check logs.\n  - Your function MUST preserve the original logic of parse_connection_headers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, parse_connection_headers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of parse_connection_headers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nparse_connection_headers (struct MHD_Connection *connection)\n{\n  const char *clen;\n  const char *enc;\n  size_t val_len;\n\n  /* Logging probe: append info to /tmp/logs/2093.txt */\n  {\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f)\n    {\n      void *daemon_ptr = NULL;\n      int client_disc = 0;\n      long http_ver = 0;\n\n      if (connection)\n      {\n        daemon_ptr = (void *) connection->daemon;\n        if (connection->daemon)\n          client_disc = (int) connection->daemon->client_discipline;\n        http_ver = (long) connection->rq.http_ver;\n      }\n\n      fprintf (f, \"ENTER parse_connection_headers: connection=%p daemon=%p client_discipline=%d http_ver=%ld\\n\",\n               (void *) connection,\n               daemon_ptr,\n               client_disc,\n               http_ver);\n      fclose (f);\n    }\n  }\n\n#ifdef COOKIE_SUPPORT\n  if (MHD_PARSE_COOKIE_NO_MEMORY == parse_cookie_header (connection))\n  {\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"BRANCH: parse_cookie_header returned MHD_PARSE_COOKIE_NO_MEMORY -> handle_req_cookie_no_space and return\\n\");\n      fclose (f);\n    }\n\n    handle_req_cookie_no_space (connection);\n    return;\n  }\n#endif /* COOKIE_SUPPORT */\n  if ( (-3 < connection->daemon->client_discipline) &&\n       (MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver)) &&\n       (MHD_NO ==\n        MHD_lookup_connection_value_n (connection,\n                                       MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_HOST,\n                                       MHD_STATICSTR_LEN_ (\n                                         MHD_HTTP_HEADER_HOST),\n                                       NULL,\n                                       NULL)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Received HTTP/1.1 request without `Host' header.\\n\"));\n#endif\n    {\n      FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"BRANCH: HTTP/1.1 request without Host header detected -> transmit_error_response_static(MHD_HTTP_BAD_REQUEST, REQUEST_LACKS_HOST)\\n\");\n        fclose (f);\n      }\n    }\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_LACKS_HOST);\n    return;\n  }\n\n  /* The presence of the request body is indicated by \"Content-Length:\" or\n     \"Transfer-Encoding:\" request headers.\n     Unless one of these two headers is used, the request has no request body.\n     See RFC9112, Section 6, paragraph 4. */\n  connection->rq.remaining_upload_size = 0;\n  {\n    /* Log about to lookup Transfer-Encoding header (note: length argument is NULL here in original code) */\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"LOOKUP: about to call MHD_lookup_connection_value_n for Transfer-Encoding with &enc and length=NULL\\n\");\n      fclose (f);\n    }\n  }\n  if (MHD_NO !=\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_TRANSFER_ENCODING),\n                                     &enc,\n                                     NULL))\n  {\n    {\n      FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n      if (f)\n      {\n        /* We must not assume enc is NUL-terminated. Do not print it as a string. */\n        fprintf (f, \"LOOKUP-RESULT: Transfer-Encoding present -> enc_ptr=%p (length argument was NULL)\\n\",\n                 (void *) enc);\n        fclose (f);\n      }\n    }\n\n    /* Log just before calling MHD_str_equal_caseless_ so callers can see that\n       a comparison that may assume NUL-termination is about to be performed\n       with a pointer whose length was not provided. */\n    {\n      FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n      if (f)\n      {\n        fprintf (f, \"CALL: about to call MHD_str_equal_caseless_ with enc_ptr=%p and literal=\\\"chunked\\\" (no length info)\\n\",\n                 (void *) enc);\n        fclose (f);\n      }\n    }\n\n    if (! MHD_str_equal_caseless_ (enc,\n                                   \"chunked\"))\n    {\n      {\n        FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n        if (f)\n        {\n          fprintf (f, \"BRANCH: Transfer-Encoding is not 'chunked' -> transmit_error_response_static(MHD_HTTP_BAD_REQUEST, REQUEST_UNSUPPORTED_TR_ENCODING)\\n\");\n          fclose (f);\n        }\n      }\n\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_UNSUPPORTED_TR_ENCODING);\n      return;\n    }\n    else if (MHD_NO !=\n             MHD_lookup_connection_value_n (connection,\n                                            MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                            MHD_STATICSTR_LEN_ ( \\\n                                              MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                            NULL,\n                                            NULL))\n    {\n      /* TODO: add individual settings */\n      if (1 <= connection->daemon->client_discipline)\n      {\n        {\n          FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n          if (f)\n          {\n            fprintf (f, \"BRANCH: chunked + Content-Length present + client_discipline >= 1 -> transmit_error_response_static(MHD_HTTP_BAD_REQUEST, REQUEST_LENGTH_WITH_TR_ENCODING)\\n\");\n            fclose (f);\n          }\n        }\n        transmit_error_response_static (connection,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_LENGTH_WITH_TR_ENCODING);\n        return;\n      }\n      else\n      {\n        /* Must close connection after reply to prevent potential attack */\n        connection->keepalive = MHD_CONN_MUST_CLOSE;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The 'Content-Length' request header is ignored \"\n                     \"as chunked Transfer-Encoding is used \"\n                     \"for this request.\\n\"));\n#endif /* HAVE_MESSAGES */\n        {\n          FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n          if (f)\n          {\n            fprintf (f, \"INFO: chunked Transfer-Encoding used; Content-Length ignored; set keepalive = MHD_CONN_MUST_CLOSE\\n\");\n            fclose (f);\n          }\n        }\n      }\n    }\n    connection->rq.have_chunked_upload = true;\n    connection->rq.remaining_upload_size = MHD_SIZE_UNKNOWN;\n  }\n  else if (MHD_NO !=\n           MHD_lookup_connection_value_n (connection,\n                                          MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          MHD_STATICSTR_LEN_ (\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                          &clen,\n                                          &val_len))\n  {\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"LOOKUP-RESULT: Content-Length present -> clen_ptr=%p val_len=%zu\\n\",\n               (void *) clen,\n               val_len);\n      fclose (f);\n    }\n\n    size_t num_digits;\n\n    num_digits = MHD_str_to_uint64_n_ (clen,\n                                       val_len,\n                                       &connection->rq.remaining_upload_size);\n\n    if (((0 == num_digits) &&\n         (0 != val_len) &&\n         ('0' <= clen[0]) && ('9' >= clen[0]))\n        || (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Too large value of 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      {\n        FILE *f2 = fopen(\"/tmp/logs/2093.txt\", \"a\");\n        if (f2)\n        {\n          fprintf (f2, \"BRANCH: Content-Length too large or parsed as unknown -> transmit_error_response_static(MHD_HTTP_CONTENT_TOO_LARGE, REQUEST_CONTENTLENGTH_TOOLARGE)\\n\");\n          fclose (f2);\n        }\n      }\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      REQUEST_CONTENTLENGTH_TOOLARGE);\n    }\n    else if ((val_len != num_digits) ||\n             (0 == num_digits))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to parse 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      {\n        FILE *f2 = fopen(\"/tmp/logs/2093.txt\", \"a\");\n        if (f2)\n        {\n          fprintf (f2, \"BRANCH: Content-Length malformed -> transmit_error_response_static(MHD_HTTP_BAD_REQUEST, REQUEST_CONTENTLENGTH_MALFORMED)\\n\");\n          fclose (f2);\n        }\n      }\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_CONTENTLENGTH_MALFORMED);\n    }\n  }\n\n  /* Log exit */\n  {\n    FILE *f = fopen(\"/tmp/logs/2093.txt\", \"a\");\n    if (f)\n    {\n      fprintf (f, \"EXIT parse_connection_headers: connection=%p remaining_upload_size=%zu have_chunked_upload=%d\\n\",\n               (void *) connection,\n               connection ? connection->rq.remaining_upload_size : 0,\n               connection ? (int) connection->rq.have_chunked_upload : 0);\n      fclose (f);\n    }\n  }\n}\n"
}