{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the #else branch for !TCP_NODELAY the statements \u201c(void) connection; (void) nodelay_state;\u201d are no\u2011op expression statements used only to suppress unused\u2011parameter warnings. They have no side effects and removing them would not change the program behaviour, so they constitute dead code in the sense of MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_set_nodelay_state_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2838.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_nodelay_state_:\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_set_nodelay_state_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_set_nodelay_state_ with it.\n  - Your function must have the exact same signature as MHD_connection_set_nodelay_state_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_set_nodelay_state_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_set_nodelay_state_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_set_nodelay_state_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_set_nodelay_state_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n  /* Lightweight logging probes to help reproduce the reported dead-code\n     scenario. These probes append simple textual records to\n     /tmp/logs/2838.txt. Prototypes are declared locally so this\n     function can be inserted into the existing code base without\n     requiring additional headers. */\n  int sprintf(char *, const char *, ...);\n  int system(const char *);\n\n  {\n    char buf[256];\n    char cmd[512];\n\n    /* Log function entry and parameters. */\n    (void) sprintf(buf,\n                   \"ENTRY: MHD_connection_set_nodelay_state_ connection=%p nodelay=%d\",\n                   (void *) connection,\n                   nodelay_state ? 1 : 0);\n    (void) sprintf(cmd, \"echo \\\"%s\\\" >> /tmp/logs/2838.txt\", buf);\n    /* Best-effort; ignore return value. */\n    (void) system(cmd);\n  }\n\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n  {\n    /* Log early return due to non-IP connection. */\n    char buf2[256];\n    char cmd2[512];\n    (void) sprintf(buf2,\n                   \"EARLY RETURN: is_nonip==YES connection=%p\",\n                   (void *) connection);\n    (void) sprintf(cmd2, \"echo \\\"%s\\\" >> /tmp/logs/2838.txt\", buf2);\n    (void) system(cmd2);\n\n    return false;\n  }\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n\n    /* Log successful setsockopt. */\n    {\n      char buf3[256];\n      char cmd3[512];\n      (void) sprintf(buf3,\n                     \"SETSOCKOPT OK: socket=%d nodelay=%d connection=%p\",\n                     (int) connection->socket_fd,\n                     nodelay_state ? 1 : 0,\n                     (void *) connection);\n      (void) sprintf(cmd3, \"echo \\\"%s\\\" >> /tmp/logs/2838.txt\", buf3);\n      (void) system(cmd3);\n    }\n\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n\n  /* Log the error code returned by MHD_socket_get_error_. */\n  {\n    char buf4[256];\n    char cmd4[512];\n    (void) sprintf(buf4,\n                   \"SETSOCKOPT FAILED: socket=%d err_code=%d connection=%p\",\n                   (int) connection->socket_fd,\n                   err_code,\n                   (void *) connection);\n    (void) sprintf(cmd4, \"echo \\\"%s\\\" >> /tmp/logs/2838.txt\", buf4);\n    (void) system(cmd4);\n  }\n\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  /* Previously the code used (void) connection; (void) nodelay_state; to\n     mute unused-parameter warnings. To provide reproducible evidence for\n     the reported dead-code scenario we log that this branch was taken\n     and the parameter values. This preserves behaviour except for the\n     additional logging side-effect. */\n  {\n    char buf5[256];\n    char cmd5[512];\n    (void) sprintf(buf5,\n                   \"NO_TCP_NODELAY: branch taken connection=%p nodelay=%d\",\n                   (void *) connection,\n                   nodelay_state ? 1 : 0);\n    (void) sprintf(cmd5, \"echo \\\"%s\\\" >> /tmp/logs/2838.txt\", buf5);\n    (void) system(cmd5);\n  }\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n"
}