{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes string-style pointers (\"TCP_NODELAY\", the result of the translation macro _(\"ON\")/_(\"OFF\"), and MHD_socket_strerr_(err_code)). If the translation macro _ and/or MHD_socket_strerr_ return non-const char * (or if MHD_DLOG expects non-const char * parameters), this uses pointers to non-const-qualified characters where const qualification is possible. That violates MISRA C 2023 Rule 8.13\u2014string/format arguments should be const char * (or the called functions should be declared to take const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_set_nodelay_state_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2835.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_set_nodelay_state_:\n```c\nbool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n\n  if (_MHD_YES == connection->is_nonip)\n    return false;\n\n  if (0 == setsockopt (connection->socket_fd,\n                       IPPROTO_TCP,\n                       TCP_NODELAY,\n                       (const void *) (nodelay_state ? &on_val : &off_val),\n                       sizeof (off_val)))\n  {\n    connection->sk_nodelay = nodelay_state;\n    return true;\n  }\n\n  err_code = MHD_socket_get_error_ ();\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n  {\n    if (_MHD_UNKNOWN == connection->is_nonip)\n      connection->is_nonip = _MHD_YES;\n#ifdef HAVE_MESSAGES\n    else\n    {\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed \"\n                   \"for TCP/IP socket %d: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                (int) connection->socket_fd,\n                MHD_socket_strerr_ (err_code));\n    }\n#endif /* HAVE_MESSAGES */\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Setting %s option to %s state failed: %s\\n\"),\n              \"TCP_NODELAY\",\n              nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n              MHD_socket_strerr_ (err_code));\n  }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_set_nodelay_state_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_set_nodelay_state_ with it.\n  - Your function must have the exact same signature as MHD_connection_set_nodelay_state_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_set_nodelay_state_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_set_nodelay_state_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_set_nodelay_state_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_set_nodelay_state_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_connection_set_nodelay_state_ (struct MHD_Connection *connection,\n                                   bool nodelay_state)\n{\n#ifdef TCP_NODELAY\n  const MHD_SCKT_OPT_BOOL_ off_val = 0;\n  const MHD_SCKT_OPT_BOOL_ on_val = 1;\n  int err_code;\n  int rc;\n  FILE *f = fopen(\"/tmp/logs/2835.txt\", \"a\");\n\n  if (f)\n    {\n      fprintf (f, \"MHD_connection_set_nodelay_state_: ENTER\\n\");\n      fprintf (f, \"  connection=%p, socket_fd=%d, nodelay_state=%d, is_nonip=%d\\n\",\n               (void *) connection,\n               (int) connection->socket_fd,\n               (int) nodelay_state,\n               (int) connection->is_nonip);\n      fflush (f);\n    }\n\n  if (_MHD_YES == connection->is_nonip)\n    {\n      if (f)\n        {\n          fprintf (f, \"  Early return: connection->is_nonip == _MHD_YES\\n\");\n          fclose (f);\n        }\n      return false;\n    }\n\n  /* Call setsockopt once and record the return code so we can log it. */\n  rc = setsockopt (connection->socket_fd,\n                   IPPROTO_TCP,\n                   TCP_NODELAY,\n                   (const void *) (nodelay_state ? &on_val : &off_val),\n                   sizeof (off_val));\n\n  if (f)\n    {\n      fprintf (f, \"  setsockopt rc=%d\\n\", rc);\n      fflush (f);\n    }\n\n  if (0 == rc)\n    {\n      connection->sk_nodelay = nodelay_state;\n      if (f)\n        {\n          fprintf (f, \"  setsockopt success: sk_nodelay set to %d\\n\",\n                   (int) connection->sk_nodelay);\n          fclose (f);\n        }\n      return true;\n    }\n\n  err_code = MHD_socket_get_error_ ();\n  if (f)\n    {\n      fprintf (f, \"  socket error code=%d\\n\", err_code);\n      fflush (f);\n    }\n\n  if (MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_EINVAL_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOPROTOOPT_) ||\n      MHD_SCKT_ERR_IS_ (err_code, MHD_SCKT_ENOTSOCK_))\n    {\n      if (_MHD_UNKNOWN == connection->is_nonip)\n        {\n          connection->is_nonip = _MHD_YES;\n          if (f)\n            {\n              fprintf (f, \"  Marking connection as non-IP (is_nonip set to _MHD_YES)\\n\");\n              fclose (f);\n            }\n        }\n#ifdef HAVE_MESSAGES\n      else\n        {\n          /* Preserve original logging, but also write diagnostic info to file. */\n          const char *opt_name = \"TCP_NODELAY\";\n          const char *state_str = nodelay_state ? _ (\"ON\") : _ (\"OFF\");\n          const char *err_str = MHD_socket_strerr_ (err_code);\n\n          if (f)\n            {\n              fprintf (f, \"  Error branch (non-IP not unknown)\\n\");\n              fprintf (f, \"    opt_name=\" \"%s\" \", opt_name_ptr=%p\\n\", opt_name, (void *) opt_name);\n              fprintf (f, \"    state_str_ptr=%p, state_str_text=\\\"%s\\\"\\n\",\n                       (void *) state_str, (state_str != NULL) ? state_str : \"(null)\");\n              fprintf (f, \"    err_str_ptr=%p, err_str_text=\\\"%s\\\"\\n\",\n                       (void *) err_str, (err_str != NULL) ? err_str : \"(null)\");\n              fprintf (f, \"    socket_fd=%d\\n\", (int) connection->socket_fd);\n              fflush (f);\n            }\n\n          MHD_DLOG (connection->daemon,\n                    _ (\"Setting %s option to %s state failed \"\n                       \"for TCP/IP socket %d: %s\\n\"),\n                    \"TCP_NODELAY\",\n                    nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                    (int) connection->socket_fd,\n                    MHD_socket_strerr_ (err_code));\n\n          if (f)\n            fclose (f);\n        }\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n  else\n    {\n      const char *opt_name = \"TCP_NODELAY\";\n      const char *state_str = nodelay_state ? _ (\"ON\") : _ (\"OFF\");\n      const char *err_str = MHD_socket_strerr_ (err_code);\n\n      if (f)\n        {\n          fprintf (f, \"  Other error branch\\n\");\n          fprintf (f, \"    opt_name=%s, opt_name_ptr=%p\\n\", opt_name, (void *) opt_name);\n          fprintf (f, \"    state_str_ptr=%p, state_str_text=\\\"%s\\\"\\n\",\n                   (void *) state_str, (state_str != NULL) ? state_str : \"(null)\");\n          fprintf (f, \"    err_str_ptr=%p, err_str_text=\\\"%s\\\"\\n\",\n                   (void *) err_str, (err_str != NULL) ? err_str : \"(null)\");\n          fflush (f);\n        }\n\n      MHD_DLOG (connection->daemon,\n                _ (\"Setting %s option to %s state failed: %s\\n\"),\n                \"TCP_NODELAY\",\n                nodelay_state ? _ (\"ON\") : _ (\"OFF\"),\n                MHD_socket_strerr_ (err_code));\n\n      if (f)\n        fclose (f);\n    }\n#endif /* HAVE_MESSAGES */\n\n#else  /* ! TCP_NODELAY */\n  (void) connection; (void) nodelay_state; /* Mute compiler warnings */\n#endif /* ! TCP_NODELAY */\n  return false;\n}\n"
}