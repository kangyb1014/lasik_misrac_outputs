{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(realm) is unguarded: if realm is NULL or if realm does not point to a NUL-terminated array, strlen will read beyond the object bounds. Example: char buf[4] = {'a','b','c','d'}; passing buf as realm (no terminating '\\0') causes strlen to read past buf (undefined behavior). No NULL or termination check is present in the function, so the use can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_add_nonce_with_retry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/653.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_add_nonce_with_retry:\n```c\nstatic bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n  const size_t realm_len = strlen (realm);\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n      return false; /* No need to re-try */\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n      return false; /* No need to re-try */\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (timestamp1 == timestamp2)\n    {\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n        timestamp2 -= 2; /* Fallback value */\n    }\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      return false;\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_add_nonce_with_retry code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_add_nonce_with_retry with it.\n  - Your function must have the exact same signature as calculate_add_nonce_with_retry.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_add_nonce_with_retry to check logs.\n  - Your function MUST preserve the original logic of calculate_add_nonce_with_retry as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_add_nonce_with_retry will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_add_nonce_with_retry as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncalculate_add_nonce_with_retry (struct MHD_Connection *const connection,\n                                const char *realm,\n                                struct DigestAlgorithm *da,\n                                char *nonce)\n{\n  FILE *mhd_log = NULL;\n  bool ret = true;\n\n  /* Open log file for append. Intentionally keep logging lightweight. */\n  mhd_log = fopen(\"/tmp/logs/653.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"ENTER: %s\\n\", __func__);\n    fprintf (mhd_log, \"  connection=%p daemon=%p realm=%p da=%p nonce=%p\\n\",\n             (void *) connection,\n             (void *) (connection ? connection->daemon : NULL),\n             (const void *) realm,\n             (void *) da,\n             (void *) nonce);\n    fflush (mhd_log);\n  }\n\n  const uint64_t timestamp1 = MHD_monotonic_msec_counter ();\n\n  /* Log that strlen will be invoked (this mirrors the original unguarded\n   * behaviour). This log helps to reproduce cases where realm is NULL or\n   * not NUL-terminated (which may cause strlen to read out-of-bounds). */\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"  timestamp1=%llu about to call strlen(realm)\\n\",\n             (unsigned long long) timestamp1);\n    if (realm == NULL)\n      fprintf (mhd_log, \"  realm is NULL (strlen will crash)\\n\");\n    else\n      fprintf (mhd_log, \"  realm pointer looks non-NULL (strlen will be called)\\n\");\n    fflush (mhd_log);\n  }\n\n  /* ORIGINAL UNPROTECTED CALL: keep as-is to preserve behaviour. */\n  const size_t realm_len = strlen (realm);\n\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"  strlen(realm) returned %zu\\n\", realm_len);\n    fflush (mhd_log);\n  }\n\n  mhd_assert (! da->hashing);\n\n#ifdef HAVE_MESSAGES\n  if (0 == MHD_get_master (connection->daemon)->digest_auth_rand_size)\n    MHD_DLOG (connection->daemon,\n              _ (\"Random value was not initialised by \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM or \" \\\n                 \"MHD_OPTION_DIGEST_AUTH_RANDOM_COPY, generated nonces \" \\\n                 \"are predictable.\\n\"));\n#endif\n\n  /* First attempt to generate and add nonce. Log result. */\n  if (! calculate_add_nonce (connection, timestamp1, realm, realm_len, da,\n                             nonce))\n  {\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"  calculate_add_nonce(timestamp1) returned FALSE\\n\");\n      fflush (mhd_log);\n    }\n\n    /* Either:\n     * 1. The same nonce was already generated. If it will be used then one\n     * of the clients will fail (as no initial 'nc' value could be given to\n     * the client, the second client which will use 'nc=00000001' will fail).\n     * 2. Another nonce uses the same slot, and this nonce never has been\n     * used by the client and this nonce is still fresh enough.\n     */\n    const size_t digest_size = digest_get_size (da);\n    char nonce2[NONCE_STD_LEN (MAX_DIGEST) + 1];\n    uint64_t timestamp2;\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (da))\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"  digest_ext_error(da) => immediate FALSE return\\n\");\n        fflush (mhd_log);\n      }\n      ret = false; /* No need to re-try */\n      goto LOG_FINISH;\n    }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n    if (0 == MHD_get_master (connection->daemon)->nonce_nc_size)\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"  nonce_nc_size == 0 => immediate FALSE return\\n\");\n        fflush (mhd_log);\n      }\n      ret = false; /* No need to re-try */\n      goto LOG_FINISH;\n    }\n\n    timestamp2 = MHD_monotonic_msec_counter ();\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"  timestamp2(initial)=%llu\\n\",\n               (unsigned long long) timestamp2);\n      fflush (mhd_log);\n    }\n\n    if (timestamp1 == timestamp2)\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"  timestamp1 == timestamp2, computing jitter bases\\n\");\n        fflush (mhd_log);\n      }\n      /* The timestamps are equal, need to generate some arbitrary\n       * difference for nonce. */\n      /* As the number is needed only to differentiate clients, weak\n       * pseudo-random generators could be used. Seeding is not needed. */\n      uint64_t base1;\n      uint32_t base2;\n      uint16_t base3;\n      uint8_t base4;\n#ifdef HAVE_RANDOM\n      base1 = ((uint64_t) random ()) ^ UINT64_C (0x54a5acff5be47e63);\n      base4 = 0xb8;\n#elif defined(HAVE_RAND)\n      base1 = ((uint64_t) rand ()) ^ UINT64_C (0xc4bcf553b12f3965);\n      base4 = 0x92;\n#else\n      /* Monotonic msec counter alone does not really help here as it is already\n         known that this value is not unique. */\n      base1 = ((uint64_t) (uintptr_t) nonce2) ^ UINT64_C (0xf2e1b21bc6c92655);\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTR32 (base2, 4);\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      base1 = ((uint64_t) MHD_monotonic_msec_counter ())\n              ^ UINT64_C (0xccab93f72cf5b15);\n#endif\n      base2 = ((uint32_t) (base1 >> 32)) ^ ((uint32_t) base1);\n      base2 = _MHD_ROTL32 (base2, (((base4 >> 4) ^ base4) % 32));\n      base3 = ((uint16_t) (base2 >> 16)) ^ ((uint16_t) base2);\n      base4 = ((uint8_t) (base3 >> 8)) ^ ((uint8_t) base3);\n      /* Use up to 127 ms difference */\n      timestamp2 -= (base4 & DAUTH_JUMPBACK_MAX);\n      if (timestamp1 == timestamp2)\n        timestamp2 -= 2; /* Fallback value */\n\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"  jitter bases: base1=%llu base2=%u base3=%u base4=%u\\n\",\n                 (unsigned long long) base1, (unsigned) base2,\n                 (unsigned) base3, (unsigned) base4);\n        fprintf (mhd_log, \"  timestamp2(adjusted)=%llu\\n\",\n                 (unsigned long long) timestamp2);\n        fflush (mhd_log);\n      }\n    }\n\n    digest_reset (da);\n    if (! calculate_add_nonce (connection, timestamp2, realm, realm_len, da,\n                               nonce2))\n    {\n      if (mhd_log)\n      {\n        fprintf (mhd_log, \"  calculate_add_nonce(timestamp2) returned FALSE => no free slot\\n\");\n        fflush (mhd_log);\n      }\n      /* No free slot has been found. Re-tries are expensive, just use\n       * the generated nonce. As it is not stored in nonce-nc map array,\n       * the next request of the client will be recognized as valid, but 'stale'\n       * so client should re-try automatically. */\n      ret = false;\n      goto LOG_FINISH;\n    }\n    if (mhd_log)\n    {\n      fprintf (mhd_log, \"  calculate_add_nonce(timestamp2) succeeded, copying nonce2->nonce\\n\");\n      fflush (mhd_log);\n    }\n    memcpy (nonce, nonce2, NONCE_STD_LEN (digest_size));\n  }\n\n  /* Success path */\n  ret = true;\n\nLOG_FINISH:\n  if (mhd_log)\n  {\n    fprintf (mhd_log, \"EXIT: %s ret=%d\\n\", __func__, ret);\n    fclose (mhd_log);\n  }\n  return ret;\n}\n"
}