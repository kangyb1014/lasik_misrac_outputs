{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert invocation is a runtime-only diagnostic that performs a condition check with no side effects on success. If mhd_assert expands to an expression that is executed in normal builds (e.g. evaluates the condition and possibly logs or aborts only on failure) then, for correct runs where the assertion never fails, its execution does not affect program behaviour \u2014 removing it would not change the program \u2014 so it constitutes dead code and thus violates Rule 2.2. (If, instead, mhd_assert is compiled out entirely as a no-op in the build used for the project, it is not executed and therefore not classified as dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgraded_connection_mark_app_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3038.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_upgraded_connection_mark_app_closed_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_upgraded_connection_mark_app_closed_ with it.\n  - Your function must have the exact same signature as MHD_upgraded_connection_mark_app_closed_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_upgraded_connection_mark_app_closed_ to check logs.\n  - Your function MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_upgraded_connection_mark_app_closed_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n  /* Try to log entry and relevant state to /tmp/logs/3038.txt. If that\n     fails (for example because the directory does not exist), fall back to\n     /tmp/3038.txt so that at least some evidence is captured. Logging must\n     not change the original control flow or state. */\n  {\n    FILE *f = fopen(\"/tmp/logs/3038.txt\", \"a\");\n    if (NULL == f)\n      f = fopen(\"/tmp/3038.txt\", \"a\");\n    if (f) {\n      /* Log addresses and a few fields that are safe to read (pointers or\n         scalar options). Do not dereference pointer members here except to\n         print their addresses; the original function asserts their\n         validity before use. */\n      fprintf(f, \"ENTER %s: connection=%p daemon=%p\\n\", __func__, (void *)connection, (void *)daemon);\n      fprintf(f, \"  connection->urh=%p\\n\", (void *)connection->urh);\n      /* daemon->options printed as unsigned long to avoid type assumptions */\n      fprintf(f, \"  daemon->options=0x%lx\\n\", (unsigned long)daemon->options);\n      fclose(f);\n    }\n  }\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n\n  /* Log state immediately before mutation so we can evidence the state\n     transition that the original function performs. This mirrors the\n     original behaviour (which actually assigns these fields). */\n  {\n    FILE *f = fopen(\"/tmp/logs/3038.txt\", \"a\");\n    if (NULL == f)\n      f = fopen(\"/tmp/3038.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"INSIDE %s (locked): connection=%p urh=%p\\n\", __func__, (void *)connection, (void *)connection->urh);\n      /* These fields exist in the original code and are about to be set. */\n      fprintf(f, \"  BEFORE: urh->was_closed=%d connection->resuming=%d daemon->resuming=%d\\n\",\n              (int)connection->urh->was_closed, (int)connection->resuming, (int)daemon->resuming);\n      fclose(f);\n    }\n  }\n\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n\n  /* Preserve original behaviour: only attempt activation if the ITC is\n     valid. Capture the result so we can log whether activation succeeded\n     or failed (the original code only logs on failure). */\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    int activated = MHD_itc_activate_ (daemon->itc, \"r\");\n\n    /* Log activation result so that test harnesses can observe whether the\n       runtime-only diagnostic (mhd_assert) would be the only operation in\n       some builds: if activation returns success/failure this will be\n       recorded. */\n    {\n      FILE *f = fopen(\"/tmp/logs/3038.txt\", \"a\");\n      if (NULL == f)\n        f = fopen(\"/tmp/3038.txt\", \"a\");\n      if (f) {\n        fprintf(f, \"ITC: itc=%p valid=1 activated=%d\\n\", (void *)daemon->itc, activated);\n        fclose(f);\n      }\n    }\n\n    if (! activated)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n      /* Also log the failure case explicitly next to the diagnostic log\n         so external observers have clear evidence. */\n      {\n        FILE *f = fopen(\"/tmp/logs/3038.txt\", \"a\");\n        if (NULL == f)\n          f = fopen(\"/tmp/3038.txt\", \"a\");\n        if (f) {\n          fprintf(f, \"ITC_ACTIVATE_FAILED: itc=%p\\n\", (void *)daemon->itc);\n          fclose(f);\n        }\n      }\n    }\n  }\n  else\n  {\n    /* Log that the ITC was not valid; original code does nothing in this\n       case, but recording this helps reproduce the control path. */\n    FILE *f = fopen(\"/tmp/logs/3038.txt\", \"a\");\n    if (NULL == f)\n      f = fopen(\"/tmp/3038.txt\", \"a\");\n    if (f) {\n      fprintf(f, \"ITC: itc=%p valid=0\\n\", (void *)daemon->itc);\n      fclose(f);\n    }\n  }\n}\n"
}