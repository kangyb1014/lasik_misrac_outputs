{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation scenario: MHD_itc_activate_ is declared with a non-const pointer parameter for the string argument (for example: int MHD_itc_activate_(struct MHD_ITC *itc, char *mode)). In that case the call MHD_itc_activate_(daemon->itc, \"r\") passes a string literal (which should be treated as const) to a non-const char* parameter, violating MISRA C 2023 Rule 8.13. Fix by declaring the parameter as const char *mode (or otherwise ensuring the pointer points to a const-qualified type). Note: if the function prototype already uses const char * for the second parameter, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_upgraded_connection_mark_app_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_upgraded_connection_mark_app_closed_:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_upgraded_connection_mark_app_closed_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_upgraded_connection_mark_app_closed_ with it.\n  - Your function must have the exact same signature as MHD_upgraded_connection_mark_app_closed_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_upgraded_connection_mark_app_closed_ to check logs.\n  - Your function MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_upgraded_connection_mark_app_closed_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_upgraded_connection_mark_app_closed_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  /* Logging probe: append control-flow and state info to a file so tests\n     can reproduce and inspect the behavior related to the ITC activation\n     (including the call that passes the string literal \"r\"). */\n  FILE *mhd_log = fopen(\"/tmp/logs/3035.txt\", \"a\");\n  if (NULL == mhd_log)\n    {\n      /* Fallback if the directory doesn't exist; keep trying to provide logs. */\n      mhd_log = fopen(\"/tmp/3035_fallback.txt\", \"a\");\n    }\n  if (mhd_log)\n    {\n      fprintf(mhd_log, \"ENTER MHD_upgraded_connection_mark_app_closed_: connection=%p\\n\", (void *) connection);\n      fprintf(mhd_log, \"  daemon=%p, connection->urh=%p\\n\", (void *) daemon, (void *) connection->urh);\n      fprintf(mhd_log, \"  connection->resuming(before)=%d, daemon->resuming(before)=%d\\n\",\n              (int) connection->resuming, (int) daemon->resuming);\n      fflush(mhd_log);\n    }\n\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n\n  /* Evaluate ITC validity once and log both the check and the activation\n     attempt. This preserves the original logic while making the control\n     path observable for reproduction. */\n  int itc_valid = MHD_ITC_IS_VALID_ (daemon->itc);\n  int activation_result = 0;\n  if (itc_valid)\n    {\n      if (mhd_log)\n        {\n          /* Log that we are about to call MHD_itc_activate_ and that the\n             mode argument is the string literal \"r\" (address printed). */\n          fprintf(mhd_log, \"  ITC valid: daemon->itc=%p; calling MHD_itc_activate_(daemon->itc, \\\"r\\\") with mode_literal_addr=%p\\n\",\n                  (void *) daemon->itc, (void *) \"r\");\n          fflush(mhd_log);\n        }\n\n      /* Call the activation function exactly as in the original code. */\n      activation_result = MHD_itc_activate_ (daemon->itc, \"r\");\n\n      if (mhd_log)\n        {\n          fprintf(mhd_log, \"  MHD_itc_activate_ returned %d\\n\", activation_result);\n          fflush(mhd_log);\n        }\n    }\n  else\n    {\n      if (mhd_log)\n        {\n          fprintf(mhd_log, \"  ITC not valid: daemon->itc=%p; skipping activation\\n\", (void *) daemon->itc);\n          fflush(mhd_log);\n        }\n    }\n\n  if (itc_valid && (! activation_result))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n      if (mhd_log)\n        {\n          fprintf(mhd_log, \"  DETECTED FAILURE: itc_valid=1, activation_result=%d -> logged failure path\\n\", activation_result);\n          fflush(mhd_log);\n        }\n    }\n  else\n    {\n      if (mhd_log)\n        {\n          fprintf(mhd_log, \"  No failure: itc_valid=%d, activation_result=%d\\n\", itc_valid, activation_result);\n          fflush(mhd_log);\n        }\n    }\n\n  if (mhd_log)\n    {\n      fprintf(mhd_log, \"EXIT MHD_upgraded_connection_mark_app_closed_: connection=%p, connection->resuming(after)=%d, daemon->resuming(after)=%d\\n\\n\",\n              (void *) connection, (int) connection->resuming, (int) daemon->resuming);\n      fclose(mhd_log);\n    }\n}\n"
}