{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion compares two compile-time constants (MHD_SHA256_DIGEST_SIZE and SHA256_DIGEST_SIZE). As written this is a tautological, side-effect-free check: it will always evaluate to true in a correct configuration, so executing it does not alter program behaviour and its removal would not change the program. Therefore, when mhd_assert expands to code that is executed (e.g. in debug builds), this constitutes dead code under Rule 2.2. (If mhd_assert is compiled out entirely in release builds, it is not executed there, but that does not remove the violation in builds where the assertion is active.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_get_hash_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_get_hash_size with it.\n  - Your function must have the exact same signature as digest_get_hash_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_get_hash_size to check logs.\n  - Your function MUST preserve the original logic of digest_get_hash_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_get_hash_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n  /* Log function entry and input state */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ENTER digest_get_hash_size: algo3=0x%08x\\n\", (unsigned int) algo3);\n        fclose(f);\n      }\n  }\n\n#ifdef MHD_MD5_SUPPORT\n  /* Log the assertion operands for MD5 then perform the original assertion */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ASSERT CHECK MD5: MHD_MD5_DIGEST_SIZE=%d, MD5_DIGEST_SIZE=%d\\n\",\n                (int) MHD_MD5_DIGEST_SIZE, (int) MD5_DIGEST_SIZE);\n        fclose(f);\n      }\n  }\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  /* Log the assertion operands for SHA256 then perform the original assertion */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ASSERT CHECK SHA256: MHD_SHA256_DIGEST_SIZE=%d, SHA256_DIGEST_SIZE=%d\\n\",\n                (int) MHD_SHA256_DIGEST_SIZE, (int) SHA256_DIGEST_SIZE);\n        fclose(f);\n      }\n  }\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  /* Log the assertion operands for SHA512/256 then perform the original assertion */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ASSERT CHECK SHA512_256: MHD_SHA512_256_DIGEST_SIZE=%d, SHA512_256_DIGEST_SIZE=%d\\n\",\n                (int) MHD_SHA512_256_DIGEST_SIZE, (int) SHA512_256_DIGEST_SIZE);\n        fclose(f);\n      }\n  }\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  /* If both are supported, log the cross-check and assert */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"ASSERT CHECK SHA256 vs SHA512_256: SHA256_DIGEST_SIZE=%d, SHA512_256_DIGEST_SIZE=%d\\n\",\n                (int) SHA256_DIGEST_SIZE, (int) SHA512_256_DIGEST_SIZE);\n        fclose(f);\n      }\n  }\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  {\n    int count = (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \n                 + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \n                 + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0));\n\n    {\n      FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"ASSERT CHECK ALGO COUNT: count=%d (algo3=0x%08x)\\n\", count, (unsigned int) algo3);\n          fclose(f);\n        }\n    }\n\n    mhd_assert (1 == count);\n  }\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    {\n      /* Log the selected branch and value before returning */\n      {\n        FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"BRANCH: MD5 selected, returning MHD_MD5_DIGEST_SIZE=%zu\\n\", (size_t) MHD_MD5_DIGEST_SIZE);\n            fclose(f);\n          }\n      }\n      return MHD_MD5_DIGEST_SIZE;\n    }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    {\n      /* Log that either SHA256 or SHA512/256 branch was selected and the returned size */\n      {\n        FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"BRANCH: SHA256 or SHA512_256 selected, returning MHD_SHA256_DIGEST_SIZE=%zu (same as SHA512_256)\\n\", (size_t) MHD_SHA256_DIGEST_SIZE);\n            fclose(f);\n          }\n      }\n      return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n    }\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    {\n      {\n        FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"BRANCH: SHA256 selected, returning MHD_SHA256_DIGEST_SIZE=%zu\\n\", (size_t) MHD_SHA256_DIGEST_SIZE);\n            fclose(f);\n          }\n      }\n      return MHD_SHA256_DIGEST_SIZE;\n    }\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    {\n      {\n        FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n        if (f)\n          {\n            fprintf(f, \"BRANCH: SHA512_256 selected, returning MHD_SHA512_256_DIGEST_SIZE=%zu\\n\", (size_t) MHD_SHA512_256_DIGEST_SIZE);\n            fclose(f);\n          }\n      }\n      return MHD_SHA512_256_DIGEST_SIZE;\n    }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  /* Log unsupported algorithm / wrong input and return 0 */\n  {\n    FILE *f = fopen(\"/tmp/logs/2208.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"EXIT: unsupported algorithm or wrong input, returning 0 (algo3=0x%08x)\\n\", (unsigned int) algo3);\n        fclose(f);\n      }\n  }\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}