{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call compares two compile-time constants (MHD_MD5_DIGEST_SIZE and MD5_DIGEST_SIZE). If these macros are equal the test is always true and has no side effects, so its execution does not affect program behaviour; removing the assertion (or it being compiled away by a release build macro) would not change program behaviour. Therefore this assertion is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_hash_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2208.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_get_hash_size:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_get_hash_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_get_hash_size with it.\n  - Your function must have the exact same signature as digest_get_hash_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_get_hash_size to check logs.\n  - Your function MUST preserve the original logic of digest_get_hash_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_get_hash_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_get_hash_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n  /* Logging probe - append to log file for forensic evidence */\n  FILE *mhd_log = fopen(\"/tmp/logs/2208.txt\", \"a\");\n  if (mhd_log)\n    fprintf(mhd_log, \"digest_get_hash_size: entry algo3=0x%08x\\n\", (unsigned int) algo3);\n\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n  if (mhd_log)\n    fprintf(mhd_log, \"ASSERT CHECK MD5: MHD_MD5_DIGEST_SIZE=%u, MD5_DIGEST_SIZE=%u, equal=%d\\n\",\n            (unsigned int) MHD_MD5_DIGEST_SIZE,\n            (unsigned int) MD5_DIGEST_SIZE,\n            (int) (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE));\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n  if (mhd_log)\n    fprintf(mhd_log, \"ASSERT CHECK SHA256: MHD_SHA256_DIGEST_SIZE=%u, SHA256_DIGEST_SIZE=%u, equal=%d\\n\",\n            (unsigned int) MHD_SHA256_DIGEST_SIZE,\n            (unsigned int) SHA256_DIGEST_SIZE,\n            (int) (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE));\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n  if (mhd_log)\n    fprintf(mhd_log, \"ASSERT CHECK SHA512_256: MHD_SHA512_256_DIGEST_SIZE=%u, SHA512_256_DIGEST_SIZE=%u, equal=%d\\n\",\n            (unsigned int) MHD_SHA512_256_DIGEST_SIZE,\n            (unsigned int) SHA512_256_DIGEST_SIZE,\n            (int) (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE));\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n  if (mhd_log)\n    fprintf(mhd_log, \"ASSERT CHECK SHA256==SHA512_256: SHA256_DIGEST_SIZE=%u, SHA512_256_DIGEST_SIZE=%u, equal=%d\\n\",\n            (unsigned int) SHA256_DIGEST_SIZE,\n            (unsigned int) SHA512_256_DIGEST_SIZE,\n            (int) (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE));\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  /* Compute flags for logging without changing original logic */\n  {\n    int md5_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0);\n    int sha256_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0);\n    int sha512_256_flag = ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0);\n    int alg_count = md5_flag + sha256_flag + sha512_256_flag;\n    if (mhd_log)\n      fprintf(mhd_log, \"ALGO FLAGS: md5=%d, sha256=%d, sha512_256=%d, count=%d\\n\",\n              md5_flag, sha256_flag, sha512_256_flag, alg_count);\n  }\n\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5))) {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: returning MHD_MD5_DIGEST_SIZE=%u\\n\", (unsigned int) MHD_MD5_DIGEST_SIZE);\n    if (mhd_log) fclose(mhd_log);\n    return MHD_MD5_DIGEST_SIZE;\n  } else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))) {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: returning MHD_SHA256_DIGEST_SIZE=%u (same as SHA512_256)\\n\", (unsigned int) MHD_SHA256_DIGEST_SIZE);\n    if (mhd_log) fclose(mhd_log);\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  } else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256))) {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: returning MHD_SHA256_DIGEST_SIZE=%u\\n\", (unsigned int) MHD_SHA256_DIGEST_SIZE);\n    if (mhd_log) fclose(mhd_log);\n    return MHD_SHA256_DIGEST_SIZE;\n  } else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))) {\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: returning MHD_SHA512_256_DIGEST_SIZE=%u\\n\", (unsigned int) MHD_SHA512_256_DIGEST_SIZE);\n    if (mhd_log) fclose(mhd_log);\n    return MHD_SHA512_256_DIGEST_SIZE;\n  } else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  if (mhd_log)\n    fprintf(mhd_log, \"BRANCH: unsupported algorithm -> returning 0\\n\");\n  if (mhd_log) fclose(mhd_log);\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n"
}