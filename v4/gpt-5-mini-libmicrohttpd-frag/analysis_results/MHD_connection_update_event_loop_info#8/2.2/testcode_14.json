{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement mhd_assert(connection->discard_request); is a diagnostic assertion with no functional effect in production builds (mhd_assert typically expands to nothing when assertions are disabled). In the common release configuration this call and its expression are compiled out and thus removing the statement would not affect program behaviour \u2014 it is an operation that exists only for debugging/diagnostics. Therefore it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_update_event_loop_info code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3678.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_update_event_loop_info:\n```c\nstatic void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n    return; /* States will be updated after resume. */\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n        }\n      }\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        mhd_assert (connection->discard_request);\n        continue;\n      }\n    }\n    break; /* Everything was processed. */\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_update_event_loop_info code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_update_event_loop_info with it.\n  - Your function must have the exact same signature as MHD_connection_update_event_loop_info.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_update_event_loop_info to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_update_event_loop_info will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_update_event_loop_info as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nMHD_connection_update_event_loop_info (struct MHD_Connection *connection)\n{\n  FILE *log = fopen(\"/tmp/logs/3678.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_connection_update_event_loop_info conn=%p\\n\", (void *)connection);\n    if (connection)\n      fprintf(log, \"  initial: suspended=%d state=%d tls_state=%d event_loop_info=%d read_buffer_offset=%zu read_buffer_size=%zu discard_request=%d\\n\",\n              (int)connection->suspended,\n              (int)connection->state,\n              (int)connection->tls_state,\n              (int)connection->event_loop_info,\n              (size_t)connection->read_buffer_offset,\n              (size_t)connection->read_buffer_size,\n              (int)connection->discard_request);\n  }\n\n  /* Do not update states of suspended connection */\n  if (connection->suspended)\n  {\n    if (log)\n      fprintf(log, \"EXIT: suspended -> return\\n\");\n    if (log) fclose(log);\n    return; /* States will be updated after resume. */\n  }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    switch (connection->tls_state)\n    {\n    case MHD_TLS_CONN_INIT:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      if (log)\n        fprintf(log, \"TLS: MHD_TLS_CONN_INIT -> event_loop_info=READ\\n\");\n      if (log) fclose(log);\n      return;\n    case MHD_TLS_CONN_HANDSHAKING:\n    case MHD_TLS_CONN_WR_CLOSING:\n      if (0 == gnutls_record_get_direction (connection->tls_session))\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      else\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"TLS: HANDSHAKING/WR_CLOSING -> direction=%d event_loop_info=%d\\n\",\n                (int)gnutls_record_get_direction (connection->tls_session),\n                (int)connection->event_loop_info);\n      if (log) fclose(log);\n      return;\n    case MHD_TLS_CONN_CONNECTED:\n      break; /* Do normal processing */\n    case MHD_TLS_CONN_WR_CLOSED:\n    case MHD_TLS_CONN_TLS_FAILED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      if (log)\n        fprintf(log, \"TLS: WR_CLOSED/TLS_FAILED -> event_loop_info=CLEANUP\\n\");\n      if (log) fclose(log);\n      return;\n    case MHD_TLS_CONN_TLS_CLOSING:  /* Not implemented yet */\n    case MHD_TLS_CONN_TLS_CLOSED:   /* Not implemented yet */\n    case MHD_TLS_CONN_INVALID_STATE:\n    case MHD_TLS_CONN_NO_TLS: /* Not possible */\n    default:\n      if (log)\n        fprintf(log, \"TLS: Invalid TLS state value: %d\\n\", (int)connection->tls_state);\n      if (log) fclose(log);\n      MHD_PANIC (_ (\"Invalid TLS state value.\\n\"));\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n  while (1)\n  {\n#if DEBUG_STATES\n    MHD_DLOG (connection->daemon,\n              _ (\"In function %s handling connection at state: %s\\n\"),\n              MHD_FUNC_,\n              MHD_state_to_string (connection->state));\n#endif\n    if (log)\n      fprintf(log, \"LOOP: connection=%p state=%d event_loop_info=%d\\n\",\n              (void *)connection, (int)connection->state, (int)connection->event_loop_info);\n    switch (connection->state)\n    {\n    case MHD_CONNECTION_INIT:\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      if (log)\n        fprintf(log, \"STATE: REQ_LINE_RECEIVING/INIT -> READ\\n\");\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n      if (log)\n        fprintf(log, \"STATE: REQ_LINE_RECEIVED -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      if (log)\n        fprintf(log, \"STATE: REQ_HEADERS_RECEIVING -> READ\\n\");\n      break;\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n      if (log)\n        fprintf(log, \"STATE: HEADERS_RECEIVED/PROCESSED -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CONTINUE_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"STATE: CONTINUE_SENDING -> WRITE\\n\");\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      if ((connection->rq.some_payload_processed) &&\n          has_unprocessed_upload_body_data_in_buffer (connection))\n      {\n        /* Some data was processed, the buffer must have some free space */\n        if (log)\n          fprintf(log, \"BODY_RECEIVING: some_payload_processed=1 has_unprocessed=1 read_buffer_offset=%zu read_buffer_size=%zu\\n\",\n                  (size_t)connection->read_buffer_offset, (size_t)connection->read_buffer_size);\n        mhd_assert (connection->read_buffer_offset < \\\n                    connection->read_buffer_size);\n        if (! connection->rq.have_chunked_upload)\n        {\n          /* Not a chunked upload. Do not read more than necessary to\n             process the current request. */\n          if (connection->rq.remaining_upload_size >=\n              connection->read_buffer_offset)\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n          else\n            connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          if (log)\n            fprintf(log, \"BODY_RECEIVING: have_chunked_upload=0 remaining_upload_size=%zu -> event_loop_info=%d\\n\",\n                    (size_t)connection->rq.remaining_upload_size,\n                    (int)connection->event_loop_info);\n        }\n        else\n        {\n          /* Chunked upload. The size of the current request is unknown.\n             Continue reading as the space in the read buffer is available. */\n          connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS_READ;\n          if (log)\n            fprintf(log, \"BODY_RECEIVING: chunked -> PROCESS_READ\\n\");\n        }\n      }\n      else\n      {\n        connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n        if (log)\n          fprintf(log, \"BODY_RECEIVING: no payload processed or no unprocessed data -> READ\\n\");\n      }\n      break;\n    case MHD_CONNECTION_BODY_RECEIVED:\n      if (log)\n        fprintf(log, \"STATE: BODY_RECEIVED -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_READ;\n      if (log)\n        fprintf(log, \"STATE: FOOTERS_RECEIVING -> READ\\n\");\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n      if (log)\n        fprintf(log, \"STATE: FOOTERS_RECEIVED -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      if (log)\n        fprintf(log, \"STATE: FULL_REQ_RECEIVED -> PROCESS\\n\");\n      break;\n    case MHD_CONNECTION_START_REPLY:\n      if (log)\n        fprintf(log, \"STATE: START_REPLY -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_HEADERS_SENDING:\n      /* headers in buffer, keep writing */\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"STATE: HEADERS_SENDING -> WRITE\\n\");\n      break;\n    case MHD_CONNECTION_HEADERS_SENT:\n      if (log)\n        fprintf(log, \"STATE: HEADERS_SENT -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      if (log)\n        fprintf(log, \"STATE: NORMAL_BODY_UNREADY -> PROCESS\\n\");\n      break;\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"STATE: NORMAL_BODY_READY -> WRITE\\n\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n      if (log)\n        fprintf(log, \"STATE: CHUNKED_BODY_UNREADY -> PROCESS\\n\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"STATE: CHUNKED_BODY_READY -> WRITE\\n\");\n      break;\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n      if (log)\n        fprintf(log, \"STATE: CHUNKED_BODY_SENT -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_FOOTERS_SENDING:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_WRITE;\n      if (log)\n        fprintf(log, \"STATE: FOOTERS_SENDING -> WRITE\\n\");\n      break;\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n      if (log)\n        fprintf(log, \"STATE: FULL_REPLY_SENT -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n    case MHD_CONNECTION_CLOSED:\n      connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n      if (log)\n        fprintf(log, \"STATE: CLOSED -> CLEANUP and return\\n\");\n      if (log) fclose(log);\n      return;           /* do nothing, not even reading */\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n      if (log)\n        fprintf(log, \"STATE: UPGRADE -> mhd_assert(0) path hit\\n\");\n      mhd_assert (0);\n      break;\n#endif /* UPGRADE_SUPPORT */\n    default:\n      if (log)\n        fprintf(log, \"STATE: default -> mhd_assert(0) path hit state=%d\\n\", (int)connection->state);\n      mhd_assert (0);\n    }\n\n    if (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info))\n    {\n      /* Check whether the space is available to receive data */\n      if (! check_and_grow_read_buffer_space (connection))\n      {\n        if (log)\n          fprintf(log, \"BUFFER_GROW: check_and_grow_read_buffer_space returned false. conn=%p state=%d read_buffer_offset=%zu read_buffer_size=%zu discard_request=%d\\n\",\n                  (void *)connection,\n                  (int)connection->state,\n                  (size_t)connection->read_buffer_offset,\n                  (size_t)connection->read_buffer_size,\n                  (int)connection->discard_request);\n        /* This is the path of interest for the reported violation: the\n           diagnostic assertion below only has effect in debug builds.\n           Log the state so that release builds (where mhd_assert is a\n           no-op) still produce evidence. */\n        if (log)\n          fprintf(log, \"Before mhd_assert(connection->discard_request) value=%d\\n\", (int)connection->discard_request);\n        mhd_assert (connection->discard_request);\n        if (log)\n          fprintf(log, \"After mhd_assert(connection->discard_request) (may be no-op in release) -> continue\\n\");\n        continue;\n      }\n    }\n    if (log)\n      fprintf(log, \"LOOP: everything processed -> break\\n\");\n    break; /* Everything was processed. */\n  }\n  if (log)\n    fprintf(log, \"EXIT: final event_loop_info=%d\\n\", (int)connection->event_loop_info);\n  if (log) fclose(log);\n}\n"
}