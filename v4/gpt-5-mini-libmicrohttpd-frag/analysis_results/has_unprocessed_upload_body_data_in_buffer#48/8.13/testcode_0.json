{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Connection *c' is not const-qualified even though the function only reads fields of *c (accesses c->state, c->rq..., c->read_buffer_offset) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The signature should be changed to: static bool has_unprocessed_upload_body_data_in_buffer(const struct MHD_Connection *c).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified has_unprocessed_upload_body_data_in_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4305.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of has_unprocessed_upload_body_data_in_buffer:\n```c\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified has_unprocessed_upload_body_data_in_buffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original has_unprocessed_upload_body_data_in_buffer with it.\n  - Your function must have the exact same signature as has_unprocessed_upload_body_data_in_buffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call has_unprocessed_upload_body_data_in_buffer to check logs.\n  - Your function MUST preserve the original logic of has_unprocessed_upload_body_data_in_buffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, has_unprocessed_upload_body_data_in_buffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of has_unprocessed_upload_body_data_in_buffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  bool result;\n  FILE *log = fopen(\"/tmp/logs/4305.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER: has_unprocessed_upload_body_data_in_buffer: c=%p\\n\", (void *)c);\n    if (c)\n    {\n      fprintf(log, \"state=%d, have_chunked_upload=%d, read_buffer_offset=%zu, remaining_upload_size=%zu, current_chunk_offset=%zu, current_chunk_size=%zu\\n\",\n              (int)c->state,\n              (int)c->rq.have_chunked_upload,\n              (size_t)c->read_buffer_offset,\n              (size_t)c->rq.remaining_upload_size,\n              (size_t)c->rq.current_chunk_offset,\n              (size_t)c->rq.current_chunk_size);\n    }\n    else\n    {\n      fprintf(log, \"c is NULL\\n\");\n    }\n  }\n\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n  {\n    result = 0 != c->read_buffer_offset;\n    if (log)\n      fprintf(log, \"path=non-chunked, read_buffer_offset=%zu, result=%d\\n\", (size_t)c->read_buffer_offset, (int)result);\n    if (log)\n      fclose(log);\n    return result;\n  }\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    if (log)\n      fprintf(log, \"path=chunked-header-or-crlf-wait, current_chunk_offset=%zu, current_chunk_size=%zu, returning=false\\n\",\n              (size_t)c->rq.current_chunk_offset,\n              (size_t)c->rq.current_chunk_size);\n    if (log)\n      fclose(log);\n    return false;\n  }\n\n  result = 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n  if (log)\n    fprintf(log, \"path=chunked-payload, read_buffer_offset=%zu, result=%d\\n\", (size_t)c->read_buffer_offset, (int)result);\n  if (log)\n    fclose(log);\n  return result;\n}\n"
}