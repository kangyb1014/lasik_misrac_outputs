{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe call to MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, set, fd_setsize) itself does not modify any function parameter and so the call fragment alone does not violate Rule 17.8. However, the enclosing function does violate Rule 17.8 because the value parameter fd_setsize is assigned to earlier in the function: fd_setsize = (int) FD_SETSIZE; \u2014 this modifies a non\u2011pointer parameter and therefore breaches MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3012.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_to_fd_set_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_to_fd_set_ with it.\n  - Your function must have the exact same signature as MHD_add_to_fd_set_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_to_fd_set_ to check logs.\n  - Your function MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_to_fd_set_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  FILE *log = fopen(\"/tmp/logs/3012.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTER: MHD_add_to_fd_set_(fd=%lld, set=%p, max_fd=%p, fd_setsize=%d)\\n\",\n            (long long) fd, (void *) set, (void *) max_fd, fd_setsize);\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n  {\n    if (log)\n      fprintf(log, \"BRANCH: early return because set is NULL or fd is invalid\\n\");\n    if (log)\n      fclose(log);\n    return 0;\n  }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  /* Preserve original behaviour: mute unused warning then assign. */\n  (void) fd_setsize;  /* Mute compiler warning */\n  if (log)\n    fprintf(log, \"ACTION: about to assign fd_setsize = (int) FD_SETSIZE; (before fd_setsize=%d)\\n\", fd_setsize);\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n  if (log)\n    fprintf(log, \"ACTION: assigned fd_setsize (after fd_setsize=%d)\\n\", fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n  {\n    if (log)\n      fprintf(log, \"BRANCH: MHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned false (fd=%lld, fd_setsize=%d)\\n\",\n              (long long) fd, fd_setsize);\n    if (log)\n      fclose(log);\n    return 0;\n  }\n\n  if (log)\n    fprintf(log, \"CALL: MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd=%lld, set=%p, fd_setsize=%d)\\n\",\n            (long long) fd, (void *) set, fd_setsize);\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n  {\n    if (log)\n      fprintf(log, \"ACTION: updating *max_fd (old=%lld) to fd=%lld\\n\", (long long) *max_fd, (long long) fd);\n    *max_fd = fd;\n  }\n\n  if (log)\n    fprintf(log, \"EXIT: returning success (1)\\n\");\n  if (log)\n    fclose(log);\n  return ! 0;\n}\n"
}