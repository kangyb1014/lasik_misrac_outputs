{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen compiled with HAS_FD_SETSIZE_OVERRIDABLE not defined and the subsequent platform-specific macros (MHD_SCKT_FD_FITS_FDSET_SETSIZE_ and MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_) do not actually read the fd_setsize parameter, the assignment fd_setsize = (int) FD_SETSIZE; has no observable effect and can be removed without changing program behaviour. The preceding (void) fd_setsize; already indicates fd_setsize is unused in that configuration, so this write is an executed operation whose removal would not affect behaviour\u2014i.e. dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_to_fd_set_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3018.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_to_fd_set_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_to_fd_set_ with it.\n  - Your function must have the exact same signature as MHD_add_to_fd_set_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_to_fd_set_ to check logs.\n  - Your function MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_to_fd_set_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_to_fd_set_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  /* Logging probe to help reproduce the dead-code scenario. Logs appended to\n     /tmp/logs/3018.txt. We keep the original logic and ordering verbatim. */\n  FILE *mhd_log = fopen(\"/tmp/logs/3018.txt\", \"a\");\n  if (mhd_log)\n    fprintf(mhd_log, \"Entered MHD_add_to_fd_set_: fd=%ld set=%p max_fd=%p fd_setsize_in=%d\\n\",\n            (long) fd, (void *) set, (void *) max_fd, fd_setsize);\n\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n  {\n    if (mhd_log) {\n      fprintf(mhd_log, \"Early exit: set is NULL or fd is MHD_INVALID_SOCKET\\n\");\n      fclose(mhd_log);\n    }\n    return 0;\n  }\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  if (mhd_log)\n    fprintf(mhd_log, \"HAS_FD_SETSIZE_OVERRIDABLE not defined; fd_setsize before mute/assign=%d\\n\", fd_setsize);\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n  if (mhd_log)\n    fprintf(mhd_log, \"Assigned fd_setsize = (int)FD_SETSIZE -> %d\\n\", fd_setsize);\n#else\n  if (mhd_log)\n    fprintf(mhd_log, \"HAS_FD_SETSIZE_OVERRIDABLE defined; fd_setsize remains %d\\n\", fd_setsize);\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Preserve original call ordering and capture the boolean result for logging. */\n  int fits = MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                              set,\n                                              fd_setsize);\n  if (mhd_log)\n    fprintf(mhd_log, \"MHD_SCKT_FD_FITS_FDSET_SETSIZE_ returned %d\\n\", fits);\n\n  if (! fits) {\n    if (mhd_log) {\n      fprintf(mhd_log, \"Not fitting into fd_set; returning 0\\n\");\n      fclose(mhd_log);\n    }\n    return 0;\n  }\n\n  if (mhd_log)\n    fprintf(mhd_log, \"Calling MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ with fd_setsize=%d\\n\", fd_setsize);\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if (mhd_log)\n    fprintf(mhd_log, \"MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ completed\\n\");\n\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) ) {\n    if (mhd_log)\n      fprintf(mhd_log, \"Updating *max_fd from %ld to %ld\\n\", (long) *max_fd, (long) fd);\n    *max_fd = fd;\n  } else {\n    if (mhd_log) {\n      if (NULL == max_fd)\n        fprintf(mhd_log, \"max_fd is NULL; not updating\\n\");\n      else\n        fprintf(mhd_log, \"max_fd not updated; current *max_fd=%ld\\n\", (long) *max_fd);\n    }\n  }\n\n  if (mhd_log) {\n    fprintf(mhd_log, \"Returning success (non-zero)\\n\");\n    fclose(mhd_log);\n  }\n  return ! 0;\n}\n"
}