{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUnder UPGRADE_SUPPORT the local variable is declared as:\n  struct MHD_UpgradeResponseHandle *const urh = pos->urh;\nThe pointer itself is const but the pointed-to type is not. In the fragment urh is only read (checked for NULL and fields urh->was_closed / urh->clean_ready), so the pointee could and should be const-qualified (e.g. const struct MHD_UpgradeResponseHandle *const urh = pos->urh). Therefore this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified resume_suspended_connections code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2285.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of resume_suspended_connections:\n```c\nstatic enum MHD_Result\nresume_suspended_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *prev = NULL;\n  enum MHD_Result ret;\n  const bool used_thr_p_c = (0 != (daemon->options\n                                   & MHD_USE_THREAD_PER_CONNECTION));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif\n\n  ret = MHD_NO;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n\n  if (daemon->resuming)\n  {\n    prev = daemon->suspended_connections_tail;\n    /* During shutdown check for resuming is forced. */\n    mhd_assert ((NULL != prev) || (daemon->shutdown) || \\\n                (0 != (daemon->options & MHD_ALLOW_UPGRADE)));\n  }\n\n  daemon->resuming = false;\n\n  while (NULL != (pos = prev))\n  {\n#ifdef UPGRADE_SUPPORT\n    struct MHD_UpgradeResponseHandle *const urh = pos->urh;\n#else  /* ! UPGRADE_SUPPORT */\n    static const void *const urh = NULL;\n#endif /* ! UPGRADE_SUPPORT */\n    prev = pos->prev;\n    if ( (! pos->resuming)\n#ifdef UPGRADE_SUPPORT\n         || ( (NULL != urh) &&\n              ( (! urh->was_closed) ||\n                (! urh->clean_ready) ) )\n#endif /* UPGRADE_SUPPORT */\n         )\n      continue;\n    ret = MHD_YES;\n    mhd_assert (pos->suspended);\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                pos);\n    pos->suspended = false;\n    if (NULL == urh)\n    {\n      DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  pos);\n      if (! used_thr_p_c)\n      {\n        /* Reset timeout timer on resume. */\n        if (0 != pos->connection_timeout_ms)\n          pos->last_activity = MHD_monotonic_msec_counter ();\n\n        if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       pos);\n        else\n          XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       pos);\n      }\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon))\n      {\n        if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n          MHD_PANIC (\"Resumed connection was already in EREADY set.\\n\");\n        /* we always mark resumed connections as ready, as we\n           might have missed the edge poll event during suspension */\n        EDLL_insert (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL   \\\n                            | MHD_EPOLL_STATE_READ_READY\n                            | MHD_EPOLL_STATE_WRITE_READY;\n        pos->epoll_state &= ~((enum MHD_EpollState) MHD_EPOLL_STATE_SUSPENDED);\n      }\n#endif\n    }\n#ifdef UPGRADE_SUPPORT\n    else\n    {\n      /* Data forwarding was finished (for TLS connections) AND\n       * application was closed upgraded connection.\n       * Insert connection into cleanup list. */\n\n      if ( (NULL != daemon->notify_completed) &&\n           (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n           (pos->rq.client_aware) )\n      {\n        daemon->notify_completed (daemon->notify_completed_cls,\n                                  pos,\n                                  &pos->rq.client_context,\n                                  MHD_REQUEST_TERMINATED_COMPLETED_OK);\n        pos->rq.client_aware = false;\n      }\n      DLL_insert (daemon->cleanup_head,\n                  daemon->cleanup_tail,\n                  pos);\n      daemon->data_already_pending = true;\n    }\n#endif /* UPGRADE_SUPPORT */\n    pos->resuming = false;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (used_thr_p_c) &&\n       (MHD_NO != ret) )\n  {   /* Wake up suspended connections. */\n    if (! MHD_itc_activate_ (daemon->itc,\n                             \"w\"))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume of connection via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n    }\n  }\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified resume_suspended_connections code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original resume_suspended_connections with it.\n  - Your function must have the exact same signature as resume_suspended_connections.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call resume_suspended_connections to check logs.\n  - Your function MUST preserve the original logic of resume_suspended_connections as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, resume_suspended_connections will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of resume_suspended_connections as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nresume_suspended_connections (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *prev = NULL;\n  enum MHD_Result ret;\n  const bool used_thr_p_c = (0 != (daemon->options\n                                   & MHD_USE_THREAD_PER_CONNECTION));\n  FILE *logf = NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif\n\n  /* Try to open log file for appending. If it fails, we simply skip logging. */\n  logf = fopen(\"/tmp/logs/2285.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER resume_suspended_connections: daemon=%p used_thr_p_c=%d resuming=%d\\n\",\n            (void *)daemon, (int)used_thr_p_c, (int)daemon->resuming);\n    fflush(logf);\n  }\n\n  ret = MHD_NO;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  if (logf)\n  {\n    fprintf(logf, \"mutex locked: cleanup_connection_mutex\\n\");\n    fflush(logf);\n  }\n#endif\n\n  if (daemon->resuming)\n  {\n    prev = daemon->suspended_connections_tail;\n    /* During shutdown check for resuming is forced. */\n    mhd_assert ((NULL != prev) || (daemon->shutdown) || \\\n                (0 != (daemon->options & MHD_ALLOW_UPGRADE)));\n    if (logf)\n    {\n      fprintf(logf, \"daemon->resuming true, suspended_connections_tail=%p\\n\",\n              (void *)prev);\n      fflush(logf);\n    }\n  }\n\n  daemon->resuming = false;\n\n  while (NULL != (pos = prev))\n  {\n#ifdef UPGRADE_SUPPORT\n    struct MHD_UpgradeResponseHandle *const urh = pos->urh;\n#else  /* ! UPGRADE_SUPPORT */\n    static const void *const urh = NULL;\n#endif /* ! UPGRADE_SUPPORT */\n    prev = pos->prev;\n\n    if (logf)\n    {\n#ifdef UPGRADE_SUPPORT\n      if (NULL != urh)\n        fprintf(logf, \"loop: pos=%p prev=%p pos->resuming=%d pos->suspended=%d urh=%p was_closed=%d clean_ready=%d\\n\",\n                (void *)pos, (void *)prev, (int)pos->resuming, (int)pos->suspended,\n                (void *)urh, (int)urh->was_closed, (int)urh->clean_ready);\n      else\n        fprintf(logf, \"loop: pos=%p prev=%p pos->resuming=%d pos->suspended=%d urh=NULL\\n\",\n                (void *)pos, (void *)prev, (int)pos->resuming, (int)pos->suspended);\n#else\n      fprintf(logf, \"loop: pos=%p prev=%p pos->resuming=%d pos->suspended=%d urh=NULL (no UPGRADE_SUPPORT)\\n\",\n              (void *)pos, (void *)prev, (int)pos->resuming, (int)pos->suspended);\n#endif\n      fflush(logf);\n    }\n\n    if ( (! pos->resuming)\n#ifdef UPGRADE_SUPPORT\n         || ( (NULL != urh) &&\n              ( (! urh->was_closed) ||\n                (! urh->clean_ready) ) )\n#endif /* UPGRADE_SUPPORT */\n         )\n    {\n      if (logf)\n      {\n#ifdef UPGRADE_SUPPORT\n        if (! pos->resuming)\n          fprintf(logf, \"skipping pos=%p because pos->resuming is false\\n\", (void *)pos);\n        else if ((NULL != urh) && ((! urh->was_closed) || (! urh->clean_ready)))\n          fprintf(logf, \"skipping pos=%p because urh indicates not finished: was_closed=%d clean_ready=%d\\n\",\n                  (void *)pos, (int)urh->was_closed, (int)urh->clean_ready);\n        else\n          fprintf(logf, \"skipping pos=%p for unknown reason\\n\", (void *)pos);\n#else\n        fprintf(logf, \"skipping pos=%p (no UPGRADE_SUPPORT path)\\n\", (void *)pos);\n#endif\n        fflush(logf);\n      }\n      continue;\n    }\n    ret = MHD_YES;\n    if (logf)\n    {\n      fprintf(logf, \"resuming pos=%p: will set ret=MHD_YES and remove from suspended list\\n\",\n              (void *)pos);\n      fflush(logf);\n    }\n    mhd_assert (pos->suspended);\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                pos);\n    pos->suspended = false;\n    if (NULL == urh)\n    {\n      DLL_insert (daemon->connections_head,\n                  daemon->connections_tail,\n                  pos);\n      if (logf)\n      {\n        fprintf(logf, \"inserted pos=%p into connections list\\n\", (void *)pos);\n        fflush(logf);\n      }\n      if (! used_thr_p_c)\n      {\n        /* Reset timeout timer on resume. */\n        if (0 != pos->connection_timeout_ms)\n          pos->last_activity = MHD_monotonic_msec_counter ();\n\n        if (logf)\n        {\n          fprintf(logf, \"pos=%p timeout_ms=%d last_activity=%llu daemon_timeout_ms=%d\\n\",\n                  (void *)pos, (int)pos->connection_timeout_ms,\n                  (unsigned long long) pos->last_activity,\n                  (int)daemon->connection_timeout_ms);\n          fflush(logf);\n        }\n\n        if (pos->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       pos);\n        else\n          XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       pos);\n      }\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon))\n      {\n        if (0 != (pos->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL))\n          MHD_PANIC (\"Resumed connection was already in EREADY set.\\n\");\n        /* we always mark resumed connections as ready, as we\n           might have missed the edge poll event during suspension */\n        EDLL_insert (daemon->eready_head,\n                     daemon->eready_tail,\n                     pos);\n        pos->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL   \\\n                            | MHD_EPOLL_STATE_READ_READY\n                            | MHD_EPOLL_STATE_WRITE_READY;\n        pos->epoll_state &= ~((enum MHD_EpollState) MHD_EPOLL_STATE_SUSPENDED);\n        if (logf)\n        {\n          fprintf(logf, \"pos=%p epoll_state updated: new state=%d\\n\", (void *)pos, (int)pos->epoll_state);\n          fflush(logf);\n        }\n      }\n#endif\n    }\n#ifdef UPGRADE_SUPPORT\n    else\n    {\n      /* Data forwarding was finished (for TLS connections) AND\n       * application was closed upgraded connection.\n       * Insert connection into cleanup list. */\n\n      if (logf)\n      {\n        fprintf(logf, \"upgrade path for pos=%p: urh=%p was_closed=%d clean_ready=%d\\n\",\n                (void *)pos, (void *)urh, (int)urh->was_closed, (int)urh->clean_ready);\n        fflush(logf);\n      }\n\n      if ( (NULL != daemon->notify_completed) &&\n           (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n           (pos->rq.client_aware) )\n      {\n        if (logf)\n        {\n          fprintf(logf, \"calling notify_completed for pos=%p\\n\", (void *)pos);\n          fflush(logf);\n        }\n        daemon->notify_completed (daemon->notify_completed_cls,\n                                  pos,\n                                  &pos->rq.client_context,\n                                  MHD_REQUEST_TERMINATED_COMPLETED_OK);\n        pos->rq.client_aware = false;\n      }\n      DLL_insert (daemon->cleanup_head,\n                  daemon->cleanup_tail,\n                  pos);\n      daemon->data_already_pending = true;\n      if (logf)\n      {\n        fprintf(logf, \"pos=%p inserted into cleanup list, data_already_pending set true\\n\",\n                (void *)pos);\n        fflush(logf);\n      }\n    }\n#endif /* UPGRADE_SUPPORT */\n    pos->resuming = false;\n    if (logf)\n    {\n      fprintf(logf, \"finished processing pos=%p, pos->resuming set false\\n\", (void *)pos);\n      fflush(logf);\n    }\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if (logf)\n  {\n    fprintf(logf, \"mutex unlocked: cleanup_connection_mutex\\n\");\n    fflush(logf);\n  }\n#endif\n  if ( (used_thr_p_c) &&\n       (MHD_NO != ret) )\n  {   /* Wake up suspended connections. */\n    if (! MHD_itc_activate_ (daemon->itc,\n                             \"w\"))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal resume of connection via \" \\\n                   \"inter-thread communication channel.\\n\"));\n#endif\n      if (logf)\n      {\n        fprintf(logf, \"MHD_itc_activate_ failed for daemon=%p\\n\", (void *)daemon);\n        fflush(logf);\n      }\n    }\n    else\n    {\n      if (logf)\n      {\n        fprintf(logf, \"MHD_itc_activate_ succeeded for daemon=%p\\n\", (void *)daemon);\n        fflush(logf);\n      }\n    }\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT resume_suspended_connections: return=%d\\n\", (int)ret);\n    fclose(logf);\n  }\n  return ret;\n}\n"
}