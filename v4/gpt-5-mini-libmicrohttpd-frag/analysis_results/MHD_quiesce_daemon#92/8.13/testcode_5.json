{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_itc_activate_ is declared to take a non-const pointer for the message (for example: int MHD_itc_activate_(..., char *msg)), then passing the string literal \"q\" violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (const char *) whenever possible. If, however, MHD_itc_activate_ is declared to accept a const char * (or equivalent const-qualified type), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_quiesce_daemon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/145.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_quiesce_daemon:\n```c\n_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n\n  ret = daemon->listen_fd;\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n    return MHD_INVALID_SOCKET;\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\"))\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"q\")) )\n    MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                  \"communication channel.\\n\"));\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_quiesce_daemon code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_quiesce_daemon with it.\n  - Your function must have the exact same signature as MHD_quiesce_daemon.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_quiesce_daemon to check logs.\n  - Your function MUST preserve the original logic of MHD_quiesce_daemon as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_quiesce_daemon will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_quiesce_daemon as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN MHD_socket\nMHD_quiesce_daemon (struct MHD_Daemon *daemon)\n{\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  unsigned int i;\n#endif\n  MHD_socket ret;\n  FILE *log = fopen(\"/tmp/logs/145.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"[MHD_quiesce_daemon] entered: daemon=%p\\n\", (void *)daemon);\n    fflush(log);\n  }\n\n  ret = daemon->listen_fd;\n  if (NULL != log)\n  {\n    fprintf(log, \"[MHD_quiesce_daemon] listen_fd=%p (socket=%lld), was_quiesced=%d, options=0x%08x\\n\",\n            (void *)(uintptr_t)daemon->listen_fd,\n            (long long) daemon->listen_fd,\n            (int) daemon->was_quiesced,\n            (unsigned int) daemon->options);\n    fflush(log);\n  }\n\n  if ((MHD_INVALID_SOCKET == ret)\n      || daemon->was_quiesced)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"[MHD_quiesce_daemon] early return: invalid socket or already quiesced\\n\");\n      fclose(log);\n    }\n    return MHD_INVALID_SOCKET;\n  }\n  if ( (0 == (daemon->options & (MHD_USE_ITC))) &&\n       MHD_D_IS_USING_THREADS_ (daemon) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Using MHD_quiesce_daemon in this mode \" \\\n                 \"requires MHD_USE_ITC.\\n\"));\n#endif\n    if (NULL != log)\n    {\n      fprintf(log, \"[MHD_quiesce_daemon] missing MHD_USE_ITC while using threads - returning invalid socket\\n\");\n      fclose(log);\n    }\n    return MHD_INVALID_SOCKET;\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (NULL != daemon->worker_pool)\n    for (i = 0; i < daemon->worker_pool_size; i++)\n    {\n      daemon->worker_pool[i].was_quiesced = true;\n      if (NULL != log)\n      {\n        fprintf(log, \"[MHD_quiesce_daemon] worker %u: set was_quiesced=true, itc=%p, epoll_fd=%d, listen_socket_in_epoll=%d\\n\",\n                i,\n                (void *) (uintptr_t) daemon->worker_pool[i].itc,\n                (int) daemon->worker_pool[i].epoll_fd,\n                (int) daemon->worker_pool[i].listen_socket_in_epoll);\n        fflush(log);\n      }\n#ifdef EPOLL_SUPPORT\n      if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n          (-1 != daemon->worker_pool[i].epoll_fd) &&\n          (daemon->worker_pool[i].listen_socket_in_epoll) )\n      {\n        if (0 != epoll_ctl (daemon->worker_pool[i].epoll_fd,\n                            EPOLL_CTL_DEL,\n                            ret,\n                            NULL))\n        {\n          if (NULL != log)\n          {\n            fprintf(log, \"[MHD_quiesce_daemon] epoll_ctl DEL failed for worker %u (epoll_fd=%d)\\n\",\n                    i, (int) daemon->worker_pool[i].epoll_fd);\n            fclose(log);\n          }\n          MHD_PANIC (_ (\"Failed to remove listen FD from epoll set.\\n\"));\n        }\n        daemon->worker_pool[i].listen_socket_in_epoll = false;\n      }\n      else\n#endif\n      if (MHD_ITC_IS_VALID_ (daemon->worker_pool[i].itc))\n      {\n        /* Log the call to MHD_itc_activate_ including the message pointer and\n           the fact that we are using the literal \"q\" here. This helps to\n           reproduce the scenario where a non-const parameter would be\n           passed a string literal. */\n        if (NULL != log)\n        {\n          fprintf(log, \"[MHD_quiesce_daemon] calling MHD_itc_activate_ for worker %u: itc=%p, msg=%p (\\\"q\\\")\\n\",\n                  i,\n                  (void *) (uintptr_t) daemon->worker_pool[i].itc,\n                  (void *) \"q\");\n          fflush(log);\n        }\n        if (! MHD_itc_activate_ (daemon->worker_pool[i].itc, \"q\"))\n        {\n          if (NULL != log)\n          {\n            fprintf(log, \"[MHD_quiesce_daemon] MHD_itc_activate_ returned FALSE for worker %u\\n\", i);\n            fclose(log);\n          }\n          MHD_PANIC (_ (\"Failed to signal quiesce via inter-thread \" \\\n                        \"communication channel.\\n\"));\n        }\n        else\n        {\n          if (NULL != log)\n          {\n            fprintf(log, \"[MHD_quiesce_daemon] MHD_itc_activate_ returned TRUE for worker %u\\n\", i);\n            fflush(log);\n          }\n        }\n      }\n    }\n#endif\n  daemon->was_quiesced = true;\n  if (NULL != log)\n  {\n    fprintf(log, \"[MHD_quiesce_daemon] set daemon->was_quiesced = true\\n\");\n    fflush(log);\n  }\n#ifdef EPOLL_SUPPORT\n  if (MHD_D_IS_USING_EPOLL_ (daemon) &&\n      (-1 != daemon->epoll_fd) &&\n      (daemon->listen_socket_in_epoll) )\n  {\n    if ( (0 != epoll_ctl (daemon->epoll_fd,\n                          EPOLL_CTL_DEL,\n                          ret,\n                          NULL)) &&\n         (ENOENT != errno) )   /* ENOENT can happen due to race with\n                                  #MHD_epoll() */\n    {\n      if (NULL != log)\n      {\n        fprintf(log, \"[MHD_quiesce_daemon] epoll_ctl DEL failed on daemon epoll_fd=%d, errno=%d\\n\",\n                (int) daemon->epoll_fd, errno);\n        fclose(log);\n      }\n      MHD_PANIC (\"Failed to remove listen FD from epoll set.\\n\");\n    }\n    daemon->listen_socket_in_epoll = false;\n  }\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"q\")) )\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"[MHD_quiesce_daemon] final MHD_itc_activate_ call failed: itc=%p, msg=%p (\\\"q\\\")\\n\",\n              (void *) (uintptr_t) daemon->itc,\n              (void *) \"q\");\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"failed to signal quiesce via inter-thread \" \\\n                  \"communication channel.\\n\"));\n  }\n\n  if (NULL != log)\n  {\n    fprintf(log, \"[MHD_quiesce_daemon] returning socket=%lld (ret=%p)\\n\",\n            (long long) ret, (void *)(uintptr_t) ret);\n    fclose(log);\n  }\n  return ret;\n}\n"
}