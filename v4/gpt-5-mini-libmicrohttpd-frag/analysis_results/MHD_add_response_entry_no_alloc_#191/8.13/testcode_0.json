{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'header' is declared as 'char *header' but within MHD_add_response_entry_no_alloc_ the function does not modify the characters pointed to by header (it only stores the pointer in hdr->header). Under MISRA C 2023 Rule 8.13 this pointer should be const-qualified (e.g. 'const char *header'), and the corresponding struct member should also be const if the intent is read-only. As written, the non-const pointer violates R.8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_entry_no_alloc_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_entry_no_alloc_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_entry_no_alloc_ with it.\n  - Your function must have the exact same signature as MHD_add_response_entry_no_alloc_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_entry_no_alloc_ to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_entry_no_alloc_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_entry_no_alloc_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_entry_no_alloc_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n  FILE *log = NULL;\n\n  /* Open log file for appending; best-effort only. */\n  log = fopen(\"/tmp/logs/665.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"ENTER MHD_add_response_entry_no_alloc_: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n              (void *) response,\n              (int) kind,\n              (void *) header,\n              header_len,\n              (void *) content,\n              content_len);\n\n      /* Dump up to the first 64 bytes of header/content for inspection (printable chars, '.' otherwise). */\n      if (header != NULL && header_len > 0)\n        {\n          size_t dump_len = (header_len < 64) ? header_len : 64;\n          fprintf(log, \"header first %zu bytes: '\", dump_len);\n          for (size_t i = 0; i < dump_len; ++i)\n            {\n              unsigned char c = (unsigned char) header[i];\n              fputc((c >= 32 && c < 127) ? c : '.', log);\n            }\n          fprintf(log, \"'\\n\");\n        }\n\n      if (content != NULL && content_len > 0)\n        {\n          size_t dump_len = (content_len < 64) ? content_len : 64;\n          fprintf(log, \"content first %zu bytes: '\", dump_len);\n          for (size_t i = 0; i < dump_len; ++i)\n            {\n              unsigned char c = (unsigned char) content[i];\n              fputc((c >= 32 && c < 127) ? c : '.', log);\n            }\n          fprintf(log, \"'\\n\");\n        }\n\n      fflush(log);\n    }\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    {\n      if (log)\n        {\n          fprintf(log, \"MHD_calloc_ returned NULL (allocation failure)\\n\");\n          fclose(log);\n        }\n      return false;\n    }\n\n  /* Preserve original assignments exactly. */\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n\n  if (log)\n    {\n      fprintf(log, \"allocated hdr=%p; hdr->header=%p hdr->header_size=%zu hdr->value=%p hdr->value_size=%zu hdr->kind=%d\\n\",\n              (void *) hdr,\n              (void *) hdr->header,\n              hdr->header_size,\n              (void *) hdr->value,\n              hdr->value_size,\n              (int) hdr->kind);\n      fflush(log);\n    }\n\n  _MHD_insert_header_last (response, hdr);\n\n  if (log)\n    {\n      fprintf(log, \"_MHD_insert_header_last called for hdr=%p; exiting true\\n\", (void *) hdr);\n      fclose(log);\n    }\n\n  return true; /* Success exit point */\n}\n"
}