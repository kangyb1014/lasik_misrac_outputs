{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf pool->memory is an array of pool->size bytes but pool->end is not constrained to be \u2264 pool->size, the pointer returned can point into memory beyond the actual array. Example: pool->size == 50, pool->pos == 40, pool->end == 90 and asize == 20 (so asize <= pool->end - pool->pos holds and the function proceeds). The code sets ret = &pool->memory[40] and returns it; a subsequent call such as memcpy(ret, src, 20) would write bytes at indices 40..59, but valid indices are only 0..49, so accesses 50..59 are out-of-bounds. Therefore Rule 21.17 can be violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_allocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/583.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_allocate:\n```c\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n    return NULL; /* size too close to SIZE_MAX */\n  if (asize > pool->end - pool->pos)\n    return NULL;\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_allocate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_allocate with it.\n  - Your function must have the exact same signature as MHD_pool_allocate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_allocate to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_allocate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_allocate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_allocate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  /* Preserve original assertions */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  /* Logging: entry and input state */\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_allocate ENTER: pool=%p size=%zu from_end=%d\\n\",\n              (void *)pool, size, (int)from_end);\n      if (pool)\n      {\n        fprintf(f, \"  pool->memory=%p pool->size=%zu pool->pos=%zu pool->end=%zu\\n\",\n                (void *)pool->memory, pool->size, pool->pos, pool->end);\n      }\n      fclose(f);\n    }\n  }\n\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  asize overflow/too large: size=%zu asize=%zu -> RETURN NULL\\n\", size, asize);\n      fclose(f);\n    }\n    return NULL; /* size too close to SIZE_MAX */\n  }\n\n  if (asize > pool->end - pool->pos)\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"  not enough space: asize=%zu available=%zu -> RETURN NULL\\n\",\n              asize, (size_t)(pool->end - pool->pos));\n      fclose(f);\n    }\n    return NULL;\n  }\n\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n\n    /* Log the chosen branch and state after allocation from end */\n    {\n      FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n      if (f)\n      {\n        size_t ret_offset = (size_t)((char *)ret - (char *)pool->memory);\n        fprintf(f, \"  branch=from_end ret=%p ret_offset=%zu asize=%zu new_end=%zu\\n\",\n                ret, ret_offset, asize, pool->end);\n        /* Check for potential out-of-bounds relative to pool->size */\n        if (ret_offset + size > pool->size)\n          fprintf(f, \"  WARNING: requested write bytes [%zu .. %zu] exceed pool->size=%zu (possible OOB)\\n\",\n                  ret_offset, ret_offset + size - 1, pool->size);\n        fclose(f);\n      }\n    }\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n\n    /* Log the chosen branch and state after allocation from front */\n    {\n      FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n      if (f)\n      {\n        size_t ret_offset = (size_t)((char *)ret - (char *)pool->memory);\n        fprintf(f, \"  branch=from_front ret=%p ret_offset=%zu asize=%zu new_pos=%zu\\n\",\n                ret, ret_offset, asize, pool->pos);\n        /* Check for potential out-of-bounds relative to pool->size */\n        if (ret_offset + size > pool->size)\n          fprintf(f, \"  WARNING: requested write bytes [%zu .. %zu] exceed pool->size=%zu (possible OOB)\\n\",\n                  ret_offset, ret_offset + size - 1, pool->size);\n        fclose(f);\n      }\n    }\n  }\n\n  _MHD_UNPOISON_MEMORY (ret, size);\n\n  /* Final log of return value */\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_pool_allocate EXIT: ret=%p size=%zu asize=%zu\\n\\n\",\n              ret, size, asize);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n"
}