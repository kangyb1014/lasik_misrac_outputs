{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of callback:\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)",
    "  memcpy (buf, param->response_data + pos, size_to_copy);",
    "  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;"
  ],
  "explanation": "The MISRA C 2023 Rule 8.13 concerns pointer types that could be const-qualified. The fragments selected are the likely locations where const-qualification might be missing: the callback parameter carrying caller data (cls) is declared as void * and is immediately cast to a non-const struct pointer, and the memcpy usage reads from a member of that struct. These warrant inspection to determine whether the pointed-to data should be const.\n\nOther parts of the function do not relate to pointer const-qualification and therefore do not need investigation under Rule 8.13: the numeric parameters and local non-pointer variables (pos, buf_size, size_to_copy) are not pointer types; the bounds checks and arithmetic (if (pos >= param->response_size), the computation of size_to_copy) are logic/size concerns, not const-qualification issues; the destination buffer buf is intentionally non-const because the function writes into it (memcpy destination); the return-value handling and casts to ssize_t are numeric/return semantics and not about pointer constness; comments and pseudo-code are not actual code to be checked. These other fragments therefore do not require further investigation for Rule 8.13."
}