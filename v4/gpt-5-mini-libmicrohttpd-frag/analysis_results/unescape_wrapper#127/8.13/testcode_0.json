{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct MHD_Connection *connection' (and/or its member 'daemon' pointer) is used only for reading (connection->daemon->client_discipline) so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Connection *connection' or 'const struct daemon *daemon') rather than a non-const pointer. As written, the non-const pointer is unnecessary and thus violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified unescape_wrapper code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of unescape_wrapper:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified unescape_wrapper code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original unescape_wrapper with it.\n  - Your function must have the exact same signature as unescape_wrapper.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call unescape_wrapper to check logs.\n  - Your function MUST preserve the original logic of unescape_wrapper as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, unescape_wrapper will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of unescape_wrapper as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* Logging probe: record entry and relevant state to help reproduce the\n     reported Rule 8.13 scenario. Appends to /tmp/logs/2735.txt. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2735.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER unescape_wrapper: cls=%p connection=%p val=%p\\n\", cls, (void *)connection, (void *)val);\n      if (connection)\n      {\n        fprintf(log, \" connection->daemon=%p\\n\", (void *)connection->daemon);\n        if (connection->daemon)\n        {\n          /* client_discipline is printed as a long; cast to long for portability */\n          fprintf(log, \" connection->daemon->client_discipline=%ld\\n\", (long) connection->daemon->client_discipline);\n        }\n        else\n        {\n          fprintf(log, \" connection->daemon is NULL\\n\");\n        }\n      }\n      if (val)\n      {\n        /* Print a truncated, safe representation of val (first 256 bytes). */\n        size_t i;\n        fprintf(log, \" val (first 256 bytes): \\\"\");\n        for (i = 0; i < 256 && val[i] != '\\0'; ++i)\n        {\n          unsigned char c = (unsigned char) val[i];\n          if (c >= 32 && c <= 126)\n            fputc(c, log);\n          else\n            fprintf(log, \"\\\\x%02x\", c);\n        }\n        fprintf(log, \"\\\"\\n\");\n      }\n      fclose(log);\n    }\n  }\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n  {\n    res = MHD_str_pct_decode_in_place_strict_ (val);\n\n    /* Log that we took the strict path and the resulting size. */\n    {\n      FILE *log = fopen(\"/tmp/logs/2735.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"PATH: strict; result=%zu\\n\", res);\n        fclose(log);\n      }\n    }\n\n    return res;\n  }\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n\n  /* Log that we took the lenient path, the resulting size and the broken flag. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2735.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"PATH: lenient; result=%zu broken=%s\\n\", res, broken ? \"true\" : \"false\");\n      fclose(log);\n    }\n  }\n\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n"
}