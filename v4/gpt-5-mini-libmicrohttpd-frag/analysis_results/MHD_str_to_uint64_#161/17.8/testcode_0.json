{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'str++' increments the function parameter 'str' (the pointer itself). MISRA C 2023 Rule 17.8 forbids modifying pointer parameters \u2014 the pointed-to object may be changed but not the pointer parameter. This is a violation; use a local iterator (e.g. 'const char *p = str;') and increment that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_to_uint64_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4532.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_:\n```c\nsize_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  const char *const start = str;\n  uint64_t res;\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  do\n  {\n    const int digit = (unsigned char) (*str) - '0';\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    str++;\n  } while (isasciidigit (*str));\n\n  *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_to_uint64_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_to_uint64_ with it.\n  - Your function must have the exact same signature as MHD_str_to_uint64_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_to_uint64_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_to_uint64_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_to_uint64_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_to_uint64_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_str_to_uint64_ (const char *str,\n                    uint64_t *out_val)\n{\n  /* Local forward declarations for logging functions to avoid adding headers. */\n  typedef struct FILE FILE;\n  extern FILE *fopen (const char *path, const char *mode);\n  extern int fprintf (FILE *stream, const char *format, ...);\n  extern int fclose (FILE *stream);\n\n  const char *const start = str;\n  uint64_t res;\n  FILE *log = fopen(\"/tmp/logs/4532.txt\", \"a\");\n\n  if (log)\n  {\n    (void) fprintf(log, \"ENTER: MHD_str_to_uint64_(str=%p, out_val=%p)\\n\", (void *) str, (void *) out_val);\n  }\n\n  if (! str || ! out_val || ! isasciidigit (str[0]))\n  {\n    if (log)\n    {\n      (void) fprintf(log, \"EARLY RETURN: invalid args: str=%p, out_val=%p, first_char=%c (0x%02x)\\n\",\n                     (void *) str, (void *) out_val,\n                     (str && isasciidigit(str[0])) ? str[0] : (str ? str[0] : '\\0'),\n                     (unsigned int) (str ? (unsigned char) str[0] : 0));\n      (void) fclose(log);\n    }\n    return 0;\n  }\n\n  res = 0;\n  {\n    unsigned int iter = 0u;\n    do\n    {\n      const int digit = (unsigned char) (*str) - '0';\n\n      if (log)\n      {\n        (void) fprintf(log, \"ITER %u: ptr=%p, char='%c' (0x%02x), digit=%d, res(before)=%llu\\n\",\n                       (unsigned) iter, (void *) str,\n                       (*str) ? *str : '?', (unsigned int) (unsigned char) (*str),\n                       digit, (unsigned long long) res);\n      }\n\n      if ( (res > (UINT64_MAX / 10)) ||\n           ( (res == (UINT64_MAX / 10)) &&\n             ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      {\n        if (log)\n        {\n          (void) fprintf(log, \"OVERFLOW CONDITION at ITER %u: res=%llu, digit=%d\\n\",\n                         (unsigned) iter, (unsigned long long) res, digit);\n          (void) fclose(log);\n        }\n        return 0;\n      }\n\n      /* preserve original behavior: update res, then increment the parameter pointer */\n      res *= 10;\n      res += (unsigned int) digit;\n\n      if (log)\n      {\n        (void) fprintf(log, \"ITER %u AFTER: res(after)=%llu -- about to increment pointer parameter 'str' (was %p)\\n\",\n                       (unsigned) iter, (unsigned long long) res, (void *) str);\n      }\n\n      /* This is the operation reported as the violation: it modifies the pointer parameter. */\n      str++;\n\n      if (log)\n      {\n        (void) fprintf(log, \"ITER %u AFTER INC: str now=%p, next_char='%c' (0x%02x)\\n\",\n                       (unsigned) iter, (void *) str,\n                       (*str) ? *str : '?', (unsigned int) (unsigned char) (*str));\n      }\n\n      ++iter;\n    } while (isasciidigit (*str));\n  }\n\n  *out_val = res;\n\n  if (log)\n  {\n    size_t len = (size_t) (str - start);\n    (void) fprintf(log, \"EXIT: setting *out_val=%llu, length=%llu (str=%p, start=%p)\\n\",\n                   (unsigned long long) res, (unsigned long long) len,\n                   (void *) str, (void *) start);\n    (void) fclose(log);\n  }\n\n  return (size_t) (str - start);\n}\n"
}