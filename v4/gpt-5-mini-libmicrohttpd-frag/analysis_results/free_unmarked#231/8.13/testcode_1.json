{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the struct member pp->content_transfer_encoding is declared as a non-const pointer (e.g. char *content_transfer_encoding) but the object it points to is only read (not modified) throughout the program, then the pointer should be const-qualified (e.g. const char *). In that situation Rule 8.13 is violated because the pointer could and should point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified free_unmarked code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of free_unmarked:\n```c\nstatic void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    free (pp->content_name);\n    pp->content_name = NULL;\n  }\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    free (pp->content_type);\n    pp->content_type = NULL;\n  }\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n  }\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified free_unmarked code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original free_unmarked with it.\n  - Your function must have the exact same signature as free_unmarked.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call free_unmarked to check logs.\n  - Your function MUST preserve the original logic of free_unmarked as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, free_unmarked will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of free_unmarked as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nfree_unmarked (struct MHD_PostProcessor *pp)\n{\n  /* Open log in append mode. If opening fails, continue without logging. */\n  FILE *log = fopen(\"/tmp/logs/2875.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER free_unmarked: pp=%p\\n\", (void *)pp);\n    if (pp)\n    {\n      fprintf(log, \"  state before free: content_name=%p, content_type=%p, content_filename=%p, content_transfer_encoding=%p, have=0x%X\\n\",\n              (void *)pp->content_name,\n              (void *)pp->content_type,\n              (void *)pp->content_filename,\n              (void *)pp->content_transfer_encoding,\n              (unsigned)pp->have);\n    }\n  }\n\n  if ( (NULL != pp->content_name) &&\n       (0 == (pp->have & NE_content_name)) )\n  {\n    if (log)\n      fprintf(log, \"  branch: freeing content_name (ptr=%p) because (NULL != content_name) && (0 == (have & NE_content_name))\\n\",\n              (void *)pp->content_name);\n    free (pp->content_name);\n    pp->content_name = NULL;\n    if (log)\n      fprintf(log, \"  action: content_name freed and set to NULL\\n\");\n  }\n  if ( (NULL != pp->content_type) &&\n       (0 == (pp->have & NE_content_type)) )\n  {\n    if (log)\n      fprintf(log, \"  branch: freeing content_type (ptr=%p) because (NULL != content_type) && (0 == (have & NE_content_type))\\n\",\n              (void *)pp->content_type);\n    free (pp->content_type);\n    pp->content_type = NULL;\n    if (log)\n      fprintf(log, \"  action: content_type freed and set to NULL\\n\");\n  }\n  if ( (NULL != pp->content_filename) &&\n       (0 == (pp->have & NE_content_filename)) )\n  {\n    if (log)\n      fprintf(log, \"  branch: freeing content_filename (ptr=%p) because (NULL != content_filename) && (0 == (have & NE_content_filename))\\n\",\n              (void *)pp->content_filename);\n    free (pp->content_filename);\n    pp->content_filename = NULL;\n    if (log)\n      fprintf(log, \"  action: content_filename freed and set to NULL\\n\");\n  }\n  if ( (NULL != pp->content_transfer_encoding) &&\n       (0 == (pp->have & NE_content_transfer_encoding)) )\n  {\n    if (log)\n      fprintf(log, \"  branch: freeing content_transfer_encoding (ptr=%p) because (NULL != content_transfer_encoding) && (0 == (have & NE_content_transfer_encoding))\\n\",\n              (void *)pp->content_transfer_encoding);\n    free (pp->content_transfer_encoding);\n    pp->content_transfer_encoding = NULL;\n    if (log)\n      fprintf(log, \"  action: content_transfer_encoding freed and set to NULL\\n\");\n  }\n\n  if (log)\n  {\n    if (pp)\n    {\n      fprintf(log, \"  state after free: content_name=%p, content_type=%p, content_filename=%p, content_transfer_encoding=%p, have=0x%X\\n\",\n              (void *)pp->content_name,\n              (void *)pp->content_type,\n              (void *)pp->content_filename,\n              (void *)pp->content_transfer_encoding,\n              (unsigned)pp->have);\n    }\n    fprintf(log, \"EXIT free_unmarked: pp=%p\\n\\n\", (void *)pp);\n    fclose(log);\n  }\n}\n"
}