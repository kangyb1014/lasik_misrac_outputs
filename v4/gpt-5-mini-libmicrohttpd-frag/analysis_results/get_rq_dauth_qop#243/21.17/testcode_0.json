{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a pointer plus an explicit length to a helper named MHD_str_equal_caseless_s_bin_n_. If that helper internally uses unbounded <string.h> functions (for example strlen, strcmp, strcasecmp) on qop_param->value.str which may not be NUL-terminated, those functions will read past the object\u2019s bounds. Example: qop_param->value.str points to a 2-byte non-terminated buffer \"au\" with value.len==2; if the helper does strlen(qop_param->value.str) or calls strcasecmp(MHD_TOKEN_AUTH_, qop_param->value.str) it will access bytes beyond the buffer causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/943.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_dauth_qop code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_dauth_qop with it.\n  - Your function must have the exact same signature as get_rq_dauth_qop.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_dauth_qop to check logs.\n  - Your function MUST preserve the original logic of get_rq_dauth_qop as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_dauth_qop will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  FILE *f = fopen(\"/tmp/logs/943.txt\", \"a\");\n  if (f) {\n    fprintf(f, \"ENTER get_rq_dauth_qop: qop_param=%p\\n\", (void *)qop_param);\n  }\n\n  if (qop_param) {\n    if (f) {\n      fprintf(f, \" qop_param->quoted=%d len=%zu str=%p\\n\",\n              (int)qop_param->quoted,\n              (size_t)qop_param->value.len,\n              (void *)qop_param->value.str);\n      if (qop_param->value.str) {\n        size_t max = qop_param->value.len;\n        if (max > 1024) /* avoid extremely large logs */\n          max = 1024;\n        fprintf(f, \" value bytes (hex, up to %zu):\", max);\n        for (size_t i = 0; i < max; ++i)\n          fprintf(f, \" %02x\", (unsigned char)qop_param->value.str[i]);\n        if (qop_param->value.len > max)\n          fprintf(f, \" ...\");\n        fprintf(f, \"\\n\");\n      }\n    }\n  }\n\n  if (NULL == qop_param->value.str)\n  {\n    if (f) fprintf(f, \"-> returning MHD_DIGEST_AUTH_QOP_NONE\\n\");\n    if (f) fclose(f);\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    if (f) fprintf(f, \" calling MHD_str_equal_caseless_quoted_s_bin_n with quoted token AUTH\\n\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                               qop_param->value.len,\n                                               MHD_TOKEN_AUTH_))\n    {\n      if (f) fprintf(f, \"  matched AUTH -> returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n      if (f) fclose(f);\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n    if (f) fprintf(f, \" calling MHD_str_equal_caseless_quoted_s_bin_n with quoted token AUTH_INT\\n\");\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str,\n                                               qop_param->value.len,\n                                               MHD_TOKEN_AUTH_INT_))\n    {\n      if (f) fprintf(f, \"  matched AUTH_INT -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n      if (f) fclose(f);\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    if (f) fprintf(f, \" calling MHD_str_equal_caseless_s_bin_n_ with token AUTH\\n\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_,\n                                         qop_param->value.str,\n                                         qop_param->value.len))\n    {\n      if (f) fprintf(f, \"  matched AUTH -> returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n      if (f) fclose(f);\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n    if (f) fprintf(f, \" calling MHD_str_equal_caseless_s_bin_n_ with token AUTH_INT\\n\");\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_,\n                                         qop_param->value.str,\n                                         qop_param->value.len))\n    {\n      if (f) fprintf(f, \"  matched AUTH_INT -> returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n      if (f) fclose(f);\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  /* No know QOP has been detected */\n  if (f) fprintf(f, \" No known QOP detected -> returning MHD_DIGEST_AUTH_QOP_INVALID\\n\");\n  if (f) fclose(f);\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}