{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes qop_param->value.str (from a const struct pointer) to a string-comparison routine, but the member is likely declared as char * (non-const). Since the string data are only examined (not modified) here, the pointer should be declared as pointing to a const-qualified type (const char *) to conform with MISRA C 2023 Rule 8.13. As written, the use indicates a missing const on the pointee type (violation). Remediation: change the member declaration to const char *str (or otherwise ensure the pointee type is const when it is not modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_dauth_qop code that contains useful probe functions that print useful logs to a file \"/tmp/logs/945.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_qop:\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_dauth_qop code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_dauth_qop with it.\n  - Your function must have the exact same signature as get_rq_dauth_qop.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_dauth_qop to check logs.\n  - Your function MUST preserve the original logic of get_rq_dauth_qop as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_dauth_qop will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_dauth_qop as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  FILE *log = NULL;\n\n  /* Try to ensure the log directory exists so the requested path can be used. */\n  /* Use system() as a pragmatic approach; if unavailable or fails, fopen will fall back. */\n  (void) system(\"mkdir -p /tmp/logs 2>/dev/null\");\n  log = fopen(\"/tmp/logs/945.txt\", \"a\");\n  if (log == NULL)\n  {\n    /* Fallback to a local tmp file if requested path cannot be opened. */\n    log = fopen(\"/tmp/945_fallback_945.txt\", \"a\");\n  }\n\n  if (log)\n  {\n    fprintf(log, \"ENTER get_rq_dauth_qop: qop_param=%p\\n\", (const void *)qop_param);\n    if (qop_param)\n      fprintf(log, \"  value.str=%p len=%zu quoted=%d\\n\",\n              (const void *)qop_param->value.str,\n              (size_t)qop_param->value.len,\n              (int)qop_param->quoted);\n    else\n      fprintf(log, \"  qop_param is NULL\\n\");\n    fflush(log);\n  }\n\n  if (NULL == qop_param->value.str)\n  {\n    if (log)\n    {\n      fprintf(log, \"  branch: value.str is NULL -> MHD_DIGEST_AUTH_QOP_NONE\\n\");\n      fclose(log);\n    }\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  }\n\n  if (qop_param->quoted)\n  {\n    int eq1 = MHD_str_equal_caseless_quoted_s_bin_n(qop_param->value.str,\n                                                   qop_param->value.len,\n                                                   MHD_TOKEN_AUTH_);\n    if (log)\n      fprintf(log, \"  quoted branch: compare with MHD_TOKEN_AUTH_ -> %d\\n\", eq1);\n    if (eq1)\n    {\n      if (log)\n      {\n        fprintf(log, \"  returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int eq2 = MHD_str_equal_caseless_quoted_s_bin_n(qop_param->value.str,\n                                                   qop_param->value.len,\n                                                   MHD_TOKEN_AUTH_INT_);\n    if (log)\n      fprintf(log, \"  quoted branch: compare with MHD_TOKEN_AUTH_INT_ -> %d\\n\", eq2);\n    if (eq2)\n    {\n      if (log)\n      {\n        fprintf(log, \"  returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n  else\n  {\n    int eq1 = MHD_str_equal_caseless_s_bin_n_(MHD_TOKEN_AUTH_,\n                                              qop_param->value.str,\n                                              qop_param->value.len);\n    if (log)\n      fprintf(log, \"  unquoted branch: compare with MHD_TOKEN_AUTH_ -> %d\\n\", eq1);\n    if (eq1)\n    {\n      if (log)\n      {\n        fprintf(log, \"  returning MHD_DIGEST_AUTH_QOP_AUTH\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    }\n\n    int eq2 = MHD_str_equal_caseless_s_bin_n_(MHD_TOKEN_AUTH_INT_,\n                                              qop_param->value.str,\n                                              qop_param->value.len);\n    if (log)\n      fprintf(log, \"  unquoted branch: compare with MHD_TOKEN_AUTH_INT_ -> %d\\n\", eq2);\n    if (eq2)\n    {\n      if (log)\n      {\n        fprintf(log, \"  returning MHD_DIGEST_AUTH_QOP_AUTH_INT\\n\");\n        fclose(log);\n      }\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n    }\n  }\n\n  if (log)\n  {\n    fprintf(log, \"  No known QOP has been detected -> MHD_DIGEST_AUTH_QOP_INVALID\\n\");\n    fclose(log);\n  }\n\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n"
}