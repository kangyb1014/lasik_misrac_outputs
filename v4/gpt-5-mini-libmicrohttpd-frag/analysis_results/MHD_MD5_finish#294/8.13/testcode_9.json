{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: md5_transform is called with ctx->buffer via a non-const pointer. If the md5_transform prototype accepts a non-const pointer (e.g. void md5_transform(uint32_t H[], uint32_t block[])) but does not modify the buffer contents, this violates MISRA C 2023 Rule 8.13 because the pointer parameter should be const-qualified (e.g. const uint32_t block[]). If, however, md5_transform intentionally modifies the buffer (for example to perform in-place endian conversion), then a non-const parameter is appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4445.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_finish:\n```c\nvoid\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n    /* Process the full block. */\n    md5_transform (ctx->H, ctx->buffer);\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n  /* Process the full final block. */\n  md5_transform (ctx->H, ctx->buffer);\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_MD5_finish code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_MD5_finish with it.\n  - Your function must have the exact same signature as MHD_MD5_finish.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_MD5_finish to check logs.\n  - Your function MUST preserve the original logic of MHD_MD5_finish as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_MD5_finish will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_MD5_finish as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_MD5_finish (struct Md5Ctx *ctx,\n                uint8_t digest[MD5_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  FILE *logf = NULL;\n\n  /* Open log file to capture control flow and state for investigation. */\n  logf = fopen(\"/tmp/logs/4445.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"ENTER MHD_MD5_finish: ctx=%p, buffer=%p\\n\",\n            (void *)ctx, (void *)ctx->buffer);\n  }\n\n  /* Memorise the number of processed bits.\n     The padding and other data added here during the postprocessing must\n     not change the amount of hashed data. */\n  num_bits = ctx->count << 3;\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"num_bits=%llu, bytes_have(before pad)=%u\\n\",\n            (unsigned long long) num_bits, bytes_have);\n    /* Log first 16 bytes of buffer for context (or up to block size). */\n    fprintf(logf, \"buffer[0..15] before pad:\");\n    for (unsigned int i = 0u; i < 16u && i < MD5_BLOCK_SIZE; ++i)\n      fprintf(logf, \" %02X\", ((uint8_t *)ctx->buffer)[i]);\n    fprintf(logf, \"\\n\");\n    fflush(logf);\n  }\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See RFC 1321, Clauses 3.1 and 3.2 (steps 1 and 2). */\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of the first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space for one byte at least (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"Wrote 0x80 at offset %u, bytes_have(after)=%u\\n\",\n            (unsigned int)(bytes_have - 1u), bytes_have);\n    fprintf(logf, \"buffer[0..15] after writing 0x80:\");\n    for (unsigned int i = 0u; i < 16u && i < MD5_BLOCK_SIZE; ++i)\n      fprintf(logf, \" %02X\", ((uint8_t *)ctx->buffer)[i]);\n    fprintf(logf, \"\\n\");\n    fflush(logf);\n  }\n\n  if (MD5_BLOCK_SIZE - bytes_have < MD5_SIZE_OF_LEN_ADD)\n  {   /* No space in the current block to put the total length of message.\n         Pad the current block with zeros and process it. */\n    if (bytes_have < MD5_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              MD5_BLOCK_SIZE - bytes_have);\n\n    /* Process the full block. */\n    if (NULL != logf)\n    {\n      fprintf(logf, \"About to call md5_transform (first time) with ctx->buffer=%p\\n\",\n              (void *)ctx->buffer);\n      /* Capture buffer contents before transform to detect whether md5_transform modifies it. */\n      uint8_t before[MD5_BLOCK_SIZE];\n      memcpy(before, (uint8_t *)ctx->buffer, MD5_BLOCK_SIZE);\n      fflush(logf);\n\n      md5_transform (ctx->H, ctx->buffer);\n\n      uint8_t after[MD5_BLOCK_SIZE];\n      memcpy(after, (uint8_t *)ctx->buffer, MD5_BLOCK_SIZE);\n\n      /* Compare and log any differences. */\n      int diff_found = 0;\n      for (unsigned int i = 0u; i < MD5_BLOCK_SIZE; ++i)\n      {\n        if (before[i] != after[i])\n        {\n          if (!diff_found)\n          {\n            fprintf(logf, \"md5_transform MODIFIED buffer: differences at offsets:\\n\");\n            diff_found = 1;\n          }\n          fprintf(logf, \" offset %u: before=%02X after=%02X\\n\", i, before[i], after[i]);\n        }\n      }\n      if (!diff_found)\n        fprintf(logf, \"md5_transform did NOT modify buffer\\n\");\n\n      fflush(logf);\n    }\n    else\n    {\n      md5_transform (ctx->H, ctx->buffer);\n    }\n\n    /* Start the new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          MD5_BLOCK_SIZE - MD5_SIZE_OF_LEN_ADD - bytes_have);\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"After padding zeros, buffer[0..15]:\");\n    for (unsigned int i = 0u; i < 16u && i < MD5_BLOCK_SIZE; ++i)\n      fprintf(logf, \" %02X\", ((uint8_t *)ctx->buffer)[i]);\n    fprintf(logf, \"\\n\");\n    fflush(logf);\n  }\n\n  /* Put the number of bits in processed data as little-endian value.\n     See RFC 1321, clauses 2 and 3.2 (step 2). */\n  _MHD_PUT_64BIT_LE_SAFE (ctx->buffer + MD5_BLOCK_SIZE_WORDS - 2,\n                          num_bits);\n\n  /* Process the full final block. */\n  if (NULL != logf)\n  {\n    fprintf(logf, \"About to call md5_transform (second time) with ctx->buffer=%p\\n\",\n            (void *)ctx->buffer);\n    uint8_t before2[MD5_BLOCK_SIZE];\n    memcpy(before2, (uint8_t *)ctx->buffer, MD5_BLOCK_SIZE);\n    fflush(logf);\n\n    md5_transform (ctx->H, ctx->buffer);\n\n    uint8_t after2[MD5_BLOCK_SIZE];\n    memcpy(after2, (uint8_t *)ctx->buffer, MD5_BLOCK_SIZE);\n\n    int diff_found2 = 0;\n    for (unsigned int i = 0u; i < MD5_BLOCK_SIZE; ++i)\n    {\n      if (before2[i] != after2[i])\n      {\n        if (!diff_found2)\n        {\n          fprintf(logf, \"md5_transform (second) MODIFIED buffer: differences at offsets:\\n\");\n          diff_found2 = 1;\n        }\n        fprintf(logf, \" offset %u: before=%02X after=%02X\\n\", i, before2[i], after2[i]);\n      }\n    }\n    if (!diff_found2)\n      fprintf(logf, \"md5_transform (second) did NOT modify buffer\\n\");\n\n    fflush(logf);\n  }\n  else\n  {\n    md5_transform (ctx->H, ctx->buffer);\n  }\n\n  /* Put in LE mode the hash as the final digest.\n     See RFC 1321, clauses 2 and 3.5 (step 5). */\n#ifndef _MHD_PUT_32BIT_LE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[MD5_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_LE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_LE (alig_dgst + 3, ctx->H[3]);\n    /* Copy result to the unaligned destination address. */\n    memcpy (digest, alig_dgst, MD5_DIGEST_SIZE);\n\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Wrote aligned digest temporary then copied to digest=%p\\n\", (void *)digest);\n      fprintf(logf, \"H values: %08X %08X %08X %08X\\n\",\n              ctx->H[0], ctx->H[1], ctx->H[2], ctx->H[3]);\n      fflush(logf);\n    }\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_LE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_LE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_LE ((void *) (digest + 0 * MD5_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 1 * MD5_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 2 * MD5_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_LE ((void *) (digest + 3 * MD5_BYTES_IN_WORD), ctx->H[3]);\n\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Wrote digest directly to %p\\n\", (void *)digest);\n      fprintf(logf, \"H values: %08X %08X %08X %08X\\n\",\n              ctx->H[0], ctx->H[1], ctx->H[2], ctx->H[3]);\n      fflush(logf);\n    }\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_LE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Md5Ctx));\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"ctx zeroed and exiting MHD_MD5_finish\\n\");\n    fclose(logf);\n  }\n}\n"
}