{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the callee calc_userhash is declared to take non-const character pointers (e.g. char *username, char *realm) then this call violates Rule 8.13: the input pointers are const-qualified in the caller but are not declared const in the callee, so the pointer types are not const-qualified where possible. If, instead, calc_userhash is declared to take const char * for those parameters, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2415.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userhash:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userhash (&da,\n                   username,\n                   strlen (username),\n                   realm,\n                   strlen (realm),\n                   userhash_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_calc_userhash code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_calc_userhash with it.\n  - Your function must have the exact same signature as MHD_digest_auth_calc_userhash.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_calc_userhash to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_calc_userhash will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_calc_userhash as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *userhash_bin,\n                               size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  FILE *logf = NULL;\n\n  /* Try to ensure the log directory exists and open the log file. If mkdir\n     via system fails or is not available, fall back to attempting to open\n     directly; logging failures are non-fatal for preserving original\n     behavior. */\n  logf = fopen(\"/tmp/logs/2415.txt\", \"a\");\n  if (NULL == logf)\n    {\n      /* best-effort: try to create directory then reopen */\n      /* Use system() as a portable fallback; if system is unavailable or\n         fails, we'll continue without logs. */\n      (void) system(\"/bin/mkdir -p /tmp/logs 2>/dev/null\");\n      logf = fopen(\"/tmp/logs/2415.txt\", \"a\");\n    }\n\n  if (logf)\n    {\n      fprintf(logf, \"ENTER: MHD_digest_auth_calc_userhash algo3=%d username=%p realm=%p userhash_bin=%p bin_buf_size=%zu\\n\",\n              (int) algo3, (const void *) username, (const void *) realm,\n              userhash_bin, bin_buf_size);\n      fflush(logf);\n    }\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    {\n      if (logf)\n        {\n          fprintf(logf, \"EXIT: digest_init_one_time failed -> returning MHD_NO\\n\");\n          fflush(logf);\n          fclose(logf);\n        }\n      return MHD_NO;\n    }\n\n  if (logf)\n    {\n      size_t digest_size = digest_get_size (&da);\n      fprintf(logf, \"After init: digest_size=%zu bin_buf_size=%zu\\n\",\n              digest_size, bin_buf_size);\n      fflush(logf);\n    }\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    /* Compute lengths here as in original code; do not attempt to access\n       username/realm before this branch to avoid changing behavior. */\n    size_t username_len = username ? strlen (username) : 0;\n    size_t realm_len = realm ? strlen (realm) : 0;\n\n    if (logf)\n      {\n        fprintf(logf, \"Calling calc_userhash: username_len=%zu realm_len=%zu\\n\",\n                username_len, realm_len);\n        fflush(logf);\n      }\n\n    calc_userhash (&da,\n                   username,\n                   username_len,\n                   realm,\n                   realm_len,\n                   userhash_bin);\n\n    ret = MHD_YES;\n\n    if (logf)\n      {\n        fprintf(logf, \"Returned from calc_userhash -> provisional ret=MHD_YES\\n\");\n        fflush(logf);\n      }\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      {\n        if (logf)\n          {\n            fprintf(logf, \"digest_ext_error detected -> setting ret=MHD_NO\\n\");\n            fflush(logf);\n          }\n        ret = MHD_NO;\n      }\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n\n  digest_deinit (&da);\n\n  if (logf)\n    {\n      fprintf(logf, \"EXIT: final ret=%d\\n\", (int) ret);\n      fflush(logf);\n      fclose(logf);\n    }\n\n  return ret;\n}\n"
}