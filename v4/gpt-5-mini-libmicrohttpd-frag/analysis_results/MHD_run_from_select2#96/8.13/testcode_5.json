{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro/function MHD_D_IS_USING_THREADS_ is declared to take a non-const pointer (e.g. 'struct MHD_Daemon *daemon') but only reads fields from daemon, then it violates MISRA C 2023 Rule 8.13 \u2014 the parameter should be 'const struct MHD_Daemon *'. The fragment 'MHD_D_IS_USING_THREADS_(daemon)' therefore indicates a potential violation when the underlying declaration is non-const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run_from_select2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/995.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_run_from_select2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  if (MHD_D_IS_USING_POLL_ (daemon) ||\n      MHD_D_IS_USING_THREADS_ (daemon))\n    return MHD_NO;\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n    return MHD_NO;\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n    return MHD_NO;\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n    fd_setsize = (unsigned int) INT_MAX;\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    MHD_cleanup_connections (daemon);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    resume_suspended_connections (daemon);\n\n  return internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_run_from_select2 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_run_from_select2 with it.\n  - Your function must have the exact same signature as MHD_run_from_select2.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_run_from_select2 to check logs.\n  - Your function MUST preserve the original logic of MHD_run_from_select2 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_run_from_select2 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_run_from_select2 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_run_from_select2 (struct MHD_Daemon *daemon,\n                      const fd_set *read_fd_set,\n                      const fd_set *write_fd_set,\n                      const fd_set *except_fd_set,\n                      unsigned int fd_setsize)\n{\n  /* Simple logging probe to help reproduce/observe potential Rule 8.13\n     related behavior. Appends human-readable traces to /tmp/logs/995.txt. */\n  FILE *mhd_log = fopen(\"/tmp/logs/995.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"ENTER: MHD_run_from_select2 daemon=%p read=%p write=%p except=%p fd_setsize=%u\\n\",\n            (void *) daemon, (const void *) read_fd_set, (const void *) write_fd_set,\n            (const void *) except_fd_set, fd_setsize);\n  }\n\n  /* Evaluate macros once and log results to avoid multiple expansions. */\n  int using_poll = MHD_D_IS_USING_POLL_ (daemon);\n  int using_threads = MHD_D_IS_USING_THREADS_ (daemon);\n  if (mhd_log)\n    fprintf(mhd_log, \"MACROS: MHD_D_IS_USING_POLL_=%d MHD_D_IS_USING_THREADS_=%d\\n\",\n            using_poll, using_threads);\n\n  if (using_poll || using_threads)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"EARLY RETURN: using_poll=%d using_threads=%d -> MHD_NO\\n\",\n              using_poll, using_threads);\n    if (mhd_log)\n      fclose(mhd_log);\n    return MHD_NO;\n  }\n\n  if ((NULL == read_fd_set) || (NULL == write_fd_set))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"EARLY RETURN: read_fd_set==NULL || write_fd_set==NULL -> MHD_NO\\n\");\n    if (mhd_log)\n      fclose(mhd_log);\n    return MHD_NO;\n  }\n#ifdef HAVE_MESSAGES\n  if (NULL == except_fd_set)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"DEPRECATED WARNING: except_fd_set == NULL\\n\");\n    MHD_DLOG (daemon,\n              _ (\"MHD_run_from_select() called with except_fd_set \"\n                 \"set to NULL. Such behavior is deprecated.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  if (0 == fd_setsize)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"EARLY RETURN: fd_setsize == 0 -> MHD_NO\\n\");\n    if (mhd_log)\n      fclose(mhd_log);\n    return MHD_NO;\n  }\n  else if (((unsigned int) INT_MAX) < fd_setsize)\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"ADJUST: fd_setsize (%u) > INT_MAX -> clamp to INT_MAX\\n\", fd_setsize);\n    fd_setsize = (unsigned int) INT_MAX;\n  }\n#ifdef HAVE_MESSAGES\n  else if (daemon->fdset_size > ((int) fd_setsize))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"WARNING: provided fd_setsize (%u) < daemon->fdset_size (%d) daemon->fdset_size_set_by_app=%d\\n\",\n              fd_setsize, daemon->fdset_size, daemon->fdset_size_set_by_app);\n    if (daemon->fdset_size_set_by_app)\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than value set by MHD_OPTION_APP_FD_SETSIZE (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Use MHD_OPTION_APP_FD_SETSIZE with the correct value.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n    else\n    {\n      MHD_DLOG (daemon,\n                _ (\"%s() called with fd_setsize (%u) \" \\\n                   \"less than FD_SETSIZE used by MHD (%d). \" \\\n                   \"Some socket FDs may be not processed. \" \\\n                   \"Consider using MHD_OPTION_APP_FD_SETSIZE option.\\n\"),\n                \"MHD_run_from_select2\", fd_setsize, daemon->fdset_size);\n    }\n  }\n#endif /* HAVE_MESSAGES */\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n  if (((unsigned int) FD_SETSIZE) > fd_setsize)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"%s() called with fd_setsize (%u) \" \\\n                 \"less than fixed FD_SETSIZE value (%d) used on the \" \\\n                 \"platform.\\n\"),\n              \"MHD_run_from_select2\", fd_setsize, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n    if (mhd_log)\n      fprintf(mhd_log, \"EARLY RETURN: FD_SETSIZE (%d) > fd_setsize (%u) -> MHD_NO\\n\", (int) FD_SETSIZE, fd_setsize);\n    if (mhd_log)\n      fclose(mhd_log);\n    return MHD_NO;\n  }\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (MHD_D_IS_USING_EPOLL_ (daemon))\n  {\n#ifdef EPOLL_SUPPORT\n    if (mhd_log)\n      fprintf(mhd_log, \"BRANCH: EPOLL_SUPPORT active -> calling MHD_epoll\\n\");\n    enum MHD_Result ret = MHD_epoll (daemon,\n                                     0);\n\n    if (mhd_log)\n      fprintf(mhd_log, \"AFTER MHD_epoll: ret=%d\\n\", (int) ret);\n    MHD_cleanup_connections (daemon);\n    if (mhd_log)\n      fclose(mhd_log);\n    return ret;\n#else  /* ! EPOLL_SUPPORT */\n    if (mhd_log)\n      fprintf(mhd_log, \"EPOLL not supported -> MHD_NO\\n\");\n    if (mhd_log)\n      fclose(mhd_log);\n    return MHD_NO;\n#endif /* ! EPOLL_SUPPORT */\n  }\n\n  /* Resuming external connections when using an extern mainloop  */\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"ACTION: resume_suspended_connections (daemon) - options=0x%08x\\n\", daemon->options);\n    resume_suspended_connections (daemon);\n  }\n\n  if (mhd_log)\n    fprintf(mhd_log, \"CALL: internal_run_from_select with fd_setsize=%d\\n\", (int) fd_setsize);\n\n  enum MHD_Result final_ret = internal_run_from_select (daemon,\n                                   read_fd_set,\n                                   write_fd_set,\n                                   except_fd_set,\n                                   (int) fd_setsize);\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"EXIT: internal_run_from_select returned=%d\\n\", (int) final_ret);\n    fclose(mhd_log);\n  }\n\n  return final_ret;\n}\n"
}