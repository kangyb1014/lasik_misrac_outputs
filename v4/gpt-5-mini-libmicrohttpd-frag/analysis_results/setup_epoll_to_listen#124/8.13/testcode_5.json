{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns the daemon pointer (type: struct MHD_Daemon *) to event.data.ptr (type: void *). Rule 8.13 expects pointers to point to a const-qualified type when possible. Here the stored pointer is not const-qualified even though the daemon object is only used as a read-only marker in the epoll data; the epoll_event API exposes a non-const void * which forces storing a non-const pointer and thus violates the intent of 8.13 (unless an explicit, justified deviation is documented).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_epoll_to_listen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4365.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of setup_epoll_to_listen:\n```c\nstatic enum MHD_Result\nsetup_epoll_to_listen (struct MHD_Daemon *daemon)\n{\n  struct epoll_event event;\n  MHD_socket ls;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n  mhd_assert (0 == (daemon->options & MHD_USE_THREAD_PER_CONNECTION));\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) || \\\n               MHD_ITC_IS_VALID_ (daemon->itc) );\n  daemon->epoll_fd = setup_epoll_fd (daemon);\n  if (! MHD_D_IS_USING_THREADS_ (daemon)\n      && (0 != (daemon->options & MHD_USE_AUTO)))\n  {\n    /* Application requested \"MHD_USE_AUTO\", probably MHD_get_fdset() will be\n       used.\n       Make sure that epoll FD is suitable for fd_set.\n       Actually, MHD_get_fdset() is allowed for MHD_USE_EPOLL direct,\n       but most probably direct requirement for MHD_USE_EPOLL means that\n       epoll FD will be used directly. This logic is fuzzy, but better\n       than nothing with current MHD API. */\n    if (! MHD_D_DOES_SCKT_FIT_FDSET_ (daemon->epoll_fd, daemon))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"The epoll FD is too large to be used with fd_set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return MHD_NO;\n    }\n  }\n  if (-1 == daemon->epoll_fd)\n    return MHD_NO;\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (0 != (MHD_ALLOW_UPGRADE & daemon->options))\n  {\n    daemon->epoll_upgrade_fd = setup_epoll_fd (daemon);\n    if (MHD_INVALID_SOCKET == daemon->epoll_upgrade_fd)\n      return MHD_NO;\n  }\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = daemon;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        ls,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      return MHD_NO;\n    }\n    daemon->listen_socket_in_epoll = true;\n  }\n\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = _MHD_DROP_CONST (epoll_itc_marker);\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        MHD_itc_r_fd_ (daemon->itc),\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      return MHD_NO;\n    }\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified setup_epoll_to_listen code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original setup_epoll_to_listen with it.\n  - Your function must have the exact same signature as setup_epoll_to_listen.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call setup_epoll_to_listen to check logs.\n  - Your function MUST preserve the original logic of setup_epoll_to_listen as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, setup_epoll_to_listen will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of setup_epoll_to_listen as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nsetup_epoll_to_listen (struct MHD_Daemon *daemon)\n{\n  struct epoll_event event;\n  MHD_socket ls;\n  FILE *log = fopen(\"/tmp/logs/4365.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"setup_epoll_to_listen: entered with daemon=%p\\n\", (void *)daemon);\n    fflush(log);\n  }\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n  mhd_assert (0 == (daemon->options & MHD_USE_THREAD_PER_CONNECTION));\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) || \\\n               MHD_ITC_IS_VALID_ (daemon->itc) );\n\n  daemon->epoll_fd = setup_epoll_fd (daemon);\n  if (log)\n  {\n    fprintf(log, \"setup_epoll_to_listen: setup_epoll_fd returned epoll_fd=%lld\\n\",\n            (long long) daemon->epoll_fd);\n    fflush(log);\n  }\n\n  if (! MHD_D_IS_USING_THREADS_ (daemon)\n      && (0 != (daemon->options & MHD_USE_AUTO)))\n  {\n    /* Application requested \"MHD_USE_AUTO\", probably MHD_get_fdset() will be\n       used.\n       Make sure that epoll FD is suitable for fd_set.\n       Actually, MHD_get_fdset() is allowed for MHD_USE_EPOLL direct,\n       but most probably direct requirement for MHD_USE_EPOLL means that\n       epoll FD will be used directly. This logic is fuzzy, but better\n       than nothing with current MHD API. */\n    if (! MHD_D_DOES_SCKT_FIT_FDSET_ (daemon->epoll_fd, daemon))\n    {\n      if (log)\n      {\n        fprintf(log, \"setup_epoll_to_listen: epoll_fd %lld too large for fd_set\\n\",\n                (long long) daemon->epoll_fd);\n        fflush(log);\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"The epoll FD is too large to be used with fd_set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (log)\n        fclose(log);\n      return MHD_NO;\n    }\n  }\n  if (-1 == daemon->epoll_fd)\n  {\n    if (log)\n    {\n      fprintf(log, \"setup_epoll_to_listen: epoll_fd == -1, aborting\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (0 != (MHD_ALLOW_UPGRADE & daemon->options))\n  {\n    daemon->epoll_upgrade_fd = setup_epoll_fd (daemon);\n    if (log)\n    {\n      fprintf(log, \"setup_epoll_to_listen: setup_epoll_fd for upgrade returned epoll_upgrade_fd=%lld\\n\",\n              (long long) daemon->epoll_upgrade_fd);\n      fflush(log);\n    }\n    if (MHD_INVALID_SOCKET == daemon->epoll_upgrade_fd)\n    {\n      if (log)\n        fclose(log);\n      return MHD_NO;\n    }\n  }\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = daemon;\n    if (log)\n    {\n      fprintf(log, \"setup_epoll_to_listen: adding listen fd=%lld to epoll_fd=%lld, event.events=0x%x, event.data.ptr=%p\\n\",\n              (long long) ls,\n              (long long) daemon->epoll_fd,\n              (unsigned int) event.events,\n              (void *) event.data.ptr);\n      fflush(log);\n    }\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        ls,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      if (log)\n      {\n        fprintf(log, \"setup_epoll_to_listen: epoll_ctl ADD listen fd failed: %s\\n\",\n                MHD_socket_last_strerr_ ());\n        fclose(log);\n      }\n      return MHD_NO;\n    }\n    daemon->listen_socket_in_epoll = true;\n    if (log)\n    {\n      fprintf(log, \"setup_epoll_to_listen: listen fd added to epoll successfully; listen_socket_in_epoll=true\\n\");\n      fflush(log);\n    }\n  }\n\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    event.events = EPOLLIN | EPOLLRDHUP;\n    event.data.ptr = _MHD_DROP_CONST (epoll_itc_marker);\n    if (log)\n    {\n      fprintf(log, \"setup_epoll_to_listen: adding itc read fd=%lld to epoll_fd=%lld, event.events=0x%x, event.data.ptr=%p (from _MHD_DROP_CONST(epoll_itc_marker))\\n\",\n              (long long) MHD_itc_r_fd_ (daemon->itc),\n              (long long) daemon->epoll_fd,\n              (unsigned int) event.events,\n              (void *) event.data.ptr);\n      fflush(log);\n    }\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        MHD_itc_r_fd_ (daemon->itc),\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Call to epoll_ctl failed: %s\\n\"),\n                MHD_socket_last_strerr_ ());\n#endif\n      if (log)\n      {\n        fprintf(log, \"setup_epoll_to_listen: epoll_ctl ADD itc fd failed: %s\\n\",\n                MHD_socket_last_strerr_ ());\n        fclose(log);\n      }\n      return MHD_NO;\n    }\n  }\n  if (log)\n  {\n    fprintf(log, \"setup_epoll_to_listen: completed successfully, returning MHD_YES\\n\");\n    fclose(log);\n  }\n  return MHD_YES;\n}\n"
}