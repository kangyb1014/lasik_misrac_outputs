{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'da' is declared as 'struct DigestAlgorithm *da' but is only used for read-only access (the fragment reads da->algo_selected). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible \u2014 e.g. 'const struct DigestAlgorithm *da' \u2014 so the current non-const pointer is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_get_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2025.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_get_size:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_get_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_get_size with it.\n  - Your function must have the exact same signature as digest_get_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_get_size to check logs.\n  - Your function MUST preserve the original logic of digest_get_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_get_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_get_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  /* Probe logging to capture control flow and state for Rule 8.13 reproduction. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/2025.txt\", \"a\");\n    if (logf)\n    {\n      if (da == NULL)\n      {\n        fprintf(logf, \"[digest_get_size] entered with da = NULL\\n\");\n      }\n      else\n      {\n        /* Log pointer address and fields that are read by this function. */\n        fprintf(logf, \"[digest_get_size] entered: da=%p, algo=%d, algo_selected=%d, uninitialised=%d\\n\",\n                (void *)da,\n                (int)da->algo,\n                (int)da->algo_selected,\n                (int)da->uninitialised);\n      }\n      fclose(logf);\n    }\n  }\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n    FILE *logf = fopen(\"/tmp/logs/2025.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"[digest_get_size] branch: MD5 -> return %u\\n\", (unsigned)MD5_DIGEST_SIZE);\n      fclose(logf);\n    }\n    return MD5_DIGEST_SIZE;\n  }\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n    FILE *logf = fopen(\"/tmp/logs/2025.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"[digest_get_size] branch: SHA256 -> return %u\\n\", (unsigned)SHA256_DIGEST_SIZE);\n      fclose(logf);\n    }\n    return SHA256_DIGEST_SIZE;\n  }\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    FILE *logf = fopen(\"/tmp/logs/2025.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"[digest_get_size] branch: SHA512_256 -> return %u\\n\", (unsigned)SHA512_256_DIGEST_SIZE);\n      fclose(logf);\n    }\n    return SHA512_256_DIGEST_SIZE;\n  }\n#endif /* MHD_SHA512_256_SUPPORT */\n\n  /* Log unexpected path before asserting. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/2025.txt\", \"a\");\n    if (logf)\n    {\n      if (da == NULL)\n        fprintf(logf, \"[digest_get_size] unexpected: da == NULL before final assert\\n\");\n      else\n        fprintf(logf, \"[digest_get_size] unexpected: algo=%d not handled, triggering assert\\n\", (int)da->algo);\n      fclose(logf);\n    }\n  }\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n"
}