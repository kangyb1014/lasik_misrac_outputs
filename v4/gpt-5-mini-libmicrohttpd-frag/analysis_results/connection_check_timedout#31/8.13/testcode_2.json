{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes a string literal (the result of the _() translation macro) to MHD_DLOG. If either the _() macro/gettext returns a plain char * or MHD_DLOG's corresponding parameter is declared as char * (non-const), then a pointer to a non-const-qualified type is being used when a const-qualified pointer is appropriate (string literals and translation literals should be treated as const char *). In that situation Rule 8.13 is violated. If, however, MHD_DLOG's prototype accepts a const char * (and _() yields const char *), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_check_timedout code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_check_timedout:\n```c\nstatic bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n\n  if (c->suspended)\n    return false;\n  if (0 == timeout)\n    return false;\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (c->daemon,\n                  _ (\"Detected system clock %u milliseconds jump back.\\n\"),\n                  (unsigned int) jump_back);\n#endif\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (c->daemon,\n                _ (\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                   \"jump back.\\n\"),\n                jump_back);\n#endif\n    }\n    return true;\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_check_timedout code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_check_timedout with it.\n  - Your function must have the exact same signature as connection_check_timedout.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_check_timedout to check logs.\n  - Your function MUST preserve the original logic of connection_check_timedout as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_check_timedout will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_check_timedout as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nconnection_check_timedout (struct MHD_Connection *c)\n{\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t now;\n  uint64_t since_actv;\n  FILE *logf = fopen(\"/tmp/logs/1625.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"[entry] connection_check_timedout: c=%p suspended=%d timeout=%llu last_activity=%llu\\n\",\n            (void *) c, (int) c->suspended,\n            (unsigned long long) c->connection_timeout_ms,\n            (unsigned long long) c->last_activity);\n    fflush(logf);\n  }\n\n  if (c->suspended)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"[exit] suspended -> returning false\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n  if (0 == timeout)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"[exit] timeout==0 -> returning false\\n\");\n      fclose(logf);\n    }\n    return false;\n  }\n\n  now = MHD_monotonic_msec_counter ();\n  since_actv = now - c->last_activity;\n\n  if (logf)\n  {\n    fprintf(logf, \"[state] now=%llu since_actv=%llu timeout=%llu\\n\",\n            (unsigned long long) now,\n            (unsigned long long) since_actv,\n            (unsigned long long) timeout);\n    fflush(logf);\n  }\n\n  /* Keep the next lines in sync with #connection_get_wait() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"[branch] timeout < since_actv -> checking clock jump back\\n\");\n      fflush(logf);\n    }\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n\n      if (logf)\n      {\n        fprintf(logf, \"[state] detected large since_actv (%llu) -> jump_back=%llu\\n\",\n                (unsigned long long) since_actv,\n                (unsigned long long) jump_back);\n        fflush(logf);\n      }\n\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      {\n#ifdef HAVE_MESSAGES\n        const char *msg = _(\"Detected system clock %u milliseconds jump back.\\n\");\n        /* Log our observation before invoking MHD_DLOG to help reproduce\n         * scenarios where the translation macro/type mismatches may occur. */\n        if (logf)\n        {\n          fprintf(logf, \"[log] calling MHD_DLOG: msg_ptr=%p msg=\\\"%s\\\" param=%u\\n\",\n                  (void *) msg, msg, (unsigned int) jump_back);\n          fflush(logf);\n        }\n        MHD_DLOG (c->daemon, msg, (unsigned int) jump_back);\n#endif\n        if (logf)\n        {\n          fprintf(logf, \"[exit] small jump_back -> returning false\\n\");\n          fclose(logf);\n        }\n        return false;\n      }\n#ifdef HAVE_MESSAGES\n      {\n        const char *msg = _(\"Detected too large system clock %\" PRIu64 \" milliseconds \"\n                           \"jump back.\\n\");\n        if (logf)\n        {\n          fprintf(logf, \"[log] calling MHD_DLOG: msg_ptr=%p msg=\\\"%s\\\" param=%llu\\n\",\n                  (void *) msg, msg, (unsigned long long) jump_back);\n          fflush(logf);\n        }\n        MHD_DLOG (c->daemon, msg, jump_back);\n      }\n#endif\n    }\n    if (logf)\n    {\n      fprintf(logf, \"[exit] timeout elapsed -> returning true\\n\");\n      fclose(logf);\n    }\n    return true;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"[exit] not timed out -> returning false\\n\");\n    fclose(logf);\n  }\n  return false;\n}\n"
}