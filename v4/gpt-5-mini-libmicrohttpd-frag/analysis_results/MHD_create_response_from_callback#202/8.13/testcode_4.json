{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf both the parameter 'crc_cls' and the struct member 'response->crc_cls' are declared as plain 'void *' (non-const), then this assignment leaves the pointer unqualified even though it is typically used as a read-only/context pointer. In that case Rule 8.13 is violated (e.g. passing a pointer to static configuration or a literal should use 'const void *'). The fix is to declare the parameter and the struct member as 'const void *' so the assignment preserves const qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_callback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_callback:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n\n  if ((NULL == crc) || (0 == block_size))\n    return NULL;\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n    return NULL;\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n  response->crc_cls = crc_cls;\n  response->reference_count = 1;\n  response->total_size = size;\n  return response;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_from_callback code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_from_callback with it.\n  - Your function must have the exact same signature as MHD_create_response_from_callback.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_from_callback to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_from_callback as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_from_callback will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_from_callback as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_callback (uint64_t size,\n                                   size_t block_size,\n                                   MHD_ContentReaderCallback crc,\n                                   void *crc_cls,\n                                   MHD_ContentReaderFreeCallback crfc)\n{\n  struct MHD_Response *response;\n  FILE *log = NULL;\n\n  /* Open log for append; best-effort. */\n  log = fopen(\"/tmp/logs/795.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_create_response_from_callback(size=%llu, block_size=%llu, crc=%p, crc_cls=%p, crfc=%p)\\n\",\n            (unsigned long long) size,\n            (unsigned long long) block_size,\n            (void *) crc,\n            crc_cls,\n            (void *) crfc);\n    fflush(log);\n  }\n\n  if ((NULL == crc) || (0 == block_size))\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: invalid args (crc=%p, block_size=%llu)\\n\",\n              (void *) crc,\n              (unsigned long long) block_size);\n      fclose(log);\n    }\n    return NULL;\n  }\n  if (NULL == (response = MHD_calloc_ (1, sizeof (struct MHD_Response)\n                                       + block_size)))\n  {\n    if (log)\n    {\n      fprintf(log, \"ALLOC FAIL: MHD_calloc_ returned NULL for size=%zu\\n\", sizeof (struct MHD_Response) + block_size);\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  /* Log allocation success and initial state */\n  if (log)\n  {\n    fprintf(log, \"ALLOC OK: response=%p, data_area=%p, data_buffer_size=%zu\\n\",\n            (void *) response,\n            (void *) &response[1],\n            block_size);\n    fflush(log);\n  }\n\n  response->fd = -1;\n  response->data = (void *) &response[1];\n  response->data_buffer_size = block_size;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    if (log)\n    {\n      fprintf(log, \"MUTEX INIT FAIL: response=%p - freeing and returning NULL\\n\", (void *) response);\n      fclose(log);\n    }\n    free (response);\n    return NULL;\n  }\n  else\n  {\n    if (log)\n    {\n      fprintf(log, \"MUTEX INIT OK: response->mutex initialized for response=%p\\n\", (void *) response);\n      fflush(log);\n    }\n  }\n#endif\n  response->crc = crc;\n  response->crfc = crfc;\n\n  /* Log the crc_cls pointer prior to assignment into the response structure */\n  if (log)\n  {\n    fprintf(log, \"BEFORE ASSIGN: crc_cls param=%p\\n\", crc_cls);\n    fflush(log);\n  }\n\n  response->crc_cls = crc_cls;\n\n  /* Log the crc_cls after assignment to capture whether the const-qualification\n     (if any) would be preserved or lost in the assignment. This is the key\n     probe for the Rule 8.13 violation scenario. */\n  if (log)\n  {\n    fprintf(log, \"AFTER ASSIGN: response=%p response->crc_cls=%p\\n\",\n            (void *) response,\n            (void *) response->crc_cls);\n  }\n\n  response->reference_count = 1;\n  response->total_size = size;\n\n  if (log)\n  {\n    fprintf(log, \"RETURN: response=%p reference_count=%d total_size=%llu\\n\",\n            (void *) response,\n            (int) response->reference_count,\n            (unsigned long long) response->total_size);\n    fclose(log);\n  }\n\n  return response;\n}\n"
}