{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable is declared as a const pointer to a non-const MHD_Daemon: 'struct MHD_Daemon *const daemon = connection->daemon;'. In this function the daemon object is only read (fields accessed like daemon->options, daemon->tid) and not modified, so the pointer could and should point to a const-qualified type (e.g. 'const struct MHD_Daemon *const daemon'). Therefore the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_suspend_connection code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3265.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_suspend_connection:\n```c\n_MHD_EXTERN void\nMHD_suspend_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot suspend connections without \" \\\n                  \"enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#ifdef UPGRADE_SUPPORT\n  if (NULL != connection->urh)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Error: connection scheduled for \\\"upgrade\\\" cannot \" \\\n                 \"be suspended.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return;\n  }\n#endif /* UPGRADE_SUPPORT */\n  internal_suspend_connection_ (connection);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_suspend_connection code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_suspend_connection with it.\n  - Your function must have the exact same signature as MHD_suspend_connection.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_suspend_connection to check logs.\n  - Your function MUST preserve the original logic of MHD_suspend_connection as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_suspend_connection will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_suspend_connection as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN void\nMHD_suspend_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n  FILE *mhd_log_file = fopen(\"/tmp/logs/3265.txt\", \"a\");\n\n  if (mhd_log_file)\n  {\n    /* Log entry and immediate state useful for reproducing the violation scenario. */\n    fprintf(mhd_log_file, \"MHD_suspend_connection ENTER: connection=%p, daemon=%p\\n\",\n            (void *) connection, (void *) daemon);\n    /* Print fields that are accessed (read) in this function. Use conditional operator\n       to avoid crashing the logger when daemon is NULL; the original logic below will\n       still dereference daemon exactly as before. */\n    fprintf(mhd_log_file, \"daemon->options=0x%08lx, daemon->tid=%p, connection->urh=%p\\n\",\n            (unsigned long) (daemon ? daemon->options : 0UL),\n            (void *) (daemon ? daemon->tid : NULL),\n            (void *) connection->urh);\n    fflush(mhd_log_file);\n  }\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_D_IS_USING_THREAD_PER_CONN_ (daemon) || \\\n               MHD_thread_handle_ID_is_current_thread_ (daemon->tid) );\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n  {\n    if (mhd_log_file)\n    {\n      fprintf(mhd_log_file, \"MHD_suspend_connection: suspend/resume not allowed (daemon->options=0x%08lx). Calling MHD_PANIC.\\n\",\n              (unsigned long) daemon->options);\n      fclose(mhd_log_file);\n      mhd_log_file = NULL;\n    }\n    MHD_PANIC (_ (\"Cannot suspend connections without \" \\\n                  \"enabling MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n  }\n#ifdef UPGRADE_SUPPORT\n  if (NULL != connection->urh)\n  {\n#ifdef HAVE_MESSAGES\n    if (mhd_log_file)\n    {\n      fprintf(mhd_log_file, \"MHD_suspend_connection: connection->urh != NULL -> cannot suspend (upgrade in progress).\\n\");\n      fflush(mhd_log_file);\n    }\n    MHD_DLOG (daemon,\n              _ (\"Error: connection scheduled for \\\"upgrade\\\" cannot \" \\\n                 \"be suspended.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (mhd_log_file)\n    {\n      fclose(mhd_log_file);\n      mhd_log_file = NULL;\n    }\n    return;\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (mhd_log_file)\n  {\n    fprintf(mhd_log_file, \"MHD_suspend_connection: invoking internal_suspend_connection_ on connection=%p\\n\",\n            (void *) connection);\n    fflush(mhd_log_file);\n  }\n\n  internal_suspend_connection_ (connection);\n\n  if (mhd_log_file)\n  {\n    fprintf(mhd_log_file, \"MHD_suspend_connection EXIT: internal_suspend_connection_ returned for connection=%p\\n\",\n            (void *) connection);\n    fclose(mhd_log_file);\n  }\n}\n"
}