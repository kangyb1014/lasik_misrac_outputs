{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)",
    "strm->next_out = tmp;",
    "memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);",
    "strm->next_in = (const Bytef *) src;",
    "tmp_dest = realloc (*dest, *dest_size);",
    "void *tmp_dest;",
    "free (*dest);",
    "*dest = tmp_dest;"
  ],
  "explanation": "Rule 8.13 concerns whether pointers should point to const-qualified types where possible. I included the function declaration because it contains multiple pointer parameters (z_stream *strm, size_t *offset, void **dest, size_t *dest_size, void *tmp) that must be reviewed to confirm whether the pointed-to types could or should be const-qualified. I included the local pointer tmp_dest and the assignments/uses of dest/tmp/strm->next_in/next_out/realloc/free/memcpy because these are the sites where pointer types and pointer-to-object modifications occur and therefore are relevant to deciding whether const qualification is possible or whether const is being discarded (casts/assignments). Other fragments in the function were not included because they are non-pointer scalar variables (have, ret, flush, src_size, etc.) or already use const (the src parameter is already const and the cast to (const Bytef *) preserves const-qualification), or they clearly modify the pointed-to objects (e.g. *offset += ..., *dest_size += have, deflate writes to next_out) and thus cannot be const-qualified. Those non-pointer and clearly mutable usages do not need further investigation under Rule 8.13."
}