{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial assignment alloc_size = 0; is redundant: in every control-flow path alloc_size is assigned a meaningful value before it is used (either set to the rounded page allocation when mmap/VirtualAlloc path is taken, or set to ROUND_TO_ALIGN(max) in the MAP_FAILED fallback). Therefore the write is executed but its removal would not affect program behaviour \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_create:\n```c\nstruct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  pool = malloc (sizeof (struct MemoryPool));\n  if (NULL == pool)\n    return NULL;\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    alloc_size = ROUND_TO_ALIGN (max);\n    pool->memory = malloc (alloc_size);\n    if (NULL == pool->memory)\n    {\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  mhd_assert (0 < alloc_size);\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_create code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_create with it.\n  - Your function must have the exact same signature as MHD_pool_create.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_create to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_create as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_create will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_create as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "struct MemoryPool *\nMHD_pool_create (size_t max)\n{\n  struct MemoryPool *pool;\n  size_t alloc_size;\n  FILE *log = fopen(\"/tmp/logs/178.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_pool_create(max=%zu)\\n\", max);\n  }\n\n  mhd_assert (max > 0);\n  alloc_size = 0;\n  if (log)\n  {\n    fprintf(log, \"AFTER INIT: alloc_size set to %zu\\n\", alloc_size);\n  }\n\n  pool = malloc (sizeof (struct MemoryPool));\n  if (log)\n  {\n    fprintf(log, \"malloc pool => %p\\n\", (void *) pool);\n  }\n  if (NULL == pool)\n  {\n    if (log)\n    {\n      fprintf(log, \"ERROR: malloc for pool returned NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  if ( (max <= 32 * 1024) ||\n       (max < MHD_sys_page_size_ * 4 / 3) )\n  {\n    pool->memory = MAP_FAILED;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: small allocation or below threshold -> set pool->memory = MAP_FAILED\\n\");\n    }\n  }\n  else\n  {\n    /* Round up allocation to page granularity. */\n    alloc_size = max + MHD_sys_page_size_ - 1;\n    alloc_size -= alloc_size % MHD_sys_page_size_;\n    if (log)\n    {\n      fprintf(log, \"BRANCH: large allocation -> rounded alloc_size = %zu\\n\", alloc_size);\n    }\n#if defined(MAP_ANONYMOUS) && ! defined(_WIN32)\n    pool->memory = mmap (NULL,\n                         alloc_size,\n                         PROT_READ | PROT_WRITE,\n                         MAP_PRIVATE | MAP_ANONYMOUS,\n                         -1,\n                         0);\n    if (log)\n    {\n      if (pool->memory == MAP_FAILED)\n        fprintf(log, \"mmap returned MAP_FAILED\\n\");\n      else\n        fprintf(log, \"mmap returned %p\\n\", pool->memory);\n    }\n#elif defined(_WIN32)\n    pool->memory = VirtualAlloc (NULL,\n                                 alloc_size,\n                                 MEM_COMMIT | MEM_RESERVE,\n                                 PAGE_READWRITE);\n    if (log)\n    {\n      if (NULL == pool->memory)\n        fprintf(log, \"VirtualAlloc returned NULL\\n\");\n      else\n        fprintf(log, \"VirtualAlloc returned %p\\n\", pool->memory);\n    }\n#endif /* _WIN32 */\n  }\n#else  /* ! _WIN32 && ! MAP_ANONYMOUS */\n  pool->memory = MAP_FAILED;\n  if (log)\n  {\n    fprintf(log, \"NO MMAP_SUPPORT: set pool->memory = MAP_FAILED\\n\");\n  }\n#endif /* ! _WIN32 && ! MAP_ANONYMOUS */\n  if (MAP_FAILED == pool->memory)\n  {\n    if (log)\n      fprintf(log, \"FALLBACK: pool->memory == MAP_FAILED -> using malloc with ROUND_TO_ALIGN\\n\");\n\n    alloc_size = ROUND_TO_ALIGN (max);\n    if (log)\n      fprintf(log, \"FALLBACK: alloc_size set to ROUND_TO_ALIGN(max) = %zu\\n\", alloc_size);\n\n    pool->memory = malloc (alloc_size);\n    if (log)\n      fprintf(log, \"FALLBACK: malloc for pool->memory => %p\\n\", pool->memory);\n\n    if (NULL == pool->memory)\n    {\n      if (log)\n      {\n        fprintf(log, \"ERROR: fallback malloc failed, freeing pool %p and returning NULL\\n\", (void *) pool);\n        fclose(log);\n      }\n      free (pool);\n      return NULL;\n    }\n    pool->is_mmap = false;\n    if (log)\n      fprintf(log, \"FALLBACK: pool->is_mmap = false\\n\");\n  }\n#if defined(MAP_ANONYMOUS) || defined(_WIN32)\n  else\n  {\n    pool->is_mmap = true;\n    if (log)\n      fprintf(log, \"MMAP_PATH: pool->is_mmap = true, pool->memory = %p, alloc_size = %zu\\n\", pool->memory, alloc_size);\n  }\n#endif /* _WIN32 || MAP_ANONYMOUS */\n  mhd_assert (0 == (((uintptr_t) pool->memory) % ALIGN_SIZE));\n  pool->pos = 0;\n  pool->end = alloc_size;\n  pool->size = alloc_size;\n  if (log)\n  {\n    fprintf(log, \"FINAL: pool=%p memory=%p alloc_size=%zu pos=%zu end=%zu size=%zu is_mmap=%d\\n\",\n            (void *) pool, (void *) pool->memory, alloc_size, (size_t) pool->pos, (size_t) pool->end, (size_t) pool->size, (int) pool->is_mmap);\n    fclose(log);\n  }\n  _MHD_POISON_MEMORY (pool->memory, pool->size);\n  return pool;\n}\n"
}