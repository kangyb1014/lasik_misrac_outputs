{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function sha512_256_transform is declared to take a non-const pointer for the input block (for example: void sha512_256_transform(uint64_t H[8], uint8_t *block) or void sha512_256_transform(uint64_t H[8], uint8_t block[SHA512_256_BLOCK_SIZE])) but the function only reads the block data (does not modify it), then the pointer should be to a const-qualified type (e.g. const uint8_t * or const uint8_t block[]) and Rule 8.13 is violated. If, however, sha512_256_transform legitimately modifies the buffer contents, then using a non-const pointer is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/485.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA512_256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA512_256_update with it.\n  - Your function must have the exact same signature as MHD_SHA512_256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA512_256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA512_256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  /* Local logging helpers. We assume stdio.h is available in the translation unit\n     where this function will be placed. If not, the project normally already\n     includes it for other diagnostics; these calls are intentionally minimal. */\n  FILE *logf = fopen(\"/tmp/logs/485.txt\", \"a\");\n  if (logf != NULL)\n  {\n    fprintf(logf, \"ENTER MHD_SHA512_256_update: ctx=%p data=%p length=%zu\\n\", (void *)ctx, (void *)data, length);\n    fflush(logf);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (logf != NULL)\n    {\n      fprintf(logf, \"SHORTCUT: length==0, returning immediately\\n\");\n      fclose(logf);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  if (logf != NULL)\n  {\n    fprintf(logf, \"PRE: ctx->count=%zu bytes_have=%u ctx->buffer=%p ctx->H=%p\\n\",\n            ctx->count, bytes_have, (void *)ctx->buffer, (void *)ctx->H);\n    fflush(logf);\n  }\n\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"AFTER COUNT UPDATE: ctx->count=%zu ctx->count_bits_hi=%llu\\n\",\n            ctx->count, (unsigned long long)ctx->count_bits_hi);\n    fflush(logf);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (logf != NULL)\n    {\n      fprintf(logf, \"BRANCH: bytes_have=%u bytes_left=%u length=%zu\\n\", bytes_have, bytes_left, length);\n      fflush(logf);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log a snapshot of the destination buffer region before the copy */\n      if (logf != NULL)\n      {\n        size_t snap = (bytes_left < 16U) ? bytes_left : 16U;\n        uint8_t pre_snap[16];\n        memcpy(pre_snap, ((uint8_t *) ctx->buffer) + bytes_have, snap);\n        fprintf(logf, \"BEFORE memcpy to ctx->buffer+%u (snap %zu bytes):\", bytes_have, snap);\n        for (size_t i = 0; i < snap; ++i) fprintf(logf, \" %02x\", pre_snap[i]);\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n      }\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      if (logf != NULL)\n      {\n        size_t snap = (bytes_left < 16U) ? bytes_left : 16U;\n        uint8_t post_snap[16];\n        memcpy(post_snap, ((uint8_t *) ctx->buffer) + bytes_have, snap);\n        fprintf(logf, \"AFTER memcpy to ctx->buffer+%u (snap %zu bytes):\", bytes_have, snap);\n        for (size_t i = 0; i < snap; ++i) fprintf(logf, \" %02x\", post_snap[i]);\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n      }\n\n      /* Advance the input pointer and length to account for the bytes we consumed. */\n      data += bytes_left;\n      length -= bytes_left;\n\n      /* Before calling the transform, capture a small snapshot of the block we will pass.\n         This allows observers to detect whether sha512_256_transform modifies the block. */\n      if (logf != NULL)\n      {\n        uint8_t pre[16];\n        uint8_t post[16];\n        memcpy(pre, (const uint8_t *)ctx->buffer, sizeof(pre));\n        fprintf(logf, \"CALL sha512_256_transform(ctx->H, ctx->buffer) pre[0..15]:\");\n        for (size_t i = 0; i < sizeof(pre); ++i) fprintf(logf, \" %02x\", pre[i]);\n        fprintf(logf, \"\\n\");\n        fflush(logf);\n\n        sha512_256_transform (ctx->H, ctx->buffer);\n\n        memcpy(post, (const uint8_t *)ctx->buffer, sizeof(post));\n        fprintf(logf, \"RETURN sha512_256_transform(ctx->H, ctx->buffer) post[0..15]:\");\n        for (size_t i = 0; i < sizeof(post); ++i) fprintf(logf, \" %02x\", post[i]);\n        fprintf(logf, \"\\n\");\n\n        /* Report any differences observed */\n        int changed = 0;\n        for (size_t i = 0; i < sizeof(pre); ++i) if (pre[i] != post[i]) { changed = 1; break; }\n        fprintf(logf, \"TRANSFORM_MODIFIED_BUFFER=%d\\n\", changed);\n        fflush(logf);\n      }\n      else\n      {\n        /* If logging disabled, still call transform with original semantics. */\n        sha512_256_transform (ctx->H, ctx->buffer);\n      }\n\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    /* Capture a small snapshot of the input data block at 'data' before calling transform. */\n    if (logf != NULL)\n    {\n      uint8_t pre[16];\n      uint8_t post[16];\n      memcpy(pre, data, sizeof(pre));\n      fprintf(logf, \"CALL sha512_256_transform(ctx->H, data) data=%p pre[0..15]:\", (void *)data);\n      for (size_t i = 0; i < sizeof(pre); ++i) fprintf(logf, \" %02x\", pre[i]);\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n\n      sha512_256_transform (ctx->H, data);\n\n      memcpy(post, data, sizeof(post));\n      fprintf(logf, \"RETURN sha512_256_transform(ctx->H, data) data=%p post[0..15]:\", (void *)data);\n      for (size_t i = 0; i < sizeof(post); ++i) fprintf(logf, \" %02x\", post[i]);\n      fprintf(logf, \"\\n\");\n\n      /* Report any differences observed */\n      int changed = 0;\n      for (size_t i = 0; i < sizeof(pre); ++i) if (pre[i] != post[i]) { changed = 1; break; }\n      fprintf(logf, \"TRANSFORM_MODIFIED_INPUT=%d\\n\", changed);\n      fflush(logf);\n    }\n    else\n    {\n      /* If logging disabled, still call transform with original semantics. */\n      sha512_256_transform (ctx->H, data);\n    }\n\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (logf != NULL)\n    {\n      fprintf(logf, \"FINAL memcpy to ctx->buffer+%u length=%zu\\n\", bytes_have, length);\n      size_t snap = (length < 16U) ? length : 16U;\n      uint8_t pre_snap[16];\n      memcpy(pre_snap, data, snap);\n      fprintf(logf, \"SOURCE data[0..%zu] for final copy:\", snap);\n      for (size_t i = 0; i < snap; ++i) fprintf(logf, \" %02x\", pre_snap[i]);\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n    }\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n\n    if (logf != NULL)\n    {\n      size_t snap = (length < 16U) ? length : 16U;\n      uint8_t post_snap[16];\n      memcpy(post_snap, ((uint8_t *) ctx->buffer) + bytes_have, snap);\n      fprintf(logf, \"AFTER FINAL memcpy ctx->buffer+%u[0..%zu]:\", bytes_have, snap);\n      for (size_t i = 0; i < snap; ++i) fprintf(logf, \" %02x\", post_snap[i]);\n      fprintf(logf, \"\\n\");\n      fflush(logf);\n    }\n  }\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"EXIT MHD_SHA512_256_update: ctx->count=%zu\\n\", ctx->count);\n    fclose(logf);\n  }\n}\n"
}