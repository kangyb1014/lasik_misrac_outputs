{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the debug assertion mhd_assert is compiled out (as in production) and the caller passes data == NULL with length > 0, the memcpy call will dereference a NULL source pointer and access beyond the bounds of the object referenced by 'data'. Equally, if the invariant that ctx->buffer is at least SHA512_256_BLOCK_SIZE bytes is violated (or bytes_have + length > SHA512_256_BLOCK_SIZE due to corrupted ctx->count), the memcpy destination would overflow the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA512_256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA512_256_update with it.\n  - Your function must have the exact same signature as MHD_SHA512_256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA512_256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA512_256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n  FILE *logf = NULL;\n\n  /* Minimal attempt to log entry and key state; do not change control flow. */\n  logf = fopen(\"/tmp/logs/483.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_SHA512_256_update ENTER: ctx=%p, data=%p, length=%zu\\n\",\n            (void *) ctx, (void *) data, length);\n    if (NULL == ctx)\n    {\n      fprintf(logf, \"  WARNING: ctx is NULL\\n\");\n    }\n    else\n    {\n      /* Try to print some ctx fields if available; avoid dereferencing if unreasonable. */\n      fprintf(logf, \"  ctx->count=%llu, ctx->count_bits_hi=%llu, ctx->buffer=%p, ctx->H=%p\\n\",\n              (unsigned long long) ctx->count,\n              (unsigned long long) ctx->count_bits_hi,\n              (void *) ctx->buffer,\n              (void *) ctx->H);\n    }\n    fflush(logf);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_SHA512_256_update: length==0 -> early return\\n\");\n      fclose(logf);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  if (NULL != logf)\n  {\n    fprintf(logf, \"  after bytes_have calc: bytes_have=%u\\n\", bytes_have);\n    fflush(logf);\n  }\n\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  bytes_have!=0: bytes_have=%u, bytes_left=%u, length=%zu\\n\",\n              bytes_have, bytes_left, length);\n      fflush(logf);\n    }\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      /* Log memcpy about to happen; do not dereference data. */\n      if (NULL != logf)\n      {\n        fprintf(logf, \"  about to memcpy dest=%p src=%p size=%u\\n\",\n                (void *) (((uint8_t *) ctx->buffer) + bytes_have), (void *) data, bytes_left);\n        fflush(logf);\n      }\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      if (NULL != logf)\n      {\n        fprintf(logf, \"  calling sha512_256_transform with ctx->buffer=%p\\n\", (void *) ctx->buffer);\n        fflush(logf);\n      }\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  loop transform: data=%p length=%zu (processing %d bytes)\\n\",\n              (void *) data, length, SHA512_256_BLOCK_SIZE);\n      fflush(logf);\n    }\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  final memcpy dest=%p src=%p size=%zu bytes_have=%u\\n\",\n              (void *) (((uint8_t *) ctx->buffer) + bytes_have), (void *) data, length, bytes_have);\n      fflush(logf);\n    }\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  if (NULL != logf)\n  {\n    fprintf(logf, \"MHD_SHA512_256_update EXIT: ctx=%p, remaining length=%zu, bytes_have=%u, ctx->count=%llu, ctx->count_bits_hi=%llu\\n\",\n            (void *) ctx, length, bytes_have,\n            (unsigned long long) ctx->count,\n            (unsigned long long) ctx->count_bits_hi);\n    fclose(logf);\n  }\n}\n"
}