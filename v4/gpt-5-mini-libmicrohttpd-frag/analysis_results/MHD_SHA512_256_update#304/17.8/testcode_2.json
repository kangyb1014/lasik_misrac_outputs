{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'length -= bytes_left;' modifies the formal parameter 'length' (a size_t function parameter). MISRA C 2023 Rule 17.8 states that a function parameter should not be modified, so decrementing the parameter inside the function violates the rule. (Compliant code should use a local copy\u2014e.g. 'size_t rem = length'\u2014and modify that.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA512_256_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/482.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_update:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA512_256_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA512_256_update with it.\n  - Your function must have the exact same signature as MHD_SHA512_256_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA512_256_update to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA512_256_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA512_256_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n  FILE *logf = NULL;\n\n  /* Attempt to open the log file for appending; if this fails, proceed\n     without logging so we don't affect the original function behavior. */\n  logf = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"MHD_SHA512_256_update ENTER: ctx=%p data=%p initial_length=%zu\\n\",\n            (void *)ctx, (const void *)data, length);\n    /* Print initial count state */\n    fprintf(logf, \"  before: ctx->count=%llu ctx->count_bits_hi=%u bytes_in_buffer_guess=%llu\\n\",\n            (unsigned long long)ctx->count,\n            (unsigned)ctx->count_bits_hi,\n            (unsigned long long)(ctx->count & (SHA512_256_BLOCK_SIZE - 1)));\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (logf) fprintf(logf, \"  early return: length==0\\n\");\n    if (logf) fclose(logf);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  if (logf) fprintf(logf, \"  bytes_have=%u (derived from ctx->count)\\n\", bytes_have);\n\n  ctx->count += length;\n  if (logf) fprintf(logf, \"  after add: ctx->count=%llu\\n\", (unsigned long long)ctx->count);\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n  {\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n    if (logf) fprintf(logf, \"  size_t wrap detected: incremented ctx->count_bits_hi to %u\\n\", (unsigned)ctx->count_bits_hi);\n  }\n#endif /* SIZEOF_SIZE_T > 7 */\n\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    if (logf) fprintf(logf, \"  count_hi non-zero (%llu): will add to ctx->count_bits_hi and mask ctx->count\\n\", (unsigned long long)count_hi);\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n    if (logf) fprintf(logf, \"  after carry: ctx->count=%llu ctx->count_bits_hi=%u\\n\",\n                    (unsigned long long)ctx->count, (unsigned)ctx->count_bits_hi);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (logf) fprintf(logf, \"  bytes_have!=0: bytes_left=%u length=%zu\\n\", bytes_left, length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      if (logf) fprintf(logf, \"    branch: length >= bytes_left (about to memcpy %u bytes)\\n\", bytes_left);\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      if (logf) fprintf(logf, \"    about to modify parameter: length (was %zu) -= bytes_left(%u)\\n\", length, bytes_left);\n      length -= bytes_left; /* <-- This is where the function parameter is modified (violates MISRA C 2023 Rule 17.8) */\n      if (logf) fprintf(logf, \"    after modification: length=%zu\\n\", length);\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n      if (logf) fprintf(logf, \"    processed one full block from buffer, bytes_have set to 0\\n\");\n    }\n    else\n    {\n      if (logf) fprintf(logf, \"    branch: length < bytes_left (insufficient to fill buffer); copying postponed\\n\");\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (logf) fprintf(logf, \"  while-loop: have full block: length=%zu (>= %d) -> process one block at data=%p\\n\",\n                    length, SHA512_256_BLOCK_SIZE, (const void *)data);\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    if (logf) fprintf(logf, \"    before subtract: length=%zu -= %d\\n\", length, SHA512_256_BLOCK_SIZE);\n    length -= SHA512_256_BLOCK_SIZE; /* <-- Another modification of the parameter 'length' */\n    if (logf) fprintf(logf, \"    after subtract: length=%zu\\n\", length);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (logf) fprintf(logf, \"  final copy: copying remaining %zu bytes to buffer at offset %u\\n\", length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"MHD_SHA512_256_update EXIT: final_length_remaining=%zu ctx->count=%llu ctx->count_bits_hi=%u\\n\",\n            length, (unsigned long long)ctx->count, (unsigned)ctx->count_bits_hi);\n    fclose(logf);\n  }\n}\n"
}