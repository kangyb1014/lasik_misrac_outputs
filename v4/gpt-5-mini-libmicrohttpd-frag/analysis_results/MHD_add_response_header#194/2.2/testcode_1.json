{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert(NULL != hdr) is redundant given the prior check of response->flags_auto and the subsequent call that is expected to return the header. In normal operation hdr will be non-NULL, so the assertion is executed but has no effect \u2014 removing it would not change program behaviour. Thus that assertion constitutes dead code under MISRA C 2023 Rule 2.2. (Other operations in the fragment \u2014 _MHD_remove_header and the frees \u2014 affect program state and are not dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log = fopen(\"/tmp/logs/578.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_add_response_header: header='%s' content='%s' response=%p flags_auto=0x%08x flags=0x%08x\\n\",\n            header ? header : \"(null)\", content ? content : \"(null)\", (void *)response,\n            (unsigned int)(response ? response->flags_auto : 0U),\n            (unsigned int)(response ? response->flags : 0U));\n    fflush(log);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: Connection header -> add_response_header_connection\\n\");\n      fclose(log);\n    }\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (log)\n    {\n      fprintf(log, \"BRANCH: Transfer-Encoding header content='%s' flags_auto=0x%08x flags=0x%08x\\n\",\n              content ? content : \"(null)\", (unsigned int)response->flags_auto, (unsigned int)response->flags);\n      fflush(log);\n    }\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log) { fprintf(log, \"DECISION: Transfer-Encoding not 'chunked' -> MHD_NO\\n\"); fclose(log); }\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log) { fprintf(log, \"DECISION: Already has 'chunked' encoding header -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log) { fprintf(log, \"DECISION: Has Content-Length and no Insanity flag -> MHD_NO\\n\"); fclose(log); }\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log) { fprintf(log, \"ACTION: Added Transfer-Encoding 'chunked' -> set RAF_HAS_TRANS_ENC_CHUNKED -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;\n    }\n    if (log) { fprintf(log, \"ACTION: Failed to add Transfer-Encoding entry -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (log) { fprintf(log, \"BRANCH: Date header check flags_auto=0x%08x\\n\", (unsigned int)response->flags_auto); fflush(log); }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      if (log) { fprintf(log, \"INFO: RAF_HAS_DATE_HDR is set -> locating existing Date header...\\n\"); fflush(log); }\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      if (log) { fprintf(log, \"INFO: MHD_get_response_element_n_ returned hdr=%p\\n\", (void *)hdr); fflush(log); }\n      if (log) { fprintf(log, \"INFO: About to assert hdr != NULL (this mirrors original assertion)\\n\"); fflush(log); }\n      mhd_assert (NULL != hdr);\n      if (log) { fprintf(log, \"INFO: Assertion returned (hdr=%p) - proceeding to remove and free header\\n\", (void *)hdr); fflush(log); }\n      _MHD_remove_header (response, hdr);\n      if (log) { fprintf(log, \"ACTION: _MHD_remove_header called for hdr=%p\\n\", (void *)hdr); fflush(log); }\n      if (NULL != hdr->value)\n      {\n        if (log) { fprintf(log, \"ACTION: free(hdr->value)\\n\"); fflush(log); }\n        free (hdr->value);\n      }\n      if (log) { fprintf(log, \"ACTION: free(hdr->header) and free(hdr)\\n\"); fflush(log); }\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log) { fprintf(log, \"ACTION: Added Date header -> set RAF_HAS_DATE_HDR -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;\n    }\n    if (log) { fprintf(log, \"ACTION: Failed to add Date header -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (log) { fprintf(log, \"BRANCH: Content-Length header check flags_auto=0x%08x flags=0x%08x\\n\",\n                      (unsigned int)response->flags_auto, (unsigned int)response->flags); fflush(log); }\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log) { fprintf(log, \"ACTION: Added Content-Length header -> set RAF_HAS_CONTENT_LENGTH -> MHD_YES\\n\"); fclose(log); }\n        return MHD_YES;\n      }\n    }\n    if (log) { fprintf(log, \"ACTION: Did not add Content-Length header -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n\n  if (log) { fprintf(log, \"FALLTHROUGH: Default add_response_entry for header='%s'\\n\", header ? header : \"(null)\"); fclose(log); }\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}