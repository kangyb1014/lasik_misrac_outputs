{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function MHD_get_response_element_n_ is declared with a non-const pointer parameter for the header (e.g. char *header), then this call passes a string literal (MHD_HTTP_HEADER_DATE) to a non-const pointer. String literals have static storage and should be pointed to by const-qualified pointers; therefore Rule 8.13 is violated. The concrete violation scenario: MHD_HTTP_HEADER_DATE expands to a string literal (or otherwise immutable data) and the prototype of MHD_get_response_element_n_ declares the header parameter as char * (not const char *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER MHD_add_response_header: response=%p, header=%p, header_str=%s, content=%p, content_str=%s\\n\",\n            (void *)response,\n            (void *)header,\n            (header ? header : \"(null)\"),\n            (void *)content,\n            (content ? content : \"(null)\"));\n    fclose(logf);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"BRANCH: CONNECTION header matched\\n\"); fclose(logf); }\n    return add_response_header_connection (response, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"BRANCH: TRANSFER-ENCODING header matched; content=%s\\n\", content ? content : \"(null)\"); fclose(logf); }\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"REJECT: Transfer-Encoding is not 'chunked' -> returning MHD_NO\\n\"); fclose(logf); }\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"ALREADY_HAS_CHUNKED -> returning MHD_YES\\n\"); fclose(logf); }\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"CONFLICT: Has Content-Length and no Insanity flag -> returning MHD_NO\\n\"); fclose(logf); }\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    {\n      enum MHD_Result addres = add_response_entry (response,\n                                                   MHD_HEADER_KIND,\n                                                   header,\n                                                   content);\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"add_response_entry returned %d for TRANSFER-ENCODING\\n\", (int)addres); fclose(logf); }\n      if (MHD_NO != addres)\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n        if (logf) { fprintf(logf, \"SET FLAG: MHD_RAF_HAS_TRANS_ENC_CHUNKED; returning MHD_YES\\n\"); fclose(logf); }\n        return MHD_YES;\n      }\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"Failed to add TRANSFER-ENCODING entry -> returning MHD_NO\\n\"); fclose(logf); }\n      return MHD_NO;\n    }\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"BRANCH: DATE header matched; response->flags_auto=0x%llx, response->flags=0x%llx\\n\",\n                         (unsigned long long)response->flags_auto,\n                         (unsigned long long)response->flags); fclose(logf); }\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"INFO: Existing DATE header present, about to lookup and remove it\\n\"); fclose(logf); }\n\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_(MHD_HTTP_HEADER_DATE));\n\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"MHD_get_response_element_n_ returned hdr=%p\\n\", (void *)hdr);\n        if (hdr)\n        {\n          fprintf(logf, \"hdr->header=%p, hdr->value=%p, header_str=%s, value_str=%s\\n\",\n                  (void *)hdr->header,\n                  (void *)hdr->value,\n                  (hdr->header ? hdr->header : \"(null)\"),\n                  (hdr->value ? hdr->value : \"(null)\"));\n        }\n        fclose(logf);\n      }\n\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"Removed previous DATE header and freed resources\\n\"); fclose(logf); }\n    }\n\n    {\n      enum MHD_Result addres = add_response_entry (response,\n                                                   MHD_HEADER_KIND,\n                                                   header,\n                                                   content);\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"add_response_entry returned %d for DATE header\\n\", (int)addres); fclose(logf); }\n      if (MHD_NO != addres)\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n        if (logf) { fprintf(logf, \"SET FLAG: MHD_RAF_HAS_DATE_HDR; returning MHD_YES\\n\"); fclose(logf); }\n        return MHD_YES;\n      }\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"Failed to add DATE header -> returning MHD_NO\\n\"); fclose(logf); }\n      return MHD_NO;\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"BRANCH: CONTENT-LENGTH header matched; response->flags_auto=0x%llx, response->flags=0x%llx\\n\",\n                         (unsigned long long)response->flags_auto,\n                         (unsigned long long)response->flags); fclose(logf); }\n\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      enum MHD_Result addres = add_response_entry (response,\n                                                   MHD_HEADER_KIND,\n                                                   header,\n                                                   content);\n      logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n      if (logf) { fprintf(logf, \"add_response_entry returned %d for CONTENT-LENGTH\\n\", (int)addres); fclose(logf); }\n      if (MHD_NO != addres)\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n        if (logf) { fprintf(logf, \"SET FLAG: MHD_RAF_HAS_CONTENT_LENGTH; returning MHD_YES\\n\"); fclose(logf); }\n        return MHD_YES;\n      }\n    }\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"CONTENT-LENGTH branch ended without adding header -> returning MHD_NO\\n\"); fclose(logf); }\n    return MHD_NO;\n  }\n\n  /* Default: forward to add_response_entry */\n  {\n    enum MHD_Result addres = add_response_entry (response,\n                                                 MHD_HEADER_KIND,\n                                                 header,\n                                                 content);\n    logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n    if (logf) { fprintf(logf, \"DEFAULT: add_response_entry returned %d for header %s -> returning that result\\n\", (int)addres, header ? header : \"(null)\"); fclose(logf); }\n    return addres;\n  }\n}\n"
}