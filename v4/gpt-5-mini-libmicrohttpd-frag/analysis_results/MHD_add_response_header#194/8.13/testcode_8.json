{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function add_response_entry is declared to take non-const char * parameters for header/content, then the call add_response_entry(..., header, content) passes const char * arguments (MHD_add_response_header declares header and content as const char *), discarding the const qualifier. That discarding of const violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). To comply, add_response_entry should accept const char * for these parameters (or the call must not discard const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *logf = fopen(\"/tmp/logs/575.txt\", \"a\");\n  if (logf)\n  {\n    if (response != NULL)\n      fprintf(logf, \"ENTER MHD_add_response_header: response=%p header=%p header_str=\\\"%s\\\" content=%p content_str=\\\"%s\\\" flags_auto=0x%08x flags=0x%08x\\n\",\n              (void *)response,\n              (void *)header, (header != NULL) ? header : \"(null)\",\n              (void *)content, (content != NULL) ? content : \"(null)\",\n              (unsigned)response->flags_auto,\n              (unsigned)response->flags);\n    else\n      fprintf(logf, \"ENTER MHD_add_response_header: response=(null) header=%p header_str=\\\"%s\\\" content=%p content_str=\\\"%s\\\"\\n\",\n              (void *)header, (header != NULL) ? header : \"(null)\",\n              (void *)content, (content != NULL) ? content : \"(null)\");\n    fflush(logf);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (logf)\n      fprintf(logf, \"BRANCH: CONNECTION header matched, calling add_response_header_connection\\n\"), fflush(logf);\n    enum MHD_Result _res = add_response_header_connection (response, content);\n    if (logf)\n      fprintf(logf, \"RETURN from add_response_header_connection: %d\\n\", (int)_res), fflush(logf);\n    if (logf) fclose(logf);\n    return _res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (logf)\n      fprintf(logf, \"BRANCH: TRANSFER-ENCODING header matched, content=\\\"%s\\\"\\n\", (content != NULL) ? content : \"(null)\"), fflush(logf);\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (logf) fprintf(logf, \"REJECT: transfer-encoding is not 'chunked' -> MHD_NO\\n\"), fflush(logf);\n      if (logf) fclose(logf);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (logf) fprintf(logf, \"ALREADY HAS chunked encoding header -> MHD_YES\\n\"), fflush(logf);\n      if (logf) fclose(logf);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (logf) fprintf(logf, \"HAS_CONTENT_LENGTH without INSANITY flag -> reject MHD_NO\\n\"), fflush(logf);\n      if (logf) fclose(logf);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (logf) fprintf(logf, \"ADDED chunked header, set RAF_HAS_TRANS_ENC_CHUNKED -> MHD_YES\\n\"), fflush(logf);\n      if (logf) fclose(logf);\n      return MHD_YES;\n    }\n    if (logf) fprintf(logf, \"FAILED to add chunked header -> MHD_NO\\n\"), fflush(logf);\n    if (logf) fclose(logf);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (logf) fprintf(logf, \"BRANCH: DATE header matched\\n\"), fflush(logf);\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      if (logf) fprintf(logf, \"Removed existing DATE header instance\\n\"), fflush(logf);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (logf) fprintf(logf, \"Added DATE header, set RAF_HAS_DATE_HDR -> MHD_YES\\n\"), fflush(logf);\n      if (logf) fclose(logf);\n      return MHD_YES;\n    }\n    if (logf) fprintf(logf, \"FAILED to add DATE header -> MHD_NO\\n\"), fflush(logf);\n    if (logf) fclose(logf);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (logf) fprintf(logf, \"BRANCH: CONTENT-LENGTH header matched\\n\"), fflush(logf);\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (logf) fprintf(logf, \"Added CONTENT-LENGTH header, set RAF_HAS_CONTENT_LENGTH -> MHD_YES\\n\"), fflush(logf);\n        if (logf) fclose(logf);\n        return MHD_YES;\n      }\n      if (logf) fprintf(logf, \"FAILED to add CONTENT-LENGTH header -> MHD_NO\\n\"), fflush(logf);\n    }\n    if (logf) fprintf(logf, \"EXIT CONTENT-LENGTH branch -> MHD_NO\\n\"), fflush(logf);\n    if (logf) fclose(logf);\n    return MHD_NO;\n  }\n\n  if (logf) fprintf(logf, \"DEFAULT: delegating to add_response_entry for header=\\\"%s\\\"\\n\", (header != NULL) ? header : \"(null)\"), fflush(logf);\n  enum MHD_Result _final_res = add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n  if (logf) fprintf(logf, \"RETURN from add_response_entry (default): %d\\n\", (int)_final_res), fflush(logf);\n  if (logf) fclose(logf);\n  return _final_res;\n}\n"
}