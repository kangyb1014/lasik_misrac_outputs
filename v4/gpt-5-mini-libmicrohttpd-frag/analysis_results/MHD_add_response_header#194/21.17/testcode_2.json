{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes raw pointers (header, content) directly into add_response_entry without validating lengths or NUL-termination; if add_response_entry uses <string.h> routines such as strlen, strcpy, strncpy, strcat, memcpy or memmove on those pointers or into fixed-size destination buffers, this can read or write beyond the bounds of the source or destination objects. Example violation: header is not NUL-terminated (or is longer than an internal fixed buffer) and add_response_entry calls strlen(header) or strcpy(dest, header) leading to a read or write past the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log = fopen(\"/tmp/logs/573.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"ENTER MHD_add_response_header: response=%p header=%p content=%p\\n\",\n            (void *) response, (void *) header, (void *) content);\n    /* Safely probe header and content for a NUL within a limited range to avoid\n     * unbounded reads. This helps capture whether the caller provided\n     * NUL-terminated strings without invoking strlen() directly. */\n    {\n      size_t probe = 64;\n      if (header) {\n        void *p = memchr(header, '\\0', probe);\n        if (p) {\n          size_t hlen = (const char *)p - header;\n          fprintf(log, \"header (NUL within %zu): len=%zu prefix=\\\"%.*s\\\"\\n\",\n                  probe, hlen, (int)hlen, header);\n        } else {\n          fprintf(log, \"header (no NUL within %zu): prefix=\\\"%.*s\\\"\\n\",\n                  probe, (int)probe, header);\n        }\n      } else {\n        fprintf(log, \"header is NULL\\n\");\n      }\n      if (content) {\n        void *p2 = memchr(content, '\\0', probe);\n        if (p2) {\n          size_t clen = (const char *)p2 - content;\n          fprintf(log, \"content (NUL within %zu): len=%zu prefix=\\\"%.*s\\\"\\n\",\n                  probe, clen, (int)clen, content);\n        } else {\n          fprintf(log, \"content (no NUL within %zu): prefix=\\\"%.*s\\\"\\n\",\n                  probe, (int)probe, content);\n        }\n      } else {\n        fprintf(log, \"content is NULL\\n\");\n      }\n    }\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION)) {\n    if (log) { fprintf(log, \"branch: CONNECTION -> add_response_header_connection\\n\"); }\n    enum MHD_Result r = add_response_header_connection (response, content);\n    if (log) { fprintf(log, \"add_response_header_connection returned %d\\n\", (int)r); fclose(log); }\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (log) { fprintf(log, \"branch: TRANSFER_ENCODING\\n\"); }\n    if (! MHD_str_equal_caseless_ (content, \"chunked\")) {\n      if (log) { fprintf(log, \"content is not 'chunked' -> MHD_NO\\n\"); fclose(log); }\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)) {\n      if (log) { fprintf(log, \"already has TRANS_ENC_CHUNKED -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log) { fprintf(log, \"has Content-Length and not INSANITY flag -> MHD_NO\\n\"); fclose(log); }\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log) { fprintf(log, \"add_response_entry succeeded; set HAS_TRANS_ENC_CHUNKED -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;\n    }\n    if (log) { fprintf(log, \"add_response_entry failed -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (log) { fprintf(log, \"branch: DATE\\n\"); }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (log) { fprintf(log, \"removed existing DATE header %p (value=%p header=%p)\\n\",\n                        (void *) hdr, (void *) hdr->value, (void *) hdr->header); }\n      if (NULL != hdr->value) {\n        free (hdr->value);\n        if (log) { fprintf(log, \"freed hdr->value\\n\"); }\n      }\n      free (hdr->header);\n      free (hdr);\n      if (log) { fprintf(log, \"freed header struct\\n\"); }\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log) { fprintf(log, \"add_response_entry succeeded; set HAS_DATE_HDR -> MHD_YES\\n\"); fclose(log); }\n      return MHD_YES;\n    }\n    if (log) { fprintf(log, \"add_response_entry failed -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (log) { fprintf(log, \"branch: CONTENT_LENGTH\\n\"); }\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (log) { fprintf(log, \"allowed to add custom Content-Length -> calling add_response_entry\\n\"); }\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log) { fprintf(log, \"add_response_entry succeeded; set HAS_CONTENT_LENGTH -> MHD_YES\\n\"); fclose(log); }\n        return MHD_YES;\n      }\n    }\n    if (log) { fprintf(log, \"not allowed or add_response_entry failed -> MHD_NO\\n\"); fclose(log); }\n    return MHD_NO;\n  }\n\n  if (log) { fprintf(log, \"default: forwarding to add_response_entry\\n\"); }\n  enum MHD_Result res = add_response_entry (response,\n                                           MHD_HEADER_KIND,\n                                           header,\n                                           content);\n  if (log) { fprintf(log, \"add_response_entry returned %d\\n\", (int) res); fclose(log); }\n  return res;\n}\n"
}