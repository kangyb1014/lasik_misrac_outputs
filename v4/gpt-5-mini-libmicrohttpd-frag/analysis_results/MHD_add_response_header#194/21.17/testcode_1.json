{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_str_equal_caseless_ internally uses standard string.h functions that assume NUL-terminated inputs (e.g. strcmp, strcasecmp, strlen, memcmp without explicit bounds) then calling MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_CONNECTION) can read past the end of the buffer referenced by header. For example, if 'header' points to a buffer that is not NUL-terminated or is shorter than strlen(MHD_HTTP_HEADER_CONNECTION) and MHD_str_equal_caseless_ compares the strings without length checks, the comparison will access memory beyond the bounds of header and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  /* Logging: append events to /tmp/logs/573.txt. We avoid dereferencing\n   * user-supplied pointers to prevent introducing new out-of-bounds\n   * accesses. We only log pointer values and integral flags. */\n  FILE *mhd_log = fopen(\"/tmp/logs/573.txt\", \"a\");\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"ENTER MHD_add_response_header: response=%p header=%p content=%p\\n\",\n              (void *) response, (void *) header, (void *) content);\n      fflush(mhd_log);\n    }\n\n  enum MHD_Result res = MHD_NO; /* default return value, will be overwritten */\n\n  /* Helper macro-like local manual logging to record a comparison and result.\n   * We do not read the header/content strings themselves to avoid creating\n   * additional out-of-bounds accesses; only record that the comparison was\n   * attempted and whether it returned true/false. */\n\n  /* First comparison: Connection header */\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"CALL MHD_str_equal_caseless_: header vs MHD_HTTP_HEADER_CONNECTION, header_ptr=%p\\n\",\n              (void *) header);\n      fflush(mhd_log);\n    }\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    {\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"MHD_str_equal_caseless_: header == MHD_HTTP_HEADER_CONNECTION -> true\\n\");\n          fflush(mhd_log);\n        }\n      res = add_response_header_connection (response, content);\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"add_response_header_connection returned %d\\n\", (int) res);\n          fprintf(mhd_log, \"EXIT MHD_add_response_header (via Connection branch): %d\\n\", (int) res);\n          fclose(mhd_log);\n        }\n      return res;\n    }\n  else\n    {\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"MHD_str_equal_caseless_: header == MHD_HTTP_HEADER_CONNECTION -> false\\n\");\n          fflush(mhd_log);\n        }\n    }\n\n  /* Transfer-Encoding header */\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"CALL MHD_str_equal_caseless_: header vs MHD_HTTP_HEADER_TRANSFER_ENCODING, header_ptr=%p\\n\",\n              (void *) header);\n      fflush(mhd_log);\n    }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == TRANSFER_ENCODING -> true\\n\");\n        fflush(mhd_log);\n      }\n\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      {\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"content != \\\"chunked\\\" -> rejecting (MHD_NO)\\n\");\n            fflush(mhd_log);\n          }\n        res = MHD_NO;   /* Only \"chunked\" encoding is allowed */\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"EXIT MHD_add_response_header (Transfer-Encoding mismatch): %d\\n\", (int) res);\n            fclose(mhd_log);\n          }\n        return res;\n      }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      {\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"Response already has chunked encoding flag (flags_auto=0x%lx) -> returning MHD_YES\\n\",\n                    (unsigned long) response->flags_auto);\n            fclose(mhd_log);\n          }\n        return MHD_YES;  /* Already has \"chunked\" encoding header */\n      }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      {\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"Has Content-Length and no Insanity flag -> rejecting (MHD_NO). flags_auto=0x%lx flags=0x%lx\\n\",\n                    (unsigned long) response->flags_auto, (unsigned long) response->flags);\n            fflush(mhd_log);\n          }\n        res = MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"EXIT MHD_add_response_header (Transfer-Encoding conflicting with Content-Length): %d\\n\", (int) res);\n            fclose(mhd_log);\n          }\n        return res;\n      }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"add_response_entry succeeded for Transfer-Encoding -> set RAF_HAS_TRANS_ENC_CHUNKED; flags_auto now=0x%lx\\n\",\n                  (unsigned long) response->flags_auto);\n          fprintf(mhd_log, \"EXIT MHD_add_response_header (Transfer-Encoding added): %d\\n\", (int) MHD_YES);\n          fclose(mhd_log);\n        }\n      return MHD_YES;\n    }\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"add_response_entry failed for Transfer-Encoding -> returning MHD_NO\\n\");\n        fprintf(mhd_log, \"EXIT MHD_add_response_header (Transfer-Encoding add failed): %d\\n\", (int) MHD_NO);\n        fclose(mhd_log);\n      }\n    return MHD_NO;\n  }\n  else\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == TRANSFER_ENCODING -> false\\n\");\n        fflush(mhd_log);\n      }\n  }\n\n  /* Date header */\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"CALL MHD_str_equal_caseless_: header vs MHD_HTTP_HEADER_DATE, header_ptr=%p\\n\",\n              (void *) header);\n      fflush(mhd_log);\n    }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == DATE -> true\\n\");\n        fflush(mhd_log);\n      }\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"Existing Date header removed and freed\\n\");\n          fflush(mhd_log);\n        }\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (NULL != mhd_log)\n        {\n          fprintf(mhd_log, \"Date header added -> set RAF_HAS_DATE_HDR; flags_auto now=0x%lx\\n\",\n                  (unsigned long) response->flags_auto);\n          fprintf(mhd_log, \"EXIT MHD_add_response_header (Date added): %d\\n\", (int) MHD_YES);\n          fclose(mhd_log);\n        }\n      return MHD_YES;\n    }\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"add_response_entry failed for Date -> returning MHD_NO\\n\");\n        fprintf(mhd_log, \"EXIT MHD_add_response_header (Date add failed): %d\\n\", (int) MHD_NO);\n        fclose(mhd_log);\n      }\n    return MHD_NO;\n  }\n  else\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == DATE -> false\\n\");\n        fflush(mhd_log);\n      }\n  }\n\n  /* Content-Length header */\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"CALL MHD_str_equal_caseless_: header vs MHD_HTTP_HEADER_CONTENT_LENGTH, header_ptr=%p\\n\",\n              (void *) header);\n      fflush(mhd_log);\n    }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == CONTENT_LENGTH -> true\\n\");\n        fflush(mhd_log);\n      }\n\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (NULL != mhd_log)\n          {\n            fprintf(mhd_log, \"Content-Length header added -> set RAF_HAS_CONTENT_LENGTH; flags_auto now=0x%lx\\n\",\n                    (unsigned long) response->flags_auto);\n            fprintf(mhd_log, \"EXIT MHD_add_response_header (Content-Length added): %d\\n\", (int) MHD_YES);\n            fclose(mhd_log);\n          }\n        return MHD_YES;\n      }\n    }\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"Content-Length branch fell through -> returning MHD_NO\\n\");\n        fprintf(mhd_log, \"EXIT MHD_add_response_header (Content-Length branch end): %d\\n\", (int) MHD_NO);\n        fclose(mhd_log);\n      }\n    return MHD_NO;\n  }\n  else\n  {\n    if (NULL != mhd_log)\n      {\n        fprintf(mhd_log, \"MHD_str_equal_caseless_: header == CONTENT_LENGTH -> false\\n\");\n        fflush(mhd_log);\n      }\n  }\n\n  /* Default: delegate to add_response_entry */\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"Default branch: calling add_response_entry with header=%p content=%p\\n\",\n              (void *) header, (void *) content);\n      fflush(mhd_log);\n    }\n\n  res = add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n\n  if (NULL != mhd_log)\n    {\n      fprintf(mhd_log, \"add_response_entry returned %d -> EXIT MHD_add_response_header: %d\\n\",\n              (int) res, (int) res);\n      fclose(mhd_log);\n    }\n\n  return res;\n}\n"
}