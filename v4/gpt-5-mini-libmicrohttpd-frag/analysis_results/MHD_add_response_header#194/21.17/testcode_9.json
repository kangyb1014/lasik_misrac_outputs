{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf content is NULL or not a NUL-terminated C string, the call to MHD_str_equal_caseless_(content, \"chunked\") may cause the underlying string-handling routine (e.g. strcmp/strncasecmp/memcmp) to read through an invalid pointer or past the end of the object. For example, if a caller passes content == NULL, and MHD_str_equal_caseless_ invokes a standard <string.h> function that assumes non-NULL, this will result in an out-of-bounds access (or dereference of NULL). Likewise, if content points to a buffer that is not NUL-terminated, the comparator may read beyond the buffer\u2019s bounds searching for a terminator.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *logf = fopen(\"/tmp/logs/573.txt\", \"a\");\n  if (NULL != logf)\n  {\n    fprintf(logf, \"ENTER MHD_add_response_header: response=%p, header=%p, content=%p\\n\",\n            (void *) response, (const void *) header, (const void *) content);\n    if (NULL != response)\n      fprintf(logf, \" response->flags_auto=0x%08x, response->flags=0x%08x\\n\",\n              (unsigned) response->flags_auto, (unsigned) response->flags);\n    fflush(logf);\n  }\n\n  /* First branch: Connection header */\n  if (logf)\n  {\n    fprintf(logf, \"About to call MHD_str_equal_caseless_ for header vs MHD_HTTP_HEADER_CONNECTION: header=%p\\n\",\n            (const void *) header);\n    fflush(logf);\n  }\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Branch: header matches MHD_HTTP_HEADER_CONNECTION -> calling add_response_header_connection(response=%p, content=%p)\\n\",\n              (void *) response, (const void *) content);\n      fflush(logf);\n    }\n    if (logf) fclose(logf);\n    return add_response_header_connection (response, content);\n  }\n\n  /* Transfer-Encoding header */\n  if (logf)\n  {\n    fprintf(logf, \"About to call MHD_str_equal_caseless_ for header vs MHD_HTTP_HEADER_TRANSFER_ENCODING: header=%p\\n\",\n            (const void *) header);\n    fflush(logf);\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Entered Transfer-Encoding branch: content=%p\\n\",\n              (const void *) content);\n      /* Log whether content pointer is NULL (do not dereference) */\n      fprintf(logf, \" content is %s\\n\", (content == NULL) ? \"NULL\" : \"non-NULL\");\n      fflush(logf);\n    }\n\n    if (logf)\n    {\n      fprintf(logf, \"About to call MHD_str_equal_caseless_ for content vs \\\"chunked\\\": content=%p\\n\",\n              (const void *) content);\n      fflush(logf);\n    }\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Transfer-Encoding check: content not equal to \\\"chunked\\\", returning MHD_NO\\n\");\n        fflush(logf);\n        fclose(logf);\n      }\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (logf)\n    {\n      fprintf(logf, \"Transfer-Encoding check: content == \\\"chunked\\\"\\n\");\n      fflush(logf);\n    }\n\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Response already has chunked flag, returning MHD_YES\\n\");\n        fflush(logf);\n        fclose(logf);\n      }\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Has Content-Length and no Insanity flag -> returning MHD_NO\\n\");\n        fflush(logf);\n        fclose(logf);\n      }\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n\n    if (logf)\n    {\n      fprintf(logf, \"About to call add_response_entry for Transfer-Encoding: header=%p, content=%p\\n\",\n              (const void *) header, (const void *) content);\n      fflush(logf);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (logf)\n      {\n        fprintf(logf, \"add_response_entry succeeded for Transfer-Encoding; set RAF_HAS_TRANS_ENC_CHUNKED; returning MHD_YES\\n\");\n        fflush(logf);\n        fclose(logf);\n      }\n      return MHD_YES;\n    }\n    if (logf)\n    {\n      fprintf(logf, \"add_response_entry failed for Transfer-Encoding; returning MHD_NO\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  /* Date header */\n  if (logf)\n  {\n    fprintf(logf, \"About to call MHD_str_equal_caseless_ for header vs MHD_HTTP_HEADER_DATE: header=%p\\n\",\n            (const void *) header);\n    fflush(logf);\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Entered Date branch\\n\");\n      fflush(logf);\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      if (logf)\n      {\n        fprintf(logf, \"Response already has date header; will remove existing header element\\n\");\n        fflush(logf);\n      }\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n      {\n        if (logf)\n        {\n          fprintf(logf, \"Freeing old hdr->value=%p\\n\", (const void *) hdr->value);\n          fflush(logf);\n        }\n        free (hdr->value);\n      }\n      if (logf)\n      {\n        fprintf(logf, \"Freeing old hdr->header=%p and hdr structure=%p\\n\",\n                (const void *) hdr->header, (const void *) hdr);\n        fflush(logf);\n      }\n      free (hdr->header);\n      free (hdr);\n    }\n    if (logf)\n    {\n      fprintf(logf, \"About to call add_response_entry for Date header: header=%p, content=%p\\n\",\n              (const void *) header, (const void *) content);\n      fflush(logf);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (logf)\n      {\n        fprintf(logf, \"add_response_entry succeeded for Date; set RAF_HAS_DATE_HDR; returning MHD_YES\\n\");\n        fflush(logf);\n        fclose(logf);\n      }\n      return MHD_YES;\n    }\n    if (logf)\n    {\n      fprintf(logf, \"add_response_entry failed for Date; returning MHD_NO\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  /* Content-Length header */\n  if (logf)\n  {\n    fprintf(logf, \"About to call MHD_str_equal_caseless_ for header vs MHD_HTTP_HEADER_CONTENT_LENGTH: header=%p\\n\",\n            (const void *) header);\n    fflush(logf);\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"Entered Content-Length branch: flags=0x%08x, flags_auto=0x%08x\\n\",\n              (unsigned) response->flags, (unsigned) response->flags_auto);\n      fflush(logf);\n    }\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (logf)\n      {\n        fprintf(logf, \"Conditions allow custom Content-Length -> calling add_response_entry: header=%p, content=%p\\n\",\n                (const void *) header, (const void *) content);\n        fflush(logf);\n      }\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (logf)\n        {\n          fprintf(logf, \"add_response_entry succeeded for Content-Length; set RAF_HAS_CONTENT_LENGTH; returning MHD_YES\\n\");\n          fflush(logf);\n          fclose(logf);\n        }\n        return MHD_YES;\n      }\n    }\n    if (logf)\n    {\n      fprintf(logf, \"Conditions did not allow or add_response_entry failed for Content-Length; returning MHD_NO\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"Falling through to generic add_response_entry: header=%p, content=%p\\n\",\n            (const void *) header, (const void *) content);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n"
}