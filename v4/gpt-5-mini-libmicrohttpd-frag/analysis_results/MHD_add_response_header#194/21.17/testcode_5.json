{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to MHD_str_equal_caseless_(header, MHD_HTTP_HEADER_TRANSFER_ENCODING) may invoke standard string handling routines (e.g. strcmp/strlen/strncasecmp) on the pointer 'header'. If 'header' is NULL or points to a non\u2013NUL-terminated buffer (or a buffer shorter than expected), such routines can read past the object bounds and cause out-of-bounds accesses. For example, if a caller passes a pointer to a length-limited header buffer without a terminating '\\0', and MHD_str_equal_caseless_ internally uses strlen/strcmp, the comparison will read beyond the buffer boundary and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_add_response_header code that contains useful probe functions that print useful logs to a file \"/tmp/logs/573.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_header:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n    return add_response_header_connection (response, content);\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      return MHD_YES;\n    }\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        return MHD_YES;\n      }\n    }\n    return MHD_NO;\n  }\n\n  return add_response_entry (response,\n                             MHD_HEADER_KIND,\n                             header,\n                             content);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_add_response_header code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_add_response_header with it.\n  - Your function must have the exact same signature as MHD_add_response_header.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_add_response_header to check logs.\n  - Your function MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_add_response_header will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  enum MHD_Result ret = MHD_NO; /* default if not set */\n  /* Attempt to ensure log directory exists; ignore failures */\n  (void) system (\"mkdir -p /tmp/logs\");\n  FILE *mhd_log = fopen (\"/tmp/logs/573.txt\", \"a\");\n  if (NULL != mhd_log)\n  {\n    fprintf (mhd_log, \"MHD_add_response_header ENTER: this=%p response=%p header=%p content=%p flags_auto=0x%lx flags=0x%lx\\n\",\n             (void *) &MHD_add_response_header,\n             (void *) response,\n             (void *) header,\n             (void *) content,\n             (unsigned long) (response ? response->flags_auto : 0UL),\n             (unsigned long) (response ? response->flags : 0UL));\n    fflush (mhd_log);\n  }\n\n  /* Preserve original control flow while inserting logging probes. */\n  {\n    int eq;\n\n    /* CONNECTION header check */\n    eq = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION);\n    if (NULL != mhd_log)\n      fprintf (mhd_log, \"compare header==Connection: header=%p result=%d\\n\",\n               (void *) header, eq);\n    if (eq)\n    {\n      enum MHD_Result r = add_response_header_connection (response, content);\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"add_response_header_connection returned=%d\\n\", r);\n      ret = r;\n      goto end;\n    }\n\n    /* TRANSFER-ENCODING header check */\n    eq = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_TRANSFER_ENCODING);\n    if (NULL != mhd_log)\n      fprintf (mhd_log, \"compare header==Transfer-Encoding: header=%p result=%d\\n\",\n               (void *) header, eq);\n    if (eq)\n    {\n      int eq_content = MHD_str_equal_caseless_ (content, \"chunked\");\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"compare content==\\\"chunked\\\": content=%p result=%d\\n\",\n                 (void *) content, eq_content);\n      if (! eq_content)\n      {\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"Transfer-Encoding rejected: content not \\\"chunked\\\" -> MHD_NO\\n\");\n        ret = MHD_NO;   /* Only \"chunked\" encoding is allowed */\n        goto end;\n      }\n      if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      {\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"Transfer-Encoding already present -> MHD_YES\\n\");\n        ret = MHD_YES;  /* Already has \"chunked\" encoding header */\n        goto end;\n      }\n      if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n           (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n      {\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"Has Content-Length and no Insanity flag -> MHD_NO\\n\");\n        ret = MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n        goto end;\n      }\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"add_response_entry for Transfer-Encoding succeeded -> MHD_YES, flags_auto=0x%lx\\n\",\n                   (unsigned long) response->flags_auto);\n        ret = MHD_YES;\n        goto end;\n      }\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"add_response_entry for Transfer-Encoding failed -> MHD_NO\\n\");\n      ret = MHD_NO;\n      goto end;\n    }\n\n    /* DATE header check */\n    eq = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_DATE);\n    if (NULL != mhd_log)\n      fprintf (mhd_log, \"compare header==Date: header=%p result=%d\\n\",\n               (void *) header, eq);\n    if (eq)\n    {\n      if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n      {\n        struct MHD_HTTP_Res_Header *hdr;\n        hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                           MHD_HTTP_HEADER_DATE,\n                                           MHD_STATICSTR_LEN_ ( \\\n                                             MHD_HTTP_HEADER_DATE));\n        mhd_assert (NULL != hdr);\n        _MHD_remove_header (response, hdr);\n        if (NULL != hdr->value)\n          free (hdr->value);\n        free (hdr->header);\n        free (hdr);\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"Existing Date header removed\\n\");\n      }\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n        if (NULL != mhd_log)\n          fprintf (mhd_log, \"Added Date header -> MHD_YES flags_auto=0x%lx\\n\",\n                   (unsigned long) response->flags_auto);\n        ret = MHD_YES;\n        goto end;\n      }\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"Failed to add Date header -> MHD_NO\\n\");\n      ret = MHD_NO;\n      goto end;\n    }\n\n    /* CONTENT-LENGTH header check */\n    eq = MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONTENT_LENGTH);\n    if (NULL != mhd_log)\n      fprintf (mhd_log, \"compare header==Content-Length: header=%p result=%d\\n\",\n               (void *) header, eq);\n    if (eq)\n    {\n      /* Generally MHD sets automatically correct \"Content-Length\" always when\n       * needed.\n       * Custom \"Content-Length\" header is allowed only in special cases. */\n      if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n           ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n            (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                           | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n      {\n        if (MHD_NO != add_response_entry (response,\n                                          MHD_HEADER_KIND,\n                                          header,\n                                          content))\n        {\n          response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n          if (NULL != mhd_log)\n            fprintf (mhd_log, \"Added Content-Length header -> MHD_YES flags_auto=0x%lx\\n\",\n                     (unsigned long) response->flags_auto);\n          ret = MHD_YES;\n          goto end;\n        }\n      }\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"Content-Length handling did not add header -> MHD_NO\\n\");\n      ret = MHD_NO;\n      goto end;\n    }\n\n    /* Default: add response entry for other headers */\n    {\n      enum MHD_Result rr = add_response_entry (response,\n                                               MHD_HEADER_KIND,\n                                               header,\n                                               content);\n      if (NULL != mhd_log)\n        fprintf (mhd_log, \"default add_response_entry returned=%d\\n\", rr);\n      ret = rr;\n      goto end;\n    }\n  }\n\nend:\n  if (NULL != mhd_log)\n  {\n    fprintf (mhd_log, \"MHD_add_response_header EXIT: returning=%d response=%p flags_auto=0x%lx flags=0x%lx\\n\",\n             ret,\n             (void *) response,\n             (unsigned long) (response ? response->flags_auto : 0UL),\n             (unsigned long) (response ? response->flags : 0UL));\n    fclose (mhd_log);\n  }\n  return ret;\n}\n"
}