{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the callee add_response_entry_n is declared with non-const pointer parameters for the header/content (e.g. add_response_entry_n(..., char *header, size_t header_len, char *content, size_t content_len)). In that case const char * values are passed to non-const char * parameters, meaning the pointers should have been declared to point to const-qualified types (i.e. const char *), so Rule 8.13 is violated. If, however, add_response_entry_n already declares those parameters as const char *, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3825.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_response_entry:\n```c\nstatic enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n\n  if (NULL == content)\n    return MHD_NO;\n\n  header_len = strlen (header);\n  content_len = strlen (content);\n  return add_response_entry_n (response, kind, header,\n                               header_len, content,\n                               content_len) ? MHD_YES : MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_response_entry code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_response_entry with it.\n  - Your function must have the exact same signature as add_response_entry.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_response_entry to check logs.\n  - Your function MUST preserve the original logic of add_response_entry as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_response_entry will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_response_entry as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nadd_response_entry (struct MHD_Response *response,\n                    enum MHD_ValueKind kind,\n                    const char *header,\n                    const char *content)\n{\n  size_t header_len;\n  size_t content_len;\n  FILE *log = fopen(\"/tmp/logs/3825.txt\", \"a\");\n\n  if (log) {\n    fprintf(log, \"ENTER add_response_entry: response=%p kind=%d header=%p content=%p\\n\",\n            (void *) response, (int) kind, (const void *) header, (const void *) content);\n  }\n\n  if (NULL == content) {\n    if (log) {\n      fprintf(log, \"add_response_entry: content is NULL -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* preserve original behavior: strlen(header) may dereference header and crash if header == NULL */\n  header_len = strlen (header);\n  content_len = strlen (content);\n\n  if (log) {\n    fprintf(log, \"add_response_entry: header_len=%zu content_len=%zu\\n\",\n            header_len, content_len);\n    fprintf(log, \"add_response_entry: about to call add_response_entry_n with header=(const char*)%p content=(const char*)%p header_len=%zu content_len=%zu\\n\",\n            (const void *) header, (const void *) content, header_len, content_len);\n  }\n\n  int call_ret = add_response_entry_n (response, kind, header,\n                                       header_len, content,\n                                       content_len);\n\n  enum MHD_Result res = call_ret ? MHD_YES : MHD_NO;\n\n  if (log) {\n    fprintf(log, \"add_response_entry: add_response_entry_n returned %d -> returning %d\\n\",\n            call_ret, (int) res);\n    fclose(log);\n  }\n\n  return res;\n}\n"
}