{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code indexes nn->nonce at position noncelen. The function only checks if (MAX_DIGEST_NONCE_LENGTH < noncelen) return; which allows noncelen == MAX_DIGEST_NONCE_LENGTH. If nn->nonce is declared as an array of length MAX_DIGEST_NONCE_LENGTH (bytes 0..MAX_DIGEST_NONCE_LENGTH-1), then accessing nn->nonce[noncelen] when noncelen == MAX_DIGEST_NONCE_LENGTH is out-of-bounds, violating Rule 21.17. (If, however, nn->nonce is defined with size at least MAX_DIGEST_NONCE_LENGTH+1 to hold a terminator, the access would be safe.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_nonce_nc code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_nonce_nc:\n```c\nstatic enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  mhd_assert (0 != noncelen);\n  mhd_assert (0 != nc);\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  mod = daemon->nonce_nc_size;\n  if (0 == mod)\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  if (nc >= UINT32_MAX - 64)\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n\n  nn = &daemon->nnc[get_nonce_nc_idx (mod, nonce, noncelen)];\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n\n  if ( (0 != memcmp (nn->nonce, nonce, noncelen)) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      ret = MHD_CHECK_NONCENC_WRONG;\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      ret =  MHD_CHECK_NONCENC_STALE;\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        mhd_assert (0); /* The value is the slot is wrong */\n        ret = MHD_CHECK_NONCENC_STALE;\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          ret = MHD_CHECK_NONCENC_WRONG;\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n    }\n    else if (64 == jump_size)\n      nn->nmask = (UINT64_C (1) << 63);\n    else\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n  }\n  else if (nc < nn->nc)\n  {\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n    }\n    else\n      /* 'nc' was already used or too old (more then 64 values ago) */\n      ret = MHD_CHECK_NONCENC_STALE;\n  }\n  else /* if (nc == nn->nc) */\n    /* 'nc' was already used */\n    ret = MHD_CHECK_NONCENC_STALE;\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_nonce_nc code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_nonce_nc with it.\n  - Your function must have the exact same signature as check_nonce_nc.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_nonce_nc to check logs.\n  - Your function MUST preserve the original logic of check_nonce_nc as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_nonce_nc will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_nonce_nc as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_CheckNonceNC_\ncheck_nonce_nc (struct MHD_Connection *connection,\n                const char *nonce,\n                size_t noncelen,\n                uint64_t nonce_time,\n                uint64_t nc)\n{\n  struct MHD_Daemon *daemon = MHD_get_master (connection->daemon);\n  struct MHD_NonceNc *nn;\n  uint32_t mod;\n  enum MHD_CheckNonceNC_ ret;\n\n  /* Open a log for probes. We append so multiple calls accumulate evidence. */\n  FILE *log = fopen(\"/tmp/logs/4483.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER check_nonce_nc: connection=%p daemon=%p nonce=%p noncelen=%zu nonce_time=%llu nc=%llu\\n\",\n            (void *) connection, (void *) daemon, (const void *) nonce,\n            noncelen, (unsigned long long) nonce_time, (unsigned long long) nc);\n    fflush(log);\n  }\n\n  mhd_assert (0 != noncelen);\n  mhd_assert (0 != nc);\n  if (MAX_DIGEST_NONCE_LENGTH < noncelen)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: noncelen (%zu) > MAX_DIGEST_NONCE_LENGTH (%d) -> WRONG\\n\", noncelen, MAX_DIGEST_NONCE_LENGTH);\n      fclose(log);\n    }\n    return MHD_CHECK_NONCENC_WRONG; /* This should be impossible, but static analysis\n                      tools have a hard time with it *and* this also\n                      protects against unsafe modifications that may\n                      happen in the future... */\n  }\n  mod = daemon->nonce_nc_size;\n  if (0 == mod)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: mod == 0 -> STALE\\n\");\n      fclose(log);\n    }\n    return MHD_CHECK_NONCENC_STALE;  /* no array! */\n  }\n  if (nc >= UINT32_MAX - 64)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: nc (%llu) >= UINT32_MAX - 64 -> STALE\\n\", (unsigned long long) nc);\n      fclose(log);\n    }\n    return MHD_CHECK_NONCENC_STALE;  /* Overflow, unrealistically high value */\n  }\n\n  {\n    /* compute index separately so we can log it */\n    uint32_t idx = get_nonce_nc_idx (mod, nonce, noncelen);\n    if (log)\n    {\n      fprintf(log, \"computed idx=%u mod=%u noncelen=%zu\\n\", idx, mod, noncelen);\n      fflush(log);\n    }\n    nn = &daemon->nnc[idx];\n  }\n\n  if (log)\n  {\n    /* log some slot state before locking */\n    fprintf(log, \"before lock: nn=%p nn->nonce=%p nn->nc=%u nn->nmask=%llu\\n\",\n            (void *) nn, (void *) nn->nonce, nn->nc, (unsigned long long) nn->nmask);\n    fflush(log);\n  }\n\n  MHD_mutex_lock_chk_ (&daemon->nnc_lock);\n\n  /* Probe the value at nn->nonce[noncelen] (this is the access under scrutiny).\n     This read duplicates the original mhd_assert read so it reflects the same behavior. */\n  if (log)\n  {\n    unsigned int probe_val = (unsigned int) (unsigned char) nn->nonce[noncelen];\n    fprintf(log, \"after lock: nn->nonce[%zu] = %u (0 means terminator/unused)\\n\", noncelen, probe_val);\n    fflush(log);\n  }\n\n  mhd_assert (0 == nn->nonce[noncelen]); /* The old value must be valid */\n\n  /* Preserve original condition, but compute memcmp result separately so we can log it. */\n  int cmp = 0;\n  if (noncelen > 0)\n    cmp = memcmp (nn->nonce, nonce, noncelen);\n\n  if (log)\n  {\n    fprintf(log, \"memcmp result=%d nn->nonce[%zu]=%u\\n\",\n            cmp, noncelen, (unsigned int) (unsigned char) nn->nonce[noncelen]);\n    fflush(log);\n  }\n\n  if ( (0 != cmp) ||\n       (0 != nn->nonce[noncelen]) )\n  { /* The nonce in the slot does not match nonce from the client */\n    if (0 == nn->nonce[0])\n    { /* The slot was never used, while the client's nonce value should be\n       * recorded when it was generated by MHD */\n      if (log)\n      {\n        fprintf(log, \"branch: slot never used -> WRONG\\n\");\n        fflush(log);\n      }\n      ret = MHD_CHECK_NONCENC_WRONG;\n    }\n    else if (0 != nn->nonce[noncelen])\n    { /* The value is the slot is wrong */\n      if (log)\n      {\n        fprintf(log, \"branch: slot value present at nn->nonce[%zu] != 0 -> STALE\\n\", noncelen);\n        fflush(log);\n      }\n      ret =  MHD_CHECK_NONCENC_STALE;\n    }\n    else\n    {\n      uint64_t slot_ts; /**< The timestamp in the slot */\n      if (! get_nonce_timestamp (nn->nonce, noncelen, &slot_ts))\n      {\n        mhd_assert (0); /* The value is the slot is wrong */\n        if (log)\n        {\n          fprintf(log, \"get_nonce_timestamp failed -> assert triggered -> STALE\\n\");\n          fflush(log);\n        }\n        ret = MHD_CHECK_NONCENC_STALE;\n      }\n      else\n      {\n        /* Unsigned value, will be large if nonce_time is less than slot_ts */\n        const uint64_t ts_diff = TRIM_TO_TIMESTAMP (nonce_time - slot_ts);\n        if (log)\n        {\n          fprintf(log, \"slot_ts=%llu nonce_time=%llu ts_diff=%llu\\n\",\n                  (unsigned long long) slot_ts, (unsigned long long) nonce_time, (unsigned long long) ts_diff);\n          fflush(log);\n        }\n        if ((REUSE_TIMEOUT * 1000) >= ts_diff)\n        {\n          /* The nonce from the client may not have been placed in the slot\n           * because another nonce in that slot has not yet expired. */\n          if (log)\n          {\n            fprintf(log, \"branch: ts_diff <= REUSE_TIMEOUT*1000 -> STALE\\n\");\n            fflush(log);\n          }\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else if (TRIM_TO_TIMESTAMP (UINT64_MAX) / 2 >= ts_diff)\n        {\n          /* Too large value means that nonce_time is less than slot_ts.\n           * The nonce from the client may have been overwritten by the newer\n           * nonce. */\n          if (log)\n          {\n            fprintf(log, \"branch: ts_diff indicates nonce_time < slot_ts -> STALE\\n\");\n            fflush(log);\n          }\n          ret = MHD_CHECK_NONCENC_STALE;\n        }\n        else\n        {\n          /* The nonce from the client should be generated after the nonce\n           * in the slot has been expired, the nonce must be recorded, but\n           * it's not. */\n          if (log)\n          {\n            fprintf(log, \"branch: nonce should have been recorded but was not -> WRONG\\n\");\n            fflush(log);\n          }\n          ret = MHD_CHECK_NONCENC_WRONG;\n        }\n      }\n    }\n  }\n  else if (nc > nn->nc)\n  {\n    /* 'nc' is larger, shift bitmask and bump limit */\n    const uint32_t jump_size = (uint32_t) nc - nn->nc;\n    if (log)\n    {\n      fprintf(log, \"branch: nc > nn->nc (nc=%llu nn->nc=%u) jump_size=%u\\n\",\n              (unsigned long long) nc, nn->nc, jump_size);\n      fflush(log);\n    }\n    if (64 > jump_size)\n    {\n      /* small jump, less than mask width */\n      nn->nmask <<= jump_size;\n      /* Set bit for the old 'nc' value */\n      nn->nmask |= (UINT64_C (1) << (jump_size - 1));\n    }\n    else if (64 == jump_size)\n      nn->nmask = (UINT64_C (1) << 63);\n    else\n      nn->nmask = 0;                /* big jump, unset all bits in the mask */\n    nn->nc = (uint32_t) nc;\n    ret = MHD_CHECK_NONCENC_OK;\n  }\n  else if (nc < nn->nc)\n  {\n    /* Note that we use 64 here, as we do not store the\n       bit for 'nn->nc' itself in 'nn->nmask' */\n    if (log)\n    {\n      fprintf(log, \"branch: nc < nn->nc (nc=%llu nn->nc=%u) nn->nmask=%llu\\n\",\n              (unsigned long long) nc, nn->nc, (unsigned long long) nn->nmask);\n      fflush(log);\n    }\n    if ( (nc + 64 >= nn->nc) &&\n         (0 == ((UINT64_C (1) << (nn->nc - nc - 1)) & nn->nmask)) )\n    {\n      /* Out-of-order nonce, but within 64-bit bitmask, set bit */\n      nn->nmask |= (UINT64_C (1) << (nn->nc - nc - 1));\n      ret = MHD_CHECK_NONCENC_OK;\n    }\n    else\n      /* 'nc' was already used or too old (more then 64 values ago) */\n      ret = MHD_CHECK_NONCENC_STALE;\n  }\n  else /* if (nc == nn->nc) */\n  {\n    /* 'nc' was already used */\n    if (log)\n    {\n      fprintf(log, \"branch: nc == nn->nc -> STALE\\n\");\n      fflush(log);\n    }\n    ret = MHD_CHECK_NONCENC_STALE;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to unlock: ret=%d nn->nc=%u nn->nmask=%llu\\n\",\n            (int) ret, nn->nc, (unsigned long long) nn->nmask);\n    fflush(log);\n  }\n\n  MHD_mutex_unlock_chk_ (&daemon->nnc_lock);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT check_nonce_nc: ret=%d\\n\", (int) ret);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}