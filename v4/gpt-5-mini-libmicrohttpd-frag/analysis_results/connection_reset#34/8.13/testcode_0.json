{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'd' is declared as 'struct MHD_Daemon *const d = connection->daemon;'. The function only reads members of *d (e.g. d->notify_completed, d->notify_completed_cls) and does not modify the daemon object, so the pointer should point to a const-qualified type. In other words it should be 'const struct MHD_Daemon *const d' (or at least 'const struct MHD_Daemon *d') to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2785.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_reset:\n```c\nstatic void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n      MHD_destroy_response (c->rp.response);\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n  }\n  c->rq.client_context = NULL;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_reset code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_reset with it.\n  - Your function must have the exact same signature as connection_reset.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_reset to check logs.\n  - Your function MUST preserve the original logic of connection_reset as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_reset will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_reset as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nconnection_reset (struct MHD_Connection *connection,\n                  bool reuse)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Daemon *const d = connection->daemon;\n  FILE *log = fopen(\"/tmp/logs/2785.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER connection_reset: connection=%p, daemon=%p, reuse=%d\\n\",\n            (void *)connection, (void *)d, reuse ? 1 : 0);\n    /* Log some initial state that helps reproduce the violation scenario */\n    fprintf(log, \" initial state: stop_with_error=%d, discard_request=%d, rq.client_aware=%d, read_buffer=%p, read_buffer_offset=%zu, read_buffer_size=%zu\\n\",\n            c->stop_with_error ? 1 : 0,\n            c->discard_request ? 1 : 0,\n            c->rq.client_aware ? 1 : 0,\n            (void *)c->read_buffer,\n            (size_t)c->read_buffer_offset,\n            (size_t)c->read_buffer_size);\n    if (d)\n    {\n      fprintf(log, \" daemon: notify_completed=%p, notify_completed_cls=%p, pool_size=%zu\\n\",\n              (void *)d->notify_completed,\n              (void *)d->notify_completed_cls,\n              (size_t)d->pool_size);\n    }\n  }\n\n  if (! reuse)\n  {\n    /* Next function will destroy response, notify client,\n     * destroy memory pool, and set connection state to \"CLOSED\" */\n    if (log)\n      fprintf(log, \"BRANCH: !reuse -> closing connection. Calling MHD_connection_close_. stop_with_error=%d\\n\",\n              c->stop_with_error ? 1 : 0);\n\n    MHD_connection_close_ (c,\n                           c->stop_with_error ?\n                           MHD_REQUEST_TERMINATED_WITH_ERROR :\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n\n    if (log)\n    {\n      fprintf(log, \"after MHD_connection_close_. Setting read/write buffer fields to NULL/0\\n\");\n    }\n\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    c->read_buffer_offset = 0;\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n\n    if (log)\n      fprintf(log, \"BRANCH !reuse done\\n\");\n  }\n  else\n  {\n    /* Reset connection to process the next request */\n    size_t new_read_buf_size;\n    mhd_assert (! c->stop_with_error);\n    mhd_assert (! c->discard_request);\n\n    if (log)\n      fprintf(log, \"BRANCH: reuse -> reset for next request. rq.client_aware=%d\\n\",\n              c->rq.client_aware ? 1 : 0);\n\n    if ( (NULL != d->notify_completed) &&\n         (c->rq.client_aware) )\n    {\n      if (log)\n      {\n        fprintf(log, \"notify_completed will be invoked: func=%p, cls=%p, connection=%p, client_context=%p\\n\",\n                (void *)d->notify_completed,\n                (void *)d->notify_completed_cls,\n                (void *)c,\n                (void *)c->rq.client_context);\n      }\n\n      d->notify_completed (d->notify_completed_cls,\n                           c,\n                           &c->rq.client_context,\n                           MHD_REQUEST_TERMINATED_COMPLETED_OK);\n\n      if (log)\n        fprintf(log, \"notify_completed returned. rq.client_context now=%p\\n\",\n                (void *)c->rq.client_context);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"notify_completed not called: notify_completed=%p, client_aware=%d\\n\",\n                (void *)d->notify_completed,\n                c->rq.client_aware ? 1 : 0);\n    }\n\n    c->rq.client_aware = false;\n\n    if (NULL != c->rp.response)\n    {\n      if (log)\n        fprintf(log, \"Destroying existing response: %p\\n\", (void *)c->rp.response);\n      MHD_destroy_response (c->rp.response);\n    }\n    c->rp.response = NULL;\n\n    c->keepalive = MHD_CONN_KEEPALIVE_UNKOWN;\n    c->state = MHD_CONNECTION_INIT;\n    c->event_loop_info =\n      (0 == c->read_buffer_offset) ?\n      MHD_EVENT_LOOP_INFO_READ : MHD_EVENT_LOOP_INFO_PROCESS;\n\n    if (log)\n      fprintf(log, \"Resetting rq/rp structs and buffers. event_loop_info=%d\\n\", (int)c->event_loop_info);\n\n    memset (&c->rq, 0, sizeof(c->rq));\n\n    /* iov (if any) will be deallocated by MHD_pool_reset */\n    memset (&c->rp, 0, sizeof(c->rp));\n\n    c->write_buffer = NULL;\n    c->write_buffer_size = 0;\n    c->write_buffer_send_offset = 0;\n    c->write_buffer_append_offset = 0;\n    c->continue_message_write_offset = 0;\n\n    /* Reset the read buffer to the starting size,\n       preserving the bytes we have already read. */\n    new_read_buf_size = c->daemon->pool_size / 2;\n    if (c->read_buffer_offset > new_read_buf_size)\n      new_read_buf_size = c->read_buffer_offset;\n\n    if (log)\n      fprintf(log, \"Before MHD_pool_reset: old_read_buffer=%p, read_buffer_offset=%zu, computed_new_read_buf_size=%zu\\n\",\n              (void *)c->read_buffer,\n              (size_t)c->read_buffer_offset,\n              (size_t)new_read_buf_size);\n\n    c->read_buffer\n      = MHD_pool_reset (c->pool,\n                        c->read_buffer,\n                        c->read_buffer_offset,\n                        new_read_buf_size);\n    c->read_buffer_size = new_read_buf_size;\n\n    if (log)\n      fprintf(log, \"After MHD_pool_reset: new_read_buffer=%p, read_buffer_size=%zu\\n\",\n              (void *)c->read_buffer,\n              (size_t)c->read_buffer_size);\n\n    if (log)\n      fprintf(log, \"BRANCH reuse done\\n\");\n  }\n\n  c->rq.client_context = NULL;\n\n  if (log)\n  {\n    fprintf(log, \"EXIT connection_reset: rq.client_context=%p\\n\\n\", (void *)c->rq.client_context);\n    fclose(log);\n  }\n}\n"
}