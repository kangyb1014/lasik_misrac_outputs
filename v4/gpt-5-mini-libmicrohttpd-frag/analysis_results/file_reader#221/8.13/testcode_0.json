{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *cls' is not const-qualified even though the function only reads from the pointed-to object (it casts cls to struct MHD_Response *response and only reads response->fd and response->fd_off). According to MISRA C 2023 Rule 8.13 it should be declared as const (e.g. const void *cls and const struct MHD_Response *response). The 'char *buf' is correctly non-const because the function writes into it.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified file_reader code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3865.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  if (offset64 < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n\n#if defined(HAVE_PREAD64)\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n#endif /* ! HAVE_LSEEK64 */\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    if (0 == resRead)\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified file_reader code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original file_reader with it.\n  - Your function must have the exact same signature as file_reader.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call file_reader to check logs.\n  - Your function MUST preserve the original logic of file_reader as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, file_reader will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of file_reader as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static ssize_t\nfile_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  FILE *log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER file_reader: cls=%p pos=%llu buf=%p max=%zu\\n\",\n            (void *) cls, (unsigned long long) pos, (void *) buf, max);\n    if (response)\n      fprintf(log, \" response->fd=%d response->fd_off=%lld\\n\",\n              response->fd, (long long) response->fd_off);\n    else\n      fprintf(log, \" response is NULL\\n\");\n    fclose(log);\n  }\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  ssize_t n;\n#else  /* _WIN32 && !__CYGWIN__ */\n  const HANDLE fh = (HANDLE) (uintptr_t) _get_osfhandle (response->fd);\n#endif /* _WIN32 && !__CYGWIN__ */\n  const int64_t offset64 = (int64_t) (pos + response->fd_off);\n\n  if (offset64 < 0)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"OFFSET NEGATIVE: offset64=%lld -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\", (long long) offset64);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n  if (max > SSIZE_MAX)\n    max = SSIZE_MAX; /* Clamp to maximum return value. */\n\n#if defined(HAVE_PREAD64)\n  log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"CALL pread64: fd=%d offset64=%lld max=%zu\\n\",\n            response->fd, (long long) offset64, max);\n    fclose(log);\n  }\n  n = pread64 (response->fd, buf, max, offset64);\n#elif defined(HAVE_PREAD)\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"OFFSET TOO LARGE FOR pread: offset64=%lld -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\", (long long) offset64);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Read at required position is not possible. */\n  }\n\n  log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"CALL pread: fd=%d offset64=%lld max=%zu\\n\",\n            response->fd, (long long) offset64, max);\n    fclose(log);\n  }\n  n = pread (response->fd, buf, max, (off_t) offset64);\n#else  /* ! HAVE_PREAD */\n#if defined(HAVE_LSEEK64)\n  if (lseek64 (response->fd,\n               offset64,\n               SEEK_SET) != offset64)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"lseek64 failed: fd=%d offset64=%lld -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\",\n              response->fd, (long long) offset64);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#else  /* ! HAVE_LSEEK64 */\n  if ( (sizeof(off_t) < sizeof (uint64_t)) &&\n       (offset64 > (uint64_t) INT32_MAX) )\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"OFFSET TOO LARGE FOR lseek: offset64=%lld -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\", (long long) offset64);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* seek to required position is not possible */\n  }\n\n  if (lseek (response->fd,\n             (off_t) offset64,\n             SEEK_SET) != (off_t) offset64)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"lseek failed: fd=%d offset64=%lld -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\",\n              response->fd, (long long) offset64);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* can't seek to required position */\n  }\n#endif /* ! HAVE_LSEEK64 */\n  log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"CALL read: fd=%d offset64=%lld max=%zu\\n\",\n            response->fd, (long long) offset64, max);\n    fclose(log);\n  }\n  n = read (response->fd,\n            buf,\n            max);\n\n#endif /* ! HAVE_PREAD */\n  if (0 == n)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"READ returned 0 -> MHD_CONTENT_READER_END_OF_STREAM\\n\");\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n  if (n < 0)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"READ returned error n=%zd -> MHD_CONTENT_READER_END_WITH_ERROR\\n\", n);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  }\n  log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"READ succeeded n=%zd -> RETURN n\\n\", n);\n    fclose(log);\n  }\n  return n;\n#else /* _WIN32 && !__CYGWIN__ */\n  if (INVALID_HANDLE_VALUE == fh)\n  {\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"INVALID HANDLE fh=%p -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\", (void *) fh);\n      fclose(log);\n    }\n    return MHD_CONTENT_READER_END_WITH_ERROR; /* Value of 'response->fd' is not valid. */\n  }\n  else\n  {\n    OVERLAPPED f_ol = {0, 0, {{0, 0}}, 0};   /* Initialize to zero. */\n    ULARGE_INTEGER pos_uli;\n    DWORD toRead = (max > INT32_MAX) ? INT32_MAX : (DWORD) max;\n    DWORD resRead;\n\n    pos_uli.QuadPart = (uint64_t) offset64;   /* Simple transformation 64bit -> 2x32bit. */\n    f_ol.Offset = pos_uli.LowPart;\n    f_ol.OffsetHigh = pos_uli.HighPart;\n\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Windows ReadFile: fh=%p offset64=%lld toRead=%u\\n\", (void *) fh, (long long) offset64, toRead);\n      fclose(log);\n    }\n\n    if (! ReadFile (fh, (void *) buf, toRead, &resRead, &f_ol))\n    {\n      log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"ReadFile failed -> RETURN MHD_CONTENT_READER_END_WITH_ERROR\\n\");\n        fclose(log);\n      }\n      return MHD_CONTENT_READER_END_WITH_ERROR;   /* Read error. */\n    }\n    if (0 == resRead)\n    {\n      log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"ReadFile returned 0 -> MHD_CONTENT_READER_END_OF_STREAM\\n\");\n        fclose(log);\n      }\n      return MHD_CONTENT_READER_END_OF_STREAM;\n    }\n    log = fopen(\"/tmp/logs/3865.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ReadFile succeeded resRead=%u -> RETURN %zd\\n\", resRead, (ssize_t) resRead);\n      fclose(log);\n    }\n    return (ssize_t) resRead;\n  }\n#endif /* _WIN32 && !__CYGWIN__ */\n}\n"
}