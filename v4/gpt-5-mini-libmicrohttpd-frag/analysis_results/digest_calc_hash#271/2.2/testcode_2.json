{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug-only/no-op macro in production builds (i.e. it expands to nothing when assertions are disabled), then the statement mhd_assert(0); is executed (or present) but its removal would not affect program behaviour. In that configuration the assertion is dead code because it has no effect in the delivered binary. Replace it with a guaranteed runtime action (e.g. a non-compiled-out error/abort handler or explicit error return) to avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified digest_calc_hash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/678.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of digest_calc_hash:\n```c\n_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* Should not happen */\n#ifdef _DEBUG\n  da->hashing = false;\n#endif /* _DEBUG */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified digest_calc_hash code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original digest_calc_hash with it.\n  - Your function must have the exact same signature as digest_calc_hash.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call digest_calc_hash to check logs.\n  - Your function MUST preserve the original logic of digest_calc_hash as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, digest_calc_hash will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of digest_calc_hash as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n#include <stdio.h>\n\n  /* Minimal probe logging to help reproduce the reported dead-code scenario.\n     Logs are appended to /tmp/logs/678.txt. This logging is intentionally\n     lightweight and preserves the original control flow and side effects. */\n  FILE *mhd_log = fopen(\"/tmp/logs/678.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"digest_calc_hash ENTRY: da=%p, algo=%d, uninitialised=%d, algo_selected=%d, ready_for_hashing=%d\\n\",\n            (void *)da,\n            (int)da->algo,\n            (int)da->uninitialised,\n            (int)da->algo_selected,\n            (int)da->ready_for_hashing);\n    fflush(mhd_log);\n  }\n\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: MD5 finish called. digest[0..3]=%02x %02x %02x %02x\\n\",\n              digest ? digest[0] : 0,\n              digest ? digest[1] : 0,\n              digest ? digest[2] : 0,\n              digest ? digest[3] : 0);\n      fflush(mhd_log);\n    }\n#else  /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: MD5 finish_reset called. digest[0..3]=%02x %02x %02x %02x\\n\",\n              digest ? digest[0] : 0,\n              digest ? digest[1] : 0,\n              digest ? digest[2] : 0,\n              digest ? digest[3] : 0);\n      fflush(mhd_log);\n    }\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: SHA256 finish called. digest[0..3]=%02x %02x %02x %02x\\n\",\n              digest ? digest[0] : 0,\n              digest ? digest[1] : 0,\n              digest ? digest[2] : 0,\n              digest ? digest[3] : 0);\n      fflush(mhd_log);\n    }\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: SHA256 finish_reset called. digest[0..3]=%02x %02x %02x %02x\\n\",\n              digest ? digest[0] : 0,\n              digest ? digest[1] : 0,\n              digest ? digest[2] : 0,\n              digest ? digest[3] : 0);\n      fflush(mhd_log);\n    }\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: SHA512_256 finish called. digest[0..3]=%02x %02x %02x %02x\\n\",\n              digest ? digest[0] : 0,\n              digest ? digest[1] : 0,\n              digest ? digest[2] : 0,\n              digest ? digest[3] : 0);\n      fflush(mhd_log);\n    }\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  {\n    /* Default/fall-through: this mirrors the original mhd_assert(0) location.\n       We log the fact that control reached the unexpected branch before\n       invoking the assertion so that runs with mhd_assert compiled out still\n       produce evidence (the log) that this path was reached. */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"digest_calc_hash: FALL-THROUGH (unexpected alg=%d). About to call mhd_assert(0). ready_for_hashing=%d, hashing=%d\\n\",\n              (int)da->algo,\n              (int)da->ready_for_hashing,\n#ifdef _DEBUG\n              (int)da->hashing\n#else\n              -1\n#endif\n              );\n      fflush(mhd_log);\n    }\n\n    mhd_assert (0);   /* Should not happen */\n  }\n#ifdef _DEBUG\n  da->hashing = false;\n#endif /* _DEBUG */\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"digest_calc_hash EXIT: da=%p\\n\", (void *)da);\n    fclose(mhd_log);\n  }\n}\n"
}