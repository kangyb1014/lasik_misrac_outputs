{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: digest_update likely copies username_len bytes from the pointer username (e.g. via memcpy/memmove). If username does not actually point to an object at least username_len bytes long, this call can read beyond the bounds. Example concrete scenario: username points to the string \"bob\" (4 bytes including '\\0') but username_len is 10 (e.g. due to a bug or attacker-controlled value); if digest_update uses memcpy(dest, username, username_len) this will access bytes beyond the end of the username object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/463.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calc_userdigest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calc_userdigest with it.\n  - Your function must have the exact same signature as calc_userdigest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calc_userdigest to check logs.\n  - Your function MUST preserve the original logic of calc_userdigest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calc_userdigest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calc_userdigest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Preserve original assertion behavior */\n  mhd_assert (! da->hashing);\n\n  /* Open log file for appending diagnostic traces. If opening fails,\n     we continue without logging so original functionality is preserved. */\n  FILE *log = fopen(\"/tmp/logs/463.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER calc_userdigest\\n\");\n    fprintf(log, \"  da=%p, da->hashing=%d\\n\", (void *)da, (da ? (int)da->hashing : -1));\n    fprintf(log, \"  username=%p, username_len=%zu\\n\", (const void *)username, username_len);\n    fprintf(log, \"  realm=%p, realm_len=%zu\\n\", (const void *)realm, realm_len);\n    fprintf(log, \"  password=%p, ha1_bin=%p\\n\", (const void *)password, (void *)ha1_bin);\n    fprintf(log, \"  -> calling digest_update( username, username_len )\\n\");\n    fflush(log);\n  }\n\n  /* Original logic: update with username bytes as specified by username_len. */\n  digest_update (da, username, username_len);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_update( username )\\n\");\n    fprintf(log, \"  -> calling digest_update_with_colon()\\n\");\n    fflush(log);\n  }\n\n  digest_update_with_colon (da);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_update_with_colon()\\n\");\n    fprintf(log, \"  -> calling digest_update( realm, realm_len )\\n\");\n    fflush(log);\n  }\n\n  /* Original logic: update with realm bytes as specified by realm_len. */\n  digest_update (da, realm, realm_len);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_update( realm )\\n\");\n    fprintf(log, \"  -> calling digest_update_with_colon() (second)\\n\");\n    fflush(log);\n  }\n\n  digest_update_with_colon (da);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_update_with_colon() (second)\\n\");\n    fprintf(log, \"  -> calling digest_update_str( password )\\n\");\n    fflush(log);\n  }\n\n  digest_update_str (da, password);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_update_str( password )\\n\");\n    fprintf(log, \"  -> calling digest_calc_hash( ha1_bin )\\n\");\n    fflush(log);\n  }\n\n  digest_calc_hash (da, ha1_bin);\n\n  if (log)\n  {\n    fprintf(log, \"  returned from digest_calc_hash( ha1_bin )\\n\");\n    fprintf(log, \"EXIT calc_userdigest\\n\\n\");\n    fclose(log);\n  }\n}\n"
}