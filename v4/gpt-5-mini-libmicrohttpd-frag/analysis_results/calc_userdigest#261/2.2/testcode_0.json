{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a typical assertion macro that evaluates '!da->hashing' only in debug builds but expands to ((void)0) (no code) in production (e.g. when NDEBUG is defined), then the assert expression is an operation whose removal would not affect normal program behaviour. In that configuration the check is effectively dead code (it is executed only for diagnostics and has no impact on released behaviour). If, conversely, mhd_assert produces an observable effect in all builds (logging, abort, or other side\u2011effects), then it would not be dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/468.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calc_userdigest:\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calc_userdigest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calc_userdigest with it.\n  - Your function must have the exact same signature as calc_userdigest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calc_userdigest to check logs.\n  - Your function MUST preserve the original logic of calc_userdigest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calc_userdigest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calc_userdigest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  /* Open log file for collecting control flow/state information. */\n  FILE *logf = fopen(\"/tmp/logs/468.txt\", \"a\");\n  if (logf) {\n    fprintf(logf, \"ENTER calc_userdigest: this=%p da=%p\\n\", (void *)0, (void *)da);\n    fprintf(logf, \"  da->hashing (raw) = %d\\n\", (int)da->hashing);\n    fprintf(logf, \"  username=%p username_len=%zu realm=%p realm_len=%zu password=%p ha1_bin=%p\\n\",\n            (void *)username, username_len, (void *)realm, realm_len, (void *)password, (void *)ha1_bin);\n\n    /* Log up to the first 16 bytes of username and realm as hex to avoid large output and safely\n       observe buffer contents without assuming NUL termination. */\n    size_t i, max;\n    max = (username && username_len > 0) ? (username_len < 16 ? username_len : 16) : 0;\n    fprintf(logf, \"  username_bytes (up to 16):\");\n    for (i = 0; i < max; ++i) {\n      fprintf(logf, \" %02x\", (unsigned char)username[i]);\n    }\n    if (max == 0) fprintf(logf, \" (none)\");\n    fprintf(logf, \"\\n\");\n\n    max = (realm && realm_len > 0) ? (realm_len < 16 ? realm_len : 16) : 0;\n    fprintf(logf, \"  realm_bytes (up to 16):\");\n    for (i = 0; i < max; ++i) {\n      fprintf(logf, \" %02x\", (unsigned char)realm[i]);\n    }\n    if (max == 0) fprintf(logf, \" (none)\");\n    fprintf(logf, \"\\n\");\n\n    fflush(logf);\n  }\n\n  /* Probe the assertion point. Keep the original call so behavior is preserved. */\n  if (logf) fprintf(logf, \"  invoking mhd_assert(!da->hashing) ; observed da->hashing=%d\\n\", (int)da->hashing);\n  mhd_assert (! da->hashing);\n  if (logf) {\n    fprintf(logf, \"  returned from mhd_assert ; da->hashing=%d\\n\", (int)da->hashing);\n    fflush(logf);\n  }\n\n  /* Preserve original digest computation sequence. Add lightweight probes before/after\n     each call to capture control flow. */\n  if (logf) { fprintf(logf, \"  -> digest_update(username)\\n\"); fflush(logf); }\n  digest_update (da, username, username_len);\n  if (logf) { fprintf(logf, \"  <- digest_update(username)\\n\"); fflush(logf); }\n\n  if (logf) { fprintf(logf, \"  -> digest_update_with_colon() [1]\\n\"); fflush(logf); }\n  digest_update_with_colon (da);\n  if (logf) { fprintf(logf, \"  <- digest_update_with_colon() [1]\\n\"); fflush(logf); }\n\n  if (logf) { fprintf(logf, \"  -> digest_update(realm)\\n\"); fflush(logf); }\n  digest_update (da, realm, realm_len);\n  if (logf) { fprintf(logf, \"  <- digest_update(realm)\\n\"); fflush(logf); }\n\n  if (logf) { fprintf(logf, \"  -> digest_update_with_colon() [2]\\n\"); fflush(logf); }\n  digest_update_with_colon (da);\n  if (logf) { fprintf(logf, \"  <- digest_update_with_colon() [2]\\n\"); fflush(logf); }\n\n  if (logf) { fprintf(logf, \"  -> digest_update_str(password)\\n\"); fflush(logf); }\n  digest_update_str (da, password);\n  if (logf) { fprintf(logf, \"  <- digest_update_str(password)\\n\"); fflush(logf); }\n\n  if (logf) { fprintf(logf, \"  -> digest_calc_hash(ha1_bin)\\n\"); fflush(logf); }\n  digest_calc_hash (da, ha1_bin);\n  if (logf) {\n    fprintf(logf, \"  <- digest_calc_hash(ha1_bin)\\n\");\n    /* Optionally log first few bytes of ha1_bin to witness final state (if non-null). */\n    if (ha1_bin) {\n      size_t show = 16; /* arbitrary small amount */\n      fprintf(logf, \"  ha1_bin bytes (up to %zu):\", show);\n      for (i = 0; i < show; ++i) {\n        fprintf(logf, \" %02x\", (unsigned char)ha1_bin[i]);\n      }\n      fprintf(logf, \"\\n\");\n    }\n    fprintf(logf, \"EXIT calc_userdigest\\n\\n\");\n    fflush(logf);\n    fclose(logf);\n  }\n}\n"
}