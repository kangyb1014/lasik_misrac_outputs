{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nInside the while loop the condition is 'while (MHD_RO_END != (ro = va_arg(ap, enum MHD_ResponseOptions)))', so the loop body is executed only when ro != MHD_RO_END. Therefore the switch case 'case MHD_RO_END:' inside that body can never be reached (dead code). This is a direct violation of MISRA C 2023 Rule 2.1 (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_response_options code that contains useful probe functions that print useful logs to a file \"/tmp/logs/416.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_response_options:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_response_options code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_response_options with it.\n  - Your function must have the exact same signature as MHD_set_response_options.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_response_options to check logs.\n  - Your function MUST preserve the original logic of MHD_set_response_options as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_response_options will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_response_options as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n  FILE *log = NULL;\n\n  /* Open log file for appending; best-effort logging. */\n  log = fopen(\"/tmp/logs/416.txt\", \"a\");\n  if (log)\n    fprintf(log, \"ENTER: MHD_set_response_options(response=%p, flags=0x%X)\\n\",\n            (void *)response, (unsigned)flags);\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if (log)\n      fprintf(log, \"Branch: HAS_CONTENT_LENGTH set in flags_auto=0x%X, response->flags=0x%X\\n\",\n              (unsigned)response->flags_auto, (unsigned)response->flags);\n\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      if (log)\n        fprintf(log, \"Early return MHD_NO: attempted to remove INSANITY_HEADER_CONTENT_LENGTH while present in response\\n\");\n      if (log) fclose(log);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (log)\n        fprintf(log, \"Branch: had HEAD_ONLY_RESPONSE in response but requested to remove it\\n\");\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        if (log)\n          fprintf(log, \"Early return MHD_NO: removal of HEAD_ONLY_RESPONSE without INSANITY_HEADER_CONTENT_LENGTH\\n\");\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    if (log)\n      fprintf(log, \"Early return MHD_NO: HEAD_ONLY_RESPONSE requested but total_size=%llu != 0\\n\",\n              (unsigned long long)response->total_size);\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n  if (log)\n    fprintf(log, \"After set: response->flags set to 0x%X, ret=MHD_YES\\n\", (unsigned)response->flags);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    if (log)\n      fprintf(log, \"Loop iteration: obtained ro=%d\\n\", (int)ro);\n\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      if (log)\n        fprintf(log, \"Inside switch: case MHD_RO_END reached (this should be unreachable because loop condition stops on MHD_RO_END).\\n\");\n      break;\n    default:\n      if (log)\n        fprintf(log, \"Inside switch: default case -> setting ret=MHD_NO (ro=%d)\\n\", (int)ro);\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: MHD_set_response_options returning %s\\n\",\n            (ret == MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n    fclose(log);\n  }\n  return ret;\n}\n"
}