{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert expands to a non\u2011returning failure handler (for example it calls abort() or is annotated [[noreturn]]), then when the if condition is true the call mhd_assert(0) will not return and the subsequent 'return false;' is unreachable. In that configuration the code contains unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_grow_read_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/306.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_grow_read_buffer:\n```c\nstatic bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  if (0 == avail_size)\n    return false;               /* No more space available */\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    mhd_assert (0);\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    mhd_assert (0);\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_grow_read_buffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_grow_read_buffer with it.\n  - Your function must have the exact same signature as try_grow_read_buffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_grow_read_buffer to check logs.\n  - Your function MUST preserve the original logic of try_grow_read_buffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_grow_read_buffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_grow_read_buffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ntry_grow_read_buffer (struct MHD_Connection *connection,\n                      bool required)\n{\n  size_t new_size;\n  size_t avail_size;\n  const size_t def_grow_size = connection->daemon->pool_increment;\n  void *rb;\n\n  /* Log entry and basic state */\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"ENTER try_grow_read_buffer: connection=%p required=%d read_buffer=%p read_buffer_size=%zu read_buffer_offset=%zu pool=%p daemon=%p def_grow_size=%zu\\n\",\n              (void *)connection,\n              (int) required,\n              (void *) connection->read_buffer,\n              (size_t) connection->read_buffer_size,\n              (size_t) connection->read_buffer_offset,\n              (void *) connection->pool,\n              (void *) connection->daemon,\n              (size_t) def_grow_size);\n      fclose(logf);\n    }\n  }\n\n  avail_size = MHD_pool_get_free (connection->pool);\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"MHD_pool_get_free -> avail_size=%zu\\n\", (size_t) avail_size);\n      fclose(logf);\n    }\n  }\n\n  if (0 == avail_size)\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT try_grow_read_buffer: No space available -> returning false\\n\");\n      fclose(logf);\n    }\n    return false;               /* No more space available */\n  }\n  if (0 == connection->read_buffer_size)\n    new_size = avail_size / 2;  /* Use half of available buffer for reading */\n  else\n  {\n    size_t grow_size;\n\n    grow_size = avail_size / 8;\n    if (def_grow_size > grow_size)\n    {                  /* Shortage of space */\n      const size_t left_free =\n        connection->read_buffer_size - connection->read_buffer_offset;\n\n      /* Log sizes before the assert */\n      {\n        FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"Shortage branch: def_grow_size=%zu grow_size=%zu left_free=%zu read_buffer_size=%zu read_buffer_offset=%zu\\n\",\n                  (size_t) def_grow_size,\n                  (size_t) grow_size,\n                  (size_t) left_free,\n                  (size_t) connection->read_buffer_size,\n                  (size_t) connection->read_buffer_offset);\n          fclose(logf);\n        }\n      }\n\n      mhd_assert (connection->read_buffer_size >= \\\n                  connection->read_buffer_offset);\n      if ((def_grow_size <= grow_size + left_free)\n          && (left_free < def_grow_size))\n        grow_size = def_grow_size - left_free;  /* Use precise 'def_grow_size' for new free space */\n      else if (! required)\n      {\n        FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"Shortage but not required -> returning false\\n\");\n          fclose(logf);\n        }\n        return false;                           /* Grow is not mandatory, leave some space in pool */\n      }\n      else\n      {\n        /* Shortage of space, but grow is mandatory */\n        const size_t small_inc =\n          ((MHD_BUF_INC_SIZE > def_grow_size) ?\n           def_grow_size : MHD_BUF_INC_SIZE) / 8;\n        if (small_inc < avail_size)\n          grow_size = small_inc;\n        else\n          grow_size = avail_size;\n\n        {\n          FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n          if (logf)\n          {\n            fprintf(logf, \"Mandatory grow: small_inc=%zu chosen grow_size=%zu avail_size=%zu\\n\",\n                    (size_t) small_inc, (size_t) grow_size, (size_t) avail_size);\n            fclose(logf);\n          }\n        }\n      }\n    }\n    new_size = connection->read_buffer_size + grow_size;\n\n    {\n      FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"Computed new_size=%zu (read_buffer_size=%zu grow_size=%zu)\\n\",\n                (size_t) new_size, (size_t) connection->read_buffer_size, (size_t) (new_size - connection->read_buffer_size));\n        fclose(logf);\n      }\n    }\n  }\n  /* Make sure that read buffer will not be moved */\n  if ((NULL != connection->read_buffer) &&\n      ! MHD_pool_is_resizable_inplace (connection->pool,\n                                       connection->read_buffer,\n                                       connection->read_buffer_size))\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Buffer not resizable inplace: pool=%p read_buffer=%p read_buffer_size=%zu -> about to call mhd_assert(0) and then return false\\n\",\n              (void *) connection->pool,\n              (void *) connection->read_buffer,\n              (size_t) connection->read_buffer_size);\n      fclose(logf);\n    }\n\n    mhd_assert (0);\n    FILE *logf_after = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf_after)\n    {\n      /* If mhd_assert is non-returning this will not be reached; if it is a no-op this documents the continuation */\n      fprintf(logf_after, \"After mhd_assert(0) in resizable_inplace check -> returning false\\n\");\n      fclose(logf_after);\n    }\n    return false;\n  }\n  /* we can actually grow the buffer, do it! */\n  rb = MHD_pool_reallocate (connection->pool,\n                            connection->read_buffer,\n                            connection->read_buffer_size,\n                            new_size);\n  if (NULL == rb)\n  {\n    /* This should NOT be possible: we just computed 'new_size' so that\n       it should fit. If it happens, somehow our read buffer is not in\n       the right position in the pool, say because someone called\n       MHD_pool_allocate() without 'from_end' set to 'true'? Anyway,\n       should be investigated! (Ideally provide all data from\n       *pool and connection->read_buffer and new_size for debugging). */\n    {\n      FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"MHD_pool_reallocate returned NULL: pool=%p read_buffer=%p read_buffer_size=%zu new_size=%zu -> about to call mhd_assert(0) and return false\\n\",\n                (void *) connection->pool,\n                (void *) connection->read_buffer,\n                (size_t) connection->read_buffer_size,\n                (size_t) new_size);\n        fclose(logf);\n      }\n    }\n\n    mhd_assert (0);\n    {\n      FILE *logf_after = fopen(\"/tmp/logs/306.txt\", \"a\");\n      if (logf_after)\n      {\n        /* If mhd_assert is non-returning this will not be reached */\n        fprintf(logf_after, \"After mhd_assert(0) for reallocate failure -> returning false\\n\");\n        fclose(logf_after);\n      }\n    }\n    return false;\n  }\n  mhd_assert (connection->read_buffer == rb);\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Reallocation succeeded: old_read_buffer=%p new_read_buffer=%p new_size=%zu\\n\",\n              (void *) connection->read_buffer,\n              (void *) rb,\n              (size_t) new_size);\n      fclose(logf);\n    }\n  }\n\n  connection->read_buffer = rb;\n  mhd_assert (NULL != connection->read_buffer);\n  connection->read_buffer_size = new_size;\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/306.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT try_grow_read_buffer: success -> returning true (read_buffer=%p read_buffer_size=%zu)\\n\",\n              (void *) connection->read_buffer,\n              (size_t) connection->read_buffer_size);\n      fclose(logf);\n    }\n  }\n  return true;\n}\n"
}