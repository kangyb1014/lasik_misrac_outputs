{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a non-const pointer (struct MHD_Connection *connection) and creates a const pointer to non-const data (struct MHD_Connection *const c). The fragment reads c->rq.http_mthd without modifying the object, so the pointed-to type could and should be const-qualified (e.g. const struct MHD_Connection *connection and const struct MHD_Connection *const c). Because the pointer points to a non-const-qualified type while only being used for read access, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_reply_body_needed code that contains useful probe functions that print useful logs to a file \"/tmp/logs/5.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of is_reply_body_needed:\n```c\nstatic enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n\n  if (199 >= rcode)\n    return RP_BODY_NONE;\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    return RP_BODY_NONE;\n\n#if 0\n  /* This check is not needed as upgrade handler is used only with code 101 */\n#ifdef UPGRADE_SUPPORT\n  if (NULL != rp.response->upgrade_handler)\n    return RP_BODY_NONE;\n#endif /* UPGRADE_SUPPORT */\n#endif\n\n#if 0\n  /* CONNECT is not supported by MHD */\n  /* Successful responses for connect requests are filtered by\n   * MHD_queue_response() */\n  if ( (MHD_HTTP_MTHD_CONNECT == c->rq.http_mthd) &&\n       (2 == rcode / 100) )\n    return false; /* Actually pass-through CONNECT is not supported by MHD */\n#endif\n\n  /* Reply body headers could be used.\n   * Check whether reply body itself must be used. */\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    return RP_BODY_HEADERS_ONLY;\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    return RP_BODY_HEADERS_ONLY;\n\n  /* Reply body must be sent. The body may have zero length, but body size\n   * must be indicated by headers ('Content-Length:' or\n   * 'Transfer-Encoding: chunked'). */\n  return RP_BODY_SEND;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified is_reply_body_needed code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original is_reply_body_needed with it.\n  - Your function must have the exact same signature as is_reply_body_needed.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call is_reply_body_needed to check logs.\n  - Your function MUST preserve the original logic of is_reply_body_needed as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, is_reply_body_needed will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of is_reply_body_needed as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum replyBodyUse\nis_reply_body_needed (struct MHD_Connection *connection,\n                      unsigned int rcode)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  FILE *logf = fopen(\"/tmp/logs/5.txt\", \"a\");\n  if (logf)\n    fprintf(logf, \"ENTER is_reply_body_needed: connection=%p, alias c=%p, rcode=%u\\n\",\n            (void *) connection, (void *) c, rcode);\n\n  mhd_assert (100 <= rcode);\n  mhd_assert (999 >= rcode);\n  if (logf)\n    fprintf(logf, \"After asserts: rcode=%u\\n\", rcode);\n\n  enum replyBodyUse result = RP_BODY_SEND; /* default as in original code */\n\n  if (199 >= rcode)\n    {\n      result = RP_BODY_NONE;\n      if (logf)\n        fprintf(logf, \"Branch: rcode <= 199 -> RP_BODY_NONE (rcode=%u)\\n\", rcode);\n      if (logf) fclose(logf);\n      return result;\n    }\n\n  if (MHD_HTTP_NO_CONTENT == rcode)\n    {\n      result = RP_BODY_NONE;\n      if (logf)\n        fprintf(logf, \"Branch: MHD_HTTP_NO_CONTENT -> RP_BODY_NONE (rcode=%u)\\n\", rcode);\n      if (logf) fclose(logf);\n      return result;\n    }\n\n  /* Log the observed request method for diagnostic purposes. */\n  if (logf)\n    {\n      /* Access the same field as original code to reproduce usage pattern */\n      /* Print as integer; exact type depends on the surrounding code. */\n      fprintf(logf, \"Observed c->rq.http_mthd = %d\\n\", (int) c->rq.http_mthd);\n    }\n\n  if (MHD_HTTP_MTHD_HEAD == c->rq.http_mthd)\n    {\n      result = RP_BODY_HEADERS_ONLY;\n      if (logf)\n        fprintf(logf, \"Branch: HEAD method -> RP_BODY_HEADERS_ONLY\\n\");\n      if (logf) fclose(logf);\n      return result;\n    }\n\n  if (MHD_HTTP_NOT_MODIFIED == rcode)\n    {\n      result = RP_BODY_HEADERS_ONLY;\n      if (logf)\n        fprintf(logf, \"Branch: MHD_HTTP_NOT_MODIFIED -> RP_BODY_HEADERS_ONLY (rcode=%u)\\n\", rcode);\n      if (logf) fclose(logf);\n      return result;\n    }\n\n  /* Default: reply body must be sent. */\n  result = RP_BODY_SEND;\n  if (logf)\n    {\n      fprintf(logf, \"Default branch -> RP_BODY_SEND (rcode=%u)\\n\", rcode);\n      fclose(logf);\n    }\n\n  return result;\n}\n"
}