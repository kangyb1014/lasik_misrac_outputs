{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe bitwise expression ORs the same macro twice: (MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_NON_SESSION). The second occurrence is redundant: ((X) | (X)) == (X). The OR of an identical operand is an executed operation whose removal (replace the OR expression with the single macro) would not change program behaviour, so this is dead/redundant code under MISRA C 2023 Rule 2.2. Likely a typo (a different flag was intended); fix by removing the duplicate operand or using the correct flag.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_base_digest_algo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4478.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_base_digest_algo:\n```c\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_base_digest_algo code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_base_digest_algo with it.\n  - Your function must have the exact same signature as get_base_digest_algo.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_base_digest_algo to check logs.\n  - Your function MUST preserve the original logic of get_base_digest_algo as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_base_digest_algo will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_base_digest_algo as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  /* Preserve original computation (including the duplicated operand) */\n  unsigned int flag = (unsigned int) MHD_DIGEST_AUTH_ALGO3_NON_SESSION;\n  unsigned int dup_mask = (unsigned int) (flag | flag);\n  unsigned int mask_expr = (unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION);\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~mask_expr;\n\n  /* Logging: append control-flow/state information to the required file. */\n  {\n    FILE *f = fopen(\"/tmp/logs/4478.txt\", \"a\");\n    if (f != (FILE *)0)\n      {\n        /* Log entry, inputs, intermediate masks and final result in hex for clarity */\n        (void) fprintf(f,\n                       \"get_base_digest_algo entered: algo3=0x%08x flag=0x%08x dup_mask=0x%08x mask_expr=0x%08x base_algo=0x%08x\\n\",\n                       (unsigned int) algo3,\n                       flag,\n                       dup_mask,\n                       mask_expr,\n                       base_algo);\n        if (dup_mask == flag)\n          {\n            (void) fprintf(f, \"Note: duplicate OR operands detected: (flag | flag) == flag -> redundant operation\\n\");\n          }\n        (void) fclose(f);\n      }\n  }\n\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n"
}