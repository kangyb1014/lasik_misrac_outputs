{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is an ordinary diagnostic/assertion macro that produces no observable side-effects (for example it expands to ((void)0) in production or only checks the condition and aborts/logs on failure), then the statement is a purely diagnostic operation whose removal would not change the normal program behaviour. In that case the assertion represents dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert has observable side-effects in the deployed build (e.g. it logs, increments counters, changes state, or otherwise affects program behaviour), then this line would not be dead code and would not violate Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_maximize_write_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3648.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_maximize_write_buffer:\n```c\nstatic size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n    /* This function must not move the buffer position.\n     * MHD_pool_reallocate () may return the new position only if buffer was\n     * allocated 'from_end' or is not the last allocation,\n     * which should not happen. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n    }\n  }\n\n  return c->write_buffer_size - c->write_buffer_append_offset;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_maximize_write_buffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_maximize_write_buffer with it.\n  - Your function must have the exact same signature as connection_maximize_write_buffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_maximize_write_buffer to check logs.\n  - Your function MUST preserve the original logic of connection_maximize_write_buffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_maximize_write_buffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_maximize_write_buffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static size_t\nconnection_maximize_write_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MemoryPool *const pool = connection->pool;\n  void *new_buf;\n  size_t new_size;\n  size_t free_size;\n  size_t result;\n\n  /* Open a log file to record control flow and state. Keep errors non-fatal. */\n  FILE *mhd_log = fopen(\"/tmp/logs/3648.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"ENTER: connection_maximize_write_buffer: connection=%p, pool=%p\\n\",\n            (void *)connection, (void *)pool);\n    fprintf(mhd_log, \"STATE BEFORE: write_buffer=%p, write_buffer_size=%zu, append_offset=%zu, send_offset=%zu\\n\",\n            (void *)c->write_buffer,\n            (size_t)c->write_buffer_size,\n            (size_t)c->write_buffer_append_offset,\n            (size_t)c->write_buffer_send_offset);\n    fflush(mhd_log);\n  }\n\n  /* Original assertions retained to preserve logic. */\n  mhd_assert ((NULL != c->write_buffer) || (0 == c->write_buffer_size));\n  mhd_assert (c->write_buffer_append_offset >= c->write_buffer_send_offset);\n  mhd_assert (c->write_buffer_size >= c->write_buffer_append_offset);\n\n  free_size = MHD_pool_get_free (pool);\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"AFTER GET_FREE: free_size=%zu\\n\", free_size);\n    fflush(mhd_log);\n  }\n\n  if (0 != free_size)\n  {\n    new_size = c->write_buffer_size + free_size;\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"WILL REALLOCATE: old_size=%zu, free_size=%zu, new_size=%zu\\n\",\n              (size_t)c->write_buffer_size, free_size, (size_t)new_size);\n      fflush(mhd_log);\n    }\n\n    /* This function must not move the buffer position.\n     * MHD_pool_reallocate () may return the new position only if buffer was\n     * allocated 'from_end' or is not the last allocation,\n     * which should not happen. */\n    mhd_assert ((NULL == c->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (pool, c->write_buffer, \\\n                                               c->write_buffer_size));\n\n    new_buf = MHD_pool_reallocate (pool,\n                                   c->write_buffer,\n                                   c->write_buffer_size,\n                                   new_size);\n\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"REALLOC RETURN: old_buf=%p, new_buf=%p\\n\",\n              (void *)c->write_buffer, (void *)new_buf);\n      fflush(mhd_log);\n    }\n\n    mhd_assert ((c->write_buffer == new_buf) || (NULL == c->write_buffer));\n    c->write_buffer = new_buf;\n    c->write_buffer_size = new_size;\n    if (c->write_buffer_send_offset == c->write_buffer_append_offset)\n    {\n      /* All data have been sent, reset offsets to zero. */\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"RESET OFFSETS: send_offset==append_offset (%zu). Resetting both to 0.\\n\",\n                (size_t)c->write_buffer_send_offset);\n        fflush(mhd_log);\n      }\n      c->write_buffer_send_offset = 0;\n      c->write_buffer_append_offset = 0;\n    }\n  }\n\n  result = c->write_buffer_size - c->write_buffer_append_offset;\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"EXIT: connection_maximize_write_buffer: write_buffer=%p, write_buffer_size=%zu, append_offset=%zu, send_offset=%zu, result=%zu\\n\",\n            (void *)c->write_buffer,\n            (size_t)c->write_buffer_size,\n            (size_t)c->write_buffer_append_offset,\n            (size_t)c->write_buffer_send_offset,\n            (size_t)result);\n    fflush(mhd_log);\n    fclose(mhd_log);\n  }\n\n  return result;\n}\n"
}