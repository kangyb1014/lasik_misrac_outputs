{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nerr_code = get_no_space_err_status_code (c,\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "handle_req_headers_no_space declares its parameter as 'struct MHD_Connection *c' and passes it to get_no_space_err_status_code. If get_no_space_err_status_code only inspects the connection (does not modify it), then the pointer should be const-qualified (const struct MHD_Connection *). In that case the use of a non-const pointer here violates MISRA C 2023 Rule 8.13. The fix is to change the parameter(s) and call site to use 'const struct MHD_Connection *'. Note: if the callee actually modifies the connection, then no violation occurs."
}