{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nhandle_req_headers_no_space declares its parameter as 'struct MHD_Connection *c' and passes it to get_no_space_err_status_code. If get_no_space_err_status_code only inspects the connection (does not modify it), then the pointer should be const-qualified (const struct MHD_Connection *). In that case the use of a non-const pointer here violates MISRA C 2023 Rule 8.13. The fix is to change the parameter(s) and call site to use 'const struct MHD_Connection *'. Note: if the callee actually modifies the connection, then no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_req_headers_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2645.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified handle_req_headers_no_space code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original handle_req_headers_no_space with it.\n  - Your function must have the exact same signature as handle_req_headers_no_space.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call handle_req_headers_no_space to check logs.\n  - Your function MUST preserve the original logic of handle_req_headers_no_space as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, handle_req_headers_no_space will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n  FILE *log_fp = fopen(\"/tmp/logs/2645.txt\", \"a\");\n\n  if (log_fp != NULL)\n  {\n    fprintf(log_fp, \"ENTER %s: c=%p, add_header=%p, add_header_size=%zu\\n\",\n            __func__, (void *)c, (void *)add_header, add_header_size);\n\n    if (add_header != NULL && add_header_size > 0u)\n    {\n      size_t i;\n      size_t to_dump = add_header_size < 16u ? add_header_size : 16u;\n      fprintf(log_fp, \" add_header (first %zu bytes):\", to_dump);\n      for (i = 0u; i < to_dump; ++i)\n      {\n        fprintf(log_fp, \" %02X\", (unsigned char)add_header[i]);\n      }\n      if (add_header_size > to_dump)\n      {\n        fprintf(log_fp, \" ...\");\n      }\n      fprintf(log_fp, \"\\n\");\n    }\n    fflush(log_fp);\n  }\n\n  /* Preserve original logic: compute status code and transmit response. */\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  if (log_fp != NULL)\n  {\n    fprintf(log_fp, \" get_no_space_err_status_code returned %u\\n\", err_code);\n    fprintf(log_fp, \" calling transmit_error_response_static(c=%p, err_code=%u, msg=\\\"%s\\\")\\n\",\n            (void *)c, err_code, ERR_MSG_REQUEST_HEADER_TOO_BIG);\n    fflush(log_fp);\n  }\n\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  if (log_fp != NULL)\n  {\n    fprintf(log_fp, \"EXIT %s\\n\", __func__);\n    fclose(log_fp);\n  }\n}\n"
}