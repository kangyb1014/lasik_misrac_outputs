{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'struct MHD_Connection *c' is not const-qualified even though within handle_req_headers_no_space it is only forwarded to get_no_space_err_status_code(...) and transmit_error_response_static(...). If neither of those functions modify the connection object, the parameter should be declared as 'const struct MHD_Connection *c'. Leaving it non-const when it can be const violates MISRA C 2023 Rule 8.13. (If the called functions require a non-const pointer because they modify the connection, then making it const would be impossible and no violation would occur.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified handle_req_headers_no_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2645.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of handle_req_headers_no_space:\n```c\nstatic void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified handle_req_headers_no_space code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original handle_req_headers_no_space with it.\n  - Your function must have the exact same signature as handle_req_headers_no_space.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call handle_req_headers_no_space to check logs.\n  - Your function MUST preserve the original logic of handle_req_headers_no_space as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, handle_req_headers_no_space will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of handle_req_headers_no_space as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nhandle_req_headers_no_space (struct MHD_Connection *c,\n                             const char *add_header,\n                             size_t add_header_size)\n{\n  unsigned int err_code;\n  FILE *logf = fopen(\"/tmp/logs/2645.txt\", \"a\");\n\n  if (logf != NULL)\n  {\n    /* Log entry and parameter values */\n    fprintf(logf, \"ENTER handle_req_headers_no_space: c=%p, add_header=%p, add_header_size=%zu\\n\",\n            (void *)c, (const void *)add_header, add_header_size);\n\n    if (add_header != NULL && add_header_size > 0U)\n    {\n      /* Capture up to 128 bytes of the header for inspection (not modifying original) */\n      size_t copy_len = (add_header_size < 128U) ? add_header_size : 128U;\n      char buf[129];\n\n      /* Use memcpy because add_header may not be NUL-terminated */\n      memcpy(buf, add_header, copy_len);\n      buf[copy_len] = '\\0';\n\n      fprintf(logf, \"add_header (first %zu bytes as string upto NUL): \\\"%s\\\"\\n\", copy_len, buf);\n\n      /* Hex dump of the captured bytes for exact state */\n      fprintf(logf, \"add_header (hex, first %zu bytes):\", copy_len);\n      for (size_t i = 0U; i < copy_len; ++i)\n      {\n        fprintf(logf, \" %02x\", (unsigned int)(unsigned char)buf[i]);\n      }\n      fprintf(logf, \"\\n\");\n    }\n    else\n    {\n      fprintf(logf, \"add_header is NULL or add_header_size is 0\\n\");\n    }\n\n    fflush(logf);\n  }\n\n  /* Preserve original control flow and behavior */\n  err_code = get_no_space_err_status_code (c,\n                                           MHD_PROC_RECV_HEADERS,\n                                           add_header,\n                                           add_header_size);\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"get_no_space_err_status_code returned %u\\n\", err_code);\n    fflush(logf);\n  }\n\n  transmit_error_response_static (c,\n                                  err_code,\n                                  ERR_MSG_REQUEST_HEADER_TOO_BIG);\n\n  if (logf != NULL)\n  {\n    fprintf(logf, \"transmit_error_response_static called with c=%p, err_code=%u\\n\",\n            (void *)c, err_code);\n    fprintf(logf, \"EXIT handle_req_headers_no_space\\n\\n\");\n    fclose(logf);\n  }\n}\n"
}