{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf add_response_entry_n is called with header == NULL and header_len > 0 (or with header pointing to an object smaller than header_len), the call memchr(header, '\\r', header_len) will read through an invalid pointer and access memory beyond the bounds of the referenced object (NULL dereference or buffer over-read). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/923.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_response_entry_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_response_entry_n with it.\n  - Your function must have the exact same signature as add_response_entry_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_response_entry_n to check logs.\n  - Your function MUST preserve the original logic of add_response_entry_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_response_entry_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_response_entry_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  FILE *log = fopen(\"/tmp/logs/923.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"enter add_response_entry_n: response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *)response, (int)kind, (const void *)header, header_len, (const void *)content, content_len);\n    fflush(log);\n  }\n\n  if (NULL == response)\n  {\n    if (log)\n    {\n      fprintf(log, \"early return: response == NULL\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (0 == header_len)\n  {\n    if (log)\n    {\n      fprintf(log, \"early return: header_len == 0\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (0 == content_len)\n  {\n    if (log)\n    {\n      fprintf(log, \"early return: content_len == 0\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(header, '\\\\t', header_len) with header=%p header_len=%zu\\n\", (const void *)header, header_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (header, '\\t', header_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found '\\\\t' in header -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(header, ' ', header_len) with header=%p header_len=%zu\\n\", (const void *)header, header_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (header, ' ', header_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found ' ' in header -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(header, '\\\\r', header_len) with header=%p header_len=%zu\\n\", (const void *)header, header_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (header, '\\r', header_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found '\\\\r' in header -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(header, '\\\\n', header_len) with header=%p header_len=%zu\\n\", (const void *)header, header_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (header, '\\n', header_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found '\\\\n' in header -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(content, '\\\\r', content_len) with content=%p content_len=%zu\\n\", (const void *)content, content_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (content, '\\r', content_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found '\\\\r' in content -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"about to memchr(content, '\\\\n', content_len) with content=%p content_len=%zu\\n\", (const void *)content, content_len);\n    fflush(log);\n  }\n  if (NULL != (const char *)memchr (content, '\\n', content_len))\n  {\n    if (log)\n    {\n      fprintf(log, \"memchr found '\\\\n' in content -> return false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"calling MHD_add_response_entry_no_check_() with response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n            (void *)response, (int)kind, (const void *)header, header_len, (const void *)content, content_len);\n    fflush(log);\n  }\n\n  bool result = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                                   content, content_len);\n\n  if (log)\n  {\n    fprintf(log, \"MHD_add_response_entry_no_check_ returned %d\\n\", result ? 1 : 0);\n    fclose(log);\n  }\n\n  return result;\n}\n"
}