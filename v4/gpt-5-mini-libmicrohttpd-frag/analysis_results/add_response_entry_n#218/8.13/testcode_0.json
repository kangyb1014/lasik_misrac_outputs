{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter is declared as a non-const pointer (struct MHD_Response *response) even though the function body performs no modifications on the pointed-to object and only passes it to other routines. If the pointed-to object is not modified by this function (and the called routine does not require a mutable pointer), the parameter should be declared const (const struct MHD_Response *response). Leaving it non-const in that situation violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified add_response_entry_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/925.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of add_response_entry_n:\n```c\nstatic bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n  if (NULL == response)\n    return false;\n  if (0 == header_len)\n    return false;\n  if (0 == content_len)\n    return false;\n  if (NULL != memchr (header, '\\t', header_len))\n    return false;\n  if (NULL != memchr (header, ' ', header_len))\n    return false;\n  if (NULL != memchr (header, '\\r', header_len))\n    return false;\n  if (NULL != memchr (header, '\\n', header_len))\n    return false;\n  if (NULL != memchr (content, '\\r', content_len))\n    return false;\n  if (NULL != memchr (content, '\\n', content_len))\n    return false;\n\n  return MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                           content, content_len);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified add_response_entry_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original add_response_entry_n with it.\n  - Your function must have the exact same signature as add_response_entry_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call add_response_entry_n to check logs.\n  - Your function MUST preserve the original logic of add_response_entry_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, add_response_entry_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of add_response_entry_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nadd_response_entry_n (struct MHD_Response *response,\n                      enum MHD_ValueKind kind,\n                      const char *header,\n                      size_t header_len,\n                      const char *content,\n                      size_t content_len)\n{\n    /* Logging probe to capture control flow and state for Rule 8.13 reproduction */\n    FILE *logfp = fopen(\"/tmp/logs/925.txt\", \"a\");\n    if (logfp)\n    {\n        fprintf(logfp, \"ENTER: add_response_entry_n response=%p kind=%d header=%p header_len=%zu content=%p content_len=%zu\\n\",\n                (void *)response, (int)kind, (const void *)header, header_len, (const void *)content, content_len);\n        fflush(logfp);\n    }\n\n    if (NULL == response)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: response == NULL -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    if (0 == header_len)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: header_len == 0 -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    if (0 == content_len)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: content_len == 0 -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    /* The following memchr calls mirror the original control flow precisely. */\n    const void *found = memchr (header, '\\t', header_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(header, '\\t') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: header contains '\\t' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    found = memchr (header, ' ', header_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(header, ' ') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: header contains ' ' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    found = memchr (header, '\\r', header_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(header, '\\r') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: header contains '\\r' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    found = memchr (header, '\\n', header_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(header, '\\n') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: header contains '\\n' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    found = memchr (content, '\\r', content_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(content, '\\r') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: content contains '\\r' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    found = memchr (content, '\\n', content_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CHECK: memchr(content, '\\n') -> %p\\n\", found);\n        fflush(logfp);\n    }\n    if (NULL != found)\n    {\n        if (logfp)\n        {\n            fprintf(logfp, \"EXIT: content contains '\\n' -> return false\\n\");\n            fclose(logfp);\n        }\n        return false;\n    }\n\n    bool ret = MHD_add_response_entry_no_check_ (response, kind, header, header_len,\n                                                 content, content_len);\n    if (logfp)\n    {\n        fprintf(logfp, \"CALL: MHD_add_response_entry_no_check_ returned %d\\n\", (int)ret);\n        fprintf(logfp, \"EXIT: add_response_entry_n returning %d\\n\", (int)ret);\n        fclose(logfp);\n    }\n\n    return ret;\n}\n"
}