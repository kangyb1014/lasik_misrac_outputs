{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'keep' is declared as void * but is only used as a read-only source (checked by assertions and passed as the source to memmove). It is never modified in this function, so it could (and should) be declared as const void *keep. Declaring it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_reset code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_reset with it.\n  - Your function must have the exact same signature as MHD_pool_reset.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_reset to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_reset will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Logging probe: attempt to record entry and key state to /tmp/logs/3635.txt */\n  {\n    FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n    if (NULL != mhd_log)\n    {\n      fprintf (mhd_log,\n               \"ENTER MHD_pool_reset: pool=%p, keep=%p, copy_bytes=%zu, new_size=%zu, pool->memory=%p, pool->size=%zu, pool->pos=%zu, pool->end=%zu\\n\",\n               (void *) pool,\n               keep,\n               copy_bytes,\n               new_size,\n               (void *) pool->memory,\n               pool->size,\n               (size_t) pool->pos,\n               (size_t) pool->end);\n      fflush (mhd_log);\n      fclose (mhd_log);\n    }\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    /* Log branch decision and planned memmove */\n    {\n      FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        fprintf (mhd_log,\n                 \"BRANCH: keep != NULL && keep != pool->memory -> keep=%p, pool->memory=%p\\n\",\n                 keep, (void *) pool->memory);\n        fflush (mhd_log);\n        fclose (mhd_log);\n      }\n    }\n\n    if (0 != copy_bytes)\n    {\n      /* Log before memmove */\n      {\n        FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n        if (NULL != mhd_log)\n        {\n          fprintf (mhd_log,\n                   \"CALL memmove: dest=%p, src=%p, len=%zu\\n\",\n                   (void *) pool->memory,\n                   keep,\n                   copy_bytes);\n          fflush (mhd_log);\n          fclose (mhd_log);\n        }\n      }\n\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n\n      /* Log after memmove */\n      {\n        FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n        if (NULL != mhd_log)\n        {\n          fprintf (mhd_log,\n                   \"AFTER memmove: first_byte=%u (as unsigned), copy_bytes=%zu\\n\",\n                   (unsigned) pool->memory[0],\n                   copy_bytes);\n          fflush (mhd_log);\n          fclose (mhd_log);\n        }\n      }\n    }\n    else\n    {\n      /* Log that no bytes were copied */\n      FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        fprintf (mhd_log, \"SKIP memmove: copy_bytes == 0\\n\");\n        fflush (mhd_log);\n        fclose (mhd_log);\n      }\n    }\n  }\n  else\n  {\n    /* Log branch where keep is NULL or equals pool->memory */\n    FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n    if (NULL != mhd_log)\n    {\n      fprintf (mhd_log, \"SKIP memmove: keep is NULL or keep == pool->memory (keep=%p)\\n\", keep);\n      fflush (mhd_log);\n      fclose (mhd_log);\n    }\n  }\n\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n\n    /* Log zeroing activity */\n    {\n      FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        fprintf (mhd_log,\n                 \"ZERO: pool->size=%zu, copy_bytes=%zu, to_zero=%zu, zero_addr=%p\\n\",\n                 pool->size, copy_bytes, to_zero, (void *) (pool->memory + copy_bytes));\n        fflush (mhd_log);\n        fclose (mhd_log);\n      }\n    }\n\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n\n    /* Log completion of zeroing */\n    {\n      FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n      if (NULL != mhd_log)\n      {\n        fprintf (mhd_log, \"ZERO completed: zeroed %zu bytes\\n\", to_zero);\n        fflush (mhd_log);\n        fclose (mhd_log);\n      }\n    }\n  }\n\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n\n  /* Final state log and return */\n  {\n    FILE *mhd_log = fopen(\"/tmp/logs/3635.txt\", \"a\");\n    if (NULL != mhd_log)\n    {\n      fprintf (mhd_log,\n               \"EXIT MHD_pool_reset: return=%p, pool->pos=%zu, pool->end=%zu, new_size=%zu\\n\",\n               (void *) pool->memory,\n               (size_t) pool->pos,\n               (size_t) pool->end,\n               new_size);\n      fflush (mhd_log);\n      fclose (mhd_log);\n    }\n  }\n\n  return pool->memory;\n}\n"
}