{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThis assertion is dead code if mhd_assert expands to a no-op in the delivered build (for example, if assertions are always disabled via a macro like NDEBUG so mhd_assert becomes ((void)0)). In that case the expression has no side\u2011effects, is not executed, and removing the call would not change program behaviour \u2014 so Rule 2.2 would be violated. (If, conversely, mhd_assert is implemented to perform a runtime check that can abort or log on failure, then the assertion is not dead because its removal could change behaviour when the condition fails.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3638.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_reset code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_reset with it.\n  - Your function must have the exact same signature as MHD_pool_reset.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_reset to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_reset will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Probe to detect whether mhd_assert is active at runtime: we increment\n   * a static counter only if the expression passed to mhd_assert is\n   * evaluated. If mhd_assert expands to a no-op ((void)0) in the delivered\n   * build, the expression will not be evaluated and the counter will remain\n   * zero. The probe uses an always-true expression so it cannot change\n   * program behaviour except for the side-effect of incrementing the\n   * counter when assertions are active. */\n  static int mhd_assert_probe_counter = 0;\n\n  FILE *log = fopen(\"/tmp/logs/3638.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_pool_reset ENTER: pool=%p, keep=%p, copy_bytes=%zu, new_size=%zu\\n\",\n            (void *) pool, keep, copy_bytes, new_size);\n    fprintf(log, \"mhd_assert_probe_counter(before)=%d\\n\", mhd_assert_probe_counter);\n  }\n\n  /* Probe invocation: only increments probe counter if mhd_assert evaluates\n   * its argument. Use an always-true expression so this assertion cannot\n   * fail and will not change observable behaviour except for the probe. */\n  mhd_assert ((++mhd_assert_probe_counter, 1));\n\n  if (log)\n    fprintf(log, \"mhd_assert_probe_counter(after probe)=%d\\n\", mhd_assert_probe_counter);\n\n  /* Original assertions retained verbatim to preserve behaviour. We do not\n   * evaluate their conditions ourselves here (except via the single probe\n   * above) to avoid introducing dereferences or side-effects that would not\n   * happen in builds where assertions are disabled. */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if (log)\n    fprintf(log, \"After _MHD_UNPOISON_MEMORY: pool->memory=%p, new_size=%zu\\n\",\n            (void *) pool->memory, new_size);\n\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (log)\n      fprintf(log, \"memmove branch: keep=%p, pool->memory=%p, copy_bytes=%zu\\n\",\n              keep, (void *) pool->memory, copy_bytes);\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n    if (log)\n      fprintf(log, \"memmove done\\n\");\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"memmove skipped: keep=%p, pool->memory=%p\\n\", keep, (void *) pool->memory);\n  }\n\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n    if (log)\n      fprintf(log, \"Zero branch: to_zero=%zu, pool->size=%zu, copy_bytes=%zu\\n\",\n              to_zero, pool->size, copy_bytes);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (log)\n          fprintf(log, \"VirtualFree succeeded, to_recommit=%zu, recommit_addr=%p\\n\",\n                  to_recommit, (void *) recommit_addr);\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n        {\n          if (log)\n            fprintf(log, \"VirtualAlloc failed: aborting\\n\");\n          if (log)\n            fclose(log);\n          abort ();      /* Serious error, must never happen */\n        }\n      }\n      else\n      {\n        if (log)\n          fprintf(log, \"VirtualFree failed or nothing to decommit\\n\");\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n    if (log)\n      fprintf(log, \"memset done: cleared %zu bytes starting at %p\\n\",\n              to_zero, (void *) (pool->memory + copy_bytes));\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"No zeroing needed: pool->size=%zu, copy_bytes=%zu\\n\",\n              pool->size, copy_bytes);\n  }\n\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n\n  if (log)\n  {\n    _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                        pool->size - new_size);\n    fprintf(log, \"Final state: pool->pos=%zu, pool->end=%zu, return=%p\\n\",\n            pool->pos, pool->end, (void *) pool->memory);\n    fclose(log);\n  }\n  else\n  {\n    _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                        pool->size - new_size);\n  }\n  return pool->memory;\n}\n"
}