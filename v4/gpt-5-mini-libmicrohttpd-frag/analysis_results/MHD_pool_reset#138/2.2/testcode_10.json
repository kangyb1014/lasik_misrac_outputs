{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro evaluates the boolean expression at run-time but performs no action on success (no abort, no logging, no side-effects), then the call is executed yet its removal would not change program behaviour \u2014 the assertion merely checks a condition with no effect. In that configuration (mp_ptr_le_ has no side-effects and mhd_assert does not alter program state), the statement is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_reset code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3638.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_reset code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_reset with it.\n  - Your function must have the exact same signature as MHD_pool_reset.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_reset to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_reset will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_reset as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  /* Logging probe to capture control flow and state for Rule 2.2 analysis. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3638.txt\", \"a\");\n    if (NULL != log)\n    {\n      /* Log entry and basic pool/parameter state */\n      fprintf(log, \"MHD_pool_reset ENTER: pool=%p, keep=%p, copy_bytes=%zu, new_size=%zu\\n\",\n              (void *) pool, keep, copy_bytes, new_size);\n      if (pool != NULL)\n      {\n        fprintf(log, \" pool->memory=%p, pool->size=%zu, pool->pos=%zu, pool->end=%zu\\n\",\n                (void *) pool->memory, (size_t) pool->size,\n                (size_t) pool->pos, (size_t) pool->end);\n      }\n\n      /* Evaluate assertion conditions and log their runtime truth value.\n       * Evaluating these expressions mirrors what mhd_assert would check and\n       * provides evidence whether the assertion expressions are executed and\n       * their values (useful to show that an assert may be \"dead\" when it\n       * performs no action on success). */\n      if (pool != NULL)\n      {\n        int a1 = (pool->end >= pool->pos);\n        int a2 = (pool->size >= pool->end - pool->pos);\n        int a3 = (copy_bytes <= new_size);\n        int a4 = (copy_bytes <= pool->size);\n        int a5 = (keep != NULL || copy_bytes == 0);\n        int a6 = (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n        int a7 = ( (keep == NULL) || \n                   (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes) );\n\n        fprintf(log, \" assert checks: end>=pos=%d, size>=(end-pos)=%d, copy<=new=%d, copy<=size=%d\\n\",\n                a1, a2, a3, a4);\n        fprintf(log, \" keep!=NULL||copy==0=%d, keep==NULL||mp_ptr_le=%d, size>=diff+copy=%d\\n\",\n                a5, a6, a7);\n      }\n\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n      {\n        int asan_ok = (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n        fprintf(log, \" asan_region_is_poisoned==NULL -> %d\\n\", asan_ok);\n      }\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n\n      fclose(log);\n    }\n  }\n\n  /* Original assertions (kept intact to preserve behaviour) */\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n    {\n      {\n        FILE *log = fopen(\"/tmp/logs/3638.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \" performing memmove: dest=%p, src=%p, bytes=%zu\\n\",\n                  (void *) pool->memory, keep, copy_bytes);\n          fclose(log);\n        }\n      }\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n    }\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        {\n          FILE *log = fopen(\"/tmp/logs/3638.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \" VirtualFree decommitted %zu bytes at %p, recommit_addr=%p\\n\",\n                    to_recommit, (void *) recommit_addr, (void *) recommit_addr);\n            fclose(log);\n          }\n        }\n\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n\n  {\n    FILE *log = fopen(\"/tmp/logs/3638.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"MHD_pool_reset EXIT: returning memory=%p, pos=%zu, end=%zu\\n\",\n              (void *) pool->memory, (size_t) pool->pos, (size_t) pool->end);\n      fclose(log);\n    }\n  }\n\n  return pool->memory;\n}\n"
}