{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call mhd_assert(sizeof(uint64_t) == SIZEOF_UINT64_T); performs a runtime check of two values that are effectively compile-time constants. If mhd_assert expands to code that evaluates this expression at runtime (and only aborts on failure), that evaluation will always succeed on a correctly configured build and therefore is an executed operation whose removal would not change program behaviour \u2014 this meets the definition of dead code in MISRA C 2023 Rule 2.2. To avoid the violation, use a compile-time assertion (e.g. _Static_assert) or remove/guard the runtime check so it is not executed in builds where it has no effect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2678.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_init with it.\n  - Your function must have the exact same signature as MHD_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_init to check logs.\n  - Your function MUST preserve the original logic of MHD_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  /* Open log file for tracing control flow/state for rule 2.2 investigation. */\n  FILE *mhd_logf = fopen(\"/tmp/logs/2678.txt\", \"a\");\n  if (NULL == mhd_logf)\n  {\n    /* Fallback to stderr if the log file cannot be opened. */\n    mhd_logf = stderr;\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: could not open /tmp/logs/2678.txt, logging to stderr\\n\");\n  }\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: entered\\n\");\n\n  MHD_set_panic_func (NULL, NULL);\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: set panic func\\n\");\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: WSAStartup failed (code != 0)\\n\");\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  }\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: Winsock version mismatch: wVersion=0x%04x\\n\", (unsigned)wsd.wVersion);\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n  }\n  else\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: Winsock version OK: wVersion=0x%04x\\n\", (unsigned)wsd.wVersion);\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: gcry_control set pthread cbs failed\\n\");\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n  }\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: gcry_control set w32 cbs failed\\n\");\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n  }\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: gcry_check_version(NULL) called\\n\");\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: libgcrypt is too old (gcry_check_version returned NULL)\\n\");\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n  }\n  else\n  {\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: libgcrypt version OK\\n\");\n  }\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: gnutls_global_init called\\n\");\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: MHD_monotonic_sec_counter_init called\\n\");\n  MHD_send_init_static_vars_ ();\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: MHD_send_init_static_vars_ called\\n\");\n  MHD_init_mem_pools_ ();\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: MHD_init_mem_pools_ called\\n\");\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    /* Log the sizeof check that's wrapped by mhd_assert in debug builds. */\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: DEBUG check sizeof(tv.tv_sec)=%zu, expected=%zu\\n\",\n              (size_t)sizeof(tv.tv_sec), (size_t)SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n    if (mhd_logf)\n      fprintf(mhd_logf, \"MHD_init: DEBUG sizeof(tv.tv_sec) assertion passed\\n\");\n  }\n#endif /* _DEBUG */\n  /* Probe and log the uint64_t size assertion that can trigger a Rule 2.2 dead-code report. */\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: about to assert sizeof(uint64_t)=%zu == SIZEOF_UINT64_T=%zu\\n\",\n            (size_t)sizeof(uint64_t), (size_t)SIZEOF_UINT64_T);\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n  if (mhd_logf)\n    fprintf(mhd_logf, \"MHD_init: sizeof(uint64_t) assertion passed\\n\");\n\n  if (mhd_logf)\n  {\n    fprintf(mhd_logf, \"MHD_init: exiting\\n\");\n    if (mhd_logf != stderr)\n      fclose(mhd_logf);\n  }\n}\n"
}