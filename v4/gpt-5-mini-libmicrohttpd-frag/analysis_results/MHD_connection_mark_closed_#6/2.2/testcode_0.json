{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the connection->state field is never read after this assignment (for example, the event loop decision uses connection->event_loop_info and the connection is cleaned up/freed without any subsequent reads of connection->state, or some other code always overwrites connection->state before any read), then the assignment has no effect on program behaviour. In that situation removing the assignment would not change the program and it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_mark_closed_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3498.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_mark_closed_:\n```c\nvoid\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      if (! MHD_tls_connection_shutdown (connection))\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    shutdown (connection->socket_fd,\n              SHUT_WR);\n  }\n  connection->state = MHD_CONNECTION_CLOSED;\n  connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_mark_closed_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_mark_closed_ with it.\n  - Your function must have the exact same signature as MHD_connection_mark_closed_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_mark_closed_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_mark_closed_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_mark_closed_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_mark_closed_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_connection_mark_closed_ (struct MHD_Connection *connection)\n{\n  const struct MHD_Daemon *daemon = connection->daemon;\n\n  /* Logging probe: record entry, key connection fields and daemon options. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3498.txt\", \"a\");\n    if (NULL == log)\n    {\n      /* Fallback if directory /tmp/logs does not exist or cannot be opened. */\n      log = fopen(\"/tmp/3498.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      /* Log pointer addresses and current state to help reproduce dead-assignment scenario. */\n      fprintf(log, \"MHD_connection_mark_closed_: entry\\n\");\n      fprintf(log, \"  connection=%p, socket_fd=%d\\n\", (void *)connection, connection->socket_fd);\n      fprintf(log, \"  previous state=%d, previous event_loop_info=%d\\n\",\n              (int)connection->state, (int)connection->event_loop_info);\n      fprintf(log, \"  daemon=%p, daemon->options=0x%08x\\n\", (void *)daemon,\n              (unsigned int)daemon->options);\n      fclose(log);\n    }\n  }\n\n  if (0 == (daemon->options & MHD_USE_TURBO))\n  {\n#ifdef HTTPS_SUPPORT\n    /* For TLS connection use shutdown of TLS layer\n     * and do not shutdown TCP socket. This give more\n     * chances to send TLS closure data to remote side.\n     * Closure of TLS layer will be interpreted by\n     * remote side as end of transmission. */\n    if (0 != (daemon->options & MHD_USE_TLS))\n    {\n      int tls_shutdown_ok = 0;\n      /* Call original TLS shutdown and capture result for logging. */\n      tls_shutdown_ok = MHD_tls_connection_shutdown (connection);\n\n      {\n        FILE *log = fopen(\"/tmp/logs/3498.txt\", \"a\");\n        if (NULL == log)\n          log = fopen(\"/tmp/3498.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  branch: MHD_USE_TLS set\\n\");\n          fprintf(log, \"    MHD_tls_connection_shutdown returned=%d\\n\", tls_shutdown_ok);\n          fclose(log);\n        }\n      }\n\n      if (! tls_shutdown_ok)\n        shutdown (connection->socket_fd,\n                  SHUT_WR);\n    }\n    else   /* Combined with next 'shutdown()'. */\n#endif /* HTTPS_SUPPORT */\n    shutdown (connection->socket_fd,\n              SHUT_WR);\n  }\n\n  /* Record the old values just before the assignments for later comparison. */\n  {\n    int old_state = (int)connection->state;\n    int old_event = (int)connection->event_loop_info;\n\n    connection->state = MHD_CONNECTION_CLOSED;\n    connection->event_loop_info = MHD_EVENT_LOOP_INFO_CLEANUP;\n\n    FILE *log = fopen(\"/tmp/logs/3498.txt\", \"a\");\n    if (NULL == log)\n      log = fopen(\"/tmp/3498.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"  assignments made\\n\");\n      fprintf(log, \"    old state=%d -> new state=%d\\n\", old_state, (int)connection->state);\n      fprintf(log, \"    old event_loop_info=%d -> new event_loop_info=%d\\n\",\n              old_event, (int)connection->event_loop_info);\n      fprintf(log, \"MHD_connection_mark_closed_: exit\\n\\n\");\n      fclose(log);\n    }\n  }\n}\n"
}