{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (mp_ptr_le_ (pool->memory, block));",
    "const size_t block_offset = mp_ptr_diff_ (block, pool->memory);",
    "bool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)"
  ],
  "explanation": "Only pointer-related declarations/uses need investigation for MISRA C 2023 Rule 8.13. The function parameters 'pool' and 'block' are non-const pointers in the function signature (hence the entire header is listed) and should be checked to see whether they can be qualified as pointers to const. The two calls that pass those pointers (mp_ptr_diff_ and mp_ptr_le_) are included because they reveal how those pointers are used and whether mutation could occur.\n\nOther fragments do not need investigation under Rule 8.13: local constant 'block_offset' is a size_t (non-pointer); mhd_assert checks and integer/size_t comparisons (pool->end, pool->pos, pool->size, block_size) do not involve pointer declarations that could be const-qualified; the NULL check and the final return statement do not involve pointer type qualification issues. The ROUND_TO_ALIGN_PLUS_RED_ZONE expression and arithmetic on offsets operate on integer types, not pointer declarations, so they are not relevant to Rule 8.13."
}