{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameters are non-const although the function only reads the pointed-to objects. Specifically, 'block' is declared as void * instead of const void * and 'pool' is declared as struct MemoryPool * instead of const struct MemoryPool *. Since the function does not modify *pool or *block (only reads their members/contents), these should be const-qualified (e.g. const struct MemoryPool *pool, const void *block).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_is_resizable_inplace code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3815.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_is_resizable_inplace code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_is_resizable_inplace with it.\n  - Your function must have the exact same signature as MHD_pool_is_resizable_inplace.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_is_resizable_inplace to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_is_resizable_inplace as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_is_resizable_inplace will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_is_resizable_inplace as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  /* Open log file to record control flow and state for reproduction */\n  FILE *logf = fopen(\"/tmp/logs/3815.txt\", \"a\");\n  if (logf)\n  {\n    /* Attempt to log basic entry and available pool state. It's possible that\n       dereferencing pool fields will trigger the same asserts as the original\n       function; this mirrors original behavior and provides evidence for the\n       violation scenario. */\n    fprintf(logf, \"ENTER: MHD_pool_is_resizable_inplace(pool=%p, block=%p, block_size=%zu)\\n\",\n            (void *)pool, block, block_size);\n    if (pool != NULL)\n    {\n      fprintf(logf, \"  pool->memory=%p, pool->pos=%zu, pool->end=%zu, pool->size=%zu\\n\",\n              (void *)pool->memory, (size_t)pool->pos, (size_t)pool->end, (size_t)pool->size);\n    }\n    fflush(logf);\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n\n  bool result = false;\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n\n    const size_t aligned_pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n    result = (pool->pos == aligned_pos);\n\n    if (logf)\n    {\n      fprintf(logf, \"  BLOCK PATH: block_offset=%zu, aligned_pos=%zu, pool->pos=%zu, result=%d\\n\",\n              block_offset, aligned_pos, (size_t)pool->pos, (int)result);\n      fflush(logf);\n    }\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"  NULL block path: Unallocated blocks cannot be resized in-place -> result=false\\n\");\n      fflush(logf);\n    }\n    result = false; /* Unallocated blocks cannot be resized in-place */\n  }\n\n  if (logf)\n    fclose(logf);\n\n  return result;\n}\n"
}