{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mhd_assert macro expands to a no\u2011op in the build (for example to ((void)0) or is compiled out), the statement is executed but has no effect and its removal would not change program behaviour \u2014 this makes it dead code and therefore violates MISRA C 2023 Rule 2.2. (If, however, mhd_assert expands to an expression with observable side effects such as logging/abort on failure, then removal would change behaviour and it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2778.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified buffer_append code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original buffer_append with it.\n  - Your function must have the exact same signature as buffer_append.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call buffer_append to check logs.\n  - Your function MUST preserve the original logic of buffer_append as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, buffer_append will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of buffer_append as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  /* Logging to help reproduce the scenario where mhd_assert expands to a no-op.\n     Logs are appended to /tmp/logs/2778.txt and include control flow and key state. */\n  FILE *log = fopen(\"/tmp/logs/2778.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"buffer_append: entered, buf=%p, ppos=%p, *ppos=%zu, buf_size=%zu, append=%p, append_size=%zu\\n\",\n            (void *)buf, (void *)ppos, *ppos, buf_size, (void *)append, append_size);\n  }\n\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  if (log)\n  {\n    /* We can't reliably observe whether mhd_assert has side effects here; we log that\n       control passed the assertion site. If mhd_assert is a no-op this log helps show\n       the statement was executed but produced no observable effect. */\n    fprintf(log, \"buffer_append: passed mhd_assert (control reached assertion site)\\n\");\n  }\n\n  if (buf_size < *ppos + append_size)\n  {\n    if (log)\n      fprintf(log, \"buffer_append: not enough space - buf_size=%zu < *ppos+append_size=%zu\\n\",\n              buf_size, *ppos + append_size);\n    if (log)\n      fclose(log);\n    return false;\n  }\n\n  memcpy (buf + *ppos, append, append_size);\n  if (log)\n    fprintf(log, \"buffer_append: memcpy done (wrote %zu bytes at offset %zu)\\n\", append_size, *ppos);\n\n  *ppos += append_size;\n  if (log)\n    fprintf(log, \"buffer_append: new *ppos=%zu, returning true\\n\", *ppos);\n\n  if (log)\n    fclose(log);\n\n  return true;\n}"
}