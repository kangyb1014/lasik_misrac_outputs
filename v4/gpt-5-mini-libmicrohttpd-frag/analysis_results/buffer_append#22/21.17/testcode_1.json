{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code can overflow the size_t addition used in the bounds check, allowing memcpy to access beyond the buffer. Example: on a 32-bit size_t, let buf_size = 100, *ppos = SIZE_MAX - 15 (4294967280), append_size = 20. Then *ppos + append_size wraps to 9, so (buf_size < *ppos + append_size) is false and memcpy(buf + *ppos, append, append_size) will attempt to write 20 bytes starting at an out-of-bounds address. The subsequent '*ppos += append_size;' stores the wrapped (incorrect) position. Thus Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified buffer_append code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2773.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified buffer_append code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original buffer_append with it.\n  - Your function must have the exact same signature as buffer_append.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call buffer_append to check logs.\n  - Your function MUST preserve the original logic of buffer_append as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, buffer_append will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of buffer_append as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  /* Preserve original assertion */\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n\n  /* Open log file (append) to record control flow and state. */\n  FILE *logf = fopen(\"/tmp/logs/2773.txt\", \"a\");\n  if (logf)\n    {\n      /* Log entry state */\n      size_t sum = *ppos + append_size;\n      int wrap = (sum < *ppos) ? 1 : 0; /* detect wrap-around */\n      fprintf(logf, \"buffer_append ENTER: buf=%p, ppos_ptr=%p, ppos=*ppos=%zu, buf_size=%zu, append=%p, append_size=%zu, sum=*ppos+append_size=%zu, wrap=%d\\n\",\n              (void *)buf, (void *)ppos, (size_t)(*ppos), (size_t)buf_size,\n              (const void *)append, (size_t)append_size, (size_t)sum, wrap);\n      fflush(logf);\n    }\n\n  /* Original bounds check (kept as-is to preserve behavior) */\n  if (buf_size < *ppos + append_size)\n    {\n      if (logf)\n        {\n          fprintf(logf, \"buffer_append: bounds check failed: buf_size (%zu) < *ppos + append_size (%zu) -> returning false\\n\",\n                  (size_t)buf_size, (size_t)(*ppos + append_size));\n          fflush(logf);\n          fclose(logf);\n        }\n      return false;\n    }\n\n  /* Perform the copy as originally specified */\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n\n  if (logf)\n    {\n      fprintf(logf, \"buffer_append: memcpy performed dst=%p, src=%p, n=%zu; new *ppos=%zu; returning true\\n\",\n              (void *)(buf + *ppos - append_size), (const void *)append, (size_t)append_size, (size_t)(*ppos));\n      fflush(logf);\n      fclose(logf);\n    }\n\n  return true;\n}\n"
}