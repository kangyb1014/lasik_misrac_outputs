{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'daemon' is declared as a non-const pointer (struct MHD_Daemon *daemon) although the function body only reads it and simply forwards it to get_timeout_millisec_. If get_timeout_millisec_int does not modify the pointed-to object (and the callee either accepts a const pointer or also does not modify it), the parameter should be declared as const struct MHD_Daemon *daemon to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_timeout_millisec_int code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_int:\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_timeout_millisec_int code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_timeout_millisec_int with it.\n  - Your function must have the exact same signature as get_timeout_millisec_int.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_timeout_millisec_int to check logs.\n  - Your function MUST preserve the original logic of get_timeout_millisec_int as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_timeout_millisec_int will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_timeout_millisec_int as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n  /* Log entry with pointer and parameter values */\n  {\n    FILE *f = fopen(\"/tmp/logs/2795.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"get_timeout_millisec_int: entered, daemon=%p, max_timeout=%lld\\n\",\n              (void *) daemon, (long long) max_timeout);\n      fclose(f);\n    }\n  }\n\n  /* Preserve original behavior: call the underlying function */\n  res = get_timeout_millisec_ (daemon, max_timeout);\n\n  /* Log the returned 64-bit result and the decision path */\n  {\n    FILE *f = fopen(\"/tmp/logs/2795.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"get_timeout_millisec_: returned res=%lld\\n\", (long long) res);\n#if SIZEOF_INT < SIZEOF_INT64_T\n      if (INT_MAX <= res)\n      {\n        fprintf(f, \"Decision: res >= INT_MAX (%d), returning INT_MAX\\n\", INT_MAX);\n        fclose(f);\n        return INT_MAX;\n      }\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n      fprintf(f, \"Decision: returning (int)res = %d\\n\", (int) res);\n      fclose(f);\n    }\n#if SIZEOF_INT < SIZEOF_INT64_T\n    else\n    {\n      /* If logging failed to open, still preserve original logic */\n      if (INT_MAX <= res)\n        return INT_MAX;\n    }\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  }\n\n  return (int) res;\n}\n"
}