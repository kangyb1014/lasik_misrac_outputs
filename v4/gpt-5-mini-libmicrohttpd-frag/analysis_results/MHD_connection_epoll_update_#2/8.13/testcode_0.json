{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer is declared as 'struct MHD_Daemon *const daemon' (a const pointer to a non-const object). In this function only read access to daemon members is performed (eready_head/tail, epoll_fd, options, etc.), so the pointed-to object need not be mutable. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. 'const struct MHD_Daemon *daemon' or 'struct MHD_Daemon const *daemon'). Therefore this usage violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_epoll_update_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3065.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_epoll_update_:\n```c\nenum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_epoll_update_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_epoll_update_ with it.\n  - Your function must have the exact same signature as MHD_connection_epoll_update_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_epoll_update_ to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_epoll_update_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_epoll_update_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_epoll_update_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "enum MHD_Result\nMHD_connection_epoll_update_ (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *const daemon = connection->daemon;\n  FILE *fp = fopen(\"/tmp/logs/3065.txt\", \"a\");\n\n  /* Minimal entry probe */\n  if (fp)\n  {\n    fprintf(fp, \"ENTER MHD_connection_epoll_update_: connection=%p daemon=%p\\n\",\n            (void *)connection, (void *)daemon);\n    fprintf(fp, \"  connection: socket_fd=%d state=%d epoll_state=0x%x event_loop_info=0x%x\\n\",\n            connection->socket_fd, (int)connection->state,\n            (unsigned int)connection->epoll_state,\n            (unsigned int)connection->event_loop_info);\n    if (daemon)\n    {\n      fprintf(fp, \"  daemon: epoll_fd=%d options=0x%x eready_head=%p eready_tail=%p\\n\",\n              daemon->epoll_fd, (unsigned int)daemon->options,\n              (void *)daemon->eready_head, (void *)daemon->eready_tail);\n    }\n    fflush(fp);\n  }\n\n  mhd_assert (MHD_D_IS_USING_EPOLL_ (daemon));\n\n  if ((0 != (MHD_EVENT_LOOP_INFO_PROCESS & connection->event_loop_info)) &&\n      (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EREADY_EDLL)))\n  {\n    /* Make sure that connection waiting for processing will be processed */\n    if (fp) fprintf(fp, \"  inserting into eready edll: connection=%p\\n\", (void *)connection);\n    EDLL_insert (daemon->eready_head,\n                 daemon->eready_tail,\n                 connection);\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EREADY_EDLL;\n    if (fp) fprintf(fp, \"  after insert: epoll_state=0x%x\\n\", (unsigned int)connection->epoll_state);\n    if (fp) fflush(fp);\n  }\n\n  if ( (0 == (connection->epoll_state & MHD_EPOLL_STATE_IN_EPOLL_SET)) &&\n       (0 == (connection->epoll_state & MHD_EPOLL_STATE_SUSPENDED)) &&\n       ( ( (MHD_EVENT_LOOP_INFO_WRITE == connection->event_loop_info) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_WRITE_READY))) ||\n         ( (0 != (MHD_EVENT_LOOP_INFO_READ & connection->event_loop_info)) &&\n           (0 == (connection->epoll_state & MHD_EPOLL_STATE_READ_READY)) ) ) )\n  {\n    /* add to epoll set */\n    struct epoll_event event;\n\n    event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n    event.data.ptr = connection;\n\n    if (fp)\n    {\n      fprintf(fp, \"  epoll_ctl ADD: epoll_fd=%d socket_fd=%d events=0x%x connection=%p\\n\",\n              daemon->epoll_fd, connection->socket_fd, (unsigned int)event.events, (void *)connection);\n      fflush(fp);\n    }\n\n    if (0 != epoll_ctl (daemon->epoll_fd,\n                        EPOLL_CTL_ADD,\n                        connection->socket_fd,\n                        &event))\n    {\n#ifdef HAVE_MESSAGES\n      if (0 != (daemon->options & MHD_USE_ERROR_LOG))\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n      if (fp)\n      {\n        int err = errno;\n        fprintf(fp, \"  epoll_ctl failed: errno=%d (%s) -- closing connection=%p\\n\",\n                err, (err ? strerror(err) : \"(no error string)\"), (void *)connection);\n        fflush(fp);\n      }\n      connection->state = MHD_CONNECTION_CLOSED;\n      cleanup_connection (connection);\n      if (fp) fclose(fp);\n      return MHD_NO;\n    }\n    connection->epoll_state |= MHD_EPOLL_STATE_IN_EPOLL_SET;\n    if (fp) fprintf(fp, \"  added to epoll set: epoll_state=0x%x\\n\", (unsigned int)connection->epoll_state);\n    if (fp) fflush(fp);\n  }\n\n  if (fp)\n  {\n    fprintf(fp, \"EXIT MHD_connection_epoll_update_: returning MHD_YES connection=%p\\n\", (void *)connection);\n    fclose(fp);\n  }\n  return MHD_YES;\n}\n"
}