{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 in a build where mhd_assert is a no-op (typical release build), the statement mhd_assert(0 == c->read_buffer_offset) is executed on the early-return path but has no effect; removing it would not change program behaviour, so it is dead code. (If mhd_assert can abort or has side effects in that build, then it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_shrink_read_buffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2268.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_shrink_read_buffer:\n```c\nstatic void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    mhd_assert (0 == c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    return;\n  }\n\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (0 == c->read_buffer_offset)\n  {\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n  }\n  else\n  {\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_shrink_read_buffer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_shrink_read_buffer with it.\n  - Your function must have the exact same signature as connection_shrink_read_buffer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_shrink_read_buffer to check logs.\n  - Your function MUST preserve the original logic of connection_shrink_read_buffer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_shrink_read_buffer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_shrink_read_buffer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nconnection_shrink_read_buffer (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  void *new_buf;\n  FILE *logf = fopen(\"/tmp/logs/2268.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"connection_shrink_read_buffer: entered, connection=%p\\n\", (void *)connection);\n    fprintf(logf, \"initial state: read_buffer=%p read_buffer_size=%zu read_buffer_offset=%zu pool=%p\\n\",\n            (void *)c->read_buffer,\n            (size_t)c->read_buffer_size,\n            (size_t)c->read_buffer_offset,\n            (void *)c->pool);\n  }\n\n  if ((NULL == c->read_buffer) || (0 == c->read_buffer_size))\n  {\n    if (logf) fprintf(logf, \"branch: read_buffer==NULL || read_buffer_size==0 (early return path)\\n\");\n    /* original assertions retained */\n    mhd_assert (0 == c->read_buffer_size);\n    if (logf) fprintf(logf, \"after assert: read_buffer_size=%zu\\n\", (size_t)c->read_buffer_size);\n    mhd_assert (0 == c->read_buffer_offset);\n    if (logf) fprintf(logf, \"after assert: read_buffer_offset=%zu\\n\", (size_t)c->read_buffer_offset);\n    if (logf) fclose(logf);\n    return;\n  }\n\n  if (logf) fprintf(logf, \"continuing: read_buffer and size non-zero\\n\");\n  mhd_assert (c->read_buffer_offset <= c->read_buffer_size);\n  if (logf) fprintf(logf, \"after assert: offset=%zu size=%zu\\n\", (size_t)c->read_buffer_offset, (size_t)c->read_buffer_size);\n\n  if (0 == c->read_buffer_offset)\n  {\n    if (logf) fprintf(logf, \"branch: read_buffer_offset == 0 -> deallocate and clear buffer\\n\");\n    MHD_pool_deallocate (c->pool, c->read_buffer, c->read_buffer_size);\n    c->read_buffer = NULL;\n    c->read_buffer_size = 0;\n    if (logf) fprintf(logf, \"after deallocate: read_buffer=%p read_buffer_size=%zu\\n\", (void *)c->read_buffer, (size_t)c->read_buffer_size);\n  }\n  else\n  {\n    if (logf) fprintf(logf, \"branch: read_buffer_offset > 0 -> attempt inplace resize/reallocate\\n\");\n    mhd_assert (MHD_pool_is_resizable_inplace (c->pool, c->read_buffer, \\\n                                               c->read_buffer_size));\n    new_buf = MHD_pool_reallocate (c->pool, c->read_buffer, c->read_buffer_size,\n                                   c->read_buffer_offset);\n    mhd_assert (c->read_buffer == new_buf);\n    c->read_buffer = new_buf;\n    c->read_buffer_size = c->read_buffer_offset;\n    if (logf) fprintf(logf, \"after reallocate: new_buf=%p read_buffer_size=%zu read_buffer_offset=%zu\\n\",\n                      (void *)new_buf, (size_t)c->read_buffer_size, (size_t)c->read_buffer_offset);\n  }\n\n  if (logf) fclose(logf);\n}\n"
}