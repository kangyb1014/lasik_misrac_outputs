{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro/function is passed a string literal (via _(\"Closing connection (out of memory).\")) but the receiving parameter is not const-qualified. In practice the gettext-style _() often returns char * and the CONNECTION_CLOSE_ERROR/logging API may take a char *; passing a literal to a non-const char * parameter violates MISRA C 2023 Rule 8.13. The correct approach is to ensure the callee/macro parameter is declared const char * (or modify the translation macro to return const char *), so the pointer to the literal is const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_ready_chunked_body code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1605.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_ready_chunked_body:\n```c\nstatic enum MHD_Result\ntry_ready_chunked_body (struct MHD_Connection *connection,\n                        bool *p_finished)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n  static const size_t max_chunk = 0xFFFFFF;\n  char chunk_hdr[6];            /* 6: max strlen of \"FFFFFF\" */\n  /* \"FFFFFF\" + \"\\r\\n\" */\n  static const size_t max_chunk_hdr_len = sizeof(chunk_hdr) + 2;\n  /* \"FFFFFF\" + \"\\r\\n\" + \"\\r\\n\" (chunk termination) */\n  static const size_t max_chunk_overhead = sizeof(chunk_hdr) + 2 + 2;\n  size_t chunk_hdr_len;\n  uint64_t left_to_send;\n  size_t size_to_fill;\n\n  response = connection->rp.response;\n  mhd_assert (NULL != response->crc || NULL != response->data);\n\n  mhd_assert (0 == connection->write_buffer_append_offset);\n\n  /* The buffer must be reasonably large enough */\n  if (128 > connection->write_buffer_size)\n  {\n    size_t size;\n\n    size = connection->write_buffer_size + MHD_pool_get_free (connection->pool);\n    if (128 > size)\n    {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    /* Limit the buffer size to the largest usable size for chunks */\n    if ( (max_chunk + max_chunk_overhead) < size)\n      size = max_chunk + max_chunk_overhead;\n    mhd_assert ((NULL == connection->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (connection->pool, \\\n                                               connection->write_buffer, \\\n                                               connection->write_buffer_size));\n    connection->write_buffer =\n      MHD_pool_reallocate (connection->pool,\n                           connection->write_buffer,\n                           connection->write_buffer_size,\n                           size);\n    mhd_assert (NULL != connection->write_buffer);\n    connection->write_buffer_size = size;\n  }\n  mhd_assert (max_chunk_overhead < connection->write_buffer_size);\n\n  if (MHD_SIZE_UNKNOWN == response->total_size)\n    left_to_send = MHD_SIZE_UNKNOWN;\n  else\n    left_to_send = response->total_size\n                   - connection->rp.rsp_write_position;\n\n  size_to_fill = connection->write_buffer_size - max_chunk_overhead;\n  /* Limit size for the callback to the max usable size */\n  if (max_chunk < size_to_fill)\n    size_to_fill = max_chunk;\n  if (left_to_send < size_to_fill)\n    size_to_fill = (size_t) left_to_send;\n\n  if (0 == left_to_send)\n    /* nothing to send, don't bother calling crc */\n    ret = MHD_CONTENT_READER_END_OF_STREAM;\n  else if ( (response->data_start <=\n             connection->rp.rsp_write_position) &&\n            (response->data_start + response->data_size >\n             connection->rp.rsp_write_position) )\n  {\n    /* difference between rsp_write_position and data_start is less\n       than data_size which is size_t type, no need to check for overflow */\n    const size_t data_write_offset\n      = (size_t) (connection->rp.rsp_write_position\n                  - response->data_start);\n    /* buffer already ready, use what is there for the chunk */\n    mhd_assert (SSIZE_MAX >= (response->data_size - data_write_offset));\n    mhd_assert (response->data_size >= data_write_offset);\n    ret = (ssize_t) (response->data_size - data_write_offset);\n    if ( ((size_t) ret) > size_to_fill)\n      ret = (ssize_t) size_to_fill;\n    memcpy (&connection->write_buffer[max_chunk_hdr_len],\n            &response->data[data_write_offset],\n            (size_t) ret);\n  }\n  else\n  {\n    if (NULL == response->crc)\n    { /* There is no way to reach this code */\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"No callback for the chunked data.\"));\n      return MHD_NO;\n    }\n    ret = response->crc (response->crc_cls,\n                         connection->rp.rsp_write_position,\n                         &connection->write_buffer[max_chunk_hdr_len],\n                         size_to_fill);\n  }\n  if (MHD_CONTENT_READER_END_WITH_ERROR == ret)\n  {\n    /* error, close socket! */\n    /* TODO: remove update of the response size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection (application error \" \\\n                               \"generating response).\"));\n    return MHD_NO;\n  }\n  if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n  {\n    *p_finished = true;\n    /* TODO: remove update of the response size */\n    response->total_size = connection->rp.rsp_write_position;\n    return MHD_YES;\n  }\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_CHUNKED_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  if (size_to_fill < (size_t) ret)\n  {\n#if defined(MHD_USE_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection (application returned \" \\\n                               \"more data than requested).\"));\n    return MHD_NO;\n  }\n  chunk_hdr_len = MHD_uint32_to_strx ((uint32_t) ret, chunk_hdr,\n                                      sizeof(chunk_hdr));\n  mhd_assert (chunk_hdr_len != 0);\n  mhd_assert (chunk_hdr_len < sizeof(chunk_hdr));\n  *p_finished = false;\n  connection->write_buffer_send_offset =\n    (max_chunk_hdr_len - (chunk_hdr_len + 2));\n  memcpy (connection->write_buffer + connection->write_buffer_send_offset,\n          chunk_hdr,\n          chunk_hdr_len);\n  connection->write_buffer[max_chunk_hdr_len - 2] = '\\r';\n  connection->write_buffer[max_chunk_hdr_len - 1] = '\\n';\n  connection->write_buffer[max_chunk_hdr_len + (size_t) ret] = '\\r';\n  connection->write_buffer[max_chunk_hdr_len + (size_t) ret + 1] = '\\n';\n  connection->rp.rsp_write_position += (size_t) ret;\n  connection->write_buffer_append_offset = max_chunk_hdr_len + (size_t) ret + 2;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_ready_chunked_body code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_ready_chunked_body with it.\n  - Your function must have the exact same signature as try_ready_chunked_body.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_ready_chunked_body to check logs.\n  - Your function MUST preserve the original logic of try_ready_chunked_body as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_ready_chunked_body will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_ready_chunked_body as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ntry_ready_chunked_body (struct MHD_Connection *connection,\n                        bool *p_finished)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n  static const size_t max_chunk = 0xFFFFFF;\n  char chunk_hdr[6];            /* 6: max strlen of \"FFFFFF\" */\n  /* \"FFFFFF\" + \"\\r\\n\" */\n  static const size_t max_chunk_hdr_len = sizeof(chunk_hdr) + 2;\n  /* \"FFFFFF\" + \"\\r\\n\" + \"\\r\\n\" (chunk termination) */\n  static const size_t max_chunk_overhead = sizeof(chunk_hdr) + 2 + 2;\n  size_t chunk_hdr_len;\n  uint64_t left_to_send;\n  size_t size_to_fill;\n\n  response = connection->rp.response;\n  mhd_assert (NULL != response->crc || NULL != response->data);\n\n  mhd_assert (0 == connection->write_buffer_append_offset);\n\n  /* Minimal entry log so that the function invocation is recorded. */\n  {\n    FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"ENTER try_ready_chunked_body: connection=%p response=%p write_buffer=%p write_buffer_size=%zu rp.rsp_write_position=%zu\\n\",\n               (void *) connection,\n               (void *) response,\n               (void *) connection->write_buffer,\n               connection->write_buffer_size,\n               connection->rp.rsp_write_position);\n      fclose (lf);\n    }\n  }\n\n  /* The buffer must be reasonably large enough */\n  if (128 > connection->write_buffer_size)\n  {\n    size_t size;\n\n    size = connection->write_buffer_size + MHD_pool_get_free (connection->pool);\n    if (128 > size)\n    {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n      /* not enough memory */\n      {\n        char *local_msg = _ (\"Closing connection (out of memory).\");\n        FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"BRANCH out_of_memory: connection=%p msg_ptr=%p msg=\\\"%s\\\" write_buffer_size=%zu pool=%p\\n\",\n                   (void *) connection,\n                   (void *) local_msg,\n                   local_msg ? local_msg : \"(null)\",\n                   connection->write_buffer_size,\n                   (void *) connection->pool);\n          fclose (lf);\n        }\n        CONNECTION_CLOSE_ERROR (connection, local_msg);\n      }\n      return MHD_NO;\n    }\n    /* Limit the buffer size to the largest usable size for chunks */\n    if ( (max_chunk + max_chunk_overhead) < size)\n      size = max_chunk + max_chunk_overhead;\n    mhd_assert ((NULL == connection->write_buffer) || \\\n                MHD_pool_is_resizable_inplace (connection->pool, \\\n                                               connection->write_buffer, \\\n                                               connection->write_buffer_size));\n    connection->write_buffer =\n      MHD_pool_reallocate (connection->pool,\n                           connection->write_buffer,\n                           connection->write_buffer_size,\n                           size);\n    mhd_assert (NULL != connection->write_buffer);\n    connection->write_buffer_size = size;\n\n    /* log resizing info */\n    {\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"RESIZE write_buffer: connection=%p new_size=%zu write_buffer=%p\\n\",\n                 (void *) connection,\n                 connection->write_buffer_size,\n                 (void *) connection->write_buffer);\n        fclose (lf);\n      }\n    }\n  }\n  mhd_assert (max_chunk_overhead < connection->write_buffer_size);\n\n  if (MHD_SIZE_UNKNOWN == response->total_size)\n    left_to_send = MHD_SIZE_UNKNOWN;\n  else\n    left_to_send = response->total_size\n                   - connection->rp.rsp_write_position;\n\n  size_to_fill = connection->write_buffer_size - max_chunk_overhead;\n  /* Limit size for the callback to the max usable size */\n  if (max_chunk < size_to_fill)\n    size_to_fill = max_chunk;\n  if (left_to_send < size_to_fill)\n    size_to_fill = (size_t) left_to_send;\n\n  {\n    FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"PREPARE chunk: left_to_send=%llu size_to_fill=%zu total_size=%llu rsp_write_position=%zu\\n\",\n               (unsigned long long) left_to_send,\n               size_to_fill,\n               (unsigned long long) response->total_size,\n               connection->rp.rsp_write_position);\n      fclose (lf);\n    }\n  }\n\n  if (0 == left_to_send)\n    /* nothing to send, don't bother calling crc */\n    ret = MHD_CONTENT_READER_END_OF_STREAM;\n  else if ( (response->data_start <=\n             connection->rp.rsp_write_position) &&\n            (response->data_start + response->data_size >\n             connection->rp.rsp_write_position) )\n  {\n    /* difference between rsp_write_position and data_start is less\n       than data_size which is size_t type, no need to check for overflow */\n    const size_t data_write_offset\n      = (size_t) (connection->rp.rsp_write_position\n                  - response->data_start);\n    /* buffer already ready, use what is there for the chunk */\n    mhd_assert (SSIZE_MAX >= (response->data_size - data_write_offset));\n    mhd_assert (response->data_size >= data_write_offset);\n    ret = (ssize_t) (response->data_size - data_write_offset);\n    if ( ((size_t) ret) > size_to_fill)\n      ret = (ssize_t) size_to_fill;\n    memcpy (&connection->write_buffer[max_chunk_hdr_len],\n            &response->data[data_write_offset],\n            (size_t) ret);\n\n    {\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"BRANCH data_already_ready: data_write_offset=%zu ret=%zd size_to_fill=%zu\\n\",\n                 data_write_offset,\n                 ret,\n                 size_to_fill);\n        fclose (lf);\n      }\n    }\n  }\n  else\n  {\n    if (NULL == response->crc)\n    { /* There is no way to reach this code */\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n      {\n        char *local_msg = _ (\"No callback for the chunked data.\");\n        FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n        if (lf)\n        {\n          fprintf (lf, \"BRANCH no_crc_callback: connection=%p response=%p msg_ptr=%p msg=\\\"%s\\\"\\n\",\n                   (void *) connection,\n                   (void *) response,\n                   (void *) local_msg,\n                   local_msg ? local_msg : \"(null)\");\n          fclose (lf);\n        }\n        CONNECTION_CLOSE_ERROR (connection, local_msg);\n      }\n      return MHD_NO;\n    }\n    ret = response->crc (response->crc_cls,\n                         connection->rp.rsp_write_position,\n                         &connection->write_buffer[max_chunk_hdr_len],\n                         size_to_fill);\n\n    {\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"CALL crc: crc=%p crc_cls=%p requested=%zu ret=%zd\\n\",\n                 (void *) response->crc,\n                 (void *) response->crc_cls,\n                 size_to_fill,\n                 ret);\n        fclose (lf);\n      }\n    }\n  }\n  if (MHD_CONTENT_READER_END_WITH_ERROR == ret)\n  {\n    /* error, close socket! */\n    /* TODO: remove update of the response size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    {\n      char *local_msg = _ (\"Closing connection (application error \" \\\n                         \"generating response).\");\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"BRANCH end_with_error: connection=%p msg_ptr=%p msg=\\\"%s\\\" ret=%zd rsp_write_position=%zu\\n\",\n                 (void *) connection,\n                 (void *) local_msg,\n                 local_msg ? local_msg : \"(null)\",\n                 ret,\n                 connection->rp.rsp_write_position);\n        fclose (lf);\n      }\n      CONNECTION_CLOSE_ERROR (connection, local_msg);\n    }\n    return MHD_NO;\n  }\n  if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n  {\n    *p_finished = true;\n    /* TODO: remove update of the response size */\n    response->total_size = connection->rp.rsp_write_position;\n\n    {\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"BRANCH end_of_stream: connection=%p rsp_write_position=%zu total_size=%llu\\n\",\n                 (void *) connection,\n                 connection->rp.rsp_write_position,\n                 (unsigned long long) response->total_size);\n        fclose (lf);\n      }\n    }\n\n    return MHD_YES;\n  }\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_CHUNKED_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    {\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"BRANCH zero_ret_unready: connection=%p state set to %d\\n\",\n                 (void *) connection,\n                 (int) connection->state);\n        fclose (lf);\n      }\n    }\n    return MHD_NO;\n  }\n  if (size_to_fill < (size_t) ret)\n  {\n#if defined(MHD_USE_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    {\n      char *local_msg = _ (\"Closing connection (application returned \" \\\n                         \"more data than requested).\");\n      FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n      if (lf)\n      {\n        fprintf (lf, \"BRANCH too_much_data: connection=%p msg_ptr=%p msg=\\\"%s\\\" ret=%zd size_to_fill=%zu\\n\",\n                 (void *) connection,\n                 (void *) local_msg,\n                 local_msg ? local_msg : \"(null)\",\n                 ret,\n                 size_to_fill);\n        fclose (lf);\n      }\n      CONNECTION_CLOSE_ERROR (connection, local_msg);\n    }\n    return MHD_NO;\n  }\n  chunk_hdr_len = MHD_uint32_to_strx ((uint32_t) ret, chunk_hdr,\n                                      sizeof(chunk_hdr));\n  mhd_assert (chunk_hdr_len != 0);\n  mhd_assert (chunk_hdr_len < sizeof(chunk_hdr));\n  *p_finished = false;\n  connection->write_buffer_send_offset =\n    (max_chunk_hdr_len - (chunk_hdr_len + 2));\n  memcpy (connection->write_buffer + connection->write_buffer_send_offset,\n          chunk_hdr,\n          chunk_hdr_len);\n  connection->write_buffer[max_chunk_hdr_len - 2] = '\\r';\n  connection->write_buffer[max_chunk_hdr_len - 1] = '\\n';\n  connection->write_buffer[max_chunk_hdr_len + (size_t) ret] = '\\r';\n  connection->write_buffer[max_chunk_hdr_len + (size_t) ret + 1] = '\\n';\n  connection->rp.rsp_write_position += (size_t) ret;\n  connection->write_buffer_append_offset = max_chunk_hdr_len + (size_t) ret + 2;\n\n  {\n    FILE *lf = fopen(\"/tmp/logs/1605.txt\", \"a\");\n    if (lf)\n    {\n      fprintf (lf, \"EXIT try_ready_chunked_body: connection=%p ret=%zd write_offset=%zu append_offset=%zu finished=%d\\n\",\n               (void *) connection,\n               ret,\n               connection->write_buffer_send_offset,\n               connection->write_buffer_append_offset,\n               (int) *p_finished);\n      fclose (lf);\n    }\n  }\n\n  return MHD_YES;\n}\n"
}