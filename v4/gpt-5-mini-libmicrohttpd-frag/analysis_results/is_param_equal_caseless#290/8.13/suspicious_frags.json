{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_param_equal_caseless:\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return (str_len == param->value.len) &&\n       (0 == memcmp (str, param->value.str, str_len));",
    "if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);",
    "mhd_assert (NULL != param->value.str);"
  ],
  "explanation": "Only uses of pointer-to-character data accessed via param->value.str are potentially subject to Rule 8.13 (i.e., the pointer should point to a const-qualified type if possible). The function parameter 'str' is already declared as pointing to const data (const char * const), and the function parameter 'param' is a pointer to a const-qualified struct (const struct MHD_RqDAuthParam *), so those signatures themselves do not indicate a violation. Non-pointer members and boolean checks (e.g., param->value.len, param->quoted) are not relevant to Rule 8.13. The listed fragments cover all expressions in the function that obtain or pass the character-data pointer through the API and therefore are the places that need investigation for whether the pointee should be const-qualified."
}