{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nUnder HTTPS_SUPPORT, the function parameter 'read_ready' (a by-value bool parameter) is assigned: 'if (con->tls_read_ready) read_ready = true;'. Assigning to a non-pointer function parameter modifies the parameter itself and therefore violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified call_handlers code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3212.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of call_handlers:\n```c\nstatic enum MHD_Result\ncall_handlers (struct MHD_Connection *con,\n               bool read_ready,\n               bool write_ready,\n               bool force_close)\n{\n  enum MHD_Result ret;\n  bool states_info_processed = false;\n  /* Fast track flag */\n  bool on_fasttrack = (con->state == MHD_CONNECTION_INIT);\n  ret = MHD_YES;\n\n  mhd_assert ((0 == (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_valid_ID_ (con->tid)));\n  mhd_assert ((0 != (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (! MHD_thread_handle_ID_is_valid_ID_ (con->tid)));\n  mhd_assert ((0 == (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_current_thread_ (con->tid)));\n\n#ifdef HTTPS_SUPPORT\n  if (con->tls_read_ready)\n    read_ready = true;\n#endif /* HTTPS_SUPPORT */\n  if ( (0 != (MHD_EVENT_LOOP_INFO_READ & con->event_loop_info)) &&\n       (read_ready || (force_close && con->sk_nonblck)) )\n  {\n    MHD_connection_handle_read (con, force_close);\n    mhd_assert (! force_close || MHD_CONNECTION_CLOSED == con->state);\n    ret = MHD_connection_handle_idle (con);\n    if (force_close)\n      return ret;\n    states_info_processed = true;\n  }\n  if (! force_close)\n  {\n    /* No need to check value of 'ret' here as closed connection\n     * cannot be in MHD_EVENT_LOOP_INFO_WRITE state. */\n    if ( (MHD_EVENT_LOOP_INFO_WRITE == con->event_loop_info) &&\n         write_ready)\n    {\n      MHD_connection_handle_write (con);\n      ret = MHD_connection_handle_idle (con);\n      states_info_processed = true;\n    }\n  }\n  else\n  {\n    MHD_connection_close_ (con,\n                           MHD_REQUEST_TERMINATED_WITH_ERROR);\n    return MHD_connection_handle_idle (con);\n  }\n\n  if (! states_info_processed)\n  {   /* Connection is not read or write ready, but external conditions\n       * may be changed and need to be processed. */\n    ret = MHD_connection_handle_idle (con);\n  }\n  /* Fast track for fast connections. */\n  /* If full request was read by single read_handler() invocation\n     and headers were completely prepared by single MHD_connection_handle_idle()\n     then try not to wait for next sockets polling and send response\n     immediately.\n     As writeability of socket was not checked and it may have\n     some data pending in system buffers, use this optimization\n     only for non-blocking sockets. */\n  /* No need to check 'ret' as connection is always in\n   * MHD_CONNECTION_CLOSED state if 'ret' is equal 'MHD_NO'. */\n  else if (on_fasttrack && con->sk_nonblck)\n  {\n    if (MHD_CONNECTION_HEADERS_SENDING == con->state)\n    {\n      MHD_connection_handle_write (con);\n      /* Always call 'MHD_connection_handle_idle()' after each read/write. */\n      ret = MHD_connection_handle_idle (con);\n    }\n    /* If all headers were sent by single write_handler() and\n     * response body is prepared by single MHD_connection_handle_idle()\n     * call - continue. */\n    if ((MHD_CONNECTION_NORMAL_BODY_READY == con->state) ||\n        (MHD_CONNECTION_CHUNKED_BODY_READY == con->state))\n    {\n      MHD_connection_handle_write (con);\n      ret = MHD_connection_handle_idle (con);\n    }\n  }\n\n  /* All connection's data and states are processed for this turn.\n   * If connection already has more data to be processed - use\n   * zero timeout for next select()/poll(). */\n  /* Thread-per-connection do not need global zero timeout as\n   * connections are processed individually. */\n  /* Note: no need to check for read buffer availability for\n   * TLS read-ready connection in 'read info' state as connection\n   * without space in read buffer will be marked as 'info block'. */\n  if ( (! con->daemon->data_already_pending) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (con->daemon)) )\n  {\n    if (0 != (MHD_EVENT_LOOP_INFO_PROCESS & con->event_loop_info))\n      con->daemon->data_already_pending = true;\n#ifdef HTTPS_SUPPORT\n    else if ( (con->tls_read_ready) &&\n              (0 != (MHD_EVENT_LOOP_INFO_READ & con->event_loop_info)) )\n      con->daemon->data_already_pending = true;\n#endif /* HTTPS_SUPPORT */\n  }\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified call_handlers code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original call_handlers with it.\n  - Your function must have the exact same signature as call_handlers.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call call_handlers to check logs.\n  - Your function MUST preserve the original logic of call_handlers as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, call_handlers will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of call_handlers as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ncall_handlers (struct MHD_Connection *con,\n               bool read_ready,\n               bool write_ready,\n               bool force_close)\n{\n  enum MHD_Result ret;\n  bool states_info_processed = false;\n  /* Fast track flag */\n  bool on_fasttrack = (con->state == MHD_CONNECTION_INIT);\n  ret = MHD_YES;\n\n  /* Log entry and initial parameters/state for debugging MISRA Rule 17.8 scenario */\n  {\n    FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"call_handlers entered: con=%p, read_ready=%d, write_ready=%d, force_close=%d, con->state=%d, con->event_loop_info=0x%08x\\n\",\n              (void *)con, (int)read_ready, (int)write_ready, (int)force_close,\n              (int)con->state, (unsigned)con->event_loop_info);\n      fclose(log);\n    }\n  }\n\n  mhd_assert ((0 == (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_valid_ID_ (con->tid)));\n  mhd_assert ((0 != (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (! MHD_thread_handle_ID_is_valid_ID_ (con->tid)));\n  mhd_assert ((0 == (con->daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (MHD_thread_handle_ID_is_current_thread_ (con->tid)));\n\n#ifdef HTTPS_SUPPORT\n  /* Probe around the assignment that is the subject of the MISRA 17.8 report. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Before HTTPS_SUPPORT assignment: con->tls_read_ready=%d, read_ready=%d\\n\",\n              (int)con->tls_read_ready, (int)read_ready);\n      fclose(log);\n    }\n  }\n\n  if (con->tls_read_ready)\n  {\n    /* This assignment modifies the local (by-value) parameter 'read_ready'.\n       Log the fact that the assignment occurs and the value after assignment. */\n    read_ready = true;\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"After HTTPS_SUPPORT assignment: con->tls_read_ready=%d, read_ready=%d (assigned)\\n\",\n                (int)con->tls_read_ready, (int)read_ready);\n        fclose(log);\n      }\n    }\n  }\n#else /* HTTPS_SUPPORT */\n  /* When HTTPS_SUPPORT is not defined, still log for coverage that the branch is absent. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"HTTPS_SUPPORT not defined: no tls_read_ready handling. read_ready=%d\\n\", (int)read_ready);\n      fclose(log);\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  if ( (0 != (MHD_EVENT_LOOP_INFO_READ & con->event_loop_info)) &&\n       (read_ready || (force_close && con->sk_nonblck)) )\n  {\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Entering read handling: read_ready=%d, force_close=%d, con->sk_nonblck=%d\\n\",\n                (int)read_ready, (int)force_close, (int)con->sk_nonblck);\n        fclose(log);\n      }\n    }\n\n    MHD_connection_handle_read (con, force_close);\n    mhd_assert (! force_close || MHD_CONNECTION_CLOSED == con->state);\n    ret = MHD_connection_handle_idle (con);\n    if (force_close)\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Returning after force_close in read handling: ret=%d, con->state=%d\\n\",\n                (int)ret, (int)con->state);\n        fclose(log);\n      }\n      return ret;\n    }\n    states_info_processed = true;\n  }\n  if (! force_close)\n  {\n    /* No need to check value of 'ret' here as closed connection\n     * cannot be in MHD_EVENT_LOOP_INFO_WRITE state. */\n    if ( (MHD_EVENT_LOOP_INFO_WRITE == con->event_loop_info) &&\n         write_ready)\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Entering write handling: write_ready=%d\\n\", (int)write_ready);\n        fclose(log);\n      }\n\n      MHD_connection_handle_write (con);\n      ret = MHD_connection_handle_idle (con);\n      states_info_processed = true;\n    }\n  }\n  else\n  {\n    MHD_connection_close_ (con,\n                           MHD_REQUEST_TERMINATED_WITH_ERROR);\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"force_close branch: closed connection and returning idle handler result.\\n\");\n        fclose(log);\n      }\n    }\n\n    return MHD_connection_handle_idle (con);\n  }\n\n  if (! states_info_processed)\n  {   /* Connection is not read or write ready, but external conditions\n       * may be changed and need to be processed. */\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"No states processed: calling idle handler.\\n\");\n        fclose(log);\n      }\n    }\n\n    ret = MHD_connection_handle_idle (con);\n  }\n  /* Fast track for fast connections. */\n  /* If full request was read by single read_handler() invocation\n     and headers were completely prepared by single MHD_connection_handle_idle()\n     then try not to wait for next sockets polling and send response\n     immediately.\n     As writeability of socket was not checked and it may have\n     some data pending in system buffers, use this optimization\n     only for non-blocking sockets. */\n  /* No need to check 'ret' as connection is always in\n   * MHD_CONNECTION_CLOSED state if 'ret' is equal 'MHD_NO'. */\n  else if (on_fasttrack && con->sk_nonblck)\n  {\n    if (MHD_CONNECTION_HEADERS_SENDING == con->state)\n    {\n      MHD_connection_handle_write (con);\n      /* Always call 'MHD_connection_handle_idle()' after each read/write. */\n      ret = MHD_connection_handle_idle (con);\n    }\n    /* If all headers were sent by single write_handler() and\n     * response body is prepared by single MHD_connection_handle_idle()\n     * call - continue. */\n    if ((MHD_CONNECTION_NORMAL_BODY_READY == con->state) ||\n        (MHD_CONNECTION_CHUNKED_BODY_READY == con->state))\n    {\n      MHD_connection_handle_write (con);\n      ret = MHD_connection_handle_idle (con);\n    }\n  }\n\n  /* All connection's data and states are processed for this turn.\n   * If connection already has more data to be processed - use\n   * zero timeout for next select()/poll(). */\n  /* Thread-per-connection do not need global zero timeout as\n   * connections are processed individually. */\n  /* Note: no need to check for read buffer availability for\n   * TLS read-ready connection in 'read info' state as connection\n   * without space in read buffer will be marked as 'info block'. */\n  if ( (! con->daemon->data_already_pending) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (con->daemon)) )\n  {\n    if (0 != (MHD_EVENT_LOOP_INFO_PROCESS & con->event_loop_info))\n      con->daemon->data_already_pending = true;\n#ifdef HTTPS_SUPPORT\n    else if ( (con->tls_read_ready) &&\n              (0 != (MHD_EVENT_LOOP_INFO_READ & con->event_loop_info)) )\n      con->daemon->data_already_pending = true;\n#endif /* HTTPS_SUPPORT */\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"After processing: data_already_pending=%d, daemon thread-per-conn=%d, con->event_loop_info=0x%08x\\n\",\n                (int)con->daemon->data_already_pending,\n                (int)MHD_D_IS_USING_THREAD_PER_CONN_ (con->daemon),\n                (unsigned)con->event_loop_info);\n        fclose(log);\n      }\n    }\n  }\n\n  /* Final state log before return */\n  {\n    FILE *log = fopen(\"/tmp/logs/3212.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"call_handlers exiting: ret=%d, con=%p, con->state=%d\\n\",\n              (int)ret, (void *)con, (int)con->state);\n      fclose(log);\n    }\n  }\n\n  return ret;\n}\n"
}