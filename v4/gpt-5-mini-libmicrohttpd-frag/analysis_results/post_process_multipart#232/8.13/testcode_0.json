{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes pp->boundary (a plain char *) to find_boundary. If pp->boundary points to data that is not modified by find_boundary (i.e. it is only read), then pp->boundary and the corresponding function parameter should be const-qualified (const char *). If pp->boundary is declared as char * (non-const) and find_boundary does not modify the buffer, this violates MISRA C 2023 Rule 8.13. (If, alternatively, find_boundary legitimately modifies the boundary buffer or pp->boundary is meant to be mutated, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_process_multipart code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1665.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of post_process_multipart:\n```c\nstatic enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n    poff += max;\n    pp->buffer_pos += max;\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      pp->state = PP_Error;\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      (void) find_boundary (pp,\n                            pp->boundary,\n                            pp->blen,\n                            &ioff,\n                            PP_ProcessEntryHeaders,\n                            PP_Done);\n      break;\n    case PP_NextBoundary:\n      if (MHD_NO == find_boundary (pp,\n                                   pp->boundary,\n                                   pp->blen,\n                                   &ioff,\n                                   PP_ProcessEntryHeaders,\n                                   PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_PerformCheckMultipart))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      break;\n    case PP_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->boundary,\n                                               pp->blen,\n                                               PP_PerformCleanup,\n                                               PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      if (MHD_NO == find_boundary (pp,\n                                   pp->nested_boundary,\n                                   pp->nlen,\n                                   &ioff,\n                                   PP_Nested_PerformMarking,\n                                   PP_NextBoundary /* or PP_Error? */))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_Nested_ProcessValueToBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->nested_boundary,\n                                               pp->nlen,\n                                               PP_Nested_PerformCleanup,\n                                               PP_NextBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* serious error */\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified post_process_multipart code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original post_process_multipart with it.\n  - Your function must have the exact same signature as post_process_multipart.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call post_process_multipart to check logs.\n  - Your function MUST preserve the original logic of post_process_multipart as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, post_process_multipart will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of post_process_multipart as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n\n  /* Open log file for probes. We try to append so multiple runs accumulate info. */\n  FILE * _mhd_log = fopen(\"/tmp/logs/1665.txt\", \"a\");\n  if (_mhd_log)\n  {\n    fprintf(_mhd_log, \"ENTER post_process_multipart: pp=%p post_data_len=%zu buffer_pos=%zu\\n\",\n            (void *)pp, post_data_len, (pp ? pp->buffer_pos : 0));\n    /* Snapshot some key fields if available */\n    if (pp)\n    {\n      fprintf(_mhd_log, \"  initial: boundary_ptr=%p blen=%zu nested_boundary=%p nlen=%zu state=%d\\n\",\n              (void *)pp->boundary, pp->blen, (void *)pp->nested_boundary, pp->nlen, (int)pp->state);\n      fflush(_mhd_log);\n    }\n  }\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n    poff += max;\n    pp->buffer_pos += max;\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      if (_mhd_log)\n      {\n        fprintf(_mhd_log, \"ERROR out of memory condition: max=0 state_changed=0 poff=%zu post_data_len=%zu\\n\",\n                poff, post_data_len);\n        fflush(_mhd_log);\n        fclose(_mhd_log);\n      }\n      pp->state = PP_Error;\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      if (_mhd_log)\n      {\n        fprintf(_mhd_log, \"ERROR: no '\\\\r\\\\n' found at buffer_pos=%zu\\n\", pp->buffer_pos);\n        fflush(_mhd_log);\n        fclose(_mhd_log);\n      }\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      if (_mhd_log)\n      {\n        fprintf(_mhd_log, \"RETURN PP_Error state reached.\\n\");\n        fflush(_mhd_log);\n        fclose(_mhd_log);\n      }\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      if (_mhd_log)\n      {\n        fprintf(_mhd_log, \"RETURN PP_Done but received more data -> mark PP_Error.\\n\");\n        fflush(_mhd_log);\n        fclose(_mhd_log);\n      }\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      {\n        /* Probe the boundary before calling find_boundary */\n        if (_mhd_log)\n        {\n          size_t _sn = pp->blen;\n          char _snap[128];\n          size_t _i;\n          if (NULL == pp->boundary)\n            fprintf(_mhd_log, \"find_boundary(PP_Init): boundary=NULL blen=%zu\\n\", pp->blen);\n          else\n          {\n            if (_sn > sizeof(_snap) - 1) _sn = sizeof(_snap) - 1;\n            for (_i = 0; _i < _sn; ++_i) _snap[_i] = pp->boundary[_i];\n            _snap[_sn] = '\\0';\n            fprintf(_mhd_log, \"find_boundary(PP_Init) -> boundary_ptr=%p blen=%zu sample='%s'\\n\",\n                    (void *)pp->boundary, pp->blen, _snap);\n          }\n          fflush(_mhd_log);\n        }\n\n        enum MHD_Result _find_res = find_boundary (pp,\n                                                   pp->boundary,\n                                                   pp->blen,\n                                                   &ioff,\n                                                   PP_ProcessEntryHeaders,\n                                                   PP_Done);\n        if (_mhd_log)\n        {\n          fprintf(_mhd_log, \"find_boundary(PP_Init) returned %d; after call boundary_ptr=%p\\n\",\n                  (int)_find_res, (void *)pp->boundary);\n          fflush(_mhd_log);\n        }\n        /* preserve == original (void) behavior: ignore return value */\n      }\n      break;\n    case PP_NextBoundary:\n      {\n        /* log before calling find_boundary */\n        if (_mhd_log)\n        {\n          char _snap[128];\n          size_t _sn = pp->blen;\n          size_t _i;\n          if (pp->boundary != NULL)\n          {\n            if (_sn > sizeof(_snap) - 1) _sn = sizeof(_snap) - 1;\n            for (_i = 0; _i < _sn; ++_i) _snap[_i] = pp->boundary[_i];\n            _snap[_sn] = '\\0';\n            fprintf(_mhd_log, \"find_boundary(PP_NextBoundary) before: ptr=%p blen=%zu sample='%s'\\n\",\n                    (void *)pp->boundary, pp->blen, _snap);\n          }\n          else\n            fprintf(_mhd_log, \"find_boundary(PP_NextBoundary) before: boundary=NULL blen=%zu\\n\", pp->blen);\n          fflush(_mhd_log);\n        }\n\n        if (MHD_NO == (\n                       /* capture return for logging */\n                       ({ enum MHD_Result _res_tmp = find_boundary (pp,\n                                                                   pp->boundary,\n                                                                   pp->blen,\n                                                                   &ioff,\n                                                                   PP_ProcessEntryHeaders,\n                                                                   PP_Done);\n                          if (_mhd_log) fprintf(_mhd_log, \"find_boundary(PP_NextBoundary) returned %d after call ptr=%p\\n\", (int)_res_tmp, (void *)pp->boundary), fflush(_mhd_log);\n                          _res_tmp; }) ) )\n        {\n          if (pp->state == PP_Error)\n          {\n            if (_mhd_log)\n            {\n              fprintf(_mhd_log, \"find_boundary returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n              fflush(_mhd_log);\n              fclose(_mhd_log);\n            }\n            return MHD_NO;\n          }\n          goto END;\n        }\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_PerformCheckMultipart))\n      {\n        if (pp->state == PP_Error)\n        {\n          if (_mhd_log)\n          {\n            fprintf(_mhd_log, \"process_multipart_headers returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n            fflush(_mhd_log);\n            fclose(_mhd_log);\n          }\n          return MHD_NO;\n        }\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          if (_mhd_log)\n          {\n            fprintf(_mhd_log, \"ERROR: multipart/mixed but no nested boundary in content_type='%s'\\n\",\n                    pp->content_type);\n            fflush(_mhd_log);\n            fclose(_mhd_log);\n          }\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          if (_mhd_log)\n          {\n            fprintf(_mhd_log, \"ERROR: strdup nested_boundary failed\\n\");\n            fflush(_mhd_log);\n            fclose(_mhd_log);\n          }\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      break;\n    case PP_ProcessValueToBoundary:\n      {\n        /* log the call that passes pp->boundary to process_value_to_boundary */\n        if (_mhd_log)\n        {\n          char _snap[128];\n          size_t _sn = pp->blen;\n          size_t _i;\n          if (pp->boundary != NULL)\n          {\n            if (_sn > sizeof(_snap) - 1) _sn = sizeof(_snap) - 1;\n            for (_i = 0; _i < _sn; ++_i) _snap[_i] = pp->boundary[_i];\n            _snap[_sn] = '\\0';\n            fprintf(_mhd_log, \"process_value_to_boundary(PP_ProcessValueToBoundary) before: ptr=%p blen=%zu sample='%s'\\n\",\n                    (void *)pp->boundary, pp->blen, _snap);\n          }\n          else\n            fprintf(_mhd_log, \"process_value_to_boundary(PP_ProcessValueToBoundary) before: boundary=NULL blen=%zu\\n\", pp->blen);\n          fflush(_mhd_log);\n        }\n\n        if (MHD_NO == process_value_to_boundary (pp,\n                                                 &ioff,\n                                                 pp->boundary,\n                                                 pp->blen,\n                                                 PP_PerformCleanup,\n                                                 PP_Done))\n        {\n          if (pp->state == PP_Error)\n          {\n            if (_mhd_log)\n            {\n              fprintf(_mhd_log, \"process_value_to_boundary returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n              fflush(_mhd_log);\n              fclose(_mhd_log);\n            }\n            return MHD_NO;\n          }\n          break;\n        }\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        if (_mhd_log)\n        {\n          fprintf(_mhd_log, \"ERROR: PP_Nested_Init but nested_boundary == NULL\\n\");\n          fflush(_mhd_log);\n          fclose(_mhd_log);\n        }\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      {\n        if (_mhd_log)\n        {\n          char _snap[128];\n          size_t _sn = pp->nlen;\n          size_t _i;\n          if (pp->nested_boundary != NULL)\n          {\n            if (_sn > sizeof(_snap) - 1) _sn = sizeof(_snap) - 1;\n            for (_i = 0; _i < _sn; ++_i) _snap[_i] = pp->nested_boundary[_i];\n            _snap[_sn] = '\\0';\n            fprintf(_mhd_log, \"find_boundary(PP_Nested_Init) before: nested_ptr=%p nlen=%zu sample='%s'\\n\",\n                    (void *)pp->nested_boundary, pp->nlen, _snap);\n          }\n          else\n            fprintf(_mhd_log, \"find_boundary(PP_Nested_Init) before: nested_boundary=NULL nlen=%zu\\n\", pp->nlen);\n          fflush(_mhd_log);\n        }\n\n        if (MHD_NO == find_boundary (pp,\n                                     pp->nested_boundary,\n                                     pp->nlen,\n                                     &ioff,\n                                     PP_Nested_PerformMarking,\n                                     PP_NextBoundary /* or PP_Error? */))\n        {\n          if (pp->state == PP_Error)\n          {\n            if (_mhd_log)\n            {\n              fprintf(_mhd_log, \"find_boundary(PP_Nested_Init) returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n              fflush(_mhd_log);\n              fclose(_mhd_log);\n            }\n            return MHD_NO;\n          }\n          goto END;\n        }\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_Nested_ProcessValueToBoundary))\n      {\n        if (pp->state == PP_Error)\n        {\n          if (_mhd_log)\n          {\n            fprintf(_mhd_log, \"process_multipart_headers (nested) returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n            fflush(_mhd_log);\n            fclose(_mhd_log);\n          }\n          return MHD_NO;\n        }\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->nested_boundary,\n                                               pp->nlen,\n                                               PP_Nested_PerformCleanup,\n                                               PP_NextBoundary))\n      {\n        if (pp->state == PP_Error)\n        {\n          if (_mhd_log)\n          {\n            fprintf(_mhd_log, \"process_value_to_boundary (nested) returned MHD_NO and pp->state == PP_Error -> returning MHD_NO\\n\");\n            fflush(_mhd_log);\n            fclose(_mhd_log);\n          }\n          return MHD_NO;\n        }\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      if (_mhd_log)\n      {\n        fprintf(_mhd_log, \"PANIC: internal error state=%d\\n\", (int)pp->state);\n        fflush(_mhd_log);\n        fclose(_mhd_log);\n      }\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    if (_mhd_log)\n    {\n      fprintf(_mhd_log, \"FINAL ERROR: poff(%zu) < post_data_len(%zu) -> setting PP_Error and returning MHD_NO\\n\",\n              poff, post_data_len);\n      fflush(_mhd_log);\n      fclose(_mhd_log);\n    }\n    pp->state = PP_Error;\n    return MHD_NO;              /* serious error */\n  }\n\n  if (_mhd_log)\n  {\n    fprintf(_mhd_log, \"EXIT post_process_multipart: returning MHD_YES pp=%p state=%d buffer_pos=%zu\\n\",\n            (void *)pp, (int)pp->state, pp->buffer_pos);\n    fflush(_mhd_log);\n    fclose(_mhd_log);\n  }\n  return MHD_YES;\n}\n"
}