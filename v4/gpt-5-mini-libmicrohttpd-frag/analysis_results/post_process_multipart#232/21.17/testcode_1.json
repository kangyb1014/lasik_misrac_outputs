{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 memcpy can access beyond the referenced objects if the size computations underflow or the invariants are not preserved. For example, if pp->buffer_pos > pp->buffer_size then (pp->buffer_size - pp->buffer_pos) underflows (size_t wraparound) producing a very large max and memcpy(&buf[pp->buffer_pos], &post_data[poff], max) will write far past the end of buf. Similarly, if poff > post_data_len then (post_data_len - poff) underflows and max may be large, causing reads beyond post_data. The call is safe only if the invariants pp->buffer_pos <= pp->buffer_size and poff <= post_data_len always hold; otherwise Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_process_multipart code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1663.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of post_process_multipart:\n```c\nstatic enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n    poff += max;\n    pp->buffer_pos += max;\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      pp->state = PP_Error;\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      (void) find_boundary (pp,\n                            pp->boundary,\n                            pp->blen,\n                            &ioff,\n                            PP_ProcessEntryHeaders,\n                            PP_Done);\n      break;\n    case PP_NextBoundary:\n      if (MHD_NO == find_boundary (pp,\n                                   pp->boundary,\n                                   pp->blen,\n                                   &ioff,\n                                   PP_ProcessEntryHeaders,\n                                   PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_PerformCheckMultipart))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      break;\n    case PP_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->boundary,\n                                               pp->blen,\n                                               PP_PerformCleanup,\n                                               PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      if (MHD_NO == find_boundary (pp,\n                                   pp->nested_boundary,\n                                   pp->nlen,\n                                   &ioff,\n                                   PP_Nested_PerformMarking,\n                                   PP_NextBoundary /* or PP_Error? */))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_Nested_ProcessValueToBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->nested_boundary,\n                                               pp->nlen,\n                                               PP_Nested_PerformCleanup,\n                                               PP_NextBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* serious error */\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified post_process_multipart code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original post_process_multipart with it.\n  - Your function must have the exact same signature as post_process_multipart.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call post_process_multipart to check logs.\n  - Your function MUST preserve the original logic of post_process_multipart as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, post_process_multipart will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of post_process_multipart as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n  int res; /* used to capture return values of helper calls for logging */\n  FILE *log = fopen(\"/tmp/logs/1663.txt\", \"a\");\n\n  if (log) {\n    fprintf(log, \"ENTER post_process_multipart: pp=%p post_data=%p post_data_len=%zu buffer_pos=%zu buffer_size=%zu state=%d skip_rn=%d\\n\",\n            (void*)pp, (void*)post_data, post_data_len,\n            (pp ? pp->buffer_pos : 0), (pp ? pp->buffer_size : 0),\n            (pp ? pp->state : -1), (pp ? pp->skip_rn : -1));\n    fflush(log);\n  }\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n\n    if (log) {\n      fprintf(log, \"BEFORE memcpy: pp=%p buffer_pos=%zu buffer_size=%zu post_data_len=%zu poff=%zu computed_max=%zu\\n\",\n              (void*)pp, pp->buffer_pos, pp->buffer_size, post_data_len, poff, max);\n      fflush(log);\n    }\n\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n\n    poff += max;\n    pp->buffer_pos += max;\n\n    if (log) {\n      fprintf(log, \"AFTER memcpy: pp=%p new_po ff=%zu new_buffer_pos=%zu\\n\",\n              (void*)pp, poff, pp->buffer_pos);\n      fflush(log);\n    }\n\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      if (log) {\n        fprintf(log, \"OUT OF MEMORY BRANCH: max=0 state_changed=0 poff=%zu post_data_len=%zu buffer_pos=%zu buffer_size=%zu\\n\",\n                poff, post_data_len, pp->buffer_pos, pp->buffer_size);\n        fflush(log);\n      }\n      pp->state = PP_Error;\n      if (log) fclose(log);\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        if (log) { fprintf(log, \"RN_OptN -> matched \\n, ioff=%zu\\n\", ioff); fflush(log); }\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        if (log) { fprintf(log, \"RN_Dash -> matched '-' ioff=%zu\\n\", ioff); fflush(log); }\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        if (log) { fprintf(log, \"RN_Full -> saw '\\r', new skip_rn=%d ioff=%zu buffer_pos=%zu\\n\", pp->skip_rn, ioff, pp->buffer_pos); fflush(log); }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        if (log) { fprintf(log, \"RN_Full -> saw '\\n', ioff=%zu\\n\", ioff); fflush(log); }\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      if (log) { fprintf(log, \"RN_Full -> error, unexpected char buf[0]=%c\\n\", buf[0]); fflush(log); }\n      if (log) fclose(log);\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        if (log) { fprintf(log, \"RN_Dash2 -> found second '-', ioff=%zu new state=%d\\n\", ioff, pp->state); fflush(log); }\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      if (log) { fprintf(log, \"PP_Error -> returning MHD_NO\\n\"); fflush(log); }\n      if (log) fclose(log);\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      if (log) { fprintf(log, \"PP_Done -> unexpected more data, setting PP_Error and returning MHD_NO\\n\"); fflush(log); }\n      if (log) fclose(log);\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      if (log) { fprintf(log, \"PP_Init -> calling find_boundary with boundary=%p blen=%zu ioff=%zu\\n\", (void*)pp->boundary, pp->blen, ioff); fflush(log); }\n      res = find_boundary (pp,\n                           pp->boundary,\n                           pp->blen,\n                           &ioff,\n                           PP_ProcessEntryHeaders,\n                           PP_Done);\n      if (log) { fprintf(log, \"find_boundary returned %d, pp->state=%d ioff=%zu buffer_pos=%zu\\n\", res, pp->state, ioff, pp->buffer_pos); fflush(log); }\n      break;\n    case PP_NextBoundary:\n      if (MHD_NO == (res = find_boundary (pp,\n                                         pp->boundary,\n                                         pp->blen,\n                                         &ioff,\n                                         PP_ProcessEntryHeaders,\n                                         PP_Done)))\n      {\n        if (log) { fprintf(log, \"PP_NextBoundary: find_boundary returned MHD_NO, pp->state=%d\\n\", pp->state); fflush(log); }\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        goto END;\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (log) { fprintf(log, \"PP_ProcessEntryHeaders -> calling process_multipart_headers (ioff=%zu)\\n\", ioff); fflush(log); }\n      res = process_multipart_headers (pp,\n                                       &ioff,\n                                       PP_PerformCheckMultipart);\n      if (log) { fprintf(log, \"process_multipart_headers returned %d pp->state=%d ioff=%zu\\n\", res, pp->state, ioff); fflush(log); }\n      if (MHD_NO == res)\n      {\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          pp->state = PP_Error;\n          if (log) { fprintf(log, \"PP_PerformCheckMultipart -> nested_boundary not found, error\\n\"); fflush(log); }\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          pp->state = PP_Error;\n          if (log) { fprintf(log, \"PP_PerformCheckMultipart -> strdup failed, error\\n\"); fflush(log); }\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        if (log) { fprintf(log, \"PP_PerformCheckMultipart -> nested boundary set, nlen=%zu\\n\", pp->nlen); fflush(log); }\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      if (log) { fprintf(log, \"PP_PerformCheckMultipart -> switching to PP_ProcessValueToBoundary\\n\"); fflush(log); }\n      break;\n    case PP_ProcessValueToBoundary:\n      if (log) { fprintf(log, \"PP_ProcessValueToBoundary -> calling process_value_to_boundary (ioff=%zu)\\n\", ioff); fflush(log); }\n      res = process_value_to_boundary (pp,\n                                       &ioff,\n                                       pp->boundary,\n                                       pp->blen,\n                                       PP_PerformCleanup,\n                                       PP_Done);\n      if (log) { fprintf(log, \"process_value_to_boundary returned %d pp->state=%d ioff=%zu\\n\", res, pp->state, ioff); fflush(log); }\n      if (MHD_NO == res)\n      {\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        break;\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      if (log) { fprintf(log, \"PP_PerformCleanup -> cleaned up, switching to PP_ProcessEntryHeaders\\n\"); fflush(log); }\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        pp->state = PP_Error;\n        if (log) { fprintf(log, \"PP_Nested_Init -> nested_boundary NULL, error\\n\"); fflush(log); }\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n      if (MHD_NO == (res = find_boundary (pp,\n                                         pp->nested_boundary,\n                                         pp->nlen,\n                                         &ioff,\n                                         PP_Nested_PerformMarking,\n                                         PP_NextBoundary /* or PP_Error? */)))\n      {\n        if (log) { fprintf(log, \"PP_Nested_Init: find_boundary returned MHD_NO, pp->state=%d\\n\", pp->state); fflush(log); }\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        goto END;\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      if (log) { fprintf(log, \"PP_Nested_PerformMarking -> recorded headers, new state=%d\\n\", pp->state); fflush(log); }\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (log) { fprintf(log, \"PP_Nested_ProcessEntryHeaders -> calling process_multipart_headers (ioff=%zu)\\n\", ioff); fflush(log); }\n      res = process_multipart_headers (pp,\n                                       &ioff,\n                                       PP_Nested_ProcessValueToBoundary);\n      if (log) { fprintf(log, \"process_multipart_headers(return) %d pp->state=%d ioff=%zu\\n\", res, pp->state, ioff); fflush(log); }\n      if (MHD_NO == res)\n      {\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (log) { fprintf(log, \"PP_Nested_ProcessValueToBoundary -> calling process_value_to_boundary (ioff=%zu)\\n\", ioff); fflush(log); }\n      res = process_value_to_boundary (pp,\n                                       &ioff,\n                                       pp->nested_boundary,\n                                       pp->nlen,\n                                       PP_Nested_PerformCleanup,\n                                       PP_NextBoundary);\n      if (log) { fprintf(log, \"process_value_to_boundary(return) %d pp->state=%d ioff=%zu\\n\", res, pp->state, ioff); fflush(log); }\n      if (MHD_NO == res)\n      {\n        if (pp->state == PP_Error) {\n          if (log) fclose(log);\n          return MHD_NO;\n        }\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      if (log) { fprintf(log, \"PP_Nested_PerformCleanup -> cleaned up, new state=%d\\n\", pp->state); fflush(log); }\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      if (log) {\n        fprintf(log, \"BEFORE memmove (AGAIN): ioff=%zu buffer_pos=%zu move_len=%zu\\n\",\n                ioff, pp->buffer_pos, (pp->buffer_pos - ioff));\n        fflush(log);\n      }\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n      if (log) {\n        fprintf(log, \"AFTER memmove (AGAIN): buffer_pos=%zu\\n\", pp->buffer_pos); fflush(log);\n      }\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    if (log) {\n      fprintf(log, \"BEFORE memmove (END): ioff=%zu buffer_pos=%zu move_len=%zu\\n\",\n              ioff, pp->buffer_pos, (pp->buffer_pos - ioff)); fflush(log);\n    }\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    if (log) { fprintf(log, \"FINAL ERROR: poff=%zu post_data_len=%zu -> setting PP_Error and returning MHD_NO\\n\", poff, post_data_len); fflush(log); }\n    pp->state = PP_Error;\n    if (log) fclose(log);\n    return MHD_NO;              /* serious error */\n  }\n\n  if (log) { fprintf(log, \"EXIT post_process_multipart: success poff=%zu post_data_len=%zu buffer_pos=%zu state=%d\\n\",\n                     poff, post_data_len, pp->buffer_pos, pp->state); fflush(log); fclose(log); }\n  return MHD_YES;\n}\n"
}