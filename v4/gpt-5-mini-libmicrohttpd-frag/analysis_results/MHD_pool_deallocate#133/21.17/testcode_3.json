{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call _MHD_POISON_MEMORY(pool->memory + block_offset, alg_start - block_offset) can write bytes beyond the pool memory if alg_start is greater than the pool buffer size (or otherwise beyond the allocated object). Although the code contains mhd_assert checks (e.g. alg_start <= pool->pos and block_offset <= pool->size), there is no guaranteed compile-time or unconditional runtime proof here that alg_start <= pool->size (or that pool->pos <= pool->size). If pool->pos (and thus alg_start) can exceed pool->size, the range [pool->memory + block_offset, pool->memory + alg_start) will lie partly past the allocated object and the poisoning/memset call will access out-of-bounds memory. Because the code relies on assertions (which may be compiled out) rather than an unconditional bound, this fragment can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_pool_deallocate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_pool_deallocate:\n```c\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          _MHD_POISON_MEMORY (pool->memory + block_offset, \\\n                              alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n        pool->pos = alg_start;\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n        pool->end = alg_end;\n      }\n    }\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_pool_deallocate code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_pool_deallocate with it.\n  - Your function must have the exact same signature as MHD_pool_deallocate.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_pool_deallocate to check logs.\n  - Your function MUST preserve the original logic of MHD_pool_deallocate as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_pool_deallocate will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_pool_deallocate as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  /* Logging probe: always try to record entry and key pool state. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"ENTER MHD_pool_deallocate: pool=%p\\n\", (void *)pool);\n      if (NULL != pool)\n        fprintf(log, \"  pool->memory=%p pool->size=%zu pool->pos=%zu pool->end=%zu\\n\",\n                (void *)pool->memory, pool->size, pool->pos, pool->end);\n      else\n        fprintf(log, \"  pool is NULL\\n\");\n      fprintf(log, \"  block=%p block_size=%zu\\n\", block, block_size);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n\n    /* Log the computed block_offset and some invariants */\n    {\n      FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"  computed block_offset=%zu\\n\", block_offset);\n        fprintf(log, \"  checks: mp_ptr_le_(pool->memory, block)=%d, block_offset<=pool->size=%d, (block_offset!=pool->pos)||(block_size==0)=%d\\n\",\n                (int)mp_ptr_le_ (pool->memory, block), (int)(block_offset <= pool->size), (int)((block_offset != pool->pos) || (block_size == 0)));\n        fclose(log);\n      }\n    }\n\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      /* Log about the memset about to happen */\n      {\n        FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n        if (NULL != log)\n        {\n          fprintf(log, \"  memset(block=%p, 0, block_size=%zu)\\n\", block, block_size);\n          fclose(log);\n        }\n      }\n\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n\n        mhd_assert (alg_start >= block_offset);\n\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          /* Log the ASAN poison about to happen for the left fragment */\n          {\n            FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n            if (NULL != log)\n            {\n              size_t len = alg_start - block_offset;\n              fprintf(log, \"  ASAN: will poison left fragment: address=%p offset=%zu len=%zu pool->size=%zu pool->pos=%zu\\n\",\n                      (void *)(pool->memory + block_offset), block_offset, len, pool->size, pool->pos);\n              /* Also log a potential danger if alg_start is beyond pool->size */\n              if (alg_start > pool->size || pool->pos > pool->size)\n                fprintf(log, \"  WARNING: alg_start (%zu) > pool->size (%zu) or pool->pos (%zu) > pool->size\\n\",\n                        alg_start, pool->size, pool->pos);\n              fclose(log);\n            }\n          }\n\n          _MHD_POISON_MEMORY (pool->memory + block_offset, alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            /* Log the ASAN red zone poisoning */\n            {\n              FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n              if (NULL != log)\n              {\n                fprintf(log, \"  ASAN: will poison red zone at address=%p size=%u alg_start=%zu pool->size=%zu\\n\",\n                        (void *)(pool->memory + alg_start), (unsigned)_MHD_RED_ZONE_SIZE, alg_start, pool->size);\n                if (alg_start > pool->size || pool->pos > pool->size)\n                  fprintf(log, \"  WARNING: alg_start (%zu) > pool->size (%zu) or pool->pos (%zu) > pool->size\\n\",\n                          alg_start, pool->size, pool->pos);\n                fclose(log);\n              }\n            }\n\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n\n        /* Log the final alg_start and the pool->pos change */\n        {\n          FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \"  setting pool->pos: old=%zu new=%zu\\n\", pool->pos, alg_start);\n            if (alg_start > pool->size)\n              fprintf(log, \"  WARNING: setting pool->pos beyond pool->size (%zu > %zu)\\n\", alg_start, pool->size);\n            fclose(log);\n          }\n        }\n\n        pool->pos = alg_start;\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n\n        /* Log change to pool->end */\n        {\n          FILE *log = fopen(\"/tmp/logs/3983.txt\", \"a\");\n          if (NULL != log)\n          {\n            fprintf(log, \"  setting pool->end: old=%zu new=%zu\\n\", pool->end, alg_end);\n            if (alg_end > pool->size)\n              fprintf(log, \"  WARNING: setting pool->end beyond pool->size (%zu > %zu)\\n\", alg_end, pool->size);\n            fclose(log);\n          }\n        }\n\n        pool->end = alg_end;\n      }\n    }\n  }\n}\n"
}