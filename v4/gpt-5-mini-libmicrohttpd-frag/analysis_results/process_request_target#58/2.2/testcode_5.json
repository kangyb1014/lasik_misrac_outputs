{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe mhd_assert call evaluates strlen(...) and compares it with c->rq.req_target_len - params_len purely as a diagnostics check. params_len is only defined/updated under _DEBUG, so the assertion is a debug-only runtime check that is intended to be compiled out in non-debug builds. The strlen evaluation and comparison are executed only for the assertion and have no effect on program state or behaviour when the assertion passes; their removal (as happens in release builds) does not change normal program behaviour. Therefore this is dead code under MISRA C 2023 Rule 2.2. (Fix: move the check inside the debug-only #ifdef or restructure so no executed-only-for-diagnostics operations remain in production code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_request_target code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_request_target:\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_request_target code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_request_target with it.\n  - Your function must have the exact same signature as process_request_target.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_request_target to check logs.\n  - Your function MUST preserve the original logic of process_request_target as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_request_target will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_request_target as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  /* auxiliary variable to record params length for logging in all builds */\n  size_t debug_params_len_log = 0;\n  FILE *logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER process_request_target: c=%p state=%d url=%p url_len=%zu rq_tgt=%p rq_tgt_qmark=%p req_target_len=%zu\\n\",\n            (void *)c, (int)c->state, (void *)c->rq.url, (size_t)c->rq.url_len,\n            (void *)c->rq.hdrs.rq_line.rq_tgt,\n            (void *)c->rq.hdrs.rq_line.rq_tgt_qmark,\n            (size_t)c->rq.req_target_len);\n    fclose(logf);\n  }\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n    logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"uri_log_callback invoked: client_context=%p\\n\",\n              c->rq.client_context);\n      fclose(logf);\n    }\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n    debug_params_len_log = params_len;\n#else\n    /* compute equivalent value for logging in non-debug builds */\n    debug_params_len_log =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"Found '?': params_len=%zu rq_tgt_after_zero=%s\\n\",\n              debug_params_len_log,\n              (char *)c->rq.hdrs.rq_line.rq_tgt);\n      fclose(logf);\n    }\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"MHD_parse_arguments_ failed for connection %p\\n\", (void *)c);\n        fclose(logf);\n      }\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#else\n  else\n    debug_params_len_log = 0;\n#endif /* _DEBUG */\n\n  /* Log values involved in the diagnostic assertion to capture the \"executed-only-for-diagnostics\" behavior */\n  {\n    size_t observed_strlen = 0;\n    if (NULL != c->rq.hdrs.rq_line.rq_tgt)\n      observed_strlen = strlen (c->rq.hdrs.rq_line.rq_tgt);\n    size_t rhs_value = c->rq.req_target_len - debug_params_len_log;\n    logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (logf)\n    {\n#ifdef _DEBUG\n      fprintf(logf, \"ASSERT CHECK (debug build): strlen=%zu req_target_len=%zu params_len=%zu rhs=%zu\\n\",\n              observed_strlen, (size_t)c->rq.req_target_len, params_len, rhs_value);\n#else\n      fprintf(logf, \"ASSERT CHECK (release build): strlen=%zu req_target_len=%zu params_len(inferred)=%zu rhs=%zu\\n\",\n              observed_strlen, (size_t)c->rq.req_target_len, debug_params_len_log, rhs_value);\n#endif\n      fclose(logf);\n    }\n  }\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  logf = fopen(\"/tmp/logs/58.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"EXIT process_request_target: returning true url=%p url_len=%zu\\n\",\n            (void *)c->rq.url, (size_t)c->rq.url_len);\n    fclose(logf);\n  }\n\n  return true;\n}\n"
}