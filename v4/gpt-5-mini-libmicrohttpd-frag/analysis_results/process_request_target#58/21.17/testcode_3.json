{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the request-target contains a lone '?' as its final character (i.e. the query string is empty), then rq.hdrs.rq_line.rq_tgt_qmark points to that '?' which is replaced with '\\0'. The code nevertheless passes rq.hdrs.rq_line.rq_tgt_qmark + 1 to MHD_parse_arguments_. In that case +1 points to the byte immediately after the string terminator (one-past the request-target region) and is not guaranteed to be a valid NUL-terminated buffer. If MHD_parse_arguments_ (or the string.h functions it uses) reads from that pointer, it can access memory beyond the bounds of the object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified process_request_target code that contains useful probe functions that print useful logs to a file \"/tmp/logs/53.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of process_request_target:\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified process_request_target code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original process_request_target with it.\n  - Your function must have the exact same signature as process_request_target.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call process_request_target to check logs.\n  - Your function MUST preserve the original logic of process_request_target as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, process_request_target will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of process_request_target as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  /* Logging helpers (local, do not interfere with original params_len when _DEBUG) */\n  size_t params_len_log = 0;\n  size_t qmark_offset_log = 0;\n  bool qmark_present_log = false;\n  bool parse_ptr_safe_log = false;\n  const char *parse_ptr_log = NULL;\n  FILE *logf = fopen(\"/tmp/logs/53.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"process_request_target: entry. connection=%p, state=%d\\n\",\n            (void *) c, (int) c->state);\n    fprintf(logf, \"  initial: rq.url=%p, rq.url_len=%zu, rq_tgt=%p, rq_tgt_qmark=%p, req_target_len=%zu\\n\",\n            (void *) c->rq.url,\n            (size_t) c->rq.url_len,\n            (void *) c->rq.hdrs.rq_line.rq_tgt,\n            (void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n            (size_t) c->rq.req_target_len);\n  }\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    if (logf)\n      fprintf(logf, \"  invoking uri_log_callback\\n\");\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n    if (logf)\n      fprintf(logf, \"  uri_log_callback returned client_context=%p\\n\",\n              (void *) c->rq.client_context);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n\n    /* Prepare detailed logs about the query portion and safety checks */\n    qmark_present_log = true;\n    qmark_offset_log = (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n    params_len_log = c->rq.req_target_len - qmark_offset_log;\n    parse_ptr_log = c->rq.hdrs.rq_line.rq_tgt_qmark + 1;\n    /* A parse pointer is safe to dereference only if (offset + 1) < req_target_len\n       because valid indexes are 0 .. req_target_len-1. If offset+1 == req_target_len,\n       the pointer is one-past-the-object and dereferencing it is undefined. */\n    parse_ptr_safe_log = ((qmark_offset_log + 1) < c->rq.req_target_len);\n\n    if (logf)\n    {\n      fprintf(logf, \"  rq_tgt_qmark present: qmark=%p, offset=%zu, params_len=%zu\\n\",\n              (void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n              qmark_offset_log,\n              params_len_log);\n      fprintf(logf, \"  pointer to parse (qmark+1) = %p, safe_to_deref=%d\\n\",\n              (void *) parse_ptr_log,\n              (int) parse_ptr_safe_log);\n      if (parse_ptr_safe_log)\n      {\n        /* log up to 64 bytes of the parameters area (safely within bounds) */\n        size_t avail = c->rq.req_target_len - (qmark_offset_log + 1);\n        size_t tolog = (avail < 64) ? avail : 64;\n        if (tolog > 0)\n        {\n          fprintf(logf, \"  parameter bytes (as string up to %zu bytes): \\n\", tolog);\n          /* Use fwrite to avoid any assumption about NUL termination */\n          fwrite((const void *) parse_ptr_log, 1, tolog, logf);\n          fprintf(logf, \"\\n\");\n\n          /* Also print hex bytes for clarity */\n          fprintf(logf, \"  parameter bytes (hex):\");\n          for (size_t i = 0; i < tolog; ++i)\n            fprintf(logf, \" %02x\", (unsigned char) parse_ptr_log[i]);\n          fprintf(logf, \"\\n\");\n        }\n        else\n        {\n          fprintf(logf, \"  parameter area exists but length is zero\\n\");\n        }\n      }\n      else\n      {\n        fprintf(logf, \"  parse pointer is one-past-end: dereferencing would be undefined.\\n\");\n      }\n    }\n\n    /* Replace '?' with zero termination */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0;\n\n    if (logf)\n      fprintf(logf, \"  replaced '?' with '\\0' at %p. about to call MHD_parse_arguments_ with %p\\n\",\n              (void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n              (void *) parse_ptr_log);\n\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      if (logf)\n        fprintf(logf, \"  MHD_parse_arguments_ returned MHD_NO - aborting and setting state accordingly\\n\");\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      if (logf)\n        fclose(logf);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  if (logf)\n  {\n    fprintf(logf, \"  after parsing params: rq_tgt=%p, rq_tgt_qmark=%p, req_target_len=%zu\\n\",\n            (void *) c->rq.hdrs.rq_line.rq_tgt,\n            (void *) c->rq.hdrs.rq_line.rq_tgt_qmark,\n            (size_t) c->rq.req_target_len);\n  }\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  if (logf)\n  {\n    fprintf(logf, \"  unescape_callback returned url_len=%zu, final url=%p\\n\",\n            (size_t) c->rq.url_len,\n            (void *) c->rq.url);\n    fprintf(logf, \"process_request_target: exit (return true)\\n\");\n    fclose(logf);\n  }\n\n  return true;\n}\n"
}