{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf noncelen == 0 the code calls strlen(nonce) without checking that nonce is non-NULL and that the object pointed to by nonce is NUL-terminated within its accessible bounds. For example, if the caller passes noncelen == 0 and nonce points to a buffer that is not NUL-terminated (or is NULL), strlen will read past the buffer bounds (or dereference NULL), causing an out-of-bounds access and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_nonce_timestamp code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_nonce_timestamp with it.\n  - Your function must have the exact same signature as get_nonce_timestamp.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_nonce_timestamp to check logs.\n  - Your function MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_nonce_timestamp will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Logging to help reproduce the potential Rule 21.17 scenario. */\n  FILE *logf = fopen(\"/tmp/logs/1883.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"enter get_nonce_timestamp: nonce=%p, noncelen=%zu, ptimestamp=%p\\n\",\n              (const void *)nonce, noncelen, (void *)ptimestamp);\n      fflush(logf);\n    }\n\n  if (0 == noncelen)\n    {\n      if (logf)\n        {\n          fprintf(logf, \"noncelen == 0 branch taken. nonce pointer is %p\\n\",\n                  (const void *)nonce);\n          /* Note: do not dereference nonce here unconditionally; log only pointer. */\n          fprintf(logf, \"about to call strlen(nonce) (this may read from nonce)\\n\");\n          fflush(logf);\n        }\n\n      /* Original behavior: may call strlen on a NULL or non-NUL-terminated pointer\n         (this is the potential MISRA violation scenario). Preserve that logic. */\n      noncelen = strlen (nonce);\n\n      if (logf)\n        {\n          fprintf(logf, \"strlen(nonce) returned %zu -> noncelen now %zu\\n\",\n                  noncelen, noncelen);\n          fflush(logf);\n        }\n    }\n\n  /* Reproduce the exact conditional logic from the original function while\n     capturing intermediate state for debugging. We build an integer 'check'\n     initialized to true (1) and AND it with the same subconditions so that its\n     final value matches the original if (...) expression. */\n  int check = 1;\n#ifdef MHD_MD5_SUPPORT\n  check = check && ((NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen) ? 1 : 0);\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n  check = check && ((NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen) ? 1 : 0);\n#endif /* MHD_SHA256_SUPPORT */\n\n  if (logf)\n    {\n      fprintf(logf, \"length checks: check=%d, noncelen=%zu\\n\", check, noncelen);\n      fflush(logf);\n    }\n\n  if (check)\n    {\n      if (logf)\n        {\n          fprintf(logf, \"returning false due to length mismatch\\n\");\n          fclose(logf);\n        }\n      return false;\n    }\n\n  if (logf)\n    {\n      /* Log the pointer from which timestamp parsing will start. */\n      const char *ts_ptr = nonce + noncelen - TIMESTAMP_CHARS_LEN;\n      fprintf(logf, \"calling MHD_strx_to_uint64_n_ with ptr=%p, len=%d\\n\",\n              (const void *)ts_ptr, TIMESTAMP_CHARS_LEN);\n      fflush(logf);\n    }\n\n  /* Preserve the original call and return behavior. */\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    {\n      if (logf)\n        {\n          fprintf(logf, \"MHD_strx_to_uint64_n_ failed to parse timestamp\\n\");\n          fclose(logf);\n        }\n      return false;\n    }\n\n  if (logf)\n    {\n      /* Log parsed timestamp value. Cast to unsigned long long for portability in printf. */\n      fprintf(logf, \"parsed timestamp=%llu, returning true\\n\", (unsigned long long)*ptimestamp);\n      fclose(logf);\n    }\n  return true;\n}\n"
}