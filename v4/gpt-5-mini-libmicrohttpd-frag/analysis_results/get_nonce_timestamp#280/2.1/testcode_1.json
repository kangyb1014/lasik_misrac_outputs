{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_MD5_SUPPORT nor MHD_SHA256_SUPPORT/MHD_SHA512_256_SUPPORT is defined, the preprocessor reduces the test to `if (true) return false;` so execution always returns before the final `return true;`, making that `return true;` unreachable. This violates MISRA C 2023 Rule 2.1. (If at least one of those support macros is defined and the length checks can fail, the final `return true;` may be reachable \u2014 the violation occurs for the build configuration with none of the support macros defined.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1886.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_nonce_timestamp code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_nonce_timestamp with it.\n  - Your function must have the exact same signature as get_nonce_timestamp.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_nonce_timestamp to check logs.\n  - Your function MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_nonce_timestamp will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Open a log file to record control flow and key state. Append so multiple\n     calls are recorded. We keep logging lightweight and avoid changing\n     behavior. */\n  FILE *f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"ENTER get_nonce_timestamp: nonce=%p noncelen=%zu ptimestamp=%p\\n\",\n              (const void *) nonce, noncelen, (const void *) ptimestamp);\n#ifdef MHD_MD5_SUPPORT\n      fprintf(f, \"Compiled with MHD_MD5_SUPPORT\\n\");\n#else\n      fprintf(f, \"Compiled without MHD_MD5_SUPPORT\\n\");\n#endif\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      fprintf(f, \"Compiled with MHD_SHA256_SUPPORT or MHD_SHA512_256_SUPPORT\\n\");\n#else\n      fprintf(f, \"Compiled without SHA256/SHA512_256 support\\n\");\n#endif\n      fclose(f);\n    }\n\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n  if (f)\n    {\n      fprintf(f, \"After length adjustment: noncelen=%zu\\n\", noncelen);\n      fclose(f);\n    }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      /* Log which checks were present/absent and the values that led to\n         the early return. Use conditional compilation to avoid referencing\n         macros that are not defined. */\n      f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n      if (f)\n        {\n#ifdef MHD_MD5_SUPPORT\n          fprintf(f, \"MD5 check present: expected_len=%zu actual_len=%zu\\n\",\n                  (size_t) NONCE_STD_LEN (MD5_DIGEST_SIZE), noncelen);\n#else\n          fprintf(f, \"MD5 check absent\\n\");\n#endif\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n          fprintf(f, \"SHA check present: expected_len=%zu actual_len=%zu\\n\",\n                  (size_t) NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE), noncelen);\n#else\n          fprintf(f, \"SHA check absent\\n\");\n#endif\n          fprintf(f, \"Taking early return: returning false\\n\");\n          fclose(f);\n        }\n      return false;\n    }\n\n  /* Log details before attempting to parse the timestamp substring. To avoid\n     creating additional undefined behaviour in the logging itself, compute a\n     safe start index for logging only (do not use it for the real call).\n     The original call still uses nonce + noncelen - TIMESTAMP_CHARS_LEN. */\n  {\n    size_t safe_start = (noncelen >= (size_t) TIMESTAMP_CHARS_LEN)\n                        ? (noncelen - (size_t) TIMESTAMP_CHARS_LEN)\n                        : 0u;\n    f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n    if (f)\n      {\n        fprintf(f, \"About to parse timestamp: noncelen=%zu TIMESTAMP_CHARS_LEN=%zu safe_start=%zu\\n\",\n                noncelen, (size_t) TIMESTAMP_CHARS_LEN, safe_start);\n        fclose(f);\n      }\n  }\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    {\n      f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n      if (f)\n        {\n          fprintf(f, \"Timestamp parse failed: noncelen=%zu TIMESTAMP_CHARS_LEN=%zu\\n\",\n                  noncelen, (size_t) TIMESTAMP_CHARS_LEN);\n          fclose(f);\n        }\n      return false;\n    }\n\n  f = fopen(\"/tmp/logs/1886.txt\", \"a\");\n  if (f)\n    {\n      /* Print parsed timestamp as unsigned long long to avoid depending on\n         PRIu64 macro presence */\n      fprintf(f, \"Timestamp parse succeeded: timestamp=%llu\\n\",\n              (unsigned long long) *ptimestamp);\n      fclose(f);\n    }\n\n  return true;\n}\n"
}