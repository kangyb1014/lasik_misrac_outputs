{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter 'noncelen' (noncelen = strlen(nonce);). MISRA C 2023 Rule 17.8 prohibits modifying function parameters. Although the pointer parameters are const, 'noncelen' is a value parameter and is being modified by assignment, which violates the rule. Fix: introduce a local variable (e.g. size_t len = noncelen; if (len == 0) len = strlen(nonce);) and use that local variable instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_nonce_timestamp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1882.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_nonce_timestamp:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_nonce_timestamp code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_nonce_timestamp with it.\n  - Your function must have the exact same signature as get_nonce_timestamp.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_nonce_timestamp to check logs.\n  - Your function MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_nonce_timestamp will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_nonce_timestamp as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  /* Open log file (best-effort). If this fails, we still proceed with original logic. */\n  FILE *logf = fopen(\"/tmp/logs/1882.txt\", \"a\");\n  if (logf)\n    {\n      fprintf(logf, \"ENTER get_nonce_timestamp: nonce=%p noncelen=%zu ptimestamp=%p\\n\",\n              (const void *)nonce, noncelen, (void *)ptimestamp);\n      fflush(logf);\n    }\n\n  if (0 == noncelen)\n    {\n      /* Log that we will compute length from nonce and (intentionally) modify the parameter. */\n      size_t computed_len = strlen (nonce);\n      if (logf)\n        {\n          fprintf(logf, \"noncelen == 0 -> computed strlen(nonce)=%zu; assigning to parameter noncelen (this reproduces the Rule 17.8 violation)\\n\",\n                  computed_len);\n          fflush(logf);\n        }\n\n      /* Violation reproduced: modifying the function parameter noncelen. */\n      noncelen = computed_len;\n    }\n  else if (logf)\n    {\n      fprintf(logf, \"noncelen != 0 -> using provided noncelen=%zu\\n\", noncelen);\n      fflush(logf);\n    }\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    {\n      if (logf)\n        {\n          fprintf(logf, \"length check failed: noncelen=%zu -> returning false\\n\", noncelen);\n          fclose(logf);\n        }\n      return false;\n    }\n\n  if (logf)\n    {\n      /* Compute and log the offset we will parse from. Cast to size_t for printing. */\n      size_t offset = (size_t)(noncelen >= TIMESTAMP_CHARS_LEN ? noncelen - TIMESTAMP_CHARS_LEN : 0);\n      fprintf(logf, \"Parsing timestamp at nonce+%zu (len=%d)\\n\", offset, TIMESTAMP_CHARS_LEN);\n      fflush(logf);\n    }\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    {\n      if (logf)\n        {\n          fprintf(logf, \"timestamp parse failed -> returning false\\n\");\n          fclose(logf);\n        }\n      return false;\n    }\n\n  if (logf)\n    {\n      unsigned long long ts_val = ptimestamp ? (unsigned long long) *ptimestamp : 0ULL;\n      fprintf(logf, \"timestamp parsed successfully: *ptimestamp=%llu -> returning true\\n\", ts_val);\n      fclose(logf);\n    }\n\n  return true;\n}\n"
}