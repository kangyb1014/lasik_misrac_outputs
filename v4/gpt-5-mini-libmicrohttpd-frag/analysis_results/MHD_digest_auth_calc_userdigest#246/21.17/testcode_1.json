{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(realm) without validating 'realm' may read beyond the object bounds. For example, if the caller passes realm == NULL, strlen(realm) dereferences a null pointer; or if 'realm' points to a buffer that is not NUL-terminated, strlen will scan past the buffer until a NUL byte is found. Both situations violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_calc_userdigest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_calc_userdigest:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n    return MHD_NO;\n\n  if (digest_get_size (&da) > bin_buf_size)\n    ret = MHD_NO;\n  else\n  {\n    calc_userdigest (&da,\n                     username,\n                     strlen (username),\n                     realm,\n                     strlen (realm),\n                     password,\n                     userdigest_bin);\n    ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n    if (digest_ext_error (&da))\n      ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n  }\n  digest_deinit (&da);\n\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_calc_userdigest code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_calc_userdigest with it.\n  - Your function must have the exact same signature as MHD_digest_auth_calc_userdigest.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_calc_userdigest to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_calc_userdigest will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_calc_userdigest as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *userdigest_bin,\n                                 size_t bin_buf_size)\n{\n  struct DigestAlgorithm da;\n  enum MHD_Result ret;\n  /* Open log file for appending control-flow and state info. */\n  FILE *log = fopen(\"/tmp/logs/2423.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_digest_auth_calc_userdigest\\n\");\n    fprintf(log, \"  algo3=%d, username=%p, realm=%p, password=%p, userdigest_bin=%p, bin_buf_size=%zu\\n\",\n            (int)algo3, (const void *)username, (const void *)realm, (const void *)password,\n            userdigest_bin, bin_buf_size);\n    fflush(log);\n  }\n\n  if (! digest_init_one_time (&da, get_base_digest_algo (algo3)))\n  {\n    if (log)\n    {\n      fprintf(log, \"digest_init_one_time failed -> return MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n\n  /* Record digest size information. */\n  {\n    size_t dsz = digest_get_size (&da);\n    if (log)\n    {\n      fprintf(log, \"digest_get_size=%zu\\n\", dsz);\n      fflush(log);\n    }\n    if (dsz > bin_buf_size)\n    {\n      ret = MHD_NO;\n      if (log)\n      {\n        fprintf(log, \"Insufficient bin_buf_size (%zu) for digest size (%zu) -> ret=MHD_NO\\n\",\n                bin_buf_size, dsz);\n        fflush(log);\n      }\n    }\n    else\n    {\n      /* Log lengths/addresses before performing the original calls. We avoid\n         dereferencing pointers here for logging to minimize side effects, but\n         the original behaviour (calling strlen on username and realm) is\n         preserved below to reproduce the exact control-flow and potential\n         violation. */\n      if (log)\n      {\n        /* For username we attempt to log its length only if non-NULL to\n           avoid an extra premature crash while still calling strlen in the\n           original place below to reproduce the violation scenario. */\n        fprintf(log, \"About to call calc_userdigest: username_ptr=%p, realm_ptr=%p\\n\",\n                (const void *)username, (const void *)realm);\n        fflush(log);\n      }\n\n      /* Original call: note that this will call strlen(username) and strlen(realm)\n         unconditionally as in original code. If realm is NULL or not NUL-terminated\n         this may cause a crash or buffer over-read; the log above records the\n         pointer values so the failure can be reproduced and analyzed. */\n      calc_userdigest (&da,\n                       username,\n                       strlen (username),\n                       realm,\n                       strlen (realm),\n                       password,\n                       userdigest_bin);\n      ret = MHD_YES;\n\n#ifdef MHD_DIGEST_HAS_EXT_ERROR\n      if (digest_ext_error (&da))\n        ret = MHD_NO;\n#endif /* MHD_DIGEST_HAS_EXT_ERROR */\n\n      if (log)\n      {\n        fprintf(log, \"After calc_userdigest -> provisional ret=%d\\n\", (int)ret);\n        fflush(log);\n      }\n    }\n  }\n\n  digest_deinit (&da);\n\n  if (log)\n  {\n    fprintf(log, \"EXIT: ret=%d\\n\", (int)ret);\n    fclose(log);\n  }\n\n  return ret;\n}\n"
}