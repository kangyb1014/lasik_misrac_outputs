{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the callee MHD_lookup_connection_value_n unconditionally assigns to the out-parameter (i.e. always writes to *value on every execution path), the prior assignment value = NULL; is overwritten before any use. Removing that line would not change program behaviour, so the assignment is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_lookup_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3998.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_connection_value:\n```c\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_lookup_connection_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_lookup_connection_value with it.\n  - Your function must have the exact same signature as MHD_lookup_connection_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_lookup_connection_value to check logs.\n  - Your function MUST preserve the original logic of MHD_lookup_connection_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_lookup_connection_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_lookup_connection_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n\n  /* Log entry and pre-call state to help reproduce the dead-assignment scenario. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3998.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"MHD_lookup_connection_value: entry\\n\");\n      fprintf(log, \"  connection=%p, kind=%d, key_ptr=%p\", (void *)connection, (int)kind, (void *)key);\n      if (NULL != key)\n      {\n        /* key is expected to be a NUL-terminated C string as in original code */\n        fprintf(log, \", key_str=\\\"%s\\\"\", key);\n      }\n      fprintf(log, \"\\n\");\n      fprintf(log, \"  before call: value_ptr=%p (expected NULL)\\n\", (void *)value);\n      fprintf(log, \"  calling MHD_lookup_connection_value_n with key_len=%zu\\n\",\n              (size_t)((NULL == key) ? 0 : strlen(key)));\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n\n  /* Log post-call state so one can observe whether the callee overwrote *value. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3998.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"  after call: value_ptr=%p\\n\", (void *)value);\n      if (NULL != value)\n      {\n        fprintf(log, \"  value_str=\\\"%s\\\"\\n\", value);\n      }\n      else\n      {\n        fprintf(log, \"  value_str=NULL\\n\");\n      }\n      fprintf(log, \"MHD_lookup_connection_value: exit\\n\\n\");\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  return value;\n}\n"
}