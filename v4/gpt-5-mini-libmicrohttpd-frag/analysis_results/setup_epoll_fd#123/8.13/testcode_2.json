{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes read-only strings but the called functions return or accept non-const char * pointers. For example, if MHD_socket_last_strerr_ is declared to return 'char *' (or the _() / MHD_DLOG prototypes take 'char *' for format/message), then a pointer to a read-only/static error string is not const-qualified and Rule 8.13 is violated. The correct form would be to declare those interfaces to use 'const char *' for messages/strings that are not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_epoll_fd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/765.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of setup_epoll_fd:\n```c\nstatic int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    return MHD_INVALID_SOCKET;\n  }\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n  return fd;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified setup_epoll_fd code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original setup_epoll_fd with it.\n  - Your function must have the exact same signature as setup_epoll_fd.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call setup_epoll_fd to check logs.\n  - Your function MUST preserve the original logic of setup_epoll_fd as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, setup_epoll_fd will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of setup_epoll_fd as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int\nsetup_epoll_fd (struct MHD_Daemon *daemon)\n{\n  int fd;\n\n#ifndef HAVE_MESSAGES\n  (void) daemon; /* Mute compiler warning. */\n#endif /* ! HAVE_MESSAGES */\n\n  /* Open a log file to record control flow and state for reproducing the\n     reported Rule 8.13 scenario. Best-effort: if opening fails, we continue\n     without logging to file so behavior matches the original function. */\n  FILE *logf = fopen(\"/tmp/logs/765.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER setup_epoll_fd: daemon=%p\\n\", (void *) daemon);\n    fflush(logf);\n  }\n\n#ifdef USE_EPOLL_CREATE1\n  fd = epoll_create1 (EPOLL_CLOEXEC);\n#else  /* ! USE_EPOLL_CREATE1 */\n  fd = epoll_create (MAX_EVENTS);\n#endif /* ! USE_EPOLL_CREATE1 */\n\n  if (logf)\n  {\n    fprintf(logf, \"epoll_create returned fd=%d\\n\", fd);\n    fflush(logf);\n  }\n\n  if (MHD_INVALID_SOCKET == fd)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Call to epoll_create1 failed: %s\\n\"),\n              MHD_socket_last_strerr_ ());\n#endif\n    /* Probe: capture the pointer and string returned by\n       MHD_socket_last_strerr_() so other agents can inspect whether the\n       reported non-const string originates from read-only storage. */\n    if (logf)\n    {\n      const char *err = MHD_socket_last_strerr_ ();\n      fprintf(logf, \"epoll_create failed: last_strerr ptr=%p text=\\\"%s\\\"\\n\",\n              (void *) err, (err ? err : \"(null)\"));\n      fflush(logf);\n      fclose(logf);\n    }\n    return MHD_INVALID_SOCKET;\n  }\n\n#if ! defined(USE_EPOLL_CREATE1)\n  if (! MHD_socket_noninheritable_ (fd))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to set noninheritable mode on epoll FD.\\n\"));\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"Failed to set noninheritable mode on epoll fd=%d\\n\", fd);\n      fflush(logf);\n    }\n  }\n#endif /* ! USE_EPOLL_CREATE1 */\n\n  if (logf)\n  {\n    fprintf(logf, \"EXIT setup_epoll_fd: fd=%d\\n\", fd);\n    fflush(logf);\n    fclose(logf);\n  }\n  return fd;\n}\n"
}