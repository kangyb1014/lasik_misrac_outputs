{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug-only assertion (e.g. like the standard assert macro which is a no-op when assertions are disabled), then the call get_rq_uname_type(params) inside the macro is executed only in builds with assertions enabled. Removing the mhd_assert (or compiling it out in production) does not affect the program\u2019s functional behaviour (only its diagnostics), so that operation is dead code according to MISRA C 2023 Rule 2.2. (If, however, the assertion expression has side effects that are relied upon, or mhd_assert is not compiled out, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_unames_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3788.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_unames_size:\n```c\n_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  s = 0;\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n  return s;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_unames_size code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_unames_size with it.\n  - Your function must have the exact same signature as get_rq_unames_size.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_unames_size to check logs.\n  - Your function MUST preserve the original logic of get_rq_unames_size as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_unames_size will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_unames_size as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline size_t\nget_rq_unames_size (const struct MHD_RqDAuth *params,\n                    enum MHD_DigestAuthUsernameType uname_type)\n{\n  size_t s;\n\n  /* Preserve original assertion (may be compiled out in production builds). */\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n\n  s = 0;\n\n  /* Open log and record entry and key state so other agents can reproduce the\n     scenario and observe whether the assert expression (which calls\n     get_rq_uname_type) is evaluated in the current build. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3788.txt\", \"a\");\n    if (log != NULL)\n    {\n      int reported_type = -1;\n      /* Call get_rq_uname_type to record its returned value for comparison\n         with the uname_type argument. Note: this introduces an additional\n         call to get_rq_uname_type compared to the original code; the\n         original mhd_assert may or may not call it depending on build. */\n      reported_type = (int) get_rq_uname_type(params);\n      fprintf(log, \"get_rq_unames_size: entry params=%p uname_type=%d get_rq_uname_type=%d\\n\",\n              (void *) params, (int) uname_type, reported_type);\n\n      /* Log raw lengths if params pointer looks valid (best-effort). */\n      if (params != NULL)\n      {\n        fprintf(log, \"  username.len=%zu username_ext.len=%zu\\n\",\n                (size_t) params->username.value.len,\n                (size_t) params->username_ext.value.len);\n      }\n      fclose(log);\n    }\n  }\n\n  if ((MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type) ||\n      (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type) )\n  {\n    s += params->username.value.len + 1; /* Add one byte for zero-termination */\n\n    /* Log intermediate state */\n    {\n      FILE *log = fopen(\"/tmp/logs/3788.txt\", \"a\");\n      if (log) {\n        fprintf(log, \"branch: STANDARD/USERHASH entered; interim s=%zu\\n\", s);\n        fclose(log);\n      }\n    }\n\n    if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n      s += (params->username.value.len + 1) / 2;\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3788.txt\", \"a\");\n      if (log) {\n        fprintf(log, \"branch: USERHASH adjustment done; s=%zu\\n\", s);\n        fclose(log);\n      }\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    s += params->username_ext.value.len\n         - MHD_DAUTH_EXT_PARAM_MIN_LEN + 1; /* Add one byte for zero-termination */\n\n    {\n      FILE *log = fopen(\"/tmp/logs/3788.txt\", \"a\");\n      if (log) {\n        fprintf(log, \"branch: EXTENDED entered; username_ext.len=%zu s=%zu\\n\",\n                (size_t) params->username_ext.value.len, s);\n        fclose(log);\n      }\n    }\n  }\n\n  /* Final result log */\n  {\n    FILE *log = fopen(\"/tmp/logs/3788.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"get_rq_unames_size: exit s=%zu\\n\", s);\n      fclose(log);\n    }\n  }\n\n  return s;\n}\n"
}