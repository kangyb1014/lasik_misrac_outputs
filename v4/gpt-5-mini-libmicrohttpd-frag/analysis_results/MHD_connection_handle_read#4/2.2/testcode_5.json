{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls mhd_assert(0) in the default/fall\u2011through branch of the switch. If mhd_assert is defined as a no\u2011op in production builds (common when assertions are disabled), the call is an operation that is executed but has no effect; removing that call would not change program behaviour, so it is dead code. Thus, when assertions are compiled out and the branch can be reached, Rule 2.2 is violated. A concrete violating scenario: a release build where mhd_assert expands to ((void)0) and connection->state ever takes one of the listed cases or default, so the mhd_assert(0) statement executes but does nothing.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_handle_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1818.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_handle_read:\n```c\nvoid\nMHD_connection_handle_read (struct MHD_Connection *connection,\n                            bool socket_error)\n{\n  ssize_t bytes_read;\n\n  if ( (MHD_CONNECTION_CLOSED == connection->state) ||\n       (connection->suspended) )\n    return;\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n        return;\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  mhd_assert (NULL != connection->read_buffer);\n  if (connection->read_buffer_size == connection->read_buffer_offset)\n    return; /* No space for receiving data. */\n\n  bytes_read = connection->recv_cls (connection,\n                                     &connection->read_buffer\n                                     [connection->read_buffer_offset],\n                                     connection->read_buffer_size\n                                     - connection->read_buffer_offset);\n  if ((bytes_read < 0) || socket_error)\n  {\n    if ((MHD_ERR_AGAIN_ == bytes_read) && ! socket_error)\n      return;     /* No new data to process. */\n    if ((bytes_read > 0) && connection->sk_nonblck)\n    { /* Try to detect the socket error */\n      int dummy;\n      bytes_read = connection->recv_cls (connection, &dummy, sizeof (dummy));\n    }\n    if (MHD_ERR_CONNRESET_ == bytes_read)\n    {\n      if ( (MHD_CONNECTION_INIT < connection->state) &&\n           (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Socket has been disconnected when reading request.\\n\"));\n#endif\n        connection->discard_request = true;\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      return;\n    }\n\n#ifdef HAVE_MESSAGES\n    if (MHD_CONNECTION_INIT != connection->state)\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection socket is closed when reading \" \\\n                   \"request due to the error: %s\\n\"),\n                (bytes_read < 0) ? str_conn_error_ (bytes_read) :\n                \"detected connection closure\");\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            NULL);\n    return;\n  }\n\n  if (0 == bytes_read)\n  {   /* Remote side closed connection. */\n    connection->read_closed = true;\n    if ( (MHD_CONNECTION_INIT < connection->state) &&\n         (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection was closed by remote side with incomplete \"\n                   \"request.\\n\"));\n#endif\n      connection->discard_request = true;\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_CLIENT_ABORT);\n    }\n    else if (MHD_CONNECTION_INIT == connection->state)\n      /* This termination code cannot be reported to the application\n       * because application has not been informed yet about this request */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_WITH_ERROR);\n    return;\n  }\n  connection->read_buffer_offset += (size_t) bytes_read;\n  MHD_update_last_activity_ (connection);\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  /* TODO: check whether the next 'switch()' really needed */\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    /* nothing to do but default action */\n    if (connection->read_closed)\n    {\n      /* TODO: check whether this really needed */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n    }\n    return;\n  case MHD_CONNECTION_CLOSED:\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    mhd_assert (0);\n    return;\n#endif /* UPGRADE_SUPPORT */\n  case MHD_CONNECTION_START_REPLY:\n    /* shrink read buffer to how much is actually used */\n    /* TODO: remove shrink as it handled in special function */\n    if ((0 != connection->read_buffer_size) &&\n        (connection->read_buffer_size != connection->read_buffer_offset))\n    {\n      mhd_assert (NULL != connection->read_buffer);\n      connection->read_buffer =\n        MHD_pool_reallocate (connection->pool,\n                             connection->read_buffer,\n                             connection->read_buffer_size,\n                             connection->read_buffer_offset);\n      connection->read_buffer_size = connection->read_buffer_offset;\n    }\n    break;\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n    /* Milestone state, no data should be read */\n    mhd_assert (0); /* Should not be possible */\n    break;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n  case MHD_CONNECTION_HEADERS_SENDING:\n  case MHD_CONNECTION_HEADERS_SENT:\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n  case MHD_CONNECTION_FOOTERS_SENDING:\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n  default:\n    mhd_assert (0); /* Should not be possible */\n    break;\n  }\n  return;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_handle_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_handle_read with it.\n  - Your function must have the exact same signature as MHD_connection_handle_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_handle_read to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_handle_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_handle_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_handle_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_connection_handle_read (struct MHD_Connection *connection,\n                            bool socket_error)\n{\n  ssize_t bytes_read;\n  FILE *logf = NULL;\n  /* Try to open the primary log file; if that fails, fall back to /tmp/1818.txt */\n  logf = fopen(\"/tmp/logs/1818.txt\", \"a\");\n  if (NULL == logf)\n    logf = fopen(\"/tmp/1818.txt\", \"a\");\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER MHD_connection_handle_read: conn=%p state=%d (%s) socket_error=%d read_buf=%p size=%zu offset=%zu suspended=%d tls_state=%d\\n\",\n            (void *)connection,\n            (int)connection->state,\n            /* MHD_state_to_string may be available; if not, print numeric state */\n            (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"),\n            (int)socket_error,\n            (void *)connection->read_buffer,\n            (size_t)connection->read_buffer_size,\n            (size_t)connection->read_buffer_offset,\n            (int)connection->suspended,\n            (int)connection->tls_state);\n    fflush(logf);\n  }\n\n  if ( (MHD_CONNECTION_CLOSED == connection->state) ||\n       (connection->suspended) )\n  {\n    if (logf)\n    {\n      fprintf(logf, \"EARLY RETURN: closed or suspended: state=%d (%s)\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fclose(logf);\n    }\n    return;\n  }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n      {\n        if (logf)\n        {\n          fprintf(logf, \"TLS HANDSHAKE NOT COMPLETE: tls_state=%d\\n\", (int)connection->tls_state);\n          fclose(logf);\n        }\n        return;\n      }\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  mhd_assert (NULL != connection->read_buffer);\n  if (connection->read_buffer_size == connection->read_buffer_offset)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"NO SPACE FOR RECEIVING: size=%zu offset=%zu\\n\",\n              (size_t)connection->read_buffer_size,\n              (size_t)connection->read_buffer_offset);\n      fclose(logf);\n    }\n    return; /* No space for receiving data. */\n  }\n\n  bytes_read = connection->recv_cls (connection,\n                                     &connection->read_buffer\n                                     [connection->read_buffer_offset],\n                                     connection->read_buffer_size\n                                     - connection->read_buffer_offset);\n  if (logf)\n  {\n    fprintf(logf, \"AFTER recv_cls: bytes_read=%zd\\n\", bytes_read);\n    fflush(logf);\n  }\n\n  if ((bytes_read < 0) || socket_error)\n  {\n    if ((MHD_ERR_AGAIN_ == bytes_read) && ! socket_error)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"ERR_AGAIN and no socket_error: returning\\n\");\n        fclose(logf);\n      }\n      return;     /* No new data to process. */\n    }\n    if ((bytes_read > 0) && connection->sk_nonblck)\n    { /* Try to detect the socket error */\n      int dummy;\n      bytes_read = connection->recv_cls (connection, &dummy, sizeof (dummy));\n      if (logf)\n      {\n        fprintf(logf, \"SECOND recv_cls to detect socket error returned=%zd\\n\", bytes_read);\n        fflush(logf);\n      }\n    }\n    if (MHD_ERR_CONNRESET_ == bytes_read)\n    {\n      if ( (MHD_CONNECTION_INIT < connection->state) &&\n           (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Socket has been disconnected when reading request.\\n\"));\n#endif\n        connection->discard_request = true;\n      }\n      if (logf)\n      {\n        fprintf(logf, \"CONNRESET: closing connection state=%d (%s)\\n\",\n                (int)connection->state,\n                (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n        fclose(logf);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      return;\n    }\n\n#ifdef HAVE_MESSAGES\n    if (MHD_CONNECTION_INIT != connection->state)\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection socket is closed when reading \" \\\n                   \"request due to the error: %s\\n\"),\n                (bytes_read < 0) ? str_conn_error_ (bytes_read) :\n                \"detected connection closure\");\n#endif\n    if (logf)\n    {\n      fprintf(logf, \"CONNECTION CLOSE ERROR: bytes_read=%zd socket_error=%d state=%d (%s)\\n\",\n              bytes_read,\n              (int)socket_error,\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fclose(logf);\n    }\n    CONNECTION_CLOSE_ERROR (connection,\n                            NULL);\n    return;\n  }\n\n  if (0 == bytes_read)\n  {   /* Remote side closed connection. */\n    connection->read_closed = true;\n    if (logf)\n    {\n      fprintf(logf, \"REMOTE CLOSED: state=%d (%s)\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fflush(logf);\n    }\n    if ( (MHD_CONNECTION_INIT < connection->state) &&\n         (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection was closed by remote side with incomplete \"\n                   \"request.\\n\"));\n#endif\n      connection->discard_request = true;\n      if (logf)\n      {\n        fprintf(logf, \"REMOTE CLOSED with incomplete request: discarding and closing with MHD_REQUEST_TERMINATED_CLIENT_ABORT\\n\");\n        fclose(logf);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_CLIENT_ABORT);\n    }\n    else if (MHD_CONNECTION_INIT == connection->state)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"REMOTE CLOSED at INIT: closing with MHD_REQUEST_TERMINATED_COMPLETED_OK\\n\");\n        fclose(logf);\n      }\n      /* This termination code cannot be reported to the application\n       * because application has not been informed yet about this request */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    }\n    else\n    {\n      if (logf)\n      {\n        fprintf(logf, \"REMOTE CLOSED other state: closing with MHD_REQUEST_TERMINATED_WITH_ERROR\\n\");\n        fclose(logf);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_WITH_ERROR);\n    }\n    return;\n  }\n  connection->read_buffer_offset += (size_t) bytes_read;\n  MHD_update_last_activity_ (connection);\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  /* TODO: check whether the next 'switch()' really needed */\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    /* nothing to do but default action */\n    if (connection->read_closed)\n    {\n      /* TODO: check whether this really needed */\n      if (logf)\n      {\n        fprintf(logf, \"READ_CLOSED in receiving state -> close with READ_ERROR: state=%d (%s)\\n\",\n                (int)connection->state,\n                (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n        fclose(logf);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n    }\n    else if (logf)\n    {\n      fprintf(logf, \"RECEIVING STATE: nothing to do, returning; state=%d (%s) offset=%zu size=%zu\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"),\n              (size_t)connection->read_buffer_offset,\n              (size_t)connection->read_buffer_size);\n      fclose(logf);\n    }\n    return;\n  case MHD_CONNECTION_CLOSED:\n    if (logf)\n    {\n      fprintf(logf, \"SWITCH: encountered MHD_CONNECTION_CLOSED in switch, returning\\n\");\n      fclose(logf);\n    }\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    if (logf)\n    {\n      fprintf(logf, \"SWITCH: MHD_CONNECTION_UPGRADE reached (unexpected for reads) state=%d (%s) -- will assert(0)\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fflush(logf);\n    }\n    mhd_assert (0);\n    if (logf)\n    {\n      fprintf(logf, \"After assert in UPGRADE case (note: may be no-op in release builds)\\n\");\n      fclose(logf);\n    }\n    return;\n#endif /* UPGRADE_SUPPORT */\n  case MHD_CONNECTION_START_REPLY:\n    /* shrink read buffer to how much is actually used */\n    /* TODO: remove shrink as it handled in special function */\n    if ((0 != connection->read_buffer_size) &&\n        (connection->read_buffer_size != connection->read_buffer_offset))\n    {\n      mhd_assert (NULL != connection->read_buffer);\n      if (logf)\n      {\n        fprintf(logf, \"START_REPLY: shrinking read buffer from %zu to %zu\\n\",\n                (size_t)connection->read_buffer_size,\n                (size_t)connection->read_buffer_offset);\n        fflush(logf);\n      }\n      connection->read_buffer =\n        MHD_pool_reallocate (connection->pool,\n                             connection->read_buffer,\n                             connection->read_buffer_size,\n                             connection->read_buffer_offset);\n      connection->read_buffer_size = connection->read_buffer_offset;\n    }\n    break;\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n    /* Milestone state, no data should be read */\n    if (logf)\n    {\n      fprintf(logf, \"MILSTONE STATE READ: state=%d (%s) -- will assert(0)\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fflush(logf);\n    }\n    mhd_assert (0); /* Should not be possible */\n    if (logf)\n    {\n      fprintf(logf, \"After assert in milestone state (may be no-op in release)\\n\");\n      fclose(logf);\n    }\n    break;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n  case MHD_CONNECTION_HEADERS_SENDING:\n  case MHD_CONNECTION_HEADERS_SENT:\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n  case MHD_CONNECTION_FOOTERS_SENDING:\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n  default:\n    if (logf)\n    {\n      fprintf(logf, \"DEFAULT/OTHER STATE IN SWITCH: state=%d (%s) -- will assert(0)\\n\",\n              (int)connection->state,\n              (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"));\n      fflush(logf);\n    }\n    mhd_assert (0); /* Should not be possible */\n    if (logf)\n    {\n      fprintf(logf, \"After assert in default case (may be no-op in release)\\n\");\n      fclose(logf);\n    }\n    break;\n  }\n  if (logf)\n  {\n    fprintf(logf, \"EXIT MHD_connection_handle_read: state=%d (%s) offset=%zu size=%zu\\n\",\n            (int)connection->state,\n            (NULL != (void *)MHD_state_to_string ? MHD_state_to_string(connection->state) : \"<state_to_string_unavailable>\"),\n            (size_t)connection->read_buffer_offset,\n            (size_t)connection->read_buffer_size);\n    fclose(logf);\n  }\n  return;\n}\n"
}