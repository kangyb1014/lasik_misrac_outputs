{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe ternary expression yields either the result of str_conn_error_(bytes_read) or the string literal \"detected connection closure\". If str_conn_error_ is declared to return a non-const char * (e.g. char *str_conn_error_(int)) then a pointer to a non-const-qualified type is being used where the pointed data is actually constant (string messages). That violates MISRA C 2023 Rule 8.13. Example violation: str_conn_error_ returns char * pointing at a static message; it should return const char * so the pointer is const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_connection_handle_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1815.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_connection_handle_read:\n```c\nvoid\nMHD_connection_handle_read (struct MHD_Connection *connection,\n                            bool socket_error)\n{\n  ssize_t bytes_read;\n\n  if ( (MHD_CONNECTION_CLOSED == connection->state) ||\n       (connection->suspended) )\n    return;\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n        return;\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  mhd_assert (NULL != connection->read_buffer);\n  if (connection->read_buffer_size == connection->read_buffer_offset)\n    return; /* No space for receiving data. */\n\n  bytes_read = connection->recv_cls (connection,\n                                     &connection->read_buffer\n                                     [connection->read_buffer_offset],\n                                     connection->read_buffer_size\n                                     - connection->read_buffer_offset);\n  if ((bytes_read < 0) || socket_error)\n  {\n    if ((MHD_ERR_AGAIN_ == bytes_read) && ! socket_error)\n      return;     /* No new data to process. */\n    if ((bytes_read > 0) && connection->sk_nonblck)\n    { /* Try to detect the socket error */\n      int dummy;\n      bytes_read = connection->recv_cls (connection, &dummy, sizeof (dummy));\n    }\n    if (MHD_ERR_CONNRESET_ == bytes_read)\n    {\n      if ( (MHD_CONNECTION_INIT < connection->state) &&\n           (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Socket has been disconnected when reading request.\\n\"));\n#endif\n        connection->discard_request = true;\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      return;\n    }\n\n#ifdef HAVE_MESSAGES\n    if (MHD_CONNECTION_INIT != connection->state)\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection socket is closed when reading \" \\\n                   \"request due to the error: %s\\n\"),\n                (bytes_read < 0) ? str_conn_error_ (bytes_read) :\n                \"detected connection closure\");\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            NULL);\n    return;\n  }\n\n  if (0 == bytes_read)\n  {   /* Remote side closed connection. */\n    connection->read_closed = true;\n    if ( (MHD_CONNECTION_INIT < connection->state) &&\n         (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection was closed by remote side with incomplete \"\n                   \"request.\\n\"));\n#endif\n      connection->discard_request = true;\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_CLIENT_ABORT);\n    }\n    else if (MHD_CONNECTION_INIT == connection->state)\n      /* This termination code cannot be reported to the application\n       * because application has not been informed yet about this request */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_WITH_ERROR);\n    return;\n  }\n  connection->read_buffer_offset += (size_t) bytes_read;\n  MHD_update_last_activity_ (connection);\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  /* TODO: check whether the next 'switch()' really needed */\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    /* nothing to do but default action */\n    if (connection->read_closed)\n    {\n      /* TODO: check whether this really needed */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n    }\n    return;\n  case MHD_CONNECTION_CLOSED:\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    mhd_assert (0);\n    return;\n#endif /* UPGRADE_SUPPORT */\n  case MHD_CONNECTION_START_REPLY:\n    /* shrink read buffer to how much is actually used */\n    /* TODO: remove shrink as it handled in special function */\n    if ((0 != connection->read_buffer_size) &&\n        (connection->read_buffer_size != connection->read_buffer_offset))\n    {\n      mhd_assert (NULL != connection->read_buffer);\n      connection->read_buffer =\n        MHD_pool_reallocate (connection->pool,\n                             connection->read_buffer,\n                             connection->read_buffer_size,\n                             connection->read_buffer_offset);\n      connection->read_buffer_size = connection->read_buffer_offset;\n    }\n    break;\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n    /* Milestone state, no data should be read */\n    mhd_assert (0); /* Should not be possible */\n    break;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n  case MHD_CONNECTION_HEADERS_SENDING:\n  case MHD_CONNECTION_HEADERS_SENT:\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n  case MHD_CONNECTION_FOOTERS_SENDING:\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n  default:\n    mhd_assert (0); /* Should not be possible */\n    break;\n  }\n  return;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_connection_handle_read code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_connection_handle_read with it.\n  - Your function must have the exact same signature as MHD_connection_handle_read.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_connection_handle_read to check logs.\n  - Your function MUST preserve the original logic of MHD_connection_handle_read as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_connection_handle_read will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_connection_handle_read as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_connection_handle_read (struct MHD_Connection *connection,\n                            bool socket_error)\n{\n  ssize_t bytes_read;\n  FILE *log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_connection_handle_read: connection=%p, socket_error=%d, state=%d, read_buffer_offset=%zu\\n\",\n            (void *)connection, (int)socket_error,\n            (int)connection->state,\n            connection->read_buffer_offset);\n    fflush(log);\n    fclose(log);\n  }\n\n  if ( (MHD_CONNECTION_CLOSED == connection->state) ||\n       (connection->suspended) )\n  {\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: connection closed or suspended: state=%d, suspended=%d\\n\",\n              (int)connection->state, (int)connection->suspended);\n      fflush(log);\n      fclose(log);\n    }\n    return;\n  }\n#ifdef HTTPS_SUPPORT\n  if (MHD_TLS_CONN_NO_TLS != connection->tls_state)\n  {   /* HTTPS connection. */\n    if (MHD_TLS_CONN_CONNECTED > connection->tls_state)\n    {\n      if (! MHD_run_tls_handshake_ (connection))\n      {\n        log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"TLS handshake not completed, returning: tls_state=%d\\n\",\n                  (int)connection->tls_state);\n          fflush(log);\n          fclose(log);\n        }\n        return;\n      }\n    }\n  }\n#endif /* HTTPS_SUPPORT */\n\n  mhd_assert (NULL != connection->read_buffer);\n  if (connection->read_buffer_size == connection->read_buffer_offset)\n  {\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"NO SPACE: read_buffer_size=%zu, read_buffer_offset=%zu\\n\",\n              connection->read_buffer_size, connection->read_buffer_offset);\n      fflush(log);\n      fclose(log);\n    }\n    return; /* No space for receiving data. */\n  }\n\n  bytes_read = connection->recv_cls (connection,\n                                     &connection->read_buffer\n                                     [connection->read_buffer_offset],\n                                     connection->read_buffer_size\n                                     - connection->read_buffer_offset);\n\n  log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"AFTER recv: bytes_read=%zd, socket_error=%d\\n\",\n            bytes_read, (int)socket_error);\n    fflush(log);\n    fclose(log);\n  }\n\n  if ((bytes_read < 0) || socket_error)\n  {\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ERROR PATH ENTERED: bytes_read=%zd, socket_error=%d\\n\",\n              bytes_read, (int)socket_error);\n      fflush(log);\n      fclose(log);\n    }\n\n    if ((MHD_ERR_AGAIN_ == bytes_read) && ! socket_error)\n    {\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"EAGAIN and no socket_error: returning to wait for more data\\n\");\n        fflush(log);\n        fclose(log);\n      }\n      return;     /* No new data to process. */\n    }\n    if ((bytes_read > 0) && connection->sk_nonblck)\n    { /* Try to detect the socket error */\n      int dummy;\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Attempting nonblocking recv to detect socket error (sk_nonblck=1)\\n\");\n        fflush(log);\n        fclose(log);\n      }\n      bytes_read = connection->recv_cls (connection, &dummy, sizeof (dummy));\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"After detection recv: bytes_read=%zd\\n\", bytes_read);\n        fflush(log);\n        fclose(log);\n      }\n    }\n    if (MHD_ERR_CONNRESET_ == bytes_read)\n    {\n      if ( (MHD_CONNECTION_INIT < connection->state) &&\n           (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"Socket has been disconnected when reading request.\\n\"));\n#endif\n        connection->discard_request = true;\n      }\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"CONNRESET: closing connection, state=%d\\n\", (int)connection->state);\n        fflush(log);\n        fclose(log);\n      }\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      return;\n    }\n\n#ifdef HAVE_MESSAGES\n    if (MHD_CONNECTION_INIT != connection->state)\n    {\n      /* Log which error message branch is taken and the actual message pointer/value */\n      const char *probe_msg = (bytes_read < 0) ? str_conn_error_ (bytes_read) : \"detected connection closure\";\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"HAVE_MESSAGES branch: state=%d, bytes_read=%zd, chosen_msg_ptr=%p, msg_preview=\\\"%s\\\"\\n\",\n                (int)connection->state, bytes_read, (const void *)probe_msg, probe_msg ? probe_msg : \"(null)\");\n        fflush(log);\n        fclose(log);\n      }\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection socket is closed when reading \" \\\n                   \"request due to the error: %s\\n\"),\n                (bytes_read < 0) ? str_conn_error_ (bytes_read) :\n                \"detected connection closure\");\n    }\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            NULL);\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Returning after CONNECTION_CLOSE_ERROR\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return;\n  }\n\n  if (0 == bytes_read)\n  {   /* Remote side closed connection. */\n    connection->read_closed = true;\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"REMOTE CLOSED: state=%d, marking read_closed=1\\n\", (int)connection->state);\n      fflush(log);\n      fclose(log);\n    }\n    if ( (MHD_CONNECTION_INIT < connection->state) &&\n         (MHD_CONNECTION_FULL_REQ_RECEIVED > connection->state) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Connection was closed by remote side with incomplete \"\n                   \"request.\\n\"));\n#endif\n      connection->discard_request = true;\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_CLIENT_ABORT);\n    }\n    else if (MHD_CONNECTION_INIT == connection->state)\n      /* This termination code cannot be reported to the application\n       * because application has not been informed yet about this request */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_WITH_ERROR);\n\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Handled remote close and closed connection, final state=%d\\n\", (int)connection->state);\n      fflush(log);\n      fclose(log);\n    }\n    return;\n  }\n  connection->read_buffer_offset += (size_t) bytes_read;\n  MHD_update_last_activity_ (connection);\n#if DEBUG_STATES\n  MHD_DLOG (connection->daemon,\n            _ (\"In function %s handling connection at state: %s\\n\"),\n            MHD_FUNC_,\n            MHD_state_to_string (connection->state));\n#endif\n  /* TODO: check whether the next 'switch()' really needed */\n  switch (connection->state)\n  {\n  case MHD_CONNECTION_INIT:\n  case MHD_CONNECTION_REQ_LINE_RECEIVING:\n  case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n  case MHD_CONNECTION_BODY_RECEIVING:\n  case MHD_CONNECTION_FOOTERS_RECEIVING:\n  case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    /* nothing to do but default action */\n    if (connection->read_closed)\n    {\n      /* TODO: check whether this really needed */\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_READ_ERROR);\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"read_closed at milestone states, closed connection\\n\");\n        fflush(log);\n        fclose(log);\n      }\n    }\n    return;\n  case MHD_CONNECTION_CLOSED:\n    log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"STATE CLOSED in switch, returning\\n\");\n      fflush(log);\n      fclose(log);\n    }\n    return;\n#ifdef UPGRADE_SUPPORT\n  case MHD_CONNECTION_UPGRADE:\n    mhd_assert (0);\n    return;\n#endif /* UPGRADE_SUPPORT */\n  case MHD_CONNECTION_START_REPLY:\n    /* shrink read buffer to how much is actually used */\n    /* TODO: remove shrink as it handled in special function */\n    if ((0 != connection->read_buffer_size) &&\n        (connection->read_buffer_size != connection->read_buffer_offset))\n    {\n      mhd_assert (NULL != connection->read_buffer);\n      connection->read_buffer =\n        MHD_pool_reallocate (connection->pool,\n                             connection->read_buffer,\n                             connection->read_buffer_size,\n                             connection->read_buffer_offset);\n      connection->read_buffer_size = connection->read_buffer_offset;\n      log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"SHRINK read_buffer: new_size=%zu\\n\", connection->read_buffer_size);\n        fflush(log);\n        fclose(log);\n      }\n    }\n    break;\n  case MHD_CONNECTION_REQ_LINE_RECEIVED:\n  case MHD_CONNECTION_HEADERS_RECEIVED:\n  case MHD_CONNECTION_HEADERS_PROCESSED:\n  case MHD_CONNECTION_BODY_RECEIVED:\n  case MHD_CONNECTION_FOOTERS_RECEIVED:\n    /* Milestone state, no data should be read */\n    mhd_assert (0); /* Should not be possible */\n    break;\n  case MHD_CONNECTION_CONTINUE_SENDING:\n  case MHD_CONNECTION_HEADERS_SENDING:\n  case MHD_CONNECTION_HEADERS_SENT:\n  case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n  case MHD_CONNECTION_NORMAL_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n  case MHD_CONNECTION_CHUNKED_BODY_READY:\n  case MHD_CONNECTION_CHUNKED_BODY_SENT:\n  case MHD_CONNECTION_FOOTERS_SENDING:\n  case MHD_CONNECTION_FULL_REPLY_SENT:\n  default:\n    mhd_assert (0); /* Should not be possible */\n    break;\n  }\n  log = fopen(\"/tmp/logs/1815.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"EXIT MHD_connection_handle_read: connection=%p, final_state=%d, read_buffer_offset=%zu\\n\",\n            (void *)connection, (int)connection->state, connection->read_buffer_offset);\n    fflush(log);\n    fclose(log);\n  }\n  return;\n}\n"
}