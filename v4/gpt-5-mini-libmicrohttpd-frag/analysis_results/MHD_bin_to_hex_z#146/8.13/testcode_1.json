{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of MHD_bin_to_hex is declared to take a non-const pointer (for example: size_t MHD_bin_to_hex(void *bin, size_t size, char *hex)), then passing the local parameter 'bin' of type 'const void *' to it discards the const qualification. That situation violates MISRA C 2023 Rule 8.13. (If, however, MHD_bin_to_hex is declared as taking a 'const void *' then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_bin_to_hex_z code that contains useful probe functions that print useful logs to a file \"/tmp/logs/635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_bin_to_hex_z:\n```c\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  res = MHD_bin_to_hex (bin, size, hex);\n  hex[res] = 0;\n\n  return res;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_bin_to_hex_z code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_bin_to_hex_z with it.\n  - Your function must have the exact same signature as MHD_bin_to_hex_z.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_bin_to_hex_z to check logs.\n  - Your function MUST preserve the original logic of MHD_bin_to_hex_z as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_bin_to_hex_z will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_bin_to_hex_z as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n  FILE *logf = fopen(\"/tmp/logs/635.txt\", \"a\");\n\n  if (logf != NULL)\n    {\n      /* Log entry and incoming state */\n      fprintf(logf, \"ENTER MHD_bin_to_hex_z: bin=%p, size=%zu, hex=%p\\n\",\n              bin, size, (void *)hex);\n\n      if (bin != NULL && size > 0u)\n        {\n          const unsigned char *b = (const unsigned char *)bin;\n          size_t i;\n          size_t lim = (size < 32u) ? size : 32u;\n\n          fprintf(logf, \"bin first %zu byte(s):\", lim);\n          for (i = 0u; i < lim; ++i)\n            fprintf(logf, \" %02x\", (unsigned)b[i]);\n          if (size > lim)\n            fprintf(logf, \" ...\");\n          fprintf(logf, \"\\n\");\n        }\n      else\n        {\n          fprintf(logf, \"bin is NULL or size==0\\n\");\n        }\n\n      fprintf(logf, \"About to call MHD_bin_to_hex(bin, size, hex) -- original bin is const void*\\n\");\n      fflush(logf);\n    }\n\n  /* Preserve original behavior: call the underlying conversion function */\n  res = MHD_bin_to_hex (bin, size, hex);\n\n  if (logf != NULL)\n    {\n      fprintf(logf, \"MHD_bin_to_hex returned res=%zu\\n\", res);\n      fprintf(logf, \"hex buffer pointer (pre-terminator) = %p\\n\", (void *)hex);\n\n      if (hex != NULL && res > 0u)\n        {\n          size_t j;\n          size_t lim = (res < 64u) ? res : 64u;\n\n          fprintf(logf, \"hex first %zu char(s):\", lim);\n          for (j = 0u; j < lim; ++j)\n            {\n              unsigned char c = (unsigned char)hex[j];\n              if (c >= 32u && c < 127u)\n                fprintf(logf, \"%c\", c);\n              else\n                fprintf(logf, \"\\\\x%02x\", c);\n            }\n          if (res > lim)\n            fprintf(logf, \" ...\");\n          fprintf(logf, \"\\n\");\n        }\n      else\n        {\n          fprintf(logf, \"hex is NULL or empty\\n\");\n        }\n\n      fclose(logf);\n    }\n\n  /* Preserve original termination semantics. This may crash if hex is NULL\n     (same as original implementation) so we do not add conditional checks */\n  hex[res] = 0;\n\n  return res;\n}\n"
}