{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a debug-only/no-op macro (e.g. defined to ((void)0) or compiled out in release builds), then the statement has no effect at runtime and its removal would not change program behaviour. In that configuration the assertion call is dead code and therefore violates MISRA C 2023 Rule 2.2. If, however, mhd_assert performs a runtime check that can abort/log or otherwise alter behaviour when the condition fails, then the statement is not dead code and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_rq_bauth_params_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3338.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_rq_bauth_params_:\n```c\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n    return connection->rq.bauth;\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n    return NULL;\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    return NULL;\n  }\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n    connection->rq.bauth = bauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.bauth_tried = true;\n  return connection->rq.bauth;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_rq_bauth_params_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_rq_bauth_params_ with it.\n  - Your function must have the exact same signature as MHD_get_rq_bauth_params_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_rq_bauth_params_ to check logs.\n  - Your function MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_rq_bauth_params_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  /* Minimal prototypes to allow logging without adding headers at top of file. */\n  extern void *fopen (const char *, const char *);\n  extern int fprintf (void *, const char *, ...);\n  extern int fclose (void *);\n\n  /* Open log file for appending. Keep it best-effort: failures do not alter logic. */\n  void *logf = fopen(\"/tmp/logs/3338.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER: MHD_get_rq_bauth_params_ connection=%p\\n\", (void *)connection);\n    /* The original code dereferences connection here (via mhd_assert). Preserve that behavior. */\n    fprintf(logf, \"PRE-ASSERT: connection->state=%d, connection->rq.bauth_tried=%d\\n\",\n            (int) connection->state, (int) connection->rq.bauth_tried);\n  }\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (logf)\n    fprintf(logf, \"After assert\\n\");\n\n  if (connection->rq.bauth_tried)\n  {\n    if (logf)\n      fprintf(logf, \"Early return: bauth_tried==true, returning=%p\\n\", (void *) connection->rq.bauth);\n    if (logf) fclose(logf);\n    return connection->rq.bauth;\n  }\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n  {\n    if (logf)\n      fprintf(logf, \"Early return: headers not processed (state=%d), returning NULL\\n\", (int) connection->state);\n    if (logf) fclose(logf);\n    return NULL;\n  }\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    if (logf)\n    {\n      fprintf(logf, \"find_auth_rq_header_ returned false, h_auth_value.len=%lu\\n\", (unsigned long) h_auth_value.len);\n    }\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    if (logf)\n    {\n      fprintf(logf, \"Setting bauth_tried=true, bauth=NULL; returning NULL\\n\");\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  if (logf)\n    fprintf(logf, \"find_auth_rq_header_ returned true, h_auth_value.len=%lu\\n\", (unsigned long) h_auth_value.len);\n\n  bauth = (struct MHD_RqBAuth *) MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (logf)\n    fprintf(logf, \"Allocated bauth=%p\\n\", (void *) bauth);\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (logf)\n    {\n      fprintf(logf, \"Allocation failed, returning NULL\\n\");\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n  {\n    connection->rq.bauth = bauth;\n    if (logf)\n    {\n      fprintf(logf, \"parse_bauth_params succeeded, bauth=%p\\n\", (void *) bauth);\n    }\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    if (logf)\n    {\n      fprintf(logf, \"parse_bauth_params failed, setting bauth=NULL\\n\");\n    }\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.bauth_tried = true;\n  if (logf)\n  {\n    fprintf(logf, \"Exiting: returning=%p, bauth_tried=%d\\n\", (void *) connection->rq.bauth, (int) connection->rq.bauth_tried);\n    fclose(logf);\n  }\n  return connection->rq.bauth;\n}\n"
}