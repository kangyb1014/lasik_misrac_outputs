{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds access if parse_bauth_params uses unbounded string.h functions on h_auth_value.str. For example, if parse_bauth_params calls strlen(h_auth_value.str) or strcpy/strcat/strcpy-like functions that expect a NUL-terminated C string but h_auth_value.str is a non\u2011terminated buffer of length h_auth_value.len, those functions will read past the h_auth_value.len bytes and access memory beyond the object. Similarly, if parse_bauth_params calls memcpy/memmove with a length greater than the actual buffer available, an out\u2011of\u2011bounds read/write can occur. Because the implementation of parse_bauth_params is not shown and only a pointer+length are passed, this call can violate Rule 21.17 unless parse_bauth_params is explicitly written to use the provided length and bounded string routines (e.g., strnlen, memchr or length-limited copying).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_get_rq_bauth_params_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3333.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_get_rq_bauth_params_:\n```c\nconst struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n    return connection->rq.bauth;\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n    return NULL;\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    return NULL;\n  }\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n    connection->rq.bauth = bauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n  connection->rq.bauth_tried = true;\n  return connection->rq.bauth;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_get_rq_bauth_params_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_get_rq_bauth_params_ with it.\n  - Your function must have the exact same signature as MHD_get_rq_bauth_params_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_get_rq_bauth_params_ to check logs.\n  - Your function MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_get_rq_bauth_params_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_get_rq_bauth_params_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "const struct MHD_RqBAuth *\nMHD_get_rq_bauth_params_ (struct MHD_Connection *connection)\n{\n  struct _MHD_str_w_len h_auth_value;\n  struct MHD_RqBAuth *bauth;\n  FILE *log = NULL;\n\n  /* Open log file for append. Don't change program behavior if logging fails. */\n  log = fopen(\"/tmp/logs/3333.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"ENTER MHD_get_rq_bauth_params_: connection=%p, state=%d\\n\", (void *)connection, (int)connection->state);\n    fflush(log);\n  }\n\n  mhd_assert (MHD_CONNECTION_HEADERS_PROCESSED <= connection->state);\n\n  if (connection->rq.bauth_tried)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Early return: bauth_tried is true, returning existing bauth=%p\\n\", (void *)connection->rq.bauth);\n      fclose(log);\n      log = NULL;\n    }\n    return connection->rq.bauth;\n  }\n\n  if (MHD_CONNECTION_HEADERS_PROCESSED > connection->state)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Headers not processed yet: state=%d, returning NULL\\n\", (int)connection->state);\n      fclose(log);\n      log = NULL;\n    }\n    return NULL;\n  }\n\n  if (! find_auth_rq_header_ (connection, MHD_AUTHTYPE_BASIC, &h_auth_value))\n  {\n    connection->rq.bauth_tried = true;\n    connection->rq.bauth = NULL;\n    if (NULL != log)\n    {\n      fprintf(log, \"find_auth_rq_header_ returned false. Marking bauth_tried and returning NULL\\n\");\n      fclose(log);\n      log = NULL;\n    }\n    return NULL;\n  }\n\n  if (NULL != log)\n  {\n    /* Log details about the header value safely without assuming NUL-termination. */\n    fprintf(log, \"find_auth_rq_header_ succeeded. h_auth_value.str=%p, h_auth_value.len=%zu\\n\",\n            (void *)h_auth_value.str, h_auth_value.len);\n    if (h_auth_value.str != NULL && h_auth_value.len > 0)\n    {\n      size_t i, to_print = h_auth_value.len;\n      /* Limit amount of bytes logged to avoid huge output */\n      if (to_print > 64) to_print = 64;\n      fprintf(log, \"h_auth_value (first %zu bytes, hex):\", to_print);\n      for (i = 0; i < to_print; ++i)\n        fprintf(log, \" %02x\", (unsigned char)h_auth_value.str[i]);\n      if (h_auth_value.len > to_print)\n        fprintf(log, \" (truncated, total_len=%zu)\", h_auth_value.len);\n      fprintf(log, \"\\n\");\n    }\n    else\n    {\n      fprintf(log, \"h_auth_value has no data (str=%p, len=%zu)\\n\", (void *)h_auth_value.str, h_auth_value.len);\n    }\n    fflush(log);\n  }\n\n  bauth =\n    (struct MHD_RqBAuth *)\n    MHD_connection_alloc_memory_ (connection, sizeof (struct MHD_RqBAuth));\n\n  if (NULL == bauth)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection's pool to allocate \" \\\n                 \"for Basic Authorization header parsing.\\n\"));\n#endif /* HAVE_MESSAGES */\n    if (NULL != log)\n    {\n      fprintf(log, \"Allocation failed: could not allocate bauth (size=%zu). Returning NULL.\\n\", sizeof (struct MHD_RqBAuth));\n      fclose(log);\n      log = NULL;\n    }\n    return NULL;\n  }\n\n  memset (bauth, 0, sizeof(struct MHD_RqBAuth));\n\n  if (NULL != log)\n  {\n    fprintf(log, \"Calling parse_bauth_params(str=%p, len=%zu, bauth=%p)\\n\",\n            (void *)h_auth_value.str, h_auth_value.len, (void *)bauth);\n    fflush(log);\n  }\n\n  if (parse_bauth_params (h_auth_value.str, h_auth_value.len, bauth))\n    connection->rq.bauth = bauth;\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The Basic Authorization client's header has \"\n                 \"incorrect format.\\n\"));\n#endif /* HAVE_MESSAGES */\n    connection->rq.bauth = NULL;\n    /* Memory in the pool remains allocated until next request */\n  }\n\n  if (NULL != log)\n  {\n    fprintf(log, \"parse_bauth_params result: bauth=%p, bauth_tried will be set true\\n\", (void *)connection->rq.bauth);\n    fclose(log);\n    log = NULL;\n  }\n\n  connection->rq.bauth_tried = true;\n  return connection->rq.bauth;\n}\n"
}