{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the start_routine argument points to MHD_create_thread_ itself (or to any function that eventually calls MHD_create_thread_), then the call to pthread_create will result in the start_routine being invoked and thus MHD_create_thread_ will indirectly cause itself to be called. This creates an indirect recursion (MHD_create_thread_ -> pthread_create -> start_routine -> ... -> MHD_create_thread_), violating MISRA C 2023 Rule 17.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_thread_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_thread_:\n```c\nint\nMHD_create_thread_ (MHD_thread_handle_ID_ *handle_id,\n                    size_t stack_size,\n                    MHD_THREAD_START_ROUTINE_ start_routine,\n                    void *arg)\n{\n#if defined(MHD_USE_POSIX_THREADS)\n  int res;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (*handle_id));\n\n  if (0 != stack_size)\n  {\n    pthread_attr_t attr;\n    res = pthread_attr_init (&attr);\n    if (0 == res)\n    {\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n      if (0 == res)\n        res = pthread_create (new_tid_ptr,\n                              &attr,\n                              start_routine,\n                              arg);\n      pthread_attr_destroy (&attr);\n    }\n  }\n  else\n    res = pthread_create (new_tid_ptr,\n                          NULL,\n                          start_routine,\n                          arg);\n\n  if (0 != res)\n  {\n    errno = res;\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  return ! res;\n#elif defined(MHD_USE_W32_THREADS)\n  uintptr_t thr_handle;\n#if SIZEOF_SIZE_T != SIZEOF_UNSIGNED_INT\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (*handle_id));\n\n  if (stack_size > UINT_MAX)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n#endif /* SIZEOF_SIZE_T != SIZEOF_UNSIGNED_INT */\n  thr_handle = (uintptr_t) _beginthreadex (NULL,\n                                           (unsigned int) stack_size,\n                                           start_routine,\n                                           arg,\n                                           0,\n                                           NULL);\n  if ((MHD_thread_handle_native_) 0 == (MHD_thread_handle_native_) thr_handle)\n    return 0;\n\n  MHD_thread_handle_ID_set_native_handle_ (handle_id, \\\n                                           (MHD_thread_handle_native_) \\\n                                           thr_handle);\n\n  return ! 0;\n#endif\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_thread_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_thread_ with it.\n  - Your function must have the exact same signature as MHD_create_thread_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_thread_ to check logs.\n  - Your function MUST preserve the original logic of MHD_create_thread_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_thread_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_thread_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int\nMHD_create_thread_ (MHD_thread_handle_ID_ *handle_id,\n                    size_t stack_size,\n                    MHD_THREAD_START_ROUTINE_ start_routine,\n                    void *arg)\n{\n#if defined(MHD_USE_POSIX_THREADS)\n  int res;\n#if defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  pthread_t *const new_tid_ptr =\n    MHD_thread_handle_ID_get_native_handle_ptr_ (handle_id);\n#else  /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n  pthread_t new_tid;\n  pthread_t *const new_tid_ptr = &new_tid;\n#endif /* ! MHD_thread_handle_ID_get_native_handle_ptr_ */\n\n  /* Probe / logging: open log file and record entry and key state. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_create_thread_: ENTRY\\n\");\n      fprintf(logf, \"  handle_id=%p, stack_size=%zu, start_routine=%p, arg=%p\\n\",\n              (void *) handle_id,\n              stack_size,\n              (void *) start_routine,\n              arg);\n      /* Detect direct recursion attempt: start_routine equals this function */\n      if (start_routine == (MHD_THREAD_START_ROUTINE_) MHD_create_thread_)\n      {\n        fprintf(logf, \"  WARNING: start_routine == MHD_create_thread_ (direct recursion possible)\\n\");\n      }\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (*handle_id));\n\n  if (0 != stack_size)\n  {\n    pthread_attr_t attr;\n    res = pthread_attr_init (&attr);\n    if (0 == res)\n    {\n      res = pthread_attr_setstacksize (&attr,\n                                       stack_size);\n      if (0 == res)\n      {\n        /* Log just before pthread_create with attributes */\n        FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"  pthread_create with attr: new_tid_ptr=%p\\n\",\n                  (void *) new_tid_ptr);\n          fprintf(logf, \"    start_routine=%p, arg=%p\\n\",\n                  (void *) start_routine, arg);\n          fflush(logf);\n          fclose(logf);\n        }\n\n        res = pthread_create (new_tid_ptr,\n                              &attr,\n                              start_routine,\n                              arg);\n\n        /* Log result of pthread_create when attributes used */\n        logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"  pthread_create returned res=%d\\n\", res);\n          fflush(logf);\n          fclose(logf);\n        }\n      }\n      pthread_attr_destroy (&attr);\n    }\n  }\n  else\n  {\n    /* Log just before pthread_create without attributes */\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  pthread_create without attr: new_tid_ptr=%p\\n\",\n              (void *) new_tid_ptr);\n      fprintf(logf, \"    start_routine=%p, arg=%p\\n\",\n              (void *) start_routine, arg);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    res = pthread_create (new_tid_ptr,\n                          NULL,\n                          start_routine,\n                          arg);\n\n    /* Log result of pthread_create when no attributes used */\n    logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  pthread_create returned res=%d\\n\", res);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  if (0 != res)\n  {\n    errno = res;\n\n    /* Log failure and that handle is being marked invalid */\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  pthread_create failed: errno(res)=%d; marking handle invalid\\n\", res);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    MHD_thread_handle_ID_set_invalid_ (handle_id);\n  }\n#if ! defined(MHD_thread_handle_ID_get_native_handle_ptr_)\n  else\n  {\n    /* Only log the fact that native handle is being set; printing pthread_t\n       value portably is platform-specific, so we log the address of the\n       local new_tid variable and note success. */\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  pthread_create succeeded: setting native handle (new_tid_ptr=%p)\\n\",\n              (void *) new_tid_ptr);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    MHD_thread_handle_ID_set_native_handle_ (handle_id, new_tid);\n  }\n#endif /* ! MHD_thread_handle_ID_set_current_thread_ID_ */\n\n  /* Log exit and return value */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_create_thread_: EXIT returning %d\\n\", ! res);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  return ! res;\n#elif defined(MHD_USE_W32_THREADS)\n  uintptr_t thr_handle;\n#if SIZEOF_SIZE_T != SIZEOF_UNSIGNED_INT\n\n  mhd_assert (! MHD_thread_handle_ID_is_valid_handle_ (*handle_id));\n\n  if (stack_size > UINT_MAX)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n#endif /* SIZEOF_SIZE_T != SIZEOF_UNSIGNED_INT */\n\n  /* Log W32 thread creation attempt */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_create_thread_ (W32): ENTRY handle_id=%p, stack_size=%zu, start_routine=%p, arg=%p\\n\",\n              (void *) handle_id, stack_size, (void *) start_routine, arg);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  thr_handle = (uintptr_t) _beginthreadex (NULL,\n                                           (unsigned int) stack_size,\n                                           start_routine,\n                                           arg,\n                                           0,\n                                           NULL);\n  if ((MHD_thread_handle_native_) 0 == (MHD_thread_handle_native_) thr_handle)\n    return 0;\n\n  MHD_thread_handle_ID_set_native_handle_ (handle_id, \\\n                                           (MHD_thread_handle_native_) \\\n                                           thr_handle);\n\n  /* Log success and exit for W32 */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1530.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"MHD_create_thread_ (W32): EXIT returning 1 (thread created)\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  return ! 0;\n#endif\n}\n"
}