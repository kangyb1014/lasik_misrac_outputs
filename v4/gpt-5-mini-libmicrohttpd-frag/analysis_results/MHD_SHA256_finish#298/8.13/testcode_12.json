{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function sha256_transform is declared to take a non-const buffer parameter (for example: void sha256_transform(uint32_t H[8], uint8_t block[SHA256_BLOCK_SIZE]);) but only reads from the block, then the pointer parameter should be const-qualified (e.g. const uint8_t block[]). In that case the current call sha256_transform(ctx->H, ctx->buffer) indicates a violation of MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type whenever possible. (If, however, sha256_transform legitimately modifies the buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_SHA256_finish code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_finish:\n```c\nvoid\nMHD_SHA256_finish (struct Sha256Ctx *ctx,\n                   uint8_t digest[SHA256_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  num_bits = ctx->count << 3;\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equal (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See FIPS PUB 180-4 paragraph 5.1.1. */\n\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space at least for one byte (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (SHA256_BLOCK_SIZE - bytes_have < SHA256_SIZE_OF_LEN_ADD)\n  {   /* No space in current block to put total length of message.\n         Pad current block with zeros and process it. */\n    if (bytes_have < SHA256_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              SHA256_BLOCK_SIZE - bytes_have);\n    /* Process full block. */\n    sha256_transform (ctx->H, ctx->buffer);\n    /* Start new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          SHA256_BLOCK_SIZE - SHA256_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed message as big-endian value. */\n  _MHD_PUT_64BIT_BE_SAFE (ctx->buffer + SHA256_BLOCK_SIZE_WORDS - 2, num_bits);\n  /* Process full final block. */\n  sha256_transform (ctx->H, ctx->buffer);\n\n  /* Put final hash/digest in BE mode */\n#ifndef _MHD_PUT_32BIT_BE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[SHA256_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_BE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 3, ctx->H[3]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 4, ctx->H[4]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 5, ctx->H[5]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 6, ctx->H[6]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 7, ctx->H[7]);\n    /* Copy result to unaligned destination address */\n    memcpy (digest, alig_dgst, SHA256_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_BE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_BE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_BE ((void *) (digest + 0 * SHA256_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 1 * SHA256_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 2 * SHA256_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 3 * SHA256_BYTES_IN_WORD), ctx->H[3]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 4 * SHA256_BYTES_IN_WORD), ctx->H[4]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 5 * SHA256_BYTES_IN_WORD), ctx->H[5]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 6 * SHA256_BYTES_IN_WORD), ctx->H[6]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 7 * SHA256_BYTES_IN_WORD), ctx->H[7]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_BE_UNALIGNED */\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Sha256Ctx));\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_SHA256_finish code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_SHA256_finish with it.\n  - Your function must have the exact same signature as MHD_SHA256_finish.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_SHA256_finish to check logs.\n  - Your function MUST preserve the original logic of MHD_SHA256_finish as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_SHA256_finish will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_SHA256_finish as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_SHA256_finish (struct Sha256Ctx *ctx,\n                   uint8_t digest[SHA256_DIGEST_SIZE])\n{\n  uint64_t num_bits;   /**< Number of processed bits */\n  unsigned bytes_have; /**< Number of bytes in buffer */\n\n  /* Logging helpers */\n  FILE *mhd_log = (FILE *) 0;\n  /* Local scratch buffers to detect modifications by sha256_transform */\n  uint8_t buf_copy_before[SHA256_BLOCK_SIZE];\n  uint8_t buf_copy_after[SHA256_BLOCK_SIZE];\n  uint32_t H_before[8];\n  uint32_t H_after[8];\n  int rc_open = 0;\n\n  /* Try to open log file for append; non-fatal if it fails. */\n  mhd_log = fopen(\"/tmp/logs/4395.txt\", \"a\");\n  if (mhd_log != (FILE *) 0)\n  {\n    rc_open = 1;\n    fprintf(mhd_log, \"MHD_SHA256_finish ENTER: ctx=%p, digest=%p\\n\", (void *)ctx, (void *)digest);\n    fflush(mhd_log);\n  }\n\n  num_bits = ctx->count << 3;\n  /* Note: (count & (SHA256_BLOCK_SIZE-1))\n           equal (count % SHA256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned) (ctx->count & (SHA256_BLOCK_SIZE - 1));\n\n  if (rc_open)\n  {\n    fprintf(mhd_log, \"Computed num_bits=%llu, bytes_have=%u, count=%llu\\n\",\n            (unsigned long long) num_bits, bytes_have, (unsigned long long) ctx->count);\n    fprintf(mhd_log, \"Buffer address: %p\\n\", (void *) ctx->buffer);\n    fflush(mhd_log);\n  }\n\n  /* Input data must be padded with a single bit \"1\", then with zeros and\n     the finally the length of data in bits must be added as the final bytes\n     of the last block.\n     See FIPS PUB 180-4 paragraph 5.1.1. */\n\n  /* Data is always processed in form of bytes (not by individual bits),\n     therefore position of first padding bit in byte is always\n     predefined (0x80). */\n  /* Buffer always have space at least for one byte (as full buffers are\n     processed immediately). */\n  ((uint8_t *) ctx->buffer)[bytes_have++] = 0x80;\n\n  if (rc_open)\n  {\n    /* Log the first few bytes around the pad point to give context */\n    size_t i;\n    fprintf(mhd_log, \"After padding 0x80 at index %u, first 16 bytes of buffer:\\n\", bytes_have - 1);\n    for (i = 0; i < 16 && i < SHA256_BLOCK_SIZE; ++i)\n      fprintf(mhd_log, \"%02x\", ((uint8_t *) ctx->buffer)[i]);\n    fprintf(mhd_log, \"\\n\");\n    fflush(mhd_log);\n  }\n\n  if (SHA256_BLOCK_SIZE - bytes_have < SHA256_SIZE_OF_LEN_ADD)\n  {   /* No space in current block to put total length of message.\n         Pad current block with zeros and process it. */\n    if (bytes_have < SHA256_BLOCK_SIZE)\n      memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n              SHA256_BLOCK_SIZE - bytes_have);\n    /* Process full block. */\n\n    /* Capture buffer and H state before calling sha256_transform */\n    memcpy(buf_copy_before, (uint8_t *) ctx->buffer, SHA256_BLOCK_SIZE);\n    memcpy(H_before, ctx->H, sizeof(H_before));\n    if (rc_open)\n    {\n      fprintf(mhd_log, \"Calling sha256_transform (first call) with buffer %p\\n\", (void *) ctx->buffer);\n      fflush(mhd_log);\n    }\n\n    sha256_transform (ctx->H, ctx->buffer);\n\n    /* Capture after state and compare */\n    memcpy(buf_copy_after, (uint8_t *) ctx->buffer, SHA256_BLOCK_SIZE);\n    memcpy(H_after, ctx->H, sizeof(H_after));\n    if (rc_open)\n    {\n      int modified = (memcmp(buf_copy_before, buf_copy_after, SHA256_BLOCK_SIZE) != 0);\n      fprintf(mhd_log, \"sha256_transform (first call) returned. Buffer modified=%d\\n\", modified);\n      fprintf(mhd_log, \"H before: %08x %08x %08x %08x %08x %08x %08x %08x\\n\",\n              H_before[0], H_before[1], H_before[2], H_before[3],\n              H_before[4], H_before[5], H_before[6], H_before[7]);\n      fprintf(mhd_log, \"H after : %08x %08x %08x %08x %08x %08x %08x %08x\\n\",\n              H_after[0], H_after[1], H_after[2], H_after[3],\n              H_after[4], H_after[5], H_after[6], H_after[7]);\n      fflush(mhd_log);\n    }\n\n    /* Start new block. */\n    bytes_have = 0;\n  }\n\n  /* Pad the rest of the buffer with zeros. */\n  memset (((uint8_t *) ctx->buffer) + bytes_have, 0,\n          SHA256_BLOCK_SIZE - SHA256_SIZE_OF_LEN_ADD - bytes_have);\n  /* Put the number of bits in processed message as big-endian value. */\n  _MHD_PUT_64BIT_BE_SAFE (ctx->buffer + SHA256_BLOCK_SIZE_WORDS - 2, num_bits);\n  /* Process full final block. */\n\n  /* Capture buffer and H state before second call */\n  memcpy(buf_copy_before, (uint8_t *) ctx->buffer, SHA256_BLOCK_SIZE);\n  memcpy(H_before, ctx->H, sizeof(H_before));\n  if (rc_open)\n  {\n    fprintf(mhd_log, \"Calling sha256_transform (second call) with buffer %p\\n\", (void *) ctx->buffer);\n    fflush(mhd_log);\n  }\n\n  sha256_transform (ctx->H, ctx->buffer);\n\n  /* Capture after state and compare */\n  memcpy(buf_copy_after, (uint8_t *) ctx->buffer, SHA256_BLOCK_SIZE);\n  memcpy(H_after, ctx->H, sizeof(H_after));\n  if (rc_open)\n  {\n    int modified = (memcmp(buf_copy_before, buf_copy_after, SHA256_BLOCK_SIZE) != 0);\n    fprintf(mhd_log, \"sha256_transform (second call) returned. Buffer modified=%d\\n\", modified);\n    fprintf(mhd_log, \"H before: %08x %08x %08x %08x %08x %08x %08x %08x\\n\",\n            H_before[0], H_before[1], H_before[2], H_before[3],\n            H_before[4], H_before[5], H_before[6], H_before[7]);\n    fprintf(mhd_log, \"H after : %08x %08x %08x %08x %08x %08x %08x %08x\\n\",\n            H_after[0], H_after[1], H_after[2], H_after[3],\n            H_after[4], H_after[5], H_after[6], H_after[7]);\n    fflush(mhd_log);\n  }\n\n  /* Put final hash/digest in BE mode */\n#ifndef _MHD_PUT_32BIT_BE_UNALIGNED\n  if (1\n#ifndef MHD_FAVOR_SMALL_CODE\n      && (0 != ((uintptr_t) digest) % _MHD_UINT32_ALIGN)\n#endif /* MHD_FAVOR_SMALL_CODE */\n      )\n  {\n    /* If storing of the final result requires aligned address and\n       the destination address is not aligned or compact code is used,\n       store the final digest in aligned temporary buffer first, then\n       copy it to the destination. */\n    uint32_t alig_dgst[SHA256_DIGEST_SIZE_WORDS];\n    _MHD_PUT_32BIT_BE (alig_dgst + 0, ctx->H[0]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 1, ctx->H[1]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 2, ctx->H[2]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 3, ctx->H[3]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 4, ctx->H[4]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 5, ctx->H[5]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 6, ctx->H[6]);\n    _MHD_PUT_32BIT_BE (alig_dgst + 7, ctx->H[7]);\n    /* Copy result to unaligned destination address */\n    memcpy (digest, alig_dgst, SHA256_DIGEST_SIZE);\n  }\n#ifndef MHD_FAVOR_SMALL_CODE\n  else /* Combined with the next 'if' */\n#endif /* MHD_FAVOR_SMALL_CODE */\n#endif /* ! _MHD_PUT_32BIT_BE_UNALIGNED */\n#if ! defined(MHD_FAVOR_SMALL_CODE) || defined(_MHD_PUT_32BIT_BE_UNALIGNED)\n  if (1)\n  {\n    /* Use cast to (void*) here to mute compiler alignment warnings.\n     * Compilers are not smart enough to see that alignment has been checked. */\n    _MHD_PUT_32BIT_BE ((void *) (digest + 0 * SHA256_BYTES_IN_WORD), ctx->H[0]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 1 * SHA256_BYTES_IN_WORD), ctx->H[1]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 2 * SHA256_BYTES_IN_WORD), ctx->H[2]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 3 * SHA256_BYTES_IN_WORD), ctx->H[3]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 4 * SHA256_BYTES_IN_WORD), ctx->H[4]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 5 * SHA256_BYTES_IN_WORD), ctx->H[5]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 6 * SHA256_BYTES_IN_WORD), ctx->H[6]);\n    _MHD_PUT_32BIT_BE ((void *) (digest + 7 * SHA256_BYTES_IN_WORD), ctx->H[7]);\n  }\n#endif /* ! MHD_FAVOR_SMALL_CODE || _MHD_PUT_32BIT_BE_UNALIGNED */\n\n  if (rc_open)\n  {\n    fprintf(mhd_log, \"Final H values before ctx wipe: %08x %08x %08x %08x %08x %08x %08x %08x\\n\",\n            ctx->H[0], ctx->H[1], ctx->H[2], ctx->H[3],\n            ctx->H[4], ctx->H[5], ctx->H[6], ctx->H[7]);\n    fflush(mhd_log);\n  }\n\n  /* Erase potentially sensitive data. */\n  memset (ctx, 0, sizeof(struct Sha256Ctx));\n\n  if (rc_open)\n  {\n    fprintf(mhd_log, \"MHD_SHA256_finish EXIT: ctx wiped and function complete\\n\\n\");\n    fclose(mhd_log);\n  }\n}\n"
}