{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(mhd_copy, buffer, size) can read beyond the bounds of the object referenced by 'buffer' because the function only checks buffer != NULL and does not ensure that the object pointed to by 'buffer' is at least 'size' bytes long. For example, if the caller passes a source array char src[4] = \"abc\\0\" but passes size == 10, memcpy will read past src and invoke undefined behavior. The destination is allocated with malloc(size) (so the destination is OK), but the source side is not checked, so Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_buffer_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2053.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_buffer_copy:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_from_buffer_copy code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_from_buffer_copy with it.\n  - Your function must have the exact same signature as MHD_create_response_from_buffer_copy.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_from_buffer_copy to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_from_buffer_copy as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_from_buffer_copy will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_from_buffer_copy as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n  FILE *logf = NULL;\n  int made_dir = 0;\n\n  /* Try to open log file; if the directory doesn't exist, attempt to create it. */\n  logf = fopen(\"/tmp/logs/2053.txt\", \"a\");\n  if (NULL == logf)\n  {\n    /* Attempt to create the directory and reopen the log file. If this fails,\n       continue without logging to avoid changing original behavior. */\n    (void) system(\"mkdir -p /tmp/logs\");\n    made_dir = 1;\n    logf = fopen(\"/tmp/logs/2053.txt\", \"a\");\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"ENTER MHD_create_response_from_buffer_copy: size=%zu, buffer=%p, mkdir_attempted=%d\\n\",\n            size, buffer, made_dir);\n    fflush(logf);\n  }\n\n  if (0 == size)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"size==0: delegating to MHD_create_response_from_buffer_with_free_callback_cls with size=0, buffer=NULL\\n\");\n      fclose(logf);\n    }\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  }\n\n  if (NULL == buffer)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"buffer==NULL: returning NULL\\n\");\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"allocating mhd_copy with malloc(size=%zu)\\n\", size);\n    fflush(logf);\n  }\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"malloc returned NULL for size=%zu\\n\", size);\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"about to memcpy dest=%p <- src=%p (size=%zu)\\n\", mhd_copy, buffer, size);\n    fflush(logf);\n  }\n\n  /* Potentially unsafe copy: preserve original behavior while logging the parameters\n     so that callers and tests can reproduce and observe the violation scenario. */\n  memcpy (mhd_copy, buffer, size);\n\n  if (logf)\n  {\n    fprintf(logf, \"memcpy completed: dest=%p\\n\", mhd_copy);\n    fflush(logf);\n  }\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n\n  if (NULL == r)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"MHD_create_response_from_buffer_with_free_callback_cls returned NULL; freeing mhd_copy=%p\\n\",\n              mhd_copy);\n      fflush(logf);\n      fclose(logf);\n    }\n    free (mhd_copy);\n  }\n  else\n  {\n    if (logf)\n    {\n      fprintf(logf, \"response created: r=%p, setting r->data_buffer_size=%zu\\n\", (void *)r, size);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n"
}