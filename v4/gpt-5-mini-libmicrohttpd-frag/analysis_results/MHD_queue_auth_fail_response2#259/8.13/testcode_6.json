{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'connection' is declared as 'struct MHD_Connection *connection' but the function body does not modify the pointed-to object \u2014 it only forwards the pointer to another function. Therefore the pointer could be const-qualified (i.e. 'const struct MHD_Connection *connection'). As written this violates Rule 8.13 unless the forwarded callee requires a non-const pointer (in which case const cannot be used without casting).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_fail_response2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3955.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_fail_response2:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_queue_auth_fail_response2 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_queue_auth_fail_response2 with it.\n  - Your function must have the exact same signature as MHD_queue_auth_fail_response2.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_queue_auth_fail_response2 to check logs.\n  - Your function MUST preserve the original logic of MHD_queue_auth_fail_response2 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_queue_auth_fail_response2 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_queue_auth_fail_response2 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "#include <stdio.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n  FILE *log = fopen(\"/tmp/logs/3955.txt\", \"a\");\n\n  if (log)\n    fprintf(log, \"ENTER: MHD_queue_auth_fail_response2\\n\");\n\n  if (log)\n    fprintf(log, \"params: connection=%p realm=%p opaque=%p response=%p signal_stale=%d algo=%d\\n\",\n            (void *) connection, (const void *) realm, (const void *) opaque,\n            (void *) response, signal_stale, (int) algo);\n\n  if (MHD_DIGEST_ALG_MD5 == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n    if (log) fprintf(log, \"branch: MHD_DIGEST_ALG_MD5 -> algo3=MHD_DIGEST_AUTH_MULT_ALGO3_MD5\\n\");\n  }\n  else if (MHD_DIGEST_ALG_SHA256 == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n    if (log) fprintf(log, \"branch: MHD_DIGEST_ALG_SHA256 -> algo3=MHD_DIGEST_AUTH_MULT_ALGO3_SHA256\\n\");\n  }\n  else if (MHD_DIGEST_ALG_AUTO == algo) {\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n    if (log) fprintf(log, \"branch: MHD_DIGEST_ALG_AUTO -> algo3=MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION\\n\");\n  }\n  else {\n    if (log) {\n      fprintf(log, \"ERROR: Wrong algo value: %d -- invoking MHD_PANIC\\n\", (int) algo);\n      fclose(log);\n    }\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n    /* MHD_PANIC is not expected to return */\n  }\n\n  if (log)\n    fprintf(log, \"forwarding to MHD_queue_auth_required_response3 with algo3=%d\\n\", (int) algo3);\n\n  enum MHD_Result result = MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n\n  if (log) {\n    fprintf(log, \"returned from MHD_queue_auth_required_response3: result=%d\\n\", (int) result);\n    fclose(log);\n  }\n\n  return result;\n}\n"
}