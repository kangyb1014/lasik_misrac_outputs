{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: calc_userhash passes realm and realm_len to digest_update without validating realm or its termination. If digest_update uses a <string.h> function that expects a NUL-terminated C string (e.g. strlen, strcpy, strcat) while realm is not NUL-terminated, strlen(realm) (or similar) will read beyond the realm object bounds. Likewise, if digest_update calls memcpy/memmove with a length greater than the actual allocated size of realm (or if realm is NULL), that will access out of bounds. Therefore the fragment can violate Rule 21.17 unless digest_update is implemented to use the provided realm_len safely (e.g. memcpy with realm_len and a non-NULL pointer) and/or performs appropriate checks.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3913.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calc_userhash code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calc_userhash with it.\n  - Your function must have the exact same signature as calc_userhash.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calc_userhash to check logs.\n  - Your function MUST preserve the original logic of calc_userhash as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calc_userhash will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calc_userhash as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  /* preserve original assertions */\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n\n  /* Open log file for append. This captures control flow and key state. */\n  FILE *fp = fopen(\"/tmp/logs/3913.txt\", \"a\");\n  if (fp)\n    {\n      fprintf(fp, \"ENTER calc_userhash: da=%p, da->hashing=%d, username=%p, username_len=%zu, realm=%p, realm_len=%zu, digest_bin=%p\\n\",\n              (void *)da, (int)da->hashing, (void *)username, username_len, (void *)realm, realm_len, (void *)digest_bin);\n\n      /* Log a safe preview of username (bounded to avoid huge reads). */\n      if (username)\n        {\n          size_t i, to_print = username_len < 64 ? username_len : 64;\n          fprintf(fp, \" username (first %zu bytes):\", to_print);\n          for (i = 0; i < to_print; ++i)\n            fprintf(fp, \" %02x\", (unsigned char)username[i]);\n          if (username_len > to_print)\n            fprintf(fp, \" ...\");\n          fprintf(fp, \"\\n\");\n        }\n      else\n        {\n          fprintf(fp, \" username is NULL\\n\");\n        }\n\n      /* Log realm pointer and bounded preview only if realm is non-NULL.\n         Do not read realm if it's NULL to avoid introducing a new fault. */\n      if (realm)\n        {\n          size_t i, to_print = realm_len < 64 ? realm_len : 64;\n          fprintf(fp, \" realm (first %zu bytes):\", to_print);\n          for (i = 0; i < to_print; ++i)\n            fprintf(fp, \" %02x\", (unsigned char)realm[i]);\n          if (realm_len > to_print)\n            fprintf(fp, \" ...\");\n          fprintf(fp, \"\\n\");\n\n          /* Check for an embedded NUL within realm_len (safe since we already checked realm != NULL).\n             This helps detect whether digest_update might receive a non-NUL-terminated buffer. */\n          size_t nul_pos = (size_t)-1;\n          for (i = 0; i < realm_len; ++i)\n            {\n              if (realm[i] == '\\0') { nul_pos = i; break; }\n            }\n          if (nul_pos != (size_t)-1)\n            fprintf(fp, \" realm contains NUL at position %zu (<= realm_len)\\n\", nul_pos);\n          else\n            fprintf(fp, \" realm has no NUL within first %zu bytes\\n\", realm_len);\n        }\n      else\n        {\n          fprintf(fp, \" realm is NULL\\n\");\n        }\n\n      fprintf(fp, \" -- calling digest_update(username)\\n\");\n      fflush(fp);\n    }\n\n  /* Preserve original behavior: update with username, colon, realm, then compute hash. */\n  digest_update (da, username, username_len);\n  if (fp) { fprintf(fp, \" returned from digest_update(username)\\n\"); fflush(fp); }\n\n  digest_update_with_colon (da);\n  if (fp) { fprintf(fp, \" returned from digest_update_with_colon\\n\"); fflush(fp); }\n\n  if (fp) { fprintf(fp, \" -- calling digest_update(realm)\\n\"); fflush(fp); }\n  digest_update (da, realm, realm_len);\n  if (fp) { fprintf(fp, \" returned from digest_update(realm)\\n\"); fflush(fp); }\n\n  digest_calc_hash (da, digest_bin);\n  if (fp)\n    {\n      fprintf(fp, \" returned from digest_calc_hash, digest_bin=%p\\n\", (void *)digest_bin);\n      fclose(fp);\n    }\n}\n"
}