{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is a debug assertion macro that only evaluates a condition (for example #define mhd_assert(x) ((void)0) in release or ((void)(x)) in some configurations) then the statement performs no observable side effect (it only reads da->hashing). Removing that call would not change program behaviour, so the operation is dead code and Rule 2.2 is violated. (If, conversely, mhd_assert can cause termination on failure or the read has side effects\u2014e.g. da->hashing is volatile\u2014then it would not be dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calc_userhash code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3918.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calc_userhash:\n```c\n_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_calc_hash (da, digest_bin);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calc_userhash code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calc_userhash with it.\n  - Your function must have the exact same signature as calc_userhash.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calc_userhash to check logs.\n  - Your function MUST preserve the original logic of calc_userhash as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calc_userhash will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calc_userhash as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline void\ncalc_userhash (struct DigestAlgorithm *da,\n               const char *username, const size_t username_len,\n               const char *realm, const size_t realm_len,\n               uint8_t *digest_bin)\n{\n  /* Log file for control-flow and state probes to reproduce the assertion/evaluation scenario */\n  FILE *log = fopen(\"/tmp/logs/3918.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"calc_userhash entered: da=%p, username=%p, username_len=%zu, realm=%p, realm_len=%zu, digest_bin=%p\\n\",\n            (void *) da, (void *) username, username_len, (void *) realm, realm_len, (void *) digest_bin);\n    fflush(log);\n  }\n\n  /* Capture the value of da->hashing immediately before the assertions.\n     This mirrors the original code's read of da->hashing (so we don't change ordering or side effects). */\n  int hashing_val_before = (int) da->hashing;\n  if (log) {\n    fprintf(log, \"before mhd_assert: da->hashing=%d\\n\", hashing_val_before);\n    fflush(log);\n  }\n\n  /* Original assertions preserved in-place. Their evaluation (or lack of it) is the subject\n     of the reported MISRA Rule 2.2 scenario; logging above/below helps determine whether the\n     read of da->hashing was actually executed in a given build/configuration. */\n  mhd_assert (NULL != username);\n  mhd_assert (! da->hashing);\n\n  if (log) {\n    int hashing_val_after = (int) da->hashing;\n    fprintf(log, \"after mhd_assert: da->hashing=%d\\n\", hashing_val_after);\n    fflush(log);\n  }\n\n  if (log) {\n    fprintf(log, \"calling digest_update with username (len=%zu)\\n\", username_len);\n    fflush(log);\n  }\n  digest_update (da, username, username_len);\n\n  if (log) {\n    fprintf(log, \"calling digest_update_with_colon()\\n\");\n    fflush(log);\n  }\n  digest_update_with_colon (da);\n\n  if (log) {\n    fprintf(log, \"calling digest_update with realm (len=%zu)\\n\", realm_len);\n    fflush(log);\n  }\n  digest_update (da, realm, realm_len);\n\n  if (log) {\n    fprintf(log, \"calling digest_calc_hash()\\n\");\n    fflush(log);\n  }\n  digest_calc_hash (da, digest_bin);\n\n  if (log) {\n    fprintf(log, \"digest_calc_hash returned; digest_bin=%p; first_bytes:\", (void *) digest_bin);\n    if (digest_bin) {\n      /* Print up to 8 bytes of the resulting hash for quick inspection. */\n      for (size_t i = 0; i < 8; ++i) {\n        fprintf(log, \" %02x\", (unsigned) digest_bin[i]);\n      }\n    } else {\n      fprintf(log, \" (null)\");\n    }\n    fprintf(log, \"\\n\");\n    fclose(log);\n  }\n}\n"
}