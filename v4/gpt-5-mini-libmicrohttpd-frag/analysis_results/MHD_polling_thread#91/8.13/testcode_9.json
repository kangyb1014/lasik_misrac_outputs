{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis is a violation if the function MHD_strerror_ is declared to return a non-const pointer (char *). The error text returned is effectively read-only, so the pointer should be const char *. Using a non-const pointer to point at static/read-only message data would violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_polling_thread code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_polling_thread:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n      MHD_poll (daemon, MHD_YES);\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n      MHD_epoll (daemon, -1);\n    else\n#endif\n    MHD_select (daemon, -1);\n    MHD_cleanup_connections (daemon);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n    resume_suspended_connections (daemon);\n  close_all_connections (daemon);\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_polling_thread code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_polling_thread with it.\n  - Your function must have the exact same signature as MHD_polling_thread.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_polling_thread to check logs.\n  - Your function MUST preserve the original logic of MHD_polling_thread as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_polling_thread will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_polling_thread as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nMHD_polling_thread (void *cls)\n{\n  struct MHD_Daemon *daemon = cls;\n#ifdef HAVE_PTHREAD_SIGMASK\n  sigset_t s_mask;\n  int err;\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  /* Open a log file to record control flow and state for debugging the\n     potential MISRA Rule 8.13 violation scenario. */\n  FILE *mhd_log = fopen(\"/tmp/logs/1675.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"ENTER MHD_polling_thread: daemon=%p\\n\", (void *)daemon);\n    fflush(mhd_log);\n  }\n\n  MHD_thread_handle_ID_set_current_thread_ID_ (&(daemon->tid));\n#ifdef HAVE_PTHREAD_SIGMASK\n  if (mhd_log)\n    fprintf(mhd_log, \"Calling sigemptyset and sigaddset for SIGPIPE\\n\");\n\n  if ((0 == sigemptyset (&s_mask)) &&\n      (0 == sigaddset (&s_mask, SIGPIPE)))\n  {\n    if (mhd_log)\n      fprintf(mhd_log, \"sigemptyset/sigaddset succeeded\\n\");\n    err = pthread_sigmask (SIG_BLOCK, &s_mask, NULL);\n  }\n  else\n    err = errno;\n\n  if (mhd_log)\n    fprintf(mhd_log, \"pthread_sigmask result err=%d\\n\", err);\n\n  if (0 == err)\n    daemon->sigpipe_blocked = true;\n#ifdef HAVE_MESSAGES\n  else\n  {\n    /* Original code logs an error message using MHD_DLOG and MHD_strerror_.\n       Capture the same information to our log file for later inspection.\n       We call MHD_strerror_ here and log the returned pointer and text. */\n    const char *mhd_err_text = MHD_strerror_ (errno);\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"Failed to block SIGPIPE: errno=%d, MHD_strerror_=ptr=%p, text=\\\"%s\\\"\\n\",\n              errno, (void *)mhd_err_text, mhd_err_text ? mhd_err_text : \"(null)\");\n      fflush(mhd_log);\n    }\n    MHD_DLOG (daemon,\n              _ (\"Failed to block SIGPIPE on daemon thread: %s\\n\"),\n              MHD_strerror_ (errno));\n  }\n#endif /* HAVE_MESSAGES */\n#endif /* HAVE_PTHREAD_SIGMASK */\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"Entering main polling loop: shutdown=%d\\n\", (int)daemon->shutdown);\n    fflush(mhd_log);\n  }\n\n  while (! daemon->shutdown)\n  {\n#ifdef HAVE_POLL\n    if (MHD_D_IS_USING_POLL_ (daemon))\n    {\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"Loop: using poll -> calling MHD_poll\\n\");\n        fflush(mhd_log);\n      }\n      MHD_poll (daemon, MHD_YES);\n    }\n    else\n#endif /* HAVE_POLL */\n#ifdef EPOLL_SUPPORT\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"Loop: using epoll -> calling MHD_epoll\\n\");\n        fflush(mhd_log);\n      }\n      MHD_epoll (daemon, -1);\n    }\n    else\n#endif\n    {\n      if (mhd_log)\n      {\n        fprintf(mhd_log, \"Loop: using select -> calling MHD_select\\n\");\n        fflush(mhd_log);\n      }\n      MHD_select (daemon, -1);\n    }\n\n    /* After polling, log a brief status and perform cleanup as usual. */\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"After poll/select/epoll: calling MHD_cleanup_connections\\n\");\n      fflush(mhd_log);\n    }\n    MHD_cleanup_connections (daemon);\n  }\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"Exited main loop: shutdown=%d\\n\", (int)daemon->shutdown);\n    fflush(mhd_log);\n  }\n\n  /* Resume any pending for resume connections, join\n   * all connection's threads (if any) and finally cleanup\n   * everything. */\n  if (0 != (MHD_TEST_ALLOW_SUSPEND_RESUME & daemon->options))\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"Resuming suspended connections (options=0x%08x)\\n\", (unsigned)daemon->options);\n      fflush(mhd_log);\n    }\n    resume_suspended_connections (daemon);\n  }\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"Calling close_all_connections\\n\");\n    fflush(mhd_log);\n  }\n  close_all_connections (daemon);\n\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"MHD_polling_thread EXIT\\n\\n\");\n    fclose(mhd_log);\n  }\n\n  return (MHD_THRD_RTRN_TYPE_) 0;\n}\n"
}