{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'param' is declared as 'struct MHD_named_helper_param_ *const' (pointer to a non-const object) but in the function it is used only for read access (param->name, param->arg, param->start_routine) before freeing the original void *data. According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. A compliant declaration would be: 'const struct MHD_named_helper_param_ *const param = data;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified named_thread_starter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of named_thread_starter:\n```c\nstatic MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n    return (MHD_THRD_RTRN_TYPE_) 0;\n\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n  free (data);\n\n  return thr_func (arg);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified named_thread_starter code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original named_thread_starter with it.\n  - Your function must have the exact same signature as named_thread_starter.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call named_thread_starter to check logs.\n  - Your function MUST preserve the original logic of named_thread_starter as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, named_thread_starter will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of named_thread_starter as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_\nnamed_thread_starter (void *data)\n{\n  FILE *logf = fopen(\"/tmp/logs/515.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"named_thread_starter: entered with data=%p\\n\", data);\n    fflush(logf);\n  }\n\n  struct MHD_named_helper_param_ *const param =\n    (struct MHD_named_helper_param_ *) data;\n  void *arg;\n  MHD_THREAD_START_ROUTINE_ thr_func;\n\n  if (NULL == data)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"named_thread_starter: data is NULL, returning 0\\n\");\n      fclose(logf);\n    }\n    return (MHD_THRD_RTRN_TYPE_) 0;\n  }\n\n  if (logf)\n  {\n    const char *nm = param->name ? param->name : \"<NULL>\";\n    fprintf(logf, \"named_thread_starter: param=%p, name=%s, arg=%p, start_routine_is_nonnull=%d\\n\",\n            (void *) param, nm, param->arg, (param->start_routine != (MHD_THREAD_START_ROUTINE_) 0) ? 1 : 0);\n    fflush(logf);\n  }\n\n  /* preserve original behavior */\n  MHD_set_cur_thread_name_ (param->name);\n\n  arg = param->arg;\n  thr_func = param->start_routine;\n\n  if (logf)\n  {\n    fprintf(logf, \"named_thread_starter: before free(data=%p). arg=%p\\n\", data, arg);\n    fflush(logf);\n  }\n\n  free (data);\n\n  if (logf)\n  {\n    fprintf(logf, \"named_thread_starter: after free(data). About to call thread routine (nonnull=%d) with arg=%p\\n\",\n            (thr_func != (MHD_THREAD_START_ROUTINE_) 0) ? 1 : 0, arg);\n    fflush(logf);\n  }\n\n  /* Call the thread routine and preserve return value to allow logging after it returns. */\n  MHD_THRD_RTRN_TYPE_ ret = thr_func (arg);\n\n  if (logf)\n  {\n    fprintf(logf, \"named_thread_starter: thread routine returned. Exiting named_thread_starter.\\n\");\n    fclose(logf);\n  }\n\n  return ret;\n}\n"
}