{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_shared_response:\n```c\nstatic enum MHD_Result\nanswer_shared_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  unsigned int resp_index;\n  static volatile unsigned int last_index = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  /* This kind of operation does not guarantee that numbers are not reused\n     in parallel threads, when processed simultaneously, but this should not\n     be a big problem, as it just slow down replies a bit due to\n     responses locking. */\n  resp_index = (last_index++) % num_resps;\n  return MHD_queue_response (connection, MHD_HTTP_OK, resps[resp_index]);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "(void) cls;  /* Unused */",
    "(void) upload_data; (void) upload_data_size; /* Unused */",
    "(void) url; (void) version; /* Unused */"
  ],
  "explanation": "The listed fragments are explicit no-op casts to void used to suppress \"unused parameter\" warnings; they are operations executed at runtime but have no effect on program behaviour and therefore meet the definition of dead code under Rule 2.2 and should be investigated.\n\nOther fragments in the function should NOT be investigated for dead-code under Rule 2.2 for these reasons:\n- \"if (NULL == *req_cls) { *req_cls = (void *) &marker; return MHD_YES; }\": This is the standard first-call handshake pattern (uses and updates *req_cls to track request state). Removing it would change behaviour (response timing/flow), so it is not dead.\n- \"static int marker = 0;\": The object\u2019s address (&marker) is used as a unique token stored in *req_cls; removing the variable or its definition would change program behaviour (token identity). Also, this is an initialization (note 3 of the rule) and not a candidate for dead-code elimination.\n- \"static volatile unsigned int last_index = 0;\" and \"resp_index = (last_index++) % num_resps;\": last_index is both read and updated to produce changing resp_index values; these operations affect the response selection and so are not dead. The volatile qualifier also indicates potential external observation/ordering concerns.\n- Method checks and the returned MHD_NO/MHD_YES/MHD_queue_response calls: these control program flow and produced responses; removing them would alter behaviour, so they are not dead code.\n\nNo unreachable-code patterns are evident; the only clear no-op operations are the void casts listed above."
}