{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nIf sizeof(uint64_t) is not greater than sizeof(off_t) (i.e. sizeof(uint64_t) <= sizeof(off_t)), the left operand (sizeof(uint64_t) > sizeof(off_t)) is a compile\u2011time constant false, which makes the whole if controlling expression a compile\u2011time invariant false (the right\u2011hand side is unreachable). That yields an invariant controlling expression and thus violates MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_fd_at_offset64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_from_fd_at_offset64 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_from_fd_at_offset64 with it.\n  - Your function must have the exact same signature as MHD_create_response_from_fd_at_offset64.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_from_fd_at_offset64 to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_from_fd_at_offset64 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n  /* Probe log: always record entry and key runtime information. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Entered MHD_create_response_from_fd_at_offset64: size=%llu, fd=%d, offset=%llu\\n\",\n              (unsigned long long) size, fd, (unsigned long long) offset);\n      fprintf(log, \"sizeof(uint64_t)=%zu, sizeof(off_t)=%zu\\n\",\n              sizeof(uint64_t), sizeof(off_t));\n      /* Evaluate a runtime mirror of the compile-time sizeof comparison for logging. */\n      int rt_left = (sizeof(uint64_t) > sizeof(off_t));\n      int rt_full = rt_left && (\n                      (size > (uint64_t) INT32_MAX) ||\n                      (offset > (uint64_t) INT32_MAX) ||\n                      ((size + offset) >= (uint64_t) INT32_MAX)\n                    );\n      fprintf(log, \"runtime: (sizeof(uint64_t) > sizeof(off_t)) = %d, runtime full condition = %d\\n\",\n              rt_left, rt_full);\n      fclose(log);\n    }\n  }\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n  {\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Compile-time guarded check triggered: returning NULL due to 32-bit off_t limit. size=%llu, offset=%llu, sizeof(uint64_t)=%zu, sizeof(off_t)=%zu\\n\",\n              (unsigned long long) size, (unsigned long long) offset,\n              sizeof(uint64_t), sizeof(off_t));\n      fclose(log);\n    }\n    return NULL;\n  }\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n  {\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Negative value detected after cast to int64_t: returning NULL. size=%llu, offset=%llu\\n\",\n              (unsigned long long) size, (unsigned long long) offset);\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n  {\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"MHD_create_response_from_callback returned NULL\\n\");\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n\n  {\n    FILE *log = fopen(\"/tmp/logs/2899.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"Response created: response=%p, fd=%d, fd_off=%llu\\n\",\n              (void *) response, response->fd, (unsigned long long) response->fd_off);\n      fclose(log);\n    }\n  }\n\n  return response;\n}\n"
}