{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWhen the conditional-compilation branch is included (HAVE___LSEEKI64 and HAVE_LSEEK64 not defined) and sizeof(off_t) is greater-than-or-equal-to sizeof(uint64_t) (for example on a 64-bit system where both are 8 bytes), the expression sizeof(uint64_t) > sizeof(off_t) is a compile-time constant false. Because of short-circuiting, the entire if condition becomes a compile-time false and the return NULL inside the if is unreachable in that built translation unit. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_fd_at_offset64 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2896.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_fd_at_offset64:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    return NULL;\n#endif\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    return NULL;\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    return NULL;\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n  return response;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_from_fd_at_offset64 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_from_fd_at_offset64 with it.\n  - Your function must have the exact same signature as MHD_create_response_from_fd_at_offset64.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_from_fd_at_offset64 to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_from_fd_at_offset64 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_from_fd_at_offset64 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_fd_at_offset64 (uint64_t size,\n                                         int fd,\n                                         uint64_t offset)\n{\n  struct MHD_Response *response;\n\n  /* Entry log: always write an entry so test harness can detect function was called. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n    if (logf)\n      {\n        fprintf(logf, \"ENTER MHD_create_response_from_fd_at_offset64: size=%llu, offset=%llu, fd=%d\\n\",\n                (unsigned long long) size, (unsigned long long) offset, fd);\n\n#if defined(HAVE___LSEEKI64)\n        fprintf(logf, \"Compile-time: HAVE___LSEEKI64 defined\\n\");\n#else\n        fprintf(logf, \"Compile-time: HAVE___LSEEKI64 NOT defined\\n\");\n#endif\n\n#if defined(HAVE_LSEEK64)\n        fprintf(logf, \"Compile-time: HAVE_LSEEK64 defined\\n\");\n#else\n        fprintf(logf, \"Compile-time: HAVE_LSEEK64 NOT defined\\n\");\n#endif\n\n        fprintf(logf, \"sizeof(uint64_t)=%zu, sizeof(off_t)=%zu, sizeof(int64_t)=%zu\\n\",\n                sizeof(uint64_t), sizeof(off_t), sizeof(int64_t));\n\n        /* Evaluate and log the component comparisons used in the conditional block. */\n        fprintf(logf, \"Eval: (sizeof(uint64_t) > sizeof(off_t)) = %d\\n\",\n                (int) (sizeof(uint64_t) > sizeof(off_t)));\n        fprintf(logf, \"Eval: size>INT32_MAX = %d, offset>INT32_MAX = %d, (size+offset)>=INT32_MAX = %d\\n\",\n                (int) (size > (uint64_t) INT32_MAX),\n                (int) (offset > (uint64_t) INT32_MAX),\n                (int) ((size + offset) >= (uint64_t) INT32_MAX));\n\n        fclose(logf);\n      }\n  }\n\n#if ! defined(HAVE___LSEEKI64) && ! defined(HAVE_LSEEK64)\n  if ( (sizeof(uint64_t) > sizeof(off_t)) &&\n       ( (size > (uint64_t) INT32_MAX) ||\n         (offset > (uint64_t) INT32_MAX) ||\n         ((size + offset) >= (uint64_t) INT32_MAX) ) )\n    {\n      /* Log the fact that we are returning NULL because of 32-bit off_t limits. */\n      FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n      if (logf)\n        {\n          fprintf(logf, \"BRANCH: 32-bit off_t check triggered - returning NULL\\n\");\n          fclose(logf);\n        }\n      return NULL;\n    }\n#endif\n\n  /* Log the negative (signed) checks before evaluating them. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n    if (logf)\n      {\n        fprintf(logf, \"Eval signed checks: (int64_t)size<0 = %d, (int64_t)offset<0 = %d, (int64_t)(size+offset)<0 = %d\\n\",\n                (int) (((int64_t) size) < 0),\n                (int) (((int64_t) offset) < 0),\n                (int) (((int64_t) (size + offset)) < 0));\n        fclose(logf);\n      }\n  }\n\n  if ( ((int64_t) size < 0) ||\n       ((int64_t) offset < 0) ||\n       ((int64_t) (size + offset) < 0) )\n    {\n      FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n      if (logf)\n        {\n          fprintf(logf, \"BRANCH: negative signed check triggered - returning NULL\\n\");\n          fclose(logf);\n        }\n      return NULL;\n    }\n\n  response = MHD_create_response_from_callback (size,\n                                                MHD_FILE_READ_BLOCK_SIZE,\n                                                &file_reader,\n                                                NULL,\n                                                &free_callback);\n  if (NULL == response)\n    {\n      FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n      if (logf)\n        {\n          fprintf(logf, \"MHD_create_response_from_callback returned NULL\\n\");\n          fclose(logf);\n        }\n      return NULL;\n    }\n\n  response->fd = fd;\n  response->is_pipe = false;\n  response->fd_off = offset;\n  response->crc_cls = response;\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/2896.txt\", \"a\");\n    if (logf)\n      {\n        fprintf(logf, \"EXIT: returning response=%p (fd=%d, off=%llu)\\n\",\n                (void *) response, fd, (unsigned long long) offset);\n        fclose(logf);\n      }\n  }\n\n  return response;\n}\n"
}