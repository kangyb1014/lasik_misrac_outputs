{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn MHD_select the value of the function parameter 'millisec' is assigned: if (MHD_NO != err_state) millisec = 0; \u2014 this modifies a function parameter (millisec), which violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_select code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3402.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_select:\n```c\nstatic enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n    return MHD_NO;\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n    millisec = 0;\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n    millisec = 0;\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  if (daemon->shutdown)\n    return MHD_NO;\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n    return (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n  return MHD_NO;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_select code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_select with it.\n  - Your function must have the exact same signature as MHD_select.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_select to check logs.\n  - Your function MUST preserve the original logic of MHD_select as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_select will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_select as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nMHD_select (struct MHD_Daemon *daemon,\n            int32_t millisec)\n{\n  int num_ready;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket maxsock;\n  struct timeval timeout;\n  struct timeval *tv;\n  int err_state;\n  MHD_socket ls;\n\n  /* Open log for tracing control flow/state for MISRA Rule 17.8 repro */\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"ENTER MHD_select: daemon=%p, initial_millisec=%d\\n\",\n              (void *) daemon, (int) millisec);\n      fclose(logf);\n    }\n  }\n\n  timeout.tv_sec = 0;\n  timeout.tv_usec = 0;\n  if (daemon->shutdown)\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT MHD_select: early shutdown -> return MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n  FD_ZERO (&rs);\n  FD_ZERO (&ws);\n  FD_ZERO (&es);\n  maxsock = MHD_INVALID_SOCKET;\n  err_state = MHD_NO;\n  if ( (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME)) &&\n       (MHD_NO != resume_suspended_connections (daemon)) &&\n       (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) )\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf,\n              \"BRANCH: suspend/resume triggered -> about to modify parameter millisec (was=%d)\\n\",\n              (int) millisec);\n      fclose(logf);\n    }\n    millisec = 0;\n    {\n      FILE *logf2 = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf2)\n      {\n        fprintf(logf2, \"STATE: millisec set to 0 after resume_suspended_connections branch\\n\");\n        fclose(logf2);\n      }\n    }\n  }\n\n  if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* single-threaded, go over everything */\n    if (MHD_NO ==\n        internal_get_fdset2 (daemon,\n                             &rs,\n                             &ws,\n                             &es,\n                             &maxsock,\n                             (int) FD_SETSIZE))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Could not obtain daemon fdsets.\\n\"));\n#endif\n      err_state = MHD_YES;\n      {\n        FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"STATE: internal_get_fdset2 failed -> err_state set to MHD_YES\\n\");\n          fclose(logf);\n        }\n      }\n    }\n  }\n  else\n  {\n    bool itc_added;\n    /* accept only, have one thread per connection */\n    itc_added = false;\n    if (MHD_ITC_IS_VALID_ (daemon->itc))\n    {\n      itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                      &rs,\n                                      &maxsock,\n                                      (int) FD_SETSIZE);\n      if (! itc_added)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon, _ (\"Could not add control inter-thread \" \\\n                             \"communication channel FD to fdset.\\n\"));\n#endif\n        err_state = MHD_YES;\n        {\n          FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n          if (logf)\n          {\n            fprintf(logf, \"STATE: could not add ITC FD -> err_state set to MHD_YES\\n\");\n            fclose(logf);\n          }\n        }\n      }\n    }\n    if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n         (! daemon->was_quiesced) )\n    {\n      /* Stop listening if we are at the configured connection limit */\n      /* If we're at the connection limit, no point in really\n         accepting new connections; however, make sure we do not miss\n         the shutdown OR the termination of an existing connection; so\n         only do this optimisation if we have a signaling ITC in\n         place. */\n      if (! itc_added ||\n          ((daemon->connections < daemon->connection_limit) &&\n           ! daemon->at_limit))\n      {\n        if (! MHD_add_to_fd_set_ (ls,\n                                  &rs,\n                                  &maxsock,\n                                  (int) FD_SETSIZE))\n        {\n#ifdef HAVE_MESSAGES\n          MHD_DLOG (daemon,\n                    _ (\"Could not add listen socket to fdset.\\n\"));\n#endif\n          err_state = MHD_YES;\n          {\n            FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n            if (logf)\n            {\n              fprintf(logf, \"STATE: could not add listen socket -> err_state set to MHD_YES\\n\");\n              fclose(logf);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (MHD_NO != err_state)\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BRANCH: err_state != MHD_NO (err_state=%d) -> about to modify parameter millisec (was=%d)\\n\",\n              err_state, (int) millisec);\n      fclose(logf);\n    }\n    millisec = 0;\n    {\n      FILE *logf2 = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf2)\n      {\n        fprintf(logf2, \"STATE: millisec set to 0 due to err_state != MHD_NO\\n\");\n        fclose(logf2);\n      }\n    }\n  }\n  if (0 == millisec)\n  {\n    timeout.tv_usec = 0;\n    timeout.tv_sec = 0;\n    tv = &timeout;\n    {\n      FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"BRANCH: timeout set to zero because millisec==0\\n\");\n        fclose(logf);\n      }\n    }\n  }\n  else\n  {\n    uint64_t mhd_tmo;\n    uint64_t select_tmo;\n\n    if ( (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon)) &&\n         (MHD_NO != MHD_get_timeout64 (daemon, &mhd_tmo)) )\n    {\n      if ( (0 < millisec) &&\n           (mhd_tmo > (uint64_t) millisec) )\n        select_tmo = (uint64_t) millisec;\n      else\n        select_tmo = mhd_tmo;\n      tv = &timeout; /* have timeout value */\n    }\n    else if (0 < millisec)\n    {\n      select_tmo = (uint64_t) millisec;\n      tv = &timeout; /* have timeout value */\n    }\n    else\n    {\n      select_tmo = 0; /* Not actually used, silent compiler warning */\n      tv = NULL;\n    }\n\n    if (NULL != tv)\n    { /* have timeout value */\n#if (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC\n      if (select_tmo / 1000 > TIMEVAL_TV_SEC_MAX)\n        timeout.tv_sec = TIMEVAL_TV_SEC_MAX;\n      else\n#endif /* (SIZEOF_UINT64_T - 2) >= SIZEOF_STRUCT_TIMEVAL_TV_SEC */\n      timeout.tv_sec = (_MHD_TIMEVAL_TV_SEC_TYPE) (select_tmo / 1000);\n\n      timeout.tv_usec = ((uint16_t) (select_tmo % 1000)) * ((int32_t) 1000);\n\n      {\n        FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"STATE: timeout prepared tv!=NULL select_tmo=%llu sec=%ld usec=%ld\\n\",\n                  (unsigned long long) select_tmo,\n                  (long) timeout.tv_sec,\n                  (long) timeout.tv_usec);\n          fclose(logf);\n        }\n      }\n    }\n    else\n    {\n      FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"STATE: tv==NULL -> blocking select (no timeout)\\n\");\n        fclose(logf);\n      }\n    }\n  }\n  num_ready = MHD_SYS_select_ (maxsock + 1,\n                               &rs,\n                               &ws,\n                               &es,\n                               tv);\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"AFTER select: num_ready=%d maxsock=%d tv=%p\\n\",\n              num_ready, (int) maxsock, (void *) tv);\n      fclose(logf);\n    }\n  }\n  if (daemon->shutdown)\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT MHD_select: shutdown after select -> return MHD_NO\\n\");\n      fclose(logf);\n    }\n    return MHD_NO;\n  }\n  if (num_ready < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      enum MHD_Result ret = (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n      FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"ERROR: select EINTR (err=%d) -> returning %d (err_state=%d)\\n\",\n                err, (int) ret, err_state);\n        fclose(logf);\n      }\n      return ret;\n    }\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"select failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    {\n      FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"ERROR: select failed (err=%d, str=%s) -> return MHD_NO\\n\",\n                err, MHD_socket_strerr_ (err));\n        fclose(logf);\n      }\n    }\n    return MHD_NO;\n  }\n  if (MHD_NO != internal_run_from_select (daemon,\n                                          &rs,\n                                          &ws,\n                                          &es,\n                                          (int) FD_SETSIZE))\n  {\n    enum MHD_Result ret = (MHD_NO == err_state) ? MHD_YES : MHD_NO;\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"AFTER internal_run_from_select: returning %d (err_state=%d)\\n\",\n              (int) ret, err_state);\n      fclose(logf);\n    }\n    return ret;\n  }\n  {\n    FILE *logf = fopen(\"/tmp/logs/3402.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EXIT MHD_select: default return MHD_NO\\n\");\n      fclose(logf);\n    }\n  }\n  return MHD_NO;\n}\n"
}