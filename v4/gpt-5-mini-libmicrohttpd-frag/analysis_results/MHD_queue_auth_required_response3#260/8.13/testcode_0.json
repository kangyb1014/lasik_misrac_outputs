{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf neither MHD_queue_auth_required_response3 nor the called function queue_auth_required_response3_inner (and any other callees) modify the object pointed to by response, then declaring the parameter as 'struct MHD_Response *response' fails to qualify the pointee as const and thus violates MISRA C 2023 Rule 8.13. In that case the parameter should be 'const struct MHD_Response *response'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_queue_auth_required_response3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_queue_auth_required_response3:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n  digest_deinit (&da);\n  if (NULL != buf_ptr)\n    free (buf_ptr);\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_queue_auth_required_response3 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_queue_auth_required_response3 with it.\n  - Your function must have the exact same signature as MHD_queue_auth_required_response3.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_queue_auth_required_response3 to check logs.\n  - Your function MUST preserve the original logic of MHD_queue_auth_required_response3 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_queue_auth_required_response3 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_queue_auth_required_response3 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n\n  /* Log entry and parameter/state snapshot */\n  {\n    FILE *log = fopen(\"/tmp/logs/3715.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ENTER MHD_queue_auth_required_response3\\n\");\n        fprintf(log, \"  connection=%p\\n\", (void *)connection);\n        fprintf(log, \"  realm=%s\\n\", realm ? realm : \"(null)\");\n        fprintf(log, \"  opaque=%s\\n\", opaque ? opaque : \"(null)\");\n        fprintf(log, \"  domain=%s\\n\", domain ? domain : \"(null)\");\n        fprintf(log, \"  response=%p\\n\", (void *)response);\n        fprintf(log, \"  signal_stale=%d\\n\", signal_stale);\n        fprintf(log, \"  mqop=%d\\n\", (int) mqop);\n        fprintf(log, \"  malgo3=%d\\n\", (int) malgo3);\n        fprintf(log, \"  userhash_support=%d\\n\", userhash_support);\n        fprintf(log, \"  prefer_utf8=%d\\n\", prefer_utf8);\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n\n  /* Log result of inner call and buffer pointer state */\n  {\n    FILE *log = fopen(\"/tmp/logs/3715.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"AFTER queue_auth_required_response3_inner\\n\");\n        fprintf(log, \"  ret=%d\\n\", (int) ret);\n        fprintf(log, \"  buf_ptr=%p\\n\", (void *) buf_ptr);\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  digest_deinit (&da);\n  if (NULL != buf_ptr)\n    {\n      FILE *log = fopen(\"/tmp/logs/3715.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"FREEING buf_ptr=%p\\n\", (void *) buf_ptr);\n          fflush(log);\n          fclose(log);\n        }\n      free (buf_ptr);\n    }\n\n  /* Final exit log */\n  {\n    FILE *log = fopen(\"/tmp/logs/3715.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"EXIT MHD_queue_auth_required_response3 ret=%d\\n\", (int) ret);\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  return ret;\n}\n"
}