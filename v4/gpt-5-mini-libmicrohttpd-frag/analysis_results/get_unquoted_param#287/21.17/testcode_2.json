{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: MHD_str_unquote(param->value.str, param->value.len, str) may internally call standard <string.h> functions (e.g. memcpy/strcpy/strncpy) and either read or write out of bounds. Example specific scenario: get_buffer_for_size returns a buffer of size param->value.len (N). If MHD_str_unquote does memcpy(str, param->value.str, N) and then appends a terminating '\\0' it writes N+1 bytes into an N-sized buffer (write out-of-bounds). Or if MHD_str_unquote uses strcpy on a non-NUL-terminated source it can read beyond param->value.str + param->value.len (read out-of-bounds). Because the callee\u2019s behavior and its use of standard string.h functions are not shown, this call can lead to accesses beyond object bounds and thus violates MISRA C 2023 Rule 21.17 unless MHD_str_unquote is proven to respect both source and destination bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3343.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_unquoted_param code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_unquoted_param with it.\n  - Your function must have the exact same signature as get_unquoted_param.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_unquoted_param to check logs.\n  - Your function MUST preserve the original logic of get_unquoted_param as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_unquoted_param will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_unquoted_param as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  FILE *logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER get_unquoted_param: param=%p, tmp1=%p, ptmp2=%p, ptmp2_size=%p\\n\",\n            (void *)param, (void *)tmp1, (void *)ptmp2, (void *)ptmp2_size);\n    if (param)\n    {\n      fprintf(logf, \"  param->value.str=%p, param->value.len=%zu, param->quoted=%d\\n\",\n              (void *)param->value.str, (size_t)param->value.len, (int)param->quoted);\n    }\n    fflush(logf);\n    fclose(logf);\n  }\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    /* Log the unquoted fast path */\n    logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"FAST PATH (not quoted): assigning unquoted->str=%p, unquoted->len=%zu\\n\",\n              (void *)param->value.str, (size_t)param->value.len);\n      fflush(logf);\n      fclose(logf);\n    }\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"QUOTED PATH: requesting buffer for size=%zu\\n\", (size_t)param->value.len);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  char *str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"get_buffer_for_size returned str=%p\\n\", (void *)str);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  if (NULL == str)\n  {\n    enum _MHD_GetUnqResult r = (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n    logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"BUFFER ALLOC FAIL: returning %d (value.len=%zu)\\n\",\n              (int)r, (size_t)param->value.len);\n      fflush(logf);\n      fclose(logf);\n    }\n    return r;\n  }\n\n  size_t len = MHD_str_unquote (param->value.str, param->value.len, str);\n  logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"MHD_str_unquote returned len=%zu, dest_str=%p\\n\", (size_t)len, (void *)str);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  logf = fopen(\"/tmp/logs/3343.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"EXIT get_unquoted_param: unquoted->str=%p, unquoted->len=%zu\\n\",\n            (void *)unquoted->str, (size_t)unquoted->len);\n    fflush(logf);\n    fclose(logf);\n  }\n\n  return _MHD_UNQ_OK;\n}\n"
}