{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert is implemented as a no-op in normal/release builds (for example it expands to ((void)0) when assertions are disabled), then the statement mhd_assert(NULL != param->value.str); is dead code: its removal would not affect program behaviour and thus violates MISRA C 2023 Rule 2.2. If, instead, mhd_assert has observable side-effects (logging, error handling, abort), then the call is not dead and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3348.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_unquoted_param code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_unquoted_param with it.\n  - Your function must have the exact same signature as get_unquoted_param.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_unquoted_param to check logs.\n  - Your function MUST preserve the original logic of get_unquoted_param as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_unquoted_param will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_unquoted_param as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  FILE *fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n  if (fp != NULL)\n  {\n    /* Log entry and key state without modifying behavior. */\n    fprintf(fp, \"ENTER get_unquoted_param: param=%p quoted=%d value.str=%p value.len=%zu tmp1=%p ptmp2=%p ptmp2_size=%p unquoted=%p\\n\",\n            (void *)param,\n            (int)(param ? param->quoted : 0),\n            (void *)(param ? param->value.str : NULL),\n            (size_t)(param ? param->value.len : 0u),\n            (void *)tmp1,\n            (void *)ptmp2,\n            (void *)ptmp2_size,\n            (void *)unquoted);\n    fprintf(fp, \"ABOUT TO CALL: mhd_assert(NULL != param->value.str)\\n\");\n    fclose(fp);\n  }\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    /* Log unquoted fast path */\n    fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n    if (fp != NULL)\n    {\n      fprintf(fp, \"FAST PATH (not quoted): setting unquoted->str=%p unquoted->len=%zu and returning _MHD_UNQ_OK\\n\",\n              (void *)param->value.str,\n              (size_t)param->value.len);\n      fclose(fp);\n    }\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp, \"QUOTED PATH: requesting buffer for size=%zu\\n\", (size_t)param->value.len);\n    fclose(fp);\n  }\n\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n  {\n    fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n    if (fp != NULL)\n    {\n      if (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n        fprintf(fp, \"ALLOCATION FAILED: requested size %zu > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE, returning _MHD_UNQ_TOO_LARGE\\n\", (size_t)param->value.len);\n      else\n        fprintf(fp, \"ALLOCATION FAILED: get_buffer_for_size returned NULL for size %zu, returning _MHD_UNQ_OUT_OF_MEM\\n\", (size_t)param->value.len);\n      fclose(fp);\n    }\n\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n  }\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n\n  fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp, \"AFTER UNQUOTE: allocated_buf=%p unquoted_len=%zu original_len=%zu\\n\",\n            (void *)str,\n            (size_t)unquoted->len,\n            (size_t)param->value.len);\n    fprintf(fp, \"ABOUT TO CALL: mhd_assert(0 != unquoted->len) and mhd_assert(unquoted->len < param->value.len)\\n\");\n    fclose(fp);\n  }\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  fp = fopen(\"/tmp/logs/3348.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp, \"RETURN _MHD_UNQ_OK: unquoted->str=%p unquoted->len=%zu\\n\", (void *)unquoted->str, (size_t)unquoted->len);\n    fclose(fp);\n  }\n\n  return _MHD_UNQ_OK;\n}\n"
}