{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the member param->value.str is declared as \"char *\" (non-const) even though get_unquoted_param treats it as read-only and passes it to MHD_str_unquote for input-only use. In that case the pointer should be declared as \"const char *\" (and MHD_str_unquote's source parameter should be const-qualified) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3345.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  char *str;\n  size_t len;\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  if (! param->quoted)\n  {\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  len = MHD_str_unquote (param->value.str, param->value.len, str);\n  unquoted->str = str;\n  unquoted->len = len;\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_unquoted_param code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_unquoted_param with it.\n  - Your function must have the exact same signature as get_unquoted_param.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_unquoted_param to check logs.\n  - Your function MUST preserve the original logic of get_unquoted_param as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_unquoted_param will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_unquoted_param as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_GetUnqResult\nget_unquoted_param (const struct MHD_RqDAuthParam *param,\n                    char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                    char **ptmp2,\n                    size_t *ptmp2_size,\n                    struct _MHD_str_w_len *unquoted)\n{\n  /* Preserve original assertions */\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Logging probe: append information about control flow and key state\n     to /tmp/logs/3345.txt so other agents can reproduce and inspect\n     the values that exercise the violation scenario. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3345.txt\", \"a\");\n    if (NULL != log)\n    {\n      /* Basic entry information */\n      fprintf(log, \"get_unquoted_param: entry\\n\");\n      fprintf(log, \"  param=%p\\n\", (const void *)param);\n      fprintf(log, \"  param->value.str=%p\\n\", (const void *)param->value.str);\n      fprintf(log, \"  param->value.len=%zu\\n\", param->value.len);\n      fprintf(log, \"  param->quoted=%d\\n\", (int)param->quoted);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  if (! param->quoted)\n  {\n    /* Log the fast path and resulting pointers/lengths */\n    {\n      FILE *log = fopen(\"/tmp/logs/3345.txt\", \"a\");\n      if (NULL != log)\n      {\n        fprintf(log, \"get_unquoted_param: not quoted - returning original buffer\\n\");\n        fprintf(log, \"  unquoted->str (will be) = %p\\n\", (const void *)param->value.str);\n        fprintf(log, \"  unquoted->len (will be) = %zu\\n\", param->value.len);\n        /* Try to print up to first 16 bytes (hex) for inspection; the buffer\n           may not be NUL-terminated, so print raw bytes. */\n        size_t i, limit = param->value.len < 16u ? param->value.len : 16u;\n        if (limit > 0u)\n        {\n          const unsigned char *bytes = (const unsigned char *)param->value.str;\n          fprintf(log, \"  sample bytes: \");\n          for (i = 0u; i < limit; ++i)\n            fprintf(log, \"%02X \", (unsigned)bytes[i]);\n          fprintf(log, \"\\n\");\n        }\n        fflush(log);\n        fclose(log);\n      }\n    }\n\n    unquoted->str = param->value.str;\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  char *str = get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len);\n  if (NULL == str)\n  {\n    /* Log allocation failure and reason */\n    FILE *log = fopen(\"/tmp/logs/3345.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"get_unquoted_param: get_buffer_for_size returned NULL\\n\");\n      fprintf(log, \"  requested len = %zu\\n\", param->value.len);\n#ifdef _MHD_AUTH_DIGEST_MAX_PARAM_SIZE\n      fprintf(log, \"  threshold _MHD_AUTH_DIGEST_MAX_PARAM_SIZE = %zu\\n\", (size_t)_MHD_AUTH_DIGEST_MAX_PARAM_SIZE);\n#endif\n      fflush(log);\n      fclose(log);\n    }\n\n    return (param->value.len > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n  }\n\n  /* Log that we obtained a buffer and the pointers involved */\n  {\n    FILE *log = fopen(\"/tmp/logs/3345.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"get_unquoted_param: buffer allocated\\n\");\n      fprintf(log, \"  dest buffer = %p\\n\", (const void *)str);\n      fprintf(log, \"  src param->value.str = %p\\n\", (const void *)param->value.str);\n      fprintf(log, \"  src len = %zu\\n\", param->value.len);\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  size_t len = MHD_str_unquote (param->value.str, param->value.len, str);\n\n  unquoted->str = str;\n  unquoted->len = len;\n\n  /* Log the result of unquoting including a sample of the output bytes */\n  {\n    FILE *log = fopen(\"/tmp/logs/3345.txt\", \"a\");\n    if (NULL != log)\n    {\n      fprintf(log, \"get_unquoted_param: after MHD_str_unquote\\n\");\n      fprintf(log, \"  returned len = %zu\\n\", len);\n      fprintf(log, \"  dest buffer = %p\\n\", (const void *)str);\n      size_t i, limit = len < 32u ? len : 32u;\n      if (limit > 0u)\n      {\n        const unsigned char *bytes = (const unsigned char *)str;\n        fprintf(log, \"  sample output bytes: \");\n        for (i = 0u; i < limit; ++i)\n          fprintf(log, \"%02X \", (unsigned)bytes[i]);\n        fprintf(log, \"\\n\");\n      }\n      /* Sanity checks logged as well */\n      fprintf(log, \"  assert unquoted->len != 0 -> %d\\n\", (int)(0 != unquoted->len));\n      fprintf(log, \"  assert unquoted->len < param->value.len -> %d\\n\", (int)(unquoted->len < param->value.len));\n      fflush(log);\n      fclose(log);\n    }\n  }\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n"
}