{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void) 0;' inside the if-block is executed when 'MHD_NO == new_connection_process_(daemon, c)'. It performs no observable action and can be removed without changing program behaviour (especially when HAVE_MESSAGES is not defined, the cast-to-void is the only statement in the block). Therefore it is an executed no-op and constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified new_connections_list_process_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1758.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of new_connections_list_process_:\n```c\nstatic void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n  (void) local_head; /* Mute compiler warning */\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n    DLL_remove (local_head,\n                local_tail,\n                c);\n    mhd_assert (daemon == c->daemon);\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      (void) 0;\n    }\n  } while (NULL != local_tail);\n\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified new_connections_list_process_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original new_connections_list_process_ with it.\n  - Your function must have the exact same signature as new_connections_list_process_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call new_connections_list_process_ to check logs.\n  - Your function MUST preserve the original logic of new_connections_list_process_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, new_connections_list_process_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of new_connections_list_process_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nnew_connections_list_process_ (struct MHD_Daemon *daemon)\n{\n  struct MHD_Connection *local_head;\n  struct MHD_Connection *local_tail;\n  FILE *log_file = NULL;\n\n  mhd_assert (daemon->have_new);\n  mhd_assert (MHD_D_IS_THREAD_SAFE_ (daemon));\n\n  /* Minimal entry log so tests can detect the function was entered. */\n  log_file = fopen(\"/tmp/logs/1758.txt\", \"a\");\n  if (log_file)\n  {\n    fprintf(log_file, \"ENTER new_connections_list_process_: daemon=%p, have_new=%d, thread_safe=%d\\n\",\n            (void *) daemon,\n            (int) daemon->have_new,\n            (int) MHD_D_IS_THREAD_SAFE_ (daemon));\n    fclose(log_file);\n    log_file = NULL;\n  }\n\n  /* Detach DL-list of new connections from the daemon for\n   * following local processing. */\n  MHD_mutex_lock_chk_ (&daemon->new_connections_mutex);\n  mhd_assert (NULL != daemon->new_connections_head);\n  local_head = daemon->new_connections_head;\n  local_tail = daemon->new_connections_tail;\n\n  /* Log head/tail pointers as seen under the mutex. */\n  log_file = fopen(\"/tmp/logs/1758.txt\", \"a\");\n  if (log_file)\n  {\n    fprintf(log_file, \"DETACH new connections: daemon=%p, head=%p, tail=%p\\n\",\n            (void *) daemon,\n            (void *) local_head,\n            (void *) local_tail);\n    fclose(log_file);\n    log_file = NULL;\n  }\n\n  daemon->new_connections_head = NULL;\n  daemon->new_connections_tail = NULL;\n  daemon->have_new = false;\n  MHD_mutex_unlock_chk_ (&daemon->new_connections_mutex);\n  (void) local_head; /* Mute compiler warning */\n\n  /* Process new connections in FIFO order. */\n  do\n  {\n    struct MHD_Connection *c;   /**< Currently processed connection */\n\n    c = local_tail;\n    DLL_remove (local_head,\n                local_tail,\n                c);\n\n    /* Log current connection being processed and new local_tail */\n    log_file = fopen(\"/tmp/logs/1758.txt\", \"a\");\n    if (log_file)\n    {\n      fprintf(log_file, \"PROCESS connection: c=%p, c->daemon=%p, new_local_tail=%p\\n\",\n              (void *) c,\n              (void *) (c ? c->daemon : NULL),\n              (void *) local_tail);\n      fclose(log_file);\n      log_file = NULL;\n    }\n\n    mhd_assert (daemon == c->daemon);\n    if (MHD_NO == new_connection_process_ (daemon, c))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to start serving new connection.\\n\"));\n#endif\n      /* Log the failure and whether HAVE_MESSAGES was available at compile time. */\n      log_file = fopen(\"/tmp/logs/1758.txt\", \"a\");\n      if (log_file)\n      {\n#ifdef HAVE_MESSAGES\n        fprintf(log_file, \"EVENT: new_connection_process_ returned MHD_NO for conn %p; HAVE_MESSAGES=1\\n\",\n                (void *) c);\n#else\n        fprintf(log_file, \"EVENT: new_connection_process_ returned MHD_NO for conn %p; HAVE_MESSAGES=0 (block contained only (void)0)\\n\",\n                (void *) c);\n#endif\n        fclose(log_file);\n        log_file = NULL;\n      }\n\n      (void) 0;\n    }\n  } while (NULL != local_tail);\n\n  /* Final exit log. */\n  log_file = fopen(\"/tmp/logs/1758.txt\", \"a\");\n  if (log_file)\n  {\n    fprintf(log_file, \"EXIT new_connections_list_process_: daemon=%p, done\\n\",\n            (void *) daemon);\n    fclose(log_file);\n    log_file = NULL;\n  }\n\n}\n"
}