{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression param->value.str is passed as a read-only string to an equality routine. If the struct member value.str is declared as a plain char * (not const char *), then the code is violating MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when it is only used for read access. Note: having the parameter declared as const struct MHD_RqDAuthParam * does not make the pointee type of the member const; the correct fix is to declare the member as const char * (or otherwise const-qualify the pointed-to type). If value.str is already declared const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_param_equal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1465.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified is_param_equal code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original is_param_equal with it.\n  - Your function must have the exact same signature as is_param_equal.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call is_param_equal to check logs.\n  - Your function MUST preserve the original logic of is_param_equal as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, is_param_equal will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of is_param_equal as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  /* Preserve original assertions */\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Open log file for appending probe information. Best-effort only. */\n  FILE *log = fopen(\"/tmp/logs/1465.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"is_param_equal entered: param=%p, param->value.str=%p, param->value.len=%zu, param->quoted=%d, str=%p, str_len=%zu\\n\",\n            (const void *)param,\n            (const void *)param->value.str,\n            (size_t)param->value.len,\n            (int)(param->quoted ? 1 : 0),\n            (const void *)str,\n            (size_t)str_len);\n    fflush(log);\n  }\n\n  if (param->quoted)\n  {\n    bool res = MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                           str, str_len);\n    if (log)\n    {\n      fprintf(log, \"branch: quoted -> result=%d\\n\", res ? 1 : 0);\n      fclose(log);\n    }\n    return res;\n  }\n\n  /* Non-quoted path: preserve original logic but capture intermediate state. */\n  bool len_equal = (str_len == param->value.len);\n  int cmp = 0;\n  if (str_len != 0)\n  {\n    /* memcmp is safe to call exactly as in original code */\n    cmp = memcmp (str, param->value.str, str_len);\n  }\n  bool res = len_equal && (0 == cmp);\n\n  if (log)\n  {\n    fprintf(log, \"branch: non-quoted -> len_equal=%d, memcmp=%d, result=%d\\n\",\n            (int)len_equal, cmp, res ? 1 : 0);\n    fclose(log);\n  }\n\n  return res;\n}\n"
}