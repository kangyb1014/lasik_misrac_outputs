{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the compared objects are C-style null-terminated strings. For example, if 'str' is a null-terminated string and 'str_len' was obtained via strlen(str) (or includes the terminating '\\0'), and param->value.str is also a null-terminated string, then using memcmp to compare them constitutes comparing null-terminated strings with memcmp and thus violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_param_equal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1464.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified is_param_equal code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original is_param_equal with it.\n  - Your function must have the exact same signature as is_param_equal.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call is_param_equal to check logs.\n  - Your function MUST preserve the original logic of is_param_equal as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, is_param_equal will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of is_param_equal as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  /* Preserve original assertions */\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* Open log file for appending. This captures control flow and state to help\n     reproduce the MISRA Rule 21.14 violation scenario. */\n  FILE *log = fopen(\"/tmp/logs/1464.txt\", \"a\");\n  if (log)\n    {\n      /* Basic entry log */\n      fprintf(log, \"is_param_equal ENTER: param=%p, param->value.str=%p, param->value.len=%zu, param->quoted=%d, str=%p, str_len=%zu\\n\",\n              (void *)param, (void *)param->value.str, param->value.len, (int)param->quoted, (const void *)str, str_len);\n\n      /* Heuristic checks for null-termination presence around the given lengths.\n         These checks help demonstrate the violation scenario where memcmp is\n         used on null-terminated C strings. We attempt to inspect the bytes\n         that are most relevant (the byte at index len and the last byte within\n         the provided length). These accesses mirror the expected test inputs\n         where strings are null-terminated and therefore are safe. */\n      if (str != NULL)\n        {\n          int str_last_is_nul = 0;\n          int str_at_len_is_nul = 0;\n          if (str_len > 0)\n            str_last_is_nul = (str[str_len - 1] == '\\0');\n          /* Accessing str[str_len] is valid when str is a C string whose\n             length (excluding terminator) equals str_len. This is the\n             scenario we are trying to capture; perform the check and log\n             the result. */\n          str_at_len_is_nul = (str[str_len] == '\\0');\n\n          fprintf(log, \"  str checks: last_byte_at_index_len-1_is_nul=%d, byte_at_index_len_is_nul=%d\\n\",\n                  str_last_is_nul, str_at_len_is_nul);\n        }\n      else\n        {\n          fprintf(log, \"  str checks: str is NULL\\n\");\n        }\n\n      if (param->value.str != NULL)\n        {\n          int val_last_is_nul = 0;\n          int val_at_len_is_nul = 0;\n          if (param->value.len > 0)\n            val_last_is_nul = (param->value.str[param->value.len - 1] == '\\0');\n          /* As above, attempting to read the byte at param->value.len is done\n             to detect a terminating '\\0' immediately after the provided\n             length (common when str_len == strlen(str) or value.len == strlen(value)). */\n          val_at_len_is_nul = (param->value.str[param->value.len] == '\\0');\n\n          fprintf(log, \"  param->value.str checks: last_byte_at_index_len-1_is_nul=%d, byte_at_index_len_is_nul=%d\\n\",\n                  val_last_is_nul, val_at_len_is_nul);\n        }\n      else\n        {\n          fprintf(log, \"  param->value.str is NULL (unexpected due to assert)\\n\");\n        }\n\n      fflush(log);\n    }\n\n  if (param->quoted)\n    {\n      bool qres = MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                              str, str_len);\n      if (log)\n        {\n          fprintf(log, \"  quoted path taken, quoted_compare_result=%d\\n\", (int)qres);\n          fclose(log);\n        }\n      return qres;\n    }\n\n  /* Non-quoted path: preserve original semantics while logging memcmp use.\n     We evaluate memcmp exactly as before to avoid changing program behavior. */\n  int memcmp_res = 0;\n  if (str_len > 0)\n    memcmp_res = memcmp (str, param->value.str, str_len);\n  else\n    memcmp_res = 0; /* when length is zero, memcmp(...,0) would be 0 */\n\n  bool result = ((str_len == param->value.len) && (0 == memcmp_res));\n\n  if (log)\n    {\n      fprintf(log, \"  non-quoted path taken, str_len==param->value.len?=%d, memcmp_res=%d, final_result=%d\\n\",\n              (int)(str_len == param->value.len), memcmp_res, (int)result);\n      fclose(log);\n    }\n\n  return result;\n}\n"
}