{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of find_entry_by_username:\n```c\nstatic struct UserEntry *\nfind_entry_by_username (const char *const username)\n{\n  size_t i;\n\n  for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n  {\n    struct UserEntry *entry;\n\n    entry = user_ids + i;\n    if (0 == strcmp (username, entry->username))\n      return entry;\n  }\n  return NULL;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nentry = user_ids + i;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The local pointer 'entry' is declared as 'struct UserEntry *entry' and is assigned from 'user_ids + i', but the function only reads the entry (uses strcmp on entry->username) and does not modify the pointed-to object. Therefore the pointer could and should be to a const-qualified type (e.g. 'const struct UserEntry *entry' and the function return type could be 'const struct UserEntry *'), so the current assignment causes a violation of MISRA C 2023 Rule 8.13. (If the function is intentionally designed to allow callers to modify the returned object, then a non-const pointer is required and no violation would occur.)"
}