{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of find_entry_by_username:\n```c\nstatic struct UserEntry *\nfind_entry_by_username (const char *const username)\n{\n  size_t i;\n\n  for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n  {\n    struct UserEntry *entry;\n\n    entry = user_ids + i;\n    if (0 == strcmp (username, entry->username))\n      return entry;\n  }\n  return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "struct UserEntry *entry;",
    "if (0 == strcmp (username, entry->username))",
    "entry = user_ids + i;",
    "static struct UserEntry *\nfind_entry_by_username (const char *const username)",
    "return entry;"
  ],
  "explanation": "Other fragments in the function do not need investigation for Rule 8.13: the loop index declaration and control (size_t i; for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)) involve no pointer types that could be const-qualified; the sizeof() expression is valid for array sizing and does not affect pointer qualification; the parameter username is already const-qualified (const char *const); and the return NULL; case does not involve pointer-to-object qualification. The listed fragments cover all locations in this function where non-const pointer types (or usage of pointer members) occur and therefore should be investigated for possible addition of const qualification."
}