{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment can constitute dead code if the mhd_assert macro has no observable side effects in the deployed build (for example it expands to ((void)0) or to an expression that only reads connection->sk_corked). In that case the executed assertion does not affect program behaviour and its removal would not change the program \u2014 a dead-code situation under MISRA C 2023 Rule 2.2. If, on the other hand, mhd_assert performs an action with observable effect (logging, aborting on failure, etc.), then it is not dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_send_setopt code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2998.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of post_send_setopt:\n```c\nstatic void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  if (_MHD_YES == connection->is_nonip)\n    return;\n  if (buffer_data)\n    return; /* Nothing to do after send(). */\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n    return; /* Data was pushed by TCP_NODELAY. */\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      if (zero_send_ (connection))\n        return; /* The data has been pushed by zero-send. */\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n        return; /* Data has been pushed by uncorking the socket. */\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        if (zero_send_ (connection))\n          return; /* The data has been pushed by zero-send. */\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n    return; /* Data was already pushed by send(). */\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    if (zero_send_ (connection))\n      return; /* The data has been pushed by zero-send. */\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  return;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified post_send_setopt code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original post_send_setopt with it.\n  - Your function must have the exact same signature as post_send_setopt.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call post_send_setopt to check logs.\n  - Your function MUST preserve the original logic of post_send_setopt as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, post_send_setopt will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of post_send_setopt as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  FILE *logf = fopen(\"/tmp/logs/2998.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER post_send_setopt: connection=%p push_data=%d plain_send_next=%d is_nonip=%d sk_corked=%d sk_nodelay=%d\\n\",\n            (void *)connection,\n            (int) push_data,\n            (int) plain_send_next,\n            (int) (connection ? connection->is_nonip : -1),\n            (int) (connection ? connection->sk_corked : -1),\n            (int) (connection ? connection->sk_nodelay : -1));\n    fflush(logf);\n  }\n\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  if (_MHD_YES == connection->is_nonip)\n  {\n    if (logf)\n      fprintf(logf, \"RETURN early: connection->is_nonip == _MHD_YES\\n\");\n    if (logf) fclose(logf);\n    return;\n  }\n  if (buffer_data)\n  {\n    if (logf)\n      fprintf(logf, \"RETURN early: buffer_data (not final piece)\\n\");\n    if (logf) fclose(logf);\n    return; /* Nothing to do after send(). */\n  }\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      if (logf)\n        fprintf(logf, \"RETURN: socket not corked and nodelay on -> data already pushed by send()\\n\");\n      if (logf) fclose(logf);\n      return; /* Data was already pushed by send(). */\n    }\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    {\n      int _res = MHD_connection_set_nodelay_state_ (connection, true);\n      if (logf)\n        fprintf(logf, \"call MHD_connection_set_nodelay_state_(..., true) returned %d\\n\", _res);\n      if (_res)\n      {\n        if (logf) fprintf(logf, \"RETURN: Data has been pushed by TCP_NODELAY.\\n\");\n        if (logf) fclose(logf);\n        return; /* Data has been pushed by TCP_NODELAY. */\n      }\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    {\n      int _res = MHD_connection_set_cork_state_ (connection, false);\n      if (logf)\n        fprintf(logf, \"call MHD_connection_set_cork_state_(..., false) returned %d\\n\", _res);\n      if (_res)\n      {\n        if (logf) fprintf(logf, \"RETURN: Data has been pushed by uncorking the socket.\\n\");\n        if (logf) fclose(logf);\n        return; /* Data has been pushed by uncorking the socket. */\n      }\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    {\n      int _res = MHD_connection_set_cork_state_ (connection, false);\n      if (logf)\n        fprintf(logf, \"call MHD_connection_set_cork_state_(..., false) returned %d\\n\", _res);\n      if (_res)\n      {\n        if (logf) fprintf(logf, \"RETURN: Data has been pushed by uncorking the socket.\\n\");\n        if (logf) fclose(logf);\n        return; /* Data has been pushed by uncorking the socket. */\n      }\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    {\n      int _res = MHD_connection_set_nodelay_state_ (connection, true);\n      if (logf)\n        fprintf(logf, \"call MHD_connection_set_nodelay_state_(..., true) returned %d\\n\", _res);\n      if (_res)\n      {\n        if (logf) fprintf(logf, \"RETURN: Data has been pushed by TCP_NODELAY.\\n\");\n        if (logf) fclose(logf);\n        return; /* Data has been pushed by TCP_NODELAY. */\n      }\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  {\n    int _res = MHD_connection_set_nodelay_state_ (connection, true);\n    if (logf) fprintf(logf, \"call MHD_connection_set_nodelay_state_(..., true) returned %d\\n\", _res);\n    if (_res)\n    {\n      if (logf) fprintf(logf, \"RETURN: Data was pushed by TCP_NODELAY.\\n\");\n      if (logf) fclose(logf);\n      return; /* Data was pushed by TCP_NODELAY. */\n    }\n  }\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  {\n    int _res = MHD_connection_set_cork_state_ (connection, false);\n    if (logf) fprintf(logf, \"call MHD_connection_set_cork_state_(..., false) returned %d\\n\", _res);\n    if (_res)\n    {\n      if (logf) fprintf(logf, \"RETURN: Data was pushed by uncorking the socket.\\n\");\n      if (logf) fclose(logf);\n      return; /* Data was pushed by uncorking the socket. */\n    }\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  {\n    int _res = MHD_connection_set_cork_state_ (connection, false);\n    if (logf) fprintf(logf, \"call MHD_connection_set_cork_state_(..., false) returned %d\\n\", _res);\n    if (_res)\n    {\n      if (logf) fprintf(logf, \"RETURN: Data was pushed by uncorking the socket.\\n\");\n      if (logf) fclose(logf);\n      return; /* Data was pushed by uncorking the socket. */\n    }\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (logf) fprintf(logf, \"RETURN: Socket remains corked, no way to push data\\n\");\n  if (logf) fclose(logf);\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      if (logf) fprintf(logf, \"RETURN: socket uncorked and nodelay on -> data already pushed by send()\\n\");\n      if (logf) fclose(logf);\n      return; /* Data was already pushed by send(). */\n    }\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    {\n      int _res = MHD_connection_set_nodelay_state_ (connection, true);\n      if (logf) fprintf(logf, \"call MHD_connection_set_nodelay_state_(..., true) returned %d\\n\", _res);\n      if (_res)\n      {\n        /* TCP_NODELAY has been set on uncorked socket.\n         * Use zero-send to push the data. */\n        int _zs = zero_send_ (connection);\n        if (logf) fprintf(logf, \"call zero_send_() returned %d\\n\", _zs);\n        if (_zs)\n        {\n          if (logf) fprintf(logf, \"RETURN: The data has been pushed by zero-send.\\n\");\n          if (logf) fclose(logf);\n          return; /* The data has been pushed by zero-send. */\n        }\n      }\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    {\n      int _res = MHD_connection_set_cork_state_ (connection, false);\n      if (logf) fprintf(logf, \"call MHD_connection_set_cork_state_(..., false) returned %d\\n\", _res);\n      if (_res)\n      {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n        /* FreeBSD kernel */\n        if (_MHD_OFF == old_cork_state)\n        {\n          if (logf) fprintf(logf, \"RETURN: Data has been pushed by uncorking the socket (old_cork_state was OFF).\\n\");\n          if (logf) fclose(logf);\n          return; /* Data has been pushed by uncorking the socket. */\n        }\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n        /* Unlikely to reach this code.\n         * The data should be pushed by uncorking (FreeBSD) or\n         * the socket should be uncorked before send(). */\n        if ((_MHD_ON == connection->sk_nodelay) ||\n            (MHD_connection_set_nodelay_state_ (connection, true)))\n        {\n          /* TCP_NODELAY is turned ON on uncorked socket.\n           * Use zero-send to push the data. */\n          int _zs = zero_send_ (connection);\n          if (logf) fprintf(logf, \"call zero_send_() returned %d\\n\", _zs);\n          if (_zs)\n          {\n            if (logf) fprintf(logf, \"RETURN: The data has been pushed by zero-send.\\n\");\n            if (logf) fclose(logf);\n            return; /* The data has been pushed by zero-send. */\n          }\n        }\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  if (logf) fprintf(logf, \"Branch: MHD_TCP_CORK_NOPUSH not defined -> corking not supported\\n\");\n  if (logf) fprintf(logf, \"About to call mhd_assert for sk_corked value %d\\n\", (int) connection->sk_corked);\n  if (logf) fflush(logf);\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (logf) fprintf(logf, \"After mhd_assert call\\n\");\n  if (logf) fflush(logf);\n  if (_MHD_ON == connection->sk_nodelay)\n  {\n    if (logf) fprintf(logf, \"RETURN: sk_nodelay already ON -> data pushed by send()\\n\");\n    if (logf) fclose(logf);\n    return; /* Data was already pushed by send(). */\n  }\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  {\n    int _res = MHD_connection_set_nodelay_state_ (connection, true);\n    if (logf) fprintf(logf, \"call MHD_connection_set_nodelay_state_(..., true) returned %d\\n\", _res);\n    if (_res)\n    {\n      /* TCP_NODELAY has been set.\n       * Use zero-send to push the data. */\n      int _zs = zero_send_ (connection);\n      if (logf) fprintf(logf, \"call zero_send_() returned %d\\n\", _zs);\n      if (_zs)\n      {\n        if (logf) fprintf(logf, \"RETURN: The data has been pushed by zero-send.\\n\");\n        if (logf) fclose(logf);\n        return; /* The data has been pushed by zero-send. */\n      }\n    }\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  if (logf) fprintf(logf, \"FINAL RETURN: Failed to push the data from buffers to the network.\\n\");\n  if (logf) fclose(logf);\n  return;\n}\n"
}