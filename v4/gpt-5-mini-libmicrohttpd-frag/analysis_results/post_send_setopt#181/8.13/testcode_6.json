{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf MHD_DLOG (or the _() macro) is declared to take a non-const char * (for example: void MHD_DLOG(struct MHD_Daemon *, char *, ...)) then passing the string literal (the result of _(...)) to a non-const pointer violates MISRA C 2023 Rule 8.13. The string literal should be treated as pointing to const char and the function prototype (and/or the _() macro) should accept a const char * to conform to the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified post_send_setopt code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2995.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of post_send_setopt:\n```c\nstatic void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  if (_MHD_YES == connection->is_nonip)\n    return;\n  if (buffer_data)\n    return; /* Nothing to do after send(). */\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    if (MHD_connection_set_cork_state_ (connection, false))\n      return; /* Data has been pushed by uncorking the socket. */\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n      return; /* Data has been pushed by TCP_NODELAY. */\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n    return; /* Data was pushed by TCP_NODELAY. */\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n    return; /* Data was pushed by uncorking the socket. */\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n      return; /* Data was already pushed by send(). */\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    if (MHD_connection_set_nodelay_state_ (connection, true))\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      if (zero_send_ (connection))\n        return; /* The data has been pushed by zero-send. */\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    if (MHD_connection_set_cork_state_ (connection, false))\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n        return; /* Data has been pushed by uncorking the socket. */\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        if (zero_send_ (connection))\n          return; /* The data has been pushed by zero-send. */\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n    return; /* Data was already pushed by send(). */\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  if (MHD_connection_set_nodelay_state_ (connection, true))\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    if (zero_send_ (connection))\n      return; /* The data has been pushed by zero-send. */\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  return;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified post_send_setopt code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original post_send_setopt with it.\n  - Your function must have the exact same signature as post_send_setopt.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call post_send_setopt to check logs.\n  - Your function MUST preserve the original logic of post_send_setopt as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, post_send_setopt will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of post_send_setopt as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\npost_send_setopt (struct MHD_Connection *connection,\n                  bool plain_send_next,\n                  bool push_data)\n{\n  /* Try to buffer data if not sending the final piece.\n   * Final piece is indicated by push_data == true. */\n  const bool buffer_data = (! push_data);\n\n  /* Basic entry log. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"post_send_setopt: entered connection=%p plain_send_next=%d push_data=%d buffer_data=%d\\n\",\n              (void *) connection, (int) plain_send_next, (int) push_data, (int) buffer_data);\n      if (connection)\n        fprintf(log, \"post_send_setopt: connection state is_nonip=%d sk_corked=%d sk_nodelay=%d daemon=%p\\n\",\n                (int) connection->is_nonip, (int) connection->sk_corked, (int) connection->sk_nodelay,\n                (void *) connection->daemon);\n      fclose(log);\n    }\n  }\n\n  if (_MHD_YES == connection->is_nonip)\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"post_send_setopt: early return - connection->is_nonip == _MHD_YES\\n\");\n      fclose(log);\n    }\n    return;\n  }\n  if (buffer_data)\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"post_send_setopt: early return - buffer_data == true (not final piece)\\n\");\n      fclose(log);\n    }\n    return; /* Nothing to do after send(). */\n  }\n\n#ifndef MHD_USE_MSG_MORE\n  (void) plain_send_next; /* Mute compiler warning */\n#endif /* ! MHD_USE_MSG_MORE */\n\n  /* Need to push data. */\n#ifdef MHD_TCP_CORK_NOPUSH\n#ifdef _MHD_CORK_RESET_PUSH_DATA_ALWAYS\n#ifdef _MHD_NODELAY_SET_PUSH_DATA_ALWAYS\n#ifdef MHD_USE_MSG_MORE\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"post_send_setopt: socket uncorked and nodelay ON -> data already pushed by send()\\n\");\n        fclose(log);\n      }\n      return; /* Data was already pushed by send(). */\n    }\n  }\n  /* This is Linux kernel. There are options:\n   * * Push the data by setting of TCP_NODELAY (without change\n   *   of the cork on the socket),\n   * * Push the data by resetting of TCP_CORK.\n   * The optimal choice depends on the next final send functions\n   * used on the same socket. If TCP_NODELAY wasn't set then push\n   * data by setting TCP_NODELAY (TCP_NODELAY will not be removed\n   * and is needed to push the data by send() without MSG_MORE).\n   * If send()/sendmsg() will be used next than push data by\n   * resetting of TCP_CORK so next send without MSG_MORE will push\n   * data to the network (without additional sys-call to push data).\n   * If next final send function will not support MSG_MORE (like\n   * sendfile() or TLS-connection) than push data by setting\n   * TCP_NODELAY so socket will remain corked (no additional\n   * sys-call before next send()). */\n  if ((_MHD_ON != connection->sk_nodelay) ||\n      (! plain_send_next))\n  {\n    int res_nodelay = MHD_connection_set_nodelay_state_ (connection, true);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"post_send_setopt: attempted set_nodelay -> returned %d\\n\", res_nodelay);\n        fclose(log);\n      }\n    }\n    if (res_nodelay)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: return after successful set_nodelay (data pushed)\\n\"); fclose(log); }\n      return; /* Data has been pushed by TCP_NODELAY. */\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n    int res_cork = MHD_connection_set_cork_state_ (connection, false);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"post_send_setopt: attempted set_cork(false) -> returned %d\\n\", res_cork);\n        fclose(log);\n      }\n    }\n    if (res_cork)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: return after successful uncork (data pushed)\\n\"); fclose(log); }\n      return; /* Data has been pushed by uncorking the socket. */\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n  else\n  {\n    int res_cork2 = MHD_connection_set_cork_state_ (connection, false);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"post_send_setopt: attempted set_cork(false) in else branch -> returned %d\\n\", res_cork2);\n        fclose(log);\n      }\n    }\n    if (res_cork2)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: return after successful uncork (data pushed) [else branch]\\n\"); fclose(log); }\n      return; /* Data has been pushed by uncorking the socket. */\n    }\n    /* Failed to uncork the socket.\n     * Really unlikely to happen on TCP connections. */\n    int res_nodelay2 = MHD_connection_set_nodelay_state_ (connection, true);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"post_send_setopt: attempted set_nodelay(true) after failed uncork -> returned %d\\n\", res_nodelay2);\n        fclose(log);\n      }\n    }\n    if (res_nodelay2)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: return after successful set_nodelay (data pushed) [else branch]\\n\"); fclose(log); }\n      return; /* Data has been pushed by TCP_NODELAY. */\n    }\n    /* Failed to set TCP_NODELAY for the socket.\n     * Really unlikely to happen on TCP connections. */\n\n    /* The socket cannot be uncorked, no way to push data */\n  }\n#else  /* ! MHD_USE_MSG_MORE */\n  /* Use setting of TCP_NODELAY here to avoid sys-call\n   * for corking the socket during sending of the next response. */\n  int res_nodelay3 = MHD_connection_set_nodelay_state_ (connection, true);\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: attempted set_nodelay (no MSG_MORE) -> returned %d\\n\", res_nodelay3); fclose(log); }\n  }\n  if (res_nodelay3)\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: return after successful set_nodelay (data pushed) [no MSG_MORE]\\n\"); fclose(log); }\n    return; /* Data was pushed by TCP_NODELAY. */\n  }\n  /* Failed to set TCP_NODELAY for the socket.\n   * Really unlikely to happen on TCP connections. */\n  int res_cork3 = MHD_connection_set_cork_state_ (connection, false);\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: attempted set_cork(false) (no MSG_MORE) -> returned %d\\n\", res_cork3); fclose(log); }\n  }\n  if (res_cork3)\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: return after successful uncork (data pushed) [no MSG_MORE]\\n\"); fclose(log); }\n    return; /* Data was pushed by uncorking the socket. */\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n\n  /* The socket remains corked, no way to push data */\n#endif /* ! MHD_USE_MSG_MORE */\n#else  /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n  if (MHD_connection_set_cork_state_ (connection, false))\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: uncork succeeded (branch !_MHD_NODELAY_SET_PUSH_DATA_ALWAYS) -> return\\n\"); fclose(log); }\n    return; /* Data was pushed by uncorking the socket. */\n  }\n  /* Failed to uncork the socket.\n   * Really unlikely to happen on TCP connections. */\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: uncork failed (branch !_MHD_NODELAY_SET_PUSH_DATA_ALWAYS) -> return (socket remains corked)\\n\"); fclose(log); }\n  }\n  return; /* Socket remains corked, no way to push data */\n#endif /* ! _MHD_NODELAY_SET_PUSH_DATA_ALWAYS */\n#else  /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n  /* This is a typical *BSD or Darwin kernel. */\n\n  if (_MHD_OFF == connection->sk_corked)\n  {\n    if (_MHD_ON == connection->sk_nodelay)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: uncorked and nodelay ON (BSD branch) -> return\\n\"); fclose(log); }\n      return; /* Data was already pushed by send(). */\n    }\n\n    /* Unlikely to reach this code.\n     * TCP_NODELAY should be turned on before send(). */\n    int res_nodelay4 = MHD_connection_set_nodelay_state_ (connection, true);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: attempted set_nodelay (BSD uncorked branch) -> returned %d\\n\", res_nodelay4); fclose(log); }\n    }\n    if (res_nodelay4)\n    {\n      /* TCP_NODELAY has been set on uncorked socket.\n       * Use zero-send to push the data. */\n      int res_zs = zero_send_ (connection);\n      {\n        FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n        if (log) { fprintf(log, \"post_send_setopt: attempted zero_send_ after set_nodelay -> returned %d\\n\", res_zs); fclose(log); }\n      }\n      if (res_zs)\n      {\n        FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n        if (log) { fprintf(log, \"post_send_setopt: return after successful zero_send_ (data pushed)\\n\"); fclose(log); }\n        return; /* The data has been pushed by zero-send. */\n      }\n    }\n\n    /* Failed to push the data by all means. */\n    /* There is nothing left to try. */\n  }\n  else\n  {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n    enum MHD_tristate old_cork_state = connection->sk_corked;\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n    /* The socket is corked or cork state is unknown. */\n\n    int res_cork4 = MHD_connection_set_cork_state_ (connection, false);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: attempted set_cork(false) (BSD corked branch) -> returned %d\\n\", res_cork4); fclose(log); }\n    }\n    if (res_cork4)\n    {\n#ifdef _MHD_CORK_RESET_PUSH_DATA\n      /* FreeBSD kernel */\n      if (_MHD_OFF == old_cork_state)\n      {\n        FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n        if (log) { fprintf(log, \"post_send_setopt: old_cork_state was OFF -> return (data pushed by uncorking)\\n\"); fclose(log); }\n        return; /* Data has been pushed by uncorking the socket. */\n      }\n#endif /* _MHD_CORK_RESET_PUSH_DATA */\n\n      /* Unlikely to reach this code.\n       * The data should be pushed by uncorking (FreeBSD) or\n       * the socket should be uncorked before send(). */\n      if ((_MHD_ON == connection->sk_nodelay) ||\n          (MHD_connection_set_nodelay_state_ (connection, true)))\n      {\n        /* TCP_NODELAY is turned ON on uncorked socket.\n         * Use zero-send to push the data. */\n        int res_zs2 = zero_send_ (connection);\n        {\n          FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n          if (log) { fprintf(log, \"post_send_setopt: attempted zero_send_ after uncork and nodelay path -> returned %d\\n\", res_zs2); fclose(log); }\n        }\n        if (res_zs2)\n        {\n          FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n          if (log) { fprintf(log, \"post_send_setopt: return after successful zero_send_ (data pushed) [BSD uncorked path]\\n\"); fclose(log); }\n          return; /* The data has been pushed by zero-send. */\n        }\n      }\n    }\n    /* The socket remains corked. Data cannot be pushed. */\n  }\n#endif /* ! _MHD_CORK_RESET_PUSH_DATA_ALWAYS */\n#else  /* ! MHD_TCP_CORK_NOPUSH */\n  /* Corking is not supported. Buffering is controlled\n   * by TCP_NODELAY only. */\n  mhd_assert (_MHD_ON != connection->sk_corked);\n  if (_MHD_ON == connection->sk_nodelay)\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: nodelay already ON and corking not supported -> return\\n\"); fclose(log); }\n    return; /* Data was already pushed by send(). */\n  }\n\n  /* Unlikely to reach this code.\n   * TCP_NODELAY should be turned on before send(). */\n  int res_nodelay5 = MHD_connection_set_nodelay_state_ (connection, true);\n  {\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log) { fprintf(log, \"post_send_setopt: attempted set_nodelay (no cork support) -> returned %d\\n\", res_nodelay5); fclose(log); }\n  }\n  if (res_nodelay5)\n  {\n    /* TCP_NODELAY has been set.\n     * Use zero-send to push the data. */\n    int res_zs3 = zero_send_ (connection);\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: attempted zero_send_ after set_nodelay (no cork support) -> returned %d\\n\", res_zs3); fclose(log); }\n    }\n    if (res_zs3)\n    {\n      FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n      if (log) { fprintf(log, \"post_send_setopt: return after successful zero_send_ (data pushed) [no cork support]\\n\"); fclose(log); }\n      return; /* The data has been pushed by zero-send. */\n    }\n  }\n\n  /* Failed to push the data. */\n#endif /* ! MHD_TCP_CORK_NOPUSH */\n#ifdef HAVE_MESSAGES\n  /* Log about to call MHD_DLOG with string literal result to capture pointer/value for violation tracing. */\n  {\n    const char *probe_msg = _ (\"Failed to push the data from buffers to the network. \"\n                              \"Client may experience some delay \"\n                              \"(usually in range 200ms - 5 sec).\\n\");\n    FILE *log = fopen(\"/tmp/logs/2995.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"post_send_setopt: about to call MHD_DLOG; probe_msg_ptr=%p probe_msg=\");\n      /* Print message content safely (truncate long content). */\n      {\n        const char *p = probe_msg;\n        int count = 0;\n        while (p && *p && (count < 200)) { fputc(*p++, log); count++; }\n        if (p && *p) fputs(\"...\", log);\n      }\n      fputs(\"\\n\", log);\n      fclose(log);\n    }\n  }\n  MHD_DLOG (connection->daemon,\n            _ (\"Failed to push the data from buffers to the network. \"\n               \"Client may experience some delay \"\n               \"(usually in range 200ms - 5 sec).\\n\"));\n#endif /* HAVE_MESSAGES */\n  return;\n}\n"
}