{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses pos->header (and similarly pos->value) as the source argument to memcpy. If the struct member is declared as char *header (non-const), that violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type when the pointed-to data is not modified. Here the header string is only read (copied), so it should be declared const char *header (and const char *value). Fix: change MHD_HTTP_Res_Header members to const-qualified pointer types (e.g. const char *header, const char *value).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1285.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified build_connection_chunked_response_footer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original build_connection_chunked_response_footer with it.\n  - Your function must have the exact same signature as build_connection_chunked_response_footer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call build_connection_chunked_response_footer to check logs.\n  - Your function MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, build_connection_chunked_response_footer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Open log file early so we can record control flow and state on all exits. */\n  FILE *log = NULL;\n  log = fopen(\"/tmp/logs/1285.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER build_connection_chunked_response_footer: connection=%p\\n\", (void *)connection);\n  }\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  if (log)\n    fprintf(log, \"after connection_maximize_write_buffer: buf_size=%zu, write_buffer=%p, write_buffer_append_offset=%zu\\n\",\n            buf_size, (void *)c->write_buffer, (size_t)c->write_buffer_append_offset);\n\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    if (log)\n    {\n      fprintf(log, \"buf_size < 5 -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (log)\n    fprintf(log, \"initial chunk header written: buf=%p, used_size=%zu\\n\", (void *)buf, used_size);\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (log)\n      fprintf(log, \"iter header: pos=%p, kind=%d, header_size=%zu, value_size=%zu, header_ptr=%p, value_ptr=%p\\n\",\n              (void *)pos, (int)pos->kind, pos->header_size, pos->value_size,\n              (void *)pos->header, (void *)pos->value);\n\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (log)\n        fprintf(log, \"footer candidate: new_used_size=%zu, buf_size=%zu\\n\", new_used_size, buf_size);\n      if (new_used_size > buf_size)\n      {\n        if (log)\n        {\n          fprintf(log, \"not enough buffer for footer -> returning MHD_NO\\n\");\n          fclose(log);\n        }\n        return MHD_NO;\n      }\n\n      /* Log header and value content (not NUL-terminated necessarily). */\n      if (log)\n      {\n        /* Print up to a reasonable maximum to avoid huge logs. */\n        size_t max_print = 256;\n        size_t hlen = pos->header_size > max_print ? max_print : pos->header_size;\n        size_t vlen = pos->value_size > max_print ? max_print : pos->value_size;\n        fprintf(log, \"copying header (len=%zu): '%.*s'%s\\n\", pos->header_size, (int)hlen, pos->header,\n                pos->header_size > max_print ? \"...(truncated)\" : \"\");\n        fprintf(log, \"copying value  (len=%zu): '%.*s'%s\\n\", pos->value_size, (int)vlen, pos->value,\n                pos->value_size > max_print ? \"...(truncated)\" : \"\");\n      }\n\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n\n      if (log)\n        fprintf(log, \"after copying footer: used_size=%zu, expected_new_used_size=%zu\\n\", used_size, new_used_size);\n\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    if (log)\n    {\n      fprintf(log, \"not enough buffer for trailing CRLF -> returning MHD_NO\\n\");\n      fclose(log);\n    }\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  if (log)\n    fprintf(log, \"final footer written: used_size=%zu, buf_size=%zu\\n\", used_size, buf_size);\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  if (log)\n  {\n    fprintf(log, \"exiting build_connection_chunked_response_footer -> MHD_YES, new write_buffer_append_offset=%zu\\n\",\n            c->write_buffer_append_offset);\n    fclose(log);\n  }\n\n  return MHD_YES;\n}\n"
}