{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes buf = c->write_buffer + c->write_buffer_append_offset without an explicit check that write_buffer_append_offset is within the allocated write_buffer. If write_buffer_append_offset > c->write_buffer_size (or otherwise points past the end of the allocated buffer) then buf will point outside the object and the subsequent memcpy/memset writes (used later in the function) can write beyond the bounds of the buffer, violating MISRA C 2023 Rule 21.17. Note: the code relies on connection_maximize_write_buffer and debug-only mhd_assert checks to prevent this, but those are not guaranteed at all times, so a concrete out\u2011of\u2011bounds scenario is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_connection_chunked_response_footer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of build_connection_chunked_response_footer:\n```c\nstatic enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n    return MHD_NO;\n  mhd_assert (NULL != c->write_buffer);\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n  {\n    if (MHD_FOOTER_KIND == pos->kind)\n    {\n      size_t new_used_size; /* resulting size with this header */\n      /* '4' is colon, space, linefeeds */\n      new_used_size = used_size + pos->header_size + pos->value_size + 4;\n      if (new_used_size > buf_size)\n        return MHD_NO;\n      memcpy (buf + used_size, pos->header, pos->header_size);\n      used_size += pos->header_size;\n      buf[used_size++] = ':';\n      buf[used_size++] = ' ';\n      memcpy (buf + used_size, pos->value, pos->value_size);\n      used_size += pos->value_size;\n      buf[used_size++] = '\\r';\n      buf[used_size++] = '\\n';\n      mhd_assert (used_size == new_used_size);\n    }\n  }\n  if (used_size + 2 > buf_size)\n    return MHD_NO;\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified build_connection_chunked_response_footer code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original build_connection_chunked_response_footer with it.\n  - Your function must have the exact same signature as build_connection_chunked_response_footer.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call build_connection_chunked_response_footer to check logs.\n  - Your function MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, build_connection_chunked_response_footer will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of build_connection_chunked_response_footer as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nbuild_connection_chunked_response_footer (struct MHD_Connection *connection)\n{\n  char *buf;           /**< the buffer to write footers to */\n  size_t buf_size;     /**< the size of the @a buf */\n  size_t used_size;    /**< the used size of the @a buf */\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_HTTP_Res_Header *pos;\n\n  /* Open log file for probes. We do not depend on success of logging. */\n  FILE *mhd_log = fopen(\"/tmp/logs/1283.txt\", \"a\");\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"enter: build_connection_chunked_response_footer\\n\");\n    fprintf(mhd_log, \"connection=%p, state=%d, chunked=%d, response=%p\\n\",\n            (void *)connection,\n            (int)connection->state,\n            (int)connection->rp.props.chunked,\n            (void *)connection->rp.response);\n    fflush(mhd_log);\n  }\n\n  mhd_assert (connection->rp.props.chunked);\n  /* TODO: allow combining of the final footer with the last chunk,\n   * modify the next assert. */\n  mhd_assert (MHD_CONNECTION_CHUNKED_BODY_SENT == connection->state);\n  mhd_assert (NULL != c->rp.response);\n\n  buf_size = connection_maximize_write_buffer (c);\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"after maximize: buf_size=%zu\\n\", buf_size);\n    fflush(mhd_log);\n  }\n  /* '5' is the minimal size of chunked footer (\"0\\r\\n\\r\\n\") */\n  if (buf_size < 5)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"early return: buf_size < 5 (%zu)\\n\", buf_size);\n      fclose(mhd_log);\n    }\n    return MHD_NO;\n  }\n  mhd_assert (NULL != c->write_buffer);\n\n  /* Compute pointer where to append, and log current buffer state. */\n  buf = c->write_buffer + c->write_buffer_append_offset;\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"write_buffer=%p, write_buffer_append_offset=%zu, write_buffer_size=%zu, buf=%p\\n\",\n            (void *)c->write_buffer,\n            (size_t)c->write_buffer_append_offset,\n            (size_t)c->write_buffer_size,\n            (void *)buf);\n    /* Check and explicitly log suspicious condition that could lead to out-of-bounds. */\n    if (c->write_buffer_append_offset > c->write_buffer_size)\n      fprintf(mhd_log, \"WARNING: append_offset (%zu) > write_buffer_size (%zu)\\n\",\n              (size_t)c->write_buffer_append_offset, (size_t)c->write_buffer_size);\n    else\n      fprintf(mhd_log, \"append_offset within write_buffer bounds (<= write_buffer_size).\\n\");\n    fflush(mhd_log);\n  }\n\n  mhd_assert (NULL != buf);\n  used_size = 0;\n  buf[used_size++] = '0';\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  {\n    size_t header_index = 0;\n    for (pos = c->rp.response->first_header; NULL != pos; pos = pos->next)\n    {\n      if (MHD_FOOTER_KIND == pos->kind)\n      {\n        size_t new_used_size; /* resulting size with this header */\n        /* '4' is colon, space, linefeeds */\n        new_used_size = used_size + pos->header_size + pos->value_size + 4;\n        if (mhd_log)\n        {\n          fprintf(mhd_log, \"header[%zu]: kind=%d, header_size=%zu, value_size=%zu, computed_new_used_size=%zu, buf_size=%zu\\n\",\n                  header_index, (int)pos->kind, pos->header_size, pos->value_size, new_used_size, buf_size);\n          fflush(mhd_log);\n        }\n        if (new_used_size > buf_size)\n        {\n          if (mhd_log)\n          {\n            fprintf(mhd_log, \"early return: not enough space for header[%zu], new_used_size=%zu > buf_size=%zu\\n\",\n                    header_index, new_used_size, buf_size);\n            fclose(mhd_log);\n          }\n          return MHD_NO;\n        }\n        memcpy (buf + used_size, pos->header, pos->header_size);\n        used_size += pos->header_size;\n        buf[used_size++] = ':';\n        buf[used_size++] = ' ';\n        memcpy (buf + used_size, pos->value, pos->value_size);\n        used_size += pos->value_size;\n        buf[used_size++] = '\\r';\n        buf[used_size++] = '\\n';\n        mhd_assert (used_size == new_used_size);\n        if (mhd_log)\n        {\n          fprintf(mhd_log, \"after header[%zu]: used_size=%zu (expected %zu)\\n\",\n                  header_index, used_size, new_used_size);\n          fflush(mhd_log);\n        }\n        header_index++;\n      }\n    }\n  }\n  if (used_size + 2 > buf_size)\n  {\n    if (mhd_log)\n    {\n      fprintf(mhd_log, \"early return: not enough space for final CRLF, used_size=%zu, buf_size=%zu\\n\",\n              used_size, buf_size);\n      fclose(mhd_log);\n    }\n    return MHD_NO;\n  }\n  buf[used_size++] = '\\r';\n  buf[used_size++] = '\\n';\n\n  c->write_buffer_append_offset += used_size;\n  if (mhd_log)\n  {\n    fprintf(mhd_log, \"updated append_offset=%zu, write_buffer_size=%zu\\n\",\n            (size_t)c->write_buffer_append_offset, (size_t)c->write_buffer_size);\n    if (c->write_buffer_append_offset > c->write_buffer_size)\n      fprintf(mhd_log, \"ASSERT-VIOLATION-LIKELY: append_offset (%zu) > write_buffer_size (%zu) after update\\n\",\n              (size_t)c->write_buffer_append_offset, (size_t)c->write_buffer_size);\n    else\n      fprintf(mhd_log, \"append_offset ok after update (<= write_buffer_size).\\n\");\n    fflush(mhd_log);\n    fclose(mhd_log);\n  }\n\n  mhd_assert (c->write_buffer_append_offset <= c->write_buffer_size);\n\n  return MHD_YES;\n}\n"
}