{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the code is built with MHD_FAVOR_SMALL_CODE defined (so the early \"if (0 == length) return;\" shortcut is omitted) and MHD_MD5_update() is called with length == 0, the statement ctx->count += length is executed but adds zero and has no effect. Removing that statement would not change program behaviour in that case, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/318.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_MD5_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_MD5_update with it.\n  - Your function must have the exact same signature as MHD_MD5_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_MD5_update to check logs.\n  - Your function MUST preserve the original logic of MHD_MD5_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_MD5_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  FILE *log = fopen(\"/tmp/logs/318.txt\", \"a\");\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_MD5_update: early return due to length==0 (MHD_FAVOR_SMALL_CODE not defined). ctx=%p\\n\", (void *)ctx);\n      fclose(log);\n    }\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  if (log)\n  {\n    fprintf(log, \"MHD_MD5_update: enter ctx=%p data=%p length=%llu\\n\",\n            (void *)ctx, (const void *)data, (unsigned long long) length);\n  }\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  if (log)\n    fprintf(log, \"MHD_MD5_update: ctx->count before = %llu\\n\", (unsigned long long) ctx->count);\n\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n\n  if (log)\n    fprintf(log, \"MHD_MD5_update: computed bytes_have = %u\\n\", bytes_have);\n\n  /* Capture the scenario of interest: adding zero when length == 0 (occurs when\n     MHD_FAVOR_SMALL_CODE is defined and we didn't early-return). We log before\n     and after updating ctx->count so callers can see whether the addition\n     actually changes state. */\n  if (log)\n    fprintf(log, \"MHD_MD5_update: about to add length=%llu to ctx->count=%llu\\n\",\n            (unsigned long long) length, (unsigned long long) ctx->count);\n\n  ctx->count += length;\n\n  if (log)\n    fprintf(log, \"MHD_MD5_update: ctx->count after = %llu\\n\", (unsigned long long) ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (log)\n      fprintf(log, \"MHD_MD5_update: bytes_have != 0, bytes_left=%u, length=%llu\\n\",\n              bytes_left, (unsigned long long) length);\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      if (log)\n        fprintf(log, \"MHD_MD5_update: taking branch: length >= bytes_left (will fill buffer and transform)\\n\");\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n      if (log)\n        fprintf(log, \"MHD_MD5_update: after filling buffer, length now=%llu, bytes_have=%u\\n\",\n                (unsigned long long) length, bytes_have);\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"MHD_MD5_update: taking branch: length < bytes_left (will copy to buffer only)\\n\");\n    }\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"MHD_MD5_update: bytes_have == 0 (no partial data in buffer)\\n\");\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    if (log)\n      fprintf(log, \"MHD_MD5_update: processing full block directly, remaining length=%llu\\n\",\n              (unsigned long long) length);\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log)\n      fprintf(log, \"MHD_MD5_update: copying incomplete block of length=%llu to buffer at offset=%u\\n\",\n              (unsigned long long) length, bytes_have);\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"MHD_MD5_update: no remaining bytes to copy (length==0)\\n\");\n  }\n\n  if (log)\n  {\n    fprintf(log, \"MHD_MD5_update: exit ctx=%p final ctx->count=%llu\\n\",\n            (void *)ctx, (unsigned long long) ctx->count);\n    fclose(log);\n  }\n}\n"
}