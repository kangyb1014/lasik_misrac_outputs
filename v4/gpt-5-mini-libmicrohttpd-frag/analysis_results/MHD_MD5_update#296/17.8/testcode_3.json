{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'data' (declared as const uint8_t *data) is modified by the statement 'data += MD5_BLOCK_SIZE;'. This changes the pointer parameter itself, which violates MISRA C 2023 Rule 17.8 (the pointer object may be used to access/modifiy the pointee, but the parameter pointer shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_MD5_update code that contains useful probe functions that print useful logs to a file \"/tmp/logs/312.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_MD5_update:\n```c\nvoid\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  ctx->count += length;\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      md5_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (MD5_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    md5_transform (ctx->H, data);\n    data += MD5_BLOCK_SIZE;\n    length -= MD5_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_MD5_update code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_MD5_update with it.\n  - Your function must have the exact same signature as MHD_MD5_update.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_MD5_update to check logs.\n  - Your function MUST preserve the original logic of MHD_MD5_update as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_MD5_update will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_MD5_update as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void\nMHD_MD5_update (struct Md5Ctx *ctx,\n                const uint8_t *data,\n                size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  FILE *log = fopen(\"/tmp/logs/312.txt\", \"a\");\n\n  if (log != NULL)\n  {\n    fprintf(log, \"ENTER MHD_MD5_update: ctx=%p, data=%p, length=%zu, ctx->count=%llu\\n\",\n            (void *)ctx, (void *)data, length, (unsigned long long)ctx->count);\n  }\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n  {\n    if (log != NULL)\n      fprintf(log, \"EARLY RETURN: length==0\\n\");\n    if (log != NULL) fclose(log);\n    return; /* Shortcut, do nothing */\n  }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (MD5_BLOCK_SIZE-1))\n           equals (count % MD5_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (MD5_BLOCK_SIZE - 1));\n  if (log != NULL)\n    fprintf(log, \"BEFORE COUNT INC: bytes_have=%u, ctx->count(before)=%llu\\n\",\n            bytes_have, (unsigned long long)ctx->count);\n\n  ctx->count += length;\n\n  if (log != NULL)\n    fprintf(log, \"AFTER COUNT INC: ctx->count(after)=%llu\\n\",\n            (unsigned long long)ctx->count);\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = MD5_BLOCK_SIZE - bytes_have;\n    if (log != NULL)\n      fprintf(log, \"INCOMPLETE BUFFER PATH: bytes_have=%u, bytes_left=%u, length=%zu, data=%p\\n\",\n              bytes_have, bytes_left, length, (void *)data);\n\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      if (log != NULL)\n        fprintf(log, \"COMBINING: memcpy to buffer at offset %u from data=%p, bytes=%u\\n\",\n                bytes_have, (void *)data, bytes_left);\n\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n\n      if (log != NULL)\n        fprintf(log, \"AFTER MEMCPY (before pointer adjust): data=%p, length=%zu\\n\",\n                (void *)data, length);\n\n      data += bytes_left; /* <-- pointer parameter modified (reproduces reported violation) */\n      length -= bytes_left;\n\n      if (log != NULL)\n        fprintf(log, \"AFTER POINTER ADJUST: data=%p, length=%zu\\n\",\n                (void *)data, length);\n\n      md5_transform (ctx->H, ctx->buffer);\n      if (log != NULL)\n        fprintf(log, \"AFTER md5_transform on buffer; bytes_have set to 0\\n\");\n\n      bytes_have = 0;\n    }\n    else\n    {\n      if (log != NULL)\n        fprintf(log, \"NOT ENOUGH DATA TO COMPLETE BLOCK: need=%u, have=%zu\\n\",\n                bytes_left, length);\n    }\n  }\n\n  {\n    unsigned int loop_count = 0U;\n    while (MD5_BLOCK_SIZE <= length)\n    {   /* Process any full blocks of new data directly,\n           without copying to the buffer. */\n      if (log != NULL)\n        fprintf(log, \"WHILE LOOP ITER %u: data=%p, length=%zu\\n\",\n                loop_count, (void *)data, length);\n\n      md5_transform (ctx->H, data);\n\n      data += MD5_BLOCK_SIZE; /* <-- pointer parameter modified (reproduces reported violation) */\n      length -= MD5_BLOCK_SIZE;\n\n      if (log != NULL)\n        fprintf(log, \"AFTER TRANSFORM ITER %u: data=%p, length=%zu\\n\",\n                loop_count, (void *)data, length);\n\n      ++loop_count;\n    }\n    if (log != NULL)\n      fprintf(log, \"EXIT WHILE: remaining length=%zu\\n\", length);\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    if (log != NULL)\n      fprintf(log, \"FINAL COPY: copying %zu bytes from data=%p to buffer offset=%u\\n\",\n              length, (void *)data, bytes_have);\n\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"EXIT MHD_MD5_update: ctx=%p, final data=%p, final length=%zu, ctx->count=%llu\\n\",\n            (void *)ctx, (void *)data, length, (unsigned long long)ctx->count);\n    fclose(log);\n  }\n}\n"
}