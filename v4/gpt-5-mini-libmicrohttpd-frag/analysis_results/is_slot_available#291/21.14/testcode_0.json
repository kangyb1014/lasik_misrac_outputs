{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe code uses memcmp(nn->nonce, new_nonce, new_nonce_len) while nn->nonce is asserted to be zero-terminated (and new_nonce is a null-terminated nonce string). MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null-terminated strings, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified is_slot_available code that contains useful probe functions that print useful logs to a file \"/tmp/logs/964.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of is_slot_available:\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified is_slot_available code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original is_slot_available with it.\n  - Your function must have the exact same signature as is_slot_available.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call is_slot_available to check logs.\n  - Your function MUST preserve the original logic of is_slot_available as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, is_slot_available will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of is_slot_available as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  FILE *log = fopen(\"/tmp/logs/964.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER is_slot_available: nn=%p now=%llu new_nonce=%p new_nonce_len=%zu\\n\",\n            (void *) nn, (unsigned long long) now, (const void *) new_nonce, new_nonce_len);\n    fflush(log);\n  }\n\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n\n  if (0 == nn->nonce[0])\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: slot empty (nn->nonce[0] == 0)\\n\");\n      fclose(log);\n    }\n    return true; /* The slot is empty */\n  }\n\n  /* Preserve original memcmp behavior but capture the result for logging */\n  int memcmp_res = memcmp (nn->nonce, new_nonce, new_nonce_len);\n  if (log)\n  {\n    /* Log a short prefix of both buffers (safe: use length-limited string print) */\n    int prlen = (int) new_nonce_len;\n    if (prlen < 0)\n      prlen = 0;\n    fprintf(log, \"memcmp called: new_nonce_len=%zu memcmp_res=%d\\n\",\n            new_nonce_len, memcmp_res);\n    fprintf(log, \"nn->nonce prefix: '%.*s'\\n\", prlen, nn->nonce);\n    fprintf(log, \"new_nonce prefix: '%.*s'\\n\", prlen, new_nonce);\n    fflush(log);\n  }\n\n  if (0 == memcmp_res)\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: memcmp returned 0 -> slot has same nonce, return false\\n\");\n      fclose(log);\n    }\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: nn->nc != 0 (nn->nc=%llu) -> return true (re-use slot)\\n\",\n              (unsigned long long) nn->nc);\n      fclose(log);\n    }\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n  }\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (log)\n  {\n    fprintf(log, \"last byte of nn->nonce (expected 0) = %d\\n\",\n            (int) nn->nonce[sizeof(nn->nonce) - 1]);\n    fflush(log);\n  }\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: wrong nonce format in the slot (no terminating 0) -> return true\\n\");\n      fclose(log);\n    }\n    return true; /* Wrong nonce format in the slot */\n  }\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  if (log)\n  {\n    fprintf(log, \"get_nonce_timestamp -> timestamp_valid=%d timestamp=%llu\\n\",\n            (int) timestamp_valid, (unsigned long long) timestamp);\n    fflush(log);\n  }\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: invalid timestamp -> return true\\n\");\n      fclose(log);\n    }\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n  }\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n  {\n    if (log)\n    {\n      fprintf(log, \"PATH: reuse timeout exceeded -> return true\\n\");\n      fclose(log);\n    }\n    return true;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"PATH: slot not available -> return false\\n\");\n    fclose(log);\n  }\n\n  return false;\n}\n"
}