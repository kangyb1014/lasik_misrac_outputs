{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses the return value of MHD_socket_strerr_(err) as a read\u2011only format argument. If MHD_socket_strerr_ is declared to return 'char *' (i.e. a non\u2011const pointer) while it actually returns a pointer to an immutable error string (or otherwise is not intended to be modified), that declaration violates MISRA C 2023 Rule 8.13. The correct design is for MHD_socket_strerr_ to return 'const char *' so the pointer points to a const\u2011qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_poll_listen_socket code that contains useful probe functions that print useful logs to a file \"/tmp/logs/905.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_poll_listen_socket:\n```c\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    return MHD_YES;\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_YES;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    return MHD_NO;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    (void) MHD_accept_connection (daemon);\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_poll_listen_socket code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_poll_listen_socket with it.\n  - Your function must have the exact same signature as MHD_poll_listen_socket.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_poll_listen_socket to check logs.\n  - Your function MUST preserve the original logic of MHD_poll_listen_socket as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_poll_listen_socket will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_poll_listen_socket as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  /* Probe: log entry to file for traceability */\n  {\n    FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"ENTER: MHD_poll_listen_socket daemon=%p may_block=%d\\n\", (void *) daemon, may_block);\n        fclose(log);\n      }\n  }\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    {\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EXIT: no fds to poll (poll_count=0) -> MHD_YES\\n\");\n          fclose(log);\n        }\n      return MHD_YES;\n    }\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    {\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"poll failed: err=%d; EINTR=%d\\n\",\n                  err,\n                  (int) MHD_SCKT_ERR_IS_EINTR_ (err));\n          fclose(log);\n        }\n    }\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      {\n        FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n        if (log)\n          {\n            fprintf(log, \"poll interrupted by signal -> MHD_YES\\n\");\n            fclose(log);\n          }\n        return MHD_YES;\n      }\n#ifdef HAVE_MESSAGES\n    {\n      /* Capture the returned pointer and its content for investigation. */\n      const char *errstr_const = (const char *) MHD_socket_strerr_ (err);\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          /* Log pointer address and (if non-NULL) the string content. This helps\n             to reproduce and inspect the scenario where the function returns a\n             non-const 'char *' that actually points to immutable data. */\n          fprintf(log, \"MHD_DLOG invoked: err=%d, errstr_ptr=%p\\n\", err, (void *) errstr_const);\n          if (errstr_const)\n            {\n              /* Print up to a reasonable length to avoid huge logs. */\n              size_t _len = 0;\n              /* Avoid calling strlen if not available; guard with try/catch is not\n                 available in C, but strlen is usually present in the project. */\n              _len = strlen (errstr_const);\n              fprintf(log, \"MHD_DLOG errstr_len=%zu, errstr_preview=\\\"%s\\\"\\n\",\n                      _len,\n                      errstr_const);\n            }\n          else\n            fprintf(log, \"MHD_DLOG errstr is NULL\\n\");\n          fclose(log);\n        }\n    }\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    {\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EXIT: poll failure -> MHD_NO\\n\");\n          fclose(log);\n        }\n    }\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    {\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"EXIT: daemon shutdown -> MHD_NO\\n\");\n          fclose(log);\n        }\n      return MHD_NO;\n    }\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    {\n      FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n      if (log)\n        {\n          fprintf(log, \"poll indicates listener ready -> calling MHD_accept_connection\\n\");\n          fclose(log);\n        }\n      (void) MHD_accept_connection (daemon);\n    }\n  {\n    FILE *log = fopen(\"/tmp/logs/905.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"EXIT: MHD_YES\\n\");\n        fclose(log);\n      }\n  }\n  return MHD_YES;\n}\n"
}