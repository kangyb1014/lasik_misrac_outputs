{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(key) after only checking key != NULL. If key is non-NULL but does not point to a NUL-terminated object (for example caller passes a pointer to a char buffer without a terminating '\\0', or a pointer into an object where no '\\0' occurs before the object end), strlen will read past the object's bounds. Thus the use of strlen can result in out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value with it.\n  - Your function must have the exact same signature as MHD_set_connection_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  enum MHD_Result result;\n  size_t key_len = 0;\n  size_t value_len = 0;\n\n  /* Open a log file to capture control flow and state for debugging the\n     potential out-of-bounds read when calling strlen on non-NULL pointers. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3253.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"MHD_set_connection_value ENTER\\n\");\n        fprintf(log, \"  connection: %p\\n\", (void *) connection);\n        fprintf(log, \"  kind: %d\\n\", (int) kind);\n        fprintf(log, \"  key ptr: %p\\n\", (const void *) key);\n        fprintf(log, \"  value ptr: %p\\n\", (const void *) value);\n\n        if (NULL != key)\n          fprintf(log, \"  key is non-NULL -> will call strlen(key) next\\n\");\n        else\n          fprintf(log, \"  key is NULL -> will not call strlen(key)\\n\");\n\n        if (NULL != value)\n          fprintf(log, \"  value is non-NULL -> will call strlen(value) next\\n\");\n        else\n          fprintf(log, \"  value is NULL -> will not call strlen(value)\\n\");\n\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  /* Preserve original behavior: call strlen on non-NULL pointers. The logs\n     above record that we are about to do so (this is the point where a\n     non-NUL-terminated key or value could cause an out-of-bounds read). */\n  key_len = (NULL != key) ? strlen (key) : 0;\n  value_len = (NULL != value) ? strlen (value) : 0;\n\n  /* Log the results of strlen (if logging file is available). */\n  {\n    FILE *log = fopen(\"/tmp/logs/3253.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"After strlen calls:\\n\");\n        fprintf(log, \"  computed key_len: %zu\\n\", key_len);\n        fprintf(log, \"  computed value_len: %zu\\n\", value_len);\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  /* Call the original helper with the lengths we computed. */\n  result = MHD_set_connection_value_n_nocheck_ (connection,\n                                                kind,\n                                                key,\n                                                key_len,\n                                                value,\n                                                value_len);\n\n  /* Log the return value. */\n  {\n    FILE *log = fopen(\"/tmp/logs/3253.txt\", \"a\");\n    if (log)\n      {\n        fprintf(log, \"MHD_set_connection_value EXIT -> result: %d\\n\\n\", (int) result);\n        fflush(log);\n        fclose(log);\n      }\n  }\n\n  return result;\n}\n"
}