{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf 'value' points to a non-NULL char array that is not NUL-terminated (for example: char buf[3] = {'a','b','c'}; value = buf;), strlen(value) will scan past the bounds looking for '\\0' and thus access memory beyond the object. The NULL check does not guarantee a valid NUL-terminated string, so this use of strlen can lead to out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3253.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              NULL != key\n                                              ? strlen (key)\n                                              : 0,\n                                              value,\n                                              NULL != value\n                                              ? strlen (value)\n                                              : 0);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value with it.\n  - Your function must have the exact same signature as MHD_set_connection_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value (struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          const char *key,\n                          const char *value)\n{\n  /* Preserve original logic: compute lengths using strlen only when pointers are non-NULL. */\n  size_t key_len = NULL != key ? strlen(key) : 0;\n  size_t value_len = NULL != value ? strlen(value) : 0;\n\n  /* Attempt to log control flow and state for reproduction/evidence.\n     Logs are appended to /tmp/logs/3253.txt. Failures to open the log file\n     are tolerated; function behavior is otherwise unchanged. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/3253.txt\", \"a\");\n    if (NULL != logf)\n    {\n      /* Log entry and pointer/length state. Do not dereference key/value beyond\n         what the original code already does (we only log the computed lengths).\n         Avoid reading string contents to prevent introducing additional UB. */\n      fprintf(logf, \"MHD_set_connection_value: entered\\n\");\n      fprintf(logf, \"  connection=%p, kind=%d\\n\", (void *) connection, (int) kind);\n      fprintf(logf, \"  key ptr=%p, key_is_null=%d, computed_key_len=%zu\\n\",\n              (void *) key, (key == NULL) ? 1 : 0, key_len);\n      fprintf(logf, \"  value ptr=%p, value_is_null=%d, computed_value_len=%zu\\n\",\n              (void *) value, (value == NULL) ? 1 : 0, value_len);\n      fprintf(logf, \"  NOTE: lengths computed via strlen; a non-NUL-terminated buffer\\n\");\n      fprintf(logf, \"        will result in scanning past the object's bounds (possible UB).\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  /* Call the original helper with the computed lengths (preserve behavior). */\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                                            kind,\n                                                            key,\n                                                            NULL != key\n                                                            ? key_len\n                                                            : 0,\n                                                            value,\n                                                            NULL != value\n                                                            ? value_len\n                                                            : 0);\n\n  /* Log the result of the helper call so tests can observe the outcome. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/3253.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"  helper returned result=%d\\n\", (int) res);\n      fprintf(logf, \"MHD_set_connection_value: exit\\n\\n\");\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  return res;\n}\n"
}