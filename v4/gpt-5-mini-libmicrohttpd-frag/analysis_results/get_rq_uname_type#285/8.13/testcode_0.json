{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer to const struct (const struct MHD_RqDAuth *params) and only reads params->username.value.str (it compares it to NULL). If the member username.value.str is declared as a pointer to non-const (e.g. char *str), then the pointer points to a non-const-qualified target while only being used for read-only purposes. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type (e.g. const char *str) whenever possible. Therefore this use constitutes a violation: the member should be changed to point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname_type code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1805.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_uname_type:\n```c\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_uname_type code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_uname_type with it.\n  - Your function must have the exact same signature as get_rq_uname_type.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_uname_type to check logs.\n  - Your function MUST preserve the original logic of get_rq_uname_type as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_uname_type will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_uname_type as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n    /* Logging probe: append control-flow and relevant state to file for reproduction */\n    FILE *log = fopen(\"/tmp/logs/1805.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER get_rq_uname_type: params=%p\\n\", (void *)params);\n        if (params)\n        {\n            fprintf(log, \"  username.value.str=%p\\n\", (void *)params->username.value.str);\n            fprintf(log, \"  username_ext.value.str=%p\\n\", (void *)params->username_ext.value.str);\n            fprintf(log, \"  userhash=%d\\n\", (int)params->userhash);\n            fprintf(log, \"  username_ext.quoted=%d\\n\", (int)params->username_ext.quoted);\n            fprintf(log, \"  username_ext.value.len=%lu\\n\", (unsigned long)params->username_ext.value.len);\n            fflush(log);\n        }\n        else\n        {\n            fprintf(log, \"  params is NULL\\n\");\n            fflush(log);\n        }\n    }\n\n    /* Original control flow with logging at each return point */\n    if (NULL != params->username.value.str)\n    {\n        if (NULL == params->username_ext.value.str)\n        {\n            enum MHD_DigestAuthUsernameType res = params->userhash ?\n                MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n                MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n            if (log)\n            {\n                fprintf(log, \"BRANCH: username present, username_ext NULL, userhash=%d -> res=%d\\n\", (int)params->userhash, (int)res);\n                fflush(log);\n                fclose(log);\n            }\n            return res;\n        }\n        else  /* Both 'username' and 'username*' are used */\n        {\n            if (log)\n            {\n                fprintf(log, \"BRANCH: Both username and username_ext present -> INVALID\\n\");\n                fflush(log);\n                fclose(log);\n            }\n            return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n        }\n    }\n    else if (NULL != params->username_ext.value.str)\n    {\n        if (! params->username_ext.quoted && ! params->userhash &&\n            (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n        {\n            if (log)\n            {\n                fprintf(log, \"BRANCH: username missing, username_ext present (unquoted, no userhash, len ok) -> EXTENDED\\n\");\n                fflush(log);\n                fclose(log);\n            }\n            return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"BRANCH: username missing, username_ext present but invalid conditions -> INVALID\\n\");\n                fflush(log);\n                fclose(log);\n            }\n            return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"BRANCH: username and username_ext missing -> MISSING\\n\");\n        fflush(log);\n        fclose(log);\n    }\n\n    return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}"
}