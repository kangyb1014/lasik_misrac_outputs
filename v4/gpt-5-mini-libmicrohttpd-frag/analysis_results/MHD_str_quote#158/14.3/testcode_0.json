{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression is the constant expression `1` in `if (1)` (under the MHD_FAVOR_SMALL_CODE configuration). This is an invariant controlling expression that is always true and is not used to create an infinite loop nor is it a do-while with a false integer constant \u2014 therefore it falls outside the permitted exceptions to Rule 14.3 and violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_quote code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2499.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_quote:\n```c\nsize_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n        result[w++] = '\\\\'; /* Escape current char */\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n      return 0; /* Quick fail: the output buffer is too small */\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n        return 0; /* The output buffer is too small */\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          if (buf_size <= w)\n            return 0; /* The output buffer is too small */\n        }\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n  return w;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_quote code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_quote with it.\n  - Your function must have the exact same signature as MHD_str_quote.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_quote to check logs.\n  - Your function MUST preserve the original logic of MHD_str_quote as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_quote will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_quote as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_str_quote (const char *unquoted,\n               size_t unquoted_len,\n               char *result,\n               size_t buf_size)\n{\n  size_t r;\n  size_t w;\n\n  r = 0;\n  w = 0;\n\n  /* Probe: log entry and parameters */\n  {\n    FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n    if (log_fp)\n    {\n      fprintf(log_fp, \"ENTER MHD_str_quote: unquoted=%p unquoted_len=%zu buf_size=%zu\\n\",\n              (const void *)unquoted, unquoted_len, buf_size);\n      fclose(log_fp);\n    }\n  }\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (unquoted_len * 2 <= buf_size)\n  {\n    /* Fast loop: the output will fit the buffer with any input string content */\n    {\n      FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n      if (log_fp)\n      {\n        fprintf(log_fp, \"TAKE_BRANCH: LARGE_CODE fast loop (unquoted_len * 2 <= buf_size)\\n\");\n        fclose(log_fp);\n      }\n    }\n\n    while (unquoted_len > r)\n    {\n      const char chr = unquoted[r++];\n      if (('\\\\' == chr) || ('\\\"' == chr))\n      {\n        result[w++] = '\\\\'; /* Escape current char */\n        {\n          FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n          if (log_fp)\n          {\n            fprintf(log_fp, \"ESCAPE_CHAR at r=%zu w=%zu chr=0x%02x\\\\n\", r - 1, w - 1, (unsigned char)chr);\n            fclose(log_fp);\n          }\n        }\n      }\n      result[w++] = chr;\n    }\n  }\n  else\n  {\n    if (unquoted_len > buf_size)\n    {\n      FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n      if (log_fp)\n      {\n        fprintf(log_fp, \"QUICK_FAIL: unquoted_len (%zu) > buf_size (%zu) -> return 0\\n\", unquoted_len, buf_size);\n        fclose(log_fp);\n      }\n      return 0; /* Quick fail: the output buffer is too small */\n    }\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (1)\n  {\n    /* Probe: this is the invariant controlling expression reported as a violation scenario */\n    {\n      FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n      if (log_fp)\n      {\n        fprintf(log_fp, \"TAKE_BRANCH: MHD_FAVOR_SMALL_CODE present -> if (1) executed\\n\");\n        fclose(log_fp);\n      }\n    }\n#endif /* MHD_FAVOR_SMALL_CODE */\n\n    while (unquoted_len > r)\n    {\n      if (buf_size <= w)\n      {\n        FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n        if (log_fp)\n        {\n          fprintf(log_fp, \"RETURN_FAIL: buf_size (%zu) <= w (%zu) -> return 0\\n\", buf_size, w);\n          fclose(log_fp);\n        }\n        return 0; /* The output buffer is too small */\n      }\n      else\n      {\n        const char chr = unquoted[r++];\n        if (('\\\\' == chr) || ('\\\"' == chr))\n        {\n          result[w++] = '\\\\'; /* Escape current char */\n          {\n            FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n            if (log_fp)\n            {\n              fprintf(log_fp, \"ESCAPE_CHAR at r=%zu w=%zu chr=0x%02x\\\\n\", r - 1, w - 1, (unsigned char)chr);\n              fclose(log_fp);\n            }\n          }\n          if (buf_size <= w)\n          {\n            FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n            if (log_fp)\n            {\n              fprintf(log_fp, \"RETURN_FAIL after escape: buf_size (%zu) <= w (%zu) -> return 0\\n\", buf_size, w);\n              fclose(log_fp);\n            }\n            return 0; /* The output buffer is too small */\n          }\n        }\n        result[w++] = chr;\n      }\n    }\n  }\n\n  mhd_assert (w >= r);\n  mhd_assert (w <= r * 2);\n\n  {\n    FILE *log_fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n    if (log_fp)\n    {\n      fprintf(log_fp, \"EXIT MHD_str_quote: r=%zu w=%zu return=%zu\\n\", r, w, w);\n      fclose(log_fp);\n    }\n  }\n  return w;\n}\n"
}