{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nA buffer-overflow can occur if get_rq_extended_uname_copy_z writes more bytes (including the terminating NUL) than the provided remaining space. The fragment passes (char *)(buf + buf_used) and size (buf_size - buf_used) to the callee and, on a non-negative return value res, assumes the callee copied exactly res bytes plus a terminating NUL and that those res+1 bytes fit into the remaining buffer. If buf_size == buf_used (so the size argument is 0) or if the callee does not enforce the provided size and writes/data-terminator beyond buf_size - buf_used, the code will have performed an access beyond the bounds of buf. Therefore Rule 21.17 is violated unless get_rq_extended_uname_copy_z is implemented to guarantee it never writes more than the supplied size (and returns negative on truncation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_rq_uname code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_rq_uname:\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_rq_uname code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_rq_uname with it.\n  - Your function must have the exact same signature as get_rq_uname.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_rq_uname to check logs.\n  - Your function MUST preserve the original logic of get_rq_uname as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_rq_uname will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_rq_uname as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  FILE *log = fopen(\"/tmp/logs/3683.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER get_rq_uname: uname_type=%d buf=%p buf_size=%zu\\n\",\n            (int) uname_type, (void *) buf, buf_size);\n  }\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    size_t before = buf_used;\n    size_t remaining_before = (buf_size >= before) ? (buf_size - before) : 0;\n\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    if (log)\n    {\n      fprintf(log, \"BRANCH STANDARD: username_len=%zu before_used=%zu after_used=%zu remaining_before=%zu dest=%p\\n\",\n              uname_info->username_len, before, buf_used, remaining_before,\n              (void *) uname_info->username);\n      if (uname_info->username_len + 1 > remaining_before)\n        fprintf(log, \"WARNING: written bytes (len+1=%zu) exceed remaining buffer (%zu) - potential overflow\\n\",\n                uname_info->username_len + 1, remaining_before);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t before = buf_used;\n    size_t remaining_before = (buf_size >= before) ? (buf_size - before) : 0;\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n      if (log)\n        fprintf(log, \"BRANCH USERHASH: hex_len=%zu hex_to_bin_res=%zu -> INVALID\\n\",\n                uname_info->userhash_hex_len, res);\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n      if (log)\n      {\n        fprintf(log, \"BRANCH USERHASH: userhash_hex_len=%zu hex_to_bin_res=%zu before_used=%zu after_used=%zu userhash_hex_dest=%p userhash_bin_dest=%p\\n\",\n                uname_info->userhash_hex_len, res, before, buf_used,\n                (void *) uname_info->userhash_hex, (void *) uname_info->userhash_bin);\n        if (res + uname_info->userhash_hex_len + 1 > remaining_before + (res))\n          fprintf(log, \"NOTE: computed sizes may indicate tight buffer usage (hex_len+1+bin=%zu) remaining_before=%zu\\n\",\n                  uname_info->userhash_hex_len + 1 + res, remaining_before);\n      }\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    size_t before = buf_used;\n    size_t remaining = (buf_size >= before) ? (buf_size - before) : 0;\n\n    if (log)\n    {\n      fprintf(log, \"BRANCH EXTENDED: src_ptr=%p src_len=%zu dest_ptr=%p remaining=%zu\\n\",\n              (void *) params->username_ext.value.str,\n              (size_t) params->username_ext.value.len,\n              (void *) (buf + buf_used), remaining);\n      if (0 == remaining)\n        fprintf(log, \"WARNING: remaining buffer size is 0 when calling get_rq_extended_uname_copy_z\\n\");\n    }\n\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        remaining);\n\n    if (log)\n      fprintf(log, \"EXTENDED: get_rq_extended_uname_copy_z returned %zd\\n\", res);\n\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      if (log)\n      {\n        fprintf(log, \"EXTENDED: username_len=%zu before_used=%zu after_used=%zu\\n\",\n                uname_info->username_len, before, buf_used);\n        if ((size_t) res + 1 > remaining)\n          fprintf(log, \"WARNING: callee reported res=%zd but remaining was %zu -> potential overflow (res+1=%zu)\\n\",\n                  res, remaining, (size_t) res + 1);\n      }\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    if (log)\n      fprintf(log, \"BRANCH ELSE: invalid uname_type=%d\\n\", (int) uname_type);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT get_rq_uname: buf_used=%zu buf_size=%zu final_buf_ptr=%p\\n\",\n            buf_used, buf_size, (void *) buf);\n    fflush(log);\n    fclose(log);\n  }\n\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n"
}