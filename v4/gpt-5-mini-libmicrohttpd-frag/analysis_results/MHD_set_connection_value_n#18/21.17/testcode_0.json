{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrlen is called on key and value without first ensuring the pointed-to objects are NUL-terminated within their bounds. For example, if key != NULL points to a buffer of length key_size that is not NUL-terminated inside that buffer, calling strlen(key) will read past the buffer boundary (and similarly for value). This can produce out-of-bounds accesses, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value_n with it.\n  - Your function must have the exact same signature as MHD_set_connection_value_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value_n to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Open log file (append) to record control flow and state. */\n  FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER: MHD_set_connection_value_n: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n    fflush(log);\n  }\n\n  /* Compute observed lengths using the same strlen() calls that the original\n     implementation used in the conditional, so that logs show exactly what\n     triggers the potential out-of-bounds read. */\n  size_t observed_key_len = 0u;\n  size_t observed_value_len = 0u;\n\n  if (key)\n  {\n    observed_key_len = strlen(key); /* potential OOB read if not NUL-terminated */\n    if (log) fprintf(log, \"computed strlen(key) = %zu (key != NULL)\\n\", observed_key_len);\n  }\n  else\n  {\n    if (log) fprintf(log, \"key is NULL -> treated length = 0\\n\");\n  }\n\n  if (value)\n  {\n    observed_value_len = strlen(value); /* potential OOB read if not NUL-terminated */\n    if (log) fprintf(log, \"computed strlen(value) = %zu (value != NULL)\\n\", observed_value_len);\n  }\n  else\n  {\n    if (log) fprintf(log, \"value is NULL -> treated length = 0\\n\");\n  }\n\n  if (log)\n  {\n    fprintf(log,\n            \"EVAL: (MHD_GET_ARGUMENT_KIND != kind) = %d; (observed_key_len != key_size) = %d; (observed_value_len != value_size) = %d\\n\",\n            (MHD_GET_ARGUMENT_KIND != kind) ? 1 : 0,\n            (observed_key_len != key_size) ? 1 : 0,\n            (observed_value_len != value_size) ? 1 : 0);\n    fflush(log);\n  }\n\n  /* Preserve original decision logic exactly, but use the observed lengths\n     computed above so the log reflects the actual values used. */\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? observed_key_len : 0u) != key_size) ||\n         ((value ? observed_value_len : 0u) != value_size) ) )\n  {\n    if (log) fprintf(log, \"RETURN: MHD_NO (binary zero only allowed in GET arguments)\\n\");\n    if (log) fclose(log);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  if (log) fprintf(log, \"Calling MHD_set_connection_value_n_nocheck_()\\n\");\n  if (log) fflush(log);\n\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                                            kind,\n                                                            key,\n                                                            key_size,\n                                                            value,\n                                                            value_size);\n\n  if (log)\n  {\n    fprintf(log, \"RETURN: MHD_set_connection_value_n_nocheck_ returned %d\\n\", (int)res);\n    fclose(log);\n  }\n\n  return res;\n}\n"
}