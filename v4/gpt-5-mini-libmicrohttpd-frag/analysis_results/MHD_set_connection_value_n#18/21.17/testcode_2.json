{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If key is non-NULL but not NUL-terminated within the accessible object bounds, calling strlen(key) may scan past the end of the object. Example: key points to a buffer of length key_size==3 containing {'a','b','c'} (no '\\0'); strlen(key) will read beyond those 3 bytes and thus access out-of-bounds. This violates MISRA C 2023 Rule 21.17. (Use strnlen(key, key_size) or memchr to ensure termination within key_size.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value_n with it.\n  - Your function must have the exact same signature as MHD_set_connection_value_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value_n to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Logging probes to capture control flow and state for Rule 21.17 analysis. */\n  FILE *log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n  if (log)\n    {\n      fprintf(log, \"ENTER: MHD_set_connection_value_n\\n\");\n      fprintf(log, \" connection=%p, kind=%d\\n\", (void *)connection, (int)kind);\n      fprintf(log, \" key=%p, key_size=%zu, value=%p, value_size=%zu\\n\",\n              (void *)key, key_size, (void *)value, value_size);\n\n      /* Inspect key safely within provided key_size to detect NUL within bounds. */\n      if (key == NULL)\n        {\n          fprintf(log, \" key == NULL\\n\");\n        }\n      else\n        {\n          /* Use memchr to check for NUL within key_size bytes (safe if key_size is the accessible object size).\n             This is a diagnostic only; we will still call strlen below to preserve original behavior. */\n          const void *kp = memchr((const void *)key, '\\0', key_size);\n          if (kp)\n            {\n              size_t offset = (const char *)kp - key;\n              fprintf(log, \" memchr: NUL found within key_size at offset=%zu\\n\", offset);\n            }\n          else\n            {\n              fprintf(log, \" memchr: NO NUL within first key_size bytes (key may not be NUL-terminated)\\n\");\n            }\n\n          fprintf(log, \" About to call strlen(key) which may scan beyond key_size if key is not NUL-terminated\\n\");\n        }\n\n      /* Inspect value similarly. */\n      if (value == NULL)\n        {\n          fprintf(log, \" value == NULL\\n\");\n        }\n      else\n        {\n          const void *vp = memchr((const void *)value, '\\0', value_size);\n          if (vp)\n            {\n              size_t offset = (const char *)vp - value;\n              fprintf(log, \" memchr: NUL found within value_size at offset=%zu\\n\", offset);\n            }\n          else\n            {\n              fprintf(log, \" memchr: NO NUL within first value_size bytes (value may not be NUL-terminated)\\n\");\n            }\n\n          fprintf(log, \" About to call strlen(value) which may scan beyond value_size if value is not NUL-terminated\\n\");\n        }\n\n      fflush(log);\n    }\n\n  /* Preserve original logic exactly: call strlen when key/value are non-NULL. */\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    {\n      if (log)\n        {\n          fprintf(log, \"DECISION: returning MHD_NO due to size/termination mismatch\\n\");\n          fclose(log);\n        }\n\n      return MHD_NO; /* binary zero is allowed only in GET arguments */\n    }\n\n  if (log)\n    {\n      fprintf(log, \"DECISION: calling MHD_set_connection_value_n_nocheck_\\n\");\n      fflush(log);\n    }\n\n  enum MHD_Result res = MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n\n  if (log)\n    {\n      fprintf(log, \"EXIT: MHD_set_connection_value_n returned %d\\n\", (int)res);\n      fclose(log);\n    }\n\n  return res;\n}\n"
}