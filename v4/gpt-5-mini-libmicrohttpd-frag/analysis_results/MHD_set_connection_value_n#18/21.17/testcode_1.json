{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf value is non-NULL but not NUL-terminated within its allocated/object bounds (e.g. a binary buffer of length value_size with no terminating '\\0'), the call to strlen(value) will read past the end of that object searching for a NUL, potentially accessing memory beyond the object. For example: char buf[3] = {'a','b','c'}; value = buf; value_size = 3; strlen(value) will read out of bounds. This violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_set_connection_value_n code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_set_connection_value_n with it.\n  - Your function must have the exact same signature as MHD_set_connection_value_n.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_set_connection_value_n to check logs.\n  - Your function MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_set_connection_value_n will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Minimal logging probe to /tmp/logs/2153.txt to capture control flow and\n     state relevant to the potential Rule 21.17 violation. This preserves the\n     original logic while emitting useful information for reproduction. */\n  FILE *log = NULL;\n  size_t key_len = 0;\n  size_t value_len = 0;\n  enum MHD_Result res;\n\n  /* Attempt to open log file; if it fails, proceed without logging. */\n  log = fopen(\"/tmp/logs/2153.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"Entered MHD_set_connection_value_n: connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n    fflush(log);\n  }\n\n  /* The original logic calls strlen on key/value when non-NULL. To preserve\n     behavior (including the potential out-of-bounds read that demonstrates\n     the violation), call strlen exactly as the original code would and log\n     the computed lengths. Note: these strlen calls are the point where the\n     violation scenario can occur if the buffers are not NUL-terminated. */\n  if (key)\n    key_len = strlen(key);\n  if (log)\n    fprintf(log, \"Computed key_len=%zu (key %p)\\n\", key_len, (const void *)key);\n\n  if (value)\n    value_len = strlen(value);\n  if (log)\n    fprintf(log, \"Computed value_len=%zu (value %p)\\n\", value_len, (const void *)value);\n\n  if (log)\n    fflush(log);\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? key_len : 0) != key_size) ||\n         ((value ? value_len : 0) != value_size) ) ) {\n    if (log) {\n      fprintf(log, \"Check failed: returning MHD_NO (key_len=%zu key_size=%zu value_len=%zu value_size=%zu)\\n\",\n              key_len, key_size, value_len, value_size);\n      fflush(log);\n      fclose(log);\n    }\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  if (log) {\n    fprintf(log, \"Check passed: calling MHD_set_connection_value_n_nocheck_()\\n\");\n    fflush(log);\n  }\n\n  res = MHD_set_connection_value_n_nocheck_ (connection,\n                                             kind,\n                                             key,\n                                             key_size,\n                                             value,\n                                             value_size);\n\n  if (log) {\n    fprintf(log, \"MHD_set_connection_value_n_nocheck_ returned %d\\n\", (int)res);\n    fflush(log);\n    fclose(log);\n  }\n\n  return res;\n}\n"
}