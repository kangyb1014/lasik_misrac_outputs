{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 potential out-of-bounds when memcpy copies param->value.len bytes. The code allocates unquoted->str using get_buffer_for_size(..., param->value.len + 1) but does not check for size_t overflow of (param->value.len + 1). If param->value.len is SIZE_MAX (or otherwise large enough to cause wraparound), the requested size can wrap to a much smaller value (even 0), causing get_buffer_for_size to return a buffer smaller than param->value.len. The subsequent memcpy(unquoted->str, param->value.str, param->value.len) would then write beyond the destination buffer (and/or read beyond the source), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3553.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_unquoted_param_copy code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_unquoted_param_copy with it.\n  - Your function must have the exact same signature as get_unquoted_param_copy.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_unquoted_param_copy to check logs.\n  - Your function MUST preserve the original logic of get_unquoted_param_copy as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_unquoted_param_copy will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  FILE *log = fopen(\"/tmp/logs/3553.txt\", \"a\");\n  if (NULL != log)\n  {\n    fprintf(log, \"ENTER get_unquoted_param_copy: param=%p, value.str=%p, value.len=%zu, quoted=%d, tmp1=%p, ptmp2=%p, ptmp2_size=%p, unquoted=%p\\n\",\n            (const void *)param,\n            (const void *)((param != NULL) ? param->value.str : NULL),\n            (param != NULL) ? param->value.len : (size_t)0,\n            (param != NULL) ? (int)param->quoted : -1,\n            (void *)tmp1,\n            (void *)ptmp2,\n            (void *)ptmp2_size,\n            (void *)unquoted);\n  }\n\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  /* compute requested size for logging (wraps exactly as in original expression) */\n  size_t requested_size = param->value.len + 1U;\n  if (NULL != log)\n  {\n    fprintf(log, \"Calling get_buffer_for_size: requested_size=%zu (param->value.len=%zu + 1), *ptmp2_size=%s\\n\",\n            requested_size,\n            param->value.len,\n            (ptmp2_size != NULL) ? ( (void)0, \"(unknown at log time)\" ) : \"NULL\");\n    /* Note: printing *ptmp2_size value directly may be unsafe if ptmp2_size is NULL; keep description instead */\n    fflush(log);\n  }\n\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL != log)\n  {\n    fprintf(log, \"get_buffer_for_size returned %p for requested_size=%zu\\n\",\n            (void *)unquoted->str, requested_size);\n    fflush(log);\n  }\n\n  if (NULL == unquoted->str)\n  {\n    int too_large = (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ? 1 : 0;\n    if (NULL != log)\n    {\n      fprintf(log, \"unquoted->str is NULL; reason=%s; returning %s\\n\",\n              too_large ? \"TOO_LARGE\" : \"OUT_OF_MEM\",\n              too_large ? \"_MHD_UNQ_TOO_LARGE\" : \"_MHD_UNQ_OUT_OF_MEM\");\n      fclose(log);\n    }\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n  }\n\n  if (! param->quoted)\n  {\n    if (NULL != log)\n    {\n      fprintf(log, \"Non-quoted branch: about to memcpy dest=%p src=%p len=%zu\\n\",\n              (void *)unquoted->str, (const void *)param->value.str, param->value.len);\n      fflush(log);\n    }\n\n    memcpy (unquoted->str, param->value.str, param->value.len);\n\n    unquoted->len = param->value.len;\n\n    if (NULL != log)\n    {\n      fprintf(log, \"After memcpy: dest=%p (maybe truncated), unquoted->len=%zu\\n\",\n              (void *)unquoted->str, unquoted->len);\n      fprintf(log, \"EXIT get_unquoted_param_copy -> _MHD_UNQ_OK\\n\");\n      fclose(log);\n    }\n\n    return _MHD_UNQ_OK;\n  }\n\n  /* quoted */\n  if (NULL != log)\n  {\n    fprintf(log, \"Quoted branch: calling MHD_str_unquote(src=%p, src_len=%zu, dest=%p)\\n\",\n            (const void *)param->value.str, param->value.len, (void *)unquoted->str);\n    fflush(log);\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  if (NULL != log)\n  {\n    fprintf(log, \"MHD_str_unquote returned unquoted->len=%zu (src_len=%zu)\\n\",\n            unquoted->len, param->value.len);\n    fprintf(log, \"Asserts: unquoted->len != 0 -> %s; unquoted->len < param->value.len -> %s\\n\",\n            (unquoted->len != 0) ? \"true\" : \"false\",\n            (unquoted->len < param->value.len) ? \"true\" : \"false\");\n    fprintf(log, \"EXIT get_unquoted_param_copy -> _MHD_UNQ_OK\\n\");\n    fclose(log);\n  }\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n"
}