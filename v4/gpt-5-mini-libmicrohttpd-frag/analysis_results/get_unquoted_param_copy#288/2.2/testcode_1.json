{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assertion mhd_assert(0 != param->value.len) can constitute dead code if mhd_assert is a side\u2011effect\u2011free check (e.g. expands to an expression that only tests the condition or to (void)0 in some builds). In that case the statement is executed only to verify an invariant and has no effect on normal program behaviour; removing it would not change the program\u2019s behaviour (except removing the runtime check), so it meets the definition of dead code and thus violates Rule 2.2. (If, conversely, mhd_assert is implemented to produce a visible effect on failure\u2014terminate, log, etc.\u2014then its removal would change behaviour and it would not be dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified get_unquoted_param_copy code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3558.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of get_unquoted_param_copy:\n```c\nstatic enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (NULL == unquoted->str)\n    return (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n           _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n  return _MHD_UNQ_OK;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified get_unquoted_param_copy code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original get_unquoted_param_copy with it.\n  - Your function must have the exact same signature as get_unquoted_param_copy.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call get_unquoted_param_copy to check logs.\n  - Your function MUST preserve the original logic of get_unquoted_param_copy as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, get_unquoted_param_copy will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of get_unquoted_param_copy as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum _MHD_GetUnqResult\nget_unquoted_param_copy (const struct MHD_RqDAuthParam *param,\n                         char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                         char **ptmp2,\n                         size_t *ptmp2_size,\n                         struct _MHD_mstr_w_len *unquoted)\n{\n  FILE *log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER get_unquoted_param_copy: param=%p, value.str=%p, value.len=%zu, quoted=%d, tmp1=%p, ptmp2=%p, ptmp2_size=%p, unquoted=%p\\n\",\n            (void *)param,\n            (param ? (void *)param->value.str : NULL),\n            (param ? param->value.len : (size_t)0),\n            (param ? (int) param->quoted : 0),\n            (void *)tmp1,\n            (void *)ptmp2,\n            (void *)ptmp2_size,\n            (void *)unquoted);\n    fclose(log);\n  }\n\n  mhd_assert (NULL != param->value.str);\n  if (log == NULL) /* re-open briefly to log post-assert state if needed */\n    log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"after assert non-NULL str: value.str=%p, value.len=%zu\\n\",\n            (void *)param->value.str, param->value.len);\n    fclose(log);\n    log = NULL;\n  }\n\n  mhd_assert (0 != param->value.len);\n  if (log == NULL)\n    log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"after assert non-zero len: value.len=%zu\\n\", param->value.len);\n    fclose(log);\n    log = NULL;\n  }\n\n  /* The value is present and is quoted, needs to be copied and unquoted */\n  /* Allocate buffer with one more additional byte for zero-termination */\n  unquoted->str =\n    get_buffer_for_size (tmp1, ptmp2, ptmp2_size, param->value.len + 1);\n\n  if (log == NULL)\n    log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"after get_buffer_for_size: requested=%zu, returned=%p\\n\",\n            param->value.len + 1, (void *)unquoted->str);\n    fclose(log);\n    log = NULL;\n  }\n\n  if (NULL == unquoted->str)\n  {\n    enum _MHD_GetUnqResult _res =\n      (param->value.len + 1 > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE) ?\n      _MHD_UNQ_TOO_LARGE : _MHD_UNQ_OUT_OF_MEM;\n\n    if (log == NULL)\n      log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"buffer allocation failed: value.len=%zu, result=%d\\n\",\n              param->value.len, (int)_res);\n      fclose(log);\n    }\n\n    return _res;\n  }\n\n  if (! param->quoted)\n  {\n    memcpy (unquoted->str, param->value.str, param->value.len);\n    unquoted->len = param->value.len;\n\n    if (log == NULL)\n      log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"unquoted not quoted: copied %zu bytes to %p, len=%zu, returning _MHD_UNQ_OK\\n\",\n              param->value.len, (void *)unquoted->str, unquoted->len);\n      fclose(log);\n    }\n\n    return _MHD_UNQ_OK;\n  }\n\n  unquoted->len =\n    MHD_str_unquote (param->value.str, param->value.len, unquoted->str);\n\n  if (log == NULL)\n    log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"after MHD_str_unquote: unquoted.str=%p, unquoted.len=%zu (orig len=%zu)\\n\",\n            (void *)unquoted->str, unquoted->len, param->value.len);\n    fclose(log);\n    log = NULL;\n  }\n\n  mhd_assert (0 != unquoted->len);\n  mhd_assert (unquoted->len < param->value.len);\n\n  if (log == NULL)\n    log = fopen(\"/tmp/logs/3558.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"final: unquoted.len=%zu, returning _MHD_UNQ_OK\\n\", unquoted->len);\n    fclose(log);\n  }\n\n  return _MHD_UNQ_OK;\n}\n"
}