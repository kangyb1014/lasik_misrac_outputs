{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the mhd_assert(0) in the default branch uses a constant controlling expression. The assert macro typically expands to a selection (e.g. if(!(expr)) ... or (expr) ? (void)0 : __assert()), so with expr == 0 the controlling expression is invariant (constant). This constitutes a Rule 14.3 violation (invariant controlling expression).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_and_grow_read_buffer_space code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2549.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_and_grow_read_buffer_space:\n```c\nstatic bool\ncheck_and_grow_read_buffer_space (struct MHD_Connection *c)\n{\n  /**\n   * The increase of read buffer size is desirable.\n   */\n  bool rbuff_grow_desired;\n  /**\n   * The increase of read buffer size is a hard requirement.\n   */\n  bool rbuff_grow_required;\n\n  mhd_assert (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info));\n  mhd_assert (! c->discard_request);\n\n  rbuff_grow_required = (c->read_buffer_offset == c->read_buffer_size);\n  if (rbuff_grow_required)\n    rbuff_grow_desired = true;\n  else\n  {\n    rbuff_grow_desired = (c->read_buffer_offset + c->daemon->pool_increment >\n                          c->read_buffer_size);\n\n    if ((rbuff_grow_desired) &&\n        (MHD_CONNECTION_BODY_RECEIVING == c->state))\n    {\n      if (! c->rq.have_chunked_upload)\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN != c->rq.remaining_upload_size);\n        /* Do not grow read buffer more than necessary to process the current\n           request. */\n        rbuff_grow_desired =\n          (c->rq.remaining_upload_size > c->read_buffer_size);\n      }\n      else\n      {\n        mhd_assert (MHD_SIZE_UNKNOWN == c->rq.remaining_upload_size);\n        if (0 == c->rq.current_chunk_size)\n          rbuff_grow_desired =  /* Reading value of the next chunk size */\n                               (MHD_CHUNK_HEADER_REASONABLE_LEN >\n                                c->read_buffer_size);\n        else\n        {\n          const uint64_t cur_chunk_left =\n            c->rq.current_chunk_size - c->rq.current_chunk_offset;\n          /* Do not grow read buffer more than necessary to process the current\n             chunk with terminating CRLF. */\n          mhd_assert (c->rq.current_chunk_offset <= c->rq.current_chunk_size);\n          rbuff_grow_desired =\n            ((cur_chunk_left + 2) > (uint64_t) (c->read_buffer_size));\n        }\n      }\n    }\n  }\n\n  if (! rbuff_grow_desired)\n    return true; /* No need to increase the buffer */\n\n  if (try_grow_read_buffer (c, rbuff_grow_required))\n    return true; /* Buffer increase succeed */\n\n  if (! rbuff_grow_required)\n    return true; /* Can continue without buffer increase */\n\n  /* Failed to increase the read buffer size, but need to read the data\n     from the network.\n     No more space left in the buffer, no more space to increase the buffer. */\n\n  /* 'PROCESS_READ' event state flag must be set only if the last application\n     callback has processed some data. If any data is processed then some\n     space in the read buffer must be available. */\n  mhd_assert (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info));\n\n  if ((! MHD_D_IS_USING_THREADS_ (c->daemon))\n      && (MHD_CONNECTION_BODY_RECEIVING == c->state)\n      && has_unprocessed_upload_body_data_in_buffer (c))\n  {\n    /* The application is handling processing cycles.\n       The data could be processed later. */\n    c->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n    return true;\n  }\n  else\n  {\n    enum MHD_ProcRecvDataStage stage;\n\n    switch (c->state)\n    {\n    case MHD_CONNECTION_INIT:\n      stage = MHD_PROC_RECV_INIT;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd)\n        stage = MHD_PROC_RECV_METHOD;\n      else if (0 == c->rq.req_target_len)\n        stage = MHD_PROC_RECV_URI;\n      else\n        stage = MHD_PROC_RECV_HTTPVER;\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      stage = MHD_PROC_RECV_HEADERS;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      stage = c->rq.have_chunked_upload ?\n              MHD_PROC_RECV_BODY_CHUNKED : MHD_PROC_RECV_BODY_NORMAL;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      stage = MHD_PROC_RECV_FOOTERS;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n    case MHD_CONNECTION_CONTINUE_SENDING:\n    case MHD_CONNECTION_BODY_RECEIVED:\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    case MHD_CONNECTION_START_REPLY:\n    case MHD_CONNECTION_HEADERS_SENDING:\n    case MHD_CONNECTION_HEADERS_SENT:\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    case MHD_CONNECTION_FOOTERS_SENDING:\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n    case MHD_CONNECTION_CLOSED:\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n#endif\n    default:\n      stage = MHD_PROC_RECV_BODY_NORMAL;\n      mhd_assert (0);\n    }\n\n    handle_recv_no_space (c, stage);\n  }\n  return false;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_and_grow_read_buffer_space code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_and_grow_read_buffer_space with it.\n  - Your function must have the exact same signature as check_and_grow_read_buffer_space.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_and_grow_read_buffer_space to check logs.\n  - Your function MUST preserve the original logic of check_and_grow_read_buffer_space as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_and_grow_read_buffer_space will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_and_grow_read_buffer_space as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_and_grow_read_buffer_space (struct MHD_Connection *c)\n{\n  FILE *log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER check_and_grow_read_buffer_space: c=%p, state=%d, event_loop_info=0x%08x, read_buffer_offset=%u, read_buffer_size=%u, discard_request=%d\\n\",\n            (void *) c,\n            (int) c->state,\n            (unsigned) c->event_loop_info,\n            (unsigned) c->read_buffer_offset,\n            (unsigned) c->read_buffer_size,\n            (int) c->discard_request);\n    fclose(log);\n  }\n\n  /**\n   * The increase of read buffer size is desirable.\n   */\n  bool rbuff_grow_desired;\n  /**\n   * The increase of read buffer size is a hard requirement.\n   */\n  bool rbuff_grow_required;\n\n  /* Log before first assert */\n  log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ASSERT CHECK: event_loop_info & MHD_EVENT_LOOP_INFO_READ = %d\\n\",\n            (int) (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info)));\n    fclose(log);\n  }\n  mhd_assert (0 != (MHD_EVENT_LOOP_INFO_READ & c->event_loop_info));\n\n  log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ASSERT CHECK: !discard_request = %d\\n\", (int) (! c->discard_request));\n    fclose(log);\n  }\n  mhd_assert (! c->discard_request);\n\n  rbuff_grow_required = (c->read_buffer_offset == c->read_buffer_size);\n  log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"rbuff_grow_required=%d (offset=%u, size=%u)\\n\",\n            (int) rbuff_grow_required,\n            (unsigned) c->read_buffer_offset,\n            (unsigned) c->read_buffer_size);\n    fclose(log);\n  }\n\n  if (rbuff_grow_required)\n    rbuff_grow_desired = true;\n  else\n  {\n    rbuff_grow_desired = (c->read_buffer_offset + c->daemon->pool_increment >\n                          c->read_buffer_size);\n\n    log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"rbuff_grow_desired initial=%d (offset+inc=%u, size=%u, inc=%u)\\n\",\n              (int) rbuff_grow_desired,\n              (unsigned) (c->read_buffer_offset + c->daemon->pool_increment),\n              (unsigned) c->read_buffer_size,\n              (unsigned) c->daemon->pool_increment);\n      fclose(log);\n    }\n\n    if ((rbuff_grow_desired) &&\n        (MHD_CONNECTION_BODY_RECEIVING == c->state))\n    {\n      if (! c->rq.have_chunked_upload)\n      {\n        log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"ASSERT CHECK: remaining_upload_size != MHD_SIZE_UNKNOWN -> remaining_upload_size=%llu\\n\",\n                  (unsigned long long) c->rq.remaining_upload_size);\n          fclose(log);\n        }\n        mhd_assert (MHD_SIZE_UNKNOWN != c->rq.remaining_upload_size);\n        /* Do not grow read buffer more than necessary to process the current\n           request. */\n        rbuff_grow_desired =\n          (c->rq.remaining_upload_size > c->read_buffer_size);\n\n        log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"not chunked: remaining_upload_size=%llu, read_buffer_size=%u, rbuff_grow_desired=%d\\n\",\n                  (unsigned long long) c->rq.remaining_upload_size,\n                  (unsigned) c->read_buffer_size,\n                  (int) rbuff_grow_desired);\n          fclose(log);\n        }\n      }\n      else\n      {\n        log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"ASSERT CHECK: remaining_upload_size == MHD_SIZE_UNKNOWN -> remaining_upload_size=%llu\\n\",\n                  (unsigned long long) c->rq.remaining_upload_size);\n          fclose(log);\n        }\n        mhd_assert (MHD_SIZE_UNKNOWN == c->rq.remaining_upload_size);\n        if (0 == c->rq.current_chunk_size)\n          rbuff_grow_desired =  /* Reading value of the next chunk size */\n                               (MHD_CHUNK_HEADER_REASONABLE_LEN >\n                                c->read_buffer_size);\n        else\n        {\n          const uint64_t cur_chunk_left =\n            c->rq.current_chunk_size - c->rq.current_chunk_offset;\n          /* Do not grow read buffer more than necessary to process the current\n             chunk with terminating CRLF. */\n          log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"ASSERT CHECK: current_chunk_offset <= current_chunk_size -> offset=%llu, size=%llu\\n\",\n                    (unsigned long long) c->rq.current_chunk_offset,\n                    (unsigned long long) c->rq.current_chunk_size);\n            fclose(log);\n          }\n          mhd_assert (c->rq.current_chunk_offset <= c->rq.current_chunk_size);\n          rbuff_grow_desired =\n            ((cur_chunk_left + 2) > (uint64_t) (c->read_buffer_size));\n\n          log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n          if (log)\n          {\n            fprintf(log, \"chunked: cur_chunk_left=%llu, read_buffer_size=%u, rbuff_grow_desired=%d\\n\",\n                    (unsigned long long) cur_chunk_left,\n                    (unsigned) c->read_buffer_size,\n                    (int) rbuff_grow_desired);\n            fclose(log);\n          }\n        }\n      }\n    }\n  }\n\n  log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"after evaluation: rbuff_grow_desired=%d\\n\", (int) rbuff_grow_desired);\n    fclose(log);\n  }\n\n  if (! rbuff_grow_desired)\n    return true; /* No need to increase the buffer */\n\n  if (try_grow_read_buffer (c, rbuff_grow_required))\n  {\n    log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"try_grow_read_buffer succeeded (required=%d)\\n\", (int) rbuff_grow_required);\n      fclose(log);\n    }\n    return true; /* Buffer increase succeed */\n  }\n\n  if (! rbuff_grow_required)\n  {\n    log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"grow not required and try_grow failed -> continue without increase\\n\");\n      fclose(log);\n    }\n    return true; /* Can continue without buffer increase */\n  }\n\n  /* Failed to increase the read buffer size, but need to read the data\n     from the network.\n     No more space left in the buffer, no more space to increase the buffer. */\n\n  /* 'PROCESS_READ' event state flag must be set only if the last application\n     callback has processed some data. If any data is processed then some\n     space in the read buffer must be available. */\n  log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ASSERT CHECK: PROCESS flag not set -> (PROCESS & event_loop_info)=%d\\n\",\n            (int) (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info)));\n    fclose(log);\n  }\n  mhd_assert (0 == (MHD_EVENT_LOOP_INFO_PROCESS & c->event_loop_info));\n\n  if ((! MHD_D_IS_USING_THREADS_ (c->daemon))\n      && (MHD_CONNECTION_BODY_RECEIVING == c->state)\n      && has_unprocessed_upload_body_data_in_buffer (c))\n  {\n    /* The application is handling processing cycles.\n       The data could be processed later. */\n    c->event_loop_info = MHD_EVENT_LOOP_INFO_PROCESS;\n    log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"set event_loop_info = PROCESS and return true (app handles processing)\\n\");\n      fclose(log);\n    }\n    return true;\n  }\n  else\n  {\n    enum MHD_ProcRecvDataStage stage;\n\n    switch (c->state)\n    {\n    case MHD_CONNECTION_INIT:\n      stage = MHD_PROC_RECV_INIT;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVING:\n      if (MHD_HTTP_MTHD_NO_METHOD == c->rq.http_mthd)\n        stage = MHD_PROC_RECV_METHOD;\n      else if (0 == c->rq.req_target_len)\n        stage = MHD_PROC_RECV_URI;\n      else\n        stage = MHD_PROC_RECV_HTTPVER;\n      break;\n    case MHD_CONNECTION_REQ_HEADERS_RECEIVING:\n      stage = MHD_PROC_RECV_HEADERS;\n      break;\n    case MHD_CONNECTION_BODY_RECEIVING:\n      stage = c->rq.have_chunked_upload ?\n              MHD_PROC_RECV_BODY_CHUNKED : MHD_PROC_RECV_BODY_NORMAL;\n      break;\n    case MHD_CONNECTION_FOOTERS_RECEIVING:\n      stage = MHD_PROC_RECV_FOOTERS;\n      break;\n    case MHD_CONNECTION_REQ_LINE_RECEIVED:\n    case MHD_CONNECTION_HEADERS_RECEIVED:\n    case MHD_CONNECTION_HEADERS_PROCESSED:\n    case MHD_CONNECTION_CONTINUE_SENDING:\n    case MHD_CONNECTION_BODY_RECEIVED:\n    case MHD_CONNECTION_FOOTERS_RECEIVED:\n    case MHD_CONNECTION_FULL_REQ_RECEIVED:\n    case MHD_CONNECTION_START_REPLY:\n    case MHD_CONNECTION_HEADERS_SENDING:\n    case MHD_CONNECTION_HEADERS_SENT:\n    case MHD_CONNECTION_NORMAL_BODY_UNREADY:\n    case MHD_CONNECTION_NORMAL_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_UNREADY:\n    case MHD_CONNECTION_CHUNKED_BODY_READY:\n    case MHD_CONNECTION_CHUNKED_BODY_SENT:\n    case MHD_CONNECTION_FOOTERS_SENDING:\n    case MHD_CONNECTION_FULL_REPLY_SENT:\n    case MHD_CONNECTION_CLOSED:\n#ifdef UPGRADE_SUPPORT\n    case MHD_CONNECTION_UPGRADE:\n#endif\n    default:\n      stage = MHD_PROC_RECV_BODY_NORMAL;\n      /* Log that we are about to hit the mhd_assert(0) path which is the\n         scenario of interest (invariant controlling expression in assert) */\n      log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"DEFAULT SWITCH: state=%d -> stage=%d, about to mhd_assert(0)\\n\",\n                (int) c->state, (int) stage);\n        fclose(log);\n      }\n      mhd_assert (0);\n    }\n\n    log = fopen(\"/tmp/logs/2549.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"calling handle_recv_no_space with stage=%d\\n\", (int) stage);\n      fclose(log);\n    }\n\n    handle_recv_no_space (c, stage);\n  }\n  return false;\n}\n"
}