{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'val %= divisor;' assigns to the function parameter 'val', modifying a parameter variable. MISRA C 2023 Rule 17.8 forbids modifying function parameters, so this is a violation. (Remedy: copy 'val' to a local variable and modify the local.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint64_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4152.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_uint64_to_str:\n```c\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_uint64_to_str code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_uint64_to_str with it.\n  - Your function must have the exact same signature as MHD_uint64_to_str.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_uint64_to_str to check logs.\n  - Your function MUST preserve the original logic of MHD_uint64_to_str as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_uint64_to_str will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_uint64_to_str as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  /* Prototypes for stdio functions to avoid depending on includes in the\n     surrounding translation unit. These are declarations only and match the\n     standard signatures. */\n  FILE *fopen(const char *, const char *);\n  int fprintf(FILE *, const char *, ...);\n  int fclose(FILE *);\n\n  FILE *log = fopen(\"/tmp/logs/4152.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"ENTER MHD_uint64_to_str: val=%llu, buf=%p, buf_size=%llu\\n\",\n            (unsigned long long) val, (void *) buf, (unsigned long long) buf_size);\n  }\n\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  if (log)\n  {\n    fprintf(log, \"initial divisor=%llu, initial digit=%d\\n\",\n            (unsigned long long) divisor, digit);\n  }\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n    if (log)\n    {\n      fprintf(log, \"skipping leading zero -> divisor=%llu, digit=%d\\n\",\n              (unsigned long long) divisor, digit);\n    }\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n    {\n      size_t ret = (size_t) (chr - buf);\n      if (log)\n      {\n        fprintf(log, \"returning (finished) length=%llu\\n\", (unsigned long long) ret);\n        fclose(log);\n      }\n      return ret;\n    }\n\n    if (log)\n    {\n      fprintf(log, \"about to modify parameter val: val=%llu, divisor=%llu\\n\",\n              (unsigned long long) val, (unsigned long long) divisor);\n    }\n\n    /* This is the statement reported as a Rule 17.8 violation: it modifies\n       the function parameter 'val'. We keep the original behavior but log\n       before and after the modification so the violation scenario can be\n       reproduced and inspected. */\n    val %= divisor;\n\n    if (log)\n    {\n      fprintf(log, \"after modification val=%llu\\n\", (unsigned long long) val);\n    }\n\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  if (log)\n  {\n    fprintf(log, \"buffer too small, returning 0\\n\");\n    fclose(log);\n  }\n  return 0; /* The buffer is too small */\n}\n"
}