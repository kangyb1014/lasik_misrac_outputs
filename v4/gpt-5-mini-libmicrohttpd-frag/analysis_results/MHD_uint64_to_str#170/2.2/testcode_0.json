{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf mhd_assert expands to an actual runtime check (e.g. a function or code that is executed in production) then the assertion is provably always true at that point (digit is derived from val/divisor where divisor = 10^19 and uint64_t val \u2264 18446744073709551615), so the check has no effect on program behaviour. Because the operation is executed but its removal would not affect behaviour, this constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_uint64_to_str code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4158.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_uint64_to_str:\n```c\nsize_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_uint64_to_str code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_uint64_to_str with it.\n  - Your function must have the exact same signature as MHD_uint64_to_str.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_uint64_to_str to check logs.\n  - Your function MUST preserve the original logic of MHD_uint64_to_str as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_uint64_to_str will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_uint64_to_str as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_uint64_to_str (uint64_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 18446744073709551615 */\n  uint64_t divisor = UINT64_C (10000000000000000000);\n  int digit;\n\n  /* Open log file (append mode). If it fails, continue without logging. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"MHD_uint64_to_str ENTER: val=%llu buf=%p buf_size=%zu divisor=%llu\\n\",\n              (unsigned long long) val, (void *) buf, buf_size, (unsigned long long) divisor);\n      fclose(logf);\n    }\n  }\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  {\n    FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"initial digit calc: val=%llu divisor=%llu digit=%d\\n\",\n              (unsigned long long) val, (unsigned long long) divisor, digit);\n      fclose(logf);\n    }\n  }\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    {\n      FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"leading-zero loop: new divisor=%llu digit=%d val=%llu\\n\",\n                (unsigned long long) divisor, digit, (unsigned long long) val);\n        fclose(logf);\n      }\n    }\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    {\n      FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"write digit: digit=%d buf_size=%zu chr=%p\\n\",\n                digit, buf_size, (void *) chr);\n        fclose(logf);\n      }\n    }\n\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n    {\n      size_t ret = (size_t) (chr - buf);\n      FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"return (final): %zu (all digits written)\\n\", ret);\n        fclose(logf);\n      }\n      return ret;\n    }\n    val %= divisor;\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    {\n      FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"next digit calc: val=%llu divisor=%llu digit=%d buf_size=%zu\\n\",\n                (unsigned long long) val, (unsigned long long) divisor, digit, buf_size);\n        fclose(logf);\n      }\n    }\n    mhd_assert (digit < 10);\n  }\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/4158.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"return 0: buffer too small\\n\");\n      fclose(logf);\n    }\n  }\n  return 0; /* The buffer is too small */\n}\n"
}