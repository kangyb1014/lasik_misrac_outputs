{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_params:\n```c\nstatic int\ncheck_params (int argc, char *const *const argv)\n{\n  size_t i;\n  unsigned int port_value;\n\n  if (2 > argc)\n    return 0;\n\n  for (i = 1; i < (unsigned int) argc; ++i)\n  {\n    if (0 == strcmp (argv[i], \"--md5\"))\n    { /* Force use MD5 */\n      force_md5 = ! 0;\n      force_sha256 = 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha256\"))\n    { /* Force use SHA-256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = ! 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha512-256\"))\n    { /* Force use SHA-512/256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = 0;\n      force_sha512_256 = ! 0;\n    }\n    else if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n      allow_rfc2069 = ! 0; /* Allow fallback to RFC2069. Not recommended! */\n    else if ((1 == sscanf (argv[i], \"%u\", &port_value))\n             && (0 < port_value) && (65535 >= port_value))\n      daemon_port = (uint16_t) port_value;\n    else\n    {\n      fprintf (stderr, \"Unrecognized parameter: %s\\n\",\n               argv[i]);\n      return 0;\n    }\n  }\n\n  if (force_sha512_256)\n    printf (\n      \"Note: when testing with curl/libcurl do not be surprised with failures as \"\n      \"libcurl incorrectly implements SHA-512/256 algorithm.\\n\");\n  return ! 0;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nelse if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n      allow_rfc2069 = ! 0; /* Allow fallback to RFC2069. Not recommended! */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The assignment allow_rfc2069 = !0 is a candidate for dead code if the variable is never read (or is always overwritten before any read) elsewhere in the project. In that situation the write is executed but its removal would not affect program behaviour, which violates MISRA C 2023 Rule 2.2. For example, if allow_rfc2069 is only assigned here and never used in any conditional or operation, or if later code unconditionally resets it before any use, this assignment is dead code."
}