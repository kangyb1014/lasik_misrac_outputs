{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code casts away const and assigns a const-qualified pointer to a non-const destination: 'const uint8_t *buf = (const uint8_t *) iov[i].iov_base;' then 'iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);'. This uses _MHD_DROP_CONST to remove const and store into iov_base (a non-const pointer), which violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_response_from_iovec code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3485.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_iovec:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_iovec (const struct MHD_IoVec *iov,\n                                unsigned int iovcnt,\n                                MHD_ContentReaderFreeCallback free_cb,\n                                void *cls)\n{\n  struct MHD_Response *response;\n  unsigned int i;\n  int i_cp = 0;   /**< Index in the copy of iov */\n  uint64_t total_size = 0;\n  const void *last_valid_buffer = NULL;\n\n  if ((NULL == iov) && (0 < iovcnt))\n    return NULL;\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n  /* Calculate final size, number of valid elements, and check 'iov' */\n  for (i = 0; i < iovcnt; ++i)\n  {\n    if (0 == iov[i].iov_len)\n      continue;     /* skip zero-sized elements */\n    if (NULL == iov[i].iov_base)\n    {\n      i_cp = -1;     /* error */\n      break;\n    }\n    if ( (total_size > (total_size + iov[i].iov_len)) ||\n         (INT_MAX == i_cp) ||\n         (SSIZE_MAX < (total_size + iov[i].iov_len)) )\n    {\n      i_cp = -1;     /* overflow */\n      break;\n    }\n    last_valid_buffer = iov[i].iov_base;\n    total_size += iov[i].iov_len;\n#if defined(MHD_POSIX_SOCKETS) || ! defined(_WIN64)\n    i_cp++;\n#else  /* ! MHD_POSIX_SOCKETS && _WIN64 */\n    {\n      int64_t i_add;\n\n      i_add = (int64_t) (iov[i].iov_len / ULONG_MAX);\n      if (0 != iov[i].iov_len % ULONG_MAX)\n        i_add++;\n      if (INT_MAX < (i_add + i_cp))\n      {\n        i_cp = -1;   /* overflow */\n        break;\n      }\n      i_cp += (int) i_add;\n    }\n#endif /* ! MHD_POSIX_SOCKETS && _WIN64 */\n  }\n  if (-1 == i_cp)\n  {\n    /* Some error condition */\n    MHD_mutex_destroy_chk_ (&response->mutex);\n    free (response);\n    return NULL;\n  }\n  response->fd = -1;\n  response->reference_count = 1;\n  response->total_size = total_size;\n  response->crc_cls = cls;\n  response->crfc = free_cb;\n  if (0 == i_cp)\n  {\n    mhd_assert (0 == total_size);\n    return response;\n  }\n  if (1 == i_cp)\n  {\n    mhd_assert (NULL != last_valid_buffer);\n    response->data = last_valid_buffer;\n    response->data_size = (size_t) total_size;\n    return response;\n  }\n  mhd_assert (1 < i_cp);\n  if (1)\n  { /* for local variables local scope only */\n    MHD_iovec_ *iov_copy;\n    int num_copy_elements = i_cp;\n\n    iov_copy = MHD_calloc_ ((size_t) num_copy_elements, \\\n                            sizeof(MHD_iovec_));\n    if (NULL == iov_copy)\n    {\n      MHD_mutex_destroy_chk_ (&response->mutex);\n      free (response);\n      return NULL;\n    }\n    i_cp = 0;\n    for (i = 0; i < iovcnt; ++i)\n    {\n      size_t element_size = iov[i].iov_len;\n      const uint8_t *buf = (const uint8_t *) iov[i].iov_base;\n\n      if (0 == element_size)\n        continue;         /* skip zero-sized elements */\n#if defined(MHD_WINSOCK_SOCKETS) && defined(_WIN64)\n      while (MHD_IOV_ELMN_MAX_SIZE < element_size)\n      {\n        iov_copy[i_cp].iov_base = (char *) _MHD_DROP_CONST (buf);\n        iov_copy[i_cp].iov_len = ULONG_MAX;\n        buf += ULONG_MAX;\n        element_size -= ULONG_MAX;\n        i_cp++;\n      }\n#endif /* MHD_WINSOCK_SOCKETS && _WIN64 */\n      iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);\n      iov_copy[i_cp].iov_len = (MHD_iov_size_) element_size;\n      i_cp++;\n    }\n    mhd_assert (num_copy_elements == i_cp);\n    mhd_assert (0 <= i_cp);\n    response->data_iov = iov_copy;\n    response->data_iovcnt = (unsigned int) i_cp;\n  }\n  return response;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_response_from_iovec code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_response_from_iovec with it.\n  - Your function must have the exact same signature as MHD_create_response_from_iovec.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_response_from_iovec to check logs.\n  - Your function MUST preserve the original logic of MHD_create_response_from_iovec as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_response_from_iovec will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_response_from_iovec as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_iovec (const struct MHD_IoVec *iov,\n                                unsigned int iovcnt,\n                                MHD_ContentReaderFreeCallback free_cb,\n                                void *cls)\n{\n  struct MHD_Response *response;\n  unsigned int i;\n  int i_cp = 0;   /**< Index in the copy of iov */\n  uint64_t total_size = 0;\n  const void *last_valid_buffer = NULL;\n\n  /* Minimal entry log to demonstrate reachability */\n  {\n    FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"ENTER: MHD_create_response_from_iovec(iov=%p, iovcnt=%u)\\n\", (void *) iov, iovcnt);\n      fclose(logf);\n    }\n  }\n\n  if ((NULL == iov) && (0 < iovcnt))\n  {\n    FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"EARLY_RETURN: NULL iov with non-zero iovcnt (%u)\\n\", iovcnt);\n      fclose(logf);\n    }\n    return NULL;\n  }\n\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n  {\n    FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"ALLOC_FAIL: response allocation failed\\n\");\n      fclose(logf);\n    }\n    return NULL;\n  }\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n    if (logf)\n    {\n      fprintf(logf, \"MUTEX_INIT_FAIL: response mutex init failed\\n\");\n      fclose(logf);\n    }\n    free (response);\n    return NULL;\n  }\n  /* Calculate final size, number of valid elements, and check 'iov' */\n  for (i = 0; i < iovcnt; ++i)\n  {\n    /* Log each iteration state */\n    {\n      FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"LOOP_ITER: i=%u, iov_len=%lu, iov_base=%p\\n\",\n                i, (unsigned long) iov[i].iov_len, iov[i].iov_base);\n        fclose(logf);\n      }\n    }\n\n    if (0 == iov[i].iov_len)\n      continue;     /* skip zero-sized elements */\n    if (NULL == iov[i].iov_base)\n    {\n      i_cp = -1;     /* error */\n      {\n        FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"ERROR: iov[%u].iov_base is NULL -> mark i_cp=-1\\n\", i);\n          fclose(logf);\n        }\n      }\n      break;\n    }\n    if ( (total_size > (total_size + iov[i].iov_len)) ||\n         (INT_MAX == i_cp) ||\n         (SSIZE_MAX < (total_size + iov[i].iov_len)) )\n    {\n      i_cp = -1;     /* overflow */\n      {\n        FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"ERROR: overflow detected at i=%u, total_size=%llu, add=%lu -> mark i_cp=-1\\n\",\n                  i, (unsigned long long) total_size, (unsigned long) iov[i].iov_len);\n          fclose(logf);\n        }\n      }\n      break;\n    }\n    last_valid_buffer = iov[i].iov_base;\n    total_size += iov[i].iov_len;\n#if defined(MHD_POSIX_SOCKETS) || ! defined(_WIN64)\n    i_cp++;\n#else  /* ! MHD_POSIX_SOCKETS && _WIN64 */\n    {\n      int64_t i_add;\n\n      i_add = (int64_t) (iov[i].iov_len / ULONG_MAX);\n      if (0 != iov[i].iov_len % ULONG_MAX)\n        i_add++;\n      if (INT_MAX < (i_add + i_cp))\n      {\n        i_cp = -1;   /* overflow */\n        break;\n      }\n      i_cp += (int) i_add;\n    }\n#endif /* ! MHD_POSIX_SOCKETS && _WIN64 */\n  }\n  if (-1 == i_cp)\n  {\n    /* Some error condition */\n    {\n      FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"FINAL_ERROR: i_cp == -1 -> cleaning up and returning NULL\\n\");\n        fclose(logf);\n      }\n    }\n    MHD_mutex_destroy_chk_ (&response->mutex);\n    free (response);\n    return NULL;\n  }\n  response->fd = -1;\n  response->reference_count = 1;\n  response->total_size = total_size;\n  response->crc_cls = cls;\n  response->crfc = free_cb;\n  if (0 == i_cp)\n  {\n    mhd_assert (0 == total_size);\n    {\n      FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"RETURN_EMPTY: i_cp==0, total_size=%llu\\n\", (unsigned long long) total_size);\n        fclose(logf);\n      }\n    }\n    return response;\n  }\n  if (1 == i_cp)\n  {\n    mhd_assert (NULL != last_valid_buffer);\n    response->data = last_valid_buffer;\n    response->data_size = (size_t) total_size;\n    {\n      FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"RETURN_SINGLE: i_cp==1, last_valid_buffer=%p, total_size=%llu\\n\",\n                last_valid_buffer, (unsigned long long) total_size);\n        fclose(logf);\n      }\n    }\n    return response;\n  }\n  mhd_assert (1 < i_cp);\n  if (1)\n  { /* for local variables local scope only */\n    MHD_iovec_ *iov_copy;\n    int num_copy_elements = i_cp;\n\n    iov_copy = MHD_calloc_ ((size_t) num_copy_elements, \\\n                            sizeof(MHD_iovec_));\n    if (NULL == iov_copy)\n    {\n      {\n        FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"ALLOC_FAIL: iov_copy allocation failed (num=%d)\\n\", num_copy_elements);\n          fclose(logf);\n        }\n      }\n      MHD_mutex_destroy_chk_ (&response->mutex);\n      free (response);\n      return NULL;\n    }\n    i_cp = 0;\n    for (i = 0; i < iovcnt; ++i)\n    {\n      size_t element_size = iov[i].iov_len;\n      const uint8_t *buf = (const uint8_t *) iov[i].iov_base;\n\n      if (0 == element_size)\n        continue;         /* skip zero-sized elements */\n#if defined(MHD_WINSOCK_SOCKETS) && defined(_WIN64)\n      while (MHD_IOV_ELMN_MAX_SIZE < element_size)\n      {\n        /* Log the split-assignment in the special Windows 64-bit case */\n        {\n          FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n          if (logf)\n          {\n            fprintf(logf, \"SPLIT_ASSIGN: i=%u, i_cp=%d, buf=%p, assign_len=%lu (part)\\n\",\n                    i, i_cp, (const void *) buf, (unsigned long) ULONG_MAX);\n            fclose(logf);\n          }\n        }\n        iov_copy[i_cp].iov_base = (char *) _MHD_DROP_CONST (buf);\n        iov_copy[i_cp].iov_len = ULONG_MAX;\n        buf += ULONG_MAX;\n        element_size -= ULONG_MAX;\n        i_cp++;\n      }\n#endif /* MHD_WINSOCK_SOCKETS && _WIN64 */\n\n      /* Here is the key assignment that removes constness in the original code. */\n      {\n        FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"BEFORE_ASSIGN: i=%u, i_cp=%d, buf=%p, element_size=%lu\\n\",\n                  i, i_cp, (const void *) buf, (unsigned long) element_size);\n          fclose(logf);\n        }\n      }\n\n      iov_copy[i_cp].iov_base = _MHD_DROP_CONST (buf);\n\n      {\n        FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n        if (logf)\n        {\n          fprintf(logf, \"AFTER_ASSIGN: i=%u, assigned_iov_base=%p, stored_len=%lu, new_i_cp=%d\\n\",\n                  i, iov_copy[i_cp].iov_base, (unsigned long) element_size, i_cp + 1);\n          fclose(logf);\n        }\n      }\n\n      iov_copy[i_cp].iov_len = (MHD_iov_size_) element_size;\n      i_cp++;\n    }\n    mhd_assert (num_copy_elements == i_cp);\n    mhd_assert (0 <= i_cp);\n    response->data_iov = iov_copy;\n    response->data_iovcnt = (unsigned int) i_cp;\n\n    {\n      FILE *logf = fopen(\"/tmp/logs/3485.txt\", \"a\");\n      if (logf)\n      {\n        fprintf(logf, \"FINAL: data_iov=%p, data_iovcnt=%u, total_size=%llu\\n\",\n                (void *) response->data_iov, response->data_iovcnt, (unsigned long long) response->total_size);\n        fclose(logf);\n      }\n    }\n  }\n  return response;\n}\n"
}