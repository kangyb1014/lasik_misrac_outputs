{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional \"if (1) { ... }\" is an always-true test that has no effect on program behavior. The evaluation of the constant expression and the surrounding if-statement are executed but can be removed without changing program semantics (the body would still always execute). Therefore this constitutes dead code under MISRA C 2023 Rule 2.2. Replace the redundant \"if (1)\" with the body directly or use a meaningful condition, or document/justify its necessity.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified internal_get_fdset2 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3968.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of internal_get_fdset2:\n```c\nstatic enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (daemon->shutdown)\n    return MHD_YES;\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (! itc_added)\n      result = MHD_NO;\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    if (MHD_add_to_fd_set_ (ls,\n                            read_fd_set,\n                            max_fd,\n                            fd_setsize))\n      ls = MHD_INVALID_SOCKET;   /* Already added */\n    else\n      result = MHD_NO;\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      if (! MHD_add_to_fd_set_ (pos->socket_fd,\n                                write_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n        (void) MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize);\n#endif /* MHD_POSIX_SOCKETS */\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      if ( (NULL == except_fd_set) ||\n           ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                 except_fd_set,\n                                 max_fd,\n                                 fd_setsize))\n        result = MHD_NO;\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      if (MHD_NO ==\n          urh_to_fdset (urh,\n                        read_fd_set,\n                        write_fd_set,\n                        except_fd_set,\n                        max_fd,\n                        fd_setsize))\n        result = MHD_NO;\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n        result = MHD_NO;\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n  return result;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified internal_get_fdset2 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original internal_get_fdset2 with it.\n  - Your function must have the exact same signature as internal_get_fdset2.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call internal_get_fdset2 to check logs.\n  - Your function MUST preserve the original logic of internal_get_fdset2 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, internal_get_fdset2 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of internal_get_fdset2 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\ninternal_get_fdset2 (struct MHD_Daemon *daemon,\n                     fd_set *read_fd_set,\n                     fd_set *write_fd_set,\n                     fd_set *except_fd_set,\n                     MHD_socket *max_fd,\n                     int fd_setsize)\n{\n  struct MHD_Connection *pos;\n  struct MHD_Connection *posn;\n  enum MHD_Result result = MHD_YES;\n  MHD_socket ls;\n  bool itc_added;\n  FILE *logf = NULL;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /* Open log file for probing control flow and state for violation reproduction */\n  logf = fopen(\"/tmp/logs/3968.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"internal_get_fdset2 entered: daemon=%p, fd_setsize=%d, initial_result=%d\\n\",\n            (void *) daemon,\n            fd_setsize,\n            (int) result);\n    fflush(logf);\n  }\n\n  if (daemon && daemon->shutdown)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"early return: daemon->shutdown == true\\n\");\n      fclose(logf);\n    }\n    return MHD_YES;\n  }\n\n  /* The order of FDs added is important for W32 sockets as W32 fd_set has\n     limits for number of added FDs instead of the limit for the higher\n     FD value. */\n\n  /* Add ITC FD first. The daemon must be able to respond on application\n     commands issued in other threads. */\n  itc_added = false;\n  if (daemon && MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    itc_added = MHD_add_to_fd_set_ (MHD_itc_r_fd_ (daemon->itc),\n                                    read_fd_set,\n                                    max_fd,\n                                    fd_setsize);\n    if (logf)\n    {\n      fprintf(logf, \"ITC valid: itc_fd=%lld, added=%d\\n\",\n              (long long) MHD_itc_r_fd_ (daemon->itc),\n              itc_added ? 1 : 0);\n      fflush(logf);\n    }\n    if (! itc_added)\n    {\n      result = MHD_NO;\n      if (logf)\n      {\n        fprintf(logf, \"result set to MHD_NO due to ITC add failure\\n\");\n        fflush(logf);\n      }\n    }\n  }\n\n  ls = daemon->was_quiesced ? MHD_INVALID_SOCKET : daemon->listen_fd;\n  if (logf)\n  {\n    fprintf(logf, \"listen socket initial state: was_quiesced=%d, listen_fd=%lld, ls=%lld\\n\",\n            daemon ? (int) daemon->was_quiesced : 0,\n            (long long) (daemon ? daemon->listen_fd : MHD_INVALID_SOCKET),\n            (long long) ls);\n    fflush(logf);\n  }\n\n  if (! itc_added &&\n      (MHD_INVALID_SOCKET != ls))\n  {\n    /* Add listen FD if ITC was not added. Listen FD could be used to signal\n       the daemon shutdown. */\n    {\n      bool _added = MHD_add_to_fd_set_ (ls,\n                                        read_fd_set,\n                                        max_fd,\n                                        fd_setsize);\n      if (logf)\n      {\n        fprintf(logf, \"attempted to add listen fd %lld to read_fd_set: added=%d\\n\",\n                (long long) ls, _added ? 1 : 0);\n        fflush(logf);\n      }\n      if (_added)\n        ls = MHD_INVALID_SOCKET;   /* Already added */\n      else\n      {\n        result = MHD_NO;\n        if (logf)\n        {\n          fprintf(logf, \"result set to MHD_NO due to listen fd add failure\\n\");\n          fflush(logf);\n        }\n      }\n    }\n  }\n\n  /* Add all sockets to 'except_fd_set' as well to watch for\n   * out-of-band data. However, ignore errors if INFO_READ\n   * or INFO_WRITE sockets will not fit 'except_fd_set'. */\n  /* Start from oldest connections. Make sense for W32 FDSETs. */\n  for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n  {\n    posn = pos->prev;\n\n    if (logf)\n    {\n      fprintf(logf, \"processing connection pos=%p socket_fd=%lld event_loop_info=%d\\n\",\n              (void *) pos,\n              (long long) pos->socket_fd,\n              (int) pos->event_loop_info);\n      fflush(logf);\n    }\n\n    switch (pos->event_loop_info)\n    {\n    case MHD_EVENT_LOOP_INFO_READ:\n    case MHD_EVENT_LOOP_INFO_PROCESS_READ:\n      {\n        bool _added = MHD_add_to_fd_set_ (pos->socket_fd,\n                                          read_fd_set,\n                                          max_fd,\n                                          fd_setsize);\n        if (! _added)\n          result = MHD_NO;\n        if (logf)\n        {\n          fprintf(logf, \"added to read_fd_set socket=%lld added=%d result=%d\\n\",\n                  (long long) pos->socket_fd,\n                  _added ? 1 : 0,\n                  (int) result);\n          fflush(logf);\n        }\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n      {\n        bool _eadded = MHD_add_to_fd_set_ (pos->socket_fd,\n                                           except_fd_set,\n                                           max_fd,\n                                           fd_setsize);\n        if (logf)\n        {\n          fprintf(logf, \"also attempted to add socket=%lld to except_fd_set added=%d\\n\",\n                  (long long) pos->socket_fd,\n                  _eadded ? 1 : 0);\n          fflush(logf);\n        }\n      }\n#endif /* MHD_POSIX_SOCKETS */\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_WRITE:\n      {\n        bool _added = MHD_add_to_fd_set_ (pos->socket_fd,\n                                          write_fd_set,\n                                          max_fd,\n                                          fd_setsize);\n        if (! _added)\n          result = MHD_NO;\n        if (logf)\n        {\n          fprintf(logf, \"added to write_fd_set socket=%lld added=%d result=%d\\n\",\n                  (long long) pos->socket_fd,\n                  _added ? 1 : 0,\n                  (int) result);\n          fflush(logf);\n        }\n#ifdef MHD_POSIX_SOCKETS\n      if (NULL != except_fd_set)\n      {\n        bool _eadded = MHD_add_to_fd_set_ (pos->socket_fd,\n                                           except_fd_set,\n                                           max_fd,\n                                           fd_setsize);\n        if (logf)\n        {\n          fprintf(logf, \"also attempted to add socket=%lld to except_fd_set added=%d\\n\",\n                  (long long) pos->socket_fd,\n                  _eadded ? 1 : 0);\n          fflush(logf);\n        }\n      }\n#endif /* MHD_POSIX_SOCKETS */\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_PROCESS:\n      {\n        if ( (NULL == except_fd_set) ||\n             ! MHD_add_to_fd_set_ (pos->socket_fd,\n                                   except_fd_set,\n                                   max_fd,\n                                   fd_setsize))\n          result = MHD_NO;\n        if (logf)\n        {\n          fprintf(logf, \"process/info: socket=%lld except_fd_set=%p result=%d\\n\",\n                  (long long) pos->socket_fd,\n                  (void *) except_fd_set,\n                  (int) result);\n          fflush(logf);\n        }\n      }\n      break;\n    case MHD_EVENT_LOOP_INFO_CLEANUP:\n      /* this should never happen */\n      if (logf)\n      {\n        fprintf(logf, \"encountered MHD_EVENT_LOOP_INFO_CLEANUP for pos=%p (should not happen)\\n\",\n                (void *) pos);\n        fflush(logf);\n      }\n      break;\n    }\n  }\n#ifdef MHD_WINSOCK_SOCKETS\n  /* W32 use limited array for fd_set so add INFO_READ/INFO_WRITE sockets\n   * only after INFO_BLOCK sockets to ensure that INFO_BLOCK sockets will\n   * not be pushed out. */\n  if (NULL != except_fd_set)\n  {\n    for (pos = daemon->connections_tail; NULL != pos; pos = posn)\n    {\n      posn = pos->prev;\n      MHD_add_to_fd_set_ (pos->socket_fd,\n                          except_fd_set,\n                          max_fd,\n                          fd_setsize);\n      if (logf)\n      {\n        fprintf(logf, \"winsock: attempted to add socket=%lld to except_fd_set\\n\",\n                (long long) pos->socket_fd);\n        fflush(logf);\n      }\n    }\n  }\n#endif /* MHD_WINSOCK_SOCKETS */\n#if defined(HTTPS_SUPPORT) && defined(UPGRADE_SUPPORT)\n  if (1)\n  {\n    /* This constant condition is intentionally always true in the original\n       code. Log it so that this always-true branch (dead code per MISRA\n       Rule 2.2 definition) can be evidenced during testing. */\n    if (logf)\n    {\n      fprintf(logf, \"evaluated constant if(1) for UPGRADE_SUPPORT block: entering upgrade response handle loop\\n\");\n      fflush(logf);\n    }\n\n    struct MHD_UpgradeResponseHandle *urh;\n\n    for (urh = daemon->urh_tail; NULL != urh; urh = urh->prev)\n    {\n      enum MHD_Result _r = urh_to_fdset (urh,\n                                        read_fd_set,\n                                        write_fd_set,\n                                        except_fd_set,\n                                        max_fd,\n                                        fd_setsize);\n      if (MHD_NO == _r)\n        result = MHD_NO;\n      if (logf)\n      {\n        fprintf(logf, \"urh=%p urh_to_fdset returned=%d result=%d\\n\",\n                (void *) urh,\n                (int) _r,\n                (int) result);\n        fflush(logf);\n      }\n    }\n  }\n#endif\n\n  if (MHD_INVALID_SOCKET != ls)\n  {\n    /* The listen socket is present and hasn't been added */\n    if ((daemon->connections < daemon->connection_limit) &&\n        ! daemon->at_limit)\n    {\n      if (! MHD_add_to_fd_set_ (ls,\n                                read_fd_set,\n                                max_fd,\n                                fd_setsize))\n      {\n        result = MHD_NO;\n        if (logf)\n        {\n          fprintf(logf, \"failed to add final listen socket=%lld to read_fd_set, result=MHD_NO\\n\",\n                  (long long) ls);\n          fflush(logf);\n        }\n      }\n      else if (logf)\n      {\n        fprintf(logf, \"final listen socket=%lld added to read_fd_set successfully\\n\",\n                (long long) ls);\n        fflush(logf);\n      }\n    }\n  }\n\n#if _MHD_DEBUG_CONNECT\n#ifdef HAVE_MESSAGES\n  if (NULL != max_fd)\n    MHD_DLOG (daemon,\n              _ (\"Maximum socket in select set: %d\\n\"),\n              *max_fd);\n#endif\n#endif /* HTTPS_SUPPORT && UPGRADE_SUPPORT */\n\n  if (logf)\n  {\n    fprintf(logf, \"internal_get_fdset2 exiting: result=%d\\n\", (int) result);\n    fclose(logf);\n  }\n  return result;\n}\n"
}