{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer overflow if buffer_append_s internally uses standard string functions without checking remaining space. The code does not verify that (buf_size - pos) is large enough to hold \"ICY\" before calling buffer_append_s. If c->write_buffer_append_offset (pos) is close to buf_size (for example pos == buf_size or buf_size - pos < 3 or < 4 if a NUL/terminator is copied), an internal strcpy/memcpy/strcat used by buffer_append_s would write past buf end, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified build_header_response code that contains useful probe functions that print useful logs to a file \"/tmp/logs/453.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of build_header_response:\n```c\nstatic enum MHD_Result\nbuild_header_response (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response; /**< a short alias */\n  char *buf;                                     /**< the output buffer */\n  size_t pos;                                    /**< append offset in the @a buf */\n  size_t buf_size;                               /**< the size of the @a buf */\n  size_t el_size;                                /**< the size of current element to be added to the @a buf */\n  unsigned rcode;                                /**< the response code */\n  bool use_conn_close;                           /**< Use \"Connection: close\" header */\n  bool use_conn_k_alive;                         /**< Use \"Connection: Keep-Alive\" header */\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust response properties ** */\n  setup_reply_properties (c);\n\n  mhd_assert (c->rp.props.set);\n  mhd_assert ((MHD_CONN_MUST_CLOSE == c->keepalive) || \\\n              (MHD_CONN_USE_KEEPALIVE == c->keepalive) || \\\n              (MHD_CONN_MUST_UPGRADE == c->keepalive));\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ((NULL == r->upgrade_handler) || \\\n              (MHD_CONN_MUST_UPGRADE == c->keepalive));\n#else  /* ! UPGRADE_SUPPORT */\n  mhd_assert (MHD_CONN_MUST_UPGRADE != c->keepalive);\n#endif /* ! UPGRADE_SUPPORT */\n  mhd_assert ((! c->rp.props.chunked) || c->rp.props.use_reply_body_headers);\n  mhd_assert ((! c->rp.props.send_reply_body) || \\\n              c->rp.props.use_reply_body_headers);\n#ifdef UPGRADE_SUPPORT\n  mhd_assert (NULL == r->upgrade_handler || \\\n              ! c->rp.props.use_reply_body_headers);\n#endif /* UPGRADE_SUPPORT */\n\n  check_connection_reply (c);\n\n  rcode = (unsigned) c->rp.responseCode;\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    /* The closure of connection must be always indicated by header\n     * to avoid hung connections */\n    use_conn_close = true;\n    use_conn_k_alive = false;\n  }\n  else if (MHD_CONN_USE_KEEPALIVE == c->keepalive)\n  {\n    use_conn_close = false;\n    /* Add \"Connection: keep-alive\" if request is HTTP/1.0 or\n     * if reply is HTTP/1.0\n     * For HTTP/1.1 add header only if explicitly requested by app\n     * (by response flag), as \"Keep-Alive\" is default for HTTP/1.1. */\n    if ((0 != (r->flags & MHD_RF_SEND_KEEP_ALIVE_HEADER)) ||\n        (MHD_HTTP_VER_1_0 == c->rq.http_ver) ||\n        (0 != (r->flags & MHD_RF_HTTP_1_0_SERVER)))\n      use_conn_k_alive = true;\n    else\n      use_conn_k_alive = false;\n  }\n  else\n  {\n    use_conn_close = false;\n    use_conn_k_alive = false;\n  }\n\n  /* ** Actually build the response header ** */\n\n  /* Get all space available */\n  connection_maximize_write_buffer (c);\n  buf = c->write_buffer;\n  pos = c->write_buffer_append_offset;\n  buf_size = c->write_buffer_size;\n  if (0 == buf_size)\n    return MHD_NO;\n  mhd_assert (NULL != buf);\n\n  /* * The status line * */\n\n  /* The HTTP version */\n  if (! c->rp.responseIcy)\n  { /* HTTP reply */\n    if (0 == (r->flags & MHD_RF_HTTP_1_0_SERVER))\n    { /* HTTP/1.1 reply */\n      /* Use HTTP/1.1 responses for HTTP/1.0 clients.\n       * See https://datatracker.ietf.org/doc/html/rfc7230#section-2.6 */\n      if (! buffer_append_s (buf, &pos, buf_size, MHD_HTTP_VERSION_1_1))\n        return MHD_NO;\n    }\n    else\n    { /* HTTP/1.0 reply */\n      if (! buffer_append_s (buf, &pos, buf_size, MHD_HTTP_VERSION_1_0))\n        return MHD_NO;\n    }\n  }\n  else\n  { /* ICY reply */\n    if (! buffer_append_s (buf, &pos, buf_size, \"ICY\"))\n      return MHD_NO;\n  }\n\n  /* The response code */\n  if (buf_size < pos + 5) /* space + code + space */\n    return MHD_NO;\n  buf[pos++] = ' ';\n  pos += MHD_uint16_to_str ((uint16_t) rcode, buf + pos,\n                            buf_size - pos);\n  buf[pos++] = ' ';\n\n  /* The reason phrase */\n  el_size = MHD_get_reason_phrase_len_for (rcode);\n  if (0 == el_size)\n  {\n    if (! buffer_append_s (buf, &pos, buf_size, \"Non-Standard Status\"))\n      return MHD_NO;\n  }\n  else if (! buffer_append (buf, &pos, buf_size,\n                            MHD_get_reason_phrase_for (rcode),\n                            el_size))\n    return MHD_NO;\n\n  /* The linefeed */\n  if (buf_size < pos + 2)\n    return MHD_NO;\n  buf[pos++] = '\\r';\n  buf[pos++] = '\\n';\n\n  /* * The headers * */\n\n  /* Main automatic headers */\n\n  /* The \"Date:\" header */\n  if ( (0 == (r->flags_auto & MHD_RAF_HAS_DATE_HDR)) &&\n       (0 == (c->daemon->options & MHD_USE_SUPPRESS_DATE_NO_CLOCK)) )\n  {\n    /* Additional byte for unused zero-termination */\n    if (buf_size < pos + 38)\n      return MHD_NO;\n    if (get_date_header (buf + pos))\n      pos += 37;\n  }\n  /* The \"Connection:\" header */\n  mhd_assert (! use_conn_close || ! use_conn_k_alive);\n  mhd_assert (! use_conn_k_alive || ! use_conn_close);\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    if (use_conn_close)\n    {\n      if (! buffer_append_s (buf, &pos, buf_size,\n                             MHD_HTTP_HEADER_CONNECTION \": close\\r\\n\"))\n        return MHD_NO;\n    }\n    else if (use_conn_k_alive)\n    {\n      if (! buffer_append_s (buf, &pos, buf_size,\n                             MHD_HTTP_HEADER_CONNECTION \": Keep-Alive\\r\\n\"))\n        return MHD_NO;\n    }\n  }\n\n  /* User-defined headers */\n\n  if (! add_user_headers (buf, &pos, buf_size, r,\n                          ! c->rp.props.chunked,\n                          (! c->rp.props.use_reply_body_headers) &&\n                          (0 ==\n                           (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)),\n                          use_conn_close,\n                          use_conn_k_alive))\n    return MHD_NO;\n\n  /* Other automatic headers */\n\n  if ( (c->rp.props.use_reply_body_headers) &&\n       (0 == (r->flags & MHD_RF_HEAD_ONLY_RESPONSE)) )\n  {\n    /* Body-specific headers */\n\n    if (c->rp.props.chunked)\n    { /* Chunked encoding is used */\n      if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      { /* No chunked encoding header set by user */\n        if (! buffer_append_s (buf, &pos, buf_size,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING \": \" \\\n                               \"chunked\\r\\n\"))\n          return MHD_NO;\n      }\n    }\n    else /* Chunked encoding is not used */\n    {\n      if (MHD_SIZE_UNKNOWN != r->total_size)\n      { /* The size is known */\n        if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n        { /* The response does not have \"Content-Length\" header */\n          if (! buffer_append_s (buf, &pos, buf_size,\n                                 MHD_HTTP_HEADER_CONTENT_LENGTH \": \"))\n            return MHD_NO;\n          el_size = MHD_uint64_to_str (r->total_size, buf + pos,\n                                       buf_size - pos);\n          if (0 == el_size)\n            return MHD_NO;\n          pos += el_size;\n\n          if (buf_size < pos + 2)\n            return MHD_NO;\n          buf[pos++] = '\\r';\n          buf[pos++] = '\\n';\n        }\n      }\n    }\n  }\n\n  /* * Header termination * */\n  if (buf_size < pos + 2)\n    return MHD_NO;\n  buf[pos++] = '\\r';\n  buf[pos++] = '\\n';\n\n  c->write_buffer_append_offset = pos;\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified build_header_response code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original build_header_response with it.\n  - Your function must have the exact same signature as build_header_response.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call build_header_response to check logs.\n  - Your function MUST preserve the original logic of build_header_response as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, build_header_response will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of build_header_response as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static enum MHD_Result\nbuild_header_response (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response; /**< a short alias */\n  char *buf;                                     /**< the output buffer */\n  size_t pos;                                    /**< append offset in the @a buf */\n  size_t buf_size;                               /**< the size of the @a buf */\n  size_t el_size;                                /**< the size of current element to be added to the @a buf */\n  unsigned rcode;                                /**< the response code */\n  bool use_conn_close;                           /**< Use \"Connection: close\" header */\n  bool use_conn_k_alive;                         /**< Use \"Connection: Keep-Alive\" header */\n  FILE *log_fp = NULL;\n\n  mhd_assert (NULL != r);\n\n  /* open log file for append; do not fail if logging cannot be performed */\n  log_fp = fopen(\"/tmp/logs/453.txt\", \"a\");\n  if (log_fp)\n  {\n    fprintf(log_fp, \"ENTER build_header_response: connection=%p, c=%p, r=%p\\n\",\n            (void *)connection, (void *)c, (void *)r);\n  }\n\n  /* ** Adjust response properties ** */\n  setup_reply_properties (c);\n\n  mhd_assert (c->rp.props.set);\n  mhd_assert ((MHD_CONN_MUST_CLOSE == c->keepalive) || \\\n              (MHD_CONN_USE_KEEPALIVE == c->keepalive) || \\\n              (MHD_CONN_MUST_UPGRADE == c->keepalive));\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ((NULL == r->upgrade_handler) || \\\n              (MHD_CONN_MUST_UPGRADE == c->keepalive));\n#else  /* ! UPGRADE_SUPPORT */\n  mhd_assert (MHD_CONN_MUST_UPGRADE != c->keepalive);\n#endif /* ! UPGRADE_SUPPORT */\n  mhd_assert ((! c->rp.props.chunked) || c->rp.props.use_reply_body_headers);\n  mhd_assert ((! c->rp.props.send_reply_body) || \\\n              c->rp.props.use_reply_body_headers);\n#ifdef UPGRADE_SUPPORT\n  mhd_assert (NULL == r->upgrade_handler || \\\n              ! c->rp.props.use_reply_body_headers);\n#endif /* UPGRADE_SUPPORT */\n\n  check_connection_reply (c);\n\n  rcode = (unsigned) c->rp.responseCode;\n  if (MHD_CONN_MUST_CLOSE == c->keepalive)\n  {\n    /* The closure of connection must be always indicated by header\n     * to avoid hung connections */\n    use_conn_close = true;\n    use_conn_k_alive = false;\n  }\n  else if (MHD_CONN_USE_KEEPALIVE == c->keepalive)\n  {\n    use_conn_close = false;\n    /* Add \"Connection: keep-alive\" if request is HTTP/1.0 or\n     * if reply is HTTP/1.0\n     * For HTTP/1.1 add header only if explicitly requested by app\n     * (by response flag), as \"Keep-Alive\" is default for HTTP/1.1. */\n    if ((0 != (r->flags & MHD_RF_SEND_KEEP_ALIVE_HEADER)) ||\n        (MHD_HTTP_VER_1_0 == c->rq.http_ver) ||\n        (0 != (r->flags & MHD_RF_HTTP_1_0_SERVER)))\n      use_conn_k_alive = true;\n    else\n      use_conn_k_alive = false;\n  }\n  else\n  {\n    use_conn_close = false;\n    use_conn_k_alive = false;\n  }\n\n  /* ** Actually build the response header ** */\n\n  /* Get all space available */\n  connection_maximize_write_buffer (c);\n  buf = c->write_buffer;\n  pos = c->write_buffer_append_offset;\n  buf_size = c->write_buffer_size;\n  if (log_fp)\n    fprintf(log_fp, \"AFTER maximize: buf=%p pos=%zu buf_size=%zu append_offset=%zu\\n\",\n            (void *)buf, pos, buf_size, c->write_buffer_append_offset);\n\n  if (0 == buf_size)\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: buf_size == 0\\n\");\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  mhd_assert (NULL != buf);\n\n  /* * The status line * */\n\n  /* The HTTP version */\n  if (! c->rp.responseIcy)\n  { /* HTTP reply */\n    if (0 == (r->flags & MHD_RF_HTTP_1_0_SERVER))\n    { /* HTTP/1.1 reply */\n      /* Use HTTP/1.1 responses for HTTP/1.0 clients.\n       * See https://datatracker.ietf.org/doc/html/rfc7230#section-2.6 */\n      if (log_fp)\n        fprintf(log_fp, \"APPEND: HTTP/1.1 at pos=%zu remaining=%zu\\n\",\n                pos, (buf_size > pos) ? (buf_size - pos) : 0);\n      if (! buffer_append_s (buf, &pos, buf_size, MHD_HTTP_VERSION_1_1))\n      {\n        if (log_fp)\n          fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(HTTP/1.1) failed pos=%zu buf_size=%zu\\n\",\n                  pos, buf_size);\n        if (log_fp) fclose(log_fp);\n        return MHD_NO;\n      }\n      if (log_fp)\n        fprintf(log_fp, \"APPENDED: HTTP/1.1 new pos=%zu\\n\", pos);\n    }\n    else\n    { /* HTTP/1.0 reply */\n      if (log_fp)\n        fprintf(log_fp, \"APPEND: HTTP/1.0 at pos=%zu remaining=%zu\\n\",\n                pos, (buf_size > pos) ? (buf_size - pos) : 0);\n      if (! buffer_append_s (buf, &pos, buf_size, MHD_HTTP_VERSION_1_0))\n      {\n        if (log_fp)\n          fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(HTTP/1.0) failed pos=%zu buf_size=%zu\\n\",\n                  pos, buf_size);\n        if (log_fp) fclose(log_fp);\n        return MHD_NO;\n      }\n      if (log_fp)\n        fprintf(log_fp, \"APPENDED: HTTP/1.0 new pos=%zu\\n\", pos);\n    }\n  }\n  else\n  { /* ICY reply */\n    if (log_fp)\n      fprintf(log_fp, \"APPEND: ICY at pos=%zu remaining=%zu\\n\",\n              pos, (buf_size > pos) ? (buf_size - pos) : 0);\n    if (! buffer_append_s (buf, &pos, buf_size, \"ICY\"))\n    {\n      if (log_fp)\n        fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(ICY) failed pos=%zu buf_size=%zu\\n\",\n                pos, buf_size);\n      if (log_fp) fclose(log_fp);\n      return MHD_NO;\n    }\n    if (log_fp)\n      fprintf(log_fp, \"APPENDED: ICY new pos=%zu\\n\", pos);\n  }\n\n  /* The response code */\n  if (buf_size < pos + 5) /* space + code + space */\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: not enough space for response code pos=%zu buf_size=%zu\\n\",\n              pos, buf_size);\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  buf[pos++] = ' ';\n  pos += MHD_uint16_to_str ((uint16_t) rcode, buf + pos,\n                            buf_size - pos);\n  buf[pos++] = ' ';\n\n  /* The reason phrase */\n  el_size = MHD_get_reason_phrase_len_for (rcode);\n  if (0 == el_size)\n  {\n    if (log_fp)\n      fprintf(log_fp, \"APPEND: Non-Standard Status at pos=%zu remaining=%zu\\n\",\n              pos, (buf_size > pos) ? (buf_size - pos) : 0);\n    if (! buffer_append_s (buf, &pos, buf_size, \"Non-Standard Status\"))\n    {\n      if (log_fp)\n        fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(Non-Standard Status) failed pos=%zu buf_size=%zu\\n\",\n                pos, buf_size);\n      if (log_fp) fclose(log_fp);\n      return MHD_NO;\n    }\n    if (log_fp)\n      fprintf(log_fp, \"APPENDED: Non-Standard Status new pos=%zu\\n\", pos);\n  }\n  else if (! buffer_append (buf, &pos, buf_size,\n                            MHD_get_reason_phrase_for (rcode),\n                            el_size))\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: buffer_append(reason phrase) failed pos=%zu buf_size=%zu el_size=%zu\\n\",\n              pos, buf_size, el_size);\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  else\n  {\n    if (log_fp)\n      fprintf(log_fp, \"APPENDED: reason phrase new pos=%zu\\n\", pos);\n  }\n\n  /* The linefeed */\n  if (buf_size < pos + 2)\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: not enough space for linefeed pos=%zu buf_size=%zu\\n\",\n              pos, buf_size);\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  buf[pos++] = '\\r';\n  buf[pos++] = '\\n';\n\n  /* * The headers * */\n\n  /* Main automatic headers */\n\n  /* The \"Date:\" header */\n  if ( (0 == (r->flags_auto & MHD_RAF_HAS_DATE_HDR)) &&\n       (0 == (c->daemon->options & MHD_USE_SUPPRESS_DATE_NO_CLOCK)) )\n  {\n    /* Additional byte for unused zero-termination */\n    if (buf_size < pos + 38)\n    {\n      if (log_fp)\n        fprintf(log_fp, \"RETURN MHD_NO: not enough space for Date header pos=%zu buf_size=%zu\\n\",\n                pos, buf_size);\n      if (log_fp) fclose(log_fp);\n      return MHD_NO;\n    }\n    if (get_date_header (buf + pos))\n      pos += 37;\n    if (log_fp)\n      fprintf(log_fp, \"ADDED Date header new pos=%zu\\n\", pos);\n  }\n  /* The \"Connection:\" header */\n  mhd_assert (! use_conn_close || ! use_conn_k_alive);\n  mhd_assert (! use_conn_k_alive || ! use_conn_close);\n  if (0 == (r->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    if (use_conn_close)\n    {\n      if (log_fp)\n        fprintf(log_fp, \"APPEND: Connection: close at pos=%zu remaining=%zu\\n\",\n                pos, (buf_size > pos) ? (buf_size - pos) : 0);\n      if (! buffer_append_s (buf, &pos, buf_size,\n                             MHD_HTTP_HEADER_CONNECTION \": close\\r\\n\"))\n      {\n        if (log_fp)\n          fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(Connection: close) failed pos=%zu buf_size=%zu\\n\",\n                  pos, buf_size);\n        if (log_fp) fclose(log_fp);\n        return MHD_NO;\n      }\n      if (log_fp)\n        fprintf(log_fp, \"APPENDED: Connection: close new pos=%zu\\n\", pos);\n    }\n    else if (use_conn_k_alive)\n    {\n      if (log_fp)\n        fprintf(log_fp, \"APPEND: Connection: Keep-Alive at pos=%zu remaining=%zu\\n\",\n                pos, (buf_size > pos) ? (buf_size - pos) : 0);\n      if (! buffer_append_s (buf, &pos, buf_size,\n                             MHD_HTTP_HEADER_CONNECTION \": Keep-Alive\\r\\n\"))\n      {\n        if (log_fp)\n          fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(Connection: Keep-Alive) failed pos=%zu buf_size=%zu\\n\",\n                  pos, buf_size);\n        if (log_fp) fclose(log_fp);\n        return MHD_NO;\n      }\n      if (log_fp)\n        fprintf(log_fp, \"APPENDED: Connection: Keep-Alive new pos=%zu\\n\", pos);\n    }\n  }\n\n  /* User-defined headers */\n\n  if (! add_user_headers (buf, &pos, buf_size, r,\n                          ! c->rp.props.chunked,\n                          (! c->rp.props.use_reply_body_headers) &&\n                          (0 ==\n                           (r->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)),\n                          use_conn_close,\n                          use_conn_k_alive))\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: add_user_headers failed pos=%zu buf_size=%zu\\n\",\n              pos, buf_size);\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  if (log_fp)\n    fprintf(log_fp, \"AFTER add_user_headers pos=%zu buf_size=%zu\\n\", pos, buf_size);\n\n  /* Other automatic headers */\n\n  if ( (c->rp.props.use_reply_body_headers) &&\n       (0 == (r->flags & MHD_RF_HEAD_ONLY_RESPONSE)) )\n  {\n    /* Body-specific headers */\n\n    if (c->rp.props.chunked)\n    { /* Chunked encoding is used */\n      if (0 == (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n      { /* No chunked encoding header set by user */\n        if (log_fp)\n          fprintf(log_fp, \"APPEND: Transfer-Encoding: chunked at pos=%zu remaining=%zu\\n\",\n                  pos, (buf_size > pos) ? (buf_size - pos) : 0);\n        if (! buffer_append_s (buf, &pos, buf_size,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING \": \" \\\n                               \"chunked\\r\\n\"))\n        {\n          if (log_fp)\n            fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(Transfer-Encoding: chunked) failed pos=%zu buf_size=%zu\\n\",\n                    pos, buf_size);\n          if (log_fp) fclose(log_fp);\n          return MHD_NO;\n        }\n        if (log_fp)\n          fprintf(log_fp, \"APPENDED: Transfer-Encoding: chunked new pos=%zu\\n\", pos);\n      }\n    }\n    else /* Chunked encoding is not used */\n    {\n      if (MHD_SIZE_UNKNOWN != r->total_size)\n      { /* The size is known */\n        if (0 == (r->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n        { /* The response does not have \"Content-Length\" header */\n          if (log_fp)\n            fprintf(log_fp, \"APPEND: Content-Length: at pos=%zu remaining=%zu\\n\",\n                    pos, (buf_size > pos) ? (buf_size - pos) : 0);\n          if (! buffer_append_s (buf, &pos, buf_size,\n                                 MHD_HTTP_HEADER_CONTENT_LENGTH \": \"))\n          {\n            if (log_fp)\n              fprintf(log_fp, \"RETURN MHD_NO: buffer_append_s(Content-Length:) failed pos=%zu buf_size=%zu\\n\",\n                      pos, buf_size);\n            if (log_fp) fclose(log_fp);\n            return MHD_NO;\n          }\n          if (log_fp)\n            fprintf(log_fp, \"APPENDED: Content-Length: prefix new pos=%zu\\n\", pos);\n\n          el_size = MHD_uint64_to_str (r->total_size, buf + pos,\n                                       buf_size - pos);\n          if (0 == el_size)\n          {\n            if (log_fp)\n              fprintf(log_fp, \"RETURN MHD_NO: MHD_uint64_to_str failed or no space pos=%zu buf_size=%zu\\n\",\n                      pos, buf_size);\n            if (log_fp) fclose(log_fp);\n            return MHD_NO;\n          }\n          pos += el_size;\n\n          if (buf_size < pos + 2)\n          {\n            if (log_fp)\n              fprintf(log_fp, \"RETURN MHD_NO: not enough space after content-length pos=%zu buf_size=%zu\\n\",\n                      pos, buf_size);\n            if (log_fp) fclose(log_fp);\n            return MHD_NO;\n          }\n          buf[pos++] = '\\r';\n          buf[pos++] = '\\n';\n          if (log_fp)\n            fprintf(log_fp, \"APPENDED: Content-Length full new pos=%zu\\n\", pos);\n        }\n      }\n    }\n  }\n\n  /* * Header termination * */\n  if (buf_size < pos + 2)\n  {\n    if (log_fp)\n      fprintf(log_fp, \"RETURN MHD_NO: not enough space for header termination pos=%zu buf_size=%zu\\n\",\n              pos, buf_size);\n    if (log_fp) fclose(log_fp);\n    return MHD_NO;\n  }\n  buf[pos++] = '\\r';\n  buf[pos++] = '\\n';\n\n  c->write_buffer_append_offset = pos;\n  if (log_fp)\n  {\n    fprintf(log_fp, \"EXIT build_header_response: success pos=%zu buf_size=%zu\\n\", pos, buf_size);\n    fclose(log_fp);\n  }\n  return MHD_YES;\n}\n"
}