{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if the prototype of digest_update_str does not take a const-qualified pointer. For example, if it is declared as\n\nvoid digest_update_str(struct DigestAlgorithm *da, char *s);\n\nthen calling digest_update_str(da, method) passes a const char * (method) to a non-const char * parameter, discarding the const qualifier and violating MISRA C 2023 Rule 8.13. To conform, the function parameter should be declared as const char * (or otherwise ensure the pointer type is const-qualified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1785.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_nonce with it.\n  - Your function must have the exact same signature as calculate_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  /* Preserve original assertion */\n  mhd_assert (! da->hashing);\n\n  /* Open a log file to record control flow and state useful to reproduce\n   * the MISRA Rule 8.13 scenario. Logs will be appended to avoid clobbering\n   * earlier runs. */\n  FILE *logf = fopen(\"/tmp/logs/1785.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER calculate_nonce: nonce_time=%llu, mthd_e=%d, method_ptr=%p, method='%s', rnd_ptr=%p, rnd_size=%zu, saddr_ptr=%p, saddr_size=%zu, uri_ptr=%p, uri_len=%zu, realm_ptr=%p, realm_len=%zu, bind_options=0x%x, da_ptr=%p\\n\",\n            (unsigned long long) nonce_time,\n            (int) mthd_e,\n            (const void *) method,\n            (method != NULL) ? method : \"(null)\",\n            (const void *) rnd,\n            rnd_size,\n            (const void *) saddr,\n            saddr_size,\n            (const void *) uri,\n            uri_len,\n            (const void *) realm,\n            realm_len,\n            bind_options,\n            (void *) da);\n    fflush(logf);\n  }\n\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n    if (logf)\n    {\n      fprintf(logf, \"Added timestamp to digest: timestamp_bytes=%02x%02x%02x%02x%02x%02x\\n\",\n              timestamp[0], timestamp[1], timestamp[2], timestamp[3], timestamp[4], timestamp[5]);\n      fflush(logf);\n    }\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    if (logf)\n    {\n      fprintf(logf, \"rnd_size>0: rnd_ptr=%p, rnd_size=%zu\\n\",\n              (const void *) rnd, rnd_size);\n      /* Log a short preview of the random data as hex (up to 32 bytes) */\n      if (rnd != NULL)\n      {\n        const size_t preview = (rnd_size < 32) ? rnd_size : 32;\n        size_t i;\n        fprintf(logf, \"rnd_preview_hex=\");\n        for (i = 0; i < preview; ++i)\n          fprintf(logf, \"%02x\", (unsigned char) rnd[i]);\n        fprintf(logf, \"\\n\");\n      }\n      fflush(logf);\n    }\n\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    if (logf)\n    {\n      fprintf(logf, \"Binding full client address (NONE) path: saddr_ptr=%p, saddr_size=%zu\\n\",\n              (const void *) saddr, saddr_size);\n      fflush(logf);\n    }\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    if (logf)\n    {\n      fprintf(logf, \"Binding client IP path: saddr_ptr=%p, saddr_size=%zu, saddr_family=%d\\n\",\n              (const void *) saddr, saddr_size,\n              (saddr != NULL) ? (int) saddr->ss_family : -1);\n      fflush(logf);\n    }\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      if (logf)\n      {\n        fprintf(logf, \"Using numeric method for hash: original_mthd=%d, used_mthd_for_hash=%u\\n\",\n                (int) mthd_e, (unsigned) mthd_for_hash);\n        fflush(logf);\n      }\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n    {\n      /* Log the critical call-site that is relevant to MISRA 8.13: a\n       * pointer to const (method) is passed to digest_update_str. This\n       * runtime log demonstrates the control path that reaches the call. */\n      if (logf)\n      {\n        fprintf(logf, \"MHD_HTTP_MTHD_OTHER: about to call digest_update_str with method_ptr=%p, method='%s'\\n\",\n                (const void *) method,\n                (method != NULL) ? method : \"(null)\");\n        fflush(logf);\n      }\n\n      /* Original call left intact to preserve behavior */\n      digest_update_str (da, method);\n\n      if (logf)\n      {\n        fprintf(logf, \"Returned from digest_update_str: method_ptr=%p\\n\",\n                (const void *) method);\n        fflush(logf);\n      }\n    }\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    if (logf)\n    {\n      fprintf(logf, \"Adding URI to digest: uri_ptr=%p, uri_len=%zu, uri_preview='%.*s'\\n\",\n              (const void *) uri, uri_len, (int) ((uri_len > 128) ? 128 : (int) uri_len), (uri != NULL) ? uri : \"(null)\");\n      fflush(logf);\n    }\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      if (logf)\n      {\n        fprintf(logf, \"Processing URI param header: header_ptr=%p, header_size=%zu, value_size=%zu\\n\",\n                (const void *) h, h->header_size, h->value_size);\n        if (h->header && h->header_size > 0)\n          fprintf(logf, \" header_preview='%.*s'\\n\", (int)((h->header_size > 64) ? 64 : (int)h->header_size), h->header);\n        if (h->value && h->value_size > 0)\n          fprintf(logf, \" value_preview='%.*s'\\n\", (int)((h->value_size > 64) ? 64 : (int)h->value_size), h->value);\n        fflush(logf);\n      }\n\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    if (logf)\n    {\n      fprintf(logf, \"Adding realm to digest: realm_ptr=%p, realm_len=%zu, realm_preview='%.*s'\\n\",\n              (const void *) realm, realm_len, (int) ((realm_len > 128) ? 128 : (int) realm_len), (realm != NULL) ? realm : \"(null)\");\n      fflush(logf);\n    }\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n\n    if (logf)\n    {\n      /* Log the produced nonce hex string (length = digest_get_size(da)*2) */\n      int hex_len = (int) digest_get_size(da) * 2;\n      fprintf(logf, \"Computed hash and converted to nonce: nonce_ptr=%p, hex_len=%d, nonce_preview='%.*s'\\n\",\n              (void *) nonce, hex_len, hex_len, nonce);\n      fprintf(logf, \"EXIT calculate_nonce\\n\\n\");\n      fflush(logf);\n      fclose(logf);\n      logf = NULL;\n    }\n  }\n\n  /* If we failed to open the log file earlier, do nothing further regarding logging. */\n}\n"
}