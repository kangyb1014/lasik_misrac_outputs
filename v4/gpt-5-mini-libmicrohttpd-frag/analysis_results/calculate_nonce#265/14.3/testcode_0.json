{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.3.\nHere is the comment from the agent.\n<violation scenario>\nThe controlling expression is the constant literal 1 in the statement 'if (1) { ... }'. This is an invariant controlling expression and is not being used to create an infinite loop nor is it a do-while with the permitted integer constant expression exception, so it contravenes MISRA C 2023 Rule 14.3.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1789.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_nonce with it.\n  - Your function must have the exact same signature as calculate_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  FILE *log = fopen(\"/tmp/logs/1789.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"calculate_nonce entered: nonce_time=%llu, mthd_e=%d, method=%p, rnd=%p, rnd_size=%zu, saddr=%p, saddr_size=%zu, uri=%p, uri_len=%zu, first_header=%p, realm=%p, realm_len=%zu, bind_options=0x%x, da=%p, nonce=%p\\n\",\n            (unsigned long long) nonce_time,\n            (int) mthd_e,\n            (const void *) method,\n            (const void *) rnd,\n            rnd_size,\n            (const void *) saddr,\n            saddr_size,\n            (const void *) uri,\n            uri_len,\n            (const void *) first_header,\n            (const void *) realm,\n            realm_len,\n            (unsigned) bind_options,\n            (void *) da,\n            (void *) nonce);\n  }\n\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    if (log)\n      fprintf(log, \"Entering invariant controlling if (1) - timestamp/hash part\\n\");\n\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    if (log)\n    {\n      fprintf(log, \"timestamp bytes: %02x %02x %02x %02x %02x %02x\\n\",\n              timestamp[0], timestamp[1], timestamp[2], timestamp[3], timestamp[4], timestamp[5]);\n    }\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    if (log)\n      fprintf(log, \"After MHD_bin_to_hex for timestamp at nonce offset %zu\\n\", (size_t) (digest_get_size (da) * 2));\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n    if (log)\n      fprintf(log, \"digest_update called with timestamp (size %zu)\\n\", sizeof (timestamp));\n  }\n  if (log)\n    fprintf(log, \"Evaluating rnd_size > 0 (rnd_size=%zu)\\n\", rnd_size);\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    if (log)\n      fprintf(log, \"Taking rnd_size > 0 branch: rnd=%p, rnd_size=%zu\\n\", (const void *) rnd, rnd_size);\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n    if (log)\n      fprintf(log, \"digest_update called with rnd (size %zu)\\n\", rnd_size);\n  }\n\n  if (log)\n    fprintf(log, \"Evaluating full client addr condition: (MHD_DAUTH_BIND_NONCE_NONE == bind_options) && (0 != saddr_size) -> bind_options=0x%x, saddr_size=%zu\\n\", (unsigned) bind_options, saddr_size);\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    if (log)\n      fprintf(log, \"Taking branch: add full client address (saddr=%p)\\n\", (const void *) saddr);\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n    if (log)\n      fprintf(log, \"digest_update called with saddr (size %zu)\\n\", saddr_size);\n  }\n\n  if (log)\n    fprintf(log, \"Evaluating bind nonce client ip condition: (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) && (0 != saddr_size) -> bind_options=0x%x, saddr_size=%zu\\n\", (unsigned) bind_options, saddr_size);\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    if (log)\n      fprintf(log, \"Taking branch: add client IP address (family=%d)\\n\", saddr->ss_family);\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n    if (log)\n      fprintf(log, \"digest_update called with client IP (family=%d)\\n\", saddr->ss_family);\n  }\n\n  if (log)\n    fprintf(log, \"Evaluating method/realm binding condition: (MHD_DAUTH_BIND_NONCE_NONE == bind_options) || (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)) -> bind_options=0x%x\\n\", (unsigned) bind_options);\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    if (log)\n      fprintf(log, \"Taking branch: add request method to hash (mthd_e=%d, method=%p)\\n\", (int) mthd_e, (const void *) method);\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n      if (log)\n        fprintf(log, \"digest_update called with mthd_for_hash=%u\\n\", (unsigned) mthd_for_hash);\n    }\n    else\n    {\n      digest_update_str (da, method);\n      if (log)\n        fprintf(log, \"digest_update_str called with method string at %p\\n\", (const void *) method);\n    }\n  }\n\n  if (log)\n    fprintf(log, \"Evaluating URI branch: (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)) -> bind_options=0x%x\\n\", (unsigned) bind_options);\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    if (log)\n      fprintf(log, \"Taking branch: add request URI (uri=%p, uri_len=%zu)\\n\", (const void *) uri, uri_len);\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n    if (log)\n      fprintf(log, \"digest_update called with uri (size %zu)\\n\", uri_len);\n  }\n  if (log)\n    fprintf(log, \"Evaluating URI params branch: (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS)) -> bind_options=0x%x\\n\", (unsigned) bind_options);\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    if (log)\n      fprintf(log, \"Taking branch: add URI params, first_header=%p\\n\", (const void *) first_header);\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      if (log)\n        fprintf(log, \"Processing header: header=%p, header_size=%zu, value=%p, value_size=%zu\\n\", (const void *) h->header, h->header_size, (const void *) h->value, h->value_size);\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n    if (log)\n      fprintf(log, \"Finished processing URI params\\n\");\n  }\n  if (log)\n    fprintf(log, \"Evaluating realm binding condition: (MHD_DAUTH_BIND_NONCE_NONE == bind_options) || (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)) -> bind_options=0x%x\\n\", (unsigned) bind_options);\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    if (log)\n      fprintf(log, \"Taking branch: add realm to hash (realm=%p, realm_len=%zu)\\n\", (const void *) realm, realm_len);\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n    if (log)\n      fprintf(log, \"digest_update called with realm (size %zu)\\n\", realm_len);\n  }\n  if (1)\n  {\n    if (log)\n      fprintf(log, \"Entering invariant controlling if (1) - final hash calculation\\n\");\n\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n    if (log)\n      fprintf(log, \"Final hash computed and hexified to nonce at %p, digest_size=%zu\\n\", (void *) nonce, (size_t) digest_get_size (da));\n  }\n\n  if (log)\n  {\n    fprintf(log, \"calculate_nonce exiting\\n\");\n    fclose(log);\n  }\n}\n"
}