{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the call passes saddr and saddr_size to digest_update without validating that saddr_size does not exceed the actual size of the object pointed to by saddr. If digest_update uses a string.h function such as memcpy/memmove to copy saddr_size bytes, an oversized saddr_size (for example, saddr actually points to a struct sockaddr_in of ~16 bytes but saddr_size is larger) will cause a read beyond the bounds of the saddr object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified calculate_nonce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1783.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of calculate_nonce:\n```c\nstatic void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n    /* If the nonce_time is milliseconds, then the same 48 bit value will repeat\n     * every 8 919 years, which is more than enough to mitigate a replay attack */\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sizeof(((const struct sockaddr_in *) saddr)->sin_addr));\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr));\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified calculate_nonce code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original calculate_nonce with it.\n  - Your function must have the exact same signature as calculate_nonce.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call calculate_nonce to check logs.\n  - Your function MUST preserve the original logic of calculate_nonce as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, calculate_nonce will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of calculate_nonce as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ncalculate_nonce (uint64_t nonce_time,\n                 enum MHD_HTTP_Method mthd_e,\n                 const char *method,\n                 const char *rnd,\n                 size_t rnd_size,\n                 const struct sockaddr_storage *saddr,\n                 size_t saddr_size,\n                 const char *uri,\n                 size_t uri_len,\n                 const struct MHD_HTTP_Req_Header *first_header,\n                 const char *realm,\n                 size_t realm_len,\n                 unsigned int bind_options,\n                 struct DigestAlgorithm *da,\n                 char *nonce)\n{\n  /* Logging probe: append-only log file for reproducing the violation scenario */\n  FILE *log = fopen(\"/tmp/logs/1783.txt\", \"a\");\n  if (log)\n  {\n    int fam = -1;\n    if (saddr)\n      fam = (int) saddr->ss_family;\n\n    fprintf(log, \"ENTER calculate_nonce: nonce_time=%llu, mthd_e=%d, method=%p, method_str=%s, rnd=%p, rnd_size=%zu, saddr=%p, saddr_size=%zu, saddr_family=%d, uri=%p, uri_len=%zu, realm=%p, realm_len=%zu, bind_options=0x%x, da=%p, nonce_out=%p\\n\",\n            (unsigned long long) nonce_time,\n            (int) mthd_e,\n            (const void *) method,\n            (method ? method : \"(null)\"),\n            (const void *) rnd,\n            rnd_size,\n            (const void *) saddr,\n            saddr_size,\n            fam,\n            (const void *) uri,\n            uri_len,\n            (const void *) realm,\n            realm_len,\n            bind_options,\n            (void *) da,\n            (void *) nonce);\n    fflush(log);\n  }\n\n  mhd_assert (! da->hashing);\n  if (1)\n  {\n    /* Add the timestamp to the hash calculation */\n    uint8_t timestamp[TIMESTAMP_BIN_SIZE];\n#if TIMESTAMP_BIN_SIZE != 6\n#error The code needs to be updated here\n#endif\n    timestamp[0] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 0)));\n    timestamp[1] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 1)));\n    timestamp[2] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 2)));\n    timestamp[3] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 3)));\n    timestamp[4] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 4)));\n    timestamp[5] = (uint8_t) (nonce_time >> (8 * (TIMESTAMP_BIN_SIZE - 1 - 5)));\n    MHD_bin_to_hex (timestamp,\n                    sizeof (timestamp),\n                    nonce + digest_get_size (da) * 2);\n    digest_update (da,\n                   timestamp,\n                   sizeof (timestamp));\n\n    if (log)\n    {\n      fprintf(log, \"LOG: timestamp added (hex at nonce+%zu)\\n\", (size_t) (digest_get_size(da) * 2));\n      fflush(log);\n    }\n  }\n  if (rnd_size > 0)\n  {\n    /* Add the unique random value to the hash calculation */\n    if (log)\n    {\n      fprintf(log, \"LOG: rnd present: rnd=%p rnd_size=%zu\\n\", (const void *) rnd, rnd_size);\n      fflush(log);\n    }\n    digest_update_with_colon (da);\n    digest_update (da,\n                   rnd,\n                   rnd_size);\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) &&\n       (0 != saddr_size) )\n  {\n    /* Logging: before adding full client address including source port */\n    if (log)\n    {\n      size_t max_ss = (saddr ? sizeof (*saddr) : 0);\n      size_t fam_expected = 0;\n      if (saddr)\n      {\n        if (AF_INET == saddr->ss_family)\n          fam_expected = sizeof (struct sockaddr_in);\n#ifdef HAVE_INET6\n        else if (AF_INET6 == saddr->ss_family)\n          fam_expected = sizeof (struct sockaddr_in6);\n#endif\n      }\n\n      fprintf(log, \"LOG: adding full saddr: saddr=%p saddr_size=%zu max_sock_storage=%zu fam_expected=%zu family=%d\\n\",\n              (const void *) saddr,\n              saddr_size,\n              max_ss,\n              fam_expected,\n              (saddr ? (int) saddr->ss_family : -1));\n      if (saddr && saddr_size > max_ss)\n        fprintf(log, \"WARNING: saddr_size (%zu) > sizeof(sockaddr_storage) (%zu) - potential out-of-bounds read\\n\", saddr_size, max_ss);\n      if (fam_expected != 0 && saddr_size > fam_expected)\n        fprintf(log, \"NOTICE: saddr_size (%zu) > expected size for family (%zu) - could read beyond actual address struct\\n\", saddr_size, fam_expected);\n      fflush(log);\n    }\n\n    /* Add full client address including source port to make unique nonces\n     * for requests received exactly at the same time */\n    digest_update_with_colon (da);\n    digest_update (da,\n                   saddr,\n                   saddr_size);\n  }\n  if ( (0 != (bind_options & MHD_DAUTH_BIND_NONCE_CLIENT_IP)) &&\n       (0 != saddr_size) )\n  {\n    /* Add the client's IP address to the hash calculation */\n    if (log)\n    {\n      fprintf(log, \"LOG: adding client IP part: saddr=%p saddr_size=%zu family=%d\\n\", (const void *) saddr, saddr_size, (saddr ? (int) saddr->ss_family : -1));\n      fflush(log);\n    }\n    digest_update_with_colon (da);\n    if (AF_INET == saddr->ss_family)\n    {\n      size_t sz = sizeof(((const struct sockaddr_in *) saddr)->sin_addr);\n      if (log)\n      {\n        fprintf(log, \"LOG: AF_INET branch: using sin_addr at %p size=%zu\\n\", (const void *) &((const struct sockaddr_in *) saddr)->sin_addr, sz);\n        if (saddr_size < sizeof (struct sockaddr_in))\n          fprintf(log, \"WARNING: provided saddr_size (%zu) < sizeof(struct sockaddr_in) (%zu) - truncated source object possible\\n\", saddr_size, sizeof(struct sockaddr_in));\n        fflush(log);\n      }\n      digest_update (da,\n                     &((const struct sockaddr_in *) saddr)->sin_addr,\n                     sz);\n    }\n#ifdef HAVE_INET6\n    else if (AF_INET6 == saddr->ss_family)\n    {\n      size_t sz = sizeof(((const struct sockaddr_in6 *) saddr)->sin6_addr);\n      if (log)\n      {\n        fprintf(log, \"LOG: AF_INET6 branch: using sin6_addr at %p size=%zu\\n\", (const void *) &((const struct sockaddr_in6 *) saddr)->sin6_addr, sz);\n        if (saddr_size < sizeof (struct sockaddr_in6))\n          fprintf(log, \"WARNING: provided saddr_size (%zu) < sizeof(struct sockaddr_in6) (%zu) - truncated source object possible\\n\", saddr_size, sizeof(struct sockaddr_in6));\n        fflush(log);\n      }\n      digest_update (da,\n                     &((const struct sockaddr_in6 *) saddr)->sin6_addr,\n                     sz);\n    }\n#endif /* HAVE_INET6 */\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI)))\n  {\n    /* Add the request method to the hash calculation */\n    digest_update_with_colon (da);\n    if (MHD_HTTP_MTHD_OTHER != mthd_e)\n    {\n      uint8_t mthd_for_hash;\n      if (MHD_HTTP_MTHD_HEAD != mthd_e)\n        mthd_for_hash = (uint8_t) mthd_e;\n      else /* Treat HEAD method in the same way as GET method */\n        mthd_for_hash = (uint8_t) MHD_HTTP_MTHD_GET;\n      digest_update (da,\n                     &mthd_for_hash,\n                     sizeof(mthd_for_hash));\n    }\n    else\n      digest_update_str (da, method);\n\n    if (log)\n    {\n      fprintf(log, \"LOG: method handled: mthd_e=%d mthd_other=%d method_ptr=%p\\n\", (int) mthd_e, (int) (MHD_HTTP_MTHD_OTHER), (const void *) method);\n      fflush(log);\n    }\n  }\n\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI))\n  {\n    /* Add the request URI to the hash calculation */\n    digest_update_with_colon (da);\n\n    if (log)\n    {\n      fprintf(log, \"LOG: adding URI: uri=%p uri_len=%zu\\n\", (const void *) uri, uri_len);\n      fflush(log);\n    }\n\n    digest_update (da,\n                   uri,\n                   uri_len);\n  }\n  if (0 != (bind_options & MHD_DAUTH_BIND_NONCE_URI_PARAMS))\n  {\n    /* Add the request URI parameters to the hash calculation */\n    const struct MHD_HTTP_Req_Header *h;\n\n    digest_update_with_colon (da);\n    for (h = first_header; NULL != h; h = h->next)\n    {\n      if (MHD_GET_ARGUMENT_KIND != h->kind)\n        continue;\n      if (log)\n      {\n        fprintf(log, \"LOG: uri param header kind=%d header=%p header_size=%zu value=%p value_size=%zu\\n\",\n                (int) h->kind,\n                (const void *) h->header,\n                (size_t) h->header_size,\n                (const void *) h->value,\n                (size_t) h->value_size);\n        fflush(log);\n      }\n      digest_update (da, \"\\0\", 2);\n      if (0 != h->header_size)\n        digest_update (da, h->header, h->header_size);\n      digest_update (da, \"\", 1);\n      if (0 != h->value_size)\n        digest_update (da, h->value, h->value_size);\n    }\n  }\n  if ( (MHD_DAUTH_BIND_NONCE_NONE == bind_options) ||\n       (0 != (bind_options & MHD_DAUTH_BIND_NONCE_REALM)))\n  {\n    /* Add the realm to the hash calculation */\n    digest_update_with_colon (da);\n    if (log)\n    {\n      fprintf(log, \"LOG: adding realm: realm=%p realm_len=%zu\\n\", (const void *) realm, realm_len);\n      fflush(log);\n    }\n    digest_update (da,\n                   realm,\n                   realm_len);\n  }\n  if (1)\n  {\n    uint8_t hash[MAX_DIGEST];\n    digest_calc_hash (da, hash);\n    MHD_bin_to_hex (hash,\n                    digest_get_size (da),\n                    nonce);\n\n    if (log)\n    {\n      fprintf(log, \"EXIT calculate_nonce: computed nonce (hex) at %p -> \\\"%s\\\"\\n\", (void *) nonce, nonce);\n      fflush(log);\n      fclose(log);\n    }\n  }\n}\n"
}