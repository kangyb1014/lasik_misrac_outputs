{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'i' (size_t i) is assigned to in the statement `i = MHD_SCKT_SEND_MAX_SIZE_;`, which modifies a function parameter. This directly violates MISRA C 2023 Rule 17.8. Recommended fix: introduce a local variable (e.g. `size_t len = i;`) and cap/modify that local variable instead of modifying the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified recv_param_adapter code that contains useful probe functions that print useful logs to a file \"/tmp/logs/592.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of recv_param_adapter:\n```c\nstatic ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified recv_param_adapter code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original recv_param_adapter with it.\n  - Your function must have the exact same signature as recv_param_adapter.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call recv_param_adapter to check logs.\n  - Your function MUST preserve the original logic of recv_param_adapter as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, recv_param_adapter will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of recv_param_adapter as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static ssize_t\nrecv_param_adapter (struct MHD_Connection *connection,\n                    void *other,\n                    size_t i)\n{\n  ssize_t ret;\n  /* Logging probe file. Append so multiple calls accumulate evidence. */\n  FILE *fp = fopen(\"/tmp/logs/592.txt\", \"a\");\n  if (fp)\n  {\n    fprintf(fp, \"ENTER recv_param_adapter: connection=%p socket_fd=%d state=%d incoming_i=%zu\\n\",\n            (void *) connection,\n            (int) connection->socket_fd,\n            (int) connection->state,\n            i);\n    fflush(fp);\n  }\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    if (fp)\n    {\n      fprintf(fp, \"EARLY RETURN: not connected (socket_fd=%d state=%d) -> %d\\n\",\n              (int) connection->socket_fd,\n              (int) connection->state,\n              (int) MHD_ERR_NOTCONN_);\n      fclose(fp);\n    }\n    return MHD_ERR_NOTCONN_;\n  }\n\n  if (i > MHD_SCKT_SEND_MAX_SIZE_)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"PARAM CAP: incoming i (%zu) > MHD_SCKT_SEND_MAX_SIZE_ (%zu) -> assigning i = MHD_SCKT_SEND_MAX_SIZE_ (VIOLATION: modifies parameter)\\n\",\n              i, (size_t) MHD_SCKT_SEND_MAX_SIZE_);\n      fflush(fp);\n    }\n    i = MHD_SCKT_SEND_MAX_SIZE_; /* return value limit */\n    if (fp)\n    {\n      fprintf(fp, \"AFTER CAP: i is now %zu\\n\", i);\n      fflush(fp);\n    }\n  }\n\n  ret = MHD_recv_ (connection->socket_fd,\n                   other,\n                   i);\n  if (fp)\n  {\n    fprintf(fp, \"AFTER MHD_recv_: ret=%zd (requested=%zu)\\n\", ret, i);\n    fflush(fp);\n  }\n\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n    if (fp)\n    {\n      fprintf(fp, \"ERROR PATH: ret<0 err=%d\\n\", err);\n      fflush(fp);\n    }\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* Got EAGAIN --- no longer read-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n#endif /* EPOLL_SUPPORT */\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_AGAIN_ (EAGAIN)\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_AGAIN_ (EINTR)\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_CONNRESET_ (REMOTE_DISCONNECT)\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_CONNRESET_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_OPNOTSUPP_\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_OPNOTSUPP_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_NOTCONN_ (ENOTCONN)\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_NOTCONN_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_INVAL_\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_INVAL_;\n    }\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_NOMEM_\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_NOMEM_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n    {\n      if (fp)\n      {\n        fprintf(fp, \"RETURN MHD_ERR_BADF_\\n\");\n        fclose(fp);\n      }\n      return MHD_ERR_BADF_;\n    }\n    /* Treat any other error as a hard error. */\n    if (fp)\n    {\n      fprintf(fp, \"RETURN MHD_ERR_NOTCONN_ (other error)\\n\");\n      fclose(fp);\n    }\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if (i > (size_t) ret)\n  {\n    if (fp)\n    {\n      fprintf(fp, \"EPOLL: i (%zu) > ret (%zd) -> clearing READ_READY\\n\", i, ret);\n      fflush(fp);\n    }\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_READ_READY);\n  }\n#endif /* EPOLL_SUPPORT */\n\n  if (fp)\n  {\n    fprintf(fp, \"EXIT: returning ret=%zd\\n\", ret);\n    fclose(fp);\n  }\n  return ret;\n}\n"
}