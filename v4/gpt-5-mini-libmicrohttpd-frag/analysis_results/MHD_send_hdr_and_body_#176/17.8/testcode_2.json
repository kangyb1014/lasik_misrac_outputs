{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code fragment assigns to function parameters 'body_size' and 'complete_response' (body_size = UINT_MAX; complete_response = false;). Modifying formal parameters violates MISRA C 2023 Rule 17.8, which prohibits altering function parameters. (Note: assigning push_body = complete_response only writes a local variable, but the prior assignments modify parameters.) Recommendation: copy the parameters into local variables (e.g. adj_body_size, adj_complete_response) and modify those instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_send_hdr_and_body_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_send_hdr_and_body_:\n```c\nssize_t\nMHD_send_hdr_and_body_ (struct MHD_Connection *connection,\n                        const char *header,\n                        size_t header_size,\n                        bool never_push_hdr,\n                        const char *body,\n                        size_t body_size,\n                        bool complete_response)\n{\n  ssize_t ret;\n  bool push_hdr;\n  bool push_body;\n  MHD_socket s = connection->socket_fd;\n#ifndef _WIN32\n#define _MHD_SEND_VEC_MAX   MHD_SCKT_SEND_MAX_SIZE_\n#else  /* ! _WIN32 */\n#define _MHD_SEND_VEC_MAX   UINT32_MAX\n#endif /* ! _WIN32 */\n#ifdef MHD_VECT_SEND\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  struct iovec vector[2];\n#ifdef HAVE_SENDMSG\n  struct msghdr msg;\n#endif /* HAVE_SENDMSG */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  WSABUF vector[2];\n  DWORD vec_sent;\n#endif /* _WIN32 */\n  bool no_vec; /* Is vector-send() disallowed? */\n\n  no_vec = false;\n#ifdef HTTPS_SUPPORT\n  no_vec = no_vec || (connection->daemon->options & MHD_USE_TLS);\n#endif /* HTTPS_SUPPORT */\n#if (! defined(HAVE_SENDMSG) || ! defined(MSG_NOSIGNAL) ) && \\\n  defined(MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE) && \\\n  defined(MHD_SEND_SPIPE_SUPPRESS_NEEDED)\n  no_vec = no_vec || (! connection->daemon->sigpipe_blocked &&\n                      ! connection->sk_spipe_suppress);\n#endif /* (!HAVE_SENDMSG || ! MSG_NOSIGNAL) &&\n          MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE &&\n          MHD_SEND_SPIPE_SUPPRESS_NEEDED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert ( (NULL != body) || (0 == body_size) );\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  push_body = complete_response;\n\n  if (! never_push_hdr)\n  {\n    if (! complete_response)\n      push_hdr = true; /* Push the header as the client may react\n                        * on header alone while the body data is\n                        * being prepared. */\n    else\n    {\n      if (1400 > (header_size + body_size))\n        push_hdr = false;  /* Do not push the header as complete\n                           * reply is already ready and the whole\n                           * reply most probably will fit into\n                           * the single IP packet. */\n      else\n        push_hdr = true;   /* Push header alone so client may react\n                           * on it while reply body is being delivered. */\n    }\n  }\n  else\n    push_hdr = false;\n\n  if (complete_response && (0 == body_size))\n    push_hdr = true; /* The header alone is equal to the whole response. */\n\n  if (\n#ifdef MHD_VECT_SEND\n    (no_vec) ||\n    (0 == body_size) ||\n    ((size_t) SSIZE_MAX <= header_size) ||\n    ((size_t) _MHD_SEND_VEC_MAX < header_size)\n#ifdef _WIN32\n    || ((size_t) UINT_MAX < header_size)\n#endif /* _WIN32 */\n#else  /* ! MHD_VECT_SEND */\n    true\n#endif /* ! MHD_VECT_SEND */\n    )\n  {\n    ret = MHD_send_data_ (connection,\n                          header,\n                          header_size,\n                          push_hdr);\n\n    if ( (header_size == (size_t) ret) &&\n         ((size_t) SSIZE_MAX > header_size) &&\n         (0 != body_size) &&\n         (connection->sk_nonblck) )\n    {\n      ssize_t ret2;\n      /* The header has been sent completely.\n       * Try to send the reply body without waiting for\n       * the next round. */\n      /* Make sure that sum of ret + ret2 will not exceed SSIZE_MAX as\n       * function needs to return positive value if succeed. */\n      if ( (((size_t) SSIZE_MAX) - ((size_t) ret)) <  body_size)\n      {\n        body_size = (((size_t) SSIZE_MAX) - ((size_t) ret));\n        complete_response = false;\n        push_body = complete_response;\n      }\n\n      ret2 = MHD_send_data_ (connection,\n                             body,\n                             body_size,\n                             push_body);\n      if (0 < ret2)\n        return ret + ret2; /* Total data sent */\n      if (MHD_ERR_AGAIN_ == ret2)\n        return ret;\n\n      return ret2; /* Error code */\n    }\n    return ret;\n  }\n#ifdef MHD_VECT_SEND\n\n  if ( ((size_t) SSIZE_MAX <= body_size) ||\n       ((size_t) SSIZE_MAX < (header_size + body_size)) )\n  {\n    /* Return value limit */\n    body_size = SSIZE_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n  }\n#if (SSIZE_MAX != _MHD_SEND_VEC_MAX) || (_MHD_SEND_VEC_MAX + 0 == 0)\n  if (((size_t) _MHD_SEND_VEC_MAX <= body_size) ||\n      ((size_t) _MHD_SEND_VEC_MAX < (header_size + body_size)))\n  {\n    /* Send total amount limit */\n    body_size = _MHD_SEND_VEC_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n  }\n#endif /* SSIZE_MAX != _MHD_SEND_VEC_MAX */\n\n  pre_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                   true,\n#else  /* ! HAVE_SENDMSG */\n                   false,\n#endif /* ! HAVE_SENDMSG */\n                   push_hdr || push_body);\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  vector[0].iov_base = _MHD_DROP_CONST (header);\n  vector[0].iov_len = header_size;\n  vector[1].iov_base = _MHD_DROP_CONST (body);\n  vector[1].iov_len = body_size;\n\n#if defined(HAVE_SENDMSG)\n  memset (&msg, 0, sizeof(msg));\n  msg.msg_iov = vector;\n  msg.msg_iovlen = 2;\n\n  ret = sendmsg (s, &msg, MSG_NOSIGNAL_OR_ZERO);\n#elif defined(HAVE_WRITEV)\n  ret = writev (s, vector, 2);\n#endif /* HAVE_WRITEV */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  if ((size_t) UINT_MAX < body_size)\n  {\n    /* Send item size limit */\n    body_size = UINT_MAX;\n    complete_response = false;\n    push_body = complete_response;\n  }\n  vector[0].buf = (char *) _MHD_DROP_CONST (header);\n  vector[0].len = (unsigned long) header_size;\n  vector[1].buf = (char *) _MHD_DROP_CONST (body);\n  vector[1].len = (unsigned long) body_size;\n\n  ret = WSASend (s, vector, 2, &vec_sent, 0, NULL, NULL);\n  if (0 == ret)\n    ret = (ssize_t) vec_sent;\n  else\n    ret = -1;\n#endif /* _WIN32 */\n\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN, no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      return MHD_ERR_PIPE_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if ((header_size + body_size) > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  if ( (push_body) &&\n       ((header_size + body_size) == (size_t) ret) )\n  {\n    /* Complete reply has been sent. */\n    /* If TLS connection is used then next final send() will be\n     * without MSG_MORE support. If non-TLS connection is used\n     * it's unknown whether next 'send' will be plain send() / sendmsg() or\n     * sendfile() will be used so assume that next final send() will be\n     * the same, like for this response. */\n    post_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                      true,\n#else  /* ! HAVE_SENDMSG */\n                      false,\n#endif /* ! HAVE_SENDMSG */\n                      true);\n  }\n  else if ( (push_hdr) &&\n            (header_size <= (size_t) ret))\n  {\n    /* The header has been sent completely and there is a\n     * need to push the header data. */\n    /* Luckily the type of send function will be used next is known. */\n    post_send_setopt (connection,\n#if defined(_MHD_HAVE_SENDFILE)\n                      MHD_resp_sender_std == connection->rp.resp_sender,\n#else  /* ! _MHD_HAVE_SENDFILE */\n                      true,\n#endif /* ! _MHD_HAVE_SENDFILE */\n                      true);\n  }\n\n  return ret;\n#else  /* ! MHD_VECT_SEND */\n  mhd_assert (false);\n  return MHD_ERR_CONNRESET_; /* Unreachable. Mute warnings. */\n#endif /* ! MHD_VECT_SEND */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_send_hdr_and_body_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_send_hdr_and_body_ with it.\n  - Your function must have the exact same signature as MHD_send_hdr_and_body_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_send_hdr_and_body_ to check logs.\n  - Your function MUST preserve the original logic of MHD_send_hdr_and_body_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_send_hdr_and_body_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_send_hdr_and_body_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "ssize_t\nMHD_send_hdr_and_body_ (struct MHD_Connection *connection,\n                        const char *header,\n                        size_t header_size,\n                        bool never_push_hdr,\n                        const char *body,\n                        size_t body_size,\n                        bool complete_response)\n{\n  ssize_t ret;\n  bool push_hdr;\n  bool push_body;\n  MHD_socket s = connection->socket_fd;\n  FILE *log_fp = fopen(\"/tmp/logs/2442.txt\", \"a\");\n  if (log_fp)\n  {\n    fprintf(log_fp, \"ENTER MHD_send_hdr_and_body_: connection=%p header=%p header_size=%zu never_push_hdr=%d body=%p body_size=%zu complete_response=%d socket=%ld\\n\",\n            (void *)connection, (void *)header, header_size, (int)never_push_hdr, (void *)body, body_size, (int)complete_response, (long)s);\n    fflush(log_fp);\n  }\n#ifndef _WIN32\n#define _MHD_SEND_VEC_MAX   MHD_SCKT_SEND_MAX_SIZE_\n#else  /* ! _WIN32 */\n#define _MHD_SEND_VEC_MAX   UINT32_MAX\n#endif /* ! _WIN32 */\n#ifdef MHD_VECT_SEND\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  struct iovec vector[2];\n#ifdef HAVE_SENDMSG\n  struct msghdr msg;\n#endif /* HAVE_SENDMSG */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  WSABUF vector[2];\n  DWORD vec_sent;\n#endif /* _WIN32 */\n  bool no_vec; /* Is vector-send() disallowed? */\n\n  no_vec = false;\n#ifdef HTTPS_SUPPORT\n  no_vec = no_vec || (connection->daemon->options & MHD_USE_TLS);\n#endif /* HTTPS_SUPPORT */\n#if (! defined(HAVE_SENDMSG) || ! defined(MSG_NOSIGNAL) ) && \\\n  defined(MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE) && \\\n  defined(MHD_SEND_SPIPE_SUPPRESS_NEEDED)\n  no_vec = no_vec || (! connection->daemon->sigpipe_blocked &&\n                      ! connection->sk_spipe_suppress);\n#endif /* (!HAVE_SENDMSG || ! MSG_NOSIGNAL) &&\n          MHD_SEND_SPIPE_SEND_SUPPRESS_POSSIBLE &&\n          MHD_SEND_SPIPE_SUPPRESS_NEEDED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert ( (NULL != body) || (0 == body_size) );\n\n  if ( (MHD_INVALID_SOCKET == s) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    if (log_fp)\n    {\n      fprintf(log_fp, \"EARLY EXIT: invalid socket or closed connection -> return %d\\n\", (int) MHD_ERR_NOTCONN_);\n      fclose(log_fp);\n    }\n    return MHD_ERR_NOTCONN_;\n  }\n\n  push_body = complete_response;\n  if (log_fp)\n  {\n    fprintf(log_fp, \"After init: push_body=%d (from complete_response=%d) body_size=%zu\\n\",\n            (int)push_body, (int)complete_response, body_size);\n    fflush(log_fp);\n  }\n\n  if (! never_push_hdr)\n  {\n    if (! complete_response)\n      push_hdr = true; /* Push the header as the client may react\n                        * on header alone while the body data is\n                        * being prepared. */\n    else\n    {\n      if (1400 > (header_size + body_size))\n        push_hdr = false;  /* Do not push the header as complete\n                           * reply is already ready and the whole\n                           * reply most probably will fit into\n                           * the single IP packet. */\n      else\n        push_hdr = true;   /* Push header alone so client may react\n                           * on it while reply body is being delivered. */\n    }\n  }\n  else\n    push_hdr = false;\n\n  if (complete_response && (0 == body_size))\n    push_hdr = true; /* The header alone is equal to the whole response. */\n\n  if (log_fp)\n  {\n    fprintf(log_fp, \"Decisions: never_push_hdr=%d push_hdr=%d push_body=%d complete_response=%d header_size=%zu body_size=%zu\\n\",\n            (int)never_push_hdr, (int)push_hdr, (int)push_body, (int)complete_response, header_size, body_size);\n    fflush(log_fp);\n  }\n\n  if (\n#ifdef MHD_VECT_SEND\n    (no_vec) ||\n    (0 == body_size) ||\n    ((size_t) SSIZE_MAX <= header_size) ||\n    ((size_t) _MHD_SEND_VEC_MAX < header_size)\n#ifdef _WIN32\n    || ((size_t) UINT_MAX < header_size)\n#endif /* _WIN32 */\n#else  /* ! MHD_VECT_SEND */\n    true\n#endif /* ! MHD_VECT_SEND */\n    )\n  {\n    if (log_fp)\n    {\n      fprintf(log_fp, \"Taking scalar send path: header_size=%zu body_size=%zu push_hdr=%d\\n\", header_size, body_size, (int) push_hdr);\n      fflush(log_fp);\n    }\n\n    ret = MHD_send_data_ (connection,\n                          header,\n                          header_size,\n                          push_hdr);\n\n    if ( (header_size == (size_t) ret) &&\n         ((size_t) SSIZE_MAX > header_size) &&\n         (0 != body_size) &&\n         (connection->sk_nonblck) )\n    {\n      ssize_t ret2;\n      /* The header has been sent completely.\n       * Try to send the reply body without waiting for\n       * the next round. */\n      /* Make sure that sum of ret + ret2 will not exceed SSIZE_MAX as\n       * function needs to return positive value if succeed. */\n      if ( (((size_t) SSIZE_MAX) - ((size_t) ret)) <  body_size)\n      {\n        if (log_fp)\n        {\n          fprintf(log_fp, \"About to modify body_size due to SSIZE_MAX limit: old body_size=%zu ret=%zd SSIZE_MAX=%zu\\n\",\n                  body_size, ret, (size_t) SSIZE_MAX);\n          fflush(log_fp);\n        }\n\n        body_size = (((size_t) SSIZE_MAX) - ((size_t) ret));\n        complete_response = false;\n        push_body = complete_response;\n\n        if (log_fp)\n        {\n          fprintf(log_fp, \"Modified: new body_size=%zu complete_response=%d push_body=%d\\n\",\n                  body_size, (int) complete_response, (int) push_body);\n          fflush(log_fp);\n        }\n      }\n\n      ret2 = MHD_send_data_ (connection,\n                             body,\n                             body_size,\n                             push_body);\n      if (log_fp)\n      {\n        fprintf(log_fp, \"MHD_send_data_ for body returned ret2=%zd\\n\", ret2);\n        fflush(log_fp);\n      }\n      if (0 < ret2)\n      {\n        if (log_fp)\n        {\n          fprintf(log_fp, \"EXIT (sent header+body): return %zd\\n\", ret + ret2);\n          fclose(log_fp);\n        }\n        return ret + ret2; /* Total data sent */\n      }\n      if (MHD_ERR_AGAIN_ == ret2)\n      {\n        if (log_fp)\n        {\n          fprintf(log_fp, \"EXIT (EAGAIN after body send): return %zd\\n\", ret);\n          fclose(log_fp);\n        }\n        return ret;\n      }\n\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (error from body send): return %zd\\n\", ret2);\n        fclose(log_fp);\n      }\n      return ret2; /* Error code */\n    }\n    if (log_fp)\n    {\n      fprintf(log_fp, \"EXIT (scalar path): return %zd\\n\", ret);\n      fclose(log_fp);\n    }\n    return ret;\n  }\n#ifdef MHD_VECT_SEND\n\n  if ( ((size_t) SSIZE_MAX <= body_size) ||\n       ((size_t) SSIZE_MAX < (header_size + body_size)) )\n  {\n    /* Return value limit */\n    if (log_fp)\n    {\n      fprintf(log_fp, \"About to modify body_size due to SSIZE_MAX vector limit: old body_size=%zu header_size=%zu SSIZE_MAX=%zu\\n\",\n              body_size, header_size, (size_t) SSIZE_MAX);\n      fflush(log_fp);\n    }\n\n    body_size = SSIZE_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n\n    if (log_fp)\n    {\n      fprintf(log_fp, \"Modified (vector SSIZE_MAX): new body_size=%zu complete_response=%d push_body=%d\\n\",\n              body_size, (int) complete_response, (int) push_body);\n      fflush(log_fp);\n    }\n  }\n#if (SSIZE_MAX != _MHD_SEND_VEC_MAX) || (_MHD_SEND_VEC_MAX + 0 == 0)\n  if (((size_t) _MHD_SEND_VEC_MAX <= body_size) ||\n      ((size_t) _MHD_SEND_VEC_MAX < (header_size + body_size)))\n  {\n    /* Send total amount limit */\n    if (log_fp)\n    {\n      fprintf(log_fp, \"About to modify body_size due to _MHD_SEND_VEC_MAX limit: old body_size=%zu header_size=%zu _MHD_SEND_VEC_MAX=%zu\\n\",\n              body_size, header_size, (size_t) _MHD_SEND_VEC_MAX);\n      fflush(log_fp);\n    }\n\n    body_size = _MHD_SEND_VEC_MAX - header_size;\n    complete_response = false;\n    push_body = complete_response;\n\n    if (log_fp)\n    {\n      fprintf(log_fp, \"Modified (vector _MHD_SEND_VEC_MAX): new body_size=%zu complete_response=%d push_body=%d\\n\",\n              body_size, (int) complete_response, (int) push_body);\n      fflush(log_fp);\n    }\n  }\n#endif /* SSIZE_MAX != _MHD_SEND_VEC_MAX */\n\n  pre_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                   true,\n#else  /* ! HAVE_SENDMSG */\n                   false,\n#endif /* ! HAVE_SENDMSG */\n                   push_hdr || push_body);\n#if defined(HAVE_SENDMSG) || defined(HAVE_WRITEV)\n  vector[0].iov_base = _MHD_DROP_CONST (header);\n  vector[0].iov_len = header_size;\n  vector[1].iov_base = _MHD_DROP_CONST (body);\n  vector[1].iov_len = body_size;\n\n#if defined(HAVE_SENDMSG)\n  memset (&msg, 0, sizeof(msg));\n  msg.msg_iov = vector;\n  msg.msg_iovlen = 2;\n\n  ret = sendmsg (s, &msg, MSG_NOSIGNAL_OR_ZERO);\n#elif defined(HAVE_WRITEV)\n  ret = writev (s, vector, 2);\n#endif /* HAVE_WRITEV */\n#endif /* HAVE_SENDMSG || HAVE_WRITEV */\n#ifdef _WIN32\n  if ((size_t) UINT_MAX < body_size)\n  {\n    /* Send item size limit */\n    if (log_fp)\n    {\n      fprintf(log_fp, \"About to modify body_size due to UINT_MAX on Win32: old body_size=%zu UINT_MAX=%u\\n\", body_size, (unsigned) UINT_MAX);\n      fflush(log_fp);\n    }\n\n    body_size = UINT_MAX;\n    complete_response = false;\n    push_body = complete_response;\n\n    if (log_fp)\n    {\n      fprintf(log_fp, \"Modified (Win32 UINT_MAX): new body_size=%zu complete_response=%d push_body=%d\\n\",\n              body_size, (int) complete_response, (int) push_body);\n      fflush(log_fp);\n    }\n  }\n  vector[0].buf = (char *) _MHD_DROP_CONST (header);\n  vector[0].len = (unsigned long) header_size;\n  vector[1].buf = (char *) _MHD_DROP_CONST (body);\n  vector[1].len = (unsigned long) body_size;\n\n  ret = WSASend (s, vector, 2, &vec_sent, 0, NULL, NULL);\n  if (0 == ret)\n    ret = (ssize_t) vec_sent;\n  else\n    ret = -1;\n#endif /* _WIN32 */\n\n  if (0 > ret)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (log_fp)\n    {\n      fprintf(log_fp, \"Vector send error ret=%zd err=%d\\n\", ret, err);\n      fflush(log_fp);\n    }\n\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN, no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EAGAIN vector): return %d\\n\", (int) MHD_ERR_AGAIN_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EINTR vector): return %d\\n\", (int) MHD_ERR_AGAIN_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (REMOTE DISCONNECT vector): return %d\\n\", (int) MHD_ERR_CONNRESET_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_CONNRESET_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EPIPE vector): return %d\\n\", (int) MHD_ERR_PIPE_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_PIPE_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EOPNOTSUPP vector): return %d\\n\", (int) MHD_ERR_OPNOTSUPP_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_OPNOTSUPP_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (ENOTCONN vector): return %d\\n\", (int) MHD_ERR_NOTCONN_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_NOTCONN_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EINVAL vector): return %d\\n\", (int) MHD_ERR_INVAL_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_INVAL_;\n    }\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (LOW_RESOURCES vector): return %d\\n\", (int) MHD_ERR_NOMEM_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_NOMEM_;\n    }\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n    {\n      if (log_fp)\n      {\n        fprintf(log_fp, \"EXIT (EBADF vector): return %d\\n\", (int) MHD_ERR_BADF_);\n        fclose(log_fp);\n      }\n      return MHD_ERR_BADF_;\n    }\n    /* Treat any other error as a hard error. */\n    if (log_fp)\n    {\n      fprintf(log_fp, \"EXIT (unknown vector error): return %d\\n\", (int) MHD_ERR_NOTCONN_);\n      fclose(log_fp);\n    }\n    return MHD_ERR_NOTCONN_;\n  }\n#ifdef EPOLL_SUPPORT\n  else if ((header_size + body_size) > (size_t) ret)\n    connection->epoll_state &=\n      ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n\n  /* If there is a need to push the data from network buffers\n   * call post_send_setopt(). */\n  if ( (push_body) &&\n       ((header_size + body_size) == (size_t) ret) )\n  {\n    /* Complete reply has been sent. */\n    /* If TLS connection is used then next final send() will be\n     * without MSG_MORE support. If non-TLS connection is used\n     * it's unknown whether next 'send' will be plain send() / sendmsg() or\n     * sendfile() will be used so assume that next final send() will be\n     * the same, like for this response. */\n    post_send_setopt (connection,\n#ifdef HAVE_SENDMSG\n                      true,\n#else  /* ! HAVE_SENDMSG */\n                      false,\n#endif /* ! HAVE_SENDMSG */\n                      true);\n  }\n  else if ( (push_hdr) &&\n            (header_size <= (size_t) ret))\n  {\n    /* The header has been sent completely and there is a\n     * need to push the header data. */\n    /* Luckily the type of send function will be used next is known. */\n    post_send_setopt (connection,\n#if defined(_MHD_HAVE_SENDFILE)\n                      MHD_resp_sender_std == connection->rp.resp_sender,\n#else  /* ! _MHD_HAVE_SENDFILE */\n                      true,\n#endif /* ! _MHD_HAVE_SENDFILE */\n                      true);\n  }\n\n  if (log_fp)\n  {\n    fprintf(log_fp, \"EXIT (vector path): return %zd (ret) header_size=%zu body_size=%zu push_hdr=%d push_body=%d\\n\",\n            ret, header_size, body_size, (int) push_hdr, (int) push_body);\n    fclose(log_fp);\n  }\n\n  return ret;\n#else  /* ! MHD_VECT_SEND */\n  mhd_assert (false);\n  if (log_fp)\n  {\n    fprintf(log_fp, \"EXIT (no vector support unreachable): return %d\\n\", (int) MHD_ERR_CONNRESET_);\n    fclose(log_fp);\n  }\n  return MHD_ERR_CONNRESET_; /* Unreachable. Mute warnings. */\n#endif /* ! MHD_VECT_SEND */\n}\n"
}