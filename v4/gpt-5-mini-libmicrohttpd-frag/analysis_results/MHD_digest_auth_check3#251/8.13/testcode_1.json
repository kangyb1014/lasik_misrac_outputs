{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nMHD_digest_auth_check3 takes a connection pointer but does not modify it and simply forwards it to digest_auth_check_all. If digest_auth_check_all treats the connection as input-only (does not modify it), then the parameter should be declared const (i.e. const struct MHD_Connection *connection). Because the declaration uses struct MHD_Connection *connection without const even though it appears to be used read-only, this is a violation of MISRA C 2023 Rule 8.13. (If digest_auth_check_all or other callees actually need to modify the connection, then the non-const declaration would be justified and there would be no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_digest_auth_check3 code that contains useful probe functions that print useful logs to a file \"/tmp/logs/785.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check3:\n```c\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  mhd_assert (NULL != password);\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                password,\n                                NULL,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_digest_auth_check3 code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_digest_auth_check3 with it.\n  - Your function must have the exact same signature as MHD_digest_auth_check3.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_digest_auth_check3 to check logs.\n  - Your function MUST preserve the original logic of MHD_digest_auth_check3 as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_digest_auth_check3 will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_digest_auth_check3 as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  /* Preserve the original precondition check */\n  mhd_assert (NULL != password);\n\n  /* Attempt to log entry and parameter state for replay / debugging. */\n  {\n    FILE *f = fopen(\"/tmp/logs/785.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_digest_auth_check3: entered\\n\");\n      fprintf(f, \"  connection=%p (NULL? %s)\\n\", (void *)connection, (connection == NULL) ? \"yes\" : \"no\");\n      fprintf(f, \"  realm=%s\\n\", (realm != NULL) ? realm : \"(null)\");\n      fprintf(f, \"  username=%s\\n\", (username != NULL) ? username : \"(null)\");\n      fprintf(f, \"  password=%s\\n\", (password != NULL) ? password : \"(null)\");\n      fprintf(f, \"  nonce_timeout=%u max_nc=%lu mqop=%d malgo3=%d\\n\",\n              nonce_timeout,\n              (unsigned long) max_nc,\n              (int) mqop,\n              (int) malgo3);\n      fclose(f);\n    }\n    else\n    {\n      /* Fallback location if /tmp/logs doesn't exist or cannot be opened. */\n      FILE *f2 = fopen(\"/tmp/785.txt\", \"a\");\n      if (f2)\n      {\n        fprintf(f2, \"MHD_digest_auth_check3: entered (fallback)\\n\");\n        fprintf(f2, \"  connection=%p (NULL? %s)\\n\", (void *)connection, (connection == NULL) ? \"yes\" : \"no\");\n        fprintf(f2, \"  realm=%s\\n\", (realm != NULL) ? realm : \"(null)\");\n        fprintf(f2, \"  username=%s\\n\", (username != NULL) ? username : \"(null)\");\n        fprintf(f2, \"  password=%s\\n\", (password != NULL) ? password : \"(null)\");\n        fprintf(f2, \"  nonce_timeout=%u max_nc=%lu mqop=%d malgo3=%d\\n\",\n                nonce_timeout,\n                (unsigned long) max_nc,\n                (int) mqop,\n                (int) malgo3);\n        fclose(f2);\n      }\n    }\n  }\n\n  /* Call the original worker function, preserving original behavior exactly. */\n  enum MHD_DigestAuthResult res = digest_auth_check_all (connection,\n                                                         realm,\n                                                         username,\n                                                         password,\n                                                         NULL,\n                                                         nonce_timeout,\n                                                         max_nc,\n                                                         mqop,\n                                                         malgo3);\n\n  /* Log the result so callers can see the returned value and confirm whether\n     the connection was treated as input-only by the callee. */\n  {\n    FILE *f = fopen(\"/tmp/logs/785.txt\", \"a\");\n    if (f)\n    {\n      fprintf(f, \"MHD_digest_auth_check3: returning res=%d\\n\", (int) res);\n      fclose(f);\n    }\n    else\n    {\n      FILE *f2 = fopen(\"/tmp/785.txt\", \"a\");\n      if (f2)\n      {\n        fprintf(f2, \"MHD_digest_auth_check3: returning res=%d (fallback)\\n\", (int) res);\n        fclose(f2);\n      }\n    }\n  }\n\n  return res;\n}\n"
}