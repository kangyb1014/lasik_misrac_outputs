{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(tokens, 0, tokens_len) will read tokens[0]..tokens[tokens_len-1]. If tokens_len can be larger than the actual size of the object pointed to by tokens (for example tokens points to a short string or buffer of length 3 but tokens_len is 10), memchr will access beyond the object bounds causing undefined behavior. The subsequent mhd_assert(...) does not prevent the out-of-bounds read because memchr is invoked with the possibly-too-large length. Therefore this usage can violate Rule 21.17 when tokens_len does not accurately reflect the object size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_remove_tokens_caseless_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_remove_tokens_caseless_:\n```c\nbool\nMHD_str_remove_tokens_caseless_ (char *str,\n                                 size_t *str_len,\n                                 const char *const tokens,\n                                 const size_t tokens_len)\n{\n  const char *const t = tokens;   /**< a short alias for @a tokens */\n  size_t pt;                      /**< position in @a tokens */\n  bool token_removed;\n\n  mhd_assert (NULL == memchr (tokens, 0, tokens_len));\n\n  token_removed = false;\n  pt = 0;\n\n  while (pt < tokens_len && *str_len != 0)\n  {\n    const char *tkn; /**< the current token */\n    size_t tkn_len;\n\n    /* Skip any initial whitespaces and empty tokens in 'tokens' */\n    while ( (pt < tokens_len) &&\n            ((' ' == t[pt]) || ('\\t' == t[pt]) || (',' == t[pt])) )\n      pt++;\n\n    if (pt >= tokens_len)\n      break; /* No more tokens, nothing to remove */\n\n    /* Found non-whitespace char which is not a comma */\n    tkn = t + pt;\n    do\n    {\n      do\n      {\n        pt++;\n      } while (pt < tokens_len &&\n               (' ' != t[pt] && '\\t' != t[pt] && ',' != t[pt]));\n      /* Found end of the token string, space, tab, or comma */\n      tkn_len = pt - (size_t) (tkn - t);\n\n      /* Skip all spaces and tabs */\n      while (pt < tokens_len && (' ' == t[pt] || '\\t' == t[pt]))\n        pt++;\n      /* Found end of the token string or non-whitespace char */\n    } while (pt < tokens_len && ',' != t[pt]);\n\n    /* 'tkn' is the input token with 'tkn_len' chars */\n    mhd_assert (0 != tkn_len);\n\n    if (*str_len == tkn_len)\n    {\n      if (MHD_str_equal_caseless_bin_n_ (str, tkn, tkn_len))\n      {\n        *str_len = 0;\n        token_removed = true;\n      }\n      continue;\n    }\n    /* 'tkn' cannot match part of 'str' if length of 'tkn' is larger\n     * than length of 'str'.\n     * It's know that 'tkn' is not equal to the 'str' (was checked previously).\n     * As 'str' is normalized when 'tkn' is not equal to the 'str'\n     * it is required that 'str' to be at least 3 chars larger then 'tkn'\n     * (the comma, the space and at least one additional character for the next\n     * token) to remove 'tkn' from the 'str'. */\n    if (*str_len > tkn_len + 2)\n    { /* Remove 'tkn' from the input string */\n      size_t pr;    /**< the 'read' position in the @a str */\n      size_t pw;    /**< the 'write' position in the @a str */\n\n      pr = 0;\n      pw = 0;\n\n      do\n      {\n        mhd_assert (pr >= pw);\n        mhd_assert ((*str_len) >= (pr + tkn_len));\n        if ( ( ((*str_len) == (pr + tkn_len)) || (',' == str[pr + tkn_len]) ) &&\n             MHD_str_equal_caseless_bin_n_ (str + pr, tkn, tkn_len) )\n        {\n          /* current token in the input string matches the 'tkn', skip it */\n          mhd_assert ((*str_len == pr + tkn_len) || \\\n                      (' ' == str[pr + tkn_len + 1])); /* 'str' must be normalized */\n          token_removed = true;\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += tkn_len + 2;\n        }\n        else\n        {\n          /* current token in the input string does not match the 'tkn',\n           * copy to the output */\n          if (0 != pw)\n          { /* not the first output token, add \", \" to separate */\n            if (pr != pw + 2)\n            {\n              str[pw++] = ',';\n              str[pw++] = ' ';\n            }\n            else\n              pw += 2; /* 'str' is not yet modified in this round */\n          }\n          do\n          {\n            if (pr != pw)\n              str[pw] = str[pr];\n            pr++;\n            pw++;\n          } while (pr < *str_len && ',' != str[pr]);\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += 2;\n        }\n        /* 'pr' should point to the next token in the input string or beyond\n         * the end of the input string */\n        if ((*str_len) < (pr + tkn_len))\n        { /* The rest of the 'str + pr' is too small to match 'tkn' */\n          if ((*str_len) > pr)\n          { /* Copy the rest of the string */\n            size_t copy_size;\n            copy_size = *str_len - pr;\n            if (0 != pw)\n            { /* not the first output token, add \", \" to separate */\n              if (pr != pw + 2)\n              {\n                str[pw++] = ',';\n                str[pw++] = ' ';\n              }\n              else\n                pw += 2; /* 'str' is not yet modified in this round */\n            }\n            if (pr != pw)\n              memmove (str + pw, str + pr, copy_size);\n            pw += copy_size;\n          }\n          *str_len = pw;\n          break;\n        }\n        mhd_assert ((' ' != str[0]) && ('\\t' != str[0]));\n        mhd_assert ((0 == pr) || (3 <= pr));\n        mhd_assert ((0 == pr) || (' ' == str[pr - 1]));\n        mhd_assert ((0 == pr) || (',' == str[pr - 2]));\n      } while (1);\n    }\n  }\n\n  return token_removed;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_remove_tokens_caseless_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_remove_tokens_caseless_ with it.\n  - Your function must have the exact same signature as MHD_str_remove_tokens_caseless_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_remove_tokens_caseless_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_remove_tokens_caseless_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_remove_tokens_caseless_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_remove_tokens_caseless_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "bool\nMHD_str_remove_tokens_caseless_ (char *str,\n                                 size_t *str_len,\n                                 const char *const tokens,\n                                 const size_t tokens_len)\n{\n  const char *const t = tokens;   /**< a short alias for @a tokens */\n  size_t pt;                      /**< position in @a tokens */\n  bool token_removed;\n\n  /* Logging: open file and record entry and initial state */\n  {\n    FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"ENTER MHD_str_remove_tokens_caseless_: str=%p, str_len=%zu, tokens=%p, tokens_len=%zu\\n\",\n              (void *) str, (size_t) (str_len ? *str_len : 0), (const void *) tokens, (size_t) tokens_len);\n      fclose(log);\n    }\n  }\n\n  /* Evaluate memchr once so we can log its result without changing behavior. */\n  {\n    const void *memchr_res = memchr (tokens, 0, tokens_len);\n    /* Log the memchr result */\n    FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (log)\n    {\n      if (memchr_res)\n      {\n        size_t offset = (const char *) memchr_res - tokens;\n        fprintf(log, \"memchr(tokens, 0, %zu) returned %p (offset=%zu)\\n\",\n                (size_t) tokens_len, memchr_res, offset);\n      }\n      else\n      {\n        fprintf(log, \"memchr(tokens, 0, %zu) returned NULL\\n\", (size_t) tokens_len);\n      }\n      fclose(log);\n    }\n\n    /* Preserve original assertion semantics */\n    mhd_assert (NULL == memchr_res);\n  }\n\n  token_removed = false;\n  pt = 0;\n\n  while (pt < tokens_len && *str_len != 0)\n  {\n    const char *tkn; /**< the current token */\n    size_t tkn_len;\n\n    /* Skip any initial whitespaces and empty tokens in 'tokens' */\n    while ( (pt < tokens_len) &&\n            ((' ' == t[pt]) || ('\\t' == t[pt]) || (',' == t[pt])) )\n      pt++;\n\n    if (pt >= tokens_len)\n      break; /* No more tokens, nothing to remove */\n\n    /* Found non-whitespace char which is not a comma */\n    tkn = t + pt;\n    do\n    {\n      do\n      {\n        pt++;\n      } while (pt < tokens_len &&\n               (' ' != t[pt] && '\\t' != t[pt] && ',' != t[pt]));\n      /* Found end of the token string, space, tab, or comma */\n      tkn_len = pt - (size_t) (tkn - t);\n\n      /* Skip all spaces and tabs */\n      while (pt < tokens_len && (' ' == t[pt] || '\\t' == t[pt]))\n        pt++;\n      /* Found end of the token string or non-whitespace char */\n    } while (pt < tokens_len && ',' != t[pt]);\n\n    /* 'tkn' is the input token with 'tkn_len' chars */\n    mhd_assert (0 != tkn_len);\n\n    /* Log discovered token metadata */\n    {\n      FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n      if (log)\n      {\n        fprintf(log, \"Found token: tkn_ptr=%p, tkn_offset=%zu, tkn_len=%zu, str_len=%zu\\n\",\n                (const void *) tkn, (size_t) (tkn - t), (size_t) tkn_len, (size_t) *str_len);\n        /* Print up to first 32 bytes of token in hex for safe inspection */\n        fprintf(log, \"Token bytes (hex):\");\n        {\n          size_t i, limit = (tkn_len < 32) ? tkn_len : 32;\n          for (i = 0; i < limit; ++i)\n            fprintf(log, \" %02x\", (unsigned char) tkn[i]);\n          if (tkn_len > limit)\n            fprintf(log, \" ...\");\n        }\n        fprintf(log, \"\\n\");\n        fclose(log);\n      }\n    }\n\n    if (*str_len == tkn_len)\n    {\n      if (MHD_str_equal_caseless_bin_n_ (str, tkn, tkn_len))\n      {\n        /* Log exact-match removal */\n        FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n        if (log)\n        {\n          fprintf(log, \"Exact match: clearing entire str (old_len=%zu)\\n\", (size_t) *str_len);\n          fclose(log);\n        }\n\n        *str_len = 0;\n        token_removed = true;\n      }\n      continue;\n    }\n    /* 'tkn' cannot match part of 'str' if length of 'tkn' is larger\n     * than length of 'str'.\n     * It's know that 'tkn' is not equal to the 'str' (was checked previously).\n     * As 'str' is normalized when 'tkn' is not equal to the 'str'\n     * it is required that 'str' to be at least 3 chars larger then 'tkn'\n     * (the comma, the space and at least one additional character for the next\n     * token) to remove 'tkn' from the 'str'. */\n    if (*str_len > tkn_len + 2)\n    { /* Remove 'tkn' from the input string */\n      size_t pr;    /**< the 'read' position in the @a str */\n      size_t pw;    /**< the 'write' position in the @a str */\n\n      pr = 0;\n      pw = 0;\n\n      do\n      {\n        mhd_assert (pr >= pw);\n        mhd_assert ((*str_len) >= (pr + tkn_len));\n        if ( ( ((*str_len) == (pr + tkn_len)) || (',' == str[pr + tkn_len]) ) &&\n             MHD_str_equal_caseless_bin_n_ (str + pr, tkn, tkn_len) )\n        {\n          /* current token in the input string matches the 'tkn', skip it */\n          mhd_assert ((*str_len == pr + tkn_len) || \\\n                      (' ' == str[pr + tkn_len + 1])); /* 'str' must be normalized */\n\n          /* Log matching token found in str at pr */\n          {\n            FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n            if (log)\n            {\n              fprintf(log, \"Match in str at pr=%zu: skipping %zu bytes (tkn_len=%zu)\\n\",\n                      (size_t) pr, (size_t) (tkn_len + 2), (size_t) tkn_len);\n              fclose(log);\n            }\n          }\n\n          token_removed = true;\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += tkn_len + 2;\n        }\n        else\n        {\n          /* current token in the input string does not match the 'tkn',\n           * copy to the output */\n          if (0 != pw)\n          { /* not the first output token, add \", \" to separate */\n            if (pr != pw + 2)\n            {\n              str[pw++] = ',';\n              str[pw++] = ' ';\n            }\n            else\n              pw += 2; /* 'str' is not yet modified in this round */\n          }\n          do\n          {\n            if (pr != pw)\n              str[pw] = str[pr];\n            pr++;\n            pw++;\n          } while (pr < *str_len && ',' != str[pr]);\n          /* Advance to the next token in the input string or beyond\n           * the end of the input string. */\n          pr += 2;\n        }\n        /* 'pr' should point to the next token in the input string or beyond\n         * the end of the input string */\n        if ((*str_len) < (pr + tkn_len))\n        { /* The rest of the 'str + pr' is too small to match 'tkn' */\n          if ((*str_len) > pr)\n          { /* Copy the rest of the string */\n            size_t copy_size;\n            copy_size = *str_len - pr;\n\n            /* Log about to copy remainder */\n            {\n              FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n              if (log)\n              {\n                fprintf(log, \"Copy remainder: pr=%zu, pw=%zu, copy_size=%zu\\n\",\n                        (size_t) pr, (size_t) pw, (size_t) copy_size);\n                fclose(log);\n              }\n            }\n\n            if (0 != pw)\n            { /* not the first output token, add \", \" to separate */\n              if (pr != pw + 2)\n              {\n                str[pw++] = ',';\n                str[pw++] = ' ';\n              }\n              else\n                pw += 2; /* 'str' is not yet modified in this round */\n            }\n            if (pr != pw)\n              memmove (str + pw, str + pr, copy_size);\n\n            /* Log memmove event */\n            {\n              FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n              if (log)\n              {\n                fprintf(log, \"memmove(str+%zu, str+%zu, %zu) called\\n\", (size_t) pw, (size_t) pr, (size_t) copy_size);\n                fclose(log);\n              }\n            }\n\n            pw += copy_size;\n          }\n          *str_len = pw;\n\n          /* Log updated str_len after copying remainder */\n          {\n            FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n            if (log)\n            {\n              fprintf(log, \"After remainder copy: new str_len=%zu\\n\", (size_t) *str_len);\n              fclose(log);\n            }\n          }\n\n          break;\n        }\n        mhd_assert ((' ' != str[0]) && ('\\t' != str[0]));\n        mhd_assert ((0 == pr) || (3 <= pr));\n        mhd_assert ((0 == pr) || (' ' == str[pr - 1]));\n        mhd_assert ((0 == pr) || (',' == str[pr - 2]));\n      } while (1);\n    }\n  }\n\n  /* Final log on exit */\n  {\n    FILE *log = fopen(\"/tmp/logs/1103.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"EXIT MHD_str_remove_tokens_caseless_: str=%p, final_str_len=%zu, token_removed=%d\\n\",\n              (void *) str, (size_t) *str_len, token_removed ? 1 : 0);\n      fclose(log);\n    }\n  }\n\n  return token_removed;\n}\n"
}