{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes 'args' (char *). If 'args' is not a valid null-terminated C string or is NULL, then MHD_parse_arguments_ may call functions from <string.h> (for example strlen, strchr, strcpy/strncpy, memcpy, etc.) and those calls can read or write past the bounds of the object referenced by 'args' (or dereference NULL). Example violation: 'args' points to a buffer of length N that does not contain a terminating '\\0' \u2014 a subsequent strlen/strchr inside MHD_parse_arguments_ will scan beyond the buffer and so violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4373.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_argument_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_argument_match with it.\n  - Your function must have the exact same signature as check_argument_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_argument_match to check logs.\n  - Your function MUST preserve the original logic of check_argument_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_argument_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_argument_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n  FILE *log = fopen(\"/tmp/logs/4373.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER check_argument_match: connection=%p args=%p\\n\", (void *)connection, (void *)args);\n    if (args == NULL)\n      fprintf(log, \"args is NULL\\n\");\n    else\n      fprintf(log, \"args is non-NULL (contents not inspected to avoid UB)\\n\");\n    fprintf(log, \"initial param setup about to start\\n\");\n  }\n\n  param.connection = connection;\n  param.num_headers = 0;\n\n  if (log)\n    fprintf(log, \"Calling MHD_parse_arguments_ with kind=%d\\n\", (int)MHD_GET_ARGUMENT_KIND);\n\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  if (log)\n    fprintf(log, \"MHD_parse_arguments_ returned %d; param.num_headers=%d\\n\", (int)ret, param.num_headers);\n\n  if (MHD_NO == ret)\n  {\n    if (log)\n    {\n      fprintf(log, \"MHD_parse_arguments_ returned MHD_NO -> returning false\\n\");\n      fclose(log);\n    }\n    return false;\n  }\n\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n      fprintf(log, \"iter header pos=%p kind=%d\\n\", (void *)pos, (int)pos->kind);\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n\n    param.num_headers--;\n\n    if (log)\n      fprintf(log, \"decremented param.num_headers -> %d\\n\", param.num_headers);\n  }\n\n  if (0 != param.num_headers)\n  {\n    if (log)\n    {\n      fprintf(log, \"argument count mismatch param.num_headers=%d -> returning false\\n\", param.num_headers);\n      fclose(log);\n    }\n    return false;\n  }\n\n  if (log)\n  {\n    fprintf(log, \"argument match OK -> returning true\\n\");\n    fclose(log);\n  }\n\n  return true;\n}\n"
}