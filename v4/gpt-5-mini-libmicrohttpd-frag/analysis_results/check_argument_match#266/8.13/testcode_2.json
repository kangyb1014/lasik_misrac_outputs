{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'char *args' is not const-qualified even though check_argument_match does not modify the string (it only passes args to MHD_parse_arguments_). According to MISRA C 2023 Rule 8.13, the pointer should be declared const when possible \u2014 e.g. change to 'const char *args'. (If MHD_parse_arguments_ genuinely requires a modifiable buffer, then keeping it non-const would be justified; given the shown code, that justification is not present.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified check_argument_match code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4375.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of check_argument_match:\n```c\nstatic bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n  if (MHD_NO == ret)\n  {\n    return false;\n  }\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n  }\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    return false;\n  }\n  return true;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified check_argument_match code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original check_argument_match with it.\n  - Your function must have the exact same signature as check_argument_match.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call check_argument_match to check logs.\n  - Your function MUST preserve the original logic of check_argument_match as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, check_argument_match will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of check_argument_match as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static bool\ncheck_argument_match (struct MHD_Connection *connection,\n                      char *args)\n{\n  struct MHD_HTTP_Req_Header *pos;\n  enum MHD_Result ret;\n  struct test_header_param param;\n\n  /* Logging probes to capture control flow and state for analysis.\n     Writes human-readable trace to /tmp/logs/4375.txt. */\n  {\n    FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      /* Try to create the directory and reopen. If system() is not\n         available in the build environment this will quietly fail and\n         logging will be skipped; original logic is preserved. */\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      /* Entry probe */\n      (void)fprintf(log, \"check_argument_match: ENTER connection=%p args=%p\\n\",\n                    (void *)connection, (void *)args);\n\n      /* Safe preview of args contents (up to 128 chars or until NUL) */\n      if (args != NULL)\n      {\n        char preview[129];\n        size_t i;\n        for (i = 0U; i < 128U && args[i] != '\\0'; ++i)\n        {\n          /* Copy verbatim; non-printable characters may appear but the\n             goal is to capture what is passed in. */\n          preview[i] = args[i];\n        }\n        preview[i] = '\\0';\n        (void)fprintf(log, \"check_argument_match: args_preview=\\\"%s\\\"\\n\",\n                      preview);\n      }\n      else\n      {\n        (void)fprintf(log, \"check_argument_match: args is NULL\\n\");\n      }\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n  }\n\n  param.connection = connection;\n  param.num_headers = 0;\n  ret = MHD_parse_arguments_ (connection,\n                              MHD_GET_ARGUMENT_KIND,\n                              args,\n                              &test_header,\n                              &param);\n\n  /* Log result of MHD_parse_arguments_ */\n  {\n    FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      (void)fprintf(log, \"check_argument_match: MHD_parse_arguments_ returned=%d param.num_headers=%d\\n\",\n                    (int)ret, (int)param.num_headers);\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n  }\n\n  if (MHD_NO == ret)\n  {\n    FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      (void)fprintf(log, \"check_argument_match: EARLY RETURN false (MHD_NO)\\n\");\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n    return false;\n  }\n\n  /* also check that the number of headers matches */\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      (void)fprintf(log, \"check_argument_match: iter header pos=%p kind=%d\\n\",\n                    (void *)pos, (int)pos->kind);\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n\n    if (MHD_GET_ARGUMENT_KIND != pos->kind)\n      continue;\n    param.num_headers--;\n\n    /* Log the decrement */\n    log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      (void)fprintf(log, \"check_argument_match: decremented param.num_headers now=%d\\n\",\n                    (int)param.num_headers);\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n  }\n\n  if (0 != param.num_headers)\n  {\n    /* argument count mismatch */\n    FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    if (NULL == log)\n    {\n      (void)system(\"mkdir -p /tmp/logs\");\n      log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n    }\n    if (NULL != log)\n    {\n      (void)fprintf(log, \"check_argument_match: RETURN false (param.num_headers=%d)\\n\",\n                    (int)param.num_headers);\n      (void)fflush(log);\n      (void)fclose(log);\n    }\n    return false;\n  }\n\n  FILE *log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n  if (NULL == log)\n  {\n    (void)system(\"mkdir -p /tmp/logs\");\n    log = fopen(\"/tmp/logs/4375.txt\", \"a\");\n  }\n  if (NULL != log)\n  {\n    (void)fprintf(log, \"check_argument_match: RETURN true\\n\");\n    (void)fflush(log);\n    (void)fclose(log);\n  }\n\n  return true;\n}\n"
}