{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation when key is not a valid NUL-terminated string or is NULL. For example, if key == NULL then strlen(key) dereferences a null pointer (out-of-bounds access). Similarly, if key points to a buffer that is not NUL-terminated within its allocated bounds, strlen will read beyond the object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified try_get_value code that contains useful probe functions that print useful logs to a file \"/tmp/logs/233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of try_get_value:\n```c\nstatic void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n\n  if (NULL != *destination)\n    return;\n  bpos = buf;\n  klen = strlen (key);\n  while (NULL != (spos = strstr (bpos, key)))\n  {\n    if ( (spos[klen] != '=') ||\n         ( (spos != buf) &&\n           (spos[-1] != ' ') ) )\n    {\n      /* no match */\n      bpos = spos + 1;\n      continue;\n    }\n    if (spos[klen + 1] != '\"')\n      return;                   /* not quoted */\n    if (NULL == (endv = strchr (&spos[klen + 2],\n                                '\\\"')))\n      return;                   /* no end-quote */\n    vlen = (size_t) (endv - spos) - klen - 1;\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n      return;                   /* out of memory */\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n    return;                     /* success */\n  }\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified try_get_value code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original try_get_value with it.\n  - Your function must have the exact same signature as try_get_value.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call try_get_value to check logs.\n  - Your function MUST preserve the original logic of try_get_value as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, try_get_value will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of try_get_value as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\ntry_get_value (const char *buf,\n               const char *key,\n               char **destination)\n{\n  const char *spos;\n  const char *bpos;\n  const char *endv;\n  size_t klen;\n  size_t vlen;\n  FILE *log = fopen(\"/tmp/logs/233.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"ENTER try_get_value: buf=%p key=%p destination=%p\\n\",\n            (const void *) buf, (const void *) key, (void *) destination);\n    /* Attempt to log current *destination if pointer is non-NULL. */\n    if (destination != NULL)\n      fprintf(log, \"  initial *destination=%p\\n\", (void *) *destination);\n    fflush(log);\n  }\n\n  if (NULL != *destination)\n  {\n    if (log)\n    {\n      fprintf(log, \"EARLY RETURN: *destination is already set (%p)\\n\", (void *) *destination);\n      fclose(log);\n    }\n    return;\n  }\n\n  bpos = buf;\n\n  if (log)\n  {\n    fprintf(log, \"ABOUT TO CALL strlen(key): key=%p\\n\", (const void *) key);\n    fflush(log);\n  }\n\n  /* Preserve original behavior: call strlen(key) (may crash if key == NULL).\n     We log immediately before and after to capture the pointer and length. */\n  klen = strlen (key);\n\n  if (log)\n  {\n    fprintf(log, \"AFTER strlen: klen=%zu\\n\", klen);\n    fflush(log);\n  }\n\n  while (NULL != (spos = strstr (bpos, key)))\n  {\n    if (log)\n    {\n      fprintf(log, \"LOOP: bpos=%p spos=%p\\n\", (const void *) bpos, (const void *) spos);\n      fflush(log);\n    }\n\n    if ( (spos[klen] != '=') ||\n         ( (spos != buf) &&\n           (spos[-1] != ' ') ) )\n    {\n      /* no match */\n      if (log)\n      {\n        /* Log the inspected characters and reasons for mismatch. */\n        fprintf(log, \"  NO MATCH at spos=%p: spos[klen]=%c (0x%02x) expected '='; previous_char=%c (0x%02x)\\n\",\n                (const void *) spos,\n                (int) (unsigned char) spos[klen], (unsigned char) spos[klen],\n                (int) (unsigned char) ((spos != buf) ? spos[-1] : '\\0'),\n                (unsigned char) ((spos != buf) ? spos[-1] : '\\0'));\n        fflush(log);\n      }\n      bpos = spos + 1;\n      continue;\n    }\n    if (spos[klen + 1] != '\"')\n    {\n      if (log)\n      {\n        fprintf(log, \"RETURN: value not quoted: spos[%zu]=%c\\n\", (size_t) (klen + 1), (int) (unsigned char) spos[klen + 1]);\n        fclose(log);\n      }\n      return;                   /* not quoted */\n    }\n    if (NULL == (endv = strchr (&spos[klen + 2],\n                                '\"')))\n    {\n      if (log)\n      {\n        fprintf(log, \"RETURN: no end-quote found starting at %p\\n\", (const void *) &spos[klen + 2]);\n        fclose(log);\n      }\n      return;                   /* no end-quote */\n    }\n    vlen = (size_t) (endv - spos) - klen - 1;\n\n    if (log)\n    {\n      fprintf(log, \"FOUND value: endv=%p vlen=%zu mallocing vlen=%zu\\n\",\n              (const void *) endv, vlen, vlen);\n      fflush(log);\n    }\n\n    *destination = malloc (vlen);\n    if (NULL == *destination)\n    {\n      if (log)\n      {\n        fprintf(log, \"RETURN: out of memory allocating %zu bytes\\n\", vlen);\n        fclose(log);\n      }\n      return;                   /* out of memory */\n    }\n\n    if (log)\n    {\n      fprintf(log, \"malloc succeeded: *destination=%p; preparing to write terminating NUL at index %zu\\n\",\n              (void *) *destination, (vlen > 0) ? (vlen - 1) : 0);\n      fflush(log);\n    }\n\n    (*destination)[vlen - 1] = '\\0';\n    memcpy (*destination,\n            &spos[klen + 2],\n            vlen - 1);\n\n    if (log)\n    {\n      /* Log a short snapshot of the copied value (if small) without overrunning logs.\n         We print up to 64 bytes or until NUL. */\n      size_t i;\n      size_t limit = (vlen - 1) < 64 ? (vlen - 1) : 64;\n      fprintf(log, \"SUCCESS: copied %zu bytes to %p; value (up to %zu bytes): '\", vlen - 1, (void *) *destination, limit);\n      for (i = 0; i < limit; ++i)\n      {\n        unsigned char c = (unsigned char) (*destination)[i];\n        if (c >= 32 && c <= 126)\n          fputc(c, log);\n        else\n          fputc('.', log);\n      }\n      if (vlen - 1 > limit)\n        fprintf(log, \"...');\\n\");\n      else\n        fprintf(log, \"');\\n\");\n      fclose(log);\n    }\n    return;                     /* success */\n  }\n\n  if (log)\n  {\n    fprintf(log, \"EXIT try_get_value: no more matches\\n\");\n    fclose(log);\n  }\n}\n"
}