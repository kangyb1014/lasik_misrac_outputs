{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'c' (type 'struct MHD_Connection *') is only read in this function \u2014 e.g. const uint64_t since_actv = now - c->last_activity; \u2014 therefore it should be a pointer-to-const (e.g. const struct MHD_Connection *c). Declaring the parameter non-const when it is never used to modify the object violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified connection_get_wait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/3945.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of connection_get_wait:\n```c\nstatic uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  return mseconds_left;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified connection_get_wait code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original connection_get_wait with it.\n  - Your function must have the exact same signature as connection_get_wait.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call connection_get_wait to check logs.\n  - Your function MUST preserve the original logic of connection_get_wait as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, connection_get_wait will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of connection_get_wait as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static uint64_t\nconnection_get_wait (struct MHD_Connection *c)\n{\n  /* Logging probe: append control flow and key state to /tmp/logs/3945.txt */\n  FILE *logf = fopen(\"/tmp/logs/3945.txt\", \"a\");\n  if (logf)\n  {\n    /* Print pointer and some bytes of state; cast uint64_t values to unsigned long long\n     * to avoid depending on PRIu64 macros being available in this translation unit. */\n    unsigned long long last_act = (unsigned long long) c->last_activity;\n    unsigned long long conn_to = (unsigned long long) c->connection_timeout_ms;\n    fprintf(logf, \"ENTER connection_get_wait: c=%p last_activity=%llu connection_timeout_ms=%llu\\n\",\n            (void *)c, last_act, conn_to);\n    fflush(logf);\n  }\n\n  const uint64_t now = MHD_monotonic_msec_counter ();\n  const uint64_t since_actv = now - c->last_activity;\n  const uint64_t timeout = c->connection_timeout_ms;\n  uint64_t mseconds_left;\n\n  if (logf)\n  {\n    fprintf(logf, \"  computed now=%llu since_actv=%llu timeout=%llu\\n\",\n            (unsigned long long) now,\n            (unsigned long long) since_actv,\n            (unsigned long long) timeout);\n    fflush(logf);\n  }\n\n  mhd_assert (0 != timeout);\n  /* Keep the next lines in sync with #connection_check_timedout() to avoid\n   * undesired side-effects like busy-waiting. */\n  if (timeout < since_actv)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"  branch: timeout < since_actv (timeout=%llu < since_actv=%llu)\\n\",\n              (unsigned long long) timeout,\n              (unsigned long long) since_actv);\n      fflush(logf);\n    }\n\n    if (UINT64_MAX / 2 < since_actv)\n    {\n      const uint64_t jump_back = c->last_activity - now;\n      if (logf)\n      {\n        fprintf(logf, \"    detected large since_actv > UINT64_MAX/2, jump_back=%llu\\n\",\n                (unsigned long long) jump_back);\n        fflush(logf);\n      }\n      /* Very unlikely that it is more than quarter-million years pause.\n       * More likely that system clock jumps back. */\n      if (5000 >= jump_back)\n      { /* Jump back is less than 5 seconds, try to recover. */\n        if (logf)\n        {\n          fprintf(logf, \"    small jump_back <= 5000, returning 100\\n\");\n          fclose(logf);\n        }\n        return 100; /* Set wait time to 0.1 seconds */\n      }\n      /* Too large jump back */\n    }\n    if (logf)\n    {\n      fprintf(logf, \"  returning 0 (Connection has timed out)\\n\");\n      fclose(logf);\n    }\n    return 0; /* Connection has timed out */\n  }\n  else if (since_actv == timeout)\n  {\n    if (logf)\n    {\n      fprintf(logf, \"  branch: since_actv == timeout, returning 100 to avoid busy-wait\\n\");\n      fclose(logf);\n    }\n    /* Exact match for timeout and time from last activity.\n     * Maybe this is just a precise match or this happens because the timer\n     * resolution is too low.\n     * Set wait time to 0.1 seconds to avoid busy-waiting with low\n     * timer resolution as connection is not timed-out yet. */\n    return 100;\n  }\n  mseconds_left = timeout - since_actv;\n\n  if (logf)\n  {\n    fprintf(logf, \"  default path: mseconds_left = %llu, returning that value\\n\",\n            (unsigned long long) mseconds_left);\n    fclose(logf);\n  }\n\n  return mseconds_left;\n}\n"
}