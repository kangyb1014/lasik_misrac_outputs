{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'str' is modified inside the function (str++ in the while loop). MISRA C 2023 Rule 17.8 prohibits modifying a pointer function parameter itself (only the object pointed to may be modified). The write to *out_val is permitted (it modifies the pointed object), but incrementing the parameter 'str' violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_strx_to_uint32_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1332.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_:\n```c\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_strx_to_uint32_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_strx_to_uint32_ with it.\n  - Your function must have the exact same signature as MHD_strx_to_uint32_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_strx_to_uint32_ to check logs.\n  - Your function MUST preserve the original logic of MHD_strx_to_uint32_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_strx_to_uint32_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_strx_to_uint32_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "size_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  /* Open log file for append; may fail, in which case we continue without logging */\n  FILE *log = fopen(\"/tmp/logs/1332.txt\", \"a\");\n  if (log) {\n    fprintf(log, \"ENTER MHD_strx_to_uint32_: str=%p first_char=0x%02x out_val=%p\\n\",\n            (const void *) str,\n            (unsigned char) (str ? *str : '\\0'),\n            (void *) out_val);\n  }\n\n  if (! str || ! out_val)\n  {\n    if (log) {\n      fprintf(log, \"NULL parameter(s): str=%p out_val=%p -> return 0\\n\",\n              (const void *) str,\n              (void *) out_val);\n      fclose(log);\n    }\n    return 0;\n  }\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n\n  while (digit >= 0)\n  {\n    if (log) {\n      fprintf(log, \"LOOP: offset=%zu str=%p char=0x%02x digit=%d res_before=%u\\n\",\n              (size_t) (str - start),\n              (const void *) str,\n              (unsigned char) *str,\n              digit,\n              (unsigned) res);\n    }\n\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n      if (log) {\n        fprintf(log, \"  ACCUMULATED: res_after=%u\\n\", (unsigned) res);\n      }\n    }\n    else\n    {\n      if (log) {\n        fprintf(log, \"  OVERFLOW: res=%u digit=%d -> return 0\\n\", (unsigned) res, digit);\n        fclose(log);\n      }\n      return 0;\n    }\n\n    /* Violation scenario: the pointer parameter 'str' is incremented here (str++).\n       Log the pointer change so the control flow and state can be reproduced. */\n    str++;\n    if (log) {\n      fprintf(log, \"  str incremented to %p next_char=0x%02x\\n\",\n              (const void *) str,\n              (unsigned char) *str);\n    }\n\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n  {\n    *out_val = res;\n    if (log) {\n      fprintf(log, \"PARSED: len=%zu value=%u assigned to out_val=%p\\n\",\n              (size_t) (str - start),\n              (unsigned) res,\n              (void *) out_val);\n    }\n  }\n  else\n  {\n    if (log) {\n      fprintf(log, \"PARSED: len=0 (no digits)\\n\");\n    }\n  }\n\n  if (log) {\n    fprintf(log, \"EXIT MHD_strx_to_uint32_: returning len=%zu\\n\", (size_t) (str - start));\n    fclose(log);\n  }\n\n  return (size_t) (str - start);\n}\n"
}