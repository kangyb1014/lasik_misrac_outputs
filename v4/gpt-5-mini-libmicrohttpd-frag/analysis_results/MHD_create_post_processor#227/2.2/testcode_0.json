{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThis assignment is executed on memory returned by MHD_calloc_ (which zeroes the allocation). If the symbolic value PP_Init equals 0, the assignment ret->state = PP_Init; is redundant: removing it would not change program behaviour, so it would be dead code (Rule 2.2 violated). If PP_Init is non\u2011zero, the assignment is required and not dead code. Recommendation: verify the numeric value of PP_Init; if it is 0 either remove the assignment or change the initialization so that the intent is clear (e.g. document or use a nonzero sentinel).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1688.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_post_processor code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_post_processor with it.\n  - Your function must have the exact same signature as MHD_create_post_processor.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_post_processor to check logs.\n  - Your function MUST preserve the original logic of MHD_create_post_processor as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_post_processor will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  /* Minimal entry probe: record that function was entered and key inputs */\n  {\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"MHD_create_post_processor ENTER: connection=%p buffer_size=%zu iter=%p iter_cls=%p\\n\",\n              (void *)connection, buffer_size, (void *)iter, iter_cls);\n      fclose(log);\n    }\n  }\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\\\"') &&\n         (boundary[blen - 1] == '\\\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n  {\n    /* Log allocation failure */\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"MHD_create_post_processor: calloc failed, requested=%zu bytes\\n\",\n              sizeof (struct MHD_PostProcessor) + buffer_size + 1);\n      fclose(log);\n    }\n    return NULL;\n  }\n\n  /* Log state of freshly allocated memory and relevant constants before initializing fields */\n  {\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      /* Attempt to capture the value that is present in the state field BEFORE assignment. */\n      /* Note: this probes the allocated memory; if MHD_calloc_ zeroed it, this will likely be 0. */\n      int state_before = (int) ret->state;\n      /* Log the numeric value of PP_Init too (cast to int in case it's an enum). */\n      int pp_init_val = (int) PP_Init;\n      fprintf(log, \"MHD_create_post_processor: after calloc ret=%p buffer_size=%zu blen=%zu boundary=%p encoding=%p\\n\",\n              (void *)ret, buffer_size, blen, (void *)boundary, (void *)encoding);\n      fprintf(log, \"MHD_create_post_processor: state_before=%d PP_Init=%d\\n\",\n              state_before, pp_init_val);\n      fclose(log);\n    }\n  }\n\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n\n  /* Probe right before the potentially redundant assignment to detect redundancy at runtime. */\n  {\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      int state_before = (int) ret->state;\n      int pp_init_val = (int) PP_Init;\n      fprintf(log, \"MHD_create_post_processor: about to assign ret->state = PP_Init; ret=%p state_before=%d PP_Init=%d\\n\",\n              (void *)ret, state_before, pp_init_val);\n      fclose(log);\n    }\n  }\n\n  ret->state = PP_Init;\n\n  /* Probe after assignment to show effect */\n  {\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      int state_after = (int) ret->state;\n      int state_before = (int) ( (char *)ret ? ((struct MHD_PostProcessor *)ret)->state : -999 );\n      /* Note: state_before above re-reads ret->state; kept for clarity in the log. */\n      fprintf(log, \"MHD_create_post_processor: after assign ret=%p state_after=%d\\n\",\n              (void *)ret, state_after);\n      if (state_after == (int) 0) {\n        fprintf(log, \"MHD_create_post_processor: NOTE: state_after is 0; if PP_Init==0 this assignment may be redundant when calloc zeros memory\\n\");\n      }\n      /* Record a short summary to help reproduce the violation scenario: whether assignment was redundant. */\n      if (state_after == (int) PP_Init && (int) PP_Init == state_before) {\n        fprintf(log, \"MHD_create_post_processor: DETECTED: assignment appears redundant (ret->state already equals PP_Init before assignment)\\n\");\n      } else if (state_after == (int) PP_Init) {\n        fprintf(log, \"MHD_create_post_processor: assignment necessary (ret->state changed or PP_Init nonzero)\\n\");\n      }\n      fclose(log);\n    }\n  }\n\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  /* Final probe on exit to show returned object summary */\n  {\n    FILE *log = fopen(\"/tmp/logs/1688.txt\", \"a\");\n    if (log) {\n      fprintf(log, \"MHD_create_post_processor EXIT: returning ret=%p connection=%p buffer_size=%zu blen=%zu skip_rn=%d\\n\",\n              (void *)ret, (void *)ret->connection, ret->buffer_size, ret->blen, (int) ret->skip_rn);\n      fclose(log);\n    }\n  }\n\n  return ret;\n}\n"
}