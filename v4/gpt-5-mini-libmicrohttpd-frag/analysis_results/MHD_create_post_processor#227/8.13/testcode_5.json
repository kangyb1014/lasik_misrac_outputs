{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes non-const pointer parameters that are only read/forwarded and never modified, so they could be const-qualified. Specifically:\n\n- struct MHD_Connection *connection: within MHD_create_post_processor the connection is only passed to lookup functions and assigned into ret->connection; it is never modified. It could be declared as const struct MHD_Connection *connection (or at least const where only read) to satisfy Rule 8.13.\n\n- void *iter_cls: this parameter is stored in ret->cls and not modified by the function. If the closure object is not intended to be modified by callers through this API, it could be declared const void *iter_cls.\n\nThe return type (struct MHD_PostProcessor *) and the function-pointer parameter (MHD_PostDataIterator iter) are not good candidates for const in this context. Therefore the rule is violated because pointer parameters that can be const-qualified are not.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_create_post_processor code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1685.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_create_post_processor:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_create_post_processor code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_create_post_processor with it.\n  - Your function must have the exact same signature as MHD_create_post_processor.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_create_post_processor to check logs.\n  - Your function MUST preserve the original logic of MHD_create_post_processor as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_create_post_processor will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_create_post_processor as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  /* Log entry and initial parameters */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      fprintf(logf, \"ENTER MHD_create_post_processor: connection=%p buffer_size=%zu iter=%p iter_cls=%p\\n\",\n              (void *) connection, buffer_size, (void *) iter, (void *) iter_cls);\n      fclose(logf);\n    }\n  }\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      if (buffer_size < 256)\n        fprintf(logf, \"PANIC: buffer_size (%zu) < 256\\n\", buffer_size);\n      if (NULL == connection)\n        fprintf(logf, \"PANIC: connection is NULL\\n\");\n      if (NULL == iter)\n        fprintf(logf, \"PANIC: iter is NULL\\n\");\n      fclose(logf);\n    }\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  }\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      fprintf(logf, \"lookup_content_type: not found for connection=%p\\n\", (void *) connection);\n      fclose(logf);\n    }\n    return NULL;\n  }\n  mhd_assert (NULL != encoding);\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      fprintf(logf, \"content-type header: %s (connection=%p)\\n\", encoding ? encoding : \"(NULL)\", (void *) connection);\n      fclose(logf);\n    }\n  }\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n    {\n      FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n      if (logf) {\n        fprintf(logf, \"unsupported encoding: %s\\n\", encoding ? encoding : \"(NULL)\");\n        fclose(logf);\n      }\n      return NULL;\n    }\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n    {\n      FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n      if (logf) {\n        fprintf(logf, \"failed to find 'boundary=' in multipart encoding: %s\\n\", encoding ? encoding : \"(NULL)\");\n        fclose(logf);\n      }\n      return NULL; /* failed to determine boundary */\n    }\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    {\n      FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n      if (logf) {\n        fprintf(logf, \"raw boundary='%s' blen=%zu\\n\", boundary ? boundary : \"(NULL)\", blen);\n        fclose(logf);\n      }\n    }\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n    {\n      FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n      if (logf) {\n        fprintf(logf, \"invalid or too large boundary: blen=%zu buffer_size=%zu\\n\", blen, buffer_size);\n        fclose(logf);\n      }\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    }\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n      FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n      if (logf) {\n        fprintf(logf, \"stripped enclosing quotes from boundary, new blen=%zu boundary='%s'\\n\", blen, boundary ? boundary : \"(NULL)\");\n        fclose(logf);\n      }\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      fprintf(logf, \"allocation failed: size=%zu (buffer_size=%zu)\\n\", sizeof (struct MHD_PostProcessor) + buffer_size + 1, buffer_size);\n      fclose(logf);\n    }\n    return NULL;\n  }\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n\n  {\n    FILE *logf = fopen(\"/tmp/logs/1685.txt\", \"a\");\n    if (logf) {\n      fprintf(logf, \"EXIT MHD_create_post_processor: ret=%p connection=%p ikvi=%p cls=%p encoding=%s buffer_size=%zu blen=%zu boundary=%s\\n\",\n              (void *) ret,\n              (void *) ret->connection,\n              (void *) ret->ikvi,\n              (void *) ret->cls,\n              ret->encoding ? ret->encoding : \"(NULL)\",\n              ret->buffer_size,\n              ret->blen,\n              ret->boundary ? ret->boundary : \"(NULL)\");\n      fclose(logf);\n    }\n  }\n  return ret;\n}\n"
}