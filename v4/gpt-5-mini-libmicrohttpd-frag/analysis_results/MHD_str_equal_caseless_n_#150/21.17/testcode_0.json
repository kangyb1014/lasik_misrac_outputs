{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf str2 does not have a valid NUL terminator within the first maxlen bytes (for example str2 points to a buffer allocated with size < maxlen and not NUL-terminated), the expression str2[i] will read past the object bounds when i reaches the buffer length \u2014 undefined behaviour. Thus the code can access beyond the bounds of the object referenced by str2 (also dereferencing a NULL str2 would be a violation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_str_equal_caseless_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/4023.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_n_:\n```c\nint\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (0 == c2)\n      return 0 == c1;\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_str_equal_caseless_n_ code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_str_equal_caseless_n_ with it.\n  - Your function must have the exact same signature as MHD_str_equal_caseless_n_.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_str_equal_caseless_n_ to check logs.\n  - Your function MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_str_equal_caseless_n_ will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_str_equal_caseless_n_ as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int\nMHD_str_equal_caseless_n_ (const char *const str1,\n                           const char *const str2,\n                           size_t maxlen)\n{\n  size_t i;\n  FILE *logf = NULL;\n\n  /* Open log file (best-effort). We avoid changing logic if fopen fails. */\n  logf = fopen(\"/tmp/logs/4023.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"ENTER MHD_str_equal_caseless_n_: str1=%p, str2=%p, maxlen=%zu\\n\",\n            (const void *) str1, (const void *) str2, maxlen);\n    fflush(logf);\n  }\n\n  for (i = 0; i < maxlen; ++i)\n  {\n    if (logf)\n      fprintf(logf, \"ITER i=%zu: about to read str1[i] and str2[i] (pointers: %p, %p)\\n\",\n              i, (const void *) str1, (const void *) str2);\n\n    /* Preserve original accesses and behavior. These reads are exactly as in\n       the original function and therefore will reproduce any out-of-bounds\n       behaviour that existed previously. */\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n\n    if (logf)\n    {\n      /* Print character values as integers so non-printable / NUL can be seen. */\n      fprintf(logf, \"READ i=%zu: c1=(int)%d c2=(int)%d\\n\",\n              i, (int) (unsigned char) c1, (int) (unsigned char) c2);\n      fflush(logf);\n    }\n\n    if (0 == c2)\n    {\n      if (logf)\n      {\n        fprintf(logf, \"RETURN at i=%zu: c2 is NUL -> returning %d\\n\", i, (0 == c1));\n        fflush(logf);\n      }\n      if (logf) fclose(logf);\n      return 0 == c1;\n    }\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n    {\n      if (logf)\n      {\n        fprintf(logf, \"RETURN at i=%zu: chars not equal case-less -> returning 0\\n\", i);\n        fflush(logf);\n      }\n      if (logf) fclose(logf);\n      return 0;\n    }\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"LOOP COMPLETE up to maxlen=%zu -> returning %d\\n\", maxlen, ! 0);\n    fclose(logf);\n  }\n  return ! 0;\n}\n"
}