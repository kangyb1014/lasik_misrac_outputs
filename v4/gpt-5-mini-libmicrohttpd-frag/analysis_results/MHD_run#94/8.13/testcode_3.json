{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as 'struct MHD_Daemon *daemon' but within the shown body the daemon is only inspected (daemon->shutdown) and passed on to MHD_run_wait. If MHD_run and the called functions do not modify the pointed-to object (i.e. MHD_run_wait can accept a 'const struct MHD_Daemon *'), then the parameter should be declared 'const struct MHD_Daemon *daemon'. As written (no const), this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified MHD_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/15.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of MHD_run:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n  if ( (daemon->shutdown) ||\n       MHD_D_IS_USING_THREADS_ (daemon) )\n    return MHD_NO;\n\n  (void) MHD_run_wait (daemon, 0);\n  return MHD_YES;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified MHD_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original MHD_run with it.\n  - Your function must have the exact same signature as MHD_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call MHD_run to check logs.\n  - Your function MUST preserve the original logic of MHD_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, MHD_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of MHD_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "_MHD_EXTERN enum MHD_Result\nMHD_run (struct MHD_Daemon *daemon)\n{\n    /* Logging to help reproduce/report the Rule 8.13 scenario. */\n    FILE *log = fopen(\"/tmp/logs/15.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"MHD_run entered: daemon=%p\\n\", (void *)daemon);\n        /* Log the observed shutdown flag value. */\n        fprintf(log, \"daemon->shutdown=%d\\n\", (int)(daemon->shutdown));\n    }\n\n    /* Evaluate thread usage once to avoid side-effects if macro/function does work. */\n    int using_threads = MHD_D_IS_USING_THREADS_ (daemon);\n    if (log != NULL)\n    {\n        fprintf(log, \"MHD_D_IS_USING_THREADS_ = %d\\n\", using_threads);\n    }\n\n    if ( (daemon->shutdown) || using_threads )\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"Early return: MHD_NO (shutdown=%d, using_threads=%d)\\n\",\n                    (int)(daemon->shutdown), using_threads);\n            fclose(log);\n        }\n        return MHD_NO;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"About to call MHD_run_wait(daemon, 0) with daemon=%p\\n\", (void *)daemon);\n        fclose(log);\n    }\n\n    /* Preserve original behavior: call MHD_run_wait and ignore its return value. */\n    (void) MHD_run_wait (daemon, 0);\n\n    log = fopen(\"/tmp/logs/15.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"MHD_run_wait returned; returning MHD_YES for daemon=%p\\n\", (void *)daemon);\n        fclose(log);\n    }\n\n    return MHD_YES;\n}\n"
}