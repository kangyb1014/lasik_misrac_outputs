{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'mhd_assert (NULL != r);' is dead code if the mhd_assert macro is defined as a no-op (for example expands to ((void)0) or is removed when NDEBUG is set). In that case the assertion performs no action and its removal would not change program behaviour, so Rule 2.2 is violated. If, however, mhd_assert expands to an active runtime check (e.g. aborts or logs on failure) in the build used in the project, then the statement is not dead code and Rule 2.2 is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_reply_properties code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1138.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of setup_reply_properties:\n```c\nstatic void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified setup_reply_properties code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original setup_reply_properties with it.\n  - Your function must have the exact same signature as setup_reply_properties.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call setup_reply_properties to check logs.\n  - Your function MUST preserve the original logic of setup_reply_properties as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, setup_reply_properties will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of setup_reply_properties as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n  FILE *logf = NULL;\n\n  /* Open log file for append. We log control flow and key state so that\n     the assertion behavior (active vs no-op) and subsequent state can be\n     inspected later. */\n  logf = fopen(\"/tmp/logs/1138.txt\", \"a\");\n  if (logf)\n  {\n    fprintf(logf, \"setup_reply_properties: entered; connection=%p, response=%p\\n\", (void *)c, (void *)r);\n#ifdef NDEBUG\n    fprintf(logf, \"setup_reply_properties: NDEBUG is defined at compile time\\n\");\n#else\n    fprintf(logf, \"setup_reply_properties: NDEBUG is NOT defined at compile time\\n\");\n#endif\n    fflush(logf);\n  }\n\n  if (logf)\n  {\n    fprintf(logf, \"setup_reply_properties: about to evaluate mhd_assert(NULL != r)\\n\");\n    fflush(logf);\n  }\n\n  mhd_assert (NULL != r);\n\n  if (logf)\n  {\n    fprintf(logf, \"setup_reply_properties: returned from mhd_assert; response pointer: %p\\n\", (void *)r);\n    if (NULL == r)\n      fprintf(logf, \"setup_reply_properties: NOTE: r is NULL after assertion. Subsequent dereferences may crash.\\n\");\n    fflush(logf);\n  }\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n  if (logf)\n  {\n    fprintf(logf, \"setup_reply_properties (UPGRADE_SUPPORT): r->upgrade_handler=%p, use_rp_body=%d\\n\",\n            (void *)(r ? r->upgrade_handler : NULL), (int)use_rp_body);\n    fflush(logf);\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n\n  /* Emit a final summary of the important local and response-derived\n     decisions so that a reproducer can determine whether the assertion\n     was effectively dead (i.e., r was NULL but program continued until a\n     later crash) or active (caused an abort earlier). */\n  if (logf)\n  {\n    fprintf(logf, \"setup_reply_properties: summary: keepalive=%d, use_rp_body=%d, send_reply_body=%d, use_reply_body_headers=%d, chunked=%d\\n\",\n            (int)c->keepalive, (int)use_rp_body, (int)c->rp.props.send_reply_body,\n            (int)c->rp.props.use_reply_body_headers, (int)use_chunked);\n\n    /* Log a few response-internal flags (guard dereferences in case r is NULL) */\n    if (r)\n    {\n      fprintf(logf, \"setup_reply_properties: response: total_size=%llu, flags_auto=0x%08x, flags=0x%08x\\n\",\n              (unsigned long long) r->total_size,\n              (unsigned) r->flags_auto,\n              (unsigned) r->flags);\n    }\n    else\n    {\n      fprintf(logf, \"setup_reply_properties: response: r is NULL; cannot print response internals.\\n\");\n    }\n\n    fflush(logf);\n    fclose(logf);\n  }\n}\n"
}