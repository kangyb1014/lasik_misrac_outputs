{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local alias 'r' is declared as 'struct MHD_Response *const r' (a const pointer to a non-const object). In this function 'r' is only used for reading its fields (e.g. r->total_size, r->flags_auto, r->flags, r->upgrade_handler), so it could and should be declared to point to a const-qualified type (e.g. 'const struct MHD_Response *const r'). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified setup_reply_properties code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1135.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of setup_reply_properties:\n```c\nstatic void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  mhd_assert (NULL != r);\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified setup_reply_properties code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original setup_reply_properties with it.\n  - Your function must have the exact same signature as setup_reply_properties.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call setup_reply_properties to check logs.\n  - Your function MUST preserve the original logic of setup_reply_properties as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, setup_reply_properties will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of setup_reply_properties as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static void\nsetup_reply_properties (struct MHD_Connection *connection)\n{\n  struct MHD_Connection *const c = connection; /**< a short alias */\n  struct MHD_Response *const r = c->rp.response;  /**< a short alias */\n  enum replyBodyUse use_rp_body;\n  bool use_chunked;\n\n  /* Open log file for appending probe information about control flow and\n     the state of important fields that demonstrate the violation scenario. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"ENTER setup_reply_properties: connection=%p, c=%p, r=%p\\n\",\n              (void *)connection, (void *)c, (void *)r);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  mhd_assert (NULL != r);\n\n  /* Log that the assertion passed and dump some r/c state before changes. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (NULL != logf)\n    {\n      long long total_size_val = (long long) r->total_size; /* safe cast for logging */\n      fprintf(logf, \"After assert: r=%p, r->total_size=%lld, r->flags_auto=0x%X, r->flags=0x%X, r->upgrade_handler=%p\\n\",\n              (void *)r, total_size_val, (unsigned) r->flags_auto, (unsigned) r->flags, (void *) r->upgrade_handler);\n      fprintf(logf, \"Before: c->keepalive=%d, c->rp.responseCode=%d\\n\",\n              (int) c->keepalive, (int) c->rp.responseCode);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  /* ** Adjust reply properties ** */\n\n  c->keepalive = keepalive_possible (c);\n  use_rp_body = is_reply_body_needed (c, c->rp.responseCode);\n\n  /* Log the results of keepalive_possible and is_reply_body_needed */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"Computed: keepalive_possible -> %d, is_reply_body_needed -> %d\\n\",\n              (int) c->keepalive, (int) use_rp_body);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n\n  c->rp.props.send_reply_body = (use_rp_body > RP_BODY_HEADERS_ONLY);\n  c->rp.props.use_reply_body_headers = (use_rp_body >= RP_BODY_HEADERS_ONLY);\n\n#ifdef UPGRADE_SUPPORT\n  mhd_assert ( (NULL == r->upgrade_handler) ||\n               (RP_BODY_NONE == use_rp_body) );\n\n  /* Log whether upgrade_handler exists and the body usage decision. */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"UPGRADE_SUPPORT: r->upgrade_handler=%p, use_rp_body=%d\\n\",\n              (void *) r->upgrade_handler, (int) use_rp_body);\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n#endif /* UPGRADE_SUPPORT */\n\n  if (c->rp.props.use_reply_body_headers)\n  {\n    if ((MHD_SIZE_UNKNOWN == r->total_size) ||\n        (0 != (r->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED)))\n    { /* Use chunked reply encoding if possible */\n\n      /* Check whether chunked encoding is supported by the client */\n      if (! MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver))\n        use_chunked = false;\n      /* Check whether chunked encoding is allowed for the reply */\n      else if (0 != (r->flags & (MHD_RF_HTTP_1_0_COMPATIBLE_STRICT\n                                 | MHD_RF_HTTP_1_0_SERVER)))\n        use_chunked = false;\n      else\n        /* If chunked encoding is supported and allowed, and response size\n         * is unknown, use chunked even for non-Keep-Alive connections.\n         * See https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.3\n         * Also use chunked if it is enforced by application and supported by\n         * the client. */\n        use_chunked = true;\n\n      /* Log the decision path inside the chunked-possible branch */\n      {\n        FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n        if (NULL != logf)\n        {\n          fprintf(logf, \"Chunked-possible branch: http_ver=%d, http11_compat=%d, r->flags=0x%X, decided use_chunked=%d\\n\",\n                  (int) c->rq.http_ver,\n                  (int) !!MHD_IS_HTTP_VER_1_1_COMPAT (c->rq.http_ver),\n                  (unsigned) r->flags,\n                  (int) use_chunked);\n          fflush(logf);\n          fclose(logf);\n        }\n      }\n    }\n    else\n      use_chunked = false;\n\n    if ( (MHD_SIZE_UNKNOWN == r->total_size) &&\n         (! use_chunked) )\n    {\n      /* End of the stream is indicated by closure */\n      c->keepalive = MHD_CONN_MUST_CLOSE;\n\n      /* Log that we must close the connection because size unknown and not chunked */\n      FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n      if (NULL != logf)\n      {\n        fprintf(logf, \"Set MUST_CLOSE: r->total_size=%lld, use_chunked=%d, c->keepalive=%d\\n\",\n                (long long) r->total_size, (int) use_chunked, (int) c->keepalive);\n        fflush(logf);\n        fclose(logf);\n      }\n    }\n  }\n  else\n    use_chunked = false; /* chunked encoding cannot be used without body */\n\n  c->rp.props.chunked = use_chunked;\n#ifdef _DEBUG\n  c->rp.props.set = true;\n#endif /* _DEBUG */\n\n  /* Final state log for evidence and reproducibility */\n  {\n    FILE *logf = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (NULL != logf)\n    {\n      fprintf(logf, \"EXIT setup_reply_properties: c=%p, r=%p, send_reply_body=%d, use_reply_body_headers=%d, chunked=%d, set=%d\\n\",\n              (void *) c, (void *) r,\n              (int) c->rp.props.send_reply_body,\n              (int) c->rp.props.use_reply_body_headers,\n              (int) c->rp.props.chunked,\n#ifdef _DEBUG\n              (int) c->rp.props.set\n#else\n              -1\n#endif\n              );\n      fflush(logf);\n      fclose(logf);\n    }\n  }\n}\n"
}