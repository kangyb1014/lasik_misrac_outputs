{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts the thread array to a plain void *: metal_finish_threads(THREADS, (void *)tids); This discards type information and does not use a const-qualified pointer. If metal_finish_threads does not modify the tids array (which is likely), the parameter should be a pointer to a const-qualified type (e.g. const pthread_t * or const void *), and the call should pass (const void *)tids (or simply tids if the prototype matches). By forcing a (void *) cast (or by using a non-const parameter), the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified condition code that contains useful probe functions that print useful logs to a file \"/tmp/logs/485.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of condition:\n```c\nstatic int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\treturn ret;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified condition code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original condition with it.\n  - Your function must have the exact same signature as condition.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call condition to check logs.\n  - Your function MUST preserve the original logic of condition as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, condition will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of condition as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "static int condition(void)\n{\n\tint ret;\n\tint ts_created;\n\tpthread_t tids[THREADS];\n\tFILE *logf = fopen(\"/tmp/logs/485.txt\", \"a\");\n\n\t/* Log entry into the function */\n\tif (logf) {\n\t\tfprintf(logf, \"ENTER condition: tids_addr=%p THREADS=%d\\n\", (void *)tids, THREADS);\n\t\tfflush(logf);\n\t} else {\n\t\t/* Fallback to existing logging facility if file can't be opened */\n\t\tmetal_log(METAL_LOG_INFO, \"ENTER condition (no file): tids_addr=%p THREADS=%d\\n\", (void *)tids, THREADS);\n\t}\n\n\t/** TC1 consumer threads go first */\n\t/** create 10 consumer threads first */\n\tif (logf) {\n\t\tfprintf(logf, \"About to call metal_run_noblock(THREADS=%d, consumer_thread, NULL, tids=%p, &ts_created=%p)\\n\",\n\t\t\tTHREADS, (void *)tids, (void *)&ts_created);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"About to call metal_run_noblock(THREADS=%d, consumer_thread)\\n\", THREADS);\n\t}\n\n\tret = metal_run_noblock(THREADS, consumer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_run_noblock returned ret=%d ts_created=%d\\n\", ret, ts_created);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"metal_run_noblock returned ret=%d ts_created=%d\\n\", ret, ts_created);\n\t}\n\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 producer threads next */\n\tif (logf) {\n\t\tfprintf(logf, \"About to call metal_run(THREADS=%d, producer_thread)\\n\", THREADS);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"About to call metal_run(THREADS=%d, producer_thread)\\n\", THREADS);\n\t}\n\n\tret = metal_run(THREADS, producer_thread, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_run returned ret=%d\\n\", ret);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"metal_run returned ret=%d\\n\", ret);\n\t}\n\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** wait for consumer threads to finish */\n\tif (logf) {\n\t\tfprintf(logf, \"About to call metal_finish_threads(THREADS=%d, (void*)tids=%p) -- NOTE: cast to (void*) discards const type information\\n\",\n\t\t\tTHREADS, (void *)tids);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"About to call metal_finish_threads(THREADS=%d, (void*)tids)\\n\", THREADS);\n\t}\n\n\t/* ORIGINAL CALL: this is where the potential Rule 8.13 issue occurs */\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\t/** TC2 producer threads go first */\n\t/** create 10 producer threads first */\n\tif (logf) {\n\t\tfprintf(logf, \"About to call metal_run_noblock(THREADS=%d, producer_thread, NULL, tids=%p, &ts_created=%p)\\n\",\n\t\t\tTHREADS, (void *)tids, (void *)&ts_created);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"About to call metal_run_noblock(THREADS=%d, producer_thread)\\n\", THREADS);\n\t}\n\n\tret = metal_run_noblock(THREADS, producer_thread, NULL, tids,\n\t\t\t\t&ts_created);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_run_noblock returned ret=%d ts_created=%d\\n\", ret, ts_created);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"metal_run_noblock returned ret=%d ts_created=%d\\n\", ret, ts_created);\n\t}\n\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create consumer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\n\t/** create 10 consumer threads next */\n\tif (logf) {\n\t\tfprintf(logf, \"About to call metal_run(THREADS=%d, consumer_thread)\\n\", THREADS);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"About to call metal_run(THREADS=%d, consumer_thread)\\n\", THREADS);\n\t}\n\n\tret = metal_run(THREADS, consumer_thread, NULL);\n\tif (logf) {\n\t\tfprintf(logf, \"metal_run returned ret=%d\\n\", ret);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"metal_run returned ret=%d\\n\", ret);\n\t}\n\n\tif (ret < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"Failed to create producer thread: %d.\\n\",\n\t\t\t  ret);\n\t\tgoto out;\n\t}\n\nout:\n\t/** wait for producer threads to finish */\n\tif (logf) {\n\t\tfprintf(logf, \"FINAL: About to call metal_finish_threads(THREADS=%d, (void*)tids=%p) before return ret=%d\\n\",\n\t\t\tTHREADS, (void *)tids, ret);\n\t\tfflush(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"FINAL: About to call metal_finish_threads(THREADS=%d, (void*)tids) before return ret=%d\\n\", THREADS, ret);\n\t}\n\n\tmetal_finish_threads(THREADS, (void *)tids);\n\n\tif (logf) {\n\t\tfprintf(logf, \"EXIT condition: return ret=%d\\n\", ret);\n\t\tfclose(logf);\n\t} else {\n\t\tmetal_log(METAL_LOG_INFO, \"EXIT condition: return ret=%d\\n\", ret);\n\t}\n\treturn ret;\n}\n"
}