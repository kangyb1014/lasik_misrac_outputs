{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *arg' is not const-qualified. If the object pointed to by arg is intended to be read-only (i.e. metal_run and the child thread function do not modify *arg and any callees accept a const pointer), then this declaration violates MISRA C 2023 Rule 8.13. The correct form would be 'const void *arg' (and the const should be propagated to metal_run_noblock and the thread-entry prototype). If, however, the pointed-to object is legitimately modified by metal_run, the child thread, or other callees, then the non-const declaration is acceptable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/695.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_run:\n```c\nint metal_run(int threads, metal_thread_t child, void *arg)\n{\n\tpthread_t tids[threads];\n\tint error, ts_created;\n\n\terror = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n\tmetal_finish_threads(ts_created, (void *)tids);\n\n\treturn error;\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_run code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_run with it.\n  - Your function must have the exact same signature as metal_run.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_run to check logs.\n  - Your function MUST preserve the original logic of metal_run as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_run will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_run as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "int metal_run(int threads, metal_thread_t child, void *arg)\n{\n    FILE *f = fopen(\"/tmp/logs/695.txt\", \"a\");\n\n    if (f != NULL)\n    {\n        /* Log entry and basic state: number of threads, whether child is null, and arg pointer value */\n        fprintf(f, \"ENTER metal_run: threads=%d child_is_null=%d arg=%p\\n\",\n                threads,\n                (child == 0) ? 1 : 0,\n                arg);\n        fflush(f);\n    }\n\n    pthread_t tids[threads];\n    int error;\n    int ts_created;\n\n    /* Preserve original behavior */\n    error = metal_run_noblock(threads, child, arg, tids, &ts_created);\n\n    if (f != NULL)\n    {\n        /* Log result of metal_run_noblock and information about created threads */\n        fprintf(f, \"metal_run_noblock returned: error=%d ts_created=%d sizeof(pthread_t)=%zu\\n\",\n                error, ts_created, sizeof(pthread_t));\n\n        /* For visibility into the thread identifiers without making assumptions about their type,\n           dump the raw bytes of each pthread_t (up to 16 bytes) as hex. This avoids casting\n           function pointers or pthread_t to incompatible pointer types while still providing\n           reproducible evidence of what was produced by metal_run_noblock. */\n        for (int i = 0; i < ts_created; ++i)\n        {\n            unsigned char *bytes = (unsigned char *)&tids[i];\n            size_t max_dump = sizeof(pthread_t) < 16 ? sizeof(pthread_t) : 16;\n            fprintf(f, \"  tids[%d] bytes:\", i);\n            for (size_t j = 0; j < max_dump; ++j)\n            {\n                fprintf(f, \" %02x\", (unsigned)bytes[j]);\n            }\n            fprintf(f, \"\\n\");\n        }\n        fflush(f);\n    }\n\n    /* Preserve original behavior */\n    metal_finish_threads(ts_created, (void *)tids);\n\n    if (f != NULL)\n    {\n        fprintf(f, \"EXIT metal_run: returning error=%d\\n\", error);\n        fclose(f);\n    }\n\n    return error;\n}\n"
}