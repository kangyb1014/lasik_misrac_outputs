{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn function metal_virt2phys the parameter 'void *addr' is used only for reading (it's not modified), so it should be declared as 'const void *addr'. Keeping it as a non-const pointer violates MISRA C 2023 Rule 8.13. The 'unsigned long *phys' parameter is an output and should remain non-const. Suggested fix: change the signature to 'static int metal_virt2phys(const void *addr, unsigned long *phys)'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/585.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\n</response format>\n<target_code>\nHere is the code of metal_io_init:\n```c\nvoid metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\tmetal_sys_io_mem_map(io);\n}\n```\n</target_code>\n\n<instruction>\n\nPlease provide the modified metal_io_init code.\n\nThe information below explains how I\u2019ll use the function you provide. Please use it as a reference when generating code.\n1. Replacement\n  - I will parse your function and replace the original metal_io_init with it.\n  - Your function must have the exact same signature as metal_io_init.\n  - It must be a complete, self-contained definition; (no omissions, placeholders (e.g., \"...\"), or comments indicating skipped/omitted logic.)\n2. Logging / reachability\n  - I will run a test suite that is guaranteed to call metal_io_init to check logs.\n  - Your function MUST preserve the original logic of metal_io_init as much as possible.\n  - The log output must not be empty. Even if you are verifying dead code, metal_io_init will be reached; insert a minimal probe/log to demonstrate that the target function was entered.\n3. Coverage\n  - I will run the same test suite to measure coverage.\n  - Test outcomes must match those of the original code.\n  - If reproducing the rule violation necessarily causes a crash (e.g., the violation inherently triggers a crash), that is acceptable; otherwise, your function should not crash under the existing test suite so coverage can be measured.\n4. Test code constraints\n  - The test code MUST preserve the original logic of metal_io_init as much as possible.\n  - DO NOT introduce new violations to demonstrate your scenario.\n  - The test code MUST be compilable and executable.\n  - The test code MUST include line breaks.\n  - You MUST NOT define the main function.\n  - You MUST NOT define macros.\n  - You MUST NOT REDEFINE any existing identifiers, such as macros, static/global variables, or functions.\n  - Do not break string literals or include stray/unmatched double quotes; the code must parse cleanly with no quote-related errors.\n\nThese are common mistakes of generated codes. Do not make these mistakes:\n- Redefining existing functions, variables, types, or macros.\n- Broken string literals or unmatched quotes.\n- Invoking undeclared function.\n- Using undeclared member in a struct.\n- Invoking functions with wrong parameter type.\n\n</instruction>\n",
  "test_code": "void metal_io_init(struct metal_io_region *io, void *virt,\n\t      const metal_phys_addr_t *physmap, size_t size,\n\t      unsigned int page_shift, unsigned int mem_flags,\n\t      const struct metal_io_ops *ops)\n{\n\tconst struct metal_io_ops nops = {\n\t\tNULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL\n\t};\n\t/* Preserve original logic: assign fields */\n\tio->virt = virt;\n\tio->physmap = physmap;\n\tio->size = size;\n\tio->page_shift = page_shift;\n\tif (page_shift >= sizeof(io->page_mask) * CHAR_BIT)\n\t\t/* avoid overflow */\n\t\tio->page_mask = -1UL;\n\telse\n\t\tio->page_mask = (1UL << page_shift) - 1UL;\n\tio->mem_flags = mem_flags;\n\tio->ops = ops ? *ops : nops;\n\n\t/* Logging probes to capture control flow and state for debugging\n\t   Writes to /tmp/logs/585.txt so external agents can gather evidence. */\n\t{\n\t\tFILE *fp = fopen(\"/tmp/logs/585.txt\", \"a\");\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"ENTER metal_io_init\\n\");\n\t\t\tfprintf(fp, \"  params: virt=%p, physmap=%p, size=%zu, page_shift=%u, mem_flags=%u, ops=%p\\n\",\n\t\t\t\t(void *)virt, (const void *)physmap, size, page_shift, mem_flags, (const void *)ops);\n\t\t\tfprintf(fp, \"  computed: page_mask=0x%lX, io->virt=%p, io->size=%zu, io->page_shift=%u, io->mem_flags=%u\\n\",\n\t\t\t\tio->page_mask, (void *)io->virt, io->size, io->page_shift, io->mem_flags);\n\t\t\tif (ops)\n\t\t\t\tfprintf(fp, \"  note: ops provided by caller (ops pointer=%p)\\n\", (const void *)ops);\n\t\t\telse\n\t\t\t\tfprintf(fp, \"  note: default ops used (nops)\\n\");\n\t\t\tfprintf(fp, \"  about to call metal_sys_io_mem_map(io=%p)\\n\", (void *)io);\n\t\t\tfflush(fp);\n\t\t\tfclose(fp);\n\t\t}\n\t}\n\n\t/* Original behavior: perform system-specific mapping */\n\tmetal_sys_io_mem_map(io);\n\n\t/* Log return/exit so callers know mapping completed (or if program crashes, logs show entry) */\n\t{\n\t\tFILE *fp = fopen(\"/tmp/logs/585.txt\", \"a\");\n\t\tif (fp) {\n\t\t\tfprintf(fp, \"EXIT metal_io_init after metal_sys_io_mem_map\\n\");\n\t\t\tfclose(fp);\n\t\t}\n\t}\n}\n"
}